#include <stdio.h>
#include "includes.h"
#include "altera_up_avalon_character_lcd.h"
#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_video_pixel_buffer_dma.h"    // "VGA_Subsystem_VGA_Pixel_DMA"
#include "altera_up_avalon_video_dma_controller.h"		// "VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA"
#include "string.h"
#include <os/alt_sem.h>
#include "altera_up_avalon_audio.h"

/* Definition of Task Stacks */
#define   TASK_STACKSIZE       2048
OS_STK task1_stk[TASK_STACKSIZE];
OS_STK task2_stk[TASK_STACKSIZE];
OS_STK task3_stk[TASK_STACKSIZE];
OS_STK task4_stk[TASK_STACKSIZE];

/* Definition of Task Priorities */

#define TASK1_PRIORITY      10
#define TASK2_PRIORITY      11
#define TASK3_PRIORITY      12
#define TASK4_PRIORITY      9

ALT_SEM(sem)

/*variables - devices*/
alt_up_pixel_buffer_dma_dev* vgapixel;				//pixel buffer device
alt_up_video_dma_dev* vgachar;						//char buffer device
alt_up_character_lcd_dev *lcd_dev;
alt_up_parallel_port_dev *red_LEDs_dev;
alt_up_parallel_port_dev *green_LEDs_dev;
alt_up_parallel_port_dev *slider_switches_dev;
alt_up_parallel_port_dev *hex3_hex0_dev, *hex7_hex4_dev;

/* create a message to be displayed on the VGA and LCD displays */
char text_top_row[40] = "-Jan Verhoeven-\0";
char text_bottom_row[40];


void task1(void* pdata) {
	int count = 0;
	int x = 20, y=20, w = 100;
	int c = 0x001F;

	while (1) {
		ALT_SEM_PEND(sem, 0);

		sprintf(text_bottom_row, "%d", count++);

		alt_up_character_lcd_set_cursor_pos(lcd_dev, 0, 1); // set LCD cursor location to bottom row
		alt_up_character_lcd_string(lcd_dev, text_bottom_row);

		alt_up_video_dma_draw_string(vgachar, text_bottom_row, 10, 12, 0);

		alt_up_pixel_buffer_dma_draw_box(vgapixel, x, y, x+w, y+w, c, 0);

		x++;
		y++;
		if (x > 120) x=y=20;

		OSTimeDlyHMSM(0, 0, 0, 500);
		ALT_SEM_POST(sem);

		OSTimeDlyHMSM(0, 0, 1, 0);
	}
}


void task2(void* pdata)
{
	int toggle = 0;
	while (1)
	{
		ALT_SEM_PEND(sem, 0);

		if (toggle == 0)
		{
			strcpy(text_bottom_row, "Task2");
			toggle = 1;
		}
		else
		{
			strcpy(text_bottom_row, "     ");
			toggle = 0;
		}

		alt_up_character_lcd_set_cursor_pos(lcd_dev, 5, 1); // set LCD cursor location to bottom row
		alt_up_character_lcd_string(lcd_dev, text_bottom_row);

		OSTimeDlyHMSM(0, 0, 0, 500);
		ALT_SEM_POST(sem);
		OSTimeDlyHMSM(0, 0, 1, 0);
	}
}

void task3(void* pdata) {
	int sw_values, hex_values;

	while (1) {
		sw_values = alt_up_parallel_port_read_data(slider_switches_dev);

		sw_values &= 0x000000FF;
		hex_values = sw_values | sw_values << 8 | sw_values << 16 | sw_values << 24;

		alt_up_parallel_port_write_data(hex3_hex0_dev, hex_values);

		OSTimeDlyHMSM(0, 0, 0, 100);
	}
}

void task4(void* pdata) {
	unsigned int countR = 1;
	unsigned int countG = 1 << 8;
	int toggle = 1;

	while (1) {
		alt_up_parallel_port_write_data(red_LEDs_dev, countR);
		alt_up_parallel_port_write_data(green_LEDs_dev, countG);

		OSTimeDlyHMSM(0, 0, 0, 100);

		alt_up_parallel_port_write_data(red_LEDs_dev, 0x000000);
		alt_up_parallel_port_write_data(green_LEDs_dev, 0x000000);


		if (countR < 1 << 17)
			countR = countR << 1;
		else
			countR = 1;

		if (toggle)
		{
			if (countG == 1)
				countG = countG << 8;
			else
				countG = countG >> 1;
		}
		toggle = !toggle;
	}
}

/* The main function creates two task and starts multi-tasking */
int main(void) {
	alt_up_audio_dev * audio_dev;

	/* used for audio record/playback */
	unsigned int l_buf;
	unsigned int r_buf;

	// open the Audio port
	audio_dev = alt_up_audio_open_dev("/dev/Audio");

	if (audio_dev == NULL) {
		printf("%s", "Error: could not open audio device \n");
	}
	else {
		printf("%s", "Opened audio device \n");
	}

	/* read and echo audio data */
	while (1) {
		int fifospace = alt_up_audio_read_fifo_avail(audio_dev, ALT_UP_AUDIO_RIGHT);
		if (fifospace > 0) {
			// read audio buffer
			alt_up_audio_read_fifo(audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
			alt_up_audio_read_fifo(audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);

			printf("%d", r_buf);
			printf("%d", l_buf);

			// write audio buffer
			alt_up_audio_write_fifo(audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
			alt_up_audio_write_fifo(audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
		}
	}
}
