
Geluid.elf:     file format elf32-littlenios2
Geluid.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001be10 memsz 0x0001be10 flags r-x
    LOAD off    0x0001ce30 vaddr 0x0001be30 paddr 0x0001dd98 align 2**12
         filesz 0x00001f68 memsz 0x00001f68 flags rw-
    LOAD off    0x0001fd00 vaddr 0x0001fd00 paddr 0x0001fd00 align 2**12
         filesz 0x00000000 memsz 0x000033e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b454  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000794  0001b69c  0001b69c  0001c69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f68  0001be30  0001dd98  0001ce30  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000033e8  0001fd00  0001fd00  0001fd00  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000230e8  000230e8  0001ed98  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  0001ed98  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001ed98  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011b0  00000000  00000000  0001edc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002f737  00000000  00000000  0001ff70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b721  00000000  00000000  0004f6a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f5a9  00000000  00000000  0005adc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003a4c  00000000  00000000  0006a374  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000057af  00000000  00000000  0006ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00019a5f  00000000  00000000  0007356f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0008cfd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019a8  00000000  00000000  0008cff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00094086  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0009408c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00094091  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00094092  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00094093  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00094097  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0009409b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0009409f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000940a8  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000940b1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000940ba  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000061  00000000  00000000  000940c5  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abe3  00000000  00000000  00094126  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001ae257  00000000  00000000  0009ed09  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0001b69c l    d  .rodata	00000000 .rodata
0001be30 l    d  .rwdata	00000000 .rwdata
0001fd00 l    d  .bss	00000000 .bss
000230e8 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/Geluid_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0001b720 l     O .rodata	00000108 two_over_pi
0001b6a0 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0001b868 l     O .rodata	00000010 init_jk
0001b828 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001b9ba l     O .rodata	00000010 zeroes.4404
00007548 l     F .text	000000bc __sbprintf
0001b9ca l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00007758 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00009288 l     F .text	00000008 __fp_unlock
0000929c l     F .text	0000019c __sinit.part.1
00009438 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001be30 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001c274 l     O .rwdata	00000020 lc_ctype_charset
0001c254 l     O .rwdata	00000020 lc_message_charset
0001c294 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001b9fc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000bd50 l     F .text	000000fc __sprint_r.part.0
0001bb30 l     O .rodata	00000010 blanks.4348
0001bb20 l     O .rodata	00000010 zeroes.4349
0000d2dc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f494 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f5a0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f5cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f6b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f798 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f884 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000fa50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001dd0c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000fc9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001dd10 l     O .rwdata	00000004 lockid
0001fd2c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001dd14 l     O .rwdata	00000004 lockid
0001fd34 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000116cc l     F .text	00000048 OS_InitMisc
00011714 l     F .text	0000006c OS_InitRdyList
00011880 l     F .text	000000e4 OS_InitTCBList
000115ec l     F .text	000000e0 OS_InitEventList
00011780 l     F .text	00000080 OS_InitTaskIdle
00011800 l     F .text	00000080 OS_InitTaskStat
00011af0 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00013810 l     F .text	000000f4 OS_FlagTaskRdy
000135d0 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000178c0 l     F .text	00000034 alt_dev_reg
0001c87c l     O .rwdata	0000106c JTAG_UART
0001d8e8 l     O .rwdata	00000030 AV_Config
0001d918 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001d948 l     O .rwdata	0000002c Char_LCD_16x2
0001d974 l     O .rwdata	0000002c IrDA
0001d9a0 l     O .rwdata	0000002c Expansion_JP5
0001d9cc l     O .rwdata	0000002c Green_LEDs
0001d9f8 l     O .rwdata	0000002c HEX3_HEX0
0001da24 l     O .rwdata	0000002c HEX7_HEX4
0001da50 l     O .rwdata	0000002c Pushbuttons
0001da7c l     O .rwdata	0000002c Red_LEDs
0001daa8 l     O .rwdata	0000002c Slider_Switches
0001dad4 l     O .rwdata	00000038 PS2_Port
0001db0c l     O .rwdata	00000038 PS2_Port_Dual
0001db44 l     O .rwdata	0000002c Serial_Port
0001db70 l     O .rwdata	00000034 USB
0001dba4 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
0001dc00 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
0001dc5c l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0001dcb0 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000183e0 l     F .text	000002a8 altera_avalon_jtag_uart_irq
00018688 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00018e64 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001a360 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001a5c4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001a884 l     F .text	0000003c alt_get_errno
0001a8c0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001fd98 g     O .bss	00000004 alt_instruction_exception_handler
0000b860 g     F .text	00000074 _mprec_log10
0001dd62 g     O .rwdata	00000002 OSTaskNameSize
0000b94c g     F .text	0000008c __any_on
0000dd34 g     F .text	00000054 _isatty_r
0001ba08 g     O .rodata	00000028 __mprec_tinytens
0000f994 g     F .text	000000bc alt_main
00022fe8 g     O .bss	00000100 alt_irq
00019a20 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00002678 g     F .text	00000014 fabs
0000dd88 g     F .text	00000060 _lseek_r
00014030 g     F .text	000000cc OS_MemInit
0001dd98 g       *ABS*	00000000 __flash_rwdata_start
00017860 g     F .text	00000060 OSTimeSet
00018fc8 g     F .text	00000040 alt_up_character_lcd_send_cmd
00003de8 g     F .text	00000088 .hidden __eqdf2
00010340 g     F .text	00000610 OSEventPendMulti
000230e8 g       *ABS*	00000000 __alt_heap_start
0001aecc g     F .text	00000024 OSTaskCreateHook
000052f8 g     F .text	0000003c printf
0001dd3a g     O .rwdata	00000002 OSMboxEn
000109a8 g     F .text	0000004c OSIntEnter
0000e660 g     F .text	0000009c _wcrtomb_r
0000bb78 g     F .text	0000005c __sseek
000095d8 g     F .text	00000010 __sinit
0000e508 g     F .text	00000140 __swbuf_r
00019838 g     F .text	00000034 read_CE_bit
0001dd4a g     O .rwdata	00000002 OSQEn
00009be4 g     F .text	0000007c _setlocale_r
00009440 g     F .text	00000068 __sfmoreglue
00010014 g     F .text	000000cc __malloc_unlock
0001af34 g     F .text	00000020 OSTaskStatHook
00019bc0 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0001a0b4 g     F .text	00000090 alt_up_rs232_read_fd
0001fd3c g     O .bss	00000001 OSLockNesting
0001dd88 g     O .rwdata	00000002 OSDataSize
0001fd3d g     O .bss	00000001 OSRunning
0000dde8 g     F .text	0000015c memmove
0001af74 g     F .text	00000020 OSInitHookBegin
0001dd80 g     O .rwdata	00000002 OSTmrSize
000095c0 g     F .text	00000018 _cleanup
0000a9dc g     F .text	000000a8 _Balloc
00002be4 g     F .text	00000070 .hidden __fixsfsi
0001fd40 g     O .bss	00000004 OSIdleCtr
00003e70 g     F .text	000000dc .hidden __gtdf2
0001ac7c g     F .text	00000024 altera_nios2_gen2_irq_init
0001ad4c g       .text	00000000 OSStartTsk
00018f54 g     F .text	00000074 get_DDRAM_addr
00011e30 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0001dd86 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001dd26 g     O .rwdata	00000002 OSEventSize
0001fd44 g     O .bss	00000001 OSPrioHighRdy
0000d81c g     F .text	0000005c _fstat_r
0001aef0 g     F .text	00000024 OSTaskDelHook
0001fd18 g     O .bss	00000004 errno
0000268c g     F .text	000001ec floor
0000baf4 g     F .text	00000008 __seofread
0001ad2c g       .text	00000000 OSStartHighRdy
000162fc g     F .text	000001e4 OSTaskCreateExt
00013118 g     F .text	00000060 OSFlagPendGetFlagsRdy
0001dd66 g     O .rwdata	00000002 OSTaskStatStkSize
00012294 g     F .text	00000308 OSFlagAccept
00014668 g     F .text	000000b8 OSQFlush
000140fc g     F .text	00000140 OSQAccept
0001fd24 g     O .bss	00000004 alt_argv
00025cdc g       *ABS*	00000000 _gp
00016150 g     F .text	000001ac OSTaskCreate
00015c60 g     F .text	000004f0 OSTaskChangePrio
0001fd38 g     O .bss	00000004 alt_heapsem
00012104 g     F .text	00000190 OSDebugInit
000164e0 g     F .text	00000344 OSTaskDel
0001c6fc g     O .rwdata	00000180 alt_fd_list
0001fdc4 g     O .bss	00000370 OSFlagTbl
00000a0c g     F .text	0000076c __ieee754_rem_pio2
000113cc g     F .text	000000b8 OS_EventTaskRemove
0001a500 g     F .text	00000090 alt_find_dev
0000a76c g     F .text	00000148 memcpy
0001dd50 g     O .rwdata	00000002 OSRdyTblSize
00019170 g     F .text	00000050 alt_up_character_lcd_write_fd
00009290 g     F .text	0000000c _cleanup_r
00004fe0 g     F .text	000000dc .hidden __floatsidf
0001a688 g     F .text	0000007c alt_io_redirect
0000f2f8 g     F .text	000000f4 .hidden __ltdf2
0001b69c g       *ABS*	00000000 __DTOR_END__
00019708 g     F .text	00000090 alt_up_irda_write_fd
0001a040 g     F .text	00000074 alt_up_rs232_read_data
0001b26c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000100e0 g     F .text	00000120 OSEventNameGet
0001dd34 g     O .rwdata	00000002 OSFlagMax
0000b9d8 g     F .text	00000074 __fpclassifyd
0000b7bc g     F .text	000000a4 __ratio
000109f4 g     F .text	000000f8 OSIntExit
0000d2c0 g     F .text	0000001c __vfiprintf_internal
0001dd6e g     O .rwdata	00000002 OSTCBSize
0001fd45 g     O .bss	00000001 OSPrioCur
00019504 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
000188e4 g     F .text	000002bc altera_avalon_jtag_uart_read
000052c8 g     F .text	00000030 _printf_r
00002b28 g     F .text	00000064 .hidden __udivsi3
0000f6f4 g     F .text	000000a4 isatty
0001dd54 g     O .rwdata	00000002 OSStkWidth
0001ba58 g     O .rodata	000000c8 __mprec_tens
0001dd48 g     O .rwdata	00000002 OSPtrSize
00009c60 g     F .text	0000000c __locale_charset
00001178 g     F .text	000004a4 __kernel_cos
0001dd28 g     O .rwdata	00000002 OSEventTblSize
000194a4 g     F .text	00000060 alt_up_irda_disable_read_interrupt
0001aca0 g       .text	00000000 OSCtxSw
0001b1dc g     F .text	00000090 alt_icache_flush
0001fd14 g     O .bss	00000004 __malloc_top_pad
0001fd48 g     O .bss	00000004 OSTCBList
0001fd1c g     O .bss	00000004 alt_fd_list_lock
0001dce4 g     O .rwdata	00000004 __mb_cur_max
00009c90 g     F .text	0000000c _localeconv_r
0000d878 g     F .text	000004bc __sfvwrite_r
0000ade8 g     F .text	0000003c __i2b
00020134 g     O .bss	00000c30 OSMemTbl
0001fd4c g     O .bss	00000001 OSTickStepState
0000ba4c g     F .text	00000054 _sbrk_r
0001dd4c g     O .rwdata	00000002 OSQMax
00020d64 g     O .bss	00000800 OSTaskStatStk
00013c6c g     F .text	000000f0 OSMemNameGet
0001dd2c g     O .rwdata	00000002 OSFlagEn
0000df44 g     F .text	00000060 _read_r
0001dd72 g     O .rwdata	00000002 OSTimeTickHookEn
00014b18 g     F .text	00000168 OSQPost
00013904 g     F .text	000000a4 OS_FlagUnlink
0001dd04 g     O .rwdata	00000004 alt_max_fd
00019fbc g     F .text	00000044 alt_up_rs232_check_parity
000119b8 g     F .text	00000068 OS_MemCopy
00011a20 g     F .text	000000d0 OS_Sched
0000d510 g     F .text	000000f0 _fclose_r
00013b7c g     F .text	000000f0 OSMemGet
00016b0c g     F .text	000001b4 OSTaskNameSet
0001986c g     F .text	00000030 read_num_bytes_available
00009258 g     F .text	00000030 fflush
0001fd10 g     O .bss	00000004 __malloc_max_sbrked_mem
0001fd50 g     O .bss	00000004 OSCtxSwCtr
0001af54 g     F .text	00000020 OSTimeTickHook
0001a704 g     F .text	00000180 alt_irq_register
0001dd36 g     O .rwdata	00000002 OSFlagNameSize
000197d4 g     F .text	00000034 read_RI_bit
000023ac g     F .text	000002cc __kernel_sin
00011484 g     F .text	00000100 OS_EventTaskRemoveMulti
00002c54 g     F .text	000008ac .hidden __adddf3
0001127c g     F .text	00000150 OS_EventTaskWaitMulti
0000b564 g     F .text	0000010c __b2d
0001dd4e g     O .rwdata	00000002 OSQSize
0000edc0 g     F .text	00000538 .hidden __umoddi3
0000f8c0 g     F .text	000000d4 lseek
000155c8 g     F .text	0000020c OSSemPend
0001dcdc g     O .rwdata	00000004 _global_impure_ptr
0000dfa4 g     F .text	00000564 _realloc_r
0001dd38 g     O .rwdata	00000002 OSLowestPrio
000230e8 g       *ABS*	00000000 __bss_end
0001afd4 g     F .text	00000024 OSTCBInitHook
0001dd7e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001ab74 g     F .text	00000108 alt_tick
0000e848 g     F .text	00000578 .hidden __udivdi3
0000d778 g     F .text	00000024 _fputwc_r
0001dd20 g     O .rwdata	00000002 OSEventEn
0001ba30 g     O .rodata	00000028 __mprec_bigtens
0000abcc g     F .text	00000104 __s2b
0001dd7a g     O .rwdata	00000002 OSTmrCfgNameSize
0000f3ec g     F .text	000000a8 .hidden __floatunsidf
0000b2a4 g     F .text	00000060 __mcmp
000198d0 g     F .text	0000002c read_data_byte
000095f8 g     F .text	00000018 __fp_lock_all
00000850 g     F .text	000000cc check_KEYs
00013730 g     F .text	000000e0 OS_FlagInit
0001aad8 g     F .text	0000009c alt_alarm_stop
00019808 g     F .text	00000030 read_RE_bit
0001dd5c g     O .rwdata	00000002 OSTaskIdleStkSize
0001fd8c g     O .bss	00000004 alt_irq_active
00015200 g     F .text	000000b0 OSSemAccept
00013e70 g     F .text	000000d8 OSMemPut
000139a8 g     F .text	000001d4 OSMemCreate
0001fd54 g     O .bss	00000004 OSIdleCtrMax
00019544 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
0001c6d4 g     O .rwdata	00000028 alt_dev_null
0001dd70 g     O .rwdata	00000002 OSTicksPerSec
0000161c g     F .text	00000d90 __kernel_rem_pio2
00019410 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0001aca0 g       .text	00000000 OSIntCtxSw
00019a80 g     F .text	00000074 alt_up_ps2_write_data_byte
0001a340 g     F .text	00000020 alt_dcache_flush_all
0000acd0 g     F .text	00000068 __hi0bits
00004f60 g     F .text	00000080 .hidden __fixdfsi
0001fd58 g     O .bss	00000004 OSTCBFreeList
0001dd98 g       *ABS*	00000000 __ram_rwdata_end
000157d4 g     F .text	0000016c OSSemPendAbort
0001dcfc g     O .rwdata	00000008 alt_dev_list
0000fcd8 g     F .text	000000f8 write
0001dd74 g     O .rwdata	00000002 OSVersionNbr
0001be30 g       *ABS*	00000000 __ram_rodata_end
0000f608 g     F .text	000000b0 fstat
0001a144 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000f2f8 g     F .text	000000f4 .hidden __ledf2
0001dd1c g     O .rwdata	00000004 OSEndiannessTest
0000b01c g     F .text	00000140 __pow5mult
0000be64 g     F .text	0000145c ___vfiprintf_internal_r
0001fd08 g     O .bss	00000004 __nlocale_changed
00002b8c g     F .text	00000058 .hidden __umodsi3
0001dd2e g     O .rwdata	00000002 OSFlagGrpSize
000230e8 g       *ABS*	00000000 end
00019db0 g     F .text	00000098 alt_up_ps2_write_fd
00019580 g     F .text	00000044 alt_up_irda_check_parity
000182a4 g     F .text	0000013c altera_avalon_jtag_uart_init
00011c88 g     F .text	000000dc OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0001b69c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00018ee0 g     F .text	00000074 alt_avalon_timer_sc_init
00005264 g     F .text	00000064 .hidden __clzsi2
00018ba0 g     F .text	000002c4 altera_avalon_jtag_uart_write
000095e8 g     F .text	00000004 __sfp_lock_acquire
0000a688 g     F .text	000000e4 memchr
00011964 g     F .text	00000054 OS_MemClr
0001907c g     F .text	0000007c alt_up_character_lcd_write
00005334 g     F .text	000021f8 ___vfprintf_internal_r
0001ad70 g     F .text	0000015c OSTaskStkInit
0000974c g     F .text	00000310 _free_r
00009c6c g     F .text	00000010 __locale_mb_cur_max
00010fd4 g     F .text	00000198 OS_EventTaskRdy
0001b4e8 g     F .text	00000180 __call_exitprocs
0001fd5c g     O .bss	00000001 OSCPUUsage
0001fd04 g     O .bss	00000004 __mlocale_changed
0001dce8 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
0001fd90 g     O .bss	00000004 _alt_tick_rate
00014720 g     F .text	0000028c OSQPend
0000091c g     F .text	000000f0 sin
000173cc g     F .text	00000104 OSTimeDly
0000b15c g     F .text	00000148 __lshift
0001fd94 g     O .bss	00000004 _alt_nticks
0000fa8c g     F .text	000000fc read
0001792c g     F .text	00000814 alt_sys_init
000192c0 g     F .text	0000008c alt_up_character_lcd_shift_display
0001b3d0 g     F .text	00000118 __register_exitproc
0001fd5d g     O .bss	00000001 OSTaskCtr
00019ccc g     F .text	00000058 alt_up_ps2_clear_fifo
00019f80 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000174d0 g     F .text	00000160 OSTimeDlyHMSM
0000ae24 g     F .text	000001f8 __multiply
0001934c g     F .text	0000008c alt_up_character_lcd_erase_pos
0001878c g     F .text	00000068 altera_avalon_jtag_uart_close
0001be30 g       *ABS*	00000000 __ram_rwdata_start
0001b69c g       *ABS*	00000000 __ram_rodata_start
0001fd9c g     O .bss	00000028 __malloc_current_mallinfo
0001dd22 g     O .rwdata	00000002 OSEventMax
0000b670 g     F .text	0000014c __d2b
00015940 g     F .text	00000110 OSSemPost
00010b78 g     F .text	000000dc OSSchedUnlock
00018140 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001b100 g     F .text	000000dc alt_get_fd
0001fd60 g     O .bss	00000004 OSMemFreeList
00010cc4 g     F .text	000000b0 OSStatInit
0001350c g     F .text	000000c4 OSFlagQuery
0001dd58 g     O .rwdata	00000002 OSTaskCreateExtEn
0000d3f8 g     F .text	00000054 _close_r
0001b354 g     F .text	0000007c memcmp
00010fb4 g     F .text	00000020 OS_Dummy
00018200 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000230e8 g       *ABS*	00000000 __alt_stack_base
00018250 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00019448 g     F .text	0000005c alt_up_irda_enable_read_interrupt
00007604 g     F .text	00000154 __swsetup_r
00021564 g     O .bss	000001e0 OSQTbl
00003500 g     F .text	000008e8 .hidden __divdf3
000094a8 g     F .text	00000118 __sfp
0000b8d4 g     F .text	00000078 __copybits
0001c2cc g     O .rwdata	00000408 __malloc_av_
000095f4 g     F .text	00000004 __sinit_lock_release
0001fd64 g     O .bss	00000004 OSTCBHighRdy
00003f4c g     F .text	00000718 .hidden __muldf3
0000baa0 g     F .text	00000054 __sread
0001fd68 g     O .bss	00000004 OSQFreeList
00019ee0 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0001aff8 g     F .text	00000108 alt_find_file
0001a39c g     F .text	000000a4 alt_dev_llist_insert
0000fef4 g     F .text	00000120 __malloc_lock
0000fbec g     F .text	000000b0 sbrk
00010200 g     F .text	00000140 OSEventNameSet
000091fc g     F .text	0000005c _fflush_r
0000d44c g     F .text	000000c4 _calloc_r
0001fd6c g     O .bss	00000001 OSRdyGrp
0001fd00 g       *ABS*	00000000 __bss_start
0000a8b4 g     F .text	00000128 memset
00000284 g     F .text	000005cc main
0001fd28 g     O .bss	00000004 alt_envp
0001fd0c g     O .bss	00000004 __malloc_max_total_mem
000181a0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e648 g     F .text	00000018 __swbuf
0001bb5c g     O .rodata	00000100 OSUnMapTbl
0001dd52 g     O .rwdata	00000002 OSSemEn
00019234 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00013178 g     F .text	00000394 OSFlagPost
0000bbd4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000d600 g     F .text	00000014 fclose
0001116c g     F .text	00000110 OS_EventTaskWait
00019c5c g     F .text	00000070 alt_up_ps2_read_data_byte
000050bc g     F .text	000001a8 .hidden __truncdfsf2
00011d64 g     F .text	000000cc OS_TaskStatStkChk
00016824 g     F .text	00000150 OSTaskDelReq
00007958 g     F .text	00001688 _dtoa_r
00009e7c g     F .text	0000080c _malloc_r
0000e7bc g     F .text	00000030 __ascii_wctomb
0001dd08 g     O .rwdata	00000004 alt_errno
00010c54 g     F .text	00000070 OSStart
0000fe94 g     F .text	00000060 __env_unlock
00009a5c g     F .text	000000c4 _fwalk
00016cc0 g     F .text	000001d4 OSTaskResume
00013f48 g     F .text	000000e8 OSMemQuery
0001dd64 g     O .rwdata	00000002 OSTaskStatEn
000195c4 g     F .text	00000040 alt_up_irda_write_data
0001dd3e g     O .rwdata	00000002 OSMemMax
00014c80 g     F .text	00000170 OSQPostFront
00019e48 g     F .text	0000003c alt_up_ps2_open_dev
00002a30 g     F .text	00000084 .hidden __divsi3
0001fd6d g     O .bss	00000003 OSRdyTbl
0001dd18 g     O .rwdata	00000002 OSDebugEn
00019040 g     F .text	0000003c alt_up_character_lcd_open_dev
00009628 g     F .text	00000124 _malloc_trim_r
000199c4 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0001b69c g       *ABS*	00000000 __CTOR_END__
0001dd30 g     O .rwdata	00000002 OSFlagNodeSize
0001dd78 g     O .rwdata	00000002 OSTmrCfgMax
00019008 g     F .text	00000038 alt_up_character_lcd_init
0000bbdc g     F .text	000000dc strcmp
0001423c g     F .text	000001ac OSQCreate
00016974 g     F .text	00000198 OSTaskNameGet
0001b69c g       *ABS*	00000000 __flash_rodata_start
00014df0 g     F .text	0000020c OSQPostOpt
00010d74 g     F .text	00000220 OSTimeTick
0001dd60 g     O .rwdata	00000002 OSTaskMax
0001b69c g       *ABS*	00000000 __DTOR_LIST__
000152b0 g     F .text	000000d8 OSSemCreate
0001dd84 g     O .rwdata	00000002 OSTmrWheelSize
0001a1d8 g     F .text	0000003c alt_up_rs232_open_dev
00002a14 g     F .text	0000001c copysign
00003de8 g     F .text	00000088 .hidden __nedf2
0001dd5a g     O .rwdata	00000002 OSTaskDelEn
00015a50 g     F .text	00000110 OSSemQuery
000143e8 g     F .text	00000280 OSQDel
000149ac g     F .text	0000016c OSQPendAbort
000178f4 g     F .text	00000038 alt_irq_init
0000fb88 g     F .text	00000064 alt_release_fd
0001989c g     F .text	00000034 read_data_valid
000193d8 g     F .text	00000038 alt_up_character_lcd_cursor_off
0001b878 g     O .rodata	00000100 .hidden __clz_tab
0001fd00 g     O .bss	00000004 _PathLocale
00019b5c g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001b308 g     F .text	00000014 atexit
0000d398 g     F .text	00000060 _write_r
00010aec g     F .text	0000008c OSSchedLock
00009c9c g     F .text	00000018 setlocale
0001259c g     F .text	00000108 OSFlagCreate
0001dce0 g     O .rwdata	00000004 _impure_ptr
0001fd20 g     O .bss	00000004 alt_argc
00008fe0 g     F .text	0000021c __sflush_r
00002878 g     F .text	0000019c scalbn
0001a4a0 g     F .text	00000060 _do_dtors
00009c88 g     F .text	00000008 __locale_cjk_lang
0001dd2a g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
000126a4 g     F .text	00000248 OSFlagDel
0001fd70 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000b500 g     F .text	00000064 __ulp
00012b60 g     F .text	000005b8 OSFlagPend
0001dd76 g     O .rwdata	00000002 OSTmrEn
00009610 g     F .text	00000018 __fp_unlock_all
0001dcf4 g     O .rwdata	00000008 alt_fs_list
00011b64 g     F .text	00000074 OS_StrCopy
00019e84 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0001a000 g     F .text	00000040 alt_up_rs232_write_data
0001dd40 g     O .rwdata	00000002 OSMemNameSize
0001af94 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001dd6c g     O .rwdata	00000002 OSTCBPrioTblMax
00009cb4 g     F .text	0000000c localeconv
0001dd68 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001dd3c g     O .rwdata	00000002 OSMemEn
0001dd46 g     O .rwdata	00000002 OSMutexEn
0001dd98 g       *ABS*	00000000 _edata
000230e8 g       *ABS*	00000000 _end
0001fd74 g     O .bss	00000001 OSIntNesting
0000d614 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
000187f4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00017630 g     F .text	000001d4 OSTimeDlyResume
00012a14 g     F .text	0000014c OSFlagNameSet
00016e94 g     F .text	000001c0 OSTaskStkChk
0001dd42 g     O .rwdata	00000002 OSMemSize
0000bafc g     F .text	0000007c __swrite
0001dcec g     O .rwdata	00000004 __malloc_trim_threshold
00009c7c g     F .text	0000000c __locale_msgcharset
0001fd78 g     O .bss	00000004 OSTCBCur
0001b31c g     F .text	00000038 exit
00019604 g     F .text	00000074 alt_up_irda_read_data
0001dd44 g     O .rwdata	00000002 OSMemTblSize
00009b20 g     F .text	000000c4 _fwalk_reent
000198fc g     F .text	000000c8 alt_up_ps2_init
0000b304 g     F .text	000001fc __mdiff
00002ab4 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000095ec g     F .text	00000004 __sfp_lock_release
00010950 g     F .text	00000058 OSInit
00017238 g     F .text	00000124 OSTaskQuery
000190f8 g     F .text	00000078 alt_up_character_lcd_string
00015158 g     F .text	000000a8 OS_QInit
00011bd8 g     F .text	00000054 OS_StrLen
00019798 g     F .text	0000003c alt_up_irda_open_dev
00013d5c g     F .text	00000114 OSMemNameSet
0001dd5e g     O .rwdata	00000002 OSTaskProfileEn
0001fd7c g     O .bss	00000004 OSTime
00021744 g     O .bss	00000800 OSTaskIdleStk
0001b668 g     F .text	00000034 _exit
0001a214 g     F .text	0000012c alt_alarm_start
000128ec g     F .text	00000128 OSFlagNameGet
00017804 g     F .text	0000005c OSTimeGet
00009cc0 g     F .text	000001bc __smakebuf_r
00019af4 g     F .text	00000068 alt_up_ps2_wait_for_ack
0000bcb8 g     F .text	00000098 strlen
0001af14 g     F .text	00000020 OSTaskSwHook
0001a984 g     F .text	00000154 open
00021f44 g     O .bss	00000b40 OSEventTbl
00003e70 g     F .text	000000dc .hidden __gedf2
00022a84 g     O .bss	00000510 OSTCBTbl
00015b60 g     F .text	00000100 OSSemSet
0001dcf0 g     O .rwdata	00000004 __wctomb
0000be4c g     F .text	00000018 __sprint_r
0001a590 g     F .text	00000034 alt_icache_flush_all
000191c0 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001dd8c g     O .rwdata	00000004 alt_priority_mask
00015388 g     F .text	00000240 OSSemDel
0001fd80 g     O .bss	00000004 OSFlagFreeList
0001dd24 g     O .rwdata	00000002 OSEventNameSize
0000752c g     F .text	0000001c __vfprintf_internal
0001fd84 g     O .bss	00000001 OSStatRdy
00022f94 g     O .bss	00000054 OSTCBPrioTbl
0000e7ec g     F .text	0000005c _wctomb_r
0000fdd0 g     F .text	000000c4 __env_lock
00019d24 g     F .text	0000008c alt_up_ps2_read_fd
0001dd6a g     O .rwdata	00000002 OSTaskSwHookEn
00004664 g     F .text	000008fc .hidden __subdf3
00019678 g     F .text	00000090 alt_up_irda_read_fd
0000ad38 g     F .text	000000b0 __lo0bits
0001dd90 g     O .rwdata	00000008 alt_alarm_list
0001dd32 g     O .rwdata	00000002 OSFlagWidth
0001a440 g     F .text	00000060 _do_ctors
00019f40 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000e6fc g     F .text	000000c0 wcrtomb
0000f4d0 g     F .text	000000d0 close
0001fd30 g     O .bss	00000004 alt_envsem
0001fd88 g     O .bss	00000004 OSIdleCtrRun
00010f94 g     F .text	00000020 OSVersion
0001dd7c g     O .rwdata	00000002 OSTmrCfgWheelSize
0000f800 g     F .text	00000084 alt_load
0001735c g     F .text	00000070 OS_TaskStkClr
0001dd56 g     O .rwdata	00000002 OSTaskCreateEn
00011584 g     F .text	00000068 OS_EventWaitListInit
0000d79c g     F .text	00000080 fputwc
0001afb4 g     F .text	00000020 OSTaskIdleHook
000095f0 g     F .text	00000004 __sinit_lock_acquire
0000aaac g     F .text	00000120 __multadd
00017054 g     F .text	000001e4 OSTaskSuspend
0000aa84 g     F .text	00000028 _Bfree
00011c2c g     F .text	0000005c OS_TaskIdle
0001dd82 g     O .rwdata	00000002 OSTmrTblSize
00014ffc g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00109a80 	call	109a8 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	108bfa04 	addi	r2,r2,12264
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	108bfa04 	addi	r2,r2,12264
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00109f40 	call	109f4 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a82f17 	ldw	r2,-24388(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a82f17 	ldw	r2,-24388(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d6973714 	ori	gp,gp,23772
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     25c:	10bf4014 	ori	r2,r2,64768

    movhi r3, %hi(__bss_end)
     260:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     264:	18cc3a14 	ori	r3,r3,12520

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	000f8000 	call	f800 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	000f9940 	call	f994 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000280>

00000284 <main>:
 * 	4. Shows a text message on the LCD display
 * 	5. Displays the last three bytes of data received from the PS/2 port
 * 	   on the HEX displays on the DE2 board
********************************************************************************/
int main(void)
{
     284:	defffd04 	addi	sp,sp,-12
     288:	dfc00215 	stw	ra,8(sp)
     28c:	df000115 	stw	fp,4(sp)
     290:	dc000015 	stw	r16,0(sp)
     294:	df000104 	addi	fp,sp,4
     298:	023ffeb4 	movhi	r8,65530
     29c:	4208f804 	addi	r8,r8,9184
     2a0:	da37883a 	add	sp,sp,r8
	/* Declare volatile pointers to I/O registers (volatile means that IO load
	   and store instructions will be used to access these pointer locations,
	   instead of regular memory loads and stores) */
  	volatile int * green_LED_ptr = (int *) 0x10000010;		// green LED address
     2a4:	00840034 	movhi	r2,4096
     2a8:	10800404 	addi	r2,r2,16
     2ac:	00fffeb4 	movhi	r3,65530
     2b0:	18c8f804 	addi	r3,r3,9184
     2b4:	1f07883a 	add	r3,r3,fp
     2b8:	18800015 	stw	r2,0(r3)
	volatile int * audio_ptr = (int *) 0x10003040;			// audio port address
     2bc:	00840034 	movhi	r2,4096
     2c0:	108c1004 	addi	r2,r2,12352
     2c4:	013ffeb4 	movhi	r4,65530
     2c8:	2108f904 	addi	r4,r4,9188
     2cc:	2709883a 	add	r4,r4,fp
     2d0:	20800015 	stw	r2,0(r4)

	/* used for audio record/playback */
	int fifospace, leftdata, rightdata;
	int record = 0, play = 0;
     2d4:	017ffeb4 	movhi	r5,65530
     2d8:	2948fc04 	addi	r5,r5,9200
     2dc:	2f0b883a 	add	r5,r5,fp
     2e0:	28000015 	stw	zero,0(r5)
     2e4:	00bffeb4 	movhi	r2,65530
     2e8:	1088fd04 	addi	r2,r2,9204
     2ec:	1705883a 	add	r2,r2,fp
     2f0:	10000015 	stw	zero,0(r2)
	int buffer_index = 0;
     2f4:	00fffeb4 	movhi	r3,65530
     2f8:	18c8fe04 	addi	r3,r3,9208
     2fc:	1f07883a 	add	r3,r3,fp
     300:	18000015 	stw	zero,0(r3)
	float left_buffer[BUF_SIZE];
	float right_buffer[BUF_SIZE];

	/* read and echo audio data */
	record = 0;
     304:	013ffeb4 	movhi	r4,65530
     308:	2108fc04 	addi	r4,r4,9200
     30c:	2709883a 	add	r4,r4,fp
     310:	20000015 	stw	zero,0(r4)
	play = 0;
     314:	017ffeb4 	movhi	r5,65530
     318:	2948fd04 	addi	r5,r5,9204
     31c:	2f0b883a 	add	r5,r5,fp
     320:	28000015 	stw	zero,0(r5)

	double t;

	while(1)
	{
		check_KEYs ( &record, &play, &buffer_index );
     324:	00bffeb4 	movhi	r2,65530
     328:	1088fe04 	addi	r2,r2,9208
     32c:	e089883a 	add	r4,fp,r2
     330:	017ffeb4 	movhi	r5,65530
     334:	2948fd04 	addi	r5,r5,9204
     338:	e147883a 	add	r3,fp,r5
     33c:	017ffeb4 	movhi	r5,65530
     340:	2948fc04 	addi	r5,r5,9200
     344:	e145883a 	add	r2,fp,r5
     348:	200d883a 	mov	r6,r4
     34c:	180b883a 	mov	r5,r3
     350:	1009883a 	mov	r4,r2
     354:	00008500 	call	850 <check_KEYs>
		if (record)
     358:	00fffeb4 	movhi	r3,65530
     35c:	18c8fc04 	addi	r3,r3,9200
     360:	1f07883a 	add	r3,r3,fp
     364:	18800017 	ldw	r2,0(r3)
     368:	1000c526 	beq	r2,zero,680 <main+0x3fc>
		{
			*(green_LED_ptr) = 0x1;					// turn on LEDG[0]
     36c:	013ffeb4 	movhi	r4,65530
     370:	2108f804 	addi	r4,r4,9184
     374:	2709883a 	add	r4,r4,fp
     378:	20800017 	ldw	r2,0(r4)
     37c:	00c00044 	movi	r3,1
     380:	10c00015 	stw	r3,0(r2)
			fifospace = *(audio_ptr + 1);	 		// read the audio port fifospace register
     384:	017ffeb4 	movhi	r5,65530
     388:	2948f904 	addi	r5,r5,9188
     38c:	2f0b883a 	add	r5,r5,fp
     390:	28800017 	ldw	r2,0(r5)
     394:	10800117 	ldw	r2,4(r2)
     398:	00fffeb4 	movhi	r3,65530
     39c:	18c8f704 	addi	r3,r3,9180
     3a0:	1f07883a 	add	r3,r3,fp
     3a4:	18800015 	stw	r2,0(r3)
			if ( (fifospace & 0x000000FF) > BUF_THRESHOLD ) 	// check RARC
     3a8:	013ffeb4 	movhi	r4,65530
     3ac:	2108f704 	addi	r4,r4,9180
     3b0:	2709883a 	add	r4,r4,fp
     3b4:	20800017 	ldw	r2,0(r4)
     3b8:	10803fcc 	andi	r2,r2,255
     3bc:	10801850 	cmplti	r2,r2,97
     3c0:	103fd81e 	bne	r2,zero,324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000324>
			{
				// store data until the the audio-in FIFO is empty or the buffer is full
				while ( (fifospace & 0x000000FF) && (buffer_index < BUF_SIZE) )
     3c4:	0000a106 	br	64c <main+0x3c8>
				{
					//left_buffer[buffer_index] = *(audio_ptr + 2);
					//right_buffer[buffer_index] = *(audio_ptr + 3);
					//++buffer_index;

					    t = (double)buffer_index/(double)SAMPLE_RATE;
     3c8:	017ffeb4 	movhi	r5,65530
     3cc:	2948fe04 	addi	r5,r5,9208
     3d0:	2f0b883a 	add	r5,r5,fp
     3d4:	28800017 	ldw	r2,0(r5)
     3d8:	1009883a 	mov	r4,r2
     3dc:	0004fe00 	call	4fe0 <__floatsidf>
     3e0:	1011883a 	mov	r8,r2
     3e4:	1813883a 	mov	r9,r3
     3e8:	000d883a 	mov	r6,zero
     3ec:	01d039f4 	movhi	r7,16615
     3f0:	39dc0004 	addi	r7,r7,28672
     3f4:	4009883a 	mov	r4,r8
     3f8:	480b883a 	mov	r5,r9
     3fc:	00035000 	call	3500 <__divdf3>
     400:	1009883a 	mov	r4,r2
     404:	180b883a 	mov	r5,r3
     408:	00bffeb4 	movhi	r2,65530
     40c:	1088fa04 	addi	r2,r2,9192
     410:	1705883a 	add	r2,r2,fp
     414:	11000015 	stw	r4,0(r2)
     418:	00fffeb4 	movhi	r3,65530
     41c:	18c8fb04 	addi	r3,r3,9196
     420:	1f07883a 	add	r3,r3,fp
     424:	19400015 	stw	r5,0(r3)
					    left_buffer[buffer_index] = (sin(2 * PI * FREQUENCY * t)) * VOLUME;
     428:	013ffeb4 	movhi	r4,65530
     42c:	2108fe04 	addi	r4,r4,9208
     430:	2709883a 	add	r4,r4,fp
     434:	24000017 	ldw	r16,0(r4)
     438:	000d883a 	mov	r6,zero
     43c:	01d029b4 	movhi	r7,16550
     440:	39e64d04 	addi	r7,r7,-26316
     444:	017ffeb4 	movhi	r5,65530
     448:	2948fa04 	addi	r5,r5,9192
     44c:	2f0b883a 	add	r5,r5,fp
     450:	29000017 	ldw	r4,0(r5)
     454:	00bffeb4 	movhi	r2,65530
     458:	1088fb04 	addi	r2,r2,9196
     45c:	1705883a 	add	r2,r2,fp
     460:	11400017 	ldw	r5,0(r2)
     464:	0003f4c0 	call	3f4c <__muldf3>
     468:	1009883a 	mov	r4,r2
     46c:	180b883a 	mov	r5,r3
     470:	2005883a 	mov	r2,r4
     474:	2807883a 	mov	r3,r5
     478:	1009883a 	mov	r4,r2
     47c:	180b883a 	mov	r5,r3
     480:	000091c0 	call	91c <sin>
     484:	1011883a 	mov	r8,r2
     488:	1813883a 	mov	r9,r3
     48c:	000d883a 	mov	r6,zero
     490:	01d06634 	movhi	r7,16792
     494:	39f5e104 	addi	r7,r7,-10364
     498:	4009883a 	mov	r4,r8
     49c:	480b883a 	mov	r5,r9
     4a0:	0003f4c0 	call	3f4c <__muldf3>
     4a4:	1009883a 	mov	r4,r2
     4a8:	180b883a 	mov	r5,r3
     4ac:	2005883a 	mov	r2,r4
     4b0:	2807883a 	mov	r3,r5
     4b4:	1009883a 	mov	r4,r2
     4b8:	180b883a 	mov	r5,r3
     4bc:	00050bc0 	call	50bc <__truncdfsf2>
     4c0:	1007883a 	mov	r3,r2
     4c4:	8405883a 	add	r2,r16,r16
     4c8:	1085883a 	add	r2,r2,r2
     4cc:	013ffeb4 	movhi	r4,65530
     4d0:	2108f704 	addi	r4,r4,9180
     4d4:	2709883a 	add	r4,r4,fp
     4d8:	2085883a 	add	r2,r4,r2
     4dc:	10800804 	addi	r2,r2,32
     4e0:	10c00015 	stw	r3,0(r2)
					    right_buffer[buffer_index] = (sin(2 * PI * FREQUENCY * t)) * VOLUME;
     4e4:	017ffeb4 	movhi	r5,65530
     4e8:	2948fe04 	addi	r5,r5,9208
     4ec:	2f0b883a 	add	r5,r5,fp
     4f0:	2c000017 	ldw	r16,0(r5)
     4f4:	000d883a 	mov	r6,zero
     4f8:	01d029b4 	movhi	r7,16550
     4fc:	39e64d04 	addi	r7,r7,-26316
     500:	00bffeb4 	movhi	r2,65530
     504:	1088fa04 	addi	r2,r2,9192
     508:	1705883a 	add	r2,r2,fp
     50c:	11000017 	ldw	r4,0(r2)
     510:	00fffeb4 	movhi	r3,65530
     514:	18c8fb04 	addi	r3,r3,9196
     518:	1f07883a 	add	r3,r3,fp
     51c:	19400017 	ldw	r5,0(r3)
     520:	0003f4c0 	call	3f4c <__muldf3>
     524:	1009883a 	mov	r4,r2
     528:	180b883a 	mov	r5,r3
     52c:	2005883a 	mov	r2,r4
     530:	2807883a 	mov	r3,r5
     534:	1009883a 	mov	r4,r2
     538:	180b883a 	mov	r5,r3
     53c:	000091c0 	call	91c <sin>
     540:	1011883a 	mov	r8,r2
     544:	1813883a 	mov	r9,r3
     548:	000d883a 	mov	r6,zero
     54c:	01d06634 	movhi	r7,16792
     550:	39f5e104 	addi	r7,r7,-10364
     554:	4009883a 	mov	r4,r8
     558:	480b883a 	mov	r5,r9
     55c:	0003f4c0 	call	3f4c <__muldf3>
     560:	1009883a 	mov	r4,r2
     564:	180b883a 	mov	r5,r3
     568:	2005883a 	mov	r2,r4
     56c:	2807883a 	mov	r3,r5
     570:	1009883a 	mov	r4,r2
     574:	180b883a 	mov	r5,r3
     578:	00050bc0 	call	50bc <__truncdfsf2>
     57c:	1009883a 	mov	r4,r2
     580:	008000f4 	movhi	r2,3
     584:	10bb8804 	addi	r2,r2,-4576
     588:	017ffeb4 	movhi	r5,65530
     58c:	2948f704 	addi	r5,r5,9180
     590:	2f0b883a 	add	r5,r5,fp
     594:	2887883a 	add	r3,r5,r2
     598:	8405883a 	add	r2,r16,r16
     59c:	1085883a 	add	r2,r2,r2
     5a0:	1885883a 	add	r2,r3,r2
     5a4:	11000015 	stw	r4,0(r2)

					  //left_buffer[buffer_index] = 1000000000 * sin(2 * M_PI * frequency * );
					  //right_buffer[buffer_index] = sin((((2 * M_PI) * (frequency / sampling_frequency))) * buffer_index) * 10000000000;
					  //++buffer_index;

					  printf("%d\n",buffer_index);
     5a8:	00fffeb4 	movhi	r3,65530
     5ac:	18c8fe04 	addi	r3,r3,9208
     5b0:	1f07883a 	add	r3,r3,fp
     5b4:	18800017 	ldw	r2,0(r3)
     5b8:	100b883a 	mov	r5,r2
     5bc:	010000b4 	movhi	r4,2
     5c0:	212da704 	addi	r4,r4,-18788
     5c4:	00052f80 	call	52f8 <printf>

					  buffer_index++;
     5c8:	013ffeb4 	movhi	r4,65530
     5cc:	2108fe04 	addi	r4,r4,9208
     5d0:	2709883a 	add	r4,r4,fp
     5d4:	20800017 	ldw	r2,0(r4)
     5d8:	10800044 	addi	r2,r2,1
     5dc:	017ffeb4 	movhi	r5,65530
     5e0:	2948fe04 	addi	r5,r5,9208
     5e4:	2f0b883a 	add	r5,r5,fp
     5e8:	28800015 	stw	r2,0(r5)

					if (buffer_index == BUF_SIZE)
     5ec:	00bffeb4 	movhi	r2,65530
     5f0:	1088fe04 	addi	r2,r2,9208
     5f4:	1705883a 	add	r2,r2,fp
     5f8:	10c00017 	ldw	r3,0(r2)
     5fc:	00aee014 	movui	r2,48000
     600:	1880091e 	bne	r3,r2,628 <main+0x3a4>
					{
						// done recording
						record = 0;
     604:	00fffeb4 	movhi	r3,65530
     608:	18c8fc04 	addi	r3,r3,9200
     60c:	1f07883a 	add	r3,r3,fp
     610:	18000015 	stw	zero,0(r3)
						*(green_LED_ptr) = 0x0;				// turn off LEDG
     614:	013ffeb4 	movhi	r4,65530
     618:	2108f804 	addi	r4,r4,9184
     61c:	2709883a 	add	r4,r4,fp
     620:	20800017 	ldw	r2,0(r4)
     624:	10000015 	stw	zero,0(r2)
					}
					fifospace = *(audio_ptr + 1);	// read the audio port fifospace register
     628:	017ffeb4 	movhi	r5,65530
     62c:	2948f904 	addi	r5,r5,9188
     630:	2f0b883a 	add	r5,r5,fp
     634:	28800017 	ldw	r2,0(r5)
     638:	10800117 	ldw	r2,4(r2)
     63c:	00fffeb4 	movhi	r3,65530
     640:	18c8f704 	addi	r3,r3,9180
     644:	1f07883a 	add	r3,r3,fp
     648:	18800015 	stw	r2,0(r3)
			*(green_LED_ptr) = 0x1;					// turn on LEDG[0]
			fifospace = *(audio_ptr + 1);	 		// read the audio port fifospace register
			if ( (fifospace & 0x000000FF) > BUF_THRESHOLD ) 	// check RARC
			{
				// store data until the the audio-in FIFO is empty or the buffer is full
				while ( (fifospace & 0x000000FF) && (buffer_index < BUF_SIZE) )
     64c:	013ffeb4 	movhi	r4,65530
     650:	2108f704 	addi	r4,r4,9180
     654:	2709883a 	add	r4,r4,fp
     658:	20800017 	ldw	r2,0(r4)
     65c:	10803fcc 	andi	r2,r2,255
     660:	103f3026 	beq	r2,zero,324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000324>
     664:	017ffeb4 	movhi	r5,65530
     668:	2948fe04 	addi	r5,r5,9208
     66c:	2f0b883a 	add	r5,r5,fp
     670:	28800017 	ldw	r2,0(r5)
     674:	00eedfd4 	movui	r3,47999
     678:	18bf530e 	bge	r3,r2,3c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70003c8>
     67c:	003f2906 	br	324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000324>
					}
					fifospace = *(audio_ptr + 1);	// read the audio port fifospace register
				}
			}
		}
		else if (play)
     680:	00fffeb4 	movhi	r3,65530
     684:	18c8fd04 	addi	r3,r3,9204
     688:	1f07883a 	add	r3,r3,fp
     68c:	18800017 	ldw	r2,0(r3)
     690:	103f2426 	beq	r2,zero,324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000324>
		{
			*(green_LED_ptr) = 0x2;					// turn on LEDG_1
     694:	013ffeb4 	movhi	r4,65530
     698:	2108f804 	addi	r4,r4,9184
     69c:	2709883a 	add	r4,r4,fp
     6a0:	20800017 	ldw	r2,0(r4)
     6a4:	00c00084 	movi	r3,2
     6a8:	10c00015 	stw	r3,0(r2)
			fifospace = *(audio_ptr + 1);	 		// read the audio port fifospace register
     6ac:	017ffeb4 	movhi	r5,65530
     6b0:	2948f904 	addi	r5,r5,9188
     6b4:	2f0b883a 	add	r5,r5,fp
     6b8:	28800017 	ldw	r2,0(r5)
     6bc:	10800117 	ldw	r2,4(r2)
     6c0:	00fffeb4 	movhi	r3,65530
     6c4:	18c8f704 	addi	r3,r3,9180
     6c8:	1f07883a 	add	r3,r3,fp
     6cc:	18800015 	stw	r2,0(r3)
			if ( (fifospace & 0x00FF0000) > BUF_THRESHOLD ) 	// check WSRC
     6d0:	013ffeb4 	movhi	r4,65530
     6d4:	2108f704 	addi	r4,r4,9180
     6d8:	2709883a 	add	r4,r4,fp
     6dc:	20800017 	ldw	r2,0(r4)
     6e0:	10803fec 	andhi	r2,r2,255
     6e4:	10801850 	cmplti	r2,r2,97
     6e8:	103f0e1e 	bne	r2,zero,324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000324>
			{
				// output data until the buffer is empty or the audio-out FIFO is full
				while ( (fifospace & 0x00FF0000) && (buffer_index < BUF_SIZE) )
     6ec:	00004b06 	br	81c <main+0x598>
				{
					*(audio_ptr + 2) = left_buffer[buffer_index];
     6f0:	017ffeb4 	movhi	r5,65530
     6f4:	2948f904 	addi	r5,r5,9188
     6f8:	2f0b883a 	add	r5,r5,fp
     6fc:	28800017 	ldw	r2,0(r5)
     700:	14000204 	addi	r16,r2,8
     704:	00fffeb4 	movhi	r3,65530
     708:	18c8fe04 	addi	r3,r3,9208
     70c:	1f07883a 	add	r3,r3,fp
     710:	18800017 	ldw	r2,0(r3)
     714:	1085883a 	add	r2,r2,r2
     718:	1085883a 	add	r2,r2,r2
     71c:	013ffeb4 	movhi	r4,65530
     720:	2108f704 	addi	r4,r4,9180
     724:	2709883a 	add	r4,r4,fp
     728:	2085883a 	add	r2,r4,r2
     72c:	10800804 	addi	r2,r2,32
     730:	10c00017 	ldw	r3,0(r2)
     734:	1809883a 	mov	r4,r3
     738:	0002be40 	call	2be4 <__fixsfsi>
     73c:	80800015 	stw	r2,0(r16)
					*(audio_ptr + 3) = right_buffer[buffer_index];
     740:	017ffeb4 	movhi	r5,65530
     744:	2948f904 	addi	r5,r5,9188
     748:	2f0b883a 	add	r5,r5,fp
     74c:	28800017 	ldw	r2,0(r5)
     750:	14000304 	addi	r16,r2,12
     754:	00bffeb4 	movhi	r2,65530
     758:	1088fe04 	addi	r2,r2,9208
     75c:	1705883a 	add	r2,r2,fp
     760:	10c00017 	ldw	r3,0(r2)
     764:	008000f4 	movhi	r2,3
     768:	10bb8804 	addi	r2,r2,-4576
     76c:	017ffeb4 	movhi	r5,65530
     770:	2948f704 	addi	r5,r5,9180
     774:	2f0b883a 	add	r5,r5,fp
     778:	2889883a 	add	r4,r5,r2
     77c:	18c5883a 	add	r2,r3,r3
     780:	1085883a 	add	r2,r2,r2
     784:	2085883a 	add	r2,r4,r2
     788:	10c00017 	ldw	r3,0(r2)
     78c:	1809883a 	mov	r4,r3
     790:	0002be40 	call	2be4 <__fixsfsi>
     794:	80800015 	stw	r2,0(r16)
					++buffer_index;
     798:	00fffeb4 	movhi	r3,65530
     79c:	18c8fe04 	addi	r3,r3,9208
     7a0:	1f07883a 	add	r3,r3,fp
     7a4:	18800017 	ldw	r2,0(r3)
     7a8:	10800044 	addi	r2,r2,1
     7ac:	013ffeb4 	movhi	r4,65530
     7b0:	2108fe04 	addi	r4,r4,9208
     7b4:	2709883a 	add	r4,r4,fp
     7b8:	20800015 	stw	r2,0(r4)

					if (buffer_index == BUF_SIZE)
     7bc:	017ffeb4 	movhi	r5,65530
     7c0:	2948fe04 	addi	r5,r5,9208
     7c4:	2f0b883a 	add	r5,r5,fp
     7c8:	28c00017 	ldw	r3,0(r5)
     7cc:	00aee014 	movui	r2,48000
     7d0:	1880091e 	bne	r3,r2,7f8 <main+0x574>
					{
						// done playback
						play = 0;
     7d4:	00bffeb4 	movhi	r2,65530
     7d8:	1088fd04 	addi	r2,r2,9204
     7dc:	1705883a 	add	r2,r2,fp
     7e0:	10000015 	stw	zero,0(r2)
						*(green_LED_ptr) = 0x0;				// turn off LEDG
     7e4:	00fffeb4 	movhi	r3,65530
     7e8:	18c8f804 	addi	r3,r3,9184
     7ec:	1f07883a 	add	r3,r3,fp
     7f0:	18800017 	ldw	r2,0(r3)
     7f4:	10000015 	stw	zero,0(r2)
					}
					fifospace = *(audio_ptr + 1);	// read the audio port fifospace register
     7f8:	013ffeb4 	movhi	r4,65530
     7fc:	2108f904 	addi	r4,r4,9188
     800:	2709883a 	add	r4,r4,fp
     804:	20800017 	ldw	r2,0(r4)
     808:	10800117 	ldw	r2,4(r2)
     80c:	017ffeb4 	movhi	r5,65530
     810:	2948f704 	addi	r5,r5,9180
     814:	2f0b883a 	add	r5,r5,fp
     818:	28800015 	stw	r2,0(r5)
			*(green_LED_ptr) = 0x2;					// turn on LEDG_1
			fifospace = *(audio_ptr + 1);	 		// read the audio port fifospace register
			if ( (fifospace & 0x00FF0000) > BUF_THRESHOLD ) 	// check WSRC
			{
				// output data until the buffer is empty or the audio-out FIFO is full
				while ( (fifospace & 0x00FF0000) && (buffer_index < BUF_SIZE) )
     81c:	00fffeb4 	movhi	r3,65530
     820:	18c8f704 	addi	r3,r3,9180
     824:	1f07883a 	add	r3,r3,fp
     828:	18800017 	ldw	r2,0(r3)
     82c:	10803fec 	andhi	r2,r2,255
     830:	103ebc26 	beq	r2,zero,324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000324>
     834:	013ffeb4 	movhi	r4,65530
     838:	2108fe04 	addi	r4,r4,9208
     83c:	2709883a 	add	r4,r4,fp
     840:	20800017 	ldw	r2,0(r4)
     844:	00eedfd4 	movui	r3,47999
     848:	18bfa90e 	bge	r3,r2,6f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70006f0>
					}
					fifospace = *(audio_ptr + 1);	// read the audio port fifospace register
				}
			}
		}
	}
     84c:	003eb506 	br	324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000324>

00000850 <check_KEYs>:

/****************************************************************************************
 * Subroutine to read KEYs
****************************************************************************************/
void check_KEYs(int * KEY1, int * KEY2, int * counter)
{
     850:	defff904 	addi	sp,sp,-28
     854:	df000615 	stw	fp,24(sp)
     858:	df000604 	addi	fp,sp,24
     85c:	e13ffd15 	stw	r4,-12(fp)
     860:	e17ffe15 	stw	r5,-8(fp)
     864:	e1bfff15 	stw	r6,-4(fp)
	volatile int * KEY_ptr = (int *) 0x10000050;		// pushbutton KEY address
     868:	00840034 	movhi	r2,4096
     86c:	10801404 	addi	r2,r2,80
     870:	e0bffa15 	stw	r2,-24(fp)
	volatile int * audio_ptr = (int *) 0x10003040;	// audio port address
     874:	00840034 	movhi	r2,4096
     878:	108c1004 	addi	r2,r2,12352
     87c:	e0bffb15 	stw	r2,-20(fp)
	int KEY_value;

	KEY_value = *(KEY_ptr); 				// read the pushbutton KEY values
     880:	e0bffa17 	ldw	r2,-24(fp)
     884:	10800017 	ldw	r2,0(r2)
     888:	e0bffc15 	stw	r2,-16(fp)
	while (*KEY_ptr);							// wait for pushbutton KEY release
     88c:	0001883a 	nop
     890:	e0bffa17 	ldw	r2,-24(fp)
     894:	10800017 	ldw	r2,0(r2)
     898:	103ffd1e 	bne	r2,zero,890 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000890>

	if (KEY_value == 0x2)					// check KEY1
     89c:	e0bffc17 	ldw	r2,-16(fp)
     8a0:	10800098 	cmpnei	r2,r2,2
     8a4:	10000b1e 	bne	r2,zero,8d4 <check_KEYs+0x84>
	{
		// reset counter to start recording
		*counter = 0;
     8a8:	e0bfff17 	ldw	r2,-4(fp)
     8ac:	10000015 	stw	zero,0(r2)
		// clear audio-in FIFO
		*(audio_ptr) = 0x4;
     8b0:	e0bffb17 	ldw	r2,-20(fp)
     8b4:	00c00104 	movi	r3,4
     8b8:	10c00015 	stw	r3,0(r2)
		*(audio_ptr) = 0x0;
     8bc:	e0bffb17 	ldw	r2,-20(fp)
     8c0:	10000015 	stw	zero,0(r2)

		*KEY1 = 1;
     8c4:	e0bffd17 	ldw	r2,-12(fp)
     8c8:	00c00044 	movi	r3,1
     8cc:	10c00015 	stw	r3,0(r2)
		*(audio_ptr) = 0x8;
		*(audio_ptr) = 0x0;

		*KEY2 = 1;
	}
}
     8d0:	00000d06 	br	908 <check_KEYs+0xb8>
		*(audio_ptr) = 0x4;
		*(audio_ptr) = 0x0;

		*KEY1 = 1;
	}
	else if (KEY_value == 0x4)				// check KEY2
     8d4:	e0bffc17 	ldw	r2,-16(fp)
     8d8:	10800118 	cmpnei	r2,r2,4
     8dc:	10000a1e 	bne	r2,zero,908 <check_KEYs+0xb8>
	{
		// reset counter to start playback
		*counter = 0;
     8e0:	e0bfff17 	ldw	r2,-4(fp)
     8e4:	10000015 	stw	zero,0(r2)
		// clear audio-out FIFO
		*(audio_ptr) = 0x8;
     8e8:	e0bffb17 	ldw	r2,-20(fp)
     8ec:	00c00204 	movi	r3,8
     8f0:	10c00015 	stw	r3,0(r2)
		*(audio_ptr) = 0x0;
     8f4:	e0bffb17 	ldw	r2,-20(fp)
     8f8:	10000015 	stw	zero,0(r2)

		*KEY2 = 1;
     8fc:	e0bffe17 	ldw	r2,-8(fp)
     900:	00c00044 	movi	r3,1
     904:	10c00015 	stw	r3,0(r2)
	}
}
     908:	0001883a 	nop
     90c:	e037883a 	mov	sp,fp
     910:	df000017 	ldw	fp,0(sp)
     914:	dec00104 	addi	sp,sp,4
     918:	f800283a 	ret

0000091c <sin>:
     91c:	00a00034 	movhi	r2,32768
     920:	defffa04 	addi	sp,sp,-24
     924:	10bfffc4 	addi	r2,r2,-1
     928:	00cffa74 	movhi	r3,16361
     92c:	dfc00515 	stw	ra,20(sp)
     930:	2884703a 	and	r2,r5,r2
     934:	18c87ec4 	addi	r3,r3,8699
     938:	1880180e 	bge	r3,r2,99c <sin+0x80>
     93c:	00dffc34 	movhi	r3,32752
     940:	18ffffc4 	addi	r3,r3,-1
     944:	1880060e 	bge	r3,r2,960 <sin+0x44>
     948:	280f883a 	mov	r7,r5
     94c:	200d883a 	mov	r6,r4
     950:	00046640 	call	4664 <__subdf3>
     954:	dfc00517 	ldw	ra,20(sp)
     958:	dec00604 	addi	sp,sp,24
     95c:	f800283a 	ret
     960:	d9800104 	addi	r6,sp,4
     964:	0000a0c0 	call	a0c <__ieee754_rem_pio2>
     968:	108000cc 	andi	r2,r2,3
     96c:	00c00044 	movi	r3,1
     970:	10c01926 	beq	r2,r3,9d8 <sin+0xbc>
     974:	01000084 	movi	r4,2
     978:	11000f26 	beq	r2,r4,9b8 <sin+0x9c>
     97c:	10001c26 	beq	r2,zero,9f0 <sin+0xd4>
     980:	d9800317 	ldw	r6,12(sp)
     984:	d9c00417 	ldw	r7,16(sp)
     988:	d9000117 	ldw	r4,4(sp)
     98c:	d9400217 	ldw	r5,8(sp)
     990:	00011780 	call	1178 <__kernel_cos>
     994:	18e0003c 	xorhi	r3,r3,32768
     998:	003fee06 	br	954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000954>
     99c:	d8000015 	stw	zero,0(sp)
     9a0:	000d883a 	mov	r6,zero
     9a4:	000f883a 	mov	r7,zero
     9a8:	00023ac0 	call	23ac <__kernel_sin>
     9ac:	dfc00517 	ldw	ra,20(sp)
     9b0:	dec00604 	addi	sp,sp,24
     9b4:	f800283a 	ret
     9b8:	d9800317 	ldw	r6,12(sp)
     9bc:	d9c00417 	ldw	r7,16(sp)
     9c0:	d9000117 	ldw	r4,4(sp)
     9c4:	d9400217 	ldw	r5,8(sp)
     9c8:	d8c00015 	stw	r3,0(sp)
     9cc:	00023ac0 	call	23ac <__kernel_sin>
     9d0:	18e0003c 	xorhi	r3,r3,32768
     9d4:	003fdf06 	br	954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000954>
     9d8:	d9800317 	ldw	r6,12(sp)
     9dc:	d9c00417 	ldw	r7,16(sp)
     9e0:	d9000117 	ldw	r4,4(sp)
     9e4:	d9400217 	ldw	r5,8(sp)
     9e8:	00011780 	call	1178 <__kernel_cos>
     9ec:	003fd906 	br	954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000954>
     9f0:	d9800317 	ldw	r6,12(sp)
     9f4:	d9c00417 	ldw	r7,16(sp)
     9f8:	d9000117 	ldw	r4,4(sp)
     9fc:	d9400217 	ldw	r5,8(sp)
     a00:	d8c00015 	stw	r3,0(sp)
     a04:	00023ac0 	call	23ac <__kernel_sin>
     a08:	003fd206 	br	954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000954>

00000a0c <__ieee754_rem_pio2>:
     a0c:	02200034 	movhi	r8,32768
     a10:	deffea04 	addi	sp,sp,-88
     a14:	423fffc4 	addi	r8,r8,-1
     a18:	00cffa74 	movhi	r3,16361
     a1c:	ddc01315 	stw	r23,76(sp)
     a20:	dc400d15 	stw	r17,52(sp)
     a24:	dfc01515 	stw	ra,84(sp)
     a28:	df001415 	stw	fp,80(sp)
     a2c:	dd801215 	stw	r22,72(sp)
     a30:	dd401115 	stw	r21,68(sp)
     a34:	dd001015 	stw	r20,64(sp)
     a38:	dcc00f15 	stw	r19,60(sp)
     a3c:	dc800e15 	stw	r18,56(sp)
     a40:	dc000c15 	stw	r16,48(sp)
     a44:	2a2e703a 	and	r23,r5,r8
     a48:	18c87ec4 	addi	r3,r3,8699
     a4c:	2823883a 	mov	r17,r5
     a50:	1dc0790e 	bge	r3,r23,c38 <__ieee754_rem_pio2+0x22c>
     a54:	009000f4 	movhi	r2,16387
     a58:	10b65ec4 	addi	r2,r2,-9861
     a5c:	3021883a 	mov	r16,r6
     a60:	2027883a 	mov	r19,r4
     a64:	15c02316 	blt	r2,r23,af4 <__ieee754_rem_pio2+0xe8>
     a68:	01cffe74 	movhi	r7,16377
     a6c:	39c87ec4 	addi	r7,r7,8699
     a70:	01951034 	movhi	r6,21568
     a74:	01417a0e 	bge	zero,r5,1060 <__ieee754_rem_pio2+0x654>
     a78:	00046640 	call	4664 <__subdf3>
     a7c:	1025883a 	mov	r18,r2
     a80:	008ffe74 	movhi	r2,16377
     a84:	10887ec4 	addi	r2,r2,8699
     a88:	1823883a 	mov	r17,r3
     a8c:	b8808426 	beq	r23,r2,ca0 <__ieee754_rem_pio2+0x294>
     a90:	018698b4 	movhi	r6,6754
     a94:	01cf7474 	movhi	r7,15825
     a98:	3198cc44 	addi	r6,r6,25393
     a9c:	39ed1844 	addi	r7,r7,-19359
     aa0:	9009883a 	mov	r4,r18
     aa4:	180b883a 	mov	r5,r3
     aa8:	00046640 	call	4664 <__subdf3>
     aac:	100d883a 	mov	r6,r2
     ab0:	180f883a 	mov	r7,r3
     ab4:	9009883a 	mov	r4,r18
     ab8:	880b883a 	mov	r5,r17
     abc:	80800015 	stw	r2,0(r16)
     ac0:	80c00115 	stw	r3,4(r16)
     ac4:	00046640 	call	4664 <__subdf3>
     ac8:	018698b4 	movhi	r6,6754
     acc:	01cf7474 	movhi	r7,15825
     ad0:	3198cc44 	addi	r6,r6,25393
     ad4:	39ed1844 	addi	r7,r7,-19359
     ad8:	1009883a 	mov	r4,r2
     adc:	180b883a 	mov	r5,r3
     ae0:	00046640 	call	4664 <__subdf3>
     ae4:	80800215 	stw	r2,8(r16)
     ae8:	80c00315 	stw	r3,12(r16)
     aec:	00800044 	movi	r2,1
     af0:	00005606 	br	c4c <__ieee754_rem_pio2+0x240>
     af4:	00904e74 	movhi	r2,16697
     af8:	10887ec4 	addi	r2,r2,8699
     afc:	15c0830e 	bge	r2,r23,d0c <__ieee754_rem_pio2+0x300>
     b00:	009ffc34 	movhi	r2,32752
     b04:	10bfffc4 	addi	r2,r2,-1
     b08:	15c05c16 	blt	r2,r23,c7c <__ieee754_rem_pio2+0x270>
     b0c:	b829d53a 	srai	r20,r23,20
     b10:	a53efa84 	addi	r20,r20,-1046
     b14:	a024953a 	slli	r18,r20,20
     b18:	bca5c83a 	sub	r18,r23,r18
     b1c:	900b883a 	mov	r5,r18
     b20:	0004f600 	call	4f60 <__fixdfsi>
     b24:	1009883a 	mov	r4,r2
     b28:	0004fe00 	call	4fe0 <__floatsidf>
     b2c:	9809883a 	mov	r4,r19
     b30:	900b883a 	mov	r5,r18
     b34:	100d883a 	mov	r6,r2
     b38:	180f883a 	mov	r7,r3
     b3c:	d8800215 	stw	r2,8(sp)
     b40:	d8c00315 	stw	r3,12(sp)
     b44:	00046640 	call	4664 <__subdf3>
     b48:	000d883a 	mov	r6,zero
     b4c:	01d05c34 	movhi	r7,16752
     b50:	1009883a 	mov	r4,r2
     b54:	180b883a 	mov	r5,r3
     b58:	0003f4c0 	call	3f4c <__muldf3>
     b5c:	180b883a 	mov	r5,r3
     b60:	1009883a 	mov	r4,r2
     b64:	182b883a 	mov	r21,r3
     b68:	102d883a 	mov	r22,r2
     b6c:	0004f600 	call	4f60 <__fixdfsi>
     b70:	1009883a 	mov	r4,r2
     b74:	0004fe00 	call	4fe0 <__floatsidf>
     b78:	100d883a 	mov	r6,r2
     b7c:	180f883a 	mov	r7,r3
     b80:	b009883a 	mov	r4,r22
     b84:	a80b883a 	mov	r5,r21
     b88:	1027883a 	mov	r19,r2
     b8c:	1825883a 	mov	r18,r3
     b90:	d8800415 	stw	r2,16(sp)
     b94:	d8c00515 	stw	r3,20(sp)
     b98:	00046640 	call	4664 <__subdf3>
     b9c:	000d883a 	mov	r6,zero
     ba0:	01d05c34 	movhi	r7,16752
     ba4:	1009883a 	mov	r4,r2
     ba8:	180b883a 	mov	r5,r3
     bac:	0003f4c0 	call	3f4c <__muldf3>
     bb0:	000d883a 	mov	r6,zero
     bb4:	000f883a 	mov	r7,zero
     bb8:	1009883a 	mov	r4,r2
     bbc:	180b883a 	mov	r5,r3
     bc0:	d8800615 	stw	r2,24(sp)
     bc4:	d8c00715 	stw	r3,28(sp)
     bc8:	0003de80 	call	3de8 <__eqdf2>
     bcc:	1001431e 	bne	r2,zero,10dc <__ieee754_rem_pio2+0x6d0>
     bd0:	000f883a 	mov	r7,zero
     bd4:	000d883a 	mov	r6,zero
     bd8:	9809883a 	mov	r4,r19
     bdc:	900b883a 	mov	r5,r18
     be0:	0003de80 	call	3de8 <__eqdf2>
     be4:	100f003a 	cmpeq	r7,r2,zero
     be8:	00800084 	movi	r2,2
     bec:	11cfc83a 	sub	r7,r2,r7
     bf0:	00800084 	movi	r2,2
     bf4:	d8800015 	stw	r2,0(sp)
     bf8:	008000b4 	movhi	r2,2
     bfc:	10adc804 	addi	r2,r2,-18656
     c00:	d8800115 	stw	r2,4(sp)
     c04:	a00d883a 	mov	r6,r20
     c08:	800b883a 	mov	r5,r16
     c0c:	d9000204 	addi	r4,sp,8
     c10:	000161c0 	call	161c <__kernel_rem_pio2>
     c14:	88000d0e 	bge	r17,zero,c4c <__ieee754_rem_pio2+0x240>
     c18:	81000117 	ldw	r4,4(r16)
     c1c:	80c00317 	ldw	r3,12(r16)
     c20:	0085c83a 	sub	r2,zero,r2
     c24:	2120003c 	xorhi	r4,r4,32768
     c28:	18e0003c 	xorhi	r3,r3,32768
     c2c:	81000115 	stw	r4,4(r16)
     c30:	80c00315 	stw	r3,12(r16)
     c34:	00000506 	br	c4c <__ieee754_rem_pio2+0x240>
     c38:	31000015 	stw	r4,0(r6)
     c3c:	31400115 	stw	r5,4(r6)
     c40:	30000215 	stw	zero,8(r6)
     c44:	30000315 	stw	zero,12(r6)
     c48:	0005883a 	mov	r2,zero
     c4c:	dfc01517 	ldw	ra,84(sp)
     c50:	df001417 	ldw	fp,80(sp)
     c54:	ddc01317 	ldw	r23,76(sp)
     c58:	dd801217 	ldw	r22,72(sp)
     c5c:	dd401117 	ldw	r21,68(sp)
     c60:	dd001017 	ldw	r20,64(sp)
     c64:	dcc00f17 	ldw	r19,60(sp)
     c68:	dc800e17 	ldw	r18,56(sp)
     c6c:	dc400d17 	ldw	r17,52(sp)
     c70:	dc000c17 	ldw	r16,48(sp)
     c74:	dec01604 	addi	sp,sp,88
     c78:	f800283a 	ret
     c7c:	200d883a 	mov	r6,r4
     c80:	280f883a 	mov	r7,r5
     c84:	00046640 	call	4664 <__subdf3>
     c88:	80800215 	stw	r2,8(r16)
     c8c:	80800015 	stw	r2,0(r16)
     c90:	80c00315 	stw	r3,12(r16)
     c94:	80c00115 	stw	r3,4(r16)
     c98:	0005883a 	mov	r2,zero
     c9c:	003feb06 	br	c4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000c4c>
     ca0:	01cf7474 	movhi	r7,15825
     ca4:	9009883a 	mov	r4,r18
     ca8:	39ed1844 	addi	r7,r7,-19359
     cac:	01869834 	movhi	r6,6752
     cb0:	180b883a 	mov	r5,r3
     cb4:	00046640 	call	4664 <__subdf3>
     cb8:	018b80f4 	movhi	r6,11779
     cbc:	01cee8f4 	movhi	r7,15267
     cc0:	319c1cc4 	addi	r6,r6,28787
     cc4:	39c66284 	addi	r7,r7,6538
     cc8:	1009883a 	mov	r4,r2
     ccc:	180b883a 	mov	r5,r3
     cd0:	1025883a 	mov	r18,r2
     cd4:	1823883a 	mov	r17,r3
     cd8:	00046640 	call	4664 <__subdf3>
     cdc:	100d883a 	mov	r6,r2
     ce0:	180f883a 	mov	r7,r3
     ce4:	9009883a 	mov	r4,r18
     ce8:	880b883a 	mov	r5,r17
     cec:	80800015 	stw	r2,0(r16)
     cf0:	80c00115 	stw	r3,4(r16)
     cf4:	00046640 	call	4664 <__subdf3>
     cf8:	018b80f4 	movhi	r6,11779
     cfc:	01cee8f4 	movhi	r7,15267
     d00:	319c1cc4 	addi	r6,r6,28787
     d04:	39c66284 	addi	r7,r7,6538
     d08:	003f7306 	br	ad8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ad8>
     d0c:	00026780 	call	2678 <fabs>
     d10:	019b72b4 	movhi	r6,28106
     d14:	01cff934 	movhi	r7,16356
     d18:	31b220c4 	addi	r6,r6,-14205
     d1c:	39d7cc04 	addi	r7,r7,24368
     d20:	1009883a 	mov	r4,r2
     d24:	180b883a 	mov	r5,r3
     d28:	102d883a 	mov	r22,r2
     d2c:	182b883a 	mov	r21,r3
     d30:	0003f4c0 	call	3f4c <__muldf3>
     d34:	000d883a 	mov	r6,zero
     d38:	01cff834 	movhi	r7,16352
     d3c:	1009883a 	mov	r4,r2
     d40:	180b883a 	mov	r5,r3
     d44:	0002c540 	call	2c54 <__adddf3>
     d48:	180b883a 	mov	r5,r3
     d4c:	1009883a 	mov	r4,r2
     d50:	0004f600 	call	4f60 <__fixdfsi>
     d54:	1009883a 	mov	r4,r2
     d58:	1025883a 	mov	r18,r2
     d5c:	0004fe00 	call	4fe0 <__floatsidf>
     d60:	01cffe74 	movhi	r7,16377
     d64:	39c87ec4 	addi	r7,r7,8699
     d68:	01951034 	movhi	r6,21568
     d6c:	1009883a 	mov	r4,r2
     d70:	180b883a 	mov	r5,r3
     d74:	1029883a 	mov	r20,r2
     d78:	1827883a 	mov	r19,r3
     d7c:	0003f4c0 	call	3f4c <__muldf3>
     d80:	b009883a 	mov	r4,r22
     d84:	a80b883a 	mov	r5,r21
     d88:	100d883a 	mov	r6,r2
     d8c:	180f883a 	mov	r7,r3
     d90:	00046640 	call	4664 <__subdf3>
     d94:	018698b4 	movhi	r6,6754
     d98:	01cf7474 	movhi	r7,15825
     d9c:	a009883a 	mov	r4,r20
     da0:	3198cc44 	addi	r6,r6,25393
     da4:	39ed1844 	addi	r7,r7,-19359
     da8:	980b883a 	mov	r5,r19
     dac:	1039883a 	mov	fp,r2
     db0:	d8c00815 	stw	r3,32(sp)
     db4:	0003f4c0 	call	3f4c <__muldf3>
     db8:	010007c4 	movi	r4,31
     dbc:	e017883a 	mov	r11,fp
     dc0:	da800817 	ldw	r10,32(sp)
     dc4:	102d883a 	mov	r22,r2
     dc8:	182b883a 	mov	r21,r3
     dcc:	24802816 	blt	r4,r18,e70 <__ieee754_rem_pio2+0x464>
     dd0:	913fffc4 	addi	r4,r18,-1
     dd4:	2109883a 	add	r4,r4,r4
     dd8:	014000b4 	movhi	r5,2
     ddc:	2109883a 	add	r4,r4,r4
     de0:	296da804 	addi	r5,r5,-18784
     de4:	2909883a 	add	r4,r5,r4
     de8:	21000017 	ldw	r4,0(r4)
     dec:	b9002026 	beq	r23,r4,e70 <__ieee754_rem_pio2+0x464>
     df0:	100d883a 	mov	r6,r2
     df4:	180f883a 	mov	r7,r3
     df8:	e009883a 	mov	r4,fp
     dfc:	500b883a 	mov	r5,r10
     e00:	da800b15 	stw	r10,44(sp)
     e04:	df000a15 	stw	fp,40(sp)
     e08:	00046640 	call	4664 <__subdf3>
     e0c:	da800b17 	ldw	r10,44(sp)
     e10:	dac00a17 	ldw	r11,40(sp)
     e14:	1019883a 	mov	r12,r2
     e18:	1813883a 	mov	r9,r3
     e1c:	80800015 	stw	r2,0(r16)
     e20:	80c00115 	stw	r3,4(r16)
     e24:	600d883a 	mov	r6,r12
     e28:	480f883a 	mov	r7,r9
     e2c:	5809883a 	mov	r4,r11
     e30:	500b883a 	mov	r5,r10
     e34:	da400b15 	stw	r9,44(sp)
     e38:	db000a15 	stw	r12,40(sp)
     e3c:	00046640 	call	4664 <__subdf3>
     e40:	b00d883a 	mov	r6,r22
     e44:	a80f883a 	mov	r7,r21
     e48:	1009883a 	mov	r4,r2
     e4c:	180b883a 	mov	r5,r3
     e50:	00046640 	call	4664 <__subdf3>
     e54:	80800215 	stw	r2,8(r16)
     e58:	80c00315 	stw	r3,12(r16)
     e5c:	da400b17 	ldw	r9,44(sp)
     e60:	db000a17 	ldw	r12,40(sp)
     e64:	88009f16 	blt	r17,zero,10e4 <__ieee754_rem_pio2+0x6d8>
     e68:	9005883a 	mov	r2,r18
     e6c:	003f7706 	br	c4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000c4c>
     e70:	d9400817 	ldw	r5,32(sp)
     e74:	100d883a 	mov	r6,r2
     e78:	180f883a 	mov	r7,r3
     e7c:	e009883a 	mov	r4,fp
     e80:	da800b15 	stw	r10,44(sp)
     e84:	dac00a15 	stw	r11,40(sp)
     e88:	00046640 	call	4664 <__subdf3>
     e8c:	1019883a 	mov	r12,r2
     e90:	1804d53a 	srli	r2,r3,20
     e94:	b811d53a 	srai	r8,r23,20
     e98:	1813883a 	mov	r9,r3
     e9c:	1081ffcc 	andi	r2,r2,2047
     ea0:	80c00115 	stw	r3,4(r16)
     ea4:	83000015 	stw	r12,0(r16)
     ea8:	4085c83a 	sub	r2,r8,r2
     eac:	00c00404 	movi	r3,16
     eb0:	da800b17 	ldw	r10,44(sp)
     eb4:	dac00a17 	ldw	r11,40(sp)
     eb8:	18bfda0e 	bge	r3,r2,e24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e24>
     ebc:	01cf7474 	movhi	r7,15825
     ec0:	39ed1844 	addi	r7,r7,-19359
     ec4:	01869834 	movhi	r6,6752
     ec8:	a009883a 	mov	r4,r20
     ecc:	980b883a 	mov	r5,r19
     ed0:	da000a15 	stw	r8,40(sp)
     ed4:	0003f4c0 	call	3f4c <__muldf3>
     ed8:	d9400817 	ldw	r5,32(sp)
     edc:	100d883a 	mov	r6,r2
     ee0:	180f883a 	mov	r7,r3
     ee4:	e009883a 	mov	r4,fp
     ee8:	102d883a 	mov	r22,r2
     eec:	182b883a 	mov	r21,r3
     ef0:	00046640 	call	4664 <__subdf3>
     ef4:	d9400817 	ldw	r5,32(sp)
     ef8:	100d883a 	mov	r6,r2
     efc:	180f883a 	mov	r7,r3
     f00:	e009883a 	mov	r4,fp
     f04:	182f883a 	mov	r23,r3
     f08:	d8800915 	stw	r2,36(sp)
     f0c:	00046640 	call	4664 <__subdf3>
     f10:	b00d883a 	mov	r6,r22
     f14:	a80f883a 	mov	r7,r21
     f18:	1009883a 	mov	r4,r2
     f1c:	180b883a 	mov	r5,r3
     f20:	00046640 	call	4664 <__subdf3>
     f24:	018b80f4 	movhi	r6,11779
     f28:	01cee8f4 	movhi	r7,15267
     f2c:	319c1cc4 	addi	r6,r6,28787
     f30:	39c66284 	addi	r7,r7,6538
     f34:	a009883a 	mov	r4,r20
     f38:	980b883a 	mov	r5,r19
     f3c:	102d883a 	mov	r22,r2
     f40:	182b883a 	mov	r21,r3
     f44:	0003f4c0 	call	3f4c <__muldf3>
     f48:	b00d883a 	mov	r6,r22
     f4c:	a80f883a 	mov	r7,r21
     f50:	1009883a 	mov	r4,r2
     f54:	180b883a 	mov	r5,r3
     f58:	00046640 	call	4664 <__subdf3>
     f5c:	d9000917 	ldw	r4,36(sp)
     f60:	100d883a 	mov	r6,r2
     f64:	180f883a 	mov	r7,r3
     f68:	b80b883a 	mov	r5,r23
     f6c:	102d883a 	mov	r22,r2
     f70:	182b883a 	mov	r21,r3
     f74:	00046640 	call	4664 <__subdf3>
     f78:	1019883a 	mov	r12,r2
     f7c:	1804d53a 	srli	r2,r3,20
     f80:	da000a17 	ldw	r8,40(sp)
     f84:	83000015 	stw	r12,0(r16)
     f88:	1081ffcc 	andi	r2,r2,2047
     f8c:	4091c83a 	sub	r8,r8,r2
     f90:	80c00115 	stw	r3,4(r16)
     f94:	00800c44 	movi	r2,49
     f98:	1813883a 	mov	r9,r3
     f9c:	1200730e 	bge	r2,r8,116c <__ieee754_rem_pio2+0x760>
     fa0:	01cee8f4 	movhi	r7,15267
     fa4:	39c66284 	addi	r7,r7,6538
     fa8:	018b8034 	movhi	r6,11776
     fac:	a009883a 	mov	r4,r20
     fb0:	980b883a 	mov	r5,r19
     fb4:	0003f4c0 	call	3f4c <__muldf3>
     fb8:	d9000917 	ldw	r4,36(sp)
     fbc:	100d883a 	mov	r6,r2
     fc0:	180f883a 	mov	r7,r3
     fc4:	b80b883a 	mov	r5,r23
     fc8:	102d883a 	mov	r22,r2
     fcc:	182b883a 	mov	r21,r3
     fd0:	00046640 	call	4664 <__subdf3>
     fd4:	d9000917 	ldw	r4,36(sp)
     fd8:	100d883a 	mov	r6,r2
     fdc:	180f883a 	mov	r7,r3
     fe0:	b80b883a 	mov	r5,r23
     fe4:	d8c00b15 	stw	r3,44(sp)
     fe8:	d8800a15 	stw	r2,40(sp)
     fec:	00046640 	call	4664 <__subdf3>
     ff0:	b00d883a 	mov	r6,r22
     ff4:	a80f883a 	mov	r7,r21
     ff8:	1009883a 	mov	r4,r2
     ffc:	180b883a 	mov	r5,r3
    1000:	00046640 	call	4664 <__subdf3>
    1004:	01894834 	movhi	r6,9504
    1008:	01ce5f34 	movhi	r7,14716
    100c:	31927044 	addi	r6,r6,18881
    1010:	39e0e684 	addi	r7,r7,-31846
    1014:	a009883a 	mov	r4,r20
    1018:	980b883a 	mov	r5,r19
    101c:	102d883a 	mov	r22,r2
    1020:	182b883a 	mov	r21,r3
    1024:	0003f4c0 	call	3f4c <__muldf3>
    1028:	b00d883a 	mov	r6,r22
    102c:	a80f883a 	mov	r7,r21
    1030:	1009883a 	mov	r4,r2
    1034:	180b883a 	mov	r5,r3
    1038:	00046640 	call	4664 <__subdf3>
    103c:	dac00a17 	ldw	r11,40(sp)
    1040:	da800b17 	ldw	r10,44(sp)
    1044:	102d883a 	mov	r22,r2
    1048:	182b883a 	mov	r21,r3
    104c:	100d883a 	mov	r6,r2
    1050:	180f883a 	mov	r7,r3
    1054:	5809883a 	mov	r4,r11
    1058:	500b883a 	mov	r5,r10
    105c:	003f6a06 	br	e08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e08>
    1060:	0002c540 	call	2c54 <__adddf3>
    1064:	1025883a 	mov	r18,r2
    1068:	008ffe74 	movhi	r2,16377
    106c:	10887ec4 	addi	r2,r2,8699
    1070:	1823883a 	mov	r17,r3
    1074:	b8802226 	beq	r23,r2,1100 <__ieee754_rem_pio2+0x6f4>
    1078:	018698b4 	movhi	r6,6754
    107c:	01cf7474 	movhi	r7,15825
    1080:	3198cc44 	addi	r6,r6,25393
    1084:	39ed1844 	addi	r7,r7,-19359
    1088:	9009883a 	mov	r4,r18
    108c:	180b883a 	mov	r5,r3
    1090:	0002c540 	call	2c54 <__adddf3>
    1094:	100d883a 	mov	r6,r2
    1098:	180f883a 	mov	r7,r3
    109c:	9009883a 	mov	r4,r18
    10a0:	880b883a 	mov	r5,r17
    10a4:	80800015 	stw	r2,0(r16)
    10a8:	80c00115 	stw	r3,4(r16)
    10ac:	00046640 	call	4664 <__subdf3>
    10b0:	018698b4 	movhi	r6,6754
    10b4:	01cf7474 	movhi	r7,15825
    10b8:	3198cc44 	addi	r6,r6,25393
    10bc:	39ed1844 	addi	r7,r7,-19359
    10c0:	1009883a 	mov	r4,r2
    10c4:	180b883a 	mov	r5,r3
    10c8:	0002c540 	call	2c54 <__adddf3>
    10cc:	80800215 	stw	r2,8(r16)
    10d0:	80c00315 	stw	r3,12(r16)
    10d4:	00bfffc4 	movi	r2,-1
    10d8:	003edc06 	br	c4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000c4c>
    10dc:	01c000c4 	movi	r7,3
    10e0:	003ec306 	br	bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000bf0>
    10e4:	4a60003c 	xorhi	r9,r9,32768
    10e8:	18e0003c 	xorhi	r3,r3,32768
    10ec:	83000015 	stw	r12,0(r16)
    10f0:	82400115 	stw	r9,4(r16)
    10f4:	80c00315 	stw	r3,12(r16)
    10f8:	0485c83a 	sub	r2,zero,r18
    10fc:	003ed306 	br	c4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000c4c>
    1100:	01cf7474 	movhi	r7,15825
    1104:	9009883a 	mov	r4,r18
    1108:	39ed1844 	addi	r7,r7,-19359
    110c:	01869834 	movhi	r6,6752
    1110:	180b883a 	mov	r5,r3
    1114:	0002c540 	call	2c54 <__adddf3>
    1118:	018b80f4 	movhi	r6,11779
    111c:	01cee8f4 	movhi	r7,15267
    1120:	319c1cc4 	addi	r6,r6,28787
    1124:	39c66284 	addi	r7,r7,6538
    1128:	1009883a 	mov	r4,r2
    112c:	180b883a 	mov	r5,r3
    1130:	1025883a 	mov	r18,r2
    1134:	1823883a 	mov	r17,r3
    1138:	0002c540 	call	2c54 <__adddf3>
    113c:	100d883a 	mov	r6,r2
    1140:	180f883a 	mov	r7,r3
    1144:	9009883a 	mov	r4,r18
    1148:	880b883a 	mov	r5,r17
    114c:	80800015 	stw	r2,0(r16)
    1150:	80c00115 	stw	r3,4(r16)
    1154:	00046640 	call	4664 <__subdf3>
    1158:	018b80f4 	movhi	r6,11779
    115c:	01cee8f4 	movhi	r7,15267
    1160:	319c1cc4 	addi	r6,r6,28787
    1164:	39c66284 	addi	r7,r7,6538
    1168:	003fd506 	br	10c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010c0>
    116c:	dac00917 	ldw	r11,36(sp)
    1170:	b815883a 	mov	r10,r23
    1174:	003f2b06 	br	e24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e24>

00001178 <__kernel_cos>:
    1178:	defff304 	addi	sp,sp,-52
    117c:	dc000315 	stw	r16,12(sp)
    1180:	04200034 	movhi	r16,32768
    1184:	843fffc4 	addi	r16,r16,-1
    1188:	008f9034 	movhi	r2,15936
    118c:	df000b15 	stw	fp,44(sp)
    1190:	ddc00a15 	stw	r23,40(sp)
    1194:	dd800915 	stw	r22,36(sp)
    1198:	dcc00615 	stw	r19,24(sp)
    119c:	dfc00c15 	stw	ra,48(sp)
    11a0:	dd400815 	stw	r21,32(sp)
    11a4:	dd000715 	stw	r20,28(sp)
    11a8:	dc800515 	stw	r18,20(sp)
    11ac:	dc400415 	stw	r17,16(sp)
    11b0:	2c20703a 	and	r16,r5,r16
    11b4:	10bfffc4 	addi	r2,r2,-1
    11b8:	2827883a 	mov	r19,r5
    11bc:	202d883a 	mov	r22,r4
    11c0:	302f883a 	mov	r23,r6
    11c4:	3839883a 	mov	fp,r7
    11c8:	14007516 	blt	r2,r16,13a0 <__kernel_cos+0x228>
    11cc:	0004f600 	call	4f60 <__fixdfsi>
    11d0:	10010f26 	beq	r2,zero,1610 <__kernel_cos+0x498>
    11d4:	b00d883a 	mov	r6,r22
    11d8:	980f883a 	mov	r7,r19
    11dc:	b009883a 	mov	r4,r22
    11e0:	980b883a 	mov	r5,r19
    11e4:	0003f4c0 	call	3f4c <__muldf3>
    11e8:	01afa234 	movhi	r6,48776
    11ec:	01ef6a74 	movhi	r7,48553
    11f0:	318e3504 	addi	r6,r6,14548
    11f4:	39feba44 	addi	r7,r7,-1303
    11f8:	1009883a 	mov	r4,r2
    11fc:	180b883a 	mov	r5,r3
    1200:	102b883a 	mov	r21,r2
    1204:	1829883a 	mov	r20,r3
    1208:	0003f4c0 	call	3f4c <__muldf3>
    120c:	01af6d74 	movhi	r6,48565
    1210:	01cf88b4 	movhi	r7,15906
    1214:	31ac7104 	addi	r6,r6,-20028
    1218:	39fba784 	addi	r7,r7,-4450
    121c:	1009883a 	mov	r4,r2
    1220:	180b883a 	mov	r5,r3
    1224:	0002c540 	call	2c54 <__adddf3>
    1228:	a80d883a 	mov	r6,r21
    122c:	a00f883a 	mov	r7,r20
    1230:	1009883a 	mov	r4,r2
    1234:	180b883a 	mov	r5,r3
    1238:	0003f4c0 	call	3f4c <__muldf3>
    123c:	01a02734 	movhi	r6,32924
    1240:	01cfa4b4 	movhi	r7,16018
    1244:	3194ab44 	addi	r6,r6,21165
    1248:	39df93c4 	addi	r7,r7,32335
    124c:	1009883a 	mov	r4,r2
    1250:	180b883a 	mov	r5,r3
    1254:	00046640 	call	4664 <__subdf3>
    1258:	a80d883a 	mov	r6,r21
    125c:	a00f883a 	mov	r7,r20
    1260:	1009883a 	mov	r4,r2
    1264:	180b883a 	mov	r5,r3
    1268:	0003f4c0 	call	3f4c <__muldf3>
    126c:	018672f4 	movhi	r6,6603
    1270:	01cfbeb4 	movhi	r7,16122
    1274:	31856404 	addi	r6,r6,5520
    1278:	39c06804 	addi	r7,r7,416
    127c:	1009883a 	mov	r4,r2
    1280:	180b883a 	mov	r5,r3
    1284:	0002c540 	call	2c54 <__adddf3>
    1288:	a80d883a 	mov	r6,r21
    128c:	a00f883a 	mov	r7,r20
    1290:	1009883a 	mov	r4,r2
    1294:	180b883a 	mov	r5,r3
    1298:	0003f4c0 	call	3f4c <__muldf3>
    129c:	0185b074 	movhi	r6,5825
    12a0:	01cfd5f4 	movhi	r7,16215
    12a4:	31945dc4 	addi	r6,r6,20855
    12a8:	39f05b04 	addi	r7,r7,-16020
    12ac:	1009883a 	mov	r4,r2
    12b0:	180b883a 	mov	r5,r3
    12b4:	00046640 	call	4664 <__subdf3>
    12b8:	a80d883a 	mov	r6,r21
    12bc:	a00f883a 	mov	r7,r20
    12c0:	1009883a 	mov	r4,r2
    12c4:	180b883a 	mov	r5,r3
    12c8:	0003f4c0 	call	3f4c <__muldf3>
    12cc:	01955574 	movhi	r6,21845
    12d0:	01cfe974 	movhi	r7,16293
    12d4:	31955304 	addi	r6,r6,21836
    12d8:	39d55544 	addi	r7,r7,21845
    12dc:	1009883a 	mov	r4,r2
    12e0:	180b883a 	mov	r5,r3
    12e4:	0002c540 	call	2c54 <__adddf3>
    12e8:	a80d883a 	mov	r6,r21
    12ec:	a00f883a 	mov	r7,r20
    12f0:	1009883a 	mov	r4,r2
    12f4:	180b883a 	mov	r5,r3
    12f8:	0003f4c0 	call	3f4c <__muldf3>
    12fc:	1017883a 	mov	r11,r2
    1300:	1815883a 	mov	r10,r3
    1304:	a809883a 	mov	r4,r21
    1308:	a00b883a 	mov	r5,r20
    130c:	000d883a 	mov	r6,zero
    1310:	01cff834 	movhi	r7,16352
    1314:	da800215 	stw	r10,8(sp)
    1318:	dac00115 	stw	r11,4(sp)
    131c:	0003f4c0 	call	3f4c <__muldf3>
    1320:	dac00117 	ldw	r11,4(sp)
    1324:	da800217 	ldw	r10,8(sp)
    1328:	a809883a 	mov	r4,r21
    132c:	580d883a 	mov	r6,r11
    1330:	500f883a 	mov	r7,r10
    1334:	a00b883a 	mov	r5,r20
    1338:	1023883a 	mov	r17,r2
    133c:	1821883a 	mov	r16,r3
    1340:	0003f4c0 	call	3f4c <__muldf3>
    1344:	b80d883a 	mov	r6,r23
    1348:	e00f883a 	mov	r7,fp
    134c:	b009883a 	mov	r4,r22
    1350:	980b883a 	mov	r5,r19
    1354:	1029883a 	mov	r20,r2
    1358:	1825883a 	mov	r18,r3
    135c:	0003f4c0 	call	3f4c <__muldf3>
    1360:	a009883a 	mov	r4,r20
    1364:	900b883a 	mov	r5,r18
    1368:	100d883a 	mov	r6,r2
    136c:	180f883a 	mov	r7,r3
    1370:	00046640 	call	4664 <__subdf3>
    1374:	8809883a 	mov	r4,r17
    1378:	800b883a 	mov	r5,r16
    137c:	100d883a 	mov	r6,r2
    1380:	180f883a 	mov	r7,r3
    1384:	00046640 	call	4664 <__subdf3>
    1388:	100d883a 	mov	r6,r2
    138c:	180f883a 	mov	r7,r3
    1390:	0009883a 	mov	r4,zero
    1394:	014ffc34 	movhi	r5,16368
    1398:	00046640 	call	4664 <__subdf3>
    139c:	00008b06 	br	15cc <__kernel_cos+0x454>
    13a0:	200d883a 	mov	r6,r4
    13a4:	280f883a 	mov	r7,r5
    13a8:	0003f4c0 	call	3f4c <__muldf3>
    13ac:	01afa234 	movhi	r6,48776
    13b0:	01ef6a74 	movhi	r7,48553
    13b4:	318e3504 	addi	r6,r6,14548
    13b8:	39feba44 	addi	r7,r7,-1303
    13bc:	1009883a 	mov	r4,r2
    13c0:	180b883a 	mov	r5,r3
    13c4:	1025883a 	mov	r18,r2
    13c8:	1823883a 	mov	r17,r3
    13cc:	0003f4c0 	call	3f4c <__muldf3>
    13d0:	01af6d74 	movhi	r6,48565
    13d4:	01cf88b4 	movhi	r7,15906
    13d8:	31ac7104 	addi	r6,r6,-20028
    13dc:	39fba784 	addi	r7,r7,-4450
    13e0:	1009883a 	mov	r4,r2
    13e4:	180b883a 	mov	r5,r3
    13e8:	0002c540 	call	2c54 <__adddf3>
    13ec:	900d883a 	mov	r6,r18
    13f0:	880f883a 	mov	r7,r17
    13f4:	1009883a 	mov	r4,r2
    13f8:	180b883a 	mov	r5,r3
    13fc:	0003f4c0 	call	3f4c <__muldf3>
    1400:	01a02734 	movhi	r6,32924
    1404:	01cfa4b4 	movhi	r7,16018
    1408:	3194ab44 	addi	r6,r6,21165
    140c:	39df93c4 	addi	r7,r7,32335
    1410:	1009883a 	mov	r4,r2
    1414:	180b883a 	mov	r5,r3
    1418:	00046640 	call	4664 <__subdf3>
    141c:	900d883a 	mov	r6,r18
    1420:	880f883a 	mov	r7,r17
    1424:	1009883a 	mov	r4,r2
    1428:	180b883a 	mov	r5,r3
    142c:	0003f4c0 	call	3f4c <__muldf3>
    1430:	018672f4 	movhi	r6,6603
    1434:	01cfbeb4 	movhi	r7,16122
    1438:	31856404 	addi	r6,r6,5520
    143c:	39c06804 	addi	r7,r7,416
    1440:	1009883a 	mov	r4,r2
    1444:	180b883a 	mov	r5,r3
    1448:	0002c540 	call	2c54 <__adddf3>
    144c:	900d883a 	mov	r6,r18
    1450:	880f883a 	mov	r7,r17
    1454:	1009883a 	mov	r4,r2
    1458:	180b883a 	mov	r5,r3
    145c:	0003f4c0 	call	3f4c <__muldf3>
    1460:	0185b074 	movhi	r6,5825
    1464:	01cfd5f4 	movhi	r7,16215
    1468:	31945dc4 	addi	r6,r6,20855
    146c:	39f05b04 	addi	r7,r7,-16020
    1470:	1009883a 	mov	r4,r2
    1474:	180b883a 	mov	r5,r3
    1478:	00046640 	call	4664 <__subdf3>
    147c:	900d883a 	mov	r6,r18
    1480:	880f883a 	mov	r7,r17
    1484:	1009883a 	mov	r4,r2
    1488:	180b883a 	mov	r5,r3
    148c:	0003f4c0 	call	3f4c <__muldf3>
    1490:	01955574 	movhi	r6,21845
    1494:	01cfe974 	movhi	r7,16293
    1498:	31955304 	addi	r6,r6,21836
    149c:	39d55544 	addi	r7,r7,21845
    14a0:	1009883a 	mov	r4,r2
    14a4:	180b883a 	mov	r5,r3
    14a8:	0002c540 	call	2c54 <__adddf3>
    14ac:	900d883a 	mov	r6,r18
    14b0:	880f883a 	mov	r7,r17
    14b4:	1009883a 	mov	r4,r2
    14b8:	180b883a 	mov	r5,r3
    14bc:	0003f4c0 	call	3f4c <__muldf3>
    14c0:	1013883a 	mov	r9,r2
    14c4:	1017883a 	mov	r11,r2
    14c8:	008ff4f4 	movhi	r2,16339
    14cc:	108ccc84 	addi	r2,r2,13106
    14d0:	1811883a 	mov	r8,r3
    14d4:	902b883a 	mov	r21,r18
    14d8:	8829883a 	mov	r20,r17
    14dc:	1815883a 	mov	r10,r3
    14e0:	143f880e 	bge	r2,r16,1304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001304>
    14e4:	008ffa74 	movhi	r2,16361
    14e8:	14004416 	blt	r2,r16,15fc <__kernel_cos+0x484>
    14ec:	00bff834 	movhi	r2,65504
    14f0:	80a1883a 	add	r16,r16,r2
    14f4:	000d883a 	mov	r6,zero
    14f8:	800f883a 	mov	r7,r16
    14fc:	0009883a 	mov	r4,zero
    1500:	014ffc34 	movhi	r5,16368
    1504:	da400115 	stw	r9,4(sp)
    1508:	d8c00215 	stw	r3,8(sp)
    150c:	00046640 	call	4664 <__subdf3>
    1510:	da000217 	ldw	r8,8(sp)
    1514:	da400117 	ldw	r9,4(sp)
    1518:	102b883a 	mov	r21,r2
    151c:	d8c00015 	stw	r3,0(sp)
    1520:	9009883a 	mov	r4,r18
    1524:	880b883a 	mov	r5,r17
    1528:	000d883a 	mov	r6,zero
    152c:	01cff834 	movhi	r7,16352
    1530:	da000215 	stw	r8,8(sp)
    1534:	da400115 	stw	r9,4(sp)
    1538:	0003f4c0 	call	3f4c <__muldf3>
    153c:	800f883a 	mov	r7,r16
    1540:	000d883a 	mov	r6,zero
    1544:	1009883a 	mov	r4,r2
    1548:	180b883a 	mov	r5,r3
    154c:	00046640 	call	4664 <__subdf3>
    1550:	da400117 	ldw	r9,4(sp)
    1554:	da000217 	ldw	r8,8(sp)
    1558:	9009883a 	mov	r4,r18
    155c:	480d883a 	mov	r6,r9
    1560:	400f883a 	mov	r7,r8
    1564:	880b883a 	mov	r5,r17
    1568:	1029883a 	mov	r20,r2
    156c:	1821883a 	mov	r16,r3
    1570:	0003f4c0 	call	3f4c <__muldf3>
    1574:	b80d883a 	mov	r6,r23
    1578:	e00f883a 	mov	r7,fp
    157c:	b009883a 	mov	r4,r22
    1580:	980b883a 	mov	r5,r19
    1584:	1025883a 	mov	r18,r2
    1588:	1823883a 	mov	r17,r3
    158c:	0003f4c0 	call	3f4c <__muldf3>
    1590:	100d883a 	mov	r6,r2
    1594:	180f883a 	mov	r7,r3
    1598:	9009883a 	mov	r4,r18
    159c:	880b883a 	mov	r5,r17
    15a0:	00046640 	call	4664 <__subdf3>
    15a4:	100d883a 	mov	r6,r2
    15a8:	180f883a 	mov	r7,r3
    15ac:	a009883a 	mov	r4,r20
    15b0:	800b883a 	mov	r5,r16
    15b4:	00046640 	call	4664 <__subdf3>
    15b8:	d9400017 	ldw	r5,0(sp)
    15bc:	100d883a 	mov	r6,r2
    15c0:	180f883a 	mov	r7,r3
    15c4:	a809883a 	mov	r4,r21
    15c8:	00046640 	call	4664 <__subdf3>
    15cc:	dfc00c17 	ldw	ra,48(sp)
    15d0:	df000b17 	ldw	fp,44(sp)
    15d4:	ddc00a17 	ldw	r23,40(sp)
    15d8:	dd800917 	ldw	r22,36(sp)
    15dc:	dd400817 	ldw	r21,32(sp)
    15e0:	dd000717 	ldw	r20,28(sp)
    15e4:	dcc00617 	ldw	r19,24(sp)
    15e8:	dc800517 	ldw	r18,20(sp)
    15ec:	dc400417 	ldw	r17,16(sp)
    15f0:	dc000317 	ldw	r16,12(sp)
    15f4:	dec00d04 	addi	sp,sp,52
    15f8:	f800283a 	ret
    15fc:	008ff9f4 	movhi	r2,16359
    1600:	002b883a 	mov	r21,zero
    1604:	d8800015 	stw	r2,0(sp)
    1608:	040ff4b4 	movhi	r16,16338
    160c:	003fc406 	br	1520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001520>
    1610:	0005883a 	mov	r2,zero
    1614:	00cffc34 	movhi	r3,16368
    1618:	003fec06 	br	15cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70015cc>

0000161c <__kernel_rem_pio2>:
    161c:	deff5a04 	addi	sp,sp,-664
    1620:	da00a617 	ldw	r8,664(sp)
    1624:	00c000b4 	movhi	r3,2
    1628:	18ee1a04 	addi	r3,r3,-18328
    162c:	4205883a 	add	r2,r8,r8
    1630:	1085883a 	add	r2,r2,r2
    1634:	1885883a 	add	r2,r3,r2
    1638:	d9008e15 	stw	r4,568(sp)
    163c:	d9408f15 	stw	r5,572(sp)
    1640:	313fff44 	addi	r4,r6,-3
    1644:	01400604 	movi	r5,24
    1648:	dd80a215 	stw	r22,648(sp)
    164c:	dc009c15 	stw	r16,624(sp)
    1650:	dfc0a515 	stw	ra,660(sp)
    1654:	df00a415 	stw	fp,656(sp)
    1658:	ddc0a315 	stw	r23,652(sp)
    165c:	dd40a115 	stw	r21,644(sp)
    1660:	dd00a015 	stw	r20,640(sp)
    1664:	dcc09f15 	stw	r19,636(sp)
    1668:	dc809e15 	stw	r18,632(sp)
    166c:	dc409d15 	stw	r17,628(sp)
    1670:	3021883a 	mov	r16,r6
    1674:	d9c09315 	stw	r7,588(sp)
    1678:	15800017 	ldw	r22,0(r2)
    167c:	0002a300 	call	2a30 <__divsi3>
    1680:	da009317 	ldw	r8,588(sp)
    1684:	d8809215 	stw	r2,584(sp)
    1688:	423fffc4 	addi	r8,r8,-1
    168c:	da008d15 	stw	r8,564(sp)
    1690:	10033b16 	blt	r2,zero,2380 <__kernel_rem_pio2+0xd64>
    1694:	da009217 	ldw	r8,584(sp)
    1698:	d9009217 	ldw	r4,584(sp)
    169c:	42000044 	addi	r8,r8,1
    16a0:	40fffa24 	muli	r3,r8,-24
    16a4:	da009515 	stw	r8,596(sp)
    16a8:	da008d17 	ldw	r8,564(sp)
    16ac:	1c07883a 	add	r3,r3,r16
    16b0:	d8c09015 	stw	r3,576(sp)
    16b4:	b205883a 	add	r2,r22,r8
    16b8:	2223c83a 	sub	r17,r4,r8
    16bc:	10001016 	blt	r2,zero,1700 <__kernel_rem_pio2+0xe4>
    16c0:	da00a717 	ldw	r8,668(sp)
    16c4:	8c65883a 	add	r18,r17,r17
    16c8:	94a5883a 	add	r18,r18,r18
    16cc:	1445883a 	add	r2,r2,r17
    16d0:	dcc05004 	addi	r19,sp,320
    16d4:	44a5883a 	add	r18,r8,r18
    16d8:	14000044 	addi	r16,r2,1
    16dc:	88015316 	blt	r17,zero,1c2c <__kernel_rem_pio2+0x610>
    16e0:	91000017 	ldw	r4,0(r18)
    16e4:	0004fe00 	call	4fe0 <__floatsidf>
    16e8:	98800015 	stw	r2,0(r19)
    16ec:	98c00115 	stw	r3,4(r19)
    16f0:	8c400044 	addi	r17,r17,1
    16f4:	9cc00204 	addi	r19,r19,8
    16f8:	94800104 	addi	r18,r18,4
    16fc:	8c3ff71e 	bne	r17,r16,16dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016dc>
    1700:	b0002816 	blt	r22,zero,17a4 <__kernel_rem_pio2+0x188>
    1704:	da008d17 	ldw	r8,564(sp)
    1708:	b4c00044 	addi	r19,r22,1
    170c:	982690fa 	slli	r19,r19,3
    1710:	402490fa 	slli	r18,r8,3
    1714:	da008e17 	ldw	r8,568(sp)
    1718:	d8805004 	addi	r2,sp,320
    171c:	94000204 	addi	r16,r18,8
    1720:	d823883a 	mov	r17,sp
    1724:	14a5883a 	add	r18,r2,r18
    1728:	dcef883a 	add	r23,sp,r19
    172c:	4421883a 	add	r16,r8,r16
    1730:	dd809115 	stw	r22,580(sp)
    1734:	4039883a 	mov	fp,r8
    1738:	da008d17 	ldw	r8,564(sp)
    173c:	40016016 	blt	r8,zero,1cc0 <__kernel_rem_pio2+0x6a4>
    1740:	e027883a 	mov	r19,fp
    1744:	9029883a 	mov	r20,r18
    1748:	002d883a 	mov	r22,zero
    174c:	002b883a 	mov	r21,zero
    1750:	a1800017 	ldw	r6,0(r20)
    1754:	a1c00117 	ldw	r7,4(r20)
    1758:	99000017 	ldw	r4,0(r19)
    175c:	99400117 	ldw	r5,4(r19)
    1760:	9cc00204 	addi	r19,r19,8
    1764:	a53ffe04 	addi	r20,r20,-8
    1768:	0003f4c0 	call	3f4c <__muldf3>
    176c:	b009883a 	mov	r4,r22
    1770:	a80b883a 	mov	r5,r21
    1774:	100d883a 	mov	r6,r2
    1778:	180f883a 	mov	r7,r3
    177c:	0002c540 	call	2c54 <__adddf3>
    1780:	102d883a 	mov	r22,r2
    1784:	182b883a 	mov	r21,r3
    1788:	9c3ff11e 	bne	r19,r16,1750 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001750>
    178c:	8d800015 	stw	r22,0(r17)
    1790:	8d400115 	stw	r21,4(r17)
    1794:	8c400204 	addi	r17,r17,8
    1798:	94800204 	addi	r18,r18,8
    179c:	8dffe61e 	bne	r17,r23,1738 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001738>
    17a0:	dd809117 	ldw	r22,580(sp)
    17a4:	00d00034 	movhi	r3,16384
    17a8:	da009317 	ldw	r8,588(sp)
    17ac:	18ffff84 	addi	r3,r3,-2
    17b0:	b0c7883a 	add	r3,r22,r3
    17b4:	18c7883a 	add	r3,r3,r3
    17b8:	402090fa 	slli	r16,r8,3
    17bc:	18c7883a 	add	r3,r3,r3
    17c0:	da007804 	addi	r8,sp,480
    17c4:	40d1883a 	add	r8,r8,r3
    17c8:	b0bfffc4 	addi	r2,r22,-1
    17cc:	da009615 	stw	r8,600(sp)
    17d0:	da008e17 	ldw	r8,568(sp)
    17d4:	1085883a 	add	r2,r2,r2
    17d8:	1085883a 	add	r2,r2,r2
    17dc:	19000104 	addi	r4,r3,4
    17e0:	d885883a 	add	r2,sp,r2
    17e4:	4421883a 	add	r16,r8,r16
    17e8:	da007804 	addi	r8,sp,480
    17ec:	4111883a 	add	r8,r8,r4
    17f0:	10807804 	addi	r2,r2,480
    17f4:	da009715 	stw	r8,604(sp)
    17f8:	b025883a 	mov	r18,r22
    17fc:	d8809815 	stw	r2,608(sp)
    1800:	dd809415 	stw	r22,592(sp)
    1804:	900490fa 	slli	r2,r18,3
    1808:	d885883a 	add	r2,sp,r2
    180c:	17000017 	ldw	fp,0(r2)
    1810:	15400117 	ldw	r21,4(r2)
    1814:	04802b0e 	bge	zero,r18,18c4 <__kernel_rem_pio2+0x2a8>
    1818:	00880034 	movhi	r2,8192
    181c:	10bfffc4 	addi	r2,r2,-1
    1820:	90a9883a 	add	r20,r18,r2
    1824:	a02890fa 	slli	r20,r20,3
    1828:	dc407804 	addi	r17,sp,480
    182c:	dcfffe04 	addi	r19,sp,-8
    1830:	dd29883a 	add	r20,sp,r20
    1834:	000d883a 	mov	r6,zero
    1838:	01cf9c34 	movhi	r7,15984
    183c:	e009883a 	mov	r4,fp
    1840:	a80b883a 	mov	r5,r21
    1844:	0003f4c0 	call	3f4c <__muldf3>
    1848:	180b883a 	mov	r5,r3
    184c:	1009883a 	mov	r4,r2
    1850:	0004f600 	call	4f60 <__fixdfsi>
    1854:	1009883a 	mov	r4,r2
    1858:	0004fe00 	call	4fe0 <__floatsidf>
    185c:	000d883a 	mov	r6,zero
    1860:	01d05c34 	movhi	r7,16752
    1864:	1009883a 	mov	r4,r2
    1868:	180b883a 	mov	r5,r3
    186c:	102f883a 	mov	r23,r2
    1870:	182d883a 	mov	r22,r3
    1874:	0003f4c0 	call	3f4c <__muldf3>
    1878:	100d883a 	mov	r6,r2
    187c:	180f883a 	mov	r7,r3
    1880:	e009883a 	mov	r4,fp
    1884:	a80b883a 	mov	r5,r21
    1888:	00046640 	call	4664 <__subdf3>
    188c:	180b883a 	mov	r5,r3
    1890:	1009883a 	mov	r4,r2
    1894:	0004f600 	call	4f60 <__fixdfsi>
    1898:	a1800017 	ldw	r6,0(r20)
    189c:	a1c00117 	ldw	r7,4(r20)
    18a0:	88800015 	stw	r2,0(r17)
    18a4:	b809883a 	mov	r4,r23
    18a8:	b00b883a 	mov	r5,r22
    18ac:	0002c540 	call	2c54 <__adddf3>
    18b0:	a53ffe04 	addi	r20,r20,-8
    18b4:	1039883a 	mov	fp,r2
    18b8:	182b883a 	mov	r21,r3
    18bc:	8c400104 	addi	r17,r17,4
    18c0:	a4ffdc1e 	bne	r20,r19,1834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001834>
    18c4:	d9809017 	ldw	r6,576(sp)
    18c8:	a80b883a 	mov	r5,r21
    18cc:	e009883a 	mov	r4,fp
    18d0:	00028780 	call	2878 <scalbn>
    18d4:	000d883a 	mov	r6,zero
    18d8:	01cff034 	movhi	r7,16320
    18dc:	1009883a 	mov	r4,r2
    18e0:	180b883a 	mov	r5,r3
    18e4:	1027883a 	mov	r19,r2
    18e8:	1823883a 	mov	r17,r3
    18ec:	0003f4c0 	call	3f4c <__muldf3>
    18f0:	1009883a 	mov	r4,r2
    18f4:	180b883a 	mov	r5,r3
    18f8:	000268c0 	call	268c <floor>
    18fc:	000d883a 	mov	r6,zero
    1900:	01d00834 	movhi	r7,16416
    1904:	1009883a 	mov	r4,r2
    1908:	180b883a 	mov	r5,r3
    190c:	0003f4c0 	call	3f4c <__muldf3>
    1910:	100d883a 	mov	r6,r2
    1914:	180f883a 	mov	r7,r3
    1918:	9809883a 	mov	r4,r19
    191c:	880b883a 	mov	r5,r17
    1920:	00046640 	call	4664 <__subdf3>
    1924:	180b883a 	mov	r5,r3
    1928:	1009883a 	mov	r4,r2
    192c:	1827883a 	mov	r19,r3
    1930:	1029883a 	mov	r20,r2
    1934:	0004f600 	call	4f60 <__fixdfsi>
    1938:	1009883a 	mov	r4,r2
    193c:	1023883a 	mov	r17,r2
    1940:	0004fe00 	call	4fe0 <__floatsidf>
    1944:	a009883a 	mov	r4,r20
    1948:	100d883a 	mov	r6,r2
    194c:	180f883a 	mov	r7,r3
    1950:	980b883a 	mov	r5,r19
    1954:	00046640 	call	4664 <__subdf3>
    1958:	d9009017 	ldw	r4,576(sp)
    195c:	1013883a 	mov	r9,r2
    1960:	102b883a 	mov	r21,r2
    1964:	1811883a 	mov	r8,r3
    1968:	0100b30e 	bge	zero,r4,1c38 <__kernel_rem_pio2+0x61c>
    196c:	90bfffc4 	addi	r2,r18,-1
    1970:	1085883a 	add	r2,r2,r2
    1974:	1085883a 	add	r2,r2,r2
    1978:	d885883a 	add	r2,sp,r2
    197c:	10807804 	addi	r2,r2,480
    1980:	d9809017 	ldw	r6,576(sp)
    1984:	11400017 	ldw	r5,0(r2)
    1988:	01000604 	movi	r4,24
    198c:	2189c83a 	sub	r4,r4,r6
    1990:	290dd83a 	sra	r6,r5,r4
    1994:	d9c09017 	ldw	r7,576(sp)
    1998:	04c005c4 	movi	r19,23
    199c:	3108983a 	sll	r4,r6,r4
    19a0:	99e7c83a 	sub	r19,r19,r7
    19a4:	89a3883a 	add	r17,r17,r6
    19a8:	2909c83a 	sub	r4,r5,r4
    19ac:	24e7d83a 	sra	r19,r4,r19
    19b0:	11000015 	stw	r4,0(r2)
    19b4:	04c02a0e 	bge	zero,r19,1a60 <__kernel_rem_pio2+0x444>
    19b8:	8c400044 	addi	r17,r17,1
    19bc:	0481570e 	bge	zero,r18,1f1c <__kernel_rem_pio2+0x900>
    19c0:	02804034 	movhi	r10,256
    19c4:	52bfffc4 	addi	r10,r10,-1
    19c8:	d8807804 	addi	r2,sp,480
    19cc:	000b883a 	mov	r5,zero
    19d0:	0029883a 	mov	r20,zero
    19d4:	01c04034 	movhi	r7,256
    19d8:	00000706 	br	19f8 <__kernel_rem_pio2+0x3dc>
    19dc:	390dc83a 	sub	r6,r7,r4
    19e0:	20000226 	beq	r4,zero,19ec <__kernel_rem_pio2+0x3d0>
    19e4:	11800015 	stw	r6,0(r2)
    19e8:	05000044 	movi	r20,1
    19ec:	29400044 	addi	r5,r5,1
    19f0:	10800104 	addi	r2,r2,4
    19f4:	2c80080e 	bge	r5,r18,1a18 <__kernel_rem_pio2+0x3fc>
    19f8:	11000017 	ldw	r4,0(r2)
    19fc:	a03ff726 	beq	r20,zero,19dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019dc>
    1a00:	5109c83a 	sub	r4,r10,r4
    1a04:	11000015 	stw	r4,0(r2)
    1a08:	29400044 	addi	r5,r5,1
    1a0c:	05000044 	movi	r20,1
    1a10:	10800104 	addi	r2,r2,4
    1a14:	2cbff816 	blt	r5,r18,19f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019f8>
    1a18:	d9009017 	ldw	r4,576(sp)
    1a1c:	01000e0e 	bge	zero,r4,1a58 <__kernel_rem_pio2+0x43c>
    1a20:	00800044 	movi	r2,1
    1a24:	20808d26 	beq	r4,r2,1c5c <__kernel_rem_pio2+0x640>
    1a28:	00800084 	movi	r2,2
    1a2c:	20800a1e 	bne	r4,r2,1a58 <__kernel_rem_pio2+0x43c>
    1a30:	90bfffc4 	addi	r2,r18,-1
    1a34:	1085883a 	add	r2,r2,r2
    1a38:	1085883a 	add	r2,r2,r2
    1a3c:	d885883a 	add	r2,sp,r2
    1a40:	10807804 	addi	r2,r2,480
    1a44:	11400017 	ldw	r5,0(r2)
    1a48:	01001034 	movhi	r4,64
    1a4c:	213fffc4 	addi	r4,r4,-1
    1a50:	2908703a 	and	r4,r5,r4
    1a54:	11000015 	stw	r4,0(r2)
    1a58:	00800084 	movi	r2,2
    1a5c:	98805d26 	beq	r19,r2,1bd4 <__kernel_rem_pio2+0x5b8>
    1a60:	400b883a 	mov	r5,r8
    1a64:	000d883a 	mov	r6,zero
    1a68:	000f883a 	mov	r7,zero
    1a6c:	a809883a 	mov	r4,r21
    1a70:	da009b15 	stw	r8,620(sp)
    1a74:	0003de80 	call	3de8 <__eqdf2>
    1a78:	da009b17 	ldw	r8,620(sp)
    1a7c:	10012b1e 	bne	r2,zero,1f2c <__kernel_rem_pio2+0x910>
    1a80:	da009417 	ldw	r8,592(sp)
    1a84:	917fffc4 	addi	r5,r18,-1
    1a88:	2a000e16 	blt	r5,r8,1ac4 <__kernel_rem_pio2+0x4a8>
    1a8c:	00900034 	movhi	r2,16384
    1a90:	10bfffc4 	addi	r2,r2,-1
    1a94:	9085883a 	add	r2,r18,r2
    1a98:	1085883a 	add	r2,r2,r2
    1a9c:	d9809717 	ldw	r6,604(sp)
    1aa0:	1085883a 	add	r2,r2,r2
    1aa4:	d9007804 	addi	r4,sp,480
    1aa8:	0007883a 	mov	r3,zero
    1aac:	2085883a 	add	r2,r4,r2
    1ab0:	11000017 	ldw	r4,0(r2)
    1ab4:	10bfff04 	addi	r2,r2,-4
    1ab8:	1906b03a 	or	r3,r3,r4
    1abc:	11bffc1e 	bne	r2,r6,1ab0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ab0>
    1ac0:	1800821e 	bne	r3,zero,1ccc <__kernel_rem_pio2+0x6b0>
    1ac4:	da009817 	ldw	r8,608(sp)
    1ac8:	40800017 	ldw	r2,0(r8)
    1acc:	1001151e 	bne	r2,zero,1f24 <__kernel_rem_pio2+0x908>
    1ad0:	d8809617 	ldw	r2,600(sp)
    1ad4:	05000044 	movi	r20,1
    1ad8:	10bfff04 	addi	r2,r2,-4
    1adc:	10c00117 	ldw	r3,4(r2)
    1ae0:	a5000044 	addi	r20,r20,1
    1ae4:	183ffc26 	beq	r3,zero,1ad8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ad8>
    1ae8:	9529883a 	add	r20,r18,r20
    1aec:	90800044 	addi	r2,r18,1
    1af0:	dd009115 	stw	r20,580(sp)
    1af4:	a0803216 	blt	r20,r2,1bc0 <__kernel_rem_pio2+0x5a4>
    1af8:	da009317 	ldw	r8,588(sp)
    1afc:	d8c09117 	ldw	r3,580(sp)
    1b00:	44a3883a 	add	r17,r8,r18
    1b04:	da009217 	ldw	r8,584(sp)
    1b08:	882290fa 	slli	r17,r17,3
    1b0c:	40a5883a 	add	r18,r8,r2
    1b10:	da009517 	ldw	r8,596(sp)
    1b14:	100490fa 	slli	r2,r2,3
    1b18:	94a5883a 	add	r18,r18,r18
    1b1c:	40eb883a 	add	r21,r8,r3
    1b20:	da00a717 	ldw	r8,668(sp)
    1b24:	ad6b883a 	add	r21,r21,r21
    1b28:	94a5883a 	add	r18,r18,r18
    1b2c:	ad6b883a 	add	r21,r21,r21
    1b30:	d8c05004 	addi	r3,sp,320
    1b34:	44a5883a 	add	r18,r8,r18
    1b38:	1c63883a 	add	r17,r3,r17
    1b3c:	d8a7883a 	add	r19,sp,r2
    1b40:	456b883a 	add	r21,r8,r21
    1b44:	91000017 	ldw	r4,0(r18)
    1b48:	0004fe00 	call	4fe0 <__floatsidf>
    1b4c:	da008d17 	ldw	r8,564(sp)
    1b50:	88800015 	stw	r2,0(r17)
    1b54:	88c00115 	stw	r3,4(r17)
    1b58:	40001b16 	blt	r8,zero,1bc8 <__kernel_rem_pio2+0x5ac>
    1b5c:	dd008e17 	ldw	r20,568(sp)
    1b60:	882d883a 	mov	r22,r17
    1b64:	002f883a 	mov	r23,zero
    1b68:	0039883a 	mov	fp,zero
    1b6c:	b1800017 	ldw	r6,0(r22)
    1b70:	b1c00117 	ldw	r7,4(r22)
    1b74:	a1000017 	ldw	r4,0(r20)
    1b78:	a1400117 	ldw	r5,4(r20)
    1b7c:	a5000204 	addi	r20,r20,8
    1b80:	b5bffe04 	addi	r22,r22,-8
    1b84:	0003f4c0 	call	3f4c <__muldf3>
    1b88:	b809883a 	mov	r4,r23
    1b8c:	e00b883a 	mov	r5,fp
    1b90:	100d883a 	mov	r6,r2
    1b94:	180f883a 	mov	r7,r3
    1b98:	0002c540 	call	2c54 <__adddf3>
    1b9c:	102f883a 	mov	r23,r2
    1ba0:	1839883a 	mov	fp,r3
    1ba4:	a43ff11e 	bne	r20,r16,1b6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b6c>
    1ba8:	9dc00015 	stw	r23,0(r19)
    1bac:	9f000115 	stw	fp,4(r19)
    1bb0:	94800104 	addi	r18,r18,4
    1bb4:	8c400204 	addi	r17,r17,8
    1bb8:	9cc00204 	addi	r19,r19,8
    1bbc:	957fe11e 	bne	r18,r21,1b44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b44>
    1bc0:	dc809117 	ldw	r18,580(sp)
    1bc4:	003f0f06 	br	1804 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001804>
    1bc8:	002f883a 	mov	r23,zero
    1bcc:	0039883a 	mov	fp,zero
    1bd0:	003ff506 	br	1ba8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ba8>
    1bd4:	480d883a 	mov	r6,r9
    1bd8:	180f883a 	mov	r7,r3
    1bdc:	0009883a 	mov	r4,zero
    1be0:	014ffc34 	movhi	r5,16368
    1be4:	00046640 	call	4664 <__subdf3>
    1be8:	102b883a 	mov	r21,r2
    1bec:	1811883a 	mov	r8,r3
    1bf0:	a03f9b26 	beq	r20,zero,1a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a60>
    1bf4:	d9809017 	ldw	r6,576(sp)
    1bf8:	0009883a 	mov	r4,zero
    1bfc:	014ffc34 	movhi	r5,16368
    1c00:	d8c09b15 	stw	r3,620(sp)
    1c04:	00028780 	call	2878 <scalbn>
    1c08:	da009b17 	ldw	r8,620(sp)
    1c0c:	a809883a 	mov	r4,r21
    1c10:	100d883a 	mov	r6,r2
    1c14:	400b883a 	mov	r5,r8
    1c18:	180f883a 	mov	r7,r3
    1c1c:	00046640 	call	4664 <__subdf3>
    1c20:	102b883a 	mov	r21,r2
    1c24:	1811883a 	mov	r8,r3
    1c28:	003f8d06 	br	1a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a60>
    1c2c:	0005883a 	mov	r2,zero
    1c30:	0007883a 	mov	r3,zero
    1c34:	003eac06 	br	16e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016e8>
    1c38:	d8809017 	ldw	r2,576(sp)
    1c3c:	1000121e 	bne	r2,zero,1c88 <__kernel_rem_pio2+0x66c>
    1c40:	90bfffc4 	addi	r2,r18,-1
    1c44:	1085883a 	add	r2,r2,r2
    1c48:	1085883a 	add	r2,r2,r2
    1c4c:	d885883a 	add	r2,sp,r2
    1c50:	14c07817 	ldw	r19,480(r2)
    1c54:	9827d5fa 	srai	r19,r19,23
    1c58:	003f5606 	br	19b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019b4>
    1c5c:	90bfffc4 	addi	r2,r18,-1
    1c60:	1085883a 	add	r2,r2,r2
    1c64:	1085883a 	add	r2,r2,r2
    1c68:	d885883a 	add	r2,sp,r2
    1c6c:	10807804 	addi	r2,r2,480
    1c70:	11000017 	ldw	r4,0(r2)
    1c74:	01402034 	movhi	r5,128
    1c78:	297fffc4 	addi	r5,r5,-1
    1c7c:	2148703a 	and	r4,r4,r5
    1c80:	11000015 	stw	r4,0(r2)
    1c84:	003f7406 	br	1a58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a58>
    1c88:	4809883a 	mov	r4,r9
    1c8c:	180b883a 	mov	r5,r3
    1c90:	000d883a 	mov	r6,zero
    1c94:	01cff834 	movhi	r7,16352
    1c98:	d8c09a15 	stw	r3,616(sp)
    1c9c:	d8c09b15 	stw	r3,620(sp)
    1ca0:	da409915 	stw	r9,612(sp)
    1ca4:	0003e700 	call	3e70 <__gedf2>
    1ca8:	d8c09a17 	ldw	r3,616(sp)
    1cac:	da009b17 	ldw	r8,620(sp)
    1cb0:	da409917 	ldw	r9,612(sp)
    1cb4:	1000920e 	bge	r2,zero,1f00 <__kernel_rem_pio2+0x8e4>
    1cb8:	0027883a 	mov	r19,zero
    1cbc:	003f6806 	br	1a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a60>
    1cc0:	002d883a 	mov	r22,zero
    1cc4:	002b883a 	mov	r21,zero
    1cc8:	003eb006 	br	178c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700178c>
    1ccc:	2945883a 	add	r2,r5,r5
    1cd0:	da009017 	ldw	r8,576(sp)
    1cd4:	1085883a 	add	r2,r2,r2
    1cd8:	d885883a 	add	r2,sp,r2
    1cdc:	10807817 	ldw	r2,480(r2)
    1ce0:	423ffa04 	addi	r8,r8,-24
    1ce4:	dc409115 	stw	r17,580(sp)
    1ce8:	dcc08d15 	stw	r19,564(sp)
    1cec:	da009015 	stw	r8,576(sp)
    1cf0:	dd809417 	ldw	r22,592(sp)
    1cf4:	2823883a 	mov	r17,r5
    1cf8:	10000e1e 	bne	r2,zero,1d34 <__kernel_rem_pio2+0x718>
    1cfc:	00900034 	movhi	r2,16384
    1d00:	10bfffc4 	addi	r2,r2,-1
    1d04:	2885883a 	add	r2,r5,r2
    1d08:	1085883a 	add	r2,r2,r2
    1d0c:	d8c07804 	addi	r3,sp,480
    1d10:	1085883a 	add	r2,r2,r2
    1d14:	1885883a 	add	r2,r3,r2
    1d18:	4007883a 	mov	r3,r8
    1d1c:	10bfff04 	addi	r2,r2,-4
    1d20:	11000117 	ldw	r4,4(r2)
    1d24:	8c7fffc4 	addi	r17,r17,-1
    1d28:	18fffa04 	addi	r3,r3,-24
    1d2c:	203ffb26 	beq	r4,zero,1d1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d1c>
    1d30:	d8c09015 	stw	r3,576(sp)
    1d34:	d9809017 	ldw	r6,576(sp)
    1d38:	0009883a 	mov	r4,zero
    1d3c:	014ffc34 	movhi	r5,16368
    1d40:	00028780 	call	2878 <scalbn>
    1d44:	1029883a 	mov	r20,r2
    1d48:	182b883a 	mov	r21,r3
    1d4c:	88018416 	blt	r17,zero,2360 <__kernel_rem_pio2+0xd44>
    1d50:	881090fa 	slli	r8,r17,3
    1d54:	d8c07804 	addi	r3,sp,480
    1d58:	da008e15 	stw	r8,568(sp)
    1d5c:	d8808e17 	ldw	r2,568(sp)
    1d60:	8c51883a 	add	r8,r17,r17
    1d64:	4211883a 	add	r8,r8,r8
    1d68:	d8a1883a 	add	r16,sp,r2
    1d6c:	1a25883a 	add	r18,r3,r8
    1d70:	da3ffe04 	addi	r8,sp,-8
    1d74:	da008c15 	stw	r8,560(sp)
    1d78:	8039883a 	mov	fp,r16
    1d7c:	91000017 	ldw	r4,0(r18)
    1d80:	e73ffe04 	addi	fp,fp,-8
    1d84:	94bfff04 	addi	r18,r18,-4
    1d88:	0004fe00 	call	4fe0 <__floatsidf>
    1d8c:	a00d883a 	mov	r6,r20
    1d90:	a80f883a 	mov	r7,r21
    1d94:	1009883a 	mov	r4,r2
    1d98:	180b883a 	mov	r5,r3
    1d9c:	0003f4c0 	call	3f4c <__muldf3>
    1da0:	a009883a 	mov	r4,r20
    1da4:	a80b883a 	mov	r5,r21
    1da8:	e0800215 	stw	r2,8(fp)
    1dac:	e0c00315 	stw	r3,12(fp)
    1db0:	000d883a 	mov	r6,zero
    1db4:	01cf9c34 	movhi	r7,15984
    1db8:	0003f4c0 	call	3f4c <__muldf3>
    1dbc:	da008c17 	ldw	r8,560(sp)
    1dc0:	1029883a 	mov	r20,r2
    1dc4:	182b883a 	mov	r21,r3
    1dc8:	e23fec1e 	bne	fp,r8,1d7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d7c>
    1dcc:	0029883a 	mov	r20,zero
    1dd0:	b0004f16 	blt	r22,zero,1f10 <__kernel_rem_pio2+0x8f4>
    1dd4:	054000b4 	movhi	r21,2
    1dd8:	014ffe74 	movhi	r5,16377
    1ddc:	ad6e0c04 	addi	r21,r21,-18384
    1de0:	8027883a 	mov	r19,r16
    1de4:	01100034 	movhi	r4,16384
    1de8:	29487ec4 	addi	r5,r5,8699
    1dec:	0039883a 	mov	fp,zero
    1df0:	002f883a 	mov	r23,zero
    1df4:	0025883a 	mov	r18,zero
    1df8:	00000506 	br	1e10 <__kernel_rem_pio2+0x7f4>
    1dfc:	9cc00204 	addi	r19,r19,8
    1e00:	a4800f16 	blt	r20,r18,1e40 <__kernel_rem_pio2+0x824>
    1e04:	a9000017 	ldw	r4,0(r21)
    1e08:	a9400117 	ldw	r5,4(r21)
    1e0c:	ad400204 	addi	r21,r21,8
    1e10:	99800017 	ldw	r6,0(r19)
    1e14:	99c00117 	ldw	r7,4(r19)
    1e18:	94800044 	addi	r18,r18,1
    1e1c:	0003f4c0 	call	3f4c <__muldf3>
    1e20:	e009883a 	mov	r4,fp
    1e24:	b80b883a 	mov	r5,r23
    1e28:	100d883a 	mov	r6,r2
    1e2c:	180f883a 	mov	r7,r3
    1e30:	0002c540 	call	2c54 <__adddf3>
    1e34:	1039883a 	mov	fp,r2
    1e38:	182f883a 	mov	r23,r3
    1e3c:	b4bfef0e 	bge	r22,r18,1dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001dfc>
    1e40:	a00490fa 	slli	r2,r20,3
    1e44:	da008c17 	ldw	r8,560(sp)
    1e48:	843ffe04 	addi	r16,r16,-8
    1e4c:	d885883a 	add	r2,sp,r2
    1e50:	10802804 	addi	r2,r2,160
    1e54:	17000015 	stw	fp,0(r2)
    1e58:	15c00115 	stw	r23,4(r2)
    1e5c:	a5000044 	addi	r20,r20,1
    1e60:	823fdb1e 	bne	r16,r8,1dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001dd0>
    1e64:	da00a617 	ldw	r8,664(sp)
    1e68:	00800084 	movi	r2,2
    1e6c:	12006616 	blt	r2,r8,2008 <__kernel_rem_pio2+0x9ec>
    1e70:	0200de16 	blt	zero,r8,21ec <__kernel_rem_pio2+0xbd0>
    1e74:	4000141e 	bne	r8,zero,1ec8 <__kernel_rem_pio2+0x8ac>
    1e78:	da008e17 	ldw	r8,568(sp)
    1e7c:	d8802804 	addi	r2,sp,160
    1e80:	0007883a 	mov	r3,zero
    1e84:	1225883a 	add	r18,r2,r8
    1e88:	043fffc4 	movi	r16,-1
    1e8c:	0005883a 	mov	r2,zero
    1e90:	91800017 	ldw	r6,0(r18)
    1e94:	91c00117 	ldw	r7,4(r18)
    1e98:	1009883a 	mov	r4,r2
    1e9c:	180b883a 	mov	r5,r3
    1ea0:	8c7fffc4 	addi	r17,r17,-1
    1ea4:	0002c540 	call	2c54 <__adddf3>
    1ea8:	94bffe04 	addi	r18,r18,-8
    1eac:	8c3ff81e 	bne	r17,r16,1e90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e90>
    1eb0:	da008d17 	ldw	r8,564(sp)
    1eb4:	40000126 	beq	r8,zero,1ebc <__kernel_rem_pio2+0x8a0>
    1eb8:	18e0003c 	xorhi	r3,r3,32768
    1ebc:	da008f17 	ldw	r8,572(sp)
    1ec0:	40800015 	stw	r2,0(r8)
    1ec4:	40c00115 	stw	r3,4(r8)
    1ec8:	da009117 	ldw	r8,580(sp)
    1ecc:	408001cc 	andi	r2,r8,7
    1ed0:	dfc0a517 	ldw	ra,660(sp)
    1ed4:	df00a417 	ldw	fp,656(sp)
    1ed8:	ddc0a317 	ldw	r23,652(sp)
    1edc:	dd80a217 	ldw	r22,648(sp)
    1ee0:	dd40a117 	ldw	r21,644(sp)
    1ee4:	dd00a017 	ldw	r20,640(sp)
    1ee8:	dcc09f17 	ldw	r19,636(sp)
    1eec:	dc809e17 	ldw	r18,632(sp)
    1ef0:	dc409d17 	ldw	r17,628(sp)
    1ef4:	dc009c17 	ldw	r16,624(sp)
    1ef8:	dec0a604 	addi	sp,sp,664
    1efc:	f800283a 	ret
    1f00:	8c400044 	addi	r17,r17,1
    1f04:	04810d0e 	bge	zero,r18,233c <__kernel_rem_pio2+0xd20>
    1f08:	04c00084 	movi	r19,2
    1f0c:	003eac06 	br	19c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019c0>
    1f10:	0039883a 	mov	fp,zero
    1f14:	002f883a 	mov	r23,zero
    1f18:	003fc906 	br	1e40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e40>
    1f1c:	0029883a 	mov	r20,zero
    1f20:	003ebd06 	br	1a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a18>
    1f24:	05000044 	movi	r20,1
    1f28:	003eef06 	br	1ae8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ae8>
    1f2c:	4029883a 	mov	r20,r8
    1f30:	da009017 	ldw	r8,576(sp)
    1f34:	a809883a 	mov	r4,r21
    1f38:	a00b883a 	mov	r5,r20
    1f3c:	020dc83a 	sub	r6,zero,r8
    1f40:	dc409115 	stw	r17,580(sp)
    1f44:	dd809417 	ldw	r22,592(sp)
    1f48:	dcc08d15 	stw	r19,564(sp)
    1f4c:	00028780 	call	2878 <scalbn>
    1f50:	000d883a 	mov	r6,zero
    1f54:	01d05c34 	movhi	r7,16752
    1f58:	1009883a 	mov	r4,r2
    1f5c:	180b883a 	mov	r5,r3
    1f60:	102b883a 	mov	r21,r2
    1f64:	1823883a 	mov	r17,r3
    1f68:	0003e700 	call	3e70 <__gedf2>
    1f6c:	1000e916 	blt	r2,zero,2314 <__kernel_rem_pio2+0xcf8>
    1f70:	000d883a 	mov	r6,zero
    1f74:	01cf9c34 	movhi	r7,15984
    1f78:	880b883a 	mov	r5,r17
    1f7c:	a809883a 	mov	r4,r21
    1f80:	0003f4c0 	call	3f4c <__muldf3>
    1f84:	180b883a 	mov	r5,r3
    1f88:	1009883a 	mov	r4,r2
    1f8c:	0004f600 	call	4f60 <__fixdfsi>
    1f90:	1029883a 	mov	r20,r2
    1f94:	9485883a 	add	r2,r18,r18
    1f98:	1085883a 	add	r2,r2,r2
    1f9c:	a009883a 	mov	r4,r20
    1fa0:	d8a1883a 	add	r16,sp,r2
    1fa4:	0004fe00 	call	4fe0 <__floatsidf>
    1fa8:	000d883a 	mov	r6,zero
    1fac:	01d05c34 	movhi	r7,16752
    1fb0:	1009883a 	mov	r4,r2
    1fb4:	180b883a 	mov	r5,r3
    1fb8:	0003f4c0 	call	3f4c <__muldf3>
    1fbc:	880b883a 	mov	r5,r17
    1fc0:	100d883a 	mov	r6,r2
    1fc4:	180f883a 	mov	r7,r3
    1fc8:	a809883a 	mov	r4,r21
    1fcc:	00046640 	call	4664 <__subdf3>
    1fd0:	180b883a 	mov	r5,r3
    1fd4:	1009883a 	mov	r4,r2
    1fd8:	0004f600 	call	4f60 <__fixdfsi>
    1fdc:	da009017 	ldw	r8,576(sp)
    1fe0:	94400044 	addi	r17,r18,1
    1fe4:	8c47883a 	add	r3,r17,r17
    1fe8:	84007804 	addi	r16,r16,480
    1fec:	18c7883a 	add	r3,r3,r3
    1ff0:	80800015 	stw	r2,0(r16)
    1ff4:	d8c7883a 	add	r3,sp,r3
    1ff8:	42000604 	addi	r8,r8,24
    1ffc:	da009015 	stw	r8,576(sp)
    2000:	1d007815 	stw	r20,480(r3)
    2004:	003f4b06 	br	1d34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d34>
    2008:	da00a617 	ldw	r8,664(sp)
    200c:	008000c4 	movi	r2,3
    2010:	40bfad1e 	bne	r8,r2,1ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ec8>
    2014:	0440bc0e 	bge	zero,r17,2308 <__kernel_rem_pio2+0xcec>
    2018:	da008e17 	ldw	r8,568(sp)
    201c:	882090fa 	slli	r16,r17,3
    2020:	dd402804 	addi	r21,sp,160
    2024:	da05883a 	add	r2,sp,r8
    2028:	10802804 	addi	r2,r2,160
    202c:	15c00017 	ldw	r23,0(r2)
    2030:	15800117 	ldw	r22,4(r2)
    2034:	8029883a 	mov	r20,r16
    2038:	843ffe04 	addi	r16,r16,-8
    203c:	ac21883a 	add	r16,r21,r16
    2040:	ad29883a 	add	r20,r21,r20
    2044:	dac02604 	addi	r11,sp,152
    2048:	8811883a 	mov	r8,r17
    204c:	84400017 	ldw	r17,0(r16)
    2050:	87000117 	ldw	fp,4(r16)
    2054:	b80d883a 	mov	r6,r23
    2058:	b00f883a 	mov	r7,r22
    205c:	8809883a 	mov	r4,r17
    2060:	e00b883a 	mov	r5,fp
    2064:	da009b15 	stw	r8,620(sp)
    2068:	dac09915 	stw	r11,612(sp)
    206c:	0002c540 	call	2c54 <__adddf3>
    2070:	100d883a 	mov	r6,r2
    2074:	180f883a 	mov	r7,r3
    2078:	8809883a 	mov	r4,r17
    207c:	e00b883a 	mov	r5,fp
    2080:	1027883a 	mov	r19,r2
    2084:	1825883a 	mov	r18,r3
    2088:	00046640 	call	4664 <__subdf3>
    208c:	b80d883a 	mov	r6,r23
    2090:	b00f883a 	mov	r7,r22
    2094:	1009883a 	mov	r4,r2
    2098:	180b883a 	mov	r5,r3
    209c:	0002c540 	call	2c54 <__adddf3>
    20a0:	dac09917 	ldw	r11,612(sp)
    20a4:	a0800015 	stw	r2,0(r20)
    20a8:	a0c00115 	stw	r3,4(r20)
    20ac:	84c00015 	stw	r19,0(r16)
    20b0:	84800115 	stw	r18,4(r16)
    20b4:	843ffe04 	addi	r16,r16,-8
    20b8:	a53ffe04 	addi	r20,r20,-8
    20bc:	982f883a 	mov	r23,r19
    20c0:	902d883a 	mov	r22,r18
    20c4:	da009b17 	ldw	r8,620(sp)
    20c8:	5c3fe01e 	bne	r11,r16,204c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700204c>
    20cc:	00800044 	movi	r2,1
    20d0:	12008d0e 	bge	r2,r8,2308 <__kernel_rem_pio2+0xcec>
    20d4:	402090fa 	slli	r16,r8,3
    20d8:	da008e17 	ldw	r8,568(sp)
    20dc:	8023883a 	mov	r17,r16
    20e0:	da05883a 	add	r2,sp,r8
    20e4:	10802804 	addi	r2,r2,160
    20e8:	15800017 	ldw	r22,0(r2)
    20ec:	15000117 	ldw	r20,4(r2)
    20f0:	ac63883a 	add	r17,r21,r17
    20f4:	843ffe04 	addi	r16,r16,-8
    20f8:	ac21883a 	add	r16,r21,r16
    20fc:	8825883a 	mov	r18,r17
    2100:	8811883a 	mov	r8,r17
    2104:	84400017 	ldw	r17,0(r16)
    2108:	87000117 	ldw	fp,4(r16)
    210c:	b009883a 	mov	r4,r22
    2110:	a00b883a 	mov	r5,r20
    2114:	880d883a 	mov	r6,r17
    2118:	e00f883a 	mov	r7,fp
    211c:	da009b15 	stw	r8,620(sp)
    2120:	0002c540 	call	2c54 <__adddf3>
    2124:	100d883a 	mov	r6,r2
    2128:	180f883a 	mov	r7,r3
    212c:	8809883a 	mov	r4,r17
    2130:	e00b883a 	mov	r5,fp
    2134:	102f883a 	mov	r23,r2
    2138:	1827883a 	mov	r19,r3
    213c:	00046640 	call	4664 <__subdf3>
    2140:	b00d883a 	mov	r6,r22
    2144:	a00f883a 	mov	r7,r20
    2148:	1009883a 	mov	r4,r2
    214c:	180b883a 	mov	r5,r3
    2150:	0002c540 	call	2c54 <__adddf3>
    2154:	90800015 	stw	r2,0(r18)
    2158:	90c00115 	stw	r3,4(r18)
    215c:	85c00015 	stw	r23,0(r16)
    2160:	84c00115 	stw	r19,4(r16)
    2164:	843ffe04 	addi	r16,r16,-8
    2168:	94bffe04 	addi	r18,r18,-8
    216c:	b82d883a 	mov	r22,r23
    2170:	9829883a 	mov	r20,r19
    2174:	da009b17 	ldw	r8,620(sp)
    2178:	ac3fe21e 	bne	r21,r16,2104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002104>
    217c:	4023883a 	mov	r17,r8
    2180:	dc002a04 	addi	r16,sp,168
    2184:	0005883a 	mov	r2,zero
    2188:	0007883a 	mov	r3,zero
    218c:	89800017 	ldw	r6,0(r17)
    2190:	89c00117 	ldw	r7,4(r17)
    2194:	1009883a 	mov	r4,r2
    2198:	8c7ffe04 	addi	r17,r17,-8
    219c:	180b883a 	mov	r5,r3
    21a0:	0002c540 	call	2c54 <__adddf3>
    21a4:	847ff91e 	bne	r16,r17,218c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700218c>
    21a8:	da008d17 	ldw	r8,564(sp)
    21ac:	40004726 	beq	r8,zero,22cc <__kernel_rem_pio2+0xcb0>
    21b0:	d9002b17 	ldw	r4,172(sp)
    21b4:	d9402917 	ldw	r5,164(sp)
    21b8:	d9802a17 	ldw	r6,168(sp)
    21bc:	da008f17 	ldw	r8,572(sp)
    21c0:	d9c02817 	ldw	r7,160(sp)
    21c4:	2960003c 	xorhi	r5,r5,32768
    21c8:	2120003c 	xorhi	r4,r4,32768
    21cc:	18e0003c 	xorhi	r3,r3,32768
    21d0:	41c00015 	stw	r7,0(r8)
    21d4:	41400115 	stw	r5,4(r8)
    21d8:	41800215 	stw	r6,8(r8)
    21dc:	41000315 	stw	r4,12(r8)
    21e0:	40800415 	stw	r2,16(r8)
    21e4:	40c00515 	stw	r3,20(r8)
    21e8:	003f3706 	br	1ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ec8>
    21ec:	da008e17 	ldw	r8,568(sp)
    21f0:	d8802804 	addi	r2,sp,160
    21f4:	dc002604 	addi	r16,sp,152
    21f8:	1225883a 	add	r18,r2,r8
    21fc:	0007883a 	mov	r3,zero
    2200:	0005883a 	mov	r2,zero
    2204:	91800017 	ldw	r6,0(r18)
    2208:	91c00117 	ldw	r7,4(r18)
    220c:	1009883a 	mov	r4,r2
    2210:	94bffe04 	addi	r18,r18,-8
    2214:	180b883a 	mov	r5,r3
    2218:	0002c540 	call	2c54 <__adddf3>
    221c:	943ff91e 	bne	r18,r16,2204 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002204>
    2220:	da008d17 	ldw	r8,564(sp)
    2224:	d9002817 	ldw	r4,160(sp)
    2228:	d9402917 	ldw	r5,164(sp)
    222c:	40001a26 	beq	r8,zero,2298 <__kernel_rem_pio2+0xc7c>
    2230:	da008f17 	ldw	r8,572(sp)
    2234:	19a0003c 	xorhi	r6,r3,32768
    2238:	180f883a 	mov	r7,r3
    223c:	41800115 	stw	r6,4(r8)
    2240:	40800015 	stw	r2,0(r8)
    2244:	100d883a 	mov	r6,r2
    2248:	00046640 	call	4664 <__subdf3>
    224c:	04400c0e 	bge	zero,r17,2280 <__kernel_rem_pio2+0xc64>
    2250:	dc002a04 	addi	r16,sp,168
    2254:	04800044 	movi	r18,1
    2258:	81800017 	ldw	r6,0(r16)
    225c:	81c00117 	ldw	r7,4(r16)
    2260:	1009883a 	mov	r4,r2
    2264:	180b883a 	mov	r5,r3
    2268:	94800044 	addi	r18,r18,1
    226c:	0002c540 	call	2c54 <__adddf3>
    2270:	84000204 	addi	r16,r16,8
    2274:	8cbff80e 	bge	r17,r18,2258 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002258>
    2278:	da008d17 	ldw	r8,564(sp)
    227c:	40004226 	beq	r8,zero,2388 <__kernel_rem_pio2+0xd6c>
    2280:	da008f17 	ldw	r8,572(sp)
    2284:	1009883a 	mov	r4,r2
    2288:	18a0003c 	xorhi	r2,r3,32768
    228c:	41000215 	stw	r4,8(r8)
    2290:	40800315 	stw	r2,12(r8)
    2294:	003f0c06 	br	1ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ec8>
    2298:	da008f17 	ldw	r8,572(sp)
    229c:	100d883a 	mov	r6,r2
    22a0:	180f883a 	mov	r7,r3
    22a4:	40800015 	stw	r2,0(r8)
    22a8:	40c00115 	stw	r3,4(r8)
    22ac:	00046640 	call	4664 <__subdf3>
    22b0:	047fe716 	blt	zero,r17,2250 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002250>
    22b4:	da008f17 	ldw	r8,572(sp)
    22b8:	1009883a 	mov	r4,r2
    22bc:	1805883a 	mov	r2,r3
    22c0:	41000215 	stw	r4,8(r8)
    22c4:	40800315 	stw	r2,12(r8)
    22c8:	003eff06 	br	1ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ec8>
    22cc:	da008f17 	ldw	r8,572(sp)
    22d0:	d9802817 	ldw	r6,160(sp)
    22d4:	d9402a17 	ldw	r5,168(sp)
    22d8:	d9002b17 	ldw	r4,172(sp)
    22dc:	41800015 	stw	r6,0(r8)
    22e0:	d9802917 	ldw	r6,164(sp)
    22e4:	41400215 	stw	r5,8(r8)
    22e8:	41000315 	stw	r4,12(r8)
    22ec:	41800115 	stw	r6,4(r8)
    22f0:	40800415 	stw	r2,16(r8)
    22f4:	40c00515 	stw	r3,20(r8)
    22f8:	003ef306 	br	1ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ec8>
    22fc:	da00a617 	ldw	r8,664(sp)
    2300:	008000c4 	movi	r2,3
    2304:	40bef01e 	bne	r8,r2,1ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ec8>
    2308:	0005883a 	mov	r2,zero
    230c:	0007883a 	mov	r3,zero
    2310:	003fa506 	br	21a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70021a8>
    2314:	9485883a 	add	r2,r18,r18
    2318:	1085883a 	add	r2,r2,r2
    231c:	d8a1883a 	add	r16,sp,r2
    2320:	880b883a 	mov	r5,r17
    2324:	a809883a 	mov	r4,r21
    2328:	84007804 	addi	r16,r16,480
    232c:	0004f600 	call	4f60 <__fixdfsi>
    2330:	80800015 	stw	r2,0(r16)
    2334:	9023883a 	mov	r17,r18
    2338:	003e7e06 	br	1d34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d34>
    233c:	a80d883a 	mov	r6,r21
    2340:	400f883a 	mov	r7,r8
    2344:	0009883a 	mov	r4,zero
    2348:	014ffc34 	movhi	r5,16368
    234c:	00046640 	call	4664 <__subdf3>
    2350:	102b883a 	mov	r21,r2
    2354:	1811883a 	mov	r8,r3
    2358:	04c00084 	movi	r19,2
    235c:	003dc006 	br	1a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a60>
    2360:	da00a617 	ldw	r8,664(sp)
    2364:	00800084 	movi	r2,2
    2368:	123fe416 	blt	r2,r8,22fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022fc>
    236c:	02000c16 	blt	zero,r8,23a0 <__kernel_rem_pio2+0xd84>
    2370:	403ed51e 	bne	r8,zero,1ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ec8>
    2374:	0005883a 	mov	r2,zero
    2378:	0007883a 	mov	r3,zero
    237c:	003ecc06 	br	1eb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001eb0>
    2380:	d8009215 	stw	zero,584(sp)
    2384:	003cc306 	br	1694 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001694>
    2388:	da008f17 	ldw	r8,572(sp)
    238c:	1009883a 	mov	r4,r2
    2390:	1805883a 	mov	r2,r3
    2394:	41000215 	stw	r4,8(r8)
    2398:	40800315 	stw	r2,12(r8)
    239c:	003eca06 	br	1ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ec8>
    23a0:	0005883a 	mov	r2,zero
    23a4:	0007883a 	mov	r3,zero
    23a8:	003f9d06 	br	2220 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002220>

000023ac <__kernel_sin>:
    23ac:	00a00034 	movhi	r2,32768
    23b0:	defff404 	addi	sp,sp,-48
    23b4:	10bfffc4 	addi	r2,r2,-1
    23b8:	00cf9034 	movhi	r3,15936
    23bc:	ddc00915 	stw	r23,36(sp)
    23c0:	dd800815 	stw	r22,32(sp)
    23c4:	dc400315 	stw	r17,12(sp)
    23c8:	dc000215 	stw	r16,8(sp)
    23cc:	dfc00b15 	stw	ra,44(sp)
    23d0:	df000a15 	stw	fp,40(sp)
    23d4:	dd400715 	stw	r21,28(sp)
    23d8:	dd000615 	stw	r20,24(sp)
    23dc:	dcc00515 	stw	r19,20(sp)
    23e0:	dc800415 	stw	r18,16(sp)
    23e4:	2884703a 	and	r2,r5,r2
    23e8:	18ffffc4 	addi	r3,r3,-1
    23ec:	2821883a 	mov	r16,r5
    23f0:	2023883a 	mov	r17,r4
    23f4:	302f883a 	mov	r23,r6
    23f8:	382d883a 	mov	r22,r7
    23fc:	18800216 	blt	r3,r2,2408 <__kernel_sin+0x5c>
    2400:	0004f600 	call	4f60 <__fixdfsi>
    2404:	10009926 	beq	r2,zero,266c <__kernel_sin+0x2c0>
    2408:	880d883a 	mov	r6,r17
    240c:	800f883a 	mov	r7,r16
    2410:	8809883a 	mov	r4,r17
    2414:	800b883a 	mov	r5,r16
    2418:	0003f4c0 	call	3f4c <__muldf3>
    241c:	100d883a 	mov	r6,r2
    2420:	180f883a 	mov	r7,r3
    2424:	8809883a 	mov	r4,r17
    2428:	800b883a 	mov	r5,r16
    242c:	1027883a 	mov	r19,r2
    2430:	1825883a 	mov	r18,r3
    2434:	0003f4c0 	call	3f4c <__muldf3>
    2438:	0196b434 	movhi	r6,23248
    243c:	01cf79b4 	movhi	r7,15846
    2440:	31b55f04 	addi	r6,r6,-10884
    2444:	39f64e84 	addi	r7,r7,-9926
    2448:	9809883a 	mov	r4,r19
    244c:	900b883a 	mov	r5,r18
    2450:	102b883a 	mov	r21,r2
    2454:	1829883a 	mov	r20,r3
    2458:	0003f4c0 	call	3f4c <__muldf3>
    245c:	01a28b34 	movhi	r6,35372
    2460:	01cf96f4 	movhi	r7,15963
    2464:	31a73ac4 	addi	r6,r6,-25365
    2468:	39f97984 	addi	r7,r7,-6682
    246c:	1009883a 	mov	r4,r2
    2470:	180b883a 	mov	r5,r3
    2474:	00046640 	call	4664 <__subdf3>
    2478:	980d883a 	mov	r6,r19
    247c:	900f883a 	mov	r7,r18
    2480:	1009883a 	mov	r4,r2
    2484:	180b883a 	mov	r5,r3
    2488:	0003f4c0 	call	3f4c <__muldf3>
    248c:	0195ecb4 	movhi	r6,22450
    2490:	01cfb1f4 	movhi	r7,16071
    2494:	31bf9f44 	addi	r6,r6,-387
    2498:	39c778c4 	addi	r7,r7,7651
    249c:	1009883a 	mov	r4,r2
    24a0:	180b883a 	mov	r5,r3
    24a4:	0002c540 	call	2c54 <__adddf3>
    24a8:	980d883a 	mov	r6,r19
    24ac:	900f883a 	mov	r7,r18
    24b0:	1009883a 	mov	r4,r2
    24b4:	180b883a 	mov	r5,r3
    24b8:	0003f4c0 	call	3f4c <__muldf3>
    24bc:	01867074 	movhi	r6,6593
    24c0:	01cfcab4 	movhi	r7,16170
    24c4:	31987544 	addi	r6,r6,25045
    24c8:	39c06804 	addi	r7,r7,416
    24cc:	1009883a 	mov	r4,r2
    24d0:	180b883a 	mov	r5,r3
    24d4:	00046640 	call	4664 <__subdf3>
    24d8:	980d883a 	mov	r6,r19
    24dc:	900f883a 	mov	r7,r18
    24e0:	1009883a 	mov	r4,r2
    24e4:	180b883a 	mov	r5,r3
    24e8:	0003f4c0 	call	3f4c <__muldf3>
    24ec:	01844474 	movhi	r6,4369
    24f0:	01cfe074 	movhi	r7,16257
    24f4:	31be2984 	addi	r6,r6,-1882
    24f8:	39c44444 	addi	r7,r7,4369
    24fc:	1009883a 	mov	r4,r2
    2500:	180b883a 	mov	r5,r3
    2504:	0002c540 	call	2c54 <__adddf3>
    2508:	1011883a 	mov	r8,r2
    250c:	d8800c17 	ldw	r2,48(sp)
    2510:	1839883a 	mov	fp,r3
    2514:	10003e26 	beq	r2,zero,2610 <__kernel_sin+0x264>
    2518:	000d883a 	mov	r6,zero
    251c:	01cff834 	movhi	r7,16352
    2520:	b809883a 	mov	r4,r23
    2524:	b00b883a 	mov	r5,r22
    2528:	da000015 	stw	r8,0(sp)
    252c:	0003f4c0 	call	3f4c <__muldf3>
    2530:	da000017 	ldw	r8,0(sp)
    2534:	e00f883a 	mov	r7,fp
    2538:	a809883a 	mov	r4,r21
    253c:	400d883a 	mov	r6,r8
    2540:	a00b883a 	mov	r5,r20
    2544:	d8c00115 	stw	r3,4(sp)
    2548:	d8800015 	stw	r2,0(sp)
    254c:	0003f4c0 	call	3f4c <__muldf3>
    2550:	da800017 	ldw	r10,0(sp)
    2554:	da400117 	ldw	r9,4(sp)
    2558:	100d883a 	mov	r6,r2
    255c:	5009883a 	mov	r4,r10
    2560:	480b883a 	mov	r5,r9
    2564:	180f883a 	mov	r7,r3
    2568:	00046640 	call	4664 <__subdf3>
    256c:	980d883a 	mov	r6,r19
    2570:	900f883a 	mov	r7,r18
    2574:	1009883a 	mov	r4,r2
    2578:	180b883a 	mov	r5,r3
    257c:	0003f4c0 	call	3f4c <__muldf3>
    2580:	b80d883a 	mov	r6,r23
    2584:	b00f883a 	mov	r7,r22
    2588:	1009883a 	mov	r4,r2
    258c:	180b883a 	mov	r5,r3
    2590:	00046640 	call	4664 <__subdf3>
    2594:	01955574 	movhi	r6,21845
    2598:	01cff174 	movhi	r7,16325
    259c:	31955244 	addi	r6,r6,21833
    25a0:	39d55544 	addi	r7,r7,21845
    25a4:	a809883a 	mov	r4,r21
    25a8:	a00b883a 	mov	r5,r20
    25ac:	1027883a 	mov	r19,r2
    25b0:	1825883a 	mov	r18,r3
    25b4:	0003f4c0 	call	3f4c <__muldf3>
    25b8:	100d883a 	mov	r6,r2
    25bc:	180f883a 	mov	r7,r3
    25c0:	9809883a 	mov	r4,r19
    25c4:	900b883a 	mov	r5,r18
    25c8:	0002c540 	call	2c54 <__adddf3>
    25cc:	100d883a 	mov	r6,r2
    25d0:	180f883a 	mov	r7,r3
    25d4:	8809883a 	mov	r4,r17
    25d8:	800b883a 	mov	r5,r16
    25dc:	00046640 	call	4664 <__subdf3>
    25e0:	dfc00b17 	ldw	ra,44(sp)
    25e4:	df000a17 	ldw	fp,40(sp)
    25e8:	ddc00917 	ldw	r23,36(sp)
    25ec:	dd800817 	ldw	r22,32(sp)
    25f0:	dd400717 	ldw	r21,28(sp)
    25f4:	dd000617 	ldw	r20,24(sp)
    25f8:	dcc00517 	ldw	r19,20(sp)
    25fc:	dc800417 	ldw	r18,16(sp)
    2600:	dc400317 	ldw	r17,12(sp)
    2604:	dc000217 	ldw	r16,8(sp)
    2608:	dec00c04 	addi	sp,sp,48
    260c:	f800283a 	ret
    2610:	400d883a 	mov	r6,r8
    2614:	9809883a 	mov	r4,r19
    2618:	900b883a 	mov	r5,r18
    261c:	180f883a 	mov	r7,r3
    2620:	0003f4c0 	call	3f4c <__muldf3>
    2624:	01955574 	movhi	r6,21845
    2628:	01cff174 	movhi	r7,16325
    262c:	31955244 	addi	r6,r6,21833
    2630:	39d55544 	addi	r7,r7,21845
    2634:	1009883a 	mov	r4,r2
    2638:	180b883a 	mov	r5,r3
    263c:	00046640 	call	4664 <__subdf3>
    2640:	a80d883a 	mov	r6,r21
    2644:	a00f883a 	mov	r7,r20
    2648:	1009883a 	mov	r4,r2
    264c:	180b883a 	mov	r5,r3
    2650:	0003f4c0 	call	3f4c <__muldf3>
    2654:	880d883a 	mov	r6,r17
    2658:	800f883a 	mov	r7,r16
    265c:	1009883a 	mov	r4,r2
    2660:	180b883a 	mov	r5,r3
    2664:	0002c540 	call	2c54 <__adddf3>
    2668:	003fdd06 	br	25e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025e0>
    266c:	8805883a 	mov	r2,r17
    2670:	8007883a 	mov	r3,r16
    2674:	003fda06 	br	25e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70025e0>

00002678 <fabs>:
    2678:	00e00034 	movhi	r3,32768
    267c:	18ffffc4 	addi	r3,r3,-1
    2680:	2005883a 	mov	r2,r4
    2684:	28c6703a 	and	r3,r5,r3
    2688:	f800283a 	ret

0000268c <floor>:
    268c:	2811d53a 	srai	r8,r5,20
    2690:	defffa04 	addi	sp,sp,-24
    2694:	dcc00315 	stw	r19,12(sp)
    2698:	4201ffcc 	andi	r8,r8,2047
    269c:	dc800215 	stw	r18,8(sp)
    26a0:	dc400115 	stw	r17,4(sp)
    26a4:	dc000015 	stw	r16,0(sp)
    26a8:	dfc00515 	stw	ra,20(sp)
    26ac:	dd000415 	stw	r20,16(sp)
    26b0:	44bf0044 	addi	r18,r8,-1023
    26b4:	018004c4 	movi	r6,19
    26b8:	2821883a 	mov	r16,r5
    26bc:	2005883a 	mov	r2,r4
    26c0:	280f883a 	mov	r7,r5
    26c4:	2827883a 	mov	r19,r5
    26c8:	2023883a 	mov	r17,r4
    26cc:	34801916 	blt	r6,r18,2734 <floor+0xa8>
    26d0:	90003c16 	blt	r18,zero,27c4 <floor+0x138>
    26d4:	05000434 	movhi	r20,16
    26d8:	a53fffc4 	addi	r20,r20,-1
    26dc:	a4a9d83a 	sra	r20,r20,r18
    26e0:	2d0c703a 	and	r6,r5,r20
    26e4:	310cb03a 	or	r6,r6,r4
    26e8:	30001626 	beq	r6,zero,2744 <floor+0xb8>
    26ec:	01a20034 	movhi	r6,34816
    26f0:	01df8e34 	movhi	r7,32312
    26f4:	319d6704 	addi	r6,r6,30108
    26f8:	39f90f04 	addi	r7,r7,-7108
    26fc:	0002c540 	call	2c54 <__adddf3>
    2700:	000d883a 	mov	r6,zero
    2704:	000f883a 	mov	r7,zero
    2708:	1009883a 	mov	r4,r2
    270c:	180b883a 	mov	r5,r3
    2710:	0003e700 	call	3e70 <__gedf2>
    2714:	0080040e 	bge	zero,r2,2728 <floor+0x9c>
    2718:	80003c16 	blt	r16,zero,280c <floor+0x180>
    271c:	0520303a 	nor	r16,zero,r20
    2720:	84e0703a 	and	r16,r16,r19
    2724:	0023883a 	mov	r17,zero
    2728:	8805883a 	mov	r2,r17
    272c:	8007883a 	mov	r3,r16
    2730:	00000506 	br	2748 <floor+0xbc>
    2734:	01800cc4 	movi	r6,51
    2738:	34800b0e 	bge	r6,r18,2768 <floor+0xdc>
    273c:	01810004 	movi	r6,1024
    2740:	91802f26 	beq	r18,r6,2800 <floor+0x174>
    2744:	3807883a 	mov	r3,r7
    2748:	dfc00517 	ldw	ra,20(sp)
    274c:	dd000417 	ldw	r20,16(sp)
    2750:	dcc00317 	ldw	r19,12(sp)
    2754:	dc800217 	ldw	r18,8(sp)
    2758:	dc400117 	ldw	r17,4(sp)
    275c:	dc000017 	ldw	r16,0(sp)
    2760:	dec00604 	addi	sp,sp,24
    2764:	f800283a 	ret
    2768:	423efb44 	addi	r8,r8,-1043
    276c:	053fffc4 	movi	r20,-1
    2770:	a228d83a 	srl	r20,r20,r8
    2774:	250c703a 	and	r6,r4,r20
    2778:	303ff226 	beq	r6,zero,2744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002744>
    277c:	01a20034 	movhi	r6,34816
    2780:	01df8e34 	movhi	r7,32312
    2784:	319d6704 	addi	r6,r6,30108
    2788:	39f90f04 	addi	r7,r7,-7108
    278c:	0002c540 	call	2c54 <__adddf3>
    2790:	000d883a 	mov	r6,zero
    2794:	000f883a 	mov	r7,zero
    2798:	1009883a 	mov	r4,r2
    279c:	180b883a 	mov	r5,r3
    27a0:	0003e700 	call	3e70 <__gedf2>
    27a4:	00bfe00e 	bge	zero,r2,2728 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002728>
    27a8:	80001c16 	blt	r16,zero,281c <floor+0x190>
    27ac:	0510303a 	nor	r8,zero,r20
    27b0:	9821883a 	mov	r16,r19
    27b4:	8a22703a 	and	r17,r17,r8
    27b8:	8805883a 	mov	r2,r17
    27bc:	8007883a 	mov	r3,r16
    27c0:	003fe106 	br	2748 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002748>
    27c4:	01a20034 	movhi	r6,34816
    27c8:	01df8e34 	movhi	r7,32312
    27cc:	319d6704 	addi	r6,r6,30108
    27d0:	39f90f04 	addi	r7,r7,-7108
    27d4:	0002c540 	call	2c54 <__adddf3>
    27d8:	000d883a 	mov	r6,zero
    27dc:	000f883a 	mov	r7,zero
    27e0:	1009883a 	mov	r4,r2
    27e4:	180b883a 	mov	r5,r3
    27e8:	0003e700 	call	3e70 <__gedf2>
    27ec:	00bfce0e 	bge	zero,r2,2728 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002728>
    27f0:	80001516 	blt	r16,zero,2848 <floor+0x1bc>
    27f4:	0023883a 	mov	r17,zero
    27f8:	0021883a 	mov	r16,zero
    27fc:	003fca06 	br	2728 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002728>
    2800:	200d883a 	mov	r6,r4
    2804:	0002c540 	call	2c54 <__adddf3>
    2808:	003fcf06 	br	2748 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002748>
    280c:	00800434 	movhi	r2,16
    2810:	14a5d83a 	sra	r18,r2,r18
    2814:	84a7883a 	add	r19,r16,r18
    2818:	003fc006 	br	271c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700271c>
    281c:	00800504 	movi	r2,20
    2820:	90801326 	beq	r18,r2,2870 <floor+0x1e4>
    2824:	00800d04 	movi	r2,52
    2828:	14a5c83a 	sub	r18,r2,r18
    282c:	00800044 	movi	r2,1
    2830:	1484983a 	sll	r2,r2,r18
    2834:	1445883a 	add	r2,r2,r17
    2838:	14400b2e 	bgeu	r2,r17,2868 <floor+0x1dc>
    283c:	84c00044 	addi	r19,r16,1
    2840:	1023883a 	mov	r17,r2
    2844:	003fd906 	br	27ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027ac>
    2848:	00a00034 	movhi	r2,32768
    284c:	10bfffc4 	addi	r2,r2,-1
    2850:	8084703a 	and	r2,r16,r2
    2854:	1462b03a 	or	r17,r2,r17
    2858:	883fb326 	beq	r17,zero,2728 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002728>
    285c:	0023883a 	mov	r17,zero
    2860:	042ffc34 	movhi	r16,49136
    2864:	003fb006 	br	2728 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002728>
    2868:	1023883a 	mov	r17,r2
    286c:	003fcf06 	br	27ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027ac>
    2870:	84c00044 	addi	r19,r16,1
    2874:	003fcd06 	br	27ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027ac>

00002878 <scalbn>:
    2878:	2a1ffc2c 	andhi	r8,r5,32752
    287c:	4011d53a 	srai	r8,r8,20
    2880:	defffe04 	addi	sp,sp,-8
    2884:	dc000015 	stw	r16,0(sp)
    2888:	dfc00115 	stw	ra,4(sp)
    288c:	280f883a 	mov	r7,r5
    2890:	2015883a 	mov	r10,r4
    2894:	3021883a 	mov	r16,r6
    2898:	40001e1e 	bne	r8,zero,2914 <scalbn+0x9c>
    289c:	00a00034 	movhi	r2,32768
    28a0:	10bfffc4 	addi	r2,r2,-1
    28a4:	2884703a 	and	r2,r5,r2
    28a8:	1104b03a 	or	r2,r2,r4
    28ac:	10002226 	beq	r2,zero,2938 <scalbn+0xc0>
    28b0:	01d0d434 	movhi	r7,17232
    28b4:	000d883a 	mov	r6,zero
    28b8:	0003f4c0 	call	3f4c <__muldf3>
    28bc:	013ffff4 	movhi	r4,65535
    28c0:	210f2c04 	addi	r4,r4,15536
    28c4:	1015883a 	mov	r10,r2
    28c8:	180f883a 	mov	r7,r3
    28cc:	81002a16 	blt	r16,r4,2978 <scalbn+0x100>
    28d0:	191ffc2c 	andhi	r4,r3,32752
    28d4:	2009d53a 	srai	r4,r4,20
    28d8:	223ff284 	addi	r8,r4,-54
    28dc:	8211883a 	add	r8,r16,r8
    28e0:	0081ff84 	movi	r2,2046
    28e4:	12002f16 	blt	r2,r8,29a4 <scalbn+0x12c>
    28e8:	0200190e 	bge	zero,r8,2950 <scalbn+0xd8>
    28ec:	4010953a 	slli	r8,r8,20
    28f0:	01600434 	movhi	r5,32784
    28f4:	297fffc4 	addi	r5,r5,-1
    28f8:	194e703a 	and	r7,r3,r5
    28fc:	5005883a 	mov	r2,r10
    2900:	3a06b03a 	or	r3,r7,r8
    2904:	dfc00117 	ldw	ra,4(sp)
    2908:	dc000017 	ldw	r16,0(sp)
    290c:	dec00204 	addi	sp,sp,8
    2910:	f800283a 	ret
    2914:	0081ffc4 	movi	r2,2047
    2918:	2807883a 	mov	r3,r5
    291c:	40bfef1e 	bne	r8,r2,28dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70028dc>
    2920:	200d883a 	mov	r6,r4
    2924:	0002c540 	call	2c54 <__adddf3>
    2928:	dfc00117 	ldw	ra,4(sp)
    292c:	dc000017 	ldw	r16,0(sp)
    2930:	dec00204 	addi	sp,sp,8
    2934:	f800283a 	ret
    2938:	2005883a 	mov	r2,r4
    293c:	2807883a 	mov	r3,r5
    2940:	dfc00117 	ldw	ra,4(sp)
    2944:	dc000017 	ldw	r16,0(sp)
    2948:	dec00204 	addi	sp,sp,8
    294c:	f800283a 	ret
    2950:	00bff2c4 	movi	r2,-53
    2954:	4080240e 	bge	r8,r2,29e8 <scalbn+0x170>
    2958:	00b0d414 	movui	r2,50000
    295c:	14001116 	blt	r2,r16,29a4 <scalbn+0x12c>
    2960:	0130be74 	movhi	r4,49913
    2964:	01406974 	movhi	r5,421
    2968:	213cd644 	addi	r4,r4,-3239
    296c:	295b87c4 	addi	r5,r5,28191
    2970:	500d883a 	mov	r6,r10
    2974:	0002a140 	call	2a14 <copysign>
    2978:	01b0be74 	movhi	r6,49913
    297c:	01c06974 	movhi	r7,421
    2980:	31bcd644 	addi	r6,r6,-3239
    2984:	39db87c4 	addi	r7,r7,28191
    2988:	1009883a 	mov	r4,r2
    298c:	180b883a 	mov	r5,r3
    2990:	0003f4c0 	call	3f4c <__muldf3>
    2994:	dfc00117 	ldw	ra,4(sp)
    2998:	dc000017 	ldw	r16,0(sp)
    299c:	dec00204 	addi	sp,sp,8
    29a0:	f800283a 	ret
    29a4:	01220034 	movhi	r4,34816
    29a8:	015f8e34 	movhi	r5,32312
    29ac:	500d883a 	mov	r6,r10
    29b0:	211d6704 	addi	r4,r4,30108
    29b4:	29790f04 	addi	r5,r5,-7108
    29b8:	0002a140 	call	2a14 <copysign>
    29bc:	01a20034 	movhi	r6,34816
    29c0:	01df8e34 	movhi	r7,32312
    29c4:	319d6704 	addi	r6,r6,30108
    29c8:	39f90f04 	addi	r7,r7,-7108
    29cc:	1009883a 	mov	r4,r2
    29d0:	180b883a 	mov	r5,r3
    29d4:	0003f4c0 	call	3f4c <__muldf3>
    29d8:	dfc00117 	ldw	ra,4(sp)
    29dc:	dc000017 	ldw	r16,0(sp)
    29e0:	dec00204 	addi	sp,sp,8
    29e4:	f800283a 	ret
    29e8:	42000d84 	addi	r8,r8,54
    29ec:	4012953a 	slli	r9,r8,20
    29f0:	01e00434 	movhi	r7,32784
    29f4:	39ffffc4 	addi	r7,r7,-1
    29f8:	19ca703a 	and	r5,r3,r7
    29fc:	000d883a 	mov	r6,zero
    2a00:	01cf2434 	movhi	r7,15504
    2a04:	5009883a 	mov	r4,r10
    2a08:	494ab03a 	or	r5,r9,r5
    2a0c:	0003f4c0 	call	3f4c <__muldf3>
    2a10:	003fbc06 	br	2904 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002904>

00002a14 <copysign>:
    2a14:	2005883a 	mov	r2,r4
    2a18:	01200034 	movhi	r4,32768
    2a1c:	213fffc4 	addi	r4,r4,-1
    2a20:	38e0002c 	andhi	r3,r7,32768
    2a24:	290a703a 	and	r5,r5,r4
    2a28:	28c6b03a 	or	r3,r5,r3
    2a2c:	f800283a 	ret

00002a30 <__divsi3>:
    2a30:	20001b16 	blt	r4,zero,2aa0 <__divsi3+0x70>
    2a34:	000f883a 	mov	r7,zero
    2a38:	28001616 	blt	r5,zero,2a94 <__divsi3+0x64>
    2a3c:	200d883a 	mov	r6,r4
    2a40:	29001a2e 	bgeu	r5,r4,2aac <__divsi3+0x7c>
    2a44:	00800804 	movi	r2,32
    2a48:	00c00044 	movi	r3,1
    2a4c:	00000106 	br	2a54 <__divsi3+0x24>
    2a50:	10000d26 	beq	r2,zero,2a88 <__divsi3+0x58>
    2a54:	294b883a 	add	r5,r5,r5
    2a58:	10bfffc4 	addi	r2,r2,-1
    2a5c:	18c7883a 	add	r3,r3,r3
    2a60:	293ffb36 	bltu	r5,r4,2a50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a50>
    2a64:	0005883a 	mov	r2,zero
    2a68:	18000726 	beq	r3,zero,2a88 <__divsi3+0x58>
    2a6c:	0005883a 	mov	r2,zero
    2a70:	31400236 	bltu	r6,r5,2a7c <__divsi3+0x4c>
    2a74:	314dc83a 	sub	r6,r6,r5
    2a78:	10c4b03a 	or	r2,r2,r3
    2a7c:	1806d07a 	srli	r3,r3,1
    2a80:	280ad07a 	srli	r5,r5,1
    2a84:	183ffa1e 	bne	r3,zero,2a70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a70>
    2a88:	38000126 	beq	r7,zero,2a90 <__divsi3+0x60>
    2a8c:	0085c83a 	sub	r2,zero,r2
    2a90:	f800283a 	ret
    2a94:	014bc83a 	sub	r5,zero,r5
    2a98:	39c0005c 	xori	r7,r7,1
    2a9c:	003fe706 	br	2a3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a3c>
    2aa0:	0109c83a 	sub	r4,zero,r4
    2aa4:	01c00044 	movi	r7,1
    2aa8:	003fe306 	br	2a38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a38>
    2aac:	00c00044 	movi	r3,1
    2ab0:	003fee06 	br	2a6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a6c>

00002ab4 <__modsi3>:
    2ab4:	20001716 	blt	r4,zero,2b14 <__modsi3+0x60>
    2ab8:	000f883a 	mov	r7,zero
    2abc:	2005883a 	mov	r2,r4
    2ac0:	28001216 	blt	r5,zero,2b0c <__modsi3+0x58>
    2ac4:	2900162e 	bgeu	r5,r4,2b20 <__modsi3+0x6c>
    2ac8:	01800804 	movi	r6,32
    2acc:	00c00044 	movi	r3,1
    2ad0:	00000106 	br	2ad8 <__modsi3+0x24>
    2ad4:	30000a26 	beq	r6,zero,2b00 <__modsi3+0x4c>
    2ad8:	294b883a 	add	r5,r5,r5
    2adc:	31bfffc4 	addi	r6,r6,-1
    2ae0:	18c7883a 	add	r3,r3,r3
    2ae4:	293ffb36 	bltu	r5,r4,2ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ad4>
    2ae8:	18000526 	beq	r3,zero,2b00 <__modsi3+0x4c>
    2aec:	1806d07a 	srli	r3,r3,1
    2af0:	11400136 	bltu	r2,r5,2af8 <__modsi3+0x44>
    2af4:	1145c83a 	sub	r2,r2,r5
    2af8:	280ad07a 	srli	r5,r5,1
    2afc:	183ffb1e 	bne	r3,zero,2aec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002aec>
    2b00:	38000126 	beq	r7,zero,2b08 <__modsi3+0x54>
    2b04:	0085c83a 	sub	r2,zero,r2
    2b08:	f800283a 	ret
    2b0c:	014bc83a 	sub	r5,zero,r5
    2b10:	003fec06 	br	2ac4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ac4>
    2b14:	0109c83a 	sub	r4,zero,r4
    2b18:	01c00044 	movi	r7,1
    2b1c:	003fe706 	br	2abc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002abc>
    2b20:	00c00044 	movi	r3,1
    2b24:	003ff106 	br	2aec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002aec>

00002b28 <__udivsi3>:
    2b28:	200d883a 	mov	r6,r4
    2b2c:	2900152e 	bgeu	r5,r4,2b84 <__udivsi3+0x5c>
    2b30:	28001416 	blt	r5,zero,2b84 <__udivsi3+0x5c>
    2b34:	00800804 	movi	r2,32
    2b38:	00c00044 	movi	r3,1
    2b3c:	00000206 	br	2b48 <__udivsi3+0x20>
    2b40:	10000e26 	beq	r2,zero,2b7c <__udivsi3+0x54>
    2b44:	28000516 	blt	r5,zero,2b5c <__udivsi3+0x34>
    2b48:	294b883a 	add	r5,r5,r5
    2b4c:	10bfffc4 	addi	r2,r2,-1
    2b50:	18c7883a 	add	r3,r3,r3
    2b54:	293ffa36 	bltu	r5,r4,2b40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b40>
    2b58:	18000826 	beq	r3,zero,2b7c <__udivsi3+0x54>
    2b5c:	0005883a 	mov	r2,zero
    2b60:	31400236 	bltu	r6,r5,2b6c <__udivsi3+0x44>
    2b64:	314dc83a 	sub	r6,r6,r5
    2b68:	10c4b03a 	or	r2,r2,r3
    2b6c:	1806d07a 	srli	r3,r3,1
    2b70:	280ad07a 	srli	r5,r5,1
    2b74:	183ffa1e 	bne	r3,zero,2b60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b60>
    2b78:	f800283a 	ret
    2b7c:	0005883a 	mov	r2,zero
    2b80:	f800283a 	ret
    2b84:	00c00044 	movi	r3,1
    2b88:	003ff406 	br	2b5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b5c>

00002b8c <__umodsi3>:
    2b8c:	2005883a 	mov	r2,r4
    2b90:	2900122e 	bgeu	r5,r4,2bdc <__umodsi3+0x50>
    2b94:	28001116 	blt	r5,zero,2bdc <__umodsi3+0x50>
    2b98:	01800804 	movi	r6,32
    2b9c:	00c00044 	movi	r3,1
    2ba0:	00000206 	br	2bac <__umodsi3+0x20>
    2ba4:	30000c26 	beq	r6,zero,2bd8 <__umodsi3+0x4c>
    2ba8:	28000516 	blt	r5,zero,2bc0 <__umodsi3+0x34>
    2bac:	294b883a 	add	r5,r5,r5
    2bb0:	31bfffc4 	addi	r6,r6,-1
    2bb4:	18c7883a 	add	r3,r3,r3
    2bb8:	293ffa36 	bltu	r5,r4,2ba4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ba4>
    2bbc:	18000626 	beq	r3,zero,2bd8 <__umodsi3+0x4c>
    2bc0:	1806d07a 	srli	r3,r3,1
    2bc4:	11400136 	bltu	r2,r5,2bcc <__umodsi3+0x40>
    2bc8:	1145c83a 	sub	r2,r2,r5
    2bcc:	280ad07a 	srli	r5,r5,1
    2bd0:	183ffb1e 	bne	r3,zero,2bc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002bc0>
    2bd4:	f800283a 	ret
    2bd8:	f800283a 	ret
    2bdc:	00c00044 	movi	r3,1
    2be0:	003ff706 	br	2bc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002bc0>

00002be4 <__fixsfsi>:
    2be4:	200ad5fa 	srli	r5,r4,23
    2be8:	00c02034 	movhi	r3,128
    2bec:	18ffffc4 	addi	r3,r3,-1
    2bf0:	29403fcc 	andi	r5,r5,255
    2bf4:	00801f84 	movi	r2,126
    2bf8:	1906703a 	and	r3,r3,r4
    2bfc:	2008d7fa 	srli	r4,r4,31
    2c00:	11400e0e 	bge	r2,r5,2c3c <__fixsfsi+0x58>
    2c04:	00802744 	movi	r2,157
    2c08:	11400816 	blt	r2,r5,2c2c <__fixsfsi+0x48>
    2c0c:	00802544 	movi	r2,149
    2c10:	18c02034 	orhi	r3,r3,128
    2c14:	11400b0e 	bge	r2,r5,2c44 <__fixsfsi+0x60>
    2c18:	28bfda84 	addi	r2,r5,-150
    2c1c:	1884983a 	sll	r2,r3,r2
    2c20:	20000726 	beq	r4,zero,2c40 <__fixsfsi+0x5c>
    2c24:	0085c83a 	sub	r2,zero,r2
    2c28:	f800283a 	ret
    2c2c:	00a00034 	movhi	r2,32768
    2c30:	10bfffc4 	addi	r2,r2,-1
    2c34:	2085883a 	add	r2,r4,r2
    2c38:	f800283a 	ret
    2c3c:	0005883a 	mov	r2,zero
    2c40:	f800283a 	ret
    2c44:	00802584 	movi	r2,150
    2c48:	1145c83a 	sub	r2,r2,r5
    2c4c:	1884d83a 	srl	r2,r3,r2
    2c50:	003ff306 	br	2c20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c20>

00002c54 <__adddf3>:
    2c54:	02c00434 	movhi	r11,16
    2c58:	5affffc4 	addi	r11,r11,-1
    2c5c:	2806d7fa 	srli	r3,r5,31
    2c60:	2ad4703a 	and	r10,r5,r11
    2c64:	3ad2703a 	and	r9,r7,r11
    2c68:	3804d53a 	srli	r2,r7,20
    2c6c:	3018d77a 	srli	r12,r6,29
    2c70:	280ad53a 	srli	r5,r5,20
    2c74:	501490fa 	slli	r10,r10,3
    2c78:	2010d77a 	srli	r8,r4,29
    2c7c:	481290fa 	slli	r9,r9,3
    2c80:	380ed7fa 	srli	r7,r7,31
    2c84:	defffb04 	addi	sp,sp,-20
    2c88:	dc800215 	stw	r18,8(sp)
    2c8c:	dc400115 	stw	r17,4(sp)
    2c90:	dc000015 	stw	r16,0(sp)
    2c94:	dfc00415 	stw	ra,16(sp)
    2c98:	dcc00315 	stw	r19,12(sp)
    2c9c:	1c803fcc 	andi	r18,r3,255
    2ca0:	2c01ffcc 	andi	r16,r5,2047
    2ca4:	5210b03a 	or	r8,r10,r8
    2ca8:	202290fa 	slli	r17,r4,3
    2cac:	1081ffcc 	andi	r2,r2,2047
    2cb0:	4b12b03a 	or	r9,r9,r12
    2cb4:	300c90fa 	slli	r6,r6,3
    2cb8:	91c07526 	beq	r18,r7,2e90 <__adddf3+0x23c>
    2cbc:	8087c83a 	sub	r3,r16,r2
    2cc0:	00c0ab0e 	bge	zero,r3,2f70 <__adddf3+0x31c>
    2cc4:	10002a1e 	bne	r2,zero,2d70 <__adddf3+0x11c>
    2cc8:	4984b03a 	or	r2,r9,r6
    2ccc:	1000961e 	bne	r2,zero,2f28 <__adddf3+0x2d4>
    2cd0:	888001cc 	andi	r2,r17,7
    2cd4:	10000726 	beq	r2,zero,2cf4 <__adddf3+0xa0>
    2cd8:	888003cc 	andi	r2,r17,15
    2cdc:	00c00104 	movi	r3,4
    2ce0:	10c00426 	beq	r2,r3,2cf4 <__adddf3+0xa0>
    2ce4:	88c7883a 	add	r3,r17,r3
    2ce8:	1c63803a 	cmpltu	r17,r3,r17
    2cec:	4451883a 	add	r8,r8,r17
    2cf0:	1823883a 	mov	r17,r3
    2cf4:	4080202c 	andhi	r2,r8,128
    2cf8:	10005926 	beq	r2,zero,2e60 <__adddf3+0x20c>
    2cfc:	84000044 	addi	r16,r16,1
    2d00:	0081ffc4 	movi	r2,2047
    2d04:	8080ba26 	beq	r16,r2,2ff0 <__adddf3+0x39c>
    2d08:	00bfe034 	movhi	r2,65408
    2d0c:	10bfffc4 	addi	r2,r2,-1
    2d10:	4090703a 	and	r8,r8,r2
    2d14:	4004977a 	slli	r2,r8,29
    2d18:	4010927a 	slli	r8,r8,9
    2d1c:	8822d0fa 	srli	r17,r17,3
    2d20:	8401ffcc 	andi	r16,r16,2047
    2d24:	4010d33a 	srli	r8,r8,12
    2d28:	9007883a 	mov	r3,r18
    2d2c:	1444b03a 	or	r2,r2,r17
    2d30:	8401ffcc 	andi	r16,r16,2047
    2d34:	8020953a 	slli	r16,r16,20
    2d38:	18c03fcc 	andi	r3,r3,255
    2d3c:	01000434 	movhi	r4,16
    2d40:	213fffc4 	addi	r4,r4,-1
    2d44:	180697fa 	slli	r3,r3,31
    2d48:	4110703a 	and	r8,r8,r4
    2d4c:	4410b03a 	or	r8,r8,r16
    2d50:	40c6b03a 	or	r3,r8,r3
    2d54:	dfc00417 	ldw	ra,16(sp)
    2d58:	dcc00317 	ldw	r19,12(sp)
    2d5c:	dc800217 	ldw	r18,8(sp)
    2d60:	dc400117 	ldw	r17,4(sp)
    2d64:	dc000017 	ldw	r16,0(sp)
    2d68:	dec00504 	addi	sp,sp,20
    2d6c:	f800283a 	ret
    2d70:	0081ffc4 	movi	r2,2047
    2d74:	80bfd626 	beq	r16,r2,2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    2d78:	4a402034 	orhi	r9,r9,128
    2d7c:	00800e04 	movi	r2,56
    2d80:	10c09f16 	blt	r2,r3,3000 <__adddf3+0x3ac>
    2d84:	008007c4 	movi	r2,31
    2d88:	10c0c216 	blt	r2,r3,3094 <__adddf3+0x440>
    2d8c:	00800804 	movi	r2,32
    2d90:	10c5c83a 	sub	r2,r2,r3
    2d94:	488a983a 	sll	r5,r9,r2
    2d98:	30c8d83a 	srl	r4,r6,r3
    2d9c:	3084983a 	sll	r2,r6,r2
    2da0:	48c6d83a 	srl	r3,r9,r3
    2da4:	290cb03a 	or	r6,r5,r4
    2da8:	1004c03a 	cmpne	r2,r2,zero
    2dac:	308cb03a 	or	r6,r6,r2
    2db0:	898dc83a 	sub	r6,r17,r6
    2db4:	89a3803a 	cmpltu	r17,r17,r6
    2db8:	40d1c83a 	sub	r8,r8,r3
    2dbc:	4451c83a 	sub	r8,r8,r17
    2dc0:	3023883a 	mov	r17,r6
    2dc4:	4080202c 	andhi	r2,r8,128
    2dc8:	10002326 	beq	r2,zero,2e58 <__adddf3+0x204>
    2dcc:	04c02034 	movhi	r19,128
    2dd0:	9cffffc4 	addi	r19,r19,-1
    2dd4:	44e6703a 	and	r19,r8,r19
    2dd8:	98007626 	beq	r19,zero,2fb4 <__adddf3+0x360>
    2ddc:	9809883a 	mov	r4,r19
    2de0:	00052640 	call	5264 <__clzsi2>
    2de4:	10fffe04 	addi	r3,r2,-8
    2de8:	010007c4 	movi	r4,31
    2dec:	20c07716 	blt	r4,r3,2fcc <__adddf3+0x378>
    2df0:	00800804 	movi	r2,32
    2df4:	10c5c83a 	sub	r2,r2,r3
    2df8:	8884d83a 	srl	r2,r17,r2
    2dfc:	98d0983a 	sll	r8,r19,r3
    2e00:	88e2983a 	sll	r17,r17,r3
    2e04:	1204b03a 	or	r2,r2,r8
    2e08:	1c007416 	blt	r3,r16,2fdc <__adddf3+0x388>
    2e0c:	1c21c83a 	sub	r16,r3,r16
    2e10:	82000044 	addi	r8,r16,1
    2e14:	00c007c4 	movi	r3,31
    2e18:	1a009116 	blt	r3,r8,3060 <__adddf3+0x40c>
    2e1c:	00c00804 	movi	r3,32
    2e20:	1a07c83a 	sub	r3,r3,r8
    2e24:	8a08d83a 	srl	r4,r17,r8
    2e28:	88e2983a 	sll	r17,r17,r3
    2e2c:	10c6983a 	sll	r3,r2,r3
    2e30:	1210d83a 	srl	r8,r2,r8
    2e34:	8804c03a 	cmpne	r2,r17,zero
    2e38:	1906b03a 	or	r3,r3,r4
    2e3c:	18a2b03a 	or	r17,r3,r2
    2e40:	0021883a 	mov	r16,zero
    2e44:	003fa206 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    2e48:	1890b03a 	or	r8,r3,r2
    2e4c:	40017d26 	beq	r8,zero,3444 <__adddf3+0x7f0>
    2e50:	1011883a 	mov	r8,r2
    2e54:	1823883a 	mov	r17,r3
    2e58:	888001cc 	andi	r2,r17,7
    2e5c:	103f9e1e 	bne	r2,zero,2cd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd8>
    2e60:	4004977a 	slli	r2,r8,29
    2e64:	8822d0fa 	srli	r17,r17,3
    2e68:	4010d0fa 	srli	r8,r8,3
    2e6c:	9007883a 	mov	r3,r18
    2e70:	1444b03a 	or	r2,r2,r17
    2e74:	0101ffc4 	movi	r4,2047
    2e78:	81002426 	beq	r16,r4,2f0c <__adddf3+0x2b8>
    2e7c:	8120703a 	and	r16,r16,r4
    2e80:	01000434 	movhi	r4,16
    2e84:	213fffc4 	addi	r4,r4,-1
    2e88:	4110703a 	and	r8,r8,r4
    2e8c:	003fa806 	br	2d30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d30>
    2e90:	8089c83a 	sub	r4,r16,r2
    2e94:	01005e0e 	bge	zero,r4,3010 <__adddf3+0x3bc>
    2e98:	10002b26 	beq	r2,zero,2f48 <__adddf3+0x2f4>
    2e9c:	0081ffc4 	movi	r2,2047
    2ea0:	80bf8b26 	beq	r16,r2,2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    2ea4:	4a402034 	orhi	r9,r9,128
    2ea8:	00800e04 	movi	r2,56
    2eac:	1100a40e 	bge	r2,r4,3140 <__adddf3+0x4ec>
    2eb0:	498cb03a 	or	r6,r9,r6
    2eb4:	300ac03a 	cmpne	r5,r6,zero
    2eb8:	0013883a 	mov	r9,zero
    2ebc:	2c4b883a 	add	r5,r5,r17
    2ec0:	2c63803a 	cmpltu	r17,r5,r17
    2ec4:	4a11883a 	add	r8,r9,r8
    2ec8:	8a11883a 	add	r8,r17,r8
    2ecc:	2823883a 	mov	r17,r5
    2ed0:	4080202c 	andhi	r2,r8,128
    2ed4:	103fe026 	beq	r2,zero,2e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e58>
    2ed8:	84000044 	addi	r16,r16,1
    2edc:	0081ffc4 	movi	r2,2047
    2ee0:	8080d226 	beq	r16,r2,322c <__adddf3+0x5d8>
    2ee4:	00bfe034 	movhi	r2,65408
    2ee8:	10bfffc4 	addi	r2,r2,-1
    2eec:	4090703a 	and	r8,r8,r2
    2ef0:	880ad07a 	srli	r5,r17,1
    2ef4:	400897fa 	slli	r4,r8,31
    2ef8:	88c0004c 	andi	r3,r17,1
    2efc:	28e2b03a 	or	r17,r5,r3
    2f00:	4010d07a 	srli	r8,r8,1
    2f04:	2462b03a 	or	r17,r4,r17
    2f08:	003f7106 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    2f0c:	4088b03a 	or	r4,r8,r2
    2f10:	20014526 	beq	r4,zero,3428 <__adddf3+0x7d4>
    2f14:	01000434 	movhi	r4,16
    2f18:	42000234 	orhi	r8,r8,8
    2f1c:	213fffc4 	addi	r4,r4,-1
    2f20:	4110703a 	and	r8,r8,r4
    2f24:	003f8206 	br	2d30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d30>
    2f28:	18ffffc4 	addi	r3,r3,-1
    2f2c:	1800491e 	bne	r3,zero,3054 <__adddf3+0x400>
    2f30:	898bc83a 	sub	r5,r17,r6
    2f34:	8963803a 	cmpltu	r17,r17,r5
    2f38:	4251c83a 	sub	r8,r8,r9
    2f3c:	4451c83a 	sub	r8,r8,r17
    2f40:	2823883a 	mov	r17,r5
    2f44:	003f9f06 	br	2dc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002dc4>
    2f48:	4984b03a 	or	r2,r9,r6
    2f4c:	103f6026 	beq	r2,zero,2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    2f50:	213fffc4 	addi	r4,r4,-1
    2f54:	2000931e 	bne	r4,zero,31a4 <__adddf3+0x550>
    2f58:	898d883a 	add	r6,r17,r6
    2f5c:	3463803a 	cmpltu	r17,r6,r17
    2f60:	4251883a 	add	r8,r8,r9
    2f64:	8a11883a 	add	r8,r17,r8
    2f68:	3023883a 	mov	r17,r6
    2f6c:	003fd806 	br	2ed0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ed0>
    2f70:	1800541e 	bne	r3,zero,30c4 <__adddf3+0x470>
    2f74:	80800044 	addi	r2,r16,1
    2f78:	1081ffcc 	andi	r2,r2,2047
    2f7c:	00c00044 	movi	r3,1
    2f80:	1880a00e 	bge	r3,r2,3204 <__adddf3+0x5b0>
    2f84:	8989c83a 	sub	r4,r17,r6
    2f88:	8905803a 	cmpltu	r2,r17,r4
    2f8c:	4267c83a 	sub	r19,r8,r9
    2f90:	98a7c83a 	sub	r19,r19,r2
    2f94:	9880202c 	andhi	r2,r19,128
    2f98:	10006326 	beq	r2,zero,3128 <__adddf3+0x4d4>
    2f9c:	3463c83a 	sub	r17,r6,r17
    2fa0:	4a07c83a 	sub	r3,r9,r8
    2fa4:	344d803a 	cmpltu	r6,r6,r17
    2fa8:	19a7c83a 	sub	r19,r3,r6
    2fac:	3825883a 	mov	r18,r7
    2fb0:	983f8a1e 	bne	r19,zero,2ddc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ddc>
    2fb4:	8809883a 	mov	r4,r17
    2fb8:	00052640 	call	5264 <__clzsi2>
    2fbc:	10800804 	addi	r2,r2,32
    2fc0:	10fffe04 	addi	r3,r2,-8
    2fc4:	010007c4 	movi	r4,31
    2fc8:	20ff890e 	bge	r4,r3,2df0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002df0>
    2fcc:	10bff604 	addi	r2,r2,-40
    2fd0:	8884983a 	sll	r2,r17,r2
    2fd4:	0023883a 	mov	r17,zero
    2fd8:	1c3f8c0e 	bge	r3,r16,2e0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e0c>
    2fdc:	023fe034 	movhi	r8,65408
    2fe0:	423fffc4 	addi	r8,r8,-1
    2fe4:	80e1c83a 	sub	r16,r16,r3
    2fe8:	1210703a 	and	r8,r2,r8
    2fec:	003f3806 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    2ff0:	9007883a 	mov	r3,r18
    2ff4:	0011883a 	mov	r8,zero
    2ff8:	0005883a 	mov	r2,zero
    2ffc:	003f4c06 	br	2d30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d30>
    3000:	498cb03a 	or	r6,r9,r6
    3004:	300cc03a 	cmpne	r6,r6,zero
    3008:	0007883a 	mov	r3,zero
    300c:	003f6806 	br	2db0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002db0>
    3010:	20009c1e 	bne	r4,zero,3284 <__adddf3+0x630>
    3014:	80800044 	addi	r2,r16,1
    3018:	1141ffcc 	andi	r5,r2,2047
    301c:	01000044 	movi	r4,1
    3020:	2140670e 	bge	r4,r5,31c0 <__adddf3+0x56c>
    3024:	0101ffc4 	movi	r4,2047
    3028:	11007f26 	beq	r2,r4,3228 <__adddf3+0x5d4>
    302c:	898d883a 	add	r6,r17,r6
    3030:	4247883a 	add	r3,r8,r9
    3034:	3451803a 	cmpltu	r8,r6,r17
    3038:	40d1883a 	add	r8,r8,r3
    303c:	402297fa 	slli	r17,r8,31
    3040:	300cd07a 	srli	r6,r6,1
    3044:	4010d07a 	srli	r8,r8,1
    3048:	1021883a 	mov	r16,r2
    304c:	89a2b03a 	or	r17,r17,r6
    3050:	003f1f06 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    3054:	0081ffc4 	movi	r2,2047
    3058:	80bf481e 	bne	r16,r2,2d7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d7c>
    305c:	003f1c06 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    3060:	843ff844 	addi	r16,r16,-31
    3064:	01000804 	movi	r4,32
    3068:	1406d83a 	srl	r3,r2,r16
    306c:	41005026 	beq	r8,r4,31b0 <__adddf3+0x55c>
    3070:	01001004 	movi	r4,64
    3074:	2211c83a 	sub	r8,r4,r8
    3078:	1204983a 	sll	r2,r2,r8
    307c:	88a2b03a 	or	r17,r17,r2
    3080:	8822c03a 	cmpne	r17,r17,zero
    3084:	1c62b03a 	or	r17,r3,r17
    3088:	0011883a 	mov	r8,zero
    308c:	0021883a 	mov	r16,zero
    3090:	003f7106 	br	2e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e58>
    3094:	193ff804 	addi	r4,r3,-32
    3098:	00800804 	movi	r2,32
    309c:	4908d83a 	srl	r4,r9,r4
    30a0:	18804526 	beq	r3,r2,31b8 <__adddf3+0x564>
    30a4:	00801004 	movi	r2,64
    30a8:	10c5c83a 	sub	r2,r2,r3
    30ac:	4886983a 	sll	r3,r9,r2
    30b0:	198cb03a 	or	r6,r3,r6
    30b4:	300cc03a 	cmpne	r6,r6,zero
    30b8:	218cb03a 	or	r6,r4,r6
    30bc:	0007883a 	mov	r3,zero
    30c0:	003f3b06 	br	2db0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002db0>
    30c4:	80002a26 	beq	r16,zero,3170 <__adddf3+0x51c>
    30c8:	0101ffc4 	movi	r4,2047
    30cc:	11006826 	beq	r2,r4,3270 <__adddf3+0x61c>
    30d0:	00c7c83a 	sub	r3,zero,r3
    30d4:	42002034 	orhi	r8,r8,128
    30d8:	01000e04 	movi	r4,56
    30dc:	20c07c16 	blt	r4,r3,32d0 <__adddf3+0x67c>
    30e0:	010007c4 	movi	r4,31
    30e4:	20c0da16 	blt	r4,r3,3450 <__adddf3+0x7fc>
    30e8:	01000804 	movi	r4,32
    30ec:	20c9c83a 	sub	r4,r4,r3
    30f0:	4114983a 	sll	r10,r8,r4
    30f4:	88cad83a 	srl	r5,r17,r3
    30f8:	8908983a 	sll	r4,r17,r4
    30fc:	40c6d83a 	srl	r3,r8,r3
    3100:	5162b03a 	or	r17,r10,r5
    3104:	2008c03a 	cmpne	r4,r4,zero
    3108:	8922b03a 	or	r17,r17,r4
    310c:	3463c83a 	sub	r17,r6,r17
    3110:	48c7c83a 	sub	r3,r9,r3
    3114:	344d803a 	cmpltu	r6,r6,r17
    3118:	1991c83a 	sub	r8,r3,r6
    311c:	1021883a 	mov	r16,r2
    3120:	3825883a 	mov	r18,r7
    3124:	003f2706 	br	2dc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002dc4>
    3128:	24d0b03a 	or	r8,r4,r19
    312c:	40001b1e 	bne	r8,zero,319c <__adddf3+0x548>
    3130:	0005883a 	mov	r2,zero
    3134:	0007883a 	mov	r3,zero
    3138:	0021883a 	mov	r16,zero
    313c:	003f4d06 	br	2e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e74>
    3140:	008007c4 	movi	r2,31
    3144:	11003c16 	blt	r2,r4,3238 <__adddf3+0x5e4>
    3148:	00800804 	movi	r2,32
    314c:	1105c83a 	sub	r2,r2,r4
    3150:	488e983a 	sll	r7,r9,r2
    3154:	310ad83a 	srl	r5,r6,r4
    3158:	3084983a 	sll	r2,r6,r2
    315c:	4912d83a 	srl	r9,r9,r4
    3160:	394ab03a 	or	r5,r7,r5
    3164:	1004c03a 	cmpne	r2,r2,zero
    3168:	288ab03a 	or	r5,r5,r2
    316c:	003f5306 	br	2ebc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ebc>
    3170:	4448b03a 	or	r4,r8,r17
    3174:	20003e26 	beq	r4,zero,3270 <__adddf3+0x61c>
    3178:	00c6303a 	nor	r3,zero,r3
    317c:	18003a1e 	bne	r3,zero,3268 <__adddf3+0x614>
    3180:	3463c83a 	sub	r17,r6,r17
    3184:	4a07c83a 	sub	r3,r9,r8
    3188:	344d803a 	cmpltu	r6,r6,r17
    318c:	1991c83a 	sub	r8,r3,r6
    3190:	1021883a 	mov	r16,r2
    3194:	3825883a 	mov	r18,r7
    3198:	003f0a06 	br	2dc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002dc4>
    319c:	2023883a 	mov	r17,r4
    31a0:	003f0d06 	br	2dd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002dd8>
    31a4:	0081ffc4 	movi	r2,2047
    31a8:	80bf3f1e 	bne	r16,r2,2ea8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ea8>
    31ac:	003ec806 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    31b0:	0005883a 	mov	r2,zero
    31b4:	003fb106 	br	307c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700307c>
    31b8:	0007883a 	mov	r3,zero
    31bc:	003fbc06 	br	30b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030b0>
    31c0:	4444b03a 	or	r2,r8,r17
    31c4:	8000871e 	bne	r16,zero,33e4 <__adddf3+0x790>
    31c8:	1000ba26 	beq	r2,zero,34b4 <__adddf3+0x860>
    31cc:	4984b03a 	or	r2,r9,r6
    31d0:	103ebf26 	beq	r2,zero,2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    31d4:	8985883a 	add	r2,r17,r6
    31d8:	4247883a 	add	r3,r8,r9
    31dc:	1451803a 	cmpltu	r8,r2,r17
    31e0:	40d1883a 	add	r8,r8,r3
    31e4:	40c0202c 	andhi	r3,r8,128
    31e8:	1023883a 	mov	r17,r2
    31ec:	183f1a26 	beq	r3,zero,2e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e58>
    31f0:	00bfe034 	movhi	r2,65408
    31f4:	10bfffc4 	addi	r2,r2,-1
    31f8:	2021883a 	mov	r16,r4
    31fc:	4090703a 	and	r8,r8,r2
    3200:	003eb306 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    3204:	4444b03a 	or	r2,r8,r17
    3208:	8000291e 	bne	r16,zero,32b0 <__adddf3+0x65c>
    320c:	10004b1e 	bne	r2,zero,333c <__adddf3+0x6e8>
    3210:	4990b03a 	or	r8,r9,r6
    3214:	40008b26 	beq	r8,zero,3444 <__adddf3+0x7f0>
    3218:	4811883a 	mov	r8,r9
    321c:	3023883a 	mov	r17,r6
    3220:	3825883a 	mov	r18,r7
    3224:	003eaa06 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    3228:	1021883a 	mov	r16,r2
    322c:	0011883a 	mov	r8,zero
    3230:	0005883a 	mov	r2,zero
    3234:	003f0f06 	br	2e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e74>
    3238:	217ff804 	addi	r5,r4,-32
    323c:	00800804 	movi	r2,32
    3240:	494ad83a 	srl	r5,r9,r5
    3244:	20807d26 	beq	r4,r2,343c <__adddf3+0x7e8>
    3248:	00801004 	movi	r2,64
    324c:	1109c83a 	sub	r4,r2,r4
    3250:	4912983a 	sll	r9,r9,r4
    3254:	498cb03a 	or	r6,r9,r6
    3258:	300cc03a 	cmpne	r6,r6,zero
    325c:	298ab03a 	or	r5,r5,r6
    3260:	0013883a 	mov	r9,zero
    3264:	003f1506 	br	2ebc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ebc>
    3268:	0101ffc4 	movi	r4,2047
    326c:	113f9a1e 	bne	r2,r4,30d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030d8>
    3270:	4811883a 	mov	r8,r9
    3274:	3023883a 	mov	r17,r6
    3278:	1021883a 	mov	r16,r2
    327c:	3825883a 	mov	r18,r7
    3280:	003e9306 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    3284:	8000161e 	bne	r16,zero,32e0 <__adddf3+0x68c>
    3288:	444ab03a 	or	r5,r8,r17
    328c:	28005126 	beq	r5,zero,33d4 <__adddf3+0x780>
    3290:	0108303a 	nor	r4,zero,r4
    3294:	20004d1e 	bne	r4,zero,33cc <__adddf3+0x778>
    3298:	89a3883a 	add	r17,r17,r6
    329c:	4253883a 	add	r9,r8,r9
    32a0:	898d803a 	cmpltu	r6,r17,r6
    32a4:	3251883a 	add	r8,r6,r9
    32a8:	1021883a 	mov	r16,r2
    32ac:	003f0806 	br	2ed0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ed0>
    32b0:	1000301e 	bne	r2,zero,3374 <__adddf3+0x720>
    32b4:	4984b03a 	or	r2,r9,r6
    32b8:	10007126 	beq	r2,zero,3480 <__adddf3+0x82c>
    32bc:	4811883a 	mov	r8,r9
    32c0:	3023883a 	mov	r17,r6
    32c4:	3825883a 	mov	r18,r7
    32c8:	0401ffc4 	movi	r16,2047
    32cc:	003e8006 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    32d0:	4462b03a 	or	r17,r8,r17
    32d4:	8822c03a 	cmpne	r17,r17,zero
    32d8:	0007883a 	mov	r3,zero
    32dc:	003f8b06 	br	310c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700310c>
    32e0:	0141ffc4 	movi	r5,2047
    32e4:	11403b26 	beq	r2,r5,33d4 <__adddf3+0x780>
    32e8:	0109c83a 	sub	r4,zero,r4
    32ec:	42002034 	orhi	r8,r8,128
    32f0:	01400e04 	movi	r5,56
    32f4:	29006716 	blt	r5,r4,3494 <__adddf3+0x840>
    32f8:	014007c4 	movi	r5,31
    32fc:	29007016 	blt	r5,r4,34c0 <__adddf3+0x86c>
    3300:	01400804 	movi	r5,32
    3304:	290bc83a 	sub	r5,r5,r4
    3308:	4154983a 	sll	r10,r8,r5
    330c:	890ed83a 	srl	r7,r17,r4
    3310:	894a983a 	sll	r5,r17,r5
    3314:	4108d83a 	srl	r4,r8,r4
    3318:	51e2b03a 	or	r17,r10,r7
    331c:	280ac03a 	cmpne	r5,r5,zero
    3320:	8962b03a 	or	r17,r17,r5
    3324:	89a3883a 	add	r17,r17,r6
    3328:	2253883a 	add	r9,r4,r9
    332c:	898d803a 	cmpltu	r6,r17,r6
    3330:	3251883a 	add	r8,r6,r9
    3334:	1021883a 	mov	r16,r2
    3338:	003ee506 	br	2ed0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ed0>
    333c:	4984b03a 	or	r2,r9,r6
    3340:	103e6326 	beq	r2,zero,2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    3344:	8987c83a 	sub	r3,r17,r6
    3348:	88c9803a 	cmpltu	r4,r17,r3
    334c:	4245c83a 	sub	r2,r8,r9
    3350:	1105c83a 	sub	r2,r2,r4
    3354:	1100202c 	andhi	r4,r2,128
    3358:	203ebb26 	beq	r4,zero,2e48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e48>
    335c:	3463c83a 	sub	r17,r6,r17
    3360:	4a07c83a 	sub	r3,r9,r8
    3364:	344d803a 	cmpltu	r6,r6,r17
    3368:	1991c83a 	sub	r8,r3,r6
    336c:	3825883a 	mov	r18,r7
    3370:	003e5706 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    3374:	4984b03a 	or	r2,r9,r6
    3378:	10002e26 	beq	r2,zero,3434 <__adddf3+0x7e0>
    337c:	4004d0fa 	srli	r2,r8,3
    3380:	8822d0fa 	srli	r17,r17,3
    3384:	4010977a 	slli	r8,r8,29
    3388:	10c0022c 	andhi	r3,r2,8
    338c:	4462b03a 	or	r17,r8,r17
    3390:	18000826 	beq	r3,zero,33b4 <__adddf3+0x760>
    3394:	4808d0fa 	srli	r4,r9,3
    3398:	20c0022c 	andhi	r3,r4,8
    339c:	1800051e 	bne	r3,zero,33b4 <__adddf3+0x760>
    33a0:	300cd0fa 	srli	r6,r6,3
    33a4:	4806977a 	slli	r3,r9,29
    33a8:	2005883a 	mov	r2,r4
    33ac:	3825883a 	mov	r18,r7
    33b0:	19a2b03a 	or	r17,r3,r6
    33b4:	8810d77a 	srli	r8,r17,29
    33b8:	100490fa 	slli	r2,r2,3
    33bc:	882290fa 	slli	r17,r17,3
    33c0:	0401ffc4 	movi	r16,2047
    33c4:	4090b03a 	or	r8,r8,r2
    33c8:	003e4106 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    33cc:	0141ffc4 	movi	r5,2047
    33d0:	117fc71e 	bne	r2,r5,32f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70032f0>
    33d4:	4811883a 	mov	r8,r9
    33d8:	3023883a 	mov	r17,r6
    33dc:	1021883a 	mov	r16,r2
    33e0:	003e3b06 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    33e4:	10002f26 	beq	r2,zero,34a4 <__adddf3+0x850>
    33e8:	4984b03a 	or	r2,r9,r6
    33ec:	10001126 	beq	r2,zero,3434 <__adddf3+0x7e0>
    33f0:	4004d0fa 	srli	r2,r8,3
    33f4:	8822d0fa 	srli	r17,r17,3
    33f8:	4010977a 	slli	r8,r8,29
    33fc:	10c0022c 	andhi	r3,r2,8
    3400:	4462b03a 	or	r17,r8,r17
    3404:	183feb26 	beq	r3,zero,33b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033b4>
    3408:	4808d0fa 	srli	r4,r9,3
    340c:	20c0022c 	andhi	r3,r4,8
    3410:	183fe81e 	bne	r3,zero,33b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033b4>
    3414:	300cd0fa 	srli	r6,r6,3
    3418:	4806977a 	slli	r3,r9,29
    341c:	2005883a 	mov	r2,r4
    3420:	19a2b03a 	or	r17,r3,r6
    3424:	003fe306 	br	33b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033b4>
    3428:	0011883a 	mov	r8,zero
    342c:	0005883a 	mov	r2,zero
    3430:	003e3f06 	br	2d30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d30>
    3434:	0401ffc4 	movi	r16,2047
    3438:	003e2506 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    343c:	0013883a 	mov	r9,zero
    3440:	003f8406 	br	3254 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003254>
    3444:	0005883a 	mov	r2,zero
    3448:	0007883a 	mov	r3,zero
    344c:	003e8906 	br	2e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e74>
    3450:	197ff804 	addi	r5,r3,-32
    3454:	01000804 	movi	r4,32
    3458:	414ad83a 	srl	r5,r8,r5
    345c:	19002426 	beq	r3,r4,34f0 <__adddf3+0x89c>
    3460:	01001004 	movi	r4,64
    3464:	20c7c83a 	sub	r3,r4,r3
    3468:	40c6983a 	sll	r3,r8,r3
    346c:	1c46b03a 	or	r3,r3,r17
    3470:	1806c03a 	cmpne	r3,r3,zero
    3474:	28e2b03a 	or	r17,r5,r3
    3478:	0007883a 	mov	r3,zero
    347c:	003f2306 	br	310c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700310c>
    3480:	0007883a 	mov	r3,zero
    3484:	5811883a 	mov	r8,r11
    3488:	00bfffc4 	movi	r2,-1
    348c:	0401ffc4 	movi	r16,2047
    3490:	003e7806 	br	2e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e74>
    3494:	4462b03a 	or	r17,r8,r17
    3498:	8822c03a 	cmpne	r17,r17,zero
    349c:	0009883a 	mov	r4,zero
    34a0:	003fa006 	br	3324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003324>
    34a4:	4811883a 	mov	r8,r9
    34a8:	3023883a 	mov	r17,r6
    34ac:	0401ffc4 	movi	r16,2047
    34b0:	003e0706 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    34b4:	4811883a 	mov	r8,r9
    34b8:	3023883a 	mov	r17,r6
    34bc:	003e0406 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    34c0:	21fff804 	addi	r7,r4,-32
    34c4:	01400804 	movi	r5,32
    34c8:	41ced83a 	srl	r7,r8,r7
    34cc:	21400a26 	beq	r4,r5,34f8 <__adddf3+0x8a4>
    34d0:	01401004 	movi	r5,64
    34d4:	2909c83a 	sub	r4,r5,r4
    34d8:	4108983a 	sll	r4,r8,r4
    34dc:	2448b03a 	or	r4,r4,r17
    34e0:	2008c03a 	cmpne	r4,r4,zero
    34e4:	3922b03a 	or	r17,r7,r4
    34e8:	0009883a 	mov	r4,zero
    34ec:	003f8d06 	br	3324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003324>
    34f0:	0007883a 	mov	r3,zero
    34f4:	003fdd06 	br	346c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700346c>
    34f8:	0009883a 	mov	r4,zero
    34fc:	003ff706 	br	34dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70034dc>

00003500 <__divdf3>:
    3500:	defff204 	addi	sp,sp,-56
    3504:	dd400915 	stw	r21,36(sp)
    3508:	282ad53a 	srli	r21,r5,20
    350c:	dd000815 	stw	r20,32(sp)
    3510:	2828d7fa 	srli	r20,r5,31
    3514:	dc000415 	stw	r16,16(sp)
    3518:	04000434 	movhi	r16,16
    351c:	df000c15 	stw	fp,48(sp)
    3520:	843fffc4 	addi	r16,r16,-1
    3524:	dfc00d15 	stw	ra,52(sp)
    3528:	ddc00b15 	stw	r23,44(sp)
    352c:	dd800a15 	stw	r22,40(sp)
    3530:	dcc00715 	stw	r19,28(sp)
    3534:	dc800615 	stw	r18,24(sp)
    3538:	dc400515 	stw	r17,20(sp)
    353c:	ad41ffcc 	andi	r21,r21,2047
    3540:	2c20703a 	and	r16,r5,r16
    3544:	a7003fcc 	andi	fp,r20,255
    3548:	a8006126 	beq	r21,zero,36d0 <__divdf3+0x1d0>
    354c:	0081ffc4 	movi	r2,2047
    3550:	2025883a 	mov	r18,r4
    3554:	a8803726 	beq	r21,r2,3634 <__divdf3+0x134>
    3558:	80800434 	orhi	r2,r16,16
    355c:	100490fa 	slli	r2,r2,3
    3560:	2020d77a 	srli	r16,r4,29
    3564:	202490fa 	slli	r18,r4,3
    3568:	ad7f0044 	addi	r21,r21,-1023
    356c:	80a0b03a 	or	r16,r16,r2
    3570:	0027883a 	mov	r19,zero
    3574:	0013883a 	mov	r9,zero
    3578:	3804d53a 	srli	r2,r7,20
    357c:	382cd7fa 	srli	r22,r7,31
    3580:	04400434 	movhi	r17,16
    3584:	8c7fffc4 	addi	r17,r17,-1
    3588:	1081ffcc 	andi	r2,r2,2047
    358c:	3011883a 	mov	r8,r6
    3590:	3c62703a 	and	r17,r7,r17
    3594:	b5c03fcc 	andi	r23,r22,255
    3598:	10006c26 	beq	r2,zero,374c <__divdf3+0x24c>
    359c:	00c1ffc4 	movi	r3,2047
    35a0:	10c06426 	beq	r2,r3,3734 <__divdf3+0x234>
    35a4:	88c00434 	orhi	r3,r17,16
    35a8:	180690fa 	slli	r3,r3,3
    35ac:	3022d77a 	srli	r17,r6,29
    35b0:	301090fa 	slli	r8,r6,3
    35b4:	10bf0044 	addi	r2,r2,-1023
    35b8:	88e2b03a 	or	r17,r17,r3
    35bc:	000f883a 	mov	r7,zero
    35c0:	a58cf03a 	xor	r6,r20,r22
    35c4:	3cc8b03a 	or	r4,r7,r19
    35c8:	a8abc83a 	sub	r21,r21,r2
    35cc:	008003c4 	movi	r2,15
    35d0:	3007883a 	mov	r3,r6
    35d4:	34c03fcc 	andi	r19,r6,255
    35d8:	11009036 	bltu	r2,r4,381c <__divdf3+0x31c>
    35dc:	200890ba 	slli	r4,r4,2
    35e0:	00800034 	movhi	r2,0
    35e4:	108d7d04 	addi	r2,r2,13812
    35e8:	2089883a 	add	r4,r4,r2
    35ec:	20800017 	ldw	r2,0(r4)
    35f0:	1000683a 	jmp	r2
    35f4:	0000381c 	xori	zero,zero,224
    35f8:	0000366c 	andhi	zero,zero,217
    35fc:	0000380c 	andi	zero,zero,224
    3600:	00003660 	cmpeqi	zero,zero,217
    3604:	0000380c 	andi	zero,zero,224
    3608:	000037e0 	cmpeqi	zero,zero,223
    360c:	0000380c 	andi	zero,zero,224
    3610:	00003660 	cmpeqi	zero,zero,217
    3614:	0000366c 	andhi	zero,zero,217
    3618:	0000366c 	andhi	zero,zero,217
    361c:	000037e0 	cmpeqi	zero,zero,223
    3620:	00003660 	cmpeqi	zero,zero,217
    3624:	00003650 	cmplti	zero,zero,217
    3628:	00003650 	cmplti	zero,zero,217
    362c:	00003650 	cmplti	zero,zero,217
    3630:	00003b00 	call	3b0 <main+0x12c>
    3634:	2404b03a 	or	r2,r4,r16
    3638:	1000661e 	bne	r2,zero,37d4 <__divdf3+0x2d4>
    363c:	04c00204 	movi	r19,8
    3640:	0021883a 	mov	r16,zero
    3644:	0025883a 	mov	r18,zero
    3648:	02400084 	movi	r9,2
    364c:	003fca06 	br	3578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003578>
    3650:	8023883a 	mov	r17,r16
    3654:	9011883a 	mov	r8,r18
    3658:	e02f883a 	mov	r23,fp
    365c:	480f883a 	mov	r7,r9
    3660:	00800084 	movi	r2,2
    3664:	3881311e 	bne	r7,r2,3b2c <__divdf3+0x62c>
    3668:	b827883a 	mov	r19,r23
    366c:	98c0004c 	andi	r3,r19,1
    3670:	0081ffc4 	movi	r2,2047
    3674:	000b883a 	mov	r5,zero
    3678:	0025883a 	mov	r18,zero
    367c:	1004953a 	slli	r2,r2,20
    3680:	18c03fcc 	andi	r3,r3,255
    3684:	04400434 	movhi	r17,16
    3688:	8c7fffc4 	addi	r17,r17,-1
    368c:	180697fa 	slli	r3,r3,31
    3690:	2c4a703a 	and	r5,r5,r17
    3694:	288ab03a 	or	r5,r5,r2
    3698:	28c6b03a 	or	r3,r5,r3
    369c:	9005883a 	mov	r2,r18
    36a0:	dfc00d17 	ldw	ra,52(sp)
    36a4:	df000c17 	ldw	fp,48(sp)
    36a8:	ddc00b17 	ldw	r23,44(sp)
    36ac:	dd800a17 	ldw	r22,40(sp)
    36b0:	dd400917 	ldw	r21,36(sp)
    36b4:	dd000817 	ldw	r20,32(sp)
    36b8:	dcc00717 	ldw	r19,28(sp)
    36bc:	dc800617 	ldw	r18,24(sp)
    36c0:	dc400517 	ldw	r17,20(sp)
    36c4:	dc000417 	ldw	r16,16(sp)
    36c8:	dec00e04 	addi	sp,sp,56
    36cc:	f800283a 	ret
    36d0:	2404b03a 	or	r2,r4,r16
    36d4:	2027883a 	mov	r19,r4
    36d8:	10003926 	beq	r2,zero,37c0 <__divdf3+0x2c0>
    36dc:	80012e26 	beq	r16,zero,3b98 <__divdf3+0x698>
    36e0:	8009883a 	mov	r4,r16
    36e4:	d9800315 	stw	r6,12(sp)
    36e8:	d9c00215 	stw	r7,8(sp)
    36ec:	00052640 	call	5264 <__clzsi2>
    36f0:	d9800317 	ldw	r6,12(sp)
    36f4:	d9c00217 	ldw	r7,8(sp)
    36f8:	113ffd44 	addi	r4,r2,-11
    36fc:	00c00704 	movi	r3,28
    3700:	19012116 	blt	r3,r4,3b88 <__divdf3+0x688>
    3704:	00c00744 	movi	r3,29
    3708:	147ffe04 	addi	r17,r2,-8
    370c:	1907c83a 	sub	r3,r3,r4
    3710:	8460983a 	sll	r16,r16,r17
    3714:	98c6d83a 	srl	r3,r19,r3
    3718:	9c64983a 	sll	r18,r19,r17
    371c:	1c20b03a 	or	r16,r3,r16
    3720:	1080fcc4 	addi	r2,r2,1011
    3724:	00abc83a 	sub	r21,zero,r2
    3728:	0027883a 	mov	r19,zero
    372c:	0013883a 	mov	r9,zero
    3730:	003f9106 	br	3578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003578>
    3734:	3446b03a 	or	r3,r6,r17
    3738:	18001f1e 	bne	r3,zero,37b8 <__divdf3+0x2b8>
    373c:	0023883a 	mov	r17,zero
    3740:	0011883a 	mov	r8,zero
    3744:	01c00084 	movi	r7,2
    3748:	003f9d06 	br	35c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70035c0>
    374c:	3446b03a 	or	r3,r6,r17
    3750:	18001526 	beq	r3,zero,37a8 <__divdf3+0x2a8>
    3754:	88011b26 	beq	r17,zero,3bc4 <__divdf3+0x6c4>
    3758:	8809883a 	mov	r4,r17
    375c:	d9800315 	stw	r6,12(sp)
    3760:	da400115 	stw	r9,4(sp)
    3764:	00052640 	call	5264 <__clzsi2>
    3768:	d9800317 	ldw	r6,12(sp)
    376c:	da400117 	ldw	r9,4(sp)
    3770:	113ffd44 	addi	r4,r2,-11
    3774:	00c00704 	movi	r3,28
    3778:	19010e16 	blt	r3,r4,3bb4 <__divdf3+0x6b4>
    377c:	00c00744 	movi	r3,29
    3780:	123ffe04 	addi	r8,r2,-8
    3784:	1907c83a 	sub	r3,r3,r4
    3788:	8a22983a 	sll	r17,r17,r8
    378c:	30c6d83a 	srl	r3,r6,r3
    3790:	3210983a 	sll	r8,r6,r8
    3794:	1c62b03a 	or	r17,r3,r17
    3798:	1080fcc4 	addi	r2,r2,1011
    379c:	0085c83a 	sub	r2,zero,r2
    37a0:	000f883a 	mov	r7,zero
    37a4:	003f8606 	br	35c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70035c0>
    37a8:	0023883a 	mov	r17,zero
    37ac:	0011883a 	mov	r8,zero
    37b0:	01c00044 	movi	r7,1
    37b4:	003f8206 	br	35c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70035c0>
    37b8:	01c000c4 	movi	r7,3
    37bc:	003f8006 	br	35c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70035c0>
    37c0:	04c00104 	movi	r19,4
    37c4:	0021883a 	mov	r16,zero
    37c8:	0025883a 	mov	r18,zero
    37cc:	02400044 	movi	r9,1
    37d0:	003f6906 	br	3578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003578>
    37d4:	04c00304 	movi	r19,12
    37d8:	024000c4 	movi	r9,3
    37dc:	003f6606 	br	3578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003578>
    37e0:	01400434 	movhi	r5,16
    37e4:	0007883a 	mov	r3,zero
    37e8:	297fffc4 	addi	r5,r5,-1
    37ec:	04bfffc4 	movi	r18,-1
    37f0:	0081ffc4 	movi	r2,2047
    37f4:	003fa106 	br	367c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700367c>
    37f8:	00c00044 	movi	r3,1
    37fc:	1887c83a 	sub	r3,r3,r2
    3800:	01000e04 	movi	r4,56
    3804:	20c1210e 	bge	r4,r3,3c8c <__divdf3+0x78c>
    3808:	98c0004c 	andi	r3,r19,1
    380c:	0005883a 	mov	r2,zero
    3810:	000b883a 	mov	r5,zero
    3814:	0025883a 	mov	r18,zero
    3818:	003f9806 	br	367c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700367c>
    381c:	8c00fd36 	bltu	r17,r16,3c14 <__divdf3+0x714>
    3820:	8440fb26 	beq	r16,r17,3c10 <__divdf3+0x710>
    3824:	8007883a 	mov	r3,r16
    3828:	ad7fffc4 	addi	r21,r21,-1
    382c:	0021883a 	mov	r16,zero
    3830:	4004d63a 	srli	r2,r8,24
    3834:	8822923a 	slli	r17,r17,8
    3838:	1809883a 	mov	r4,r3
    383c:	402c923a 	slli	r22,r8,8
    3840:	88b8b03a 	or	fp,r17,r2
    3844:	e028d43a 	srli	r20,fp,16
    3848:	d8c00015 	stw	r3,0(sp)
    384c:	e5ffffcc 	andi	r23,fp,65535
    3850:	a00b883a 	mov	r5,r20
    3854:	0002b280 	call	2b28 <__udivsi3>
    3858:	d8c00017 	ldw	r3,0(sp)
    385c:	a00b883a 	mov	r5,r20
    3860:	d8800315 	stw	r2,12(sp)
    3864:	1809883a 	mov	r4,r3
    3868:	0002b8c0 	call	2b8c <__umodsi3>
    386c:	d9800317 	ldw	r6,12(sp)
    3870:	1006943a 	slli	r3,r2,16
    3874:	9004d43a 	srli	r2,r18,16
    3878:	b9a3383a 	mul	r17,r23,r6
    387c:	10c4b03a 	or	r2,r2,r3
    3880:	1440062e 	bgeu	r2,r17,389c <__divdf3+0x39c>
    3884:	1705883a 	add	r2,r2,fp
    3888:	30ffffc4 	addi	r3,r6,-1
    388c:	1700ee36 	bltu	r2,fp,3c48 <__divdf3+0x748>
    3890:	1440ed2e 	bgeu	r2,r17,3c48 <__divdf3+0x748>
    3894:	31bfff84 	addi	r6,r6,-2
    3898:	1705883a 	add	r2,r2,fp
    389c:	1463c83a 	sub	r17,r2,r17
    38a0:	a00b883a 	mov	r5,r20
    38a4:	8809883a 	mov	r4,r17
    38a8:	d9800315 	stw	r6,12(sp)
    38ac:	0002b280 	call	2b28 <__udivsi3>
    38b0:	a00b883a 	mov	r5,r20
    38b4:	8809883a 	mov	r4,r17
    38b8:	d8800215 	stw	r2,8(sp)
    38bc:	0002b8c0 	call	2b8c <__umodsi3>
    38c0:	d9c00217 	ldw	r7,8(sp)
    38c4:	1004943a 	slli	r2,r2,16
    38c8:	94bfffcc 	andi	r18,r18,65535
    38cc:	b9d1383a 	mul	r8,r23,r7
    38d0:	90a4b03a 	or	r18,r18,r2
    38d4:	d9800317 	ldw	r6,12(sp)
    38d8:	9200062e 	bgeu	r18,r8,38f4 <__divdf3+0x3f4>
    38dc:	9725883a 	add	r18,r18,fp
    38e0:	38bfffc4 	addi	r2,r7,-1
    38e4:	9700d636 	bltu	r18,fp,3c40 <__divdf3+0x740>
    38e8:	9200d52e 	bgeu	r18,r8,3c40 <__divdf3+0x740>
    38ec:	39ffff84 	addi	r7,r7,-2
    38f0:	9725883a 	add	r18,r18,fp
    38f4:	3004943a 	slli	r2,r6,16
    38f8:	b012d43a 	srli	r9,r22,16
    38fc:	b1bfffcc 	andi	r6,r22,65535
    3900:	11e2b03a 	or	r17,r2,r7
    3904:	8806d43a 	srli	r3,r17,16
    3908:	893fffcc 	andi	r4,r17,65535
    390c:	218b383a 	mul	r5,r4,r6
    3910:	30c5383a 	mul	r2,r6,r3
    3914:	2249383a 	mul	r4,r4,r9
    3918:	280ed43a 	srli	r7,r5,16
    391c:	9225c83a 	sub	r18,r18,r8
    3920:	2089883a 	add	r4,r4,r2
    3924:	3909883a 	add	r4,r7,r4
    3928:	1a47383a 	mul	r3,r3,r9
    392c:	2080022e 	bgeu	r4,r2,3938 <__divdf3+0x438>
    3930:	00800074 	movhi	r2,1
    3934:	1887883a 	add	r3,r3,r2
    3938:	2004d43a 	srli	r2,r4,16
    393c:	2008943a 	slli	r4,r4,16
    3940:	297fffcc 	andi	r5,r5,65535
    3944:	10c7883a 	add	r3,r2,r3
    3948:	2149883a 	add	r4,r4,r5
    394c:	90c0a536 	bltu	r18,r3,3be4 <__divdf3+0x6e4>
    3950:	90c0bf26 	beq	r18,r3,3c50 <__divdf3+0x750>
    3954:	90c7c83a 	sub	r3,r18,r3
    3958:	810fc83a 	sub	r7,r16,r4
    395c:	81e5803a 	cmpltu	r18,r16,r7
    3960:	1ca5c83a 	sub	r18,r3,r18
    3964:	e480c126 	beq	fp,r18,3c6c <__divdf3+0x76c>
    3968:	a00b883a 	mov	r5,r20
    396c:	9009883a 	mov	r4,r18
    3970:	d9800315 	stw	r6,12(sp)
    3974:	d9c00215 	stw	r7,8(sp)
    3978:	da400115 	stw	r9,4(sp)
    397c:	0002b280 	call	2b28 <__udivsi3>
    3980:	a00b883a 	mov	r5,r20
    3984:	9009883a 	mov	r4,r18
    3988:	d8800015 	stw	r2,0(sp)
    398c:	0002b8c0 	call	2b8c <__umodsi3>
    3990:	d9c00217 	ldw	r7,8(sp)
    3994:	da000017 	ldw	r8,0(sp)
    3998:	1006943a 	slli	r3,r2,16
    399c:	3804d43a 	srli	r2,r7,16
    39a0:	ba21383a 	mul	r16,r23,r8
    39a4:	d9800317 	ldw	r6,12(sp)
    39a8:	10c4b03a 	or	r2,r2,r3
    39ac:	da400117 	ldw	r9,4(sp)
    39b0:	1400062e 	bgeu	r2,r16,39cc <__divdf3+0x4cc>
    39b4:	1705883a 	add	r2,r2,fp
    39b8:	40ffffc4 	addi	r3,r8,-1
    39bc:	1700ad36 	bltu	r2,fp,3c74 <__divdf3+0x774>
    39c0:	1400ac2e 	bgeu	r2,r16,3c74 <__divdf3+0x774>
    39c4:	423fff84 	addi	r8,r8,-2
    39c8:	1705883a 	add	r2,r2,fp
    39cc:	1421c83a 	sub	r16,r2,r16
    39d0:	a00b883a 	mov	r5,r20
    39d4:	8009883a 	mov	r4,r16
    39d8:	d9800315 	stw	r6,12(sp)
    39dc:	d9c00215 	stw	r7,8(sp)
    39e0:	da000015 	stw	r8,0(sp)
    39e4:	da400115 	stw	r9,4(sp)
    39e8:	0002b280 	call	2b28 <__udivsi3>
    39ec:	8009883a 	mov	r4,r16
    39f0:	a00b883a 	mov	r5,r20
    39f4:	1025883a 	mov	r18,r2
    39f8:	0002b8c0 	call	2b8c <__umodsi3>
    39fc:	d9c00217 	ldw	r7,8(sp)
    3a00:	1004943a 	slli	r2,r2,16
    3a04:	bcaf383a 	mul	r23,r23,r18
    3a08:	393fffcc 	andi	r4,r7,65535
    3a0c:	2088b03a 	or	r4,r4,r2
    3a10:	d9800317 	ldw	r6,12(sp)
    3a14:	da000017 	ldw	r8,0(sp)
    3a18:	da400117 	ldw	r9,4(sp)
    3a1c:	25c0062e 	bgeu	r4,r23,3a38 <__divdf3+0x538>
    3a20:	2709883a 	add	r4,r4,fp
    3a24:	90bfffc4 	addi	r2,r18,-1
    3a28:	27009436 	bltu	r4,fp,3c7c <__divdf3+0x77c>
    3a2c:	25c0932e 	bgeu	r4,r23,3c7c <__divdf3+0x77c>
    3a30:	94bfff84 	addi	r18,r18,-2
    3a34:	2709883a 	add	r4,r4,fp
    3a38:	4004943a 	slli	r2,r8,16
    3a3c:	25efc83a 	sub	r23,r4,r23
    3a40:	1490b03a 	or	r8,r2,r18
    3a44:	4008d43a 	srli	r4,r8,16
    3a48:	40ffffcc 	andi	r3,r8,65535
    3a4c:	30c5383a 	mul	r2,r6,r3
    3a50:	1a47383a 	mul	r3,r3,r9
    3a54:	310d383a 	mul	r6,r6,r4
    3a58:	100ad43a 	srli	r5,r2,16
    3a5c:	4913383a 	mul	r9,r9,r4
    3a60:	1987883a 	add	r3,r3,r6
    3a64:	28c7883a 	add	r3,r5,r3
    3a68:	1980022e 	bgeu	r3,r6,3a74 <__divdf3+0x574>
    3a6c:	01000074 	movhi	r4,1
    3a70:	4913883a 	add	r9,r9,r4
    3a74:	1808d43a 	srli	r4,r3,16
    3a78:	1806943a 	slli	r3,r3,16
    3a7c:	10bfffcc 	andi	r2,r2,65535
    3a80:	2253883a 	add	r9,r4,r9
    3a84:	1887883a 	add	r3,r3,r2
    3a88:	ba403836 	bltu	r23,r9,3b6c <__divdf3+0x66c>
    3a8c:	ba403626 	beq	r23,r9,3b68 <__divdf3+0x668>
    3a90:	42000054 	ori	r8,r8,1
    3a94:	a880ffc4 	addi	r2,r21,1023
    3a98:	00bf570e 	bge	zero,r2,37f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037f8>
    3a9c:	40c001cc 	andi	r3,r8,7
    3aa0:	18000726 	beq	r3,zero,3ac0 <__divdf3+0x5c0>
    3aa4:	40c003cc 	andi	r3,r8,15
    3aa8:	01000104 	movi	r4,4
    3aac:	19000426 	beq	r3,r4,3ac0 <__divdf3+0x5c0>
    3ab0:	4107883a 	add	r3,r8,r4
    3ab4:	1a11803a 	cmpltu	r8,r3,r8
    3ab8:	8a23883a 	add	r17,r17,r8
    3abc:	1811883a 	mov	r8,r3
    3ac0:	88c0402c 	andhi	r3,r17,256
    3ac4:	18000426 	beq	r3,zero,3ad8 <__divdf3+0x5d8>
    3ac8:	00ffc034 	movhi	r3,65280
    3acc:	18ffffc4 	addi	r3,r3,-1
    3ad0:	a8810004 	addi	r2,r21,1024
    3ad4:	88e2703a 	and	r17,r17,r3
    3ad8:	00c1ff84 	movi	r3,2046
    3adc:	18bee316 	blt	r3,r2,366c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700366c>
    3ae0:	8824977a 	slli	r18,r17,29
    3ae4:	4010d0fa 	srli	r8,r8,3
    3ae8:	8822927a 	slli	r17,r17,9
    3aec:	1081ffcc 	andi	r2,r2,2047
    3af0:	9224b03a 	or	r18,r18,r8
    3af4:	880ad33a 	srli	r5,r17,12
    3af8:	98c0004c 	andi	r3,r19,1
    3afc:	003edf06 	br	367c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700367c>
    3b00:	8080022c 	andhi	r2,r16,8
    3b04:	10001226 	beq	r2,zero,3b50 <__divdf3+0x650>
    3b08:	8880022c 	andhi	r2,r17,8
    3b0c:	1000101e 	bne	r2,zero,3b50 <__divdf3+0x650>
    3b10:	00800434 	movhi	r2,16
    3b14:	89400234 	orhi	r5,r17,8
    3b18:	10bfffc4 	addi	r2,r2,-1
    3b1c:	b007883a 	mov	r3,r22
    3b20:	288a703a 	and	r5,r5,r2
    3b24:	4025883a 	mov	r18,r8
    3b28:	003f3106 	br	37f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037f0>
    3b2c:	008000c4 	movi	r2,3
    3b30:	3880a626 	beq	r7,r2,3dcc <__divdf3+0x8cc>
    3b34:	00800044 	movi	r2,1
    3b38:	3880521e 	bne	r7,r2,3c84 <__divdf3+0x784>
    3b3c:	b807883a 	mov	r3,r23
    3b40:	0005883a 	mov	r2,zero
    3b44:	000b883a 	mov	r5,zero
    3b48:	0025883a 	mov	r18,zero
    3b4c:	003ecb06 	br	367c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700367c>
    3b50:	00800434 	movhi	r2,16
    3b54:	81400234 	orhi	r5,r16,8
    3b58:	10bfffc4 	addi	r2,r2,-1
    3b5c:	a007883a 	mov	r3,r20
    3b60:	288a703a 	and	r5,r5,r2
    3b64:	003f2206 	br	37f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037f0>
    3b68:	183fca26 	beq	r3,zero,3a94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a94>
    3b6c:	e5ef883a 	add	r23,fp,r23
    3b70:	40bfffc4 	addi	r2,r8,-1
    3b74:	bf00392e 	bgeu	r23,fp,3c5c <__divdf3+0x75c>
    3b78:	1011883a 	mov	r8,r2
    3b7c:	ba7fc41e 	bne	r23,r9,3a90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a90>
    3b80:	b0ffc31e 	bne	r22,r3,3a90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a90>
    3b84:	003fc306 	br	3a94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a94>
    3b88:	143ff604 	addi	r16,r2,-40
    3b8c:	9c20983a 	sll	r16,r19,r16
    3b90:	0025883a 	mov	r18,zero
    3b94:	003ee206 	br	3720 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003720>
    3b98:	d9800315 	stw	r6,12(sp)
    3b9c:	d9c00215 	stw	r7,8(sp)
    3ba0:	00052640 	call	5264 <__clzsi2>
    3ba4:	10800804 	addi	r2,r2,32
    3ba8:	d9c00217 	ldw	r7,8(sp)
    3bac:	d9800317 	ldw	r6,12(sp)
    3bb0:	003ed106 	br	36f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70036f8>
    3bb4:	147ff604 	addi	r17,r2,-40
    3bb8:	3462983a 	sll	r17,r6,r17
    3bbc:	0011883a 	mov	r8,zero
    3bc0:	003ef506 	br	3798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003798>
    3bc4:	3009883a 	mov	r4,r6
    3bc8:	d9800315 	stw	r6,12(sp)
    3bcc:	da400115 	stw	r9,4(sp)
    3bd0:	00052640 	call	5264 <__clzsi2>
    3bd4:	10800804 	addi	r2,r2,32
    3bd8:	da400117 	ldw	r9,4(sp)
    3bdc:	d9800317 	ldw	r6,12(sp)
    3be0:	003ee306 	br	3770 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003770>
    3be4:	85a1883a 	add	r16,r16,r22
    3be8:	8585803a 	cmpltu	r2,r16,r22
    3bec:	1705883a 	add	r2,r2,fp
    3bf0:	14a5883a 	add	r18,r2,r18
    3bf4:	88bfffc4 	addi	r2,r17,-1
    3bf8:	e4800c2e 	bgeu	fp,r18,3c2c <__divdf3+0x72c>
    3bfc:	90c03e36 	bltu	r18,r3,3cf8 <__divdf3+0x7f8>
    3c00:	1c806926 	beq	r3,r18,3da8 <__divdf3+0x8a8>
    3c04:	90c7c83a 	sub	r3,r18,r3
    3c08:	1023883a 	mov	r17,r2
    3c0c:	003f5206 	br	3958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003958>
    3c10:	923f0436 	bltu	r18,r8,3824 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003824>
    3c14:	800897fa 	slli	r4,r16,31
    3c18:	9004d07a 	srli	r2,r18,1
    3c1c:	8006d07a 	srli	r3,r16,1
    3c20:	902097fa 	slli	r16,r18,31
    3c24:	20a4b03a 	or	r18,r4,r2
    3c28:	003f0106 	br	3830 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003830>
    3c2c:	e4bff51e 	bne	fp,r18,3c04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c04>
    3c30:	85bff22e 	bgeu	r16,r22,3bfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003bfc>
    3c34:	e0c7c83a 	sub	r3,fp,r3
    3c38:	1023883a 	mov	r17,r2
    3c3c:	003f4606 	br	3958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003958>
    3c40:	100f883a 	mov	r7,r2
    3c44:	003f2b06 	br	38f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70038f4>
    3c48:	180d883a 	mov	r6,r3
    3c4c:	003f1306 	br	389c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700389c>
    3c50:	813fe436 	bltu	r16,r4,3be4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003be4>
    3c54:	0007883a 	mov	r3,zero
    3c58:	003f3f06 	br	3958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003958>
    3c5c:	ba402c36 	bltu	r23,r9,3d10 <__divdf3+0x810>
    3c60:	4dc05426 	beq	r9,r23,3db4 <__divdf3+0x8b4>
    3c64:	1011883a 	mov	r8,r2
    3c68:	003f8906 	br	3a90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a90>
    3c6c:	023fffc4 	movi	r8,-1
    3c70:	003f8806 	br	3a94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a94>
    3c74:	1811883a 	mov	r8,r3
    3c78:	003f5406 	br	39cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70039cc>
    3c7c:	1025883a 	mov	r18,r2
    3c80:	003f6d06 	br	3a38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a38>
    3c84:	b827883a 	mov	r19,r23
    3c88:	003f8206 	br	3a94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a94>
    3c8c:	010007c4 	movi	r4,31
    3c90:	20c02616 	blt	r4,r3,3d2c <__divdf3+0x82c>
    3c94:	00800804 	movi	r2,32
    3c98:	10c5c83a 	sub	r2,r2,r3
    3c9c:	888a983a 	sll	r5,r17,r2
    3ca0:	40c8d83a 	srl	r4,r8,r3
    3ca4:	4084983a 	sll	r2,r8,r2
    3ca8:	88e2d83a 	srl	r17,r17,r3
    3cac:	2906b03a 	or	r3,r5,r4
    3cb0:	1004c03a 	cmpne	r2,r2,zero
    3cb4:	1886b03a 	or	r3,r3,r2
    3cb8:	188001cc 	andi	r2,r3,7
    3cbc:	10000726 	beq	r2,zero,3cdc <__divdf3+0x7dc>
    3cc0:	188003cc 	andi	r2,r3,15
    3cc4:	01000104 	movi	r4,4
    3cc8:	11000426 	beq	r2,r4,3cdc <__divdf3+0x7dc>
    3ccc:	1805883a 	mov	r2,r3
    3cd0:	10c00104 	addi	r3,r2,4
    3cd4:	1885803a 	cmpltu	r2,r3,r2
    3cd8:	88a3883a 	add	r17,r17,r2
    3cdc:	8880202c 	andhi	r2,r17,128
    3ce0:	10002726 	beq	r2,zero,3d80 <__divdf3+0x880>
    3ce4:	98c0004c 	andi	r3,r19,1
    3ce8:	00800044 	movi	r2,1
    3cec:	000b883a 	mov	r5,zero
    3cf0:	0025883a 	mov	r18,zero
    3cf4:	003e6106 	br	367c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700367c>
    3cf8:	85a1883a 	add	r16,r16,r22
    3cfc:	8585803a 	cmpltu	r2,r16,r22
    3d00:	1705883a 	add	r2,r2,fp
    3d04:	14a5883a 	add	r18,r2,r18
    3d08:	8c7fff84 	addi	r17,r17,-2
    3d0c:	003f1106 	br	3954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003954>
    3d10:	b589883a 	add	r4,r22,r22
    3d14:	25ad803a 	cmpltu	r22,r4,r22
    3d18:	b739883a 	add	fp,r22,fp
    3d1c:	40bfff84 	addi	r2,r8,-2
    3d20:	bf2f883a 	add	r23,r23,fp
    3d24:	202d883a 	mov	r22,r4
    3d28:	003f9306 	br	3b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b78>
    3d2c:	013ff844 	movi	r4,-31
    3d30:	2085c83a 	sub	r2,r4,r2
    3d34:	8888d83a 	srl	r4,r17,r2
    3d38:	00800804 	movi	r2,32
    3d3c:	18802126 	beq	r3,r2,3dc4 <__divdf3+0x8c4>
    3d40:	00801004 	movi	r2,64
    3d44:	10c5c83a 	sub	r2,r2,r3
    3d48:	8884983a 	sll	r2,r17,r2
    3d4c:	1204b03a 	or	r2,r2,r8
    3d50:	1004c03a 	cmpne	r2,r2,zero
    3d54:	2084b03a 	or	r2,r4,r2
    3d58:	144001cc 	andi	r17,r2,7
    3d5c:	88000d1e 	bne	r17,zero,3d94 <__divdf3+0x894>
    3d60:	000b883a 	mov	r5,zero
    3d64:	1024d0fa 	srli	r18,r2,3
    3d68:	98c0004c 	andi	r3,r19,1
    3d6c:	0005883a 	mov	r2,zero
    3d70:	9464b03a 	or	r18,r18,r17
    3d74:	003e4106 	br	367c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700367c>
    3d78:	1007883a 	mov	r3,r2
    3d7c:	0023883a 	mov	r17,zero
    3d80:	880a927a 	slli	r5,r17,9
    3d84:	1805883a 	mov	r2,r3
    3d88:	8822977a 	slli	r17,r17,29
    3d8c:	280ad33a 	srli	r5,r5,12
    3d90:	003ff406 	br	3d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d64>
    3d94:	10c003cc 	andi	r3,r2,15
    3d98:	01000104 	movi	r4,4
    3d9c:	193ff626 	beq	r3,r4,3d78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d78>
    3da0:	0023883a 	mov	r17,zero
    3da4:	003fca06 	br	3cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003cd0>
    3da8:	813fd336 	bltu	r16,r4,3cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003cf8>
    3dac:	1023883a 	mov	r17,r2
    3db0:	003fa806 	br	3c54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c54>
    3db4:	b0ffd636 	bltu	r22,r3,3d10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d10>
    3db8:	1011883a 	mov	r8,r2
    3dbc:	b0ff341e 	bne	r22,r3,3a90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a90>
    3dc0:	003f3406 	br	3a94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a94>
    3dc4:	0005883a 	mov	r2,zero
    3dc8:	003fe006 	br	3d4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d4c>
    3dcc:	00800434 	movhi	r2,16
    3dd0:	89400234 	orhi	r5,r17,8
    3dd4:	10bfffc4 	addi	r2,r2,-1
    3dd8:	b807883a 	mov	r3,r23
    3ddc:	288a703a 	and	r5,r5,r2
    3de0:	4025883a 	mov	r18,r8
    3de4:	003e8206 	br	37f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037f0>

00003de8 <__eqdf2>:
    3de8:	2804d53a 	srli	r2,r5,20
    3dec:	3806d53a 	srli	r3,r7,20
    3df0:	02000434 	movhi	r8,16
    3df4:	423fffc4 	addi	r8,r8,-1
    3df8:	1081ffcc 	andi	r2,r2,2047
    3dfc:	0281ffc4 	movi	r10,2047
    3e00:	2a12703a 	and	r9,r5,r8
    3e04:	18c1ffcc 	andi	r3,r3,2047
    3e08:	3a10703a 	and	r8,r7,r8
    3e0c:	280ad7fa 	srli	r5,r5,31
    3e10:	380ed7fa 	srli	r7,r7,31
    3e14:	12801026 	beq	r2,r10,3e58 <__eqdf2+0x70>
    3e18:	0281ffc4 	movi	r10,2047
    3e1c:	1a800a26 	beq	r3,r10,3e48 <__eqdf2+0x60>
    3e20:	10c00226 	beq	r2,r3,3e2c <__eqdf2+0x44>
    3e24:	00800044 	movi	r2,1
    3e28:	f800283a 	ret
    3e2c:	4a3ffd1e 	bne	r9,r8,3e24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e24>
    3e30:	21bffc1e 	bne	r4,r6,3e24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e24>
    3e34:	29c00c26 	beq	r5,r7,3e68 <__eqdf2+0x80>
    3e38:	103ffa1e 	bne	r2,zero,3e24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e24>
    3e3c:	2244b03a 	or	r2,r4,r9
    3e40:	1004c03a 	cmpne	r2,r2,zero
    3e44:	f800283a 	ret
    3e48:	3214b03a 	or	r10,r6,r8
    3e4c:	503ff426 	beq	r10,zero,3e20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e20>
    3e50:	00800044 	movi	r2,1
    3e54:	f800283a 	ret
    3e58:	2254b03a 	or	r10,r4,r9
    3e5c:	503fee26 	beq	r10,zero,3e18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e18>
    3e60:	00800044 	movi	r2,1
    3e64:	f800283a 	ret
    3e68:	0005883a 	mov	r2,zero
    3e6c:	f800283a 	ret

00003e70 <__gedf2>:
    3e70:	2804d53a 	srli	r2,r5,20
    3e74:	3806d53a 	srli	r3,r7,20
    3e78:	02000434 	movhi	r8,16
    3e7c:	423fffc4 	addi	r8,r8,-1
    3e80:	1081ffcc 	andi	r2,r2,2047
    3e84:	0241ffc4 	movi	r9,2047
    3e88:	2a14703a 	and	r10,r5,r8
    3e8c:	18c1ffcc 	andi	r3,r3,2047
    3e90:	3a10703a 	and	r8,r7,r8
    3e94:	280ad7fa 	srli	r5,r5,31
    3e98:	380ed7fa 	srli	r7,r7,31
    3e9c:	12401d26 	beq	r2,r9,3f14 <__gedf2+0xa4>
    3ea0:	0241ffc4 	movi	r9,2047
    3ea4:	1a401226 	beq	r3,r9,3ef0 <__gedf2+0x80>
    3ea8:	1000081e 	bne	r2,zero,3ecc <__gedf2+0x5c>
    3eac:	2296b03a 	or	r11,r4,r10
    3eb0:	5813003a 	cmpeq	r9,r11,zero
    3eb4:	1800091e 	bne	r3,zero,3edc <__gedf2+0x6c>
    3eb8:	3218b03a 	or	r12,r6,r8
    3ebc:	6000071e 	bne	r12,zero,3edc <__gedf2+0x6c>
    3ec0:	0005883a 	mov	r2,zero
    3ec4:	5800101e 	bne	r11,zero,3f08 <__gedf2+0x98>
    3ec8:	f800283a 	ret
    3ecc:	18000c1e 	bne	r3,zero,3f00 <__gedf2+0x90>
    3ed0:	3212b03a 	or	r9,r6,r8
    3ed4:	48000c26 	beq	r9,zero,3f08 <__gedf2+0x98>
    3ed8:	0013883a 	mov	r9,zero
    3edc:	39c03fcc 	andi	r7,r7,255
    3ee0:	48000826 	beq	r9,zero,3f04 <__gedf2+0x94>
    3ee4:	38000926 	beq	r7,zero,3f0c <__gedf2+0x9c>
    3ee8:	00800044 	movi	r2,1
    3eec:	f800283a 	ret
    3ef0:	3212b03a 	or	r9,r6,r8
    3ef4:	483fec26 	beq	r9,zero,3ea8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ea8>
    3ef8:	00bfff84 	movi	r2,-2
    3efc:	f800283a 	ret
    3f00:	39c03fcc 	andi	r7,r7,255
    3f04:	29c00626 	beq	r5,r7,3f20 <__gedf2+0xb0>
    3f08:	283ff726 	beq	r5,zero,3ee8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ee8>
    3f0c:	00bfffc4 	movi	r2,-1
    3f10:	f800283a 	ret
    3f14:	2292b03a 	or	r9,r4,r10
    3f18:	483fe126 	beq	r9,zero,3ea0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ea0>
    3f1c:	003ff606 	br	3ef8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ef8>
    3f20:	18bff916 	blt	r3,r2,3f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f08>
    3f24:	10c00316 	blt	r2,r3,3f34 <__gedf2+0xc4>
    3f28:	42bff736 	bltu	r8,r10,3f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f08>
    3f2c:	52000326 	beq	r10,r8,3f3c <__gedf2+0xcc>
    3f30:	5200042e 	bgeu	r10,r8,3f44 <__gedf2+0xd4>
    3f34:	283fec1e 	bne	r5,zero,3ee8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ee8>
    3f38:	003ff406 	br	3f0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f0c>
    3f3c:	313ff236 	bltu	r6,r4,3f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f08>
    3f40:	21bffc36 	bltu	r4,r6,3f34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f34>
    3f44:	0005883a 	mov	r2,zero
    3f48:	f800283a 	ret

00003f4c <__muldf3>:
    3f4c:	defff304 	addi	sp,sp,-52
    3f50:	2804d53a 	srli	r2,r5,20
    3f54:	dd800915 	stw	r22,36(sp)
    3f58:	282cd7fa 	srli	r22,r5,31
    3f5c:	dc000315 	stw	r16,12(sp)
    3f60:	04000434 	movhi	r16,16
    3f64:	dd400815 	stw	r21,32(sp)
    3f68:	dc800515 	stw	r18,20(sp)
    3f6c:	843fffc4 	addi	r16,r16,-1
    3f70:	dfc00c15 	stw	ra,48(sp)
    3f74:	df000b15 	stw	fp,44(sp)
    3f78:	ddc00a15 	stw	r23,40(sp)
    3f7c:	dd000715 	stw	r20,28(sp)
    3f80:	dcc00615 	stw	r19,24(sp)
    3f84:	dc400415 	stw	r17,16(sp)
    3f88:	1481ffcc 	andi	r18,r2,2047
    3f8c:	2c20703a 	and	r16,r5,r16
    3f90:	b02b883a 	mov	r21,r22
    3f94:	b2403fcc 	andi	r9,r22,255
    3f98:	90006026 	beq	r18,zero,411c <__muldf3+0x1d0>
    3f9c:	0081ffc4 	movi	r2,2047
    3fa0:	2029883a 	mov	r20,r4
    3fa4:	90803626 	beq	r18,r2,4080 <__muldf3+0x134>
    3fa8:	80800434 	orhi	r2,r16,16
    3fac:	100490fa 	slli	r2,r2,3
    3fb0:	2020d77a 	srli	r16,r4,29
    3fb4:	202890fa 	slli	r20,r4,3
    3fb8:	94bf0044 	addi	r18,r18,-1023
    3fbc:	80a0b03a 	or	r16,r16,r2
    3fc0:	0027883a 	mov	r19,zero
    3fc4:	0039883a 	mov	fp,zero
    3fc8:	3804d53a 	srli	r2,r7,20
    3fcc:	382ed7fa 	srli	r23,r7,31
    3fd0:	04400434 	movhi	r17,16
    3fd4:	8c7fffc4 	addi	r17,r17,-1
    3fd8:	1081ffcc 	andi	r2,r2,2047
    3fdc:	3011883a 	mov	r8,r6
    3fe0:	3c62703a 	and	r17,r7,r17
    3fe4:	ba803fcc 	andi	r10,r23,255
    3fe8:	10006d26 	beq	r2,zero,41a0 <__muldf3+0x254>
    3fec:	00c1ffc4 	movi	r3,2047
    3ff0:	10c06526 	beq	r2,r3,4188 <__muldf3+0x23c>
    3ff4:	88c00434 	orhi	r3,r17,16
    3ff8:	180690fa 	slli	r3,r3,3
    3ffc:	3022d77a 	srli	r17,r6,29
    4000:	301090fa 	slli	r8,r6,3
    4004:	10bf0044 	addi	r2,r2,-1023
    4008:	88e2b03a 	or	r17,r17,r3
    400c:	000b883a 	mov	r5,zero
    4010:	9085883a 	add	r2,r18,r2
    4014:	2cc8b03a 	or	r4,r5,r19
    4018:	00c003c4 	movi	r3,15
    401c:	bdacf03a 	xor	r22,r23,r22
    4020:	12c00044 	addi	r11,r2,1
    4024:	19009936 	bltu	r3,r4,428c <__muldf3+0x340>
    4028:	200890ba 	slli	r4,r4,2
    402c:	00c00034 	movhi	r3,0
    4030:	18d01004 	addi	r3,r3,16448
    4034:	20c9883a 	add	r4,r4,r3
    4038:	20c00017 	ldw	r3,0(r4)
    403c:	1800683a 	jmp	r3
    4040:	0000428c 	andi	zero,zero,266
    4044:	000040a0 	cmpeqi	zero,zero,258
    4048:	000040a0 	cmpeqi	zero,zero,258
    404c:	0000409c 	xori	zero,zero,258
    4050:	00004268 	cmpgeui	zero,zero,265
    4054:	00004268 	cmpgeui	zero,zero,265
    4058:	00004250 	cmplti	zero,zero,265
    405c:	0000409c 	xori	zero,zero,258
    4060:	00004268 	cmpgeui	zero,zero,265
    4064:	00004250 	cmplti	zero,zero,265
    4068:	00004268 	cmpgeui	zero,zero,265
    406c:	0000409c 	xori	zero,zero,258
    4070:	00004278 	rdprs	zero,zero,265
    4074:	00004278 	rdprs	zero,zero,265
    4078:	00004278 	rdprs	zero,zero,265
    407c:	00004494 	movui	zero,274
    4080:	2404b03a 	or	r2,r4,r16
    4084:	10006f1e 	bne	r2,zero,4244 <__muldf3+0x2f8>
    4088:	04c00204 	movi	r19,8
    408c:	0021883a 	mov	r16,zero
    4090:	0029883a 	mov	r20,zero
    4094:	07000084 	movi	fp,2
    4098:	003fcb06 	br	3fc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fc8>
    409c:	502d883a 	mov	r22,r10
    40a0:	00800084 	movi	r2,2
    40a4:	28805726 	beq	r5,r2,4204 <__muldf3+0x2b8>
    40a8:	008000c4 	movi	r2,3
    40ac:	28816626 	beq	r5,r2,4648 <__muldf3+0x6fc>
    40b0:	00800044 	movi	r2,1
    40b4:	2881411e 	bne	r5,r2,45bc <__muldf3+0x670>
    40b8:	b02b883a 	mov	r21,r22
    40bc:	0005883a 	mov	r2,zero
    40c0:	000b883a 	mov	r5,zero
    40c4:	0029883a 	mov	r20,zero
    40c8:	1004953a 	slli	r2,r2,20
    40cc:	a8c03fcc 	andi	r3,r21,255
    40d0:	04400434 	movhi	r17,16
    40d4:	8c7fffc4 	addi	r17,r17,-1
    40d8:	180697fa 	slli	r3,r3,31
    40dc:	2c4a703a 	and	r5,r5,r17
    40e0:	288ab03a 	or	r5,r5,r2
    40e4:	28c6b03a 	or	r3,r5,r3
    40e8:	a005883a 	mov	r2,r20
    40ec:	dfc00c17 	ldw	ra,48(sp)
    40f0:	df000b17 	ldw	fp,44(sp)
    40f4:	ddc00a17 	ldw	r23,40(sp)
    40f8:	dd800917 	ldw	r22,36(sp)
    40fc:	dd400817 	ldw	r21,32(sp)
    4100:	dd000717 	ldw	r20,28(sp)
    4104:	dcc00617 	ldw	r19,24(sp)
    4108:	dc800517 	ldw	r18,20(sp)
    410c:	dc400417 	ldw	r17,16(sp)
    4110:	dc000317 	ldw	r16,12(sp)
    4114:	dec00d04 	addi	sp,sp,52
    4118:	f800283a 	ret
    411c:	2404b03a 	or	r2,r4,r16
    4120:	2027883a 	mov	r19,r4
    4124:	10004226 	beq	r2,zero,4230 <__muldf3+0x2e4>
    4128:	8000fc26 	beq	r16,zero,451c <__muldf3+0x5d0>
    412c:	8009883a 	mov	r4,r16
    4130:	d9800215 	stw	r6,8(sp)
    4134:	d9c00015 	stw	r7,0(sp)
    4138:	da400115 	stw	r9,4(sp)
    413c:	00052640 	call	5264 <__clzsi2>
    4140:	d9800217 	ldw	r6,8(sp)
    4144:	d9c00017 	ldw	r7,0(sp)
    4148:	da400117 	ldw	r9,4(sp)
    414c:	113ffd44 	addi	r4,r2,-11
    4150:	00c00704 	movi	r3,28
    4154:	1900ed16 	blt	r3,r4,450c <__muldf3+0x5c0>
    4158:	00c00744 	movi	r3,29
    415c:	147ffe04 	addi	r17,r2,-8
    4160:	1907c83a 	sub	r3,r3,r4
    4164:	8460983a 	sll	r16,r16,r17
    4168:	98c6d83a 	srl	r3,r19,r3
    416c:	9c68983a 	sll	r20,r19,r17
    4170:	1c20b03a 	or	r16,r3,r16
    4174:	1080fcc4 	addi	r2,r2,1011
    4178:	00a5c83a 	sub	r18,zero,r2
    417c:	0027883a 	mov	r19,zero
    4180:	0039883a 	mov	fp,zero
    4184:	003f9006 	br	3fc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fc8>
    4188:	3446b03a 	or	r3,r6,r17
    418c:	1800261e 	bne	r3,zero,4228 <__muldf3+0x2dc>
    4190:	0023883a 	mov	r17,zero
    4194:	0011883a 	mov	r8,zero
    4198:	01400084 	movi	r5,2
    419c:	003f9c06 	br	4010 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004010>
    41a0:	3446b03a 	or	r3,r6,r17
    41a4:	18001c26 	beq	r3,zero,4218 <__muldf3+0x2cc>
    41a8:	8800ce26 	beq	r17,zero,44e4 <__muldf3+0x598>
    41ac:	8809883a 	mov	r4,r17
    41b0:	d9800215 	stw	r6,8(sp)
    41b4:	da400115 	stw	r9,4(sp)
    41b8:	da800015 	stw	r10,0(sp)
    41bc:	00052640 	call	5264 <__clzsi2>
    41c0:	d9800217 	ldw	r6,8(sp)
    41c4:	da400117 	ldw	r9,4(sp)
    41c8:	da800017 	ldw	r10,0(sp)
    41cc:	113ffd44 	addi	r4,r2,-11
    41d0:	00c00704 	movi	r3,28
    41d4:	1900bf16 	blt	r3,r4,44d4 <__muldf3+0x588>
    41d8:	00c00744 	movi	r3,29
    41dc:	123ffe04 	addi	r8,r2,-8
    41e0:	1907c83a 	sub	r3,r3,r4
    41e4:	8a22983a 	sll	r17,r17,r8
    41e8:	30c6d83a 	srl	r3,r6,r3
    41ec:	3210983a 	sll	r8,r6,r8
    41f0:	1c62b03a 	or	r17,r3,r17
    41f4:	1080fcc4 	addi	r2,r2,1011
    41f8:	0085c83a 	sub	r2,zero,r2
    41fc:	000b883a 	mov	r5,zero
    4200:	003f8306 	br	4010 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004010>
    4204:	b02b883a 	mov	r21,r22
    4208:	0081ffc4 	movi	r2,2047
    420c:	000b883a 	mov	r5,zero
    4210:	0029883a 	mov	r20,zero
    4214:	003fac06 	br	40c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040c8>
    4218:	0023883a 	mov	r17,zero
    421c:	0011883a 	mov	r8,zero
    4220:	01400044 	movi	r5,1
    4224:	003f7a06 	br	4010 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004010>
    4228:	014000c4 	movi	r5,3
    422c:	003f7806 	br	4010 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004010>
    4230:	04c00104 	movi	r19,4
    4234:	0021883a 	mov	r16,zero
    4238:	0029883a 	mov	r20,zero
    423c:	07000044 	movi	fp,1
    4240:	003f6106 	br	3fc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fc8>
    4244:	04c00304 	movi	r19,12
    4248:	070000c4 	movi	fp,3
    424c:	003f5e06 	br	3fc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fc8>
    4250:	01400434 	movhi	r5,16
    4254:	002b883a 	mov	r21,zero
    4258:	297fffc4 	addi	r5,r5,-1
    425c:	053fffc4 	movi	r20,-1
    4260:	0081ffc4 	movi	r2,2047
    4264:	003f9806 	br	40c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040c8>
    4268:	8023883a 	mov	r17,r16
    426c:	a011883a 	mov	r8,r20
    4270:	e00b883a 	mov	r5,fp
    4274:	003f8a06 	br	40a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040a0>
    4278:	8023883a 	mov	r17,r16
    427c:	a011883a 	mov	r8,r20
    4280:	482d883a 	mov	r22,r9
    4284:	e00b883a 	mov	r5,fp
    4288:	003f8506 	br	40a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040a0>
    428c:	a00ad43a 	srli	r5,r20,16
    4290:	401ad43a 	srli	r13,r8,16
    4294:	a53fffcc 	andi	r20,r20,65535
    4298:	423fffcc 	andi	r8,r8,65535
    429c:	4519383a 	mul	r12,r8,r20
    42a0:	4147383a 	mul	r3,r8,r5
    42a4:	6d09383a 	mul	r4,r13,r20
    42a8:	600cd43a 	srli	r6,r12,16
    42ac:	2b5d383a 	mul	r14,r5,r13
    42b0:	20c9883a 	add	r4,r4,r3
    42b4:	310d883a 	add	r6,r6,r4
    42b8:	30c0022e 	bgeu	r6,r3,42c4 <__muldf3+0x378>
    42bc:	00c00074 	movhi	r3,1
    42c0:	70dd883a 	add	r14,r14,r3
    42c4:	8826d43a 	srli	r19,r17,16
    42c8:	8bffffcc 	andi	r15,r17,65535
    42cc:	7d23383a 	mul	r17,r15,r20
    42d0:	7949383a 	mul	r4,r15,r5
    42d4:	9d29383a 	mul	r20,r19,r20
    42d8:	8814d43a 	srli	r10,r17,16
    42dc:	3012943a 	slli	r9,r6,16
    42e0:	a129883a 	add	r20,r20,r4
    42e4:	633fffcc 	andi	r12,r12,65535
    42e8:	5515883a 	add	r10,r10,r20
    42ec:	3006d43a 	srli	r3,r6,16
    42f0:	4b13883a 	add	r9,r9,r12
    42f4:	2ccb383a 	mul	r5,r5,r19
    42f8:	5100022e 	bgeu	r10,r4,4304 <__muldf3+0x3b8>
    42fc:	01000074 	movhi	r4,1
    4300:	290b883a 	add	r5,r5,r4
    4304:	802ad43a 	srli	r21,r16,16
    4308:	843fffcc 	andi	r16,r16,65535
    430c:	440d383a 	mul	r6,r8,r16
    4310:	4565383a 	mul	r18,r8,r21
    4314:	8349383a 	mul	r4,r16,r13
    4318:	500e943a 	slli	r7,r10,16
    431c:	3010d43a 	srli	r8,r6,16
    4320:	5028d43a 	srli	r20,r10,16
    4324:	2489883a 	add	r4,r4,r18
    4328:	8abfffcc 	andi	r10,r17,65535
    432c:	3a95883a 	add	r10,r7,r10
    4330:	4119883a 	add	r12,r8,r4
    4334:	a169883a 	add	r20,r20,r5
    4338:	1a87883a 	add	r3,r3,r10
    433c:	6d5b383a 	mul	r13,r13,r21
    4340:	6480022e 	bgeu	r12,r18,434c <__muldf3+0x400>
    4344:	01000074 	movhi	r4,1
    4348:	691b883a 	add	r13,r13,r4
    434c:	7c25383a 	mul	r18,r15,r16
    4350:	7d4b383a 	mul	r5,r15,r21
    4354:	84cf383a 	mul	r7,r16,r19
    4358:	901ed43a 	srli	r15,r18,16
    435c:	6008d43a 	srli	r4,r12,16
    4360:	6010943a 	slli	r8,r12,16
    4364:	394f883a 	add	r7,r7,r5
    4368:	333fffcc 	andi	r12,r6,65535
    436c:	79df883a 	add	r15,r15,r7
    4370:	235b883a 	add	r13,r4,r13
    4374:	9d63383a 	mul	r17,r19,r21
    4378:	4309883a 	add	r4,r8,r12
    437c:	7940022e 	bgeu	r15,r5,4388 <__muldf3+0x43c>
    4380:	01400074 	movhi	r5,1
    4384:	8963883a 	add	r17,r17,r5
    4388:	780a943a 	slli	r5,r15,16
    438c:	91bfffcc 	andi	r6,r18,65535
    4390:	70c7883a 	add	r3,r14,r3
    4394:	298d883a 	add	r6,r5,r6
    4398:	1a8f803a 	cmpltu	r7,r3,r10
    439c:	350b883a 	add	r5,r6,r20
    43a0:	20c7883a 	add	r3,r4,r3
    43a4:	3955883a 	add	r10,r7,r5
    43a8:	1909803a 	cmpltu	r4,r3,r4
    43ac:	6a91883a 	add	r8,r13,r10
    43b0:	780cd43a 	srli	r6,r15,16
    43b4:	2219883a 	add	r12,r4,r8
    43b8:	2d0b803a 	cmpltu	r5,r5,r20
    43bc:	51cf803a 	cmpltu	r7,r10,r7
    43c0:	29ceb03a 	or	r7,r5,r7
    43c4:	4351803a 	cmpltu	r8,r8,r13
    43c8:	610b803a 	cmpltu	r5,r12,r4
    43cc:	4148b03a 	or	r4,r8,r5
    43d0:	398f883a 	add	r7,r7,r6
    43d4:	3909883a 	add	r4,r7,r4
    43d8:	1810927a 	slli	r8,r3,9
    43dc:	2449883a 	add	r4,r4,r17
    43e0:	2008927a 	slli	r4,r4,9
    43e4:	6022d5fa 	srli	r17,r12,23
    43e8:	1806d5fa 	srli	r3,r3,23
    43ec:	4252b03a 	or	r9,r8,r9
    43f0:	600a927a 	slli	r5,r12,9
    43f4:	4810c03a 	cmpne	r8,r9,zero
    43f8:	2462b03a 	or	r17,r4,r17
    43fc:	40c6b03a 	or	r3,r8,r3
    4400:	8900402c 	andhi	r4,r17,256
    4404:	1950b03a 	or	r8,r3,r5
    4408:	20000726 	beq	r4,zero,4428 <__muldf3+0x4dc>
    440c:	4006d07a 	srli	r3,r8,1
    4410:	880497fa 	slli	r2,r17,31
    4414:	4200004c 	andi	r8,r8,1
    4418:	8822d07a 	srli	r17,r17,1
    441c:	1a10b03a 	or	r8,r3,r8
    4420:	1210b03a 	or	r8,r2,r8
    4424:	5805883a 	mov	r2,r11
    4428:	1140ffc4 	addi	r5,r2,1023
    442c:	0140440e 	bge	zero,r5,4540 <__muldf3+0x5f4>
    4430:	40c001cc 	andi	r3,r8,7
    4434:	18000726 	beq	r3,zero,4454 <__muldf3+0x508>
    4438:	40c003cc 	andi	r3,r8,15
    443c:	01000104 	movi	r4,4
    4440:	19000426 	beq	r3,r4,4454 <__muldf3+0x508>
    4444:	4107883a 	add	r3,r8,r4
    4448:	1a11803a 	cmpltu	r8,r3,r8
    444c:	8a23883a 	add	r17,r17,r8
    4450:	1811883a 	mov	r8,r3
    4454:	88c0402c 	andhi	r3,r17,256
    4458:	18000426 	beq	r3,zero,446c <__muldf3+0x520>
    445c:	11410004 	addi	r5,r2,1024
    4460:	00bfc034 	movhi	r2,65280
    4464:	10bfffc4 	addi	r2,r2,-1
    4468:	88a2703a 	and	r17,r17,r2
    446c:	0081ff84 	movi	r2,2046
    4470:	117f6416 	blt	r2,r5,4204 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004204>
    4474:	8828977a 	slli	r20,r17,29
    4478:	4010d0fa 	srli	r8,r8,3
    447c:	8822927a 	slli	r17,r17,9
    4480:	2881ffcc 	andi	r2,r5,2047
    4484:	a228b03a 	or	r20,r20,r8
    4488:	880ad33a 	srli	r5,r17,12
    448c:	b02b883a 	mov	r21,r22
    4490:	003f0d06 	br	40c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040c8>
    4494:	8080022c 	andhi	r2,r16,8
    4498:	10000926 	beq	r2,zero,44c0 <__muldf3+0x574>
    449c:	8880022c 	andhi	r2,r17,8
    44a0:	1000071e 	bne	r2,zero,44c0 <__muldf3+0x574>
    44a4:	00800434 	movhi	r2,16
    44a8:	89400234 	orhi	r5,r17,8
    44ac:	10bfffc4 	addi	r2,r2,-1
    44b0:	b82b883a 	mov	r21,r23
    44b4:	288a703a 	and	r5,r5,r2
    44b8:	4029883a 	mov	r20,r8
    44bc:	003f6806 	br	4260 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004260>
    44c0:	00800434 	movhi	r2,16
    44c4:	81400234 	orhi	r5,r16,8
    44c8:	10bfffc4 	addi	r2,r2,-1
    44cc:	288a703a 	and	r5,r5,r2
    44d0:	003f6306 	br	4260 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004260>
    44d4:	147ff604 	addi	r17,r2,-40
    44d8:	3462983a 	sll	r17,r6,r17
    44dc:	0011883a 	mov	r8,zero
    44e0:	003f4406 	br	41f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041f4>
    44e4:	3009883a 	mov	r4,r6
    44e8:	d9800215 	stw	r6,8(sp)
    44ec:	da400115 	stw	r9,4(sp)
    44f0:	da800015 	stw	r10,0(sp)
    44f4:	00052640 	call	5264 <__clzsi2>
    44f8:	10800804 	addi	r2,r2,32
    44fc:	da800017 	ldw	r10,0(sp)
    4500:	da400117 	ldw	r9,4(sp)
    4504:	d9800217 	ldw	r6,8(sp)
    4508:	003f3006 	br	41cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041cc>
    450c:	143ff604 	addi	r16,r2,-40
    4510:	9c20983a 	sll	r16,r19,r16
    4514:	0029883a 	mov	r20,zero
    4518:	003f1606 	br	4174 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004174>
    451c:	d9800215 	stw	r6,8(sp)
    4520:	d9c00015 	stw	r7,0(sp)
    4524:	da400115 	stw	r9,4(sp)
    4528:	00052640 	call	5264 <__clzsi2>
    452c:	10800804 	addi	r2,r2,32
    4530:	da400117 	ldw	r9,4(sp)
    4534:	d9c00017 	ldw	r7,0(sp)
    4538:	d9800217 	ldw	r6,8(sp)
    453c:	003f0306 	br	414c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700414c>
    4540:	00c00044 	movi	r3,1
    4544:	1947c83a 	sub	r3,r3,r5
    4548:	00800e04 	movi	r2,56
    454c:	10feda16 	blt	r2,r3,40b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040b8>
    4550:	008007c4 	movi	r2,31
    4554:	10c01b16 	blt	r2,r3,45c4 <__muldf3+0x678>
    4558:	00800804 	movi	r2,32
    455c:	10c5c83a 	sub	r2,r2,r3
    4560:	888a983a 	sll	r5,r17,r2
    4564:	40c8d83a 	srl	r4,r8,r3
    4568:	4084983a 	sll	r2,r8,r2
    456c:	88e2d83a 	srl	r17,r17,r3
    4570:	2906b03a 	or	r3,r5,r4
    4574:	1004c03a 	cmpne	r2,r2,zero
    4578:	1886b03a 	or	r3,r3,r2
    457c:	188001cc 	andi	r2,r3,7
    4580:	10000726 	beq	r2,zero,45a0 <__muldf3+0x654>
    4584:	188003cc 	andi	r2,r3,15
    4588:	01000104 	movi	r4,4
    458c:	11000426 	beq	r2,r4,45a0 <__muldf3+0x654>
    4590:	1805883a 	mov	r2,r3
    4594:	10c00104 	addi	r3,r2,4
    4598:	1885803a 	cmpltu	r2,r3,r2
    459c:	88a3883a 	add	r17,r17,r2
    45a0:	8880202c 	andhi	r2,r17,128
    45a4:	10001c26 	beq	r2,zero,4618 <__muldf3+0x6cc>
    45a8:	b02b883a 	mov	r21,r22
    45ac:	00800044 	movi	r2,1
    45b0:	000b883a 	mov	r5,zero
    45b4:	0029883a 	mov	r20,zero
    45b8:	003ec306 	br	40c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040c8>
    45bc:	5805883a 	mov	r2,r11
    45c0:	003f9906 	br	4428 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004428>
    45c4:	00bff844 	movi	r2,-31
    45c8:	1145c83a 	sub	r2,r2,r5
    45cc:	8888d83a 	srl	r4,r17,r2
    45d0:	00800804 	movi	r2,32
    45d4:	18801a26 	beq	r3,r2,4640 <__muldf3+0x6f4>
    45d8:	00801004 	movi	r2,64
    45dc:	10c5c83a 	sub	r2,r2,r3
    45e0:	8884983a 	sll	r2,r17,r2
    45e4:	1204b03a 	or	r2,r2,r8
    45e8:	1004c03a 	cmpne	r2,r2,zero
    45ec:	2084b03a 	or	r2,r4,r2
    45f0:	144001cc 	andi	r17,r2,7
    45f4:	88000d1e 	bne	r17,zero,462c <__muldf3+0x6e0>
    45f8:	000b883a 	mov	r5,zero
    45fc:	1028d0fa 	srli	r20,r2,3
    4600:	b02b883a 	mov	r21,r22
    4604:	0005883a 	mov	r2,zero
    4608:	a468b03a 	or	r20,r20,r17
    460c:	003eae06 	br	40c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040c8>
    4610:	1007883a 	mov	r3,r2
    4614:	0023883a 	mov	r17,zero
    4618:	880a927a 	slli	r5,r17,9
    461c:	1805883a 	mov	r2,r3
    4620:	8822977a 	slli	r17,r17,29
    4624:	280ad33a 	srli	r5,r5,12
    4628:	003ff406 	br	45fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70045fc>
    462c:	10c003cc 	andi	r3,r2,15
    4630:	01000104 	movi	r4,4
    4634:	193ff626 	beq	r3,r4,4610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004610>
    4638:	0023883a 	mov	r17,zero
    463c:	003fd506 	br	4594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004594>
    4640:	0005883a 	mov	r2,zero
    4644:	003fe706 	br	45e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70045e4>
    4648:	00800434 	movhi	r2,16
    464c:	89400234 	orhi	r5,r17,8
    4650:	10bfffc4 	addi	r2,r2,-1
    4654:	b02b883a 	mov	r21,r22
    4658:	288a703a 	and	r5,r5,r2
    465c:	4029883a 	mov	r20,r8
    4660:	003eff06 	br	4260 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004260>

00004664 <__subdf3>:
    4664:	02000434 	movhi	r8,16
    4668:	423fffc4 	addi	r8,r8,-1
    466c:	defffb04 	addi	sp,sp,-20
    4670:	2a14703a 	and	r10,r5,r8
    4674:	3812d53a 	srli	r9,r7,20
    4678:	3a10703a 	and	r8,r7,r8
    467c:	2006d77a 	srli	r3,r4,29
    4680:	3004d77a 	srli	r2,r6,29
    4684:	dc000015 	stw	r16,0(sp)
    4688:	501490fa 	slli	r10,r10,3
    468c:	2820d53a 	srli	r16,r5,20
    4690:	401090fa 	slli	r8,r8,3
    4694:	dc800215 	stw	r18,8(sp)
    4698:	dc400115 	stw	r17,4(sp)
    469c:	dfc00415 	stw	ra,16(sp)
    46a0:	202290fa 	slli	r17,r4,3
    46a4:	dcc00315 	stw	r19,12(sp)
    46a8:	4a41ffcc 	andi	r9,r9,2047
    46ac:	0101ffc4 	movi	r4,2047
    46b0:	2824d7fa 	srli	r18,r5,31
    46b4:	8401ffcc 	andi	r16,r16,2047
    46b8:	50c6b03a 	or	r3,r10,r3
    46bc:	380ed7fa 	srli	r7,r7,31
    46c0:	408ab03a 	or	r5,r8,r2
    46c4:	300c90fa 	slli	r6,r6,3
    46c8:	49009626 	beq	r9,r4,4924 <__subdf3+0x2c0>
    46cc:	39c0005c 	xori	r7,r7,1
    46d0:	8245c83a 	sub	r2,r16,r9
    46d4:	3c807426 	beq	r7,r18,48a8 <__subdf3+0x244>
    46d8:	0080af0e 	bge	zero,r2,4998 <__subdf3+0x334>
    46dc:	48002a1e 	bne	r9,zero,4788 <__subdf3+0x124>
    46e0:	2988b03a 	or	r4,r5,r6
    46e4:	20009a1e 	bne	r4,zero,4950 <__subdf3+0x2ec>
    46e8:	888001cc 	andi	r2,r17,7
    46ec:	10000726 	beq	r2,zero,470c <__subdf3+0xa8>
    46f0:	888003cc 	andi	r2,r17,15
    46f4:	01000104 	movi	r4,4
    46f8:	11000426 	beq	r2,r4,470c <__subdf3+0xa8>
    46fc:	890b883a 	add	r5,r17,r4
    4700:	2c63803a 	cmpltu	r17,r5,r17
    4704:	1c47883a 	add	r3,r3,r17
    4708:	2823883a 	mov	r17,r5
    470c:	1880202c 	andhi	r2,r3,128
    4710:	10005926 	beq	r2,zero,4878 <__subdf3+0x214>
    4714:	84000044 	addi	r16,r16,1
    4718:	0081ffc4 	movi	r2,2047
    471c:	8080be26 	beq	r16,r2,4a18 <__subdf3+0x3b4>
    4720:	017fe034 	movhi	r5,65408
    4724:	297fffc4 	addi	r5,r5,-1
    4728:	1946703a 	and	r3,r3,r5
    472c:	1804977a 	slli	r2,r3,29
    4730:	1806927a 	slli	r3,r3,9
    4734:	8822d0fa 	srli	r17,r17,3
    4738:	8401ffcc 	andi	r16,r16,2047
    473c:	180ad33a 	srli	r5,r3,12
    4740:	9100004c 	andi	r4,r18,1
    4744:	1444b03a 	or	r2,r2,r17
    4748:	80c1ffcc 	andi	r3,r16,2047
    474c:	1820953a 	slli	r16,r3,20
    4750:	20c03fcc 	andi	r3,r4,255
    4754:	180897fa 	slli	r4,r3,31
    4758:	00c00434 	movhi	r3,16
    475c:	18ffffc4 	addi	r3,r3,-1
    4760:	28c6703a 	and	r3,r5,r3
    4764:	1c06b03a 	or	r3,r3,r16
    4768:	1906b03a 	or	r3,r3,r4
    476c:	dfc00417 	ldw	ra,16(sp)
    4770:	dcc00317 	ldw	r19,12(sp)
    4774:	dc800217 	ldw	r18,8(sp)
    4778:	dc400117 	ldw	r17,4(sp)
    477c:	dc000017 	ldw	r16,0(sp)
    4780:	dec00504 	addi	sp,sp,20
    4784:	f800283a 	ret
    4788:	0101ffc4 	movi	r4,2047
    478c:	813fd626 	beq	r16,r4,46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4790:	29402034 	orhi	r5,r5,128
    4794:	01000e04 	movi	r4,56
    4798:	2080a316 	blt	r4,r2,4a28 <__subdf3+0x3c4>
    479c:	010007c4 	movi	r4,31
    47a0:	2080c616 	blt	r4,r2,4abc <__subdf3+0x458>
    47a4:	01000804 	movi	r4,32
    47a8:	2089c83a 	sub	r4,r4,r2
    47ac:	2910983a 	sll	r8,r5,r4
    47b0:	308ed83a 	srl	r7,r6,r2
    47b4:	3108983a 	sll	r4,r6,r4
    47b8:	2884d83a 	srl	r2,r5,r2
    47bc:	41ccb03a 	or	r6,r8,r7
    47c0:	2008c03a 	cmpne	r4,r4,zero
    47c4:	310cb03a 	or	r6,r6,r4
    47c8:	898dc83a 	sub	r6,r17,r6
    47cc:	89a3803a 	cmpltu	r17,r17,r6
    47d0:	1887c83a 	sub	r3,r3,r2
    47d4:	1c47c83a 	sub	r3,r3,r17
    47d8:	3023883a 	mov	r17,r6
    47dc:	1880202c 	andhi	r2,r3,128
    47e0:	10002326 	beq	r2,zero,4870 <__subdf3+0x20c>
    47e4:	04c02034 	movhi	r19,128
    47e8:	9cffffc4 	addi	r19,r19,-1
    47ec:	1ce6703a 	and	r19,r3,r19
    47f0:	98007a26 	beq	r19,zero,49dc <__subdf3+0x378>
    47f4:	9809883a 	mov	r4,r19
    47f8:	00052640 	call	5264 <__clzsi2>
    47fc:	113ffe04 	addi	r4,r2,-8
    4800:	00c007c4 	movi	r3,31
    4804:	19007b16 	blt	r3,r4,49f4 <__subdf3+0x390>
    4808:	00800804 	movi	r2,32
    480c:	1105c83a 	sub	r2,r2,r4
    4810:	8884d83a 	srl	r2,r17,r2
    4814:	9906983a 	sll	r3,r19,r4
    4818:	8922983a 	sll	r17,r17,r4
    481c:	10c4b03a 	or	r2,r2,r3
    4820:	24007816 	blt	r4,r16,4a04 <__subdf3+0x3a0>
    4824:	2421c83a 	sub	r16,r4,r16
    4828:	80c00044 	addi	r3,r16,1
    482c:	010007c4 	movi	r4,31
    4830:	20c09516 	blt	r4,r3,4a88 <__subdf3+0x424>
    4834:	01400804 	movi	r5,32
    4838:	28cbc83a 	sub	r5,r5,r3
    483c:	88c8d83a 	srl	r4,r17,r3
    4840:	8962983a 	sll	r17,r17,r5
    4844:	114a983a 	sll	r5,r2,r5
    4848:	10c6d83a 	srl	r3,r2,r3
    484c:	8804c03a 	cmpne	r2,r17,zero
    4850:	290ab03a 	or	r5,r5,r4
    4854:	28a2b03a 	or	r17,r5,r2
    4858:	0021883a 	mov	r16,zero
    485c:	003fa206 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4860:	2090b03a 	or	r8,r4,r2
    4864:	40018e26 	beq	r8,zero,4ea0 <__subdf3+0x83c>
    4868:	1007883a 	mov	r3,r2
    486c:	2023883a 	mov	r17,r4
    4870:	888001cc 	andi	r2,r17,7
    4874:	103f9e1e 	bne	r2,zero,46f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046f0>
    4878:	1804977a 	slli	r2,r3,29
    487c:	8822d0fa 	srli	r17,r17,3
    4880:	1810d0fa 	srli	r8,r3,3
    4884:	9100004c 	andi	r4,r18,1
    4888:	1444b03a 	or	r2,r2,r17
    488c:	00c1ffc4 	movi	r3,2047
    4890:	80c02826 	beq	r16,r3,4934 <__subdf3+0x2d0>
    4894:	01400434 	movhi	r5,16
    4898:	297fffc4 	addi	r5,r5,-1
    489c:	80e0703a 	and	r16,r16,r3
    48a0:	414a703a 	and	r5,r8,r5
    48a4:	003fa806 	br	4748 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004748>
    48a8:	0080630e 	bge	zero,r2,4a38 <__subdf3+0x3d4>
    48ac:	48003026 	beq	r9,zero,4970 <__subdf3+0x30c>
    48b0:	0101ffc4 	movi	r4,2047
    48b4:	813f8c26 	beq	r16,r4,46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    48b8:	29402034 	orhi	r5,r5,128
    48bc:	01000e04 	movi	r4,56
    48c0:	2080a90e 	bge	r4,r2,4b68 <__subdf3+0x504>
    48c4:	298cb03a 	or	r6,r5,r6
    48c8:	3012c03a 	cmpne	r9,r6,zero
    48cc:	0005883a 	mov	r2,zero
    48d0:	4c53883a 	add	r9,r9,r17
    48d4:	4c63803a 	cmpltu	r17,r9,r17
    48d8:	10c7883a 	add	r3,r2,r3
    48dc:	88c7883a 	add	r3,r17,r3
    48e0:	4823883a 	mov	r17,r9
    48e4:	1880202c 	andhi	r2,r3,128
    48e8:	1000d026 	beq	r2,zero,4c2c <__subdf3+0x5c8>
    48ec:	84000044 	addi	r16,r16,1
    48f0:	0081ffc4 	movi	r2,2047
    48f4:	8080fe26 	beq	r16,r2,4cf0 <__subdf3+0x68c>
    48f8:	00bfe034 	movhi	r2,65408
    48fc:	10bfffc4 	addi	r2,r2,-1
    4900:	1886703a 	and	r3,r3,r2
    4904:	880ad07a 	srli	r5,r17,1
    4908:	180497fa 	slli	r2,r3,31
    490c:	8900004c 	andi	r4,r17,1
    4910:	2922b03a 	or	r17,r5,r4
    4914:	1806d07a 	srli	r3,r3,1
    4918:	1462b03a 	or	r17,r2,r17
    491c:	3825883a 	mov	r18,r7
    4920:	003f7106 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4924:	2984b03a 	or	r2,r5,r6
    4928:	103f6826 	beq	r2,zero,46cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046cc>
    492c:	39c03fcc 	andi	r7,r7,255
    4930:	003f6706 	br	46d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046d0>
    4934:	4086b03a 	or	r3,r8,r2
    4938:	18015226 	beq	r3,zero,4e84 <__subdf3+0x820>
    493c:	00c00434 	movhi	r3,16
    4940:	41400234 	orhi	r5,r8,8
    4944:	18ffffc4 	addi	r3,r3,-1
    4948:	28ca703a 	and	r5,r5,r3
    494c:	003f7e06 	br	4748 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004748>
    4950:	10bfffc4 	addi	r2,r2,-1
    4954:	1000491e 	bne	r2,zero,4a7c <__subdf3+0x418>
    4958:	898fc83a 	sub	r7,r17,r6
    495c:	89e3803a 	cmpltu	r17,r17,r7
    4960:	1947c83a 	sub	r3,r3,r5
    4964:	1c47c83a 	sub	r3,r3,r17
    4968:	3823883a 	mov	r17,r7
    496c:	003f9b06 	br	47dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70047dc>
    4970:	2988b03a 	or	r4,r5,r6
    4974:	203f5c26 	beq	r4,zero,46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4978:	10bfffc4 	addi	r2,r2,-1
    497c:	1000931e 	bne	r2,zero,4bcc <__subdf3+0x568>
    4980:	898d883a 	add	r6,r17,r6
    4984:	3463803a 	cmpltu	r17,r6,r17
    4988:	1947883a 	add	r3,r3,r5
    498c:	88c7883a 	add	r3,r17,r3
    4990:	3023883a 	mov	r17,r6
    4994:	003fd306 	br	48e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048e4>
    4998:	1000541e 	bne	r2,zero,4aec <__subdf3+0x488>
    499c:	80800044 	addi	r2,r16,1
    49a0:	1081ffcc 	andi	r2,r2,2047
    49a4:	01000044 	movi	r4,1
    49a8:	2080a20e 	bge	r4,r2,4c34 <__subdf3+0x5d0>
    49ac:	8989c83a 	sub	r4,r17,r6
    49b0:	8905803a 	cmpltu	r2,r17,r4
    49b4:	1967c83a 	sub	r19,r3,r5
    49b8:	98a7c83a 	sub	r19,r19,r2
    49bc:	9880202c 	andhi	r2,r19,128
    49c0:	10006326 	beq	r2,zero,4b50 <__subdf3+0x4ec>
    49c4:	3463c83a 	sub	r17,r6,r17
    49c8:	28c7c83a 	sub	r3,r5,r3
    49cc:	344d803a 	cmpltu	r6,r6,r17
    49d0:	19a7c83a 	sub	r19,r3,r6
    49d4:	3825883a 	mov	r18,r7
    49d8:	983f861e 	bne	r19,zero,47f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70047f4>
    49dc:	8809883a 	mov	r4,r17
    49e0:	00052640 	call	5264 <__clzsi2>
    49e4:	10800804 	addi	r2,r2,32
    49e8:	113ffe04 	addi	r4,r2,-8
    49ec:	00c007c4 	movi	r3,31
    49f0:	193f850e 	bge	r3,r4,4808 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004808>
    49f4:	10bff604 	addi	r2,r2,-40
    49f8:	8884983a 	sll	r2,r17,r2
    49fc:	0023883a 	mov	r17,zero
    4a00:	243f880e 	bge	r4,r16,4824 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004824>
    4a04:	00ffe034 	movhi	r3,65408
    4a08:	18ffffc4 	addi	r3,r3,-1
    4a0c:	8121c83a 	sub	r16,r16,r4
    4a10:	10c6703a 	and	r3,r2,r3
    4a14:	003f3406 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4a18:	9100004c 	andi	r4,r18,1
    4a1c:	000b883a 	mov	r5,zero
    4a20:	0005883a 	mov	r2,zero
    4a24:	003f4806 	br	4748 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004748>
    4a28:	298cb03a 	or	r6,r5,r6
    4a2c:	300cc03a 	cmpne	r6,r6,zero
    4a30:	0005883a 	mov	r2,zero
    4a34:	003f6406 	br	47c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70047c8>
    4a38:	10009a1e 	bne	r2,zero,4ca4 <__subdf3+0x640>
    4a3c:	82400044 	addi	r9,r16,1
    4a40:	4881ffcc 	andi	r2,r9,2047
    4a44:	02800044 	movi	r10,1
    4a48:	5080670e 	bge	r10,r2,4be8 <__subdf3+0x584>
    4a4c:	0081ffc4 	movi	r2,2047
    4a50:	4880af26 	beq	r9,r2,4d10 <__subdf3+0x6ac>
    4a54:	898d883a 	add	r6,r17,r6
    4a58:	1945883a 	add	r2,r3,r5
    4a5c:	3447803a 	cmpltu	r3,r6,r17
    4a60:	1887883a 	add	r3,r3,r2
    4a64:	182297fa 	slli	r17,r3,31
    4a68:	300cd07a 	srli	r6,r6,1
    4a6c:	1806d07a 	srli	r3,r3,1
    4a70:	4821883a 	mov	r16,r9
    4a74:	89a2b03a 	or	r17,r17,r6
    4a78:	003f1b06 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4a7c:	0101ffc4 	movi	r4,2047
    4a80:	813f441e 	bne	r16,r4,4794 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004794>
    4a84:	003f1806 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4a88:	843ff844 	addi	r16,r16,-31
    4a8c:	01400804 	movi	r5,32
    4a90:	1408d83a 	srl	r4,r2,r16
    4a94:	19405026 	beq	r3,r5,4bd8 <__subdf3+0x574>
    4a98:	01401004 	movi	r5,64
    4a9c:	28c7c83a 	sub	r3,r5,r3
    4aa0:	10c4983a 	sll	r2,r2,r3
    4aa4:	88a2b03a 	or	r17,r17,r2
    4aa8:	8822c03a 	cmpne	r17,r17,zero
    4aac:	2462b03a 	or	r17,r4,r17
    4ab0:	0007883a 	mov	r3,zero
    4ab4:	0021883a 	mov	r16,zero
    4ab8:	003f6d06 	br	4870 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004870>
    4abc:	11fff804 	addi	r7,r2,-32
    4ac0:	01000804 	movi	r4,32
    4ac4:	29ced83a 	srl	r7,r5,r7
    4ac8:	11004526 	beq	r2,r4,4be0 <__subdf3+0x57c>
    4acc:	01001004 	movi	r4,64
    4ad0:	2089c83a 	sub	r4,r4,r2
    4ad4:	2904983a 	sll	r2,r5,r4
    4ad8:	118cb03a 	or	r6,r2,r6
    4adc:	300cc03a 	cmpne	r6,r6,zero
    4ae0:	398cb03a 	or	r6,r7,r6
    4ae4:	0005883a 	mov	r2,zero
    4ae8:	003f3706 	br	47c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70047c8>
    4aec:	80002a26 	beq	r16,zero,4b98 <__subdf3+0x534>
    4af0:	0101ffc4 	movi	r4,2047
    4af4:	49006626 	beq	r9,r4,4c90 <__subdf3+0x62c>
    4af8:	0085c83a 	sub	r2,zero,r2
    4afc:	18c02034 	orhi	r3,r3,128
    4b00:	01000e04 	movi	r4,56
    4b04:	20807e16 	blt	r4,r2,4d00 <__subdf3+0x69c>
    4b08:	010007c4 	movi	r4,31
    4b0c:	2080e716 	blt	r4,r2,4eac <__subdf3+0x848>
    4b10:	01000804 	movi	r4,32
    4b14:	2089c83a 	sub	r4,r4,r2
    4b18:	1914983a 	sll	r10,r3,r4
    4b1c:	8890d83a 	srl	r8,r17,r2
    4b20:	8908983a 	sll	r4,r17,r4
    4b24:	1884d83a 	srl	r2,r3,r2
    4b28:	5222b03a 	or	r17,r10,r8
    4b2c:	2006c03a 	cmpne	r3,r4,zero
    4b30:	88e2b03a 	or	r17,r17,r3
    4b34:	3463c83a 	sub	r17,r6,r17
    4b38:	2885c83a 	sub	r2,r5,r2
    4b3c:	344d803a 	cmpltu	r6,r6,r17
    4b40:	1187c83a 	sub	r3,r2,r6
    4b44:	4821883a 	mov	r16,r9
    4b48:	3825883a 	mov	r18,r7
    4b4c:	003f2306 	br	47dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70047dc>
    4b50:	24d0b03a 	or	r8,r4,r19
    4b54:	40001b1e 	bne	r8,zero,4bc4 <__subdf3+0x560>
    4b58:	0005883a 	mov	r2,zero
    4b5c:	0009883a 	mov	r4,zero
    4b60:	0021883a 	mov	r16,zero
    4b64:	003f4906 	br	488c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700488c>
    4b68:	010007c4 	movi	r4,31
    4b6c:	20803a16 	blt	r4,r2,4c58 <__subdf3+0x5f4>
    4b70:	01000804 	movi	r4,32
    4b74:	2089c83a 	sub	r4,r4,r2
    4b78:	2912983a 	sll	r9,r5,r4
    4b7c:	3090d83a 	srl	r8,r6,r2
    4b80:	3108983a 	sll	r4,r6,r4
    4b84:	2884d83a 	srl	r2,r5,r2
    4b88:	4a12b03a 	or	r9,r9,r8
    4b8c:	2008c03a 	cmpne	r4,r4,zero
    4b90:	4912b03a 	or	r9,r9,r4
    4b94:	003f4e06 	br	48d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048d0>
    4b98:	1c48b03a 	or	r4,r3,r17
    4b9c:	20003c26 	beq	r4,zero,4c90 <__subdf3+0x62c>
    4ba0:	0084303a 	nor	r2,zero,r2
    4ba4:	1000381e 	bne	r2,zero,4c88 <__subdf3+0x624>
    4ba8:	3463c83a 	sub	r17,r6,r17
    4bac:	28c5c83a 	sub	r2,r5,r3
    4bb0:	344d803a 	cmpltu	r6,r6,r17
    4bb4:	1187c83a 	sub	r3,r2,r6
    4bb8:	4821883a 	mov	r16,r9
    4bbc:	3825883a 	mov	r18,r7
    4bc0:	003f0606 	br	47dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70047dc>
    4bc4:	2023883a 	mov	r17,r4
    4bc8:	003f0906 	br	47f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70047f0>
    4bcc:	0101ffc4 	movi	r4,2047
    4bd0:	813f3a1e 	bne	r16,r4,48bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048bc>
    4bd4:	003ec406 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4bd8:	0005883a 	mov	r2,zero
    4bdc:	003fb106 	br	4aa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004aa4>
    4be0:	0005883a 	mov	r2,zero
    4be4:	003fbc06 	br	4ad8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ad8>
    4be8:	1c44b03a 	or	r2,r3,r17
    4bec:	80008e1e 	bne	r16,zero,4e28 <__subdf3+0x7c4>
    4bf0:	1000c826 	beq	r2,zero,4f14 <__subdf3+0x8b0>
    4bf4:	2984b03a 	or	r2,r5,r6
    4bf8:	103ebb26 	beq	r2,zero,46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4bfc:	8989883a 	add	r4,r17,r6
    4c00:	1945883a 	add	r2,r3,r5
    4c04:	2447803a 	cmpltu	r3,r4,r17
    4c08:	1887883a 	add	r3,r3,r2
    4c0c:	1880202c 	andhi	r2,r3,128
    4c10:	2023883a 	mov	r17,r4
    4c14:	103f1626 	beq	r2,zero,4870 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004870>
    4c18:	00bfe034 	movhi	r2,65408
    4c1c:	10bfffc4 	addi	r2,r2,-1
    4c20:	5021883a 	mov	r16,r10
    4c24:	1886703a 	and	r3,r3,r2
    4c28:	003eaf06 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4c2c:	3825883a 	mov	r18,r7
    4c30:	003f0f06 	br	4870 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004870>
    4c34:	1c44b03a 	or	r2,r3,r17
    4c38:	8000251e 	bne	r16,zero,4cd0 <__subdf3+0x66c>
    4c3c:	1000661e 	bne	r2,zero,4dd8 <__subdf3+0x774>
    4c40:	2990b03a 	or	r8,r5,r6
    4c44:	40009626 	beq	r8,zero,4ea0 <__subdf3+0x83c>
    4c48:	2807883a 	mov	r3,r5
    4c4c:	3023883a 	mov	r17,r6
    4c50:	3825883a 	mov	r18,r7
    4c54:	003ea406 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4c58:	127ff804 	addi	r9,r2,-32
    4c5c:	01000804 	movi	r4,32
    4c60:	2a52d83a 	srl	r9,r5,r9
    4c64:	11008c26 	beq	r2,r4,4e98 <__subdf3+0x834>
    4c68:	01001004 	movi	r4,64
    4c6c:	2085c83a 	sub	r2,r4,r2
    4c70:	2884983a 	sll	r2,r5,r2
    4c74:	118cb03a 	or	r6,r2,r6
    4c78:	300cc03a 	cmpne	r6,r6,zero
    4c7c:	4992b03a 	or	r9,r9,r6
    4c80:	0005883a 	mov	r2,zero
    4c84:	003f1206 	br	48d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048d0>
    4c88:	0101ffc4 	movi	r4,2047
    4c8c:	493f9c1e 	bne	r9,r4,4b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b00>
    4c90:	2807883a 	mov	r3,r5
    4c94:	3023883a 	mov	r17,r6
    4c98:	4821883a 	mov	r16,r9
    4c9c:	3825883a 	mov	r18,r7
    4ca0:	003e9106 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4ca4:	80001f1e 	bne	r16,zero,4d24 <__subdf3+0x6c0>
    4ca8:	1c48b03a 	or	r4,r3,r17
    4cac:	20005a26 	beq	r4,zero,4e18 <__subdf3+0x7b4>
    4cb0:	0084303a 	nor	r2,zero,r2
    4cb4:	1000561e 	bne	r2,zero,4e10 <__subdf3+0x7ac>
    4cb8:	89a3883a 	add	r17,r17,r6
    4cbc:	1945883a 	add	r2,r3,r5
    4cc0:	898d803a 	cmpltu	r6,r17,r6
    4cc4:	3087883a 	add	r3,r6,r2
    4cc8:	4821883a 	mov	r16,r9
    4ccc:	003f0506 	br	48e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048e4>
    4cd0:	10002b1e 	bne	r2,zero,4d80 <__subdf3+0x71c>
    4cd4:	2984b03a 	or	r2,r5,r6
    4cd8:	10008026 	beq	r2,zero,4edc <__subdf3+0x878>
    4cdc:	2807883a 	mov	r3,r5
    4ce0:	3023883a 	mov	r17,r6
    4ce4:	3825883a 	mov	r18,r7
    4ce8:	0401ffc4 	movi	r16,2047
    4cec:	003e7e06 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4cf0:	3809883a 	mov	r4,r7
    4cf4:	0011883a 	mov	r8,zero
    4cf8:	0005883a 	mov	r2,zero
    4cfc:	003ee306 	br	488c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700488c>
    4d00:	1c62b03a 	or	r17,r3,r17
    4d04:	8822c03a 	cmpne	r17,r17,zero
    4d08:	0005883a 	mov	r2,zero
    4d0c:	003f8906 	br	4b34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b34>
    4d10:	3809883a 	mov	r4,r7
    4d14:	4821883a 	mov	r16,r9
    4d18:	0011883a 	mov	r8,zero
    4d1c:	0005883a 	mov	r2,zero
    4d20:	003eda06 	br	488c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700488c>
    4d24:	0101ffc4 	movi	r4,2047
    4d28:	49003b26 	beq	r9,r4,4e18 <__subdf3+0x7b4>
    4d2c:	0085c83a 	sub	r2,zero,r2
    4d30:	18c02034 	orhi	r3,r3,128
    4d34:	01000e04 	movi	r4,56
    4d38:	20806e16 	blt	r4,r2,4ef4 <__subdf3+0x890>
    4d3c:	010007c4 	movi	r4,31
    4d40:	20807716 	blt	r4,r2,4f20 <__subdf3+0x8bc>
    4d44:	01000804 	movi	r4,32
    4d48:	2089c83a 	sub	r4,r4,r2
    4d4c:	1914983a 	sll	r10,r3,r4
    4d50:	8890d83a 	srl	r8,r17,r2
    4d54:	8908983a 	sll	r4,r17,r4
    4d58:	1884d83a 	srl	r2,r3,r2
    4d5c:	5222b03a 	or	r17,r10,r8
    4d60:	2006c03a 	cmpne	r3,r4,zero
    4d64:	88e2b03a 	or	r17,r17,r3
    4d68:	89a3883a 	add	r17,r17,r6
    4d6c:	1145883a 	add	r2,r2,r5
    4d70:	898d803a 	cmpltu	r6,r17,r6
    4d74:	3087883a 	add	r3,r6,r2
    4d78:	4821883a 	mov	r16,r9
    4d7c:	003ed906 	br	48e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048e4>
    4d80:	2984b03a 	or	r2,r5,r6
    4d84:	10004226 	beq	r2,zero,4e90 <__subdf3+0x82c>
    4d88:	1808d0fa 	srli	r4,r3,3
    4d8c:	8822d0fa 	srli	r17,r17,3
    4d90:	1806977a 	slli	r3,r3,29
    4d94:	2080022c 	andhi	r2,r4,8
    4d98:	1c62b03a 	or	r17,r3,r17
    4d9c:	10000826 	beq	r2,zero,4dc0 <__subdf3+0x75c>
    4da0:	2812d0fa 	srli	r9,r5,3
    4da4:	4880022c 	andhi	r2,r9,8
    4da8:	1000051e 	bne	r2,zero,4dc0 <__subdf3+0x75c>
    4dac:	300cd0fa 	srli	r6,r6,3
    4db0:	2804977a 	slli	r2,r5,29
    4db4:	4809883a 	mov	r4,r9
    4db8:	3825883a 	mov	r18,r7
    4dbc:	11a2b03a 	or	r17,r2,r6
    4dc0:	8806d77a 	srli	r3,r17,29
    4dc4:	200890fa 	slli	r4,r4,3
    4dc8:	882290fa 	slli	r17,r17,3
    4dcc:	0401ffc4 	movi	r16,2047
    4dd0:	1906b03a 	or	r3,r3,r4
    4dd4:	003e4406 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4dd8:	2984b03a 	or	r2,r5,r6
    4ddc:	103e4226 	beq	r2,zero,46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4de0:	8989c83a 	sub	r4,r17,r6
    4de4:	8911803a 	cmpltu	r8,r17,r4
    4de8:	1945c83a 	sub	r2,r3,r5
    4dec:	1205c83a 	sub	r2,r2,r8
    4df0:	1200202c 	andhi	r8,r2,128
    4df4:	403e9a26 	beq	r8,zero,4860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004860>
    4df8:	3463c83a 	sub	r17,r6,r17
    4dfc:	28c5c83a 	sub	r2,r5,r3
    4e00:	344d803a 	cmpltu	r6,r6,r17
    4e04:	1187c83a 	sub	r3,r2,r6
    4e08:	3825883a 	mov	r18,r7
    4e0c:	003e3606 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4e10:	0101ffc4 	movi	r4,2047
    4e14:	493fc71e 	bne	r9,r4,4d34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004d34>
    4e18:	2807883a 	mov	r3,r5
    4e1c:	3023883a 	mov	r17,r6
    4e20:	4821883a 	mov	r16,r9
    4e24:	003e3006 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4e28:	10003626 	beq	r2,zero,4f04 <__subdf3+0x8a0>
    4e2c:	2984b03a 	or	r2,r5,r6
    4e30:	10001726 	beq	r2,zero,4e90 <__subdf3+0x82c>
    4e34:	1808d0fa 	srli	r4,r3,3
    4e38:	8822d0fa 	srli	r17,r17,3
    4e3c:	1806977a 	slli	r3,r3,29
    4e40:	2080022c 	andhi	r2,r4,8
    4e44:	1c62b03a 	or	r17,r3,r17
    4e48:	10000726 	beq	r2,zero,4e68 <__subdf3+0x804>
    4e4c:	2812d0fa 	srli	r9,r5,3
    4e50:	4880022c 	andhi	r2,r9,8
    4e54:	1000041e 	bne	r2,zero,4e68 <__subdf3+0x804>
    4e58:	300cd0fa 	srli	r6,r6,3
    4e5c:	2804977a 	slli	r2,r5,29
    4e60:	4809883a 	mov	r4,r9
    4e64:	11a2b03a 	or	r17,r2,r6
    4e68:	8806d77a 	srli	r3,r17,29
    4e6c:	200890fa 	slli	r4,r4,3
    4e70:	882290fa 	slli	r17,r17,3
    4e74:	3825883a 	mov	r18,r7
    4e78:	1906b03a 	or	r3,r3,r4
    4e7c:	0401ffc4 	movi	r16,2047
    4e80:	003e1906 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4e84:	000b883a 	mov	r5,zero
    4e88:	0005883a 	mov	r2,zero
    4e8c:	003e2e06 	br	4748 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004748>
    4e90:	0401ffc4 	movi	r16,2047
    4e94:	003e1406 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4e98:	0005883a 	mov	r2,zero
    4e9c:	003f7506 	br	4c74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004c74>
    4ea0:	0005883a 	mov	r2,zero
    4ea4:	0009883a 	mov	r4,zero
    4ea8:	003e7806 	br	488c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700488c>
    4eac:	123ff804 	addi	r8,r2,-32
    4eb0:	01000804 	movi	r4,32
    4eb4:	1a10d83a 	srl	r8,r3,r8
    4eb8:	11002526 	beq	r2,r4,4f50 <__subdf3+0x8ec>
    4ebc:	01001004 	movi	r4,64
    4ec0:	2085c83a 	sub	r2,r4,r2
    4ec4:	1884983a 	sll	r2,r3,r2
    4ec8:	1444b03a 	or	r2,r2,r17
    4ecc:	1004c03a 	cmpne	r2,r2,zero
    4ed0:	40a2b03a 	or	r17,r8,r2
    4ed4:	0005883a 	mov	r2,zero
    4ed8:	003f1606 	br	4b34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b34>
    4edc:	02000434 	movhi	r8,16
    4ee0:	0009883a 	mov	r4,zero
    4ee4:	423fffc4 	addi	r8,r8,-1
    4ee8:	00bfffc4 	movi	r2,-1
    4eec:	0401ffc4 	movi	r16,2047
    4ef0:	003e6606 	br	488c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700488c>
    4ef4:	1c62b03a 	or	r17,r3,r17
    4ef8:	8822c03a 	cmpne	r17,r17,zero
    4efc:	0005883a 	mov	r2,zero
    4f00:	003f9906 	br	4d68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004d68>
    4f04:	2807883a 	mov	r3,r5
    4f08:	3023883a 	mov	r17,r6
    4f0c:	0401ffc4 	movi	r16,2047
    4f10:	003df506 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4f14:	2807883a 	mov	r3,r5
    4f18:	3023883a 	mov	r17,r6
    4f1c:	003df206 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4f20:	123ff804 	addi	r8,r2,-32
    4f24:	01000804 	movi	r4,32
    4f28:	1a10d83a 	srl	r8,r3,r8
    4f2c:	11000a26 	beq	r2,r4,4f58 <__subdf3+0x8f4>
    4f30:	01001004 	movi	r4,64
    4f34:	2085c83a 	sub	r2,r4,r2
    4f38:	1884983a 	sll	r2,r3,r2
    4f3c:	1444b03a 	or	r2,r2,r17
    4f40:	1004c03a 	cmpne	r2,r2,zero
    4f44:	40a2b03a 	or	r17,r8,r2
    4f48:	0005883a 	mov	r2,zero
    4f4c:	003f8606 	br	4d68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004d68>
    4f50:	0005883a 	mov	r2,zero
    4f54:	003fdc06 	br	4ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ec8>
    4f58:	0005883a 	mov	r2,zero
    4f5c:	003ff706 	br	4f3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f3c>

00004f60 <__fixdfsi>:
    4f60:	280cd53a 	srli	r6,r5,20
    4f64:	00c00434 	movhi	r3,16
    4f68:	18ffffc4 	addi	r3,r3,-1
    4f6c:	3181ffcc 	andi	r6,r6,2047
    4f70:	01c0ff84 	movi	r7,1022
    4f74:	28c6703a 	and	r3,r5,r3
    4f78:	280ad7fa 	srli	r5,r5,31
    4f7c:	3980120e 	bge	r7,r6,4fc8 <__fixdfsi+0x68>
    4f80:	00810744 	movi	r2,1053
    4f84:	11800c16 	blt	r2,r6,4fb8 <__fixdfsi+0x58>
    4f88:	00810cc4 	movi	r2,1075
    4f8c:	1185c83a 	sub	r2,r2,r6
    4f90:	01c007c4 	movi	r7,31
    4f94:	18c00434 	orhi	r3,r3,16
    4f98:	38800d16 	blt	r7,r2,4fd0 <__fixdfsi+0x70>
    4f9c:	31befb44 	addi	r6,r6,-1043
    4fa0:	2084d83a 	srl	r2,r4,r2
    4fa4:	1986983a 	sll	r3,r3,r6
    4fa8:	1884b03a 	or	r2,r3,r2
    4fac:	28000726 	beq	r5,zero,4fcc <__fixdfsi+0x6c>
    4fb0:	0085c83a 	sub	r2,zero,r2
    4fb4:	f800283a 	ret
    4fb8:	00a00034 	movhi	r2,32768
    4fbc:	10bfffc4 	addi	r2,r2,-1
    4fc0:	2885883a 	add	r2,r5,r2
    4fc4:	f800283a 	ret
    4fc8:	0005883a 	mov	r2,zero
    4fcc:	f800283a 	ret
    4fd0:	008104c4 	movi	r2,1043
    4fd4:	1185c83a 	sub	r2,r2,r6
    4fd8:	1884d83a 	srl	r2,r3,r2
    4fdc:	003ff306 	br	4fac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004fac>

00004fe0 <__floatsidf>:
    4fe0:	defffd04 	addi	sp,sp,-12
    4fe4:	dfc00215 	stw	ra,8(sp)
    4fe8:	dc400115 	stw	r17,4(sp)
    4fec:	dc000015 	stw	r16,0(sp)
    4ff0:	20002b26 	beq	r4,zero,50a0 <__floatsidf+0xc0>
    4ff4:	2023883a 	mov	r17,r4
    4ff8:	2020d7fa 	srli	r16,r4,31
    4ffc:	20002d16 	blt	r4,zero,50b4 <__floatsidf+0xd4>
    5000:	8809883a 	mov	r4,r17
    5004:	00052640 	call	5264 <__clzsi2>
    5008:	01410784 	movi	r5,1054
    500c:	288bc83a 	sub	r5,r5,r2
    5010:	01010cc4 	movi	r4,1075
    5014:	2149c83a 	sub	r4,r4,r5
    5018:	00c007c4 	movi	r3,31
    501c:	1900160e 	bge	r3,r4,5078 <__floatsidf+0x98>
    5020:	00c104c4 	movi	r3,1043
    5024:	1947c83a 	sub	r3,r3,r5
    5028:	88c6983a 	sll	r3,r17,r3
    502c:	00800434 	movhi	r2,16
    5030:	10bfffc4 	addi	r2,r2,-1
    5034:	1886703a 	and	r3,r3,r2
    5038:	2941ffcc 	andi	r5,r5,2047
    503c:	800d883a 	mov	r6,r16
    5040:	0005883a 	mov	r2,zero
    5044:	280a953a 	slli	r5,r5,20
    5048:	31803fcc 	andi	r6,r6,255
    504c:	01000434 	movhi	r4,16
    5050:	300c97fa 	slli	r6,r6,31
    5054:	213fffc4 	addi	r4,r4,-1
    5058:	1906703a 	and	r3,r3,r4
    505c:	1946b03a 	or	r3,r3,r5
    5060:	1986b03a 	or	r3,r3,r6
    5064:	dfc00217 	ldw	ra,8(sp)
    5068:	dc400117 	ldw	r17,4(sp)
    506c:	dc000017 	ldw	r16,0(sp)
    5070:	dec00304 	addi	sp,sp,12
    5074:	f800283a 	ret
    5078:	00c002c4 	movi	r3,11
    507c:	1887c83a 	sub	r3,r3,r2
    5080:	88c6d83a 	srl	r3,r17,r3
    5084:	8904983a 	sll	r2,r17,r4
    5088:	01000434 	movhi	r4,16
    508c:	213fffc4 	addi	r4,r4,-1
    5090:	2941ffcc 	andi	r5,r5,2047
    5094:	1906703a 	and	r3,r3,r4
    5098:	800d883a 	mov	r6,r16
    509c:	003fe906 	br	5044 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005044>
    50a0:	000d883a 	mov	r6,zero
    50a4:	000b883a 	mov	r5,zero
    50a8:	0007883a 	mov	r3,zero
    50ac:	0005883a 	mov	r2,zero
    50b0:	003fe406 	br	5044 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005044>
    50b4:	0123c83a 	sub	r17,zero,r4
    50b8:	003fd106 	br	5000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005000>

000050bc <__truncdfsf2>:
    50bc:	2810d53a 	srli	r8,r5,20
    50c0:	01c00434 	movhi	r7,16
    50c4:	39ffffc4 	addi	r7,r7,-1
    50c8:	29ce703a 	and	r7,r5,r7
    50cc:	4201ffcc 	andi	r8,r8,2047
    50d0:	380e90fa 	slli	r7,r7,3
    50d4:	200cd77a 	srli	r6,r4,29
    50d8:	42400044 	addi	r9,r8,1
    50dc:	4a41ffcc 	andi	r9,r9,2047
    50e0:	00c00044 	movi	r3,1
    50e4:	280ad7fa 	srli	r5,r5,31
    50e8:	31ceb03a 	or	r7,r6,r7
    50ec:	200490fa 	slli	r2,r4,3
    50f0:	1a40230e 	bge	r3,r9,5180 <__truncdfsf2+0xc4>
    50f4:	40ff2004 	addi	r3,r8,-896
    50f8:	01803f84 	movi	r6,254
    50fc:	30c01516 	blt	r6,r3,5154 <__truncdfsf2+0x98>
    5100:	00c0380e 	bge	zero,r3,51e4 <__truncdfsf2+0x128>
    5104:	200c91ba 	slli	r6,r4,6
    5108:	380e90fa 	slli	r7,r7,3
    510c:	1004d77a 	srli	r2,r2,29
    5110:	300cc03a 	cmpne	r6,r6,zero
    5114:	31ccb03a 	or	r6,r6,r7
    5118:	308cb03a 	or	r6,r6,r2
    511c:	308001cc 	andi	r2,r6,7
    5120:	10000426 	beq	r2,zero,5134 <__truncdfsf2+0x78>
    5124:	308003cc 	andi	r2,r6,15
    5128:	01000104 	movi	r4,4
    512c:	11000126 	beq	r2,r4,5134 <__truncdfsf2+0x78>
    5130:	31800104 	addi	r6,r6,4
    5134:	3081002c 	andhi	r2,r6,1024
    5138:	10001626 	beq	r2,zero,5194 <__truncdfsf2+0xd8>
    513c:	18c00044 	addi	r3,r3,1
    5140:	00803fc4 	movi	r2,255
    5144:	18800326 	beq	r3,r2,5154 <__truncdfsf2+0x98>
    5148:	300c91ba 	slli	r6,r6,6
    514c:	300cd27a 	srli	r6,r6,9
    5150:	00000206 	br	515c <__truncdfsf2+0xa0>
    5154:	00ffffc4 	movi	r3,-1
    5158:	000d883a 	mov	r6,zero
    515c:	18c03fcc 	andi	r3,r3,255
    5160:	180895fa 	slli	r4,r3,23
    5164:	00c02034 	movhi	r3,128
    5168:	280a97fa 	slli	r5,r5,31
    516c:	18ffffc4 	addi	r3,r3,-1
    5170:	30c6703a 	and	r3,r6,r3
    5174:	1906b03a 	or	r3,r3,r4
    5178:	1944b03a 	or	r2,r3,r5
    517c:	f800283a 	ret
    5180:	40000b1e 	bne	r8,zero,51b0 <__truncdfsf2+0xf4>
    5184:	388cb03a 	or	r6,r7,r2
    5188:	0007883a 	mov	r3,zero
    518c:	30000426 	beq	r6,zero,51a0 <__truncdfsf2+0xe4>
    5190:	01800144 	movi	r6,5
    5194:	00803fc4 	movi	r2,255
    5198:	300cd0fa 	srli	r6,r6,3
    519c:	18800a26 	beq	r3,r2,51c8 <__truncdfsf2+0x10c>
    51a0:	00802034 	movhi	r2,128
    51a4:	10bfffc4 	addi	r2,r2,-1
    51a8:	308c703a 	and	r6,r6,r2
    51ac:	003feb06 	br	515c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700515c>
    51b0:	3888b03a 	or	r4,r7,r2
    51b4:	203fe726 	beq	r4,zero,5154 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005154>
    51b8:	380c90fa 	slli	r6,r7,3
    51bc:	00c03fc4 	movi	r3,255
    51c0:	31808034 	orhi	r6,r6,512
    51c4:	003fd506 	br	511c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700511c>
    51c8:	303fe226 	beq	r6,zero,5154 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005154>
    51cc:	00802034 	movhi	r2,128
    51d0:	31801034 	orhi	r6,r6,64
    51d4:	10bfffc4 	addi	r2,r2,-1
    51d8:	00ffffc4 	movi	r3,-1
    51dc:	308c703a 	and	r6,r6,r2
    51e0:	003fde06 	br	515c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700515c>
    51e4:	013ffa44 	movi	r4,-23
    51e8:	19000e16 	blt	r3,r4,5224 <__truncdfsf2+0x168>
    51ec:	01000784 	movi	r4,30
    51f0:	20c9c83a 	sub	r4,r4,r3
    51f4:	018007c4 	movi	r6,31
    51f8:	39c02034 	orhi	r7,r7,128
    51fc:	31000b16 	blt	r6,r4,522c <__truncdfsf2+0x170>
    5200:	423f2084 	addi	r8,r8,-894
    5204:	120c983a 	sll	r6,r2,r8
    5208:	3a0e983a 	sll	r7,r7,r8
    520c:	1104d83a 	srl	r2,r2,r4
    5210:	300cc03a 	cmpne	r6,r6,zero
    5214:	31ceb03a 	or	r7,r6,r7
    5218:	388cb03a 	or	r6,r7,r2
    521c:	0007883a 	mov	r3,zero
    5220:	003fbe06 	br	511c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700511c>
    5224:	0007883a 	mov	r3,zero
    5228:	003fd906 	br	5190 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005190>
    522c:	01bfff84 	movi	r6,-2
    5230:	30cdc83a 	sub	r6,r6,r3
    5234:	00c00804 	movi	r3,32
    5238:	398cd83a 	srl	r6,r7,r6
    523c:	20c00726 	beq	r4,r3,525c <__truncdfsf2+0x1a0>
    5240:	423f2884 	addi	r8,r8,-862
    5244:	3a0e983a 	sll	r7,r7,r8
    5248:	3884b03a 	or	r2,r7,r2
    524c:	1004c03a 	cmpne	r2,r2,zero
    5250:	118cb03a 	or	r6,r2,r6
    5254:	0007883a 	mov	r3,zero
    5258:	003fb006 	br	511c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700511c>
    525c:	000f883a 	mov	r7,zero
    5260:	003ff906 	br	5248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005248>

00005264 <__clzsi2>:
    5264:	00bfffd4 	movui	r2,65535
    5268:	11000536 	bltu	r2,r4,5280 <__clzsi2+0x1c>
    526c:	00803fc4 	movi	r2,255
    5270:	11000f36 	bltu	r2,r4,52b0 <__clzsi2+0x4c>
    5274:	00800804 	movi	r2,32
    5278:	0007883a 	mov	r3,zero
    527c:	00000506 	br	5294 <__clzsi2+0x30>
    5280:	00804034 	movhi	r2,256
    5284:	10bfffc4 	addi	r2,r2,-1
    5288:	11000c2e 	bgeu	r2,r4,52bc <__clzsi2+0x58>
    528c:	00800204 	movi	r2,8
    5290:	00c00604 	movi	r3,24
    5294:	20c8d83a 	srl	r4,r4,r3
    5298:	00c000b4 	movhi	r3,2
    529c:	18ee1e04 	addi	r3,r3,-18312
    52a0:	1909883a 	add	r4,r3,r4
    52a4:	20c00003 	ldbu	r3,0(r4)
    52a8:	10c5c83a 	sub	r2,r2,r3
    52ac:	f800283a 	ret
    52b0:	00800604 	movi	r2,24
    52b4:	00c00204 	movi	r3,8
    52b8:	003ff606 	br	5294 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005294>
    52bc:	00800404 	movi	r2,16
    52c0:	1007883a 	mov	r3,r2
    52c4:	003ff306 	br	5294 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005294>

000052c8 <_printf_r>:
    52c8:	defffd04 	addi	sp,sp,-12
    52cc:	2805883a 	mov	r2,r5
    52d0:	dfc00015 	stw	ra,0(sp)
    52d4:	d9800115 	stw	r6,4(sp)
    52d8:	d9c00215 	stw	r7,8(sp)
    52dc:	21400217 	ldw	r5,8(r4)
    52e0:	d9c00104 	addi	r7,sp,4
    52e4:	100d883a 	mov	r6,r2
    52e8:	00053340 	call	5334 <___vfprintf_internal_r>
    52ec:	dfc00017 	ldw	ra,0(sp)
    52f0:	dec00304 	addi	sp,sp,12
    52f4:	f800283a 	ret

000052f8 <printf>:
    52f8:	defffc04 	addi	sp,sp,-16
    52fc:	dfc00015 	stw	ra,0(sp)
    5300:	d9400115 	stw	r5,4(sp)
    5304:	d9800215 	stw	r6,8(sp)
    5308:	d9c00315 	stw	r7,12(sp)
    530c:	008000b4 	movhi	r2,2
    5310:	10b73804 	addi	r2,r2,-8992
    5314:	10800017 	ldw	r2,0(r2)
    5318:	200b883a 	mov	r5,r4
    531c:	d9800104 	addi	r6,sp,4
    5320:	11000217 	ldw	r4,8(r2)
    5324:	000752c0 	call	752c <__vfprintf_internal>
    5328:	dfc00017 	ldw	ra,0(sp)
    532c:	dec00404 	addi	sp,sp,16
    5330:	f800283a 	ret

00005334 <___vfprintf_internal_r>:
    5334:	deffb804 	addi	sp,sp,-288
    5338:	dfc04715 	stw	ra,284(sp)
    533c:	ddc04515 	stw	r23,276(sp)
    5340:	dd404315 	stw	r21,268(sp)
    5344:	d9002c15 	stw	r4,176(sp)
    5348:	282f883a 	mov	r23,r5
    534c:	302b883a 	mov	r21,r6
    5350:	d9c02d15 	stw	r7,180(sp)
    5354:	df004615 	stw	fp,280(sp)
    5358:	dd804415 	stw	r22,272(sp)
    535c:	dd004215 	stw	r20,264(sp)
    5360:	dcc04115 	stw	r19,260(sp)
    5364:	dc804015 	stw	r18,256(sp)
    5368:	dc403f15 	stw	r17,252(sp)
    536c:	dc003e15 	stw	r16,248(sp)
    5370:	0009c900 	call	9c90 <_localeconv_r>
    5374:	10800017 	ldw	r2,0(r2)
    5378:	1009883a 	mov	r4,r2
    537c:	d8803415 	stw	r2,208(sp)
    5380:	000bcb80 	call	bcb8 <strlen>
    5384:	d8803715 	stw	r2,220(sp)
    5388:	d8802c17 	ldw	r2,176(sp)
    538c:	10000226 	beq	r2,zero,5398 <___vfprintf_internal_r+0x64>
    5390:	10800e17 	ldw	r2,56(r2)
    5394:	1000f926 	beq	r2,zero,577c <___vfprintf_internal_r+0x448>
    5398:	b880030b 	ldhu	r2,12(r23)
    539c:	10c8000c 	andi	r3,r2,8192
    53a0:	1800061e 	bne	r3,zero,53bc <___vfprintf_internal_r+0x88>
    53a4:	b9001917 	ldw	r4,100(r23)
    53a8:	00f7ffc4 	movi	r3,-8193
    53ac:	10880014 	ori	r2,r2,8192
    53b0:	20c6703a 	and	r3,r4,r3
    53b4:	b880030d 	sth	r2,12(r23)
    53b8:	b8c01915 	stw	r3,100(r23)
    53bc:	10c0020c 	andi	r3,r2,8
    53c0:	1800c126 	beq	r3,zero,56c8 <___vfprintf_internal_r+0x394>
    53c4:	b8c00417 	ldw	r3,16(r23)
    53c8:	1800bf26 	beq	r3,zero,56c8 <___vfprintf_internal_r+0x394>
    53cc:	1080068c 	andi	r2,r2,26
    53d0:	00c00284 	movi	r3,10
    53d4:	10c0c426 	beq	r2,r3,56e8 <___vfprintf_internal_r+0x3b4>
    53d8:	d8c00404 	addi	r3,sp,16
    53dc:	050000b4 	movhi	r20,2
    53e0:	d9001e04 	addi	r4,sp,120
    53e4:	a52e6e84 	addi	r20,r20,-17990
    53e8:	d8c01e15 	stw	r3,120(sp)
    53ec:	d8002015 	stw	zero,128(sp)
    53f0:	d8001f15 	stw	zero,124(sp)
    53f4:	d8003315 	stw	zero,204(sp)
    53f8:	d8003615 	stw	zero,216(sp)
    53fc:	d8003815 	stw	zero,224(sp)
    5400:	1811883a 	mov	r8,r3
    5404:	d8003915 	stw	zero,228(sp)
    5408:	d8003a15 	stw	zero,232(sp)
    540c:	d8002f15 	stw	zero,188(sp)
    5410:	d9002815 	stw	r4,160(sp)
    5414:	a8800007 	ldb	r2,0(r21)
    5418:	10027b26 	beq	r2,zero,5e08 <___vfprintf_internal_r+0xad4>
    541c:	00c00944 	movi	r3,37
    5420:	a821883a 	mov	r16,r21
    5424:	10c0021e 	bne	r2,r3,5430 <___vfprintf_internal_r+0xfc>
    5428:	00001406 	br	547c <___vfprintf_internal_r+0x148>
    542c:	10c00326 	beq	r2,r3,543c <___vfprintf_internal_r+0x108>
    5430:	84000044 	addi	r16,r16,1
    5434:	80800007 	ldb	r2,0(r16)
    5438:	103ffc1e 	bne	r2,zero,542c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700542c>
    543c:	8563c83a 	sub	r17,r16,r21
    5440:	88000e26 	beq	r17,zero,547c <___vfprintf_internal_r+0x148>
    5444:	d8c02017 	ldw	r3,128(sp)
    5448:	d8801f17 	ldw	r2,124(sp)
    544c:	45400015 	stw	r21,0(r8)
    5450:	1c47883a 	add	r3,r3,r17
    5454:	10800044 	addi	r2,r2,1
    5458:	d8c02015 	stw	r3,128(sp)
    545c:	44400115 	stw	r17,4(r8)
    5460:	d8801f15 	stw	r2,124(sp)
    5464:	00c001c4 	movi	r3,7
    5468:	1880a716 	blt	r3,r2,5708 <___vfprintf_internal_r+0x3d4>
    546c:	42000204 	addi	r8,r8,8
    5470:	d9402f17 	ldw	r5,188(sp)
    5474:	2c4b883a 	add	r5,r5,r17
    5478:	d9402f15 	stw	r5,188(sp)
    547c:	80800007 	ldb	r2,0(r16)
    5480:	1000a826 	beq	r2,zero,5724 <___vfprintf_internal_r+0x3f0>
    5484:	84400047 	ldb	r17,1(r16)
    5488:	00bfffc4 	movi	r2,-1
    548c:	85400044 	addi	r21,r16,1
    5490:	d8002785 	stb	zero,158(sp)
    5494:	0007883a 	mov	r3,zero
    5498:	000f883a 	mov	r7,zero
    549c:	d8802915 	stw	r2,164(sp)
    54a0:	d8003115 	stw	zero,196(sp)
    54a4:	0025883a 	mov	r18,zero
    54a8:	01401604 	movi	r5,88
    54ac:	01800244 	movi	r6,9
    54b0:	02800a84 	movi	r10,42
    54b4:	02401b04 	movi	r9,108
    54b8:	ad400044 	addi	r21,r21,1
    54bc:	88bff804 	addi	r2,r17,-32
    54c0:	28830436 	bltu	r5,r2,60d4 <___vfprintf_internal_r+0xda0>
    54c4:	100490ba 	slli	r2,r2,2
    54c8:	01000034 	movhi	r4,0
    54cc:	21153704 	addi	r4,r4,21724
    54d0:	1105883a 	add	r2,r2,r4
    54d4:	10800017 	ldw	r2,0(r2)
    54d8:	1000683a 	jmp	r2
    54dc:	00005ff4 	movhi	zero,383
    54e0:	000060d4 	movui	zero,387
    54e4:	000060d4 	movui	zero,387
    54e8:	00006014 	movui	zero,384
    54ec:	000060d4 	movui	zero,387
    54f0:	000060d4 	movui	zero,387
    54f4:	000060d4 	movui	zero,387
    54f8:	000060d4 	movui	zero,387
    54fc:	000060d4 	movui	zero,387
    5500:	000060d4 	movui	zero,387
    5504:	00005788 	cmpgei	zero,zero,350
    5508:	00005f30 	cmpltui	zero,zero,380
    550c:	000060d4 	movui	zero,387
    5510:	00005650 	cmplti	zero,zero,345
    5514:	000057b0 	cmpltui	zero,zero,350
    5518:	000060d4 	movui	zero,387
    551c:	000057f0 	cmpltui	zero,zero,351
    5520:	000057fc 	xorhi	zero,zero,351
    5524:	000057fc 	xorhi	zero,zero,351
    5528:	000057fc 	xorhi	zero,zero,351
    552c:	000057fc 	xorhi	zero,zero,351
    5530:	000057fc 	xorhi	zero,zero,351
    5534:	000057fc 	xorhi	zero,zero,351
    5538:	000057fc 	xorhi	zero,zero,351
    553c:	000057fc 	xorhi	zero,zero,351
    5540:	000057fc 	xorhi	zero,zero,351
    5544:	000060d4 	movui	zero,387
    5548:	000060d4 	movui	zero,387
    554c:	000060d4 	movui	zero,387
    5550:	000060d4 	movui	zero,387
    5554:	000060d4 	movui	zero,387
    5558:	000060d4 	movui	zero,387
    555c:	000060d4 	movui	zero,387
    5560:	000060d4 	movui	zero,387
    5564:	000060d4 	movui	zero,387
    5568:	000060d4 	movui	zero,387
    556c:	00005830 	cmpltui	zero,zero,352
    5570:	000058ec 	andhi	zero,zero,355
    5574:	000060d4 	movui	zero,387
    5578:	000058ec 	andhi	zero,zero,355
    557c:	000060d4 	movui	zero,387
    5580:	000060d4 	movui	zero,387
    5584:	000060d4 	movui	zero,387
    5588:	000060d4 	movui	zero,387
    558c:	0000598c 	andi	zero,zero,358
    5590:	000060d4 	movui	zero,387
    5594:	000060d4 	movui	zero,387
    5598:	00005998 	cmpnei	zero,zero,358
    559c:	000060d4 	movui	zero,387
    55a0:	000060d4 	movui	zero,387
    55a4:	000060d4 	movui	zero,387
    55a8:	000060d4 	movui	zero,387
    55ac:	000060d4 	movui	zero,387
    55b0:	00005e10 	cmplti	zero,zero,376
    55b4:	000060d4 	movui	zero,387
    55b8:	000060d4 	movui	zero,387
    55bc:	00005e70 	cmpltui	zero,zero,377
    55c0:	000060d4 	movui	zero,387
    55c4:	000060d4 	movui	zero,387
    55c8:	000060d4 	movui	zero,387
    55cc:	000060d4 	movui	zero,387
    55d0:	000060d4 	movui	zero,387
    55d4:	000060d4 	movui	zero,387
    55d8:	000060d4 	movui	zero,387
    55dc:	000060d4 	movui	zero,387
    55e0:	000060d4 	movui	zero,387
    55e4:	000060d4 	movui	zero,387
    55e8:	00006080 	call	608 <main+0x384>
    55ec:	00006020 	cmpeqi	zero,zero,384
    55f0:	000058ec 	andhi	zero,zero,355
    55f4:	000058ec 	andhi	zero,zero,355
    55f8:	000058ec 	andhi	zero,zero,355
    55fc:	00006030 	cmpltui	zero,zero,384
    5600:	00006020 	cmpeqi	zero,zero,384
    5604:	000060d4 	movui	zero,387
    5608:	000060d4 	movui	zero,387
    560c:	0000603c 	xorhi	zero,zero,384
    5610:	000060d4 	movui	zero,387
    5614:	0000604c 	andi	zero,zero,385
    5618:	00005f20 	cmpeqi	zero,zero,380
    561c:	0000565c 	xori	zero,zero,345
    5620:	00005f40 	call	5f4 <main+0x370>
    5624:	000060d4 	movui	zero,387
    5628:	00005f4c 	andi	zero,zero,381
    562c:	000060d4 	movui	zero,387
    5630:	00005fa8 	cmpgeui	zero,zero,382
    5634:	000060d4 	movui	zero,387
    5638:	000060d4 	movui	zero,387
    563c:	00005fb8 	rdprs	zero,zero,382
    5640:	d9003117 	ldw	r4,196(sp)
    5644:	d8802d15 	stw	r2,180(sp)
    5648:	0109c83a 	sub	r4,zero,r4
    564c:	d9003115 	stw	r4,196(sp)
    5650:	94800114 	ori	r18,r18,4
    5654:	ac400007 	ldb	r17,0(r21)
    5658:	003f9706 	br	54b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054b8>
    565c:	00800c04 	movi	r2,48
    5660:	d9002d17 	ldw	r4,180(sp)
    5664:	d9402917 	ldw	r5,164(sp)
    5668:	d8802705 	stb	r2,156(sp)
    566c:	00801e04 	movi	r2,120
    5670:	d8802745 	stb	r2,157(sp)
    5674:	d8002785 	stb	zero,158(sp)
    5678:	20c00104 	addi	r3,r4,4
    567c:	24c00017 	ldw	r19,0(r4)
    5680:	002d883a 	mov	r22,zero
    5684:	90800094 	ori	r2,r18,2
    5688:	28029a16 	blt	r5,zero,60f4 <___vfprintf_internal_r+0xdc0>
    568c:	00bfdfc4 	movi	r2,-129
    5690:	90a4703a 	and	r18,r18,r2
    5694:	d8c02d15 	stw	r3,180(sp)
    5698:	94800094 	ori	r18,r18,2
    569c:	9802871e 	bne	r19,zero,60bc <___vfprintf_internal_r+0xd88>
    56a0:	008000b4 	movhi	r2,2
    56a4:	10ae6704 	addi	r2,r2,-18020
    56a8:	d8803915 	stw	r2,228(sp)
    56ac:	04401e04 	movi	r17,120
    56b0:	d8802917 	ldw	r2,164(sp)
    56b4:	0039883a 	mov	fp,zero
    56b8:	1001e926 	beq	r2,zero,5e60 <___vfprintf_internal_r+0xb2c>
    56bc:	0027883a 	mov	r19,zero
    56c0:	002d883a 	mov	r22,zero
    56c4:	00020506 	br	5edc <___vfprintf_internal_r+0xba8>
    56c8:	d9002c17 	ldw	r4,176(sp)
    56cc:	b80b883a 	mov	r5,r23
    56d0:	00076040 	call	7604 <__swsetup_r>
    56d4:	1005ac1e 	bne	r2,zero,6d88 <___vfprintf_internal_r+0x1a54>
    56d8:	b880030b 	ldhu	r2,12(r23)
    56dc:	00c00284 	movi	r3,10
    56e0:	1080068c 	andi	r2,r2,26
    56e4:	10ff3c1e 	bne	r2,r3,53d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70053d8>
    56e8:	b880038f 	ldh	r2,14(r23)
    56ec:	103f3a16 	blt	r2,zero,53d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70053d8>
    56f0:	d9c02d17 	ldw	r7,180(sp)
    56f4:	d9002c17 	ldw	r4,176(sp)
    56f8:	a80d883a 	mov	r6,r21
    56fc:	b80b883a 	mov	r5,r23
    5700:	00075480 	call	7548 <__sbprintf>
    5704:	00001106 	br	574c <___vfprintf_internal_r+0x418>
    5708:	d9002c17 	ldw	r4,176(sp)
    570c:	d9801e04 	addi	r6,sp,120
    5710:	b80b883a 	mov	r5,r23
    5714:	000be4c0 	call	be4c <__sprint_r>
    5718:	1000081e 	bne	r2,zero,573c <___vfprintf_internal_r+0x408>
    571c:	da000404 	addi	r8,sp,16
    5720:	003f5306 	br	5470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005470>
    5724:	d8802017 	ldw	r2,128(sp)
    5728:	10000426 	beq	r2,zero,573c <___vfprintf_internal_r+0x408>
    572c:	d9002c17 	ldw	r4,176(sp)
    5730:	d9801e04 	addi	r6,sp,120
    5734:	b80b883a 	mov	r5,r23
    5738:	000be4c0 	call	be4c <__sprint_r>
    573c:	b880030b 	ldhu	r2,12(r23)
    5740:	1080100c 	andi	r2,r2,64
    5744:	1005901e 	bne	r2,zero,6d88 <___vfprintf_internal_r+0x1a54>
    5748:	d8802f17 	ldw	r2,188(sp)
    574c:	dfc04717 	ldw	ra,284(sp)
    5750:	df004617 	ldw	fp,280(sp)
    5754:	ddc04517 	ldw	r23,276(sp)
    5758:	dd804417 	ldw	r22,272(sp)
    575c:	dd404317 	ldw	r21,268(sp)
    5760:	dd004217 	ldw	r20,264(sp)
    5764:	dcc04117 	ldw	r19,260(sp)
    5768:	dc804017 	ldw	r18,256(sp)
    576c:	dc403f17 	ldw	r17,252(sp)
    5770:	dc003e17 	ldw	r16,248(sp)
    5774:	dec04804 	addi	sp,sp,288
    5778:	f800283a 	ret
    577c:	d9002c17 	ldw	r4,176(sp)
    5780:	00095d80 	call	95d8 <__sinit>
    5784:	003f0406 	br	5398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005398>
    5788:	d8802d17 	ldw	r2,180(sp)
    578c:	d9002d17 	ldw	r4,180(sp)
    5790:	10800017 	ldw	r2,0(r2)
    5794:	d8803115 	stw	r2,196(sp)
    5798:	20800104 	addi	r2,r4,4
    579c:	d9003117 	ldw	r4,196(sp)
    57a0:	203fa716 	blt	r4,zero,5640 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005640>
    57a4:	d8802d15 	stw	r2,180(sp)
    57a8:	ac400007 	ldb	r17,0(r21)
    57ac:	003f4206 	br	54b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054b8>
    57b0:	ac400007 	ldb	r17,0(r21)
    57b4:	aac00044 	addi	r11,r21,1
    57b8:	8a872826 	beq	r17,r10,745c <___vfprintf_internal_r+0x2128>
    57bc:	88bff404 	addi	r2,r17,-48
    57c0:	0009883a 	mov	r4,zero
    57c4:	30867d36 	bltu	r6,r2,71bc <___vfprintf_internal_r+0x1e88>
    57c8:	5c400007 	ldb	r17,0(r11)
    57cc:	210002a4 	muli	r4,r4,10
    57d0:	5d400044 	addi	r21,r11,1
    57d4:	a817883a 	mov	r11,r21
    57d8:	2089883a 	add	r4,r4,r2
    57dc:	88bff404 	addi	r2,r17,-48
    57e0:	30bff92e 	bgeu	r6,r2,57c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057c8>
    57e4:	2005c916 	blt	r4,zero,6f0c <___vfprintf_internal_r+0x1bd8>
    57e8:	d9002915 	stw	r4,164(sp)
    57ec:	003f3306 	br	54bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054bc>
    57f0:	94802014 	ori	r18,r18,128
    57f4:	ac400007 	ldb	r17,0(r21)
    57f8:	003f2f06 	br	54b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054b8>
    57fc:	a809883a 	mov	r4,r21
    5800:	d8003115 	stw	zero,196(sp)
    5804:	88bff404 	addi	r2,r17,-48
    5808:	0017883a 	mov	r11,zero
    580c:	24400007 	ldb	r17,0(r4)
    5810:	5ac002a4 	muli	r11,r11,10
    5814:	ad400044 	addi	r21,r21,1
    5818:	a809883a 	mov	r4,r21
    581c:	12d7883a 	add	r11,r2,r11
    5820:	88bff404 	addi	r2,r17,-48
    5824:	30bff92e 	bgeu	r6,r2,580c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700580c>
    5828:	dac03115 	stw	r11,196(sp)
    582c:	003f2306 	br	54bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054bc>
    5830:	18c03fcc 	andi	r3,r3,255
    5834:	18072b1e 	bne	r3,zero,74e4 <___vfprintf_internal_r+0x21b0>
    5838:	94800414 	ori	r18,r18,16
    583c:	9080080c 	andi	r2,r18,32
    5840:	10037b26 	beq	r2,zero,6630 <___vfprintf_internal_r+0x12fc>
    5844:	d9402d17 	ldw	r5,180(sp)
    5848:	28800117 	ldw	r2,4(r5)
    584c:	2cc00017 	ldw	r19,0(r5)
    5850:	29400204 	addi	r5,r5,8
    5854:	d9402d15 	stw	r5,180(sp)
    5858:	102d883a 	mov	r22,r2
    585c:	10044b16 	blt	r2,zero,698c <___vfprintf_internal_r+0x1658>
    5860:	d9402917 	ldw	r5,164(sp)
    5864:	df002783 	ldbu	fp,158(sp)
    5868:	2803bc16 	blt	r5,zero,675c <___vfprintf_internal_r+0x1428>
    586c:	00ffdfc4 	movi	r3,-129
    5870:	9d84b03a 	or	r2,r19,r22
    5874:	90e4703a 	and	r18,r18,r3
    5878:	10017726 	beq	r2,zero,5e58 <___vfprintf_internal_r+0xb24>
    587c:	b0038326 	beq	r22,zero,668c <___vfprintf_internal_r+0x1358>
    5880:	dc402a15 	stw	r17,168(sp)
    5884:	dc001e04 	addi	r16,sp,120
    5888:	b023883a 	mov	r17,r22
    588c:	402d883a 	mov	r22,r8
    5890:	9809883a 	mov	r4,r19
    5894:	880b883a 	mov	r5,r17
    5898:	01800284 	movi	r6,10
    589c:	000f883a 	mov	r7,zero
    58a0:	000edc00 	call	edc0 <__umoddi3>
    58a4:	10800c04 	addi	r2,r2,48
    58a8:	843fffc4 	addi	r16,r16,-1
    58ac:	9809883a 	mov	r4,r19
    58b0:	880b883a 	mov	r5,r17
    58b4:	80800005 	stb	r2,0(r16)
    58b8:	01800284 	movi	r6,10
    58bc:	000f883a 	mov	r7,zero
    58c0:	000e8480 	call	e848 <__udivdi3>
    58c4:	1027883a 	mov	r19,r2
    58c8:	10c4b03a 	or	r2,r2,r3
    58cc:	1823883a 	mov	r17,r3
    58d0:	103fef1e 	bne	r2,zero,5890 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005890>
    58d4:	d8c02817 	ldw	r3,160(sp)
    58d8:	dc402a17 	ldw	r17,168(sp)
    58dc:	b011883a 	mov	r8,r22
    58e0:	1c07c83a 	sub	r3,r3,r16
    58e4:	d8c02e15 	stw	r3,184(sp)
    58e8:	00005906 	br	5a50 <___vfprintf_internal_r+0x71c>
    58ec:	18c03fcc 	andi	r3,r3,255
    58f0:	1806fa1e 	bne	r3,zero,74dc <___vfprintf_internal_r+0x21a8>
    58f4:	9080020c 	andi	r2,r18,8
    58f8:	10048a26 	beq	r2,zero,6b24 <___vfprintf_internal_r+0x17f0>
    58fc:	d8c02d17 	ldw	r3,180(sp)
    5900:	d9002d17 	ldw	r4,180(sp)
    5904:	d9402d17 	ldw	r5,180(sp)
    5908:	18c00017 	ldw	r3,0(r3)
    590c:	21000117 	ldw	r4,4(r4)
    5910:	29400204 	addi	r5,r5,8
    5914:	d8c03615 	stw	r3,216(sp)
    5918:	d9003815 	stw	r4,224(sp)
    591c:	d9402d15 	stw	r5,180(sp)
    5920:	d9003617 	ldw	r4,216(sp)
    5924:	d9403817 	ldw	r5,224(sp)
    5928:	da003d15 	stw	r8,244(sp)
    592c:	04000044 	movi	r16,1
    5930:	000b9d80 	call	b9d8 <__fpclassifyd>
    5934:	da003d17 	ldw	r8,244(sp)
    5938:	14041f1e 	bne	r2,r16,69b8 <___vfprintf_internal_r+0x1684>
    593c:	d9003617 	ldw	r4,216(sp)
    5940:	d9403817 	ldw	r5,224(sp)
    5944:	000d883a 	mov	r6,zero
    5948:	000f883a 	mov	r7,zero
    594c:	000f2f80 	call	f2f8 <__ledf2>
    5950:	da003d17 	ldw	r8,244(sp)
    5954:	1005be16 	blt	r2,zero,7050 <___vfprintf_internal_r+0x1d1c>
    5958:	df002783 	ldbu	fp,158(sp)
    595c:	008011c4 	movi	r2,71
    5960:	1445330e 	bge	r2,r17,6e30 <___vfprintf_internal_r+0x1afc>
    5964:	040000b4 	movhi	r16,2
    5968:	842e5f04 	addi	r16,r16,-18052
    596c:	00c000c4 	movi	r3,3
    5970:	00bfdfc4 	movi	r2,-129
    5974:	d8c02a15 	stw	r3,168(sp)
    5978:	90a4703a 	and	r18,r18,r2
    597c:	d8c02e15 	stw	r3,184(sp)
    5980:	d8002915 	stw	zero,164(sp)
    5984:	d8003215 	stw	zero,200(sp)
    5988:	00003706 	br	5a68 <___vfprintf_internal_r+0x734>
    598c:	94800214 	ori	r18,r18,8
    5990:	ac400007 	ldb	r17,0(r21)
    5994:	003ec806 	br	54b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054b8>
    5998:	18c03fcc 	andi	r3,r3,255
    599c:	1806db1e 	bne	r3,zero,750c <___vfprintf_internal_r+0x21d8>
    59a0:	94800414 	ori	r18,r18,16
    59a4:	9080080c 	andi	r2,r18,32
    59a8:	1002d826 	beq	r2,zero,650c <___vfprintf_internal_r+0x11d8>
    59ac:	d9402d17 	ldw	r5,180(sp)
    59b0:	d8c02917 	ldw	r3,164(sp)
    59b4:	d8002785 	stb	zero,158(sp)
    59b8:	28800204 	addi	r2,r5,8
    59bc:	2cc00017 	ldw	r19,0(r5)
    59c0:	2d800117 	ldw	r22,4(r5)
    59c4:	18048f16 	blt	r3,zero,6c04 <___vfprintf_internal_r+0x18d0>
    59c8:	013fdfc4 	movi	r4,-129
    59cc:	9d86b03a 	or	r3,r19,r22
    59d0:	d8802d15 	stw	r2,180(sp)
    59d4:	9124703a 	and	r18,r18,r4
    59d8:	1802d91e 	bne	r3,zero,6540 <___vfprintf_internal_r+0x120c>
    59dc:	d8c02917 	ldw	r3,164(sp)
    59e0:	0039883a 	mov	fp,zero
    59e4:	1805c326 	beq	r3,zero,70f4 <___vfprintf_internal_r+0x1dc0>
    59e8:	0027883a 	mov	r19,zero
    59ec:	002d883a 	mov	r22,zero
    59f0:	dc001e04 	addi	r16,sp,120
    59f4:	9806d0fa 	srli	r3,r19,3
    59f8:	b008977a 	slli	r4,r22,29
    59fc:	b02cd0fa 	srli	r22,r22,3
    5a00:	9cc001cc 	andi	r19,r19,7
    5a04:	98800c04 	addi	r2,r19,48
    5a08:	843fffc4 	addi	r16,r16,-1
    5a0c:	20e6b03a 	or	r19,r4,r3
    5a10:	80800005 	stb	r2,0(r16)
    5a14:	9d86b03a 	or	r3,r19,r22
    5a18:	183ff61e 	bne	r3,zero,59f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059f4>
    5a1c:	90c0004c 	andi	r3,r18,1
    5a20:	18013b26 	beq	r3,zero,5f10 <___vfprintf_internal_r+0xbdc>
    5a24:	10803fcc 	andi	r2,r2,255
    5a28:	1080201c 	xori	r2,r2,128
    5a2c:	10bfe004 	addi	r2,r2,-128
    5a30:	00c00c04 	movi	r3,48
    5a34:	10c13626 	beq	r2,r3,5f10 <___vfprintf_internal_r+0xbdc>
    5a38:	80ffffc5 	stb	r3,-1(r16)
    5a3c:	d8c02817 	ldw	r3,160(sp)
    5a40:	80bfffc4 	addi	r2,r16,-1
    5a44:	1021883a 	mov	r16,r2
    5a48:	1887c83a 	sub	r3,r3,r2
    5a4c:	d8c02e15 	stw	r3,184(sp)
    5a50:	d8802e17 	ldw	r2,184(sp)
    5a54:	d9002917 	ldw	r4,164(sp)
    5a58:	1100010e 	bge	r2,r4,5a60 <___vfprintf_internal_r+0x72c>
    5a5c:	2005883a 	mov	r2,r4
    5a60:	d8802a15 	stw	r2,168(sp)
    5a64:	d8003215 	stw	zero,200(sp)
    5a68:	e7003fcc 	andi	fp,fp,255
    5a6c:	e700201c 	xori	fp,fp,128
    5a70:	e73fe004 	addi	fp,fp,-128
    5a74:	e0000326 	beq	fp,zero,5a84 <___vfprintf_internal_r+0x750>
    5a78:	d8c02a17 	ldw	r3,168(sp)
    5a7c:	18c00044 	addi	r3,r3,1
    5a80:	d8c02a15 	stw	r3,168(sp)
    5a84:	90c0008c 	andi	r3,r18,2
    5a88:	d8c02b15 	stw	r3,172(sp)
    5a8c:	18000326 	beq	r3,zero,5a9c <___vfprintf_internal_r+0x768>
    5a90:	d8c02a17 	ldw	r3,168(sp)
    5a94:	18c00084 	addi	r3,r3,2
    5a98:	d8c02a15 	stw	r3,168(sp)
    5a9c:	90c0210c 	andi	r3,r18,132
    5aa0:	d8c03015 	stw	r3,192(sp)
    5aa4:	1801a31e 	bne	r3,zero,6134 <___vfprintf_internal_r+0xe00>
    5aa8:	d9003117 	ldw	r4,196(sp)
    5aac:	d8c02a17 	ldw	r3,168(sp)
    5ab0:	20e7c83a 	sub	r19,r4,r3
    5ab4:	04c19f0e 	bge	zero,r19,6134 <___vfprintf_internal_r+0xe00>
    5ab8:	02400404 	movi	r9,16
    5abc:	d8c02017 	ldw	r3,128(sp)
    5ac0:	d8801f17 	ldw	r2,124(sp)
    5ac4:	4cc50d0e 	bge	r9,r19,6efc <___vfprintf_internal_r+0x1bc8>
    5ac8:	014000b4 	movhi	r5,2
    5acc:	296e7284 	addi	r5,r5,-17974
    5ad0:	dc403b15 	stw	r17,236(sp)
    5ad4:	d9403515 	stw	r5,212(sp)
    5ad8:	9823883a 	mov	r17,r19
    5adc:	482d883a 	mov	r22,r9
    5ae0:	9027883a 	mov	r19,r18
    5ae4:	070001c4 	movi	fp,7
    5ae8:	8025883a 	mov	r18,r16
    5aec:	dc002c17 	ldw	r16,176(sp)
    5af0:	00000306 	br	5b00 <___vfprintf_internal_r+0x7cc>
    5af4:	8c7ffc04 	addi	r17,r17,-16
    5af8:	42000204 	addi	r8,r8,8
    5afc:	b440130e 	bge	r22,r17,5b4c <___vfprintf_internal_r+0x818>
    5b00:	010000b4 	movhi	r4,2
    5b04:	18c00404 	addi	r3,r3,16
    5b08:	10800044 	addi	r2,r2,1
    5b0c:	212e7284 	addi	r4,r4,-17974
    5b10:	41000015 	stw	r4,0(r8)
    5b14:	45800115 	stw	r22,4(r8)
    5b18:	d8c02015 	stw	r3,128(sp)
    5b1c:	d8801f15 	stw	r2,124(sp)
    5b20:	e0bff40e 	bge	fp,r2,5af4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af4>
    5b24:	d9801e04 	addi	r6,sp,120
    5b28:	b80b883a 	mov	r5,r23
    5b2c:	8009883a 	mov	r4,r16
    5b30:	000be4c0 	call	be4c <__sprint_r>
    5b34:	103f011e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    5b38:	8c7ffc04 	addi	r17,r17,-16
    5b3c:	d8c02017 	ldw	r3,128(sp)
    5b40:	d8801f17 	ldw	r2,124(sp)
    5b44:	da000404 	addi	r8,sp,16
    5b48:	b47fed16 	blt	r22,r17,5b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b00>
    5b4c:	9021883a 	mov	r16,r18
    5b50:	9825883a 	mov	r18,r19
    5b54:	8827883a 	mov	r19,r17
    5b58:	dc403b17 	ldw	r17,236(sp)
    5b5c:	d9403517 	ldw	r5,212(sp)
    5b60:	98c7883a 	add	r3,r19,r3
    5b64:	10800044 	addi	r2,r2,1
    5b68:	41400015 	stw	r5,0(r8)
    5b6c:	44c00115 	stw	r19,4(r8)
    5b70:	d8c02015 	stw	r3,128(sp)
    5b74:	d8801f15 	stw	r2,124(sp)
    5b78:	010001c4 	movi	r4,7
    5b7c:	2082a316 	blt	r4,r2,660c <___vfprintf_internal_r+0x12d8>
    5b80:	df002787 	ldb	fp,158(sp)
    5b84:	42000204 	addi	r8,r8,8
    5b88:	e0000c26 	beq	fp,zero,5bbc <___vfprintf_internal_r+0x888>
    5b8c:	d8801f17 	ldw	r2,124(sp)
    5b90:	d9002784 	addi	r4,sp,158
    5b94:	18c00044 	addi	r3,r3,1
    5b98:	10800044 	addi	r2,r2,1
    5b9c:	41000015 	stw	r4,0(r8)
    5ba0:	01000044 	movi	r4,1
    5ba4:	41000115 	stw	r4,4(r8)
    5ba8:	d8c02015 	stw	r3,128(sp)
    5bac:	d8801f15 	stw	r2,124(sp)
    5bb0:	010001c4 	movi	r4,7
    5bb4:	20823c16 	blt	r4,r2,64a8 <___vfprintf_internal_r+0x1174>
    5bb8:	42000204 	addi	r8,r8,8
    5bbc:	d8802b17 	ldw	r2,172(sp)
    5bc0:	10000c26 	beq	r2,zero,5bf4 <___vfprintf_internal_r+0x8c0>
    5bc4:	d8801f17 	ldw	r2,124(sp)
    5bc8:	d9002704 	addi	r4,sp,156
    5bcc:	18c00084 	addi	r3,r3,2
    5bd0:	10800044 	addi	r2,r2,1
    5bd4:	41000015 	stw	r4,0(r8)
    5bd8:	01000084 	movi	r4,2
    5bdc:	41000115 	stw	r4,4(r8)
    5be0:	d8c02015 	stw	r3,128(sp)
    5be4:	d8801f15 	stw	r2,124(sp)
    5be8:	010001c4 	movi	r4,7
    5bec:	20823616 	blt	r4,r2,64c8 <___vfprintf_internal_r+0x1194>
    5bf0:	42000204 	addi	r8,r8,8
    5bf4:	d9003017 	ldw	r4,192(sp)
    5bf8:	00802004 	movi	r2,128
    5bfc:	20819926 	beq	r4,r2,6264 <___vfprintf_internal_r+0xf30>
    5c00:	d9402917 	ldw	r5,164(sp)
    5c04:	d8802e17 	ldw	r2,184(sp)
    5c08:	28adc83a 	sub	r22,r5,r2
    5c0c:	0580310e 	bge	zero,r22,5cd4 <___vfprintf_internal_r+0x9a0>
    5c10:	07000404 	movi	fp,16
    5c14:	d8801f17 	ldw	r2,124(sp)
    5c18:	e584140e 	bge	fp,r22,6c6c <___vfprintf_internal_r+0x1938>
    5c1c:	014000b4 	movhi	r5,2
    5c20:	296e6e84 	addi	r5,r5,-17990
    5c24:	dc402915 	stw	r17,164(sp)
    5c28:	d9402b15 	stw	r5,172(sp)
    5c2c:	b023883a 	mov	r17,r22
    5c30:	04c001c4 	movi	r19,7
    5c34:	a82d883a 	mov	r22,r21
    5c38:	902b883a 	mov	r21,r18
    5c3c:	8025883a 	mov	r18,r16
    5c40:	dc002c17 	ldw	r16,176(sp)
    5c44:	00000306 	br	5c54 <___vfprintf_internal_r+0x920>
    5c48:	8c7ffc04 	addi	r17,r17,-16
    5c4c:	42000204 	addi	r8,r8,8
    5c50:	e440110e 	bge	fp,r17,5c98 <___vfprintf_internal_r+0x964>
    5c54:	18c00404 	addi	r3,r3,16
    5c58:	10800044 	addi	r2,r2,1
    5c5c:	45000015 	stw	r20,0(r8)
    5c60:	47000115 	stw	fp,4(r8)
    5c64:	d8c02015 	stw	r3,128(sp)
    5c68:	d8801f15 	stw	r2,124(sp)
    5c6c:	98bff60e 	bge	r19,r2,5c48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c48>
    5c70:	d9801e04 	addi	r6,sp,120
    5c74:	b80b883a 	mov	r5,r23
    5c78:	8009883a 	mov	r4,r16
    5c7c:	000be4c0 	call	be4c <__sprint_r>
    5c80:	103eae1e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    5c84:	8c7ffc04 	addi	r17,r17,-16
    5c88:	d8c02017 	ldw	r3,128(sp)
    5c8c:	d8801f17 	ldw	r2,124(sp)
    5c90:	da000404 	addi	r8,sp,16
    5c94:	e47fef16 	blt	fp,r17,5c54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c54>
    5c98:	9021883a 	mov	r16,r18
    5c9c:	a825883a 	mov	r18,r21
    5ca0:	b02b883a 	mov	r21,r22
    5ca4:	882d883a 	mov	r22,r17
    5ca8:	dc402917 	ldw	r17,164(sp)
    5cac:	d9002b17 	ldw	r4,172(sp)
    5cb0:	1d87883a 	add	r3,r3,r22
    5cb4:	10800044 	addi	r2,r2,1
    5cb8:	41000015 	stw	r4,0(r8)
    5cbc:	45800115 	stw	r22,4(r8)
    5cc0:	d8c02015 	stw	r3,128(sp)
    5cc4:	d8801f15 	stw	r2,124(sp)
    5cc8:	010001c4 	movi	r4,7
    5ccc:	2081ee16 	blt	r4,r2,6488 <___vfprintf_internal_r+0x1154>
    5cd0:	42000204 	addi	r8,r8,8
    5cd4:	9080400c 	andi	r2,r18,256
    5cd8:	1001181e 	bne	r2,zero,613c <___vfprintf_internal_r+0xe08>
    5cdc:	d9402e17 	ldw	r5,184(sp)
    5ce0:	d8801f17 	ldw	r2,124(sp)
    5ce4:	44000015 	stw	r16,0(r8)
    5ce8:	1947883a 	add	r3,r3,r5
    5cec:	10800044 	addi	r2,r2,1
    5cf0:	41400115 	stw	r5,4(r8)
    5cf4:	d8c02015 	stw	r3,128(sp)
    5cf8:	d8801f15 	stw	r2,124(sp)
    5cfc:	010001c4 	movi	r4,7
    5d00:	2081d316 	blt	r4,r2,6450 <___vfprintf_internal_r+0x111c>
    5d04:	42000204 	addi	r8,r8,8
    5d08:	9480010c 	andi	r18,r18,4
    5d0c:	90003226 	beq	r18,zero,5dd8 <___vfprintf_internal_r+0xaa4>
    5d10:	d9403117 	ldw	r5,196(sp)
    5d14:	d8802a17 	ldw	r2,168(sp)
    5d18:	28a1c83a 	sub	r16,r5,r2
    5d1c:	04002e0e 	bge	zero,r16,5dd8 <___vfprintf_internal_r+0xaa4>
    5d20:	04400404 	movi	r17,16
    5d24:	d8801f17 	ldw	r2,124(sp)
    5d28:	8c04a20e 	bge	r17,r16,6fb4 <___vfprintf_internal_r+0x1c80>
    5d2c:	014000b4 	movhi	r5,2
    5d30:	296e7284 	addi	r5,r5,-17974
    5d34:	d9403515 	stw	r5,212(sp)
    5d38:	048001c4 	movi	r18,7
    5d3c:	dcc02c17 	ldw	r19,176(sp)
    5d40:	00000306 	br	5d50 <___vfprintf_internal_r+0xa1c>
    5d44:	843ffc04 	addi	r16,r16,-16
    5d48:	42000204 	addi	r8,r8,8
    5d4c:	8c00130e 	bge	r17,r16,5d9c <___vfprintf_internal_r+0xa68>
    5d50:	010000b4 	movhi	r4,2
    5d54:	18c00404 	addi	r3,r3,16
    5d58:	10800044 	addi	r2,r2,1
    5d5c:	212e7284 	addi	r4,r4,-17974
    5d60:	41000015 	stw	r4,0(r8)
    5d64:	44400115 	stw	r17,4(r8)
    5d68:	d8c02015 	stw	r3,128(sp)
    5d6c:	d8801f15 	stw	r2,124(sp)
    5d70:	90bff40e 	bge	r18,r2,5d44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d44>
    5d74:	d9801e04 	addi	r6,sp,120
    5d78:	b80b883a 	mov	r5,r23
    5d7c:	9809883a 	mov	r4,r19
    5d80:	000be4c0 	call	be4c <__sprint_r>
    5d84:	103e6d1e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    5d88:	843ffc04 	addi	r16,r16,-16
    5d8c:	d8c02017 	ldw	r3,128(sp)
    5d90:	d8801f17 	ldw	r2,124(sp)
    5d94:	da000404 	addi	r8,sp,16
    5d98:	8c3fed16 	blt	r17,r16,5d50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d50>
    5d9c:	d9403517 	ldw	r5,212(sp)
    5da0:	1c07883a 	add	r3,r3,r16
    5da4:	10800044 	addi	r2,r2,1
    5da8:	41400015 	stw	r5,0(r8)
    5dac:	44000115 	stw	r16,4(r8)
    5db0:	d8c02015 	stw	r3,128(sp)
    5db4:	d8801f15 	stw	r2,124(sp)
    5db8:	010001c4 	movi	r4,7
    5dbc:	2080060e 	bge	r4,r2,5dd8 <___vfprintf_internal_r+0xaa4>
    5dc0:	d9002c17 	ldw	r4,176(sp)
    5dc4:	d9801e04 	addi	r6,sp,120
    5dc8:	b80b883a 	mov	r5,r23
    5dcc:	000be4c0 	call	be4c <__sprint_r>
    5dd0:	103e5a1e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    5dd4:	d8c02017 	ldw	r3,128(sp)
    5dd8:	d8803117 	ldw	r2,196(sp)
    5ddc:	d9002a17 	ldw	r4,168(sp)
    5de0:	1100010e 	bge	r2,r4,5de8 <___vfprintf_internal_r+0xab4>
    5de4:	2005883a 	mov	r2,r4
    5de8:	d9402f17 	ldw	r5,188(sp)
    5dec:	288b883a 	add	r5,r5,r2
    5df0:	d9402f15 	stw	r5,188(sp)
    5df4:	18019e1e 	bne	r3,zero,6470 <___vfprintf_internal_r+0x113c>
    5df8:	a8800007 	ldb	r2,0(r21)
    5dfc:	d8001f15 	stw	zero,124(sp)
    5e00:	da000404 	addi	r8,sp,16
    5e04:	103d851e 	bne	r2,zero,541c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700541c>
    5e08:	a821883a 	mov	r16,r21
    5e0c:	003d9b06 	br	547c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700547c>
    5e10:	18c03fcc 	andi	r3,r3,255
    5e14:	1805c11e 	bne	r3,zero,751c <___vfprintf_internal_r+0x21e8>
    5e18:	94800414 	ori	r18,r18,16
    5e1c:	9080080c 	andi	r2,r18,32
    5e20:	10020c26 	beq	r2,zero,6654 <___vfprintf_internal_r+0x1320>
    5e24:	d8802d17 	ldw	r2,180(sp)
    5e28:	d9002917 	ldw	r4,164(sp)
    5e2c:	d8002785 	stb	zero,158(sp)
    5e30:	10c00204 	addi	r3,r2,8
    5e34:	14c00017 	ldw	r19,0(r2)
    5e38:	15800117 	ldw	r22,4(r2)
    5e3c:	20040f16 	blt	r4,zero,6e7c <___vfprintf_internal_r+0x1b48>
    5e40:	013fdfc4 	movi	r4,-129
    5e44:	9d84b03a 	or	r2,r19,r22
    5e48:	d8c02d15 	stw	r3,180(sp)
    5e4c:	9124703a 	and	r18,r18,r4
    5e50:	0039883a 	mov	fp,zero
    5e54:	103e891e 	bne	r2,zero,587c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700587c>
    5e58:	d9002917 	ldw	r4,164(sp)
    5e5c:	2002c11e 	bne	r4,zero,6964 <___vfprintf_internal_r+0x1630>
    5e60:	d8002915 	stw	zero,164(sp)
    5e64:	d8002e15 	stw	zero,184(sp)
    5e68:	dc001e04 	addi	r16,sp,120
    5e6c:	003ef806 	br	5a50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a50>
    5e70:	18c03fcc 	andi	r3,r3,255
    5e74:	18059d1e 	bne	r3,zero,74ec <___vfprintf_internal_r+0x21b8>
    5e78:	014000b4 	movhi	r5,2
    5e7c:	296e6204 	addi	r5,r5,-18040
    5e80:	d9403915 	stw	r5,228(sp)
    5e84:	9080080c 	andi	r2,r18,32
    5e88:	10005226 	beq	r2,zero,5fd4 <___vfprintf_internal_r+0xca0>
    5e8c:	d8802d17 	ldw	r2,180(sp)
    5e90:	14c00017 	ldw	r19,0(r2)
    5e94:	15800117 	ldw	r22,4(r2)
    5e98:	10800204 	addi	r2,r2,8
    5e9c:	d8802d15 	stw	r2,180(sp)
    5ea0:	9080004c 	andi	r2,r18,1
    5ea4:	10019026 	beq	r2,zero,64e8 <___vfprintf_internal_r+0x11b4>
    5ea8:	9d84b03a 	or	r2,r19,r22
    5eac:	10036926 	beq	r2,zero,6c54 <___vfprintf_internal_r+0x1920>
    5eb0:	d8c02917 	ldw	r3,164(sp)
    5eb4:	00800c04 	movi	r2,48
    5eb8:	d8802705 	stb	r2,156(sp)
    5ebc:	dc402745 	stb	r17,157(sp)
    5ec0:	d8002785 	stb	zero,158(sp)
    5ec4:	90800094 	ori	r2,r18,2
    5ec8:	18045d16 	blt	r3,zero,7040 <___vfprintf_internal_r+0x1d0c>
    5ecc:	00bfdfc4 	movi	r2,-129
    5ed0:	90a4703a 	and	r18,r18,r2
    5ed4:	94800094 	ori	r18,r18,2
    5ed8:	0039883a 	mov	fp,zero
    5edc:	d9003917 	ldw	r4,228(sp)
    5ee0:	dc001e04 	addi	r16,sp,120
    5ee4:	988003cc 	andi	r2,r19,15
    5ee8:	b006973a 	slli	r3,r22,28
    5eec:	2085883a 	add	r2,r4,r2
    5ef0:	9826d13a 	srli	r19,r19,4
    5ef4:	10800003 	ldbu	r2,0(r2)
    5ef8:	b02cd13a 	srli	r22,r22,4
    5efc:	843fffc4 	addi	r16,r16,-1
    5f00:	1ce6b03a 	or	r19,r3,r19
    5f04:	80800005 	stb	r2,0(r16)
    5f08:	9d84b03a 	or	r2,r19,r22
    5f0c:	103ff51e 	bne	r2,zero,5ee4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ee4>
    5f10:	d8c02817 	ldw	r3,160(sp)
    5f14:	1c07c83a 	sub	r3,r3,r16
    5f18:	d8c02e15 	stw	r3,184(sp)
    5f1c:	003ecc06 	br	5a50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a50>
    5f20:	18c03fcc 	andi	r3,r3,255
    5f24:	183e9f26 	beq	r3,zero,59a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059a4>
    5f28:	d9c02785 	stb	r7,158(sp)
    5f2c:	003e9d06 	br	59a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059a4>
    5f30:	00c00044 	movi	r3,1
    5f34:	01c00ac4 	movi	r7,43
    5f38:	ac400007 	ldb	r17,0(r21)
    5f3c:	003d5e06 	br	54b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054b8>
    5f40:	94800814 	ori	r18,r18,32
    5f44:	ac400007 	ldb	r17,0(r21)
    5f48:	003d5b06 	br	54b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054b8>
    5f4c:	d8c02d17 	ldw	r3,180(sp)
    5f50:	d8002785 	stb	zero,158(sp)
    5f54:	1c000017 	ldw	r16,0(r3)
    5f58:	1cc00104 	addi	r19,r3,4
    5f5c:	80041926 	beq	r16,zero,6fc4 <___vfprintf_internal_r+0x1c90>
    5f60:	d9002917 	ldw	r4,164(sp)
    5f64:	2003d016 	blt	r4,zero,6ea8 <___vfprintf_internal_r+0x1b74>
    5f68:	200d883a 	mov	r6,r4
    5f6c:	000b883a 	mov	r5,zero
    5f70:	8009883a 	mov	r4,r16
    5f74:	da003d15 	stw	r8,244(sp)
    5f78:	000a6880 	call	a688 <memchr>
    5f7c:	da003d17 	ldw	r8,244(sp)
    5f80:	10045426 	beq	r2,zero,70d4 <___vfprintf_internal_r+0x1da0>
    5f84:	1405c83a 	sub	r2,r2,r16
    5f88:	d8802e15 	stw	r2,184(sp)
    5f8c:	1003cc16 	blt	r2,zero,6ec0 <___vfprintf_internal_r+0x1b8c>
    5f90:	df002783 	ldbu	fp,158(sp)
    5f94:	d8802a15 	stw	r2,168(sp)
    5f98:	dcc02d15 	stw	r19,180(sp)
    5f9c:	d8002915 	stw	zero,164(sp)
    5fa0:	d8003215 	stw	zero,200(sp)
    5fa4:	003eb006 	br	5a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a68>
    5fa8:	18c03fcc 	andi	r3,r3,255
    5fac:	183f9b26 	beq	r3,zero,5e1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e1c>
    5fb0:	d9c02785 	stb	r7,158(sp)
    5fb4:	003f9906 	br	5e1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e1c>
    5fb8:	18c03fcc 	andi	r3,r3,255
    5fbc:	1805551e 	bne	r3,zero,7514 <___vfprintf_internal_r+0x21e0>
    5fc0:	014000b4 	movhi	r5,2
    5fc4:	296e6704 	addi	r5,r5,-18020
    5fc8:	d9403915 	stw	r5,228(sp)
    5fcc:	9080080c 	andi	r2,r18,32
    5fd0:	103fae1e 	bne	r2,zero,5e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e8c>
    5fd4:	9080040c 	andi	r2,r18,16
    5fd8:	1002de26 	beq	r2,zero,6b54 <___vfprintf_internal_r+0x1820>
    5fdc:	d8c02d17 	ldw	r3,180(sp)
    5fe0:	002d883a 	mov	r22,zero
    5fe4:	1cc00017 	ldw	r19,0(r3)
    5fe8:	18c00104 	addi	r3,r3,4
    5fec:	d8c02d15 	stw	r3,180(sp)
    5ff0:	003fab06 	br	5ea0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ea0>
    5ff4:	38803fcc 	andi	r2,r7,255
    5ff8:	1080201c 	xori	r2,r2,128
    5ffc:	10bfe004 	addi	r2,r2,-128
    6000:	1002d21e 	bne	r2,zero,6b4c <___vfprintf_internal_r+0x1818>
    6004:	00c00044 	movi	r3,1
    6008:	01c00804 	movi	r7,32
    600c:	ac400007 	ldb	r17,0(r21)
    6010:	003d2906 	br	54b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054b8>
    6014:	94800054 	ori	r18,r18,1
    6018:	ac400007 	ldb	r17,0(r21)
    601c:	003d2606 	br	54b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054b8>
    6020:	18c03fcc 	andi	r3,r3,255
    6024:	183e0526 	beq	r3,zero,583c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700583c>
    6028:	d9c02785 	stb	r7,158(sp)
    602c:	003e0306 	br	583c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700583c>
    6030:	94801014 	ori	r18,r18,64
    6034:	ac400007 	ldb	r17,0(r21)
    6038:	003d1f06 	br	54b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054b8>
    603c:	ac400007 	ldb	r17,0(r21)
    6040:	8a438726 	beq	r17,r9,6e60 <___vfprintf_internal_r+0x1b2c>
    6044:	94800414 	ori	r18,r18,16
    6048:	003d1b06 	br	54b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054b8>
    604c:	18c03fcc 	andi	r3,r3,255
    6050:	1805341e 	bne	r3,zero,7524 <___vfprintf_internal_r+0x21f0>
    6054:	9080080c 	andi	r2,r18,32
    6058:	1002cd26 	beq	r2,zero,6b90 <___vfprintf_internal_r+0x185c>
    605c:	d9402d17 	ldw	r5,180(sp)
    6060:	d9002f17 	ldw	r4,188(sp)
    6064:	28800017 	ldw	r2,0(r5)
    6068:	2007d7fa 	srai	r3,r4,31
    606c:	29400104 	addi	r5,r5,4
    6070:	d9402d15 	stw	r5,180(sp)
    6074:	11000015 	stw	r4,0(r2)
    6078:	10c00115 	stw	r3,4(r2)
    607c:	003ce506 	br	5414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005414>
    6080:	d8c02d17 	ldw	r3,180(sp)
    6084:	d9002d17 	ldw	r4,180(sp)
    6088:	d8002785 	stb	zero,158(sp)
    608c:	18800017 	ldw	r2,0(r3)
    6090:	21000104 	addi	r4,r4,4
    6094:	00c00044 	movi	r3,1
    6098:	d8c02a15 	stw	r3,168(sp)
    609c:	d8801405 	stb	r2,80(sp)
    60a0:	d9002d15 	stw	r4,180(sp)
    60a4:	d8c02e15 	stw	r3,184(sp)
    60a8:	d8002915 	stw	zero,164(sp)
    60ac:	d8003215 	stw	zero,200(sp)
    60b0:	dc001404 	addi	r16,sp,80
    60b4:	0039883a 	mov	fp,zero
    60b8:	003e7206 	br	5a84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a84>
    60bc:	010000b4 	movhi	r4,2
    60c0:	212e6704 	addi	r4,r4,-18020
    60c4:	0039883a 	mov	fp,zero
    60c8:	d9003915 	stw	r4,228(sp)
    60cc:	04401e04 	movi	r17,120
    60d0:	003f8206 	br	5edc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005edc>
    60d4:	18c03fcc 	andi	r3,r3,255
    60d8:	1805061e 	bne	r3,zero,74f4 <___vfprintf_internal_r+0x21c0>
    60dc:	883d9126 	beq	r17,zero,5724 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005724>
    60e0:	00c00044 	movi	r3,1
    60e4:	d8c02a15 	stw	r3,168(sp)
    60e8:	dc401405 	stb	r17,80(sp)
    60ec:	d8002785 	stb	zero,158(sp)
    60f0:	003fec06 	br	60a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70060a4>
    60f4:	014000b4 	movhi	r5,2
    60f8:	296e6704 	addi	r5,r5,-18020
    60fc:	d9403915 	stw	r5,228(sp)
    6100:	d8c02d15 	stw	r3,180(sp)
    6104:	1025883a 	mov	r18,r2
    6108:	04401e04 	movi	r17,120
    610c:	9d84b03a 	or	r2,r19,r22
    6110:	1000fc1e 	bne	r2,zero,6504 <___vfprintf_internal_r+0x11d0>
    6114:	0039883a 	mov	fp,zero
    6118:	00800084 	movi	r2,2
    611c:	10803fcc 	andi	r2,r2,255
    6120:	00c00044 	movi	r3,1
    6124:	10c20f26 	beq	r2,r3,6964 <___vfprintf_internal_r+0x1630>
    6128:	00c00084 	movi	r3,2
    612c:	10fd6326 	beq	r2,r3,56bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056bc>
    6130:	003e2d06 	br	59e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059e8>
    6134:	d8c02017 	ldw	r3,128(sp)
    6138:	003e9306 	br	5b88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b88>
    613c:	00801944 	movi	r2,101
    6140:	14407e0e 	bge	r2,r17,633c <___vfprintf_internal_r+0x1008>
    6144:	d9003617 	ldw	r4,216(sp)
    6148:	d9403817 	ldw	r5,224(sp)
    614c:	000d883a 	mov	r6,zero
    6150:	000f883a 	mov	r7,zero
    6154:	d8c03c15 	stw	r3,240(sp)
    6158:	da003d15 	stw	r8,244(sp)
    615c:	0003de80 	call	3de8 <__eqdf2>
    6160:	d8c03c17 	ldw	r3,240(sp)
    6164:	da003d17 	ldw	r8,244(sp)
    6168:	1000f71e 	bne	r2,zero,6548 <___vfprintf_internal_r+0x1214>
    616c:	d8801f17 	ldw	r2,124(sp)
    6170:	010000b4 	movhi	r4,2
    6174:	212e6e04 	addi	r4,r4,-17992
    6178:	18c00044 	addi	r3,r3,1
    617c:	10800044 	addi	r2,r2,1
    6180:	41000015 	stw	r4,0(r8)
    6184:	01000044 	movi	r4,1
    6188:	41000115 	stw	r4,4(r8)
    618c:	d8c02015 	stw	r3,128(sp)
    6190:	d8801f15 	stw	r2,124(sp)
    6194:	010001c4 	movi	r4,7
    6198:	2082b816 	blt	r4,r2,6c7c <___vfprintf_internal_r+0x1948>
    619c:	42000204 	addi	r8,r8,8
    61a0:	d8802617 	ldw	r2,152(sp)
    61a4:	d9403317 	ldw	r5,204(sp)
    61a8:	11400216 	blt	r2,r5,61b4 <___vfprintf_internal_r+0xe80>
    61ac:	9080004c 	andi	r2,r18,1
    61b0:	103ed526 	beq	r2,zero,5d08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d08>
    61b4:	d8803717 	ldw	r2,220(sp)
    61b8:	d9003417 	ldw	r4,208(sp)
    61bc:	d9403717 	ldw	r5,220(sp)
    61c0:	1887883a 	add	r3,r3,r2
    61c4:	d8801f17 	ldw	r2,124(sp)
    61c8:	41000015 	stw	r4,0(r8)
    61cc:	41400115 	stw	r5,4(r8)
    61d0:	10800044 	addi	r2,r2,1
    61d4:	d8c02015 	stw	r3,128(sp)
    61d8:	d8801f15 	stw	r2,124(sp)
    61dc:	010001c4 	movi	r4,7
    61e0:	20832916 	blt	r4,r2,6e88 <___vfprintf_internal_r+0x1b54>
    61e4:	42000204 	addi	r8,r8,8
    61e8:	d8803317 	ldw	r2,204(sp)
    61ec:	143fffc4 	addi	r16,r2,-1
    61f0:	043ec50e 	bge	zero,r16,5d08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d08>
    61f4:	04400404 	movi	r17,16
    61f8:	d8801f17 	ldw	r2,124(sp)
    61fc:	8c00880e 	bge	r17,r16,6420 <___vfprintf_internal_r+0x10ec>
    6200:	014000b4 	movhi	r5,2
    6204:	296e6e84 	addi	r5,r5,-17990
    6208:	d9402b15 	stw	r5,172(sp)
    620c:	058001c4 	movi	r22,7
    6210:	dcc02c17 	ldw	r19,176(sp)
    6214:	00000306 	br	6224 <___vfprintf_internal_r+0xef0>
    6218:	42000204 	addi	r8,r8,8
    621c:	843ffc04 	addi	r16,r16,-16
    6220:	8c00820e 	bge	r17,r16,642c <___vfprintf_internal_r+0x10f8>
    6224:	18c00404 	addi	r3,r3,16
    6228:	10800044 	addi	r2,r2,1
    622c:	45000015 	stw	r20,0(r8)
    6230:	44400115 	stw	r17,4(r8)
    6234:	d8c02015 	stw	r3,128(sp)
    6238:	d8801f15 	stw	r2,124(sp)
    623c:	b0bff60e 	bge	r22,r2,6218 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006218>
    6240:	d9801e04 	addi	r6,sp,120
    6244:	b80b883a 	mov	r5,r23
    6248:	9809883a 	mov	r4,r19
    624c:	000be4c0 	call	be4c <__sprint_r>
    6250:	103d3a1e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6254:	d8c02017 	ldw	r3,128(sp)
    6258:	d8801f17 	ldw	r2,124(sp)
    625c:	da000404 	addi	r8,sp,16
    6260:	003fee06 	br	621c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700621c>
    6264:	d9403117 	ldw	r5,196(sp)
    6268:	d8802a17 	ldw	r2,168(sp)
    626c:	28adc83a 	sub	r22,r5,r2
    6270:	05be630e 	bge	zero,r22,5c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c00>
    6274:	07000404 	movi	fp,16
    6278:	d8801f17 	ldw	r2,124(sp)
    627c:	e5838f0e 	bge	fp,r22,70bc <___vfprintf_internal_r+0x1d88>
    6280:	014000b4 	movhi	r5,2
    6284:	296e6e84 	addi	r5,r5,-17990
    6288:	dc403015 	stw	r17,192(sp)
    628c:	d9402b15 	stw	r5,172(sp)
    6290:	b023883a 	mov	r17,r22
    6294:	04c001c4 	movi	r19,7
    6298:	a82d883a 	mov	r22,r21
    629c:	902b883a 	mov	r21,r18
    62a0:	8025883a 	mov	r18,r16
    62a4:	dc002c17 	ldw	r16,176(sp)
    62a8:	00000306 	br	62b8 <___vfprintf_internal_r+0xf84>
    62ac:	8c7ffc04 	addi	r17,r17,-16
    62b0:	42000204 	addi	r8,r8,8
    62b4:	e440110e 	bge	fp,r17,62fc <___vfprintf_internal_r+0xfc8>
    62b8:	18c00404 	addi	r3,r3,16
    62bc:	10800044 	addi	r2,r2,1
    62c0:	45000015 	stw	r20,0(r8)
    62c4:	47000115 	stw	fp,4(r8)
    62c8:	d8c02015 	stw	r3,128(sp)
    62cc:	d8801f15 	stw	r2,124(sp)
    62d0:	98bff60e 	bge	r19,r2,62ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70062ac>
    62d4:	d9801e04 	addi	r6,sp,120
    62d8:	b80b883a 	mov	r5,r23
    62dc:	8009883a 	mov	r4,r16
    62e0:	000be4c0 	call	be4c <__sprint_r>
    62e4:	103d151e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    62e8:	8c7ffc04 	addi	r17,r17,-16
    62ec:	d8c02017 	ldw	r3,128(sp)
    62f0:	d8801f17 	ldw	r2,124(sp)
    62f4:	da000404 	addi	r8,sp,16
    62f8:	e47fef16 	blt	fp,r17,62b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70062b8>
    62fc:	9021883a 	mov	r16,r18
    6300:	a825883a 	mov	r18,r21
    6304:	b02b883a 	mov	r21,r22
    6308:	882d883a 	mov	r22,r17
    630c:	dc403017 	ldw	r17,192(sp)
    6310:	d9002b17 	ldw	r4,172(sp)
    6314:	1d87883a 	add	r3,r3,r22
    6318:	10800044 	addi	r2,r2,1
    631c:	41000015 	stw	r4,0(r8)
    6320:	45800115 	stw	r22,4(r8)
    6324:	d8c02015 	stw	r3,128(sp)
    6328:	d8801f15 	stw	r2,124(sp)
    632c:	010001c4 	movi	r4,7
    6330:	20818e16 	blt	r4,r2,696c <___vfprintf_internal_r+0x1638>
    6334:	42000204 	addi	r8,r8,8
    6338:	003e3106 	br	5c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c00>
    633c:	d9403317 	ldw	r5,204(sp)
    6340:	00800044 	movi	r2,1
    6344:	18c00044 	addi	r3,r3,1
    6348:	1141530e 	bge	r2,r5,6898 <___vfprintf_internal_r+0x1564>
    634c:	dc401f17 	ldw	r17,124(sp)
    6350:	00800044 	movi	r2,1
    6354:	40800115 	stw	r2,4(r8)
    6358:	8c400044 	addi	r17,r17,1
    635c:	44000015 	stw	r16,0(r8)
    6360:	d8c02015 	stw	r3,128(sp)
    6364:	dc401f15 	stw	r17,124(sp)
    6368:	008001c4 	movi	r2,7
    636c:	14416b16 	blt	r2,r17,691c <___vfprintf_internal_r+0x15e8>
    6370:	42000204 	addi	r8,r8,8
    6374:	d8803717 	ldw	r2,220(sp)
    6378:	d9003417 	ldw	r4,208(sp)
    637c:	8c400044 	addi	r17,r17,1
    6380:	10c7883a 	add	r3,r2,r3
    6384:	40800115 	stw	r2,4(r8)
    6388:	41000015 	stw	r4,0(r8)
    638c:	d8c02015 	stw	r3,128(sp)
    6390:	dc401f15 	stw	r17,124(sp)
    6394:	008001c4 	movi	r2,7
    6398:	14416916 	blt	r2,r17,6940 <___vfprintf_internal_r+0x160c>
    639c:	45800204 	addi	r22,r8,8
    63a0:	d9003617 	ldw	r4,216(sp)
    63a4:	d9403817 	ldw	r5,224(sp)
    63a8:	000d883a 	mov	r6,zero
    63ac:	000f883a 	mov	r7,zero
    63b0:	d8c03c15 	stw	r3,240(sp)
    63b4:	0003de80 	call	3de8 <__eqdf2>
    63b8:	d8c03c17 	ldw	r3,240(sp)
    63bc:	1000bc26 	beq	r2,zero,66b0 <___vfprintf_internal_r+0x137c>
    63c0:	d9403317 	ldw	r5,204(sp)
    63c4:	84000044 	addi	r16,r16,1
    63c8:	8c400044 	addi	r17,r17,1
    63cc:	28bfffc4 	addi	r2,r5,-1
    63d0:	1887883a 	add	r3,r3,r2
    63d4:	b0800115 	stw	r2,4(r22)
    63d8:	b4000015 	stw	r16,0(r22)
    63dc:	d8c02015 	stw	r3,128(sp)
    63e0:	dc401f15 	stw	r17,124(sp)
    63e4:	008001c4 	movi	r2,7
    63e8:	14414316 	blt	r2,r17,68f8 <___vfprintf_internal_r+0x15c4>
    63ec:	b5800204 	addi	r22,r22,8
    63f0:	d9003a17 	ldw	r4,232(sp)
    63f4:	df0022c4 	addi	fp,sp,139
    63f8:	8c400044 	addi	r17,r17,1
    63fc:	20c7883a 	add	r3,r4,r3
    6400:	b7000015 	stw	fp,0(r22)
    6404:	b1000115 	stw	r4,4(r22)
    6408:	d8c02015 	stw	r3,128(sp)
    640c:	dc401f15 	stw	r17,124(sp)
    6410:	008001c4 	movi	r2,7
    6414:	14400e16 	blt	r2,r17,6450 <___vfprintf_internal_r+0x111c>
    6418:	b2000204 	addi	r8,r22,8
    641c:	003e3a06 	br	5d08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d08>
    6420:	010000b4 	movhi	r4,2
    6424:	212e6e84 	addi	r4,r4,-17990
    6428:	d9002b15 	stw	r4,172(sp)
    642c:	d9002b17 	ldw	r4,172(sp)
    6430:	1c07883a 	add	r3,r3,r16
    6434:	44000115 	stw	r16,4(r8)
    6438:	41000015 	stw	r4,0(r8)
    643c:	10800044 	addi	r2,r2,1
    6440:	d8c02015 	stw	r3,128(sp)
    6444:	d8801f15 	stw	r2,124(sp)
    6448:	010001c4 	movi	r4,7
    644c:	20be2d0e 	bge	r4,r2,5d04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d04>
    6450:	d9002c17 	ldw	r4,176(sp)
    6454:	d9801e04 	addi	r6,sp,120
    6458:	b80b883a 	mov	r5,r23
    645c:	000be4c0 	call	be4c <__sprint_r>
    6460:	103cb61e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6464:	d8c02017 	ldw	r3,128(sp)
    6468:	da000404 	addi	r8,sp,16
    646c:	003e2606 	br	5d08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d08>
    6470:	d9002c17 	ldw	r4,176(sp)
    6474:	d9801e04 	addi	r6,sp,120
    6478:	b80b883a 	mov	r5,r23
    647c:	000be4c0 	call	be4c <__sprint_r>
    6480:	103e5d26 	beq	r2,zero,5df8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005df8>
    6484:	003cad06 	br	573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6488:	d9002c17 	ldw	r4,176(sp)
    648c:	d9801e04 	addi	r6,sp,120
    6490:	b80b883a 	mov	r5,r23
    6494:	000be4c0 	call	be4c <__sprint_r>
    6498:	103ca81e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    649c:	d8c02017 	ldw	r3,128(sp)
    64a0:	da000404 	addi	r8,sp,16
    64a4:	003e0b06 	br	5cd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005cd4>
    64a8:	d9002c17 	ldw	r4,176(sp)
    64ac:	d9801e04 	addi	r6,sp,120
    64b0:	b80b883a 	mov	r5,r23
    64b4:	000be4c0 	call	be4c <__sprint_r>
    64b8:	103ca01e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    64bc:	d8c02017 	ldw	r3,128(sp)
    64c0:	da000404 	addi	r8,sp,16
    64c4:	003dbd06 	br	5bbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bbc>
    64c8:	d9002c17 	ldw	r4,176(sp)
    64cc:	d9801e04 	addi	r6,sp,120
    64d0:	b80b883a 	mov	r5,r23
    64d4:	000be4c0 	call	be4c <__sprint_r>
    64d8:	103c981e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    64dc:	d8c02017 	ldw	r3,128(sp)
    64e0:	da000404 	addi	r8,sp,16
    64e4:	003dc306 	br	5bf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bf4>
    64e8:	d8802917 	ldw	r2,164(sp)
    64ec:	d8002785 	stb	zero,158(sp)
    64f0:	103f0616 	blt	r2,zero,610c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700610c>
    64f4:	00ffdfc4 	movi	r3,-129
    64f8:	9d84b03a 	or	r2,r19,r22
    64fc:	90e4703a 	and	r18,r18,r3
    6500:	103c6b26 	beq	r2,zero,56b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056b0>
    6504:	0039883a 	mov	fp,zero
    6508:	003e7406 	br	5edc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005edc>
    650c:	9080040c 	andi	r2,r18,16
    6510:	1001b326 	beq	r2,zero,6be0 <___vfprintf_internal_r+0x18ac>
    6514:	d9002d17 	ldw	r4,180(sp)
    6518:	d9402917 	ldw	r5,164(sp)
    651c:	d8002785 	stb	zero,158(sp)
    6520:	20800104 	addi	r2,r4,4
    6524:	24c00017 	ldw	r19,0(r4)
    6528:	002d883a 	mov	r22,zero
    652c:	2801b516 	blt	r5,zero,6c04 <___vfprintf_internal_r+0x18d0>
    6530:	00ffdfc4 	movi	r3,-129
    6534:	d8802d15 	stw	r2,180(sp)
    6538:	90e4703a 	and	r18,r18,r3
    653c:	983d2726 	beq	r19,zero,59dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059dc>
    6540:	0039883a 	mov	fp,zero
    6544:	003d2a06 	br	59f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059f0>
    6548:	dc402617 	ldw	r17,152(sp)
    654c:	0441d30e 	bge	zero,r17,6c9c <___vfprintf_internal_r+0x1968>
    6550:	dc403217 	ldw	r17,200(sp)
    6554:	d8803317 	ldw	r2,204(sp)
    6558:	1440010e 	bge	r2,r17,6560 <___vfprintf_internal_r+0x122c>
    655c:	1023883a 	mov	r17,r2
    6560:	04400a0e 	bge	zero,r17,658c <___vfprintf_internal_r+0x1258>
    6564:	d8801f17 	ldw	r2,124(sp)
    6568:	1c47883a 	add	r3,r3,r17
    656c:	44000015 	stw	r16,0(r8)
    6570:	10800044 	addi	r2,r2,1
    6574:	44400115 	stw	r17,4(r8)
    6578:	d8c02015 	stw	r3,128(sp)
    657c:	d8801f15 	stw	r2,124(sp)
    6580:	010001c4 	movi	r4,7
    6584:	20826516 	blt	r4,r2,6f1c <___vfprintf_internal_r+0x1be8>
    6588:	42000204 	addi	r8,r8,8
    658c:	88026116 	blt	r17,zero,6f14 <___vfprintf_internal_r+0x1be0>
    6590:	d9003217 	ldw	r4,200(sp)
    6594:	2463c83a 	sub	r17,r4,r17
    6598:	04407b0e 	bge	zero,r17,6788 <___vfprintf_internal_r+0x1454>
    659c:	05800404 	movi	r22,16
    65a0:	d8801f17 	ldw	r2,124(sp)
    65a4:	b4419d0e 	bge	r22,r17,6c1c <___vfprintf_internal_r+0x18e8>
    65a8:	010000b4 	movhi	r4,2
    65ac:	212e6e84 	addi	r4,r4,-17990
    65b0:	d9002b15 	stw	r4,172(sp)
    65b4:	070001c4 	movi	fp,7
    65b8:	dcc02c17 	ldw	r19,176(sp)
    65bc:	00000306 	br	65cc <___vfprintf_internal_r+0x1298>
    65c0:	42000204 	addi	r8,r8,8
    65c4:	8c7ffc04 	addi	r17,r17,-16
    65c8:	b441970e 	bge	r22,r17,6c28 <___vfprintf_internal_r+0x18f4>
    65cc:	18c00404 	addi	r3,r3,16
    65d0:	10800044 	addi	r2,r2,1
    65d4:	45000015 	stw	r20,0(r8)
    65d8:	45800115 	stw	r22,4(r8)
    65dc:	d8c02015 	stw	r3,128(sp)
    65e0:	d8801f15 	stw	r2,124(sp)
    65e4:	e0bff60e 	bge	fp,r2,65c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70065c0>
    65e8:	d9801e04 	addi	r6,sp,120
    65ec:	b80b883a 	mov	r5,r23
    65f0:	9809883a 	mov	r4,r19
    65f4:	000be4c0 	call	be4c <__sprint_r>
    65f8:	103c501e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    65fc:	d8c02017 	ldw	r3,128(sp)
    6600:	d8801f17 	ldw	r2,124(sp)
    6604:	da000404 	addi	r8,sp,16
    6608:	003fee06 	br	65c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70065c4>
    660c:	d9002c17 	ldw	r4,176(sp)
    6610:	d9801e04 	addi	r6,sp,120
    6614:	b80b883a 	mov	r5,r23
    6618:	000be4c0 	call	be4c <__sprint_r>
    661c:	103c471e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6620:	d8c02017 	ldw	r3,128(sp)
    6624:	df002787 	ldb	fp,158(sp)
    6628:	da000404 	addi	r8,sp,16
    662c:	003d5606 	br	5b88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b88>
    6630:	9080040c 	andi	r2,r18,16
    6634:	10016126 	beq	r2,zero,6bbc <___vfprintf_internal_r+0x1888>
    6638:	d8802d17 	ldw	r2,180(sp)
    663c:	14c00017 	ldw	r19,0(r2)
    6640:	10800104 	addi	r2,r2,4
    6644:	d8802d15 	stw	r2,180(sp)
    6648:	982dd7fa 	srai	r22,r19,31
    664c:	b005883a 	mov	r2,r22
    6650:	003c8206 	br	585c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700585c>
    6654:	9080040c 	andi	r2,r18,16
    6658:	10003526 	beq	r2,zero,6730 <___vfprintf_internal_r+0x13fc>
    665c:	d9402d17 	ldw	r5,180(sp)
    6660:	d8c02917 	ldw	r3,164(sp)
    6664:	d8002785 	stb	zero,158(sp)
    6668:	28800104 	addi	r2,r5,4
    666c:	2cc00017 	ldw	r19,0(r5)
    6670:	002d883a 	mov	r22,zero
    6674:	18003716 	blt	r3,zero,6754 <___vfprintf_internal_r+0x1420>
    6678:	00ffdfc4 	movi	r3,-129
    667c:	d8802d15 	stw	r2,180(sp)
    6680:	90e4703a 	and	r18,r18,r3
    6684:	0039883a 	mov	fp,zero
    6688:	983df326 	beq	r19,zero,5e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e58>
    668c:	00800244 	movi	r2,9
    6690:	14fc7b36 	bltu	r2,r19,5880 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005880>
    6694:	d8c02817 	ldw	r3,160(sp)
    6698:	dc001dc4 	addi	r16,sp,119
    669c:	9cc00c04 	addi	r19,r19,48
    66a0:	1c07c83a 	sub	r3,r3,r16
    66a4:	dcc01dc5 	stb	r19,119(sp)
    66a8:	d8c02e15 	stw	r3,184(sp)
    66ac:	003ce806 	br	5a50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a50>
    66b0:	d8803317 	ldw	r2,204(sp)
    66b4:	143fffc4 	addi	r16,r2,-1
    66b8:	043f4d0e 	bge	zero,r16,63f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063f0>
    66bc:	07000404 	movi	fp,16
    66c0:	e400810e 	bge	fp,r16,68c8 <___vfprintf_internal_r+0x1594>
    66c4:	014000b4 	movhi	r5,2
    66c8:	296e6e84 	addi	r5,r5,-17990
    66cc:	d9402b15 	stw	r5,172(sp)
    66d0:	01c001c4 	movi	r7,7
    66d4:	dcc02c17 	ldw	r19,176(sp)
    66d8:	00000306 	br	66e8 <___vfprintf_internal_r+0x13b4>
    66dc:	b5800204 	addi	r22,r22,8
    66e0:	843ffc04 	addi	r16,r16,-16
    66e4:	e4007b0e 	bge	fp,r16,68d4 <___vfprintf_internal_r+0x15a0>
    66e8:	18c00404 	addi	r3,r3,16
    66ec:	8c400044 	addi	r17,r17,1
    66f0:	b5000015 	stw	r20,0(r22)
    66f4:	b7000115 	stw	fp,4(r22)
    66f8:	d8c02015 	stw	r3,128(sp)
    66fc:	dc401f15 	stw	r17,124(sp)
    6700:	3c7ff60e 	bge	r7,r17,66dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70066dc>
    6704:	d9801e04 	addi	r6,sp,120
    6708:	b80b883a 	mov	r5,r23
    670c:	9809883a 	mov	r4,r19
    6710:	d9c03c15 	stw	r7,240(sp)
    6714:	000be4c0 	call	be4c <__sprint_r>
    6718:	d9c03c17 	ldw	r7,240(sp)
    671c:	103c071e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6720:	d8c02017 	ldw	r3,128(sp)
    6724:	dc401f17 	ldw	r17,124(sp)
    6728:	dd800404 	addi	r22,sp,16
    672c:	003fec06 	br	66e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70066e0>
    6730:	9080100c 	andi	r2,r18,64
    6734:	d8002785 	stb	zero,158(sp)
    6738:	10010e26 	beq	r2,zero,6b74 <___vfprintf_internal_r+0x1840>
    673c:	d9002d17 	ldw	r4,180(sp)
    6740:	d9402917 	ldw	r5,164(sp)
    6744:	002d883a 	mov	r22,zero
    6748:	20800104 	addi	r2,r4,4
    674c:	24c0000b 	ldhu	r19,0(r4)
    6750:	283fc90e 	bge	r5,zero,6678 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006678>
    6754:	d8802d15 	stw	r2,180(sp)
    6758:	0039883a 	mov	fp,zero
    675c:	9d84b03a 	or	r2,r19,r22
    6760:	103c461e 	bne	r2,zero,587c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700587c>
    6764:	00800044 	movi	r2,1
    6768:	003e6c06 	br	611c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700611c>
    676c:	d9002c17 	ldw	r4,176(sp)
    6770:	d9801e04 	addi	r6,sp,120
    6774:	b80b883a 	mov	r5,r23
    6778:	000be4c0 	call	be4c <__sprint_r>
    677c:	103bef1e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6780:	d8c02017 	ldw	r3,128(sp)
    6784:	da000404 	addi	r8,sp,16
    6788:	d9003217 	ldw	r4,200(sp)
    678c:	d8802617 	ldw	r2,152(sp)
    6790:	d9403317 	ldw	r5,204(sp)
    6794:	8123883a 	add	r17,r16,r4
    6798:	11400216 	blt	r2,r5,67a4 <___vfprintf_internal_r+0x1470>
    679c:	9100004c 	andi	r4,r18,1
    67a0:	20000d26 	beq	r4,zero,67d8 <___vfprintf_internal_r+0x14a4>
    67a4:	d9003717 	ldw	r4,220(sp)
    67a8:	d9403417 	ldw	r5,208(sp)
    67ac:	1907883a 	add	r3,r3,r4
    67b0:	d9001f17 	ldw	r4,124(sp)
    67b4:	41400015 	stw	r5,0(r8)
    67b8:	d9403717 	ldw	r5,220(sp)
    67bc:	21000044 	addi	r4,r4,1
    67c0:	d8c02015 	stw	r3,128(sp)
    67c4:	41400115 	stw	r5,4(r8)
    67c8:	d9001f15 	stw	r4,124(sp)
    67cc:	014001c4 	movi	r5,7
    67d0:	2901e816 	blt	r5,r4,6f74 <___vfprintf_internal_r+0x1c40>
    67d4:	42000204 	addi	r8,r8,8
    67d8:	d9003317 	ldw	r4,204(sp)
    67dc:	8121883a 	add	r16,r16,r4
    67e0:	2085c83a 	sub	r2,r4,r2
    67e4:	8461c83a 	sub	r16,r16,r17
    67e8:	1400010e 	bge	r2,r16,67f0 <___vfprintf_internal_r+0x14bc>
    67ec:	1021883a 	mov	r16,r2
    67f0:	04000a0e 	bge	zero,r16,681c <___vfprintf_internal_r+0x14e8>
    67f4:	d9001f17 	ldw	r4,124(sp)
    67f8:	1c07883a 	add	r3,r3,r16
    67fc:	44400015 	stw	r17,0(r8)
    6800:	21000044 	addi	r4,r4,1
    6804:	44000115 	stw	r16,4(r8)
    6808:	d8c02015 	stw	r3,128(sp)
    680c:	d9001f15 	stw	r4,124(sp)
    6810:	014001c4 	movi	r5,7
    6814:	2901fb16 	blt	r5,r4,7004 <___vfprintf_internal_r+0x1cd0>
    6818:	42000204 	addi	r8,r8,8
    681c:	8001f716 	blt	r16,zero,6ffc <___vfprintf_internal_r+0x1cc8>
    6820:	1421c83a 	sub	r16,r2,r16
    6824:	043d380e 	bge	zero,r16,5d08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d08>
    6828:	04400404 	movi	r17,16
    682c:	d8801f17 	ldw	r2,124(sp)
    6830:	8c3efb0e 	bge	r17,r16,6420 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006420>
    6834:	014000b4 	movhi	r5,2
    6838:	296e6e84 	addi	r5,r5,-17990
    683c:	d9402b15 	stw	r5,172(sp)
    6840:	058001c4 	movi	r22,7
    6844:	dcc02c17 	ldw	r19,176(sp)
    6848:	00000306 	br	6858 <___vfprintf_internal_r+0x1524>
    684c:	42000204 	addi	r8,r8,8
    6850:	843ffc04 	addi	r16,r16,-16
    6854:	8c3ef50e 	bge	r17,r16,642c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700642c>
    6858:	18c00404 	addi	r3,r3,16
    685c:	10800044 	addi	r2,r2,1
    6860:	45000015 	stw	r20,0(r8)
    6864:	44400115 	stw	r17,4(r8)
    6868:	d8c02015 	stw	r3,128(sp)
    686c:	d8801f15 	stw	r2,124(sp)
    6870:	b0bff60e 	bge	r22,r2,684c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700684c>
    6874:	d9801e04 	addi	r6,sp,120
    6878:	b80b883a 	mov	r5,r23
    687c:	9809883a 	mov	r4,r19
    6880:	000be4c0 	call	be4c <__sprint_r>
    6884:	103bad1e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6888:	d8c02017 	ldw	r3,128(sp)
    688c:	d8801f17 	ldw	r2,124(sp)
    6890:	da000404 	addi	r8,sp,16
    6894:	003fee06 	br	6850 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006850>
    6898:	9088703a 	and	r4,r18,r2
    689c:	203eab1e 	bne	r4,zero,634c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700634c>
    68a0:	dc401f17 	ldw	r17,124(sp)
    68a4:	40800115 	stw	r2,4(r8)
    68a8:	44000015 	stw	r16,0(r8)
    68ac:	8c400044 	addi	r17,r17,1
    68b0:	d8c02015 	stw	r3,128(sp)
    68b4:	dc401f15 	stw	r17,124(sp)
    68b8:	008001c4 	movi	r2,7
    68bc:	14400e16 	blt	r2,r17,68f8 <___vfprintf_internal_r+0x15c4>
    68c0:	45800204 	addi	r22,r8,8
    68c4:	003eca06 	br	63f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063f0>
    68c8:	010000b4 	movhi	r4,2
    68cc:	212e6e84 	addi	r4,r4,-17990
    68d0:	d9002b15 	stw	r4,172(sp)
    68d4:	d8802b17 	ldw	r2,172(sp)
    68d8:	1c07883a 	add	r3,r3,r16
    68dc:	8c400044 	addi	r17,r17,1
    68e0:	b0800015 	stw	r2,0(r22)
    68e4:	b4000115 	stw	r16,4(r22)
    68e8:	d8c02015 	stw	r3,128(sp)
    68ec:	dc401f15 	stw	r17,124(sp)
    68f0:	008001c4 	movi	r2,7
    68f4:	147ebd0e 	bge	r2,r17,63ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063ec>
    68f8:	d9002c17 	ldw	r4,176(sp)
    68fc:	d9801e04 	addi	r6,sp,120
    6900:	b80b883a 	mov	r5,r23
    6904:	000be4c0 	call	be4c <__sprint_r>
    6908:	103b8c1e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    690c:	d8c02017 	ldw	r3,128(sp)
    6910:	dc401f17 	ldw	r17,124(sp)
    6914:	dd800404 	addi	r22,sp,16
    6918:	003eb506 	br	63f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063f0>
    691c:	d9002c17 	ldw	r4,176(sp)
    6920:	d9801e04 	addi	r6,sp,120
    6924:	b80b883a 	mov	r5,r23
    6928:	000be4c0 	call	be4c <__sprint_r>
    692c:	103b831e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6930:	d8c02017 	ldw	r3,128(sp)
    6934:	dc401f17 	ldw	r17,124(sp)
    6938:	da000404 	addi	r8,sp,16
    693c:	003e8d06 	br	6374 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006374>
    6940:	d9002c17 	ldw	r4,176(sp)
    6944:	d9801e04 	addi	r6,sp,120
    6948:	b80b883a 	mov	r5,r23
    694c:	000be4c0 	call	be4c <__sprint_r>
    6950:	103b7a1e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6954:	d8c02017 	ldw	r3,128(sp)
    6958:	dc401f17 	ldw	r17,124(sp)
    695c:	dd800404 	addi	r22,sp,16
    6960:	003e8f06 	br	63a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063a0>
    6964:	0027883a 	mov	r19,zero
    6968:	003f4a06 	br	6694 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006694>
    696c:	d9002c17 	ldw	r4,176(sp)
    6970:	d9801e04 	addi	r6,sp,120
    6974:	b80b883a 	mov	r5,r23
    6978:	000be4c0 	call	be4c <__sprint_r>
    697c:	103b6f1e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6980:	d8c02017 	ldw	r3,128(sp)
    6984:	da000404 	addi	r8,sp,16
    6988:	003c9d06 	br	5c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c00>
    698c:	04e7c83a 	sub	r19,zero,r19
    6990:	9804c03a 	cmpne	r2,r19,zero
    6994:	05adc83a 	sub	r22,zero,r22
    6998:	b0adc83a 	sub	r22,r22,r2
    699c:	d8802917 	ldw	r2,164(sp)
    69a0:	07000b44 	movi	fp,45
    69a4:	df002785 	stb	fp,158(sp)
    69a8:	10017b16 	blt	r2,zero,6f98 <___vfprintf_internal_r+0x1c64>
    69ac:	00bfdfc4 	movi	r2,-129
    69b0:	90a4703a 	and	r18,r18,r2
    69b4:	003bb106 	br	587c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700587c>
    69b8:	d9003617 	ldw	r4,216(sp)
    69bc:	d9403817 	ldw	r5,224(sp)
    69c0:	da003d15 	stw	r8,244(sp)
    69c4:	000b9d80 	call	b9d8 <__fpclassifyd>
    69c8:	da003d17 	ldw	r8,244(sp)
    69cc:	1000f026 	beq	r2,zero,6d90 <___vfprintf_internal_r+0x1a5c>
    69d0:	d9002917 	ldw	r4,164(sp)
    69d4:	05bff7c4 	movi	r22,-33
    69d8:	00bfffc4 	movi	r2,-1
    69dc:	8dac703a 	and	r22,r17,r22
    69e0:	20820026 	beq	r4,r2,71e4 <___vfprintf_internal_r+0x1eb0>
    69e4:	008011c4 	movi	r2,71
    69e8:	b081f726 	beq	r22,r2,71c8 <___vfprintf_internal_r+0x1e94>
    69ec:	d9003817 	ldw	r4,224(sp)
    69f0:	90c04014 	ori	r3,r18,256
    69f4:	d8c02b15 	stw	r3,172(sp)
    69f8:	20021516 	blt	r4,zero,7250 <___vfprintf_internal_r+0x1f1c>
    69fc:	dcc03817 	ldw	r19,224(sp)
    6a00:	d8002a05 	stb	zero,168(sp)
    6a04:	00801984 	movi	r2,102
    6a08:	8881f926 	beq	r17,r2,71f0 <___vfprintf_internal_r+0x1ebc>
    6a0c:	00801184 	movi	r2,70
    6a10:	88821c26 	beq	r17,r2,7284 <___vfprintf_internal_r+0x1f50>
    6a14:	00801144 	movi	r2,69
    6a18:	b081ef26 	beq	r22,r2,71d8 <___vfprintf_internal_r+0x1ea4>
    6a1c:	d8c02917 	ldw	r3,164(sp)
    6a20:	d8802104 	addi	r2,sp,132
    6a24:	d8800315 	stw	r2,12(sp)
    6a28:	d9403617 	ldw	r5,216(sp)
    6a2c:	d8802504 	addi	r2,sp,148
    6a30:	d9002c17 	ldw	r4,176(sp)
    6a34:	d8800215 	stw	r2,8(sp)
    6a38:	d8802604 	addi	r2,sp,152
    6a3c:	d8c00015 	stw	r3,0(sp)
    6a40:	d8800115 	stw	r2,4(sp)
    6a44:	01c00084 	movi	r7,2
    6a48:	980d883a 	mov	r6,r19
    6a4c:	d8c03c15 	stw	r3,240(sp)
    6a50:	da003d15 	stw	r8,244(sp)
    6a54:	00079580 	call	7958 <_dtoa_r>
    6a58:	1021883a 	mov	r16,r2
    6a5c:	008019c4 	movi	r2,103
    6a60:	d8c03c17 	ldw	r3,240(sp)
    6a64:	da003d17 	ldw	r8,244(sp)
    6a68:	88817126 	beq	r17,r2,7030 <___vfprintf_internal_r+0x1cfc>
    6a6c:	008011c4 	movi	r2,71
    6a70:	88829226 	beq	r17,r2,74bc <___vfprintf_internal_r+0x2188>
    6a74:	80f9883a 	add	fp,r16,r3
    6a78:	d9003617 	ldw	r4,216(sp)
    6a7c:	000d883a 	mov	r6,zero
    6a80:	000f883a 	mov	r7,zero
    6a84:	980b883a 	mov	r5,r19
    6a88:	da003d15 	stw	r8,244(sp)
    6a8c:	0003de80 	call	3de8 <__eqdf2>
    6a90:	da003d17 	ldw	r8,244(sp)
    6a94:	10018d26 	beq	r2,zero,70cc <___vfprintf_internal_r+0x1d98>
    6a98:	d8802117 	ldw	r2,132(sp)
    6a9c:	1700062e 	bgeu	r2,fp,6ab8 <___vfprintf_internal_r+0x1784>
    6aa0:	01000c04 	movi	r4,48
    6aa4:	10c00044 	addi	r3,r2,1
    6aa8:	d8c02115 	stw	r3,132(sp)
    6aac:	11000005 	stb	r4,0(r2)
    6ab0:	d8802117 	ldw	r2,132(sp)
    6ab4:	173ffb36 	bltu	r2,fp,6aa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006aa4>
    6ab8:	1405c83a 	sub	r2,r2,r16
    6abc:	d8803315 	stw	r2,204(sp)
    6ac0:	008011c4 	movi	r2,71
    6ac4:	b0817626 	beq	r22,r2,70a0 <___vfprintf_internal_r+0x1d6c>
    6ac8:	00801944 	movi	r2,101
    6acc:	1442810e 	bge	r2,r17,74d4 <___vfprintf_internal_r+0x21a0>
    6ad0:	d8c02617 	ldw	r3,152(sp)
    6ad4:	00801984 	movi	r2,102
    6ad8:	d8c03215 	stw	r3,200(sp)
    6adc:	8881fe26 	beq	r17,r2,72d8 <___vfprintf_internal_r+0x1fa4>
    6ae0:	d8c03217 	ldw	r3,200(sp)
    6ae4:	d9003317 	ldw	r4,204(sp)
    6ae8:	1901dd16 	blt	r3,r4,7260 <___vfprintf_internal_r+0x1f2c>
    6aec:	9480004c 	andi	r18,r18,1
    6af0:	90022b1e 	bne	r18,zero,73a0 <___vfprintf_internal_r+0x206c>
    6af4:	1805883a 	mov	r2,r3
    6af8:	18028016 	blt	r3,zero,74fc <___vfprintf_internal_r+0x21c8>
    6afc:	d8c03217 	ldw	r3,200(sp)
    6b00:	044019c4 	movi	r17,103
    6b04:	d8c02e15 	stw	r3,184(sp)
    6b08:	df002a07 	ldb	fp,168(sp)
    6b0c:	e001531e 	bne	fp,zero,705c <___vfprintf_internal_r+0x1d28>
    6b10:	df002783 	ldbu	fp,158(sp)
    6b14:	d8802a15 	stw	r2,168(sp)
    6b18:	dc802b17 	ldw	r18,172(sp)
    6b1c:	d8002915 	stw	zero,164(sp)
    6b20:	003bd106 	br	5a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a68>
    6b24:	d8802d17 	ldw	r2,180(sp)
    6b28:	d8c02d17 	ldw	r3,180(sp)
    6b2c:	d9002d17 	ldw	r4,180(sp)
    6b30:	10800017 	ldw	r2,0(r2)
    6b34:	18c00117 	ldw	r3,4(r3)
    6b38:	21000204 	addi	r4,r4,8
    6b3c:	d8803615 	stw	r2,216(sp)
    6b40:	d8c03815 	stw	r3,224(sp)
    6b44:	d9002d15 	stw	r4,180(sp)
    6b48:	003b7506 	br	5920 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005920>
    6b4c:	ac400007 	ldb	r17,0(r21)
    6b50:	003a5906 	br	54b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054b8>
    6b54:	9080100c 	andi	r2,r18,64
    6b58:	1000a826 	beq	r2,zero,6dfc <___vfprintf_internal_r+0x1ac8>
    6b5c:	d9002d17 	ldw	r4,180(sp)
    6b60:	002d883a 	mov	r22,zero
    6b64:	24c0000b 	ldhu	r19,0(r4)
    6b68:	21000104 	addi	r4,r4,4
    6b6c:	d9002d15 	stw	r4,180(sp)
    6b70:	003ccb06 	br	5ea0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ea0>
    6b74:	d8c02d17 	ldw	r3,180(sp)
    6b78:	d9002917 	ldw	r4,164(sp)
    6b7c:	002d883a 	mov	r22,zero
    6b80:	18800104 	addi	r2,r3,4
    6b84:	1cc00017 	ldw	r19,0(r3)
    6b88:	203ebb0e 	bge	r4,zero,6678 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006678>
    6b8c:	003ef106 	br	6754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006754>
    6b90:	9080040c 	andi	r2,r18,16
    6b94:	1000921e 	bne	r2,zero,6de0 <___vfprintf_internal_r+0x1aac>
    6b98:	9480100c 	andi	r18,r18,64
    6b9c:	90013926 	beq	r18,zero,7084 <___vfprintf_internal_r+0x1d50>
    6ba0:	d9002d17 	ldw	r4,180(sp)
    6ba4:	d9402f17 	ldw	r5,188(sp)
    6ba8:	20800017 	ldw	r2,0(r4)
    6bac:	21000104 	addi	r4,r4,4
    6bb0:	d9002d15 	stw	r4,180(sp)
    6bb4:	1140000d 	sth	r5,0(r2)
    6bb8:	003a1606 	br	5414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005414>
    6bbc:	9080100c 	andi	r2,r18,64
    6bc0:	10008026 	beq	r2,zero,6dc4 <___vfprintf_internal_r+0x1a90>
    6bc4:	d8c02d17 	ldw	r3,180(sp)
    6bc8:	1cc0000f 	ldh	r19,0(r3)
    6bcc:	18c00104 	addi	r3,r3,4
    6bd0:	d8c02d15 	stw	r3,180(sp)
    6bd4:	982dd7fa 	srai	r22,r19,31
    6bd8:	b005883a 	mov	r2,r22
    6bdc:	003b1f06 	br	585c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700585c>
    6be0:	9080100c 	andi	r2,r18,64
    6be4:	d8002785 	stb	zero,158(sp)
    6be8:	10008a1e 	bne	r2,zero,6e14 <___vfprintf_internal_r+0x1ae0>
    6bec:	d9402d17 	ldw	r5,180(sp)
    6bf0:	d8c02917 	ldw	r3,164(sp)
    6bf4:	002d883a 	mov	r22,zero
    6bf8:	28800104 	addi	r2,r5,4
    6bfc:	2cc00017 	ldw	r19,0(r5)
    6c00:	183e4b0e 	bge	r3,zero,6530 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006530>
    6c04:	9d86b03a 	or	r3,r19,r22
    6c08:	d8802d15 	stw	r2,180(sp)
    6c0c:	183e4c1e 	bne	r3,zero,6540 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006540>
    6c10:	0039883a 	mov	fp,zero
    6c14:	0005883a 	mov	r2,zero
    6c18:	003d4006 	br	611c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700611c>
    6c1c:	014000b4 	movhi	r5,2
    6c20:	296e6e84 	addi	r5,r5,-17990
    6c24:	d9402b15 	stw	r5,172(sp)
    6c28:	d9402b17 	ldw	r5,172(sp)
    6c2c:	1c47883a 	add	r3,r3,r17
    6c30:	10800044 	addi	r2,r2,1
    6c34:	41400015 	stw	r5,0(r8)
    6c38:	44400115 	stw	r17,4(r8)
    6c3c:	d8c02015 	stw	r3,128(sp)
    6c40:	d8801f15 	stw	r2,124(sp)
    6c44:	010001c4 	movi	r4,7
    6c48:	20bec816 	blt	r4,r2,676c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700676c>
    6c4c:	42000204 	addi	r8,r8,8
    6c50:	003ecd06 	br	6788 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006788>
    6c54:	d9002917 	ldw	r4,164(sp)
    6c58:	d8002785 	stb	zero,158(sp)
    6c5c:	203d2d16 	blt	r4,zero,6114 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006114>
    6c60:	00bfdfc4 	movi	r2,-129
    6c64:	90a4703a 	and	r18,r18,r2
    6c68:	003a9106 	br	56b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056b0>
    6c6c:	010000b4 	movhi	r4,2
    6c70:	212e6e84 	addi	r4,r4,-17990
    6c74:	d9002b15 	stw	r4,172(sp)
    6c78:	003c0c06 	br	5cac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005cac>
    6c7c:	d9002c17 	ldw	r4,176(sp)
    6c80:	d9801e04 	addi	r6,sp,120
    6c84:	b80b883a 	mov	r5,r23
    6c88:	000be4c0 	call	be4c <__sprint_r>
    6c8c:	103aab1e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6c90:	d8c02017 	ldw	r3,128(sp)
    6c94:	da000404 	addi	r8,sp,16
    6c98:	003d4106 	br	61a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061a0>
    6c9c:	d8801f17 	ldw	r2,124(sp)
    6ca0:	014000b4 	movhi	r5,2
    6ca4:	01000044 	movi	r4,1
    6ca8:	18c00044 	addi	r3,r3,1
    6cac:	10800044 	addi	r2,r2,1
    6cb0:	296e6e04 	addi	r5,r5,-17992
    6cb4:	41000115 	stw	r4,4(r8)
    6cb8:	41400015 	stw	r5,0(r8)
    6cbc:	d8c02015 	stw	r3,128(sp)
    6cc0:	d8801f15 	stw	r2,124(sp)
    6cc4:	010001c4 	movi	r4,7
    6cc8:	20805c16 	blt	r4,r2,6e3c <___vfprintf_internal_r+0x1b08>
    6ccc:	42000204 	addi	r8,r8,8
    6cd0:	8800041e 	bne	r17,zero,6ce4 <___vfprintf_internal_r+0x19b0>
    6cd4:	d8803317 	ldw	r2,204(sp)
    6cd8:	1000021e 	bne	r2,zero,6ce4 <___vfprintf_internal_r+0x19b0>
    6cdc:	9080004c 	andi	r2,r18,1
    6ce0:	103c0926 	beq	r2,zero,5d08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d08>
    6ce4:	d9003717 	ldw	r4,220(sp)
    6ce8:	d8801f17 	ldw	r2,124(sp)
    6cec:	d9403417 	ldw	r5,208(sp)
    6cf0:	20c7883a 	add	r3,r4,r3
    6cf4:	10800044 	addi	r2,r2,1
    6cf8:	41000115 	stw	r4,4(r8)
    6cfc:	41400015 	stw	r5,0(r8)
    6d00:	d8c02015 	stw	r3,128(sp)
    6d04:	d8801f15 	stw	r2,124(sp)
    6d08:	010001c4 	movi	r4,7
    6d0c:	20812116 	blt	r4,r2,7194 <___vfprintf_internal_r+0x1e60>
    6d10:	42000204 	addi	r8,r8,8
    6d14:	0463c83a 	sub	r17,zero,r17
    6d18:	0440730e 	bge	zero,r17,6ee8 <___vfprintf_internal_r+0x1bb4>
    6d1c:	05800404 	movi	r22,16
    6d20:	b440860e 	bge	r22,r17,6f3c <___vfprintf_internal_r+0x1c08>
    6d24:	014000b4 	movhi	r5,2
    6d28:	296e6e84 	addi	r5,r5,-17990
    6d2c:	d9402b15 	stw	r5,172(sp)
    6d30:	070001c4 	movi	fp,7
    6d34:	dcc02c17 	ldw	r19,176(sp)
    6d38:	00000306 	br	6d48 <___vfprintf_internal_r+0x1a14>
    6d3c:	42000204 	addi	r8,r8,8
    6d40:	8c7ffc04 	addi	r17,r17,-16
    6d44:	b440800e 	bge	r22,r17,6f48 <___vfprintf_internal_r+0x1c14>
    6d48:	18c00404 	addi	r3,r3,16
    6d4c:	10800044 	addi	r2,r2,1
    6d50:	45000015 	stw	r20,0(r8)
    6d54:	45800115 	stw	r22,4(r8)
    6d58:	d8c02015 	stw	r3,128(sp)
    6d5c:	d8801f15 	stw	r2,124(sp)
    6d60:	e0bff60e 	bge	fp,r2,6d3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d3c>
    6d64:	d9801e04 	addi	r6,sp,120
    6d68:	b80b883a 	mov	r5,r23
    6d6c:	9809883a 	mov	r4,r19
    6d70:	000be4c0 	call	be4c <__sprint_r>
    6d74:	103a711e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6d78:	d8c02017 	ldw	r3,128(sp)
    6d7c:	d8801f17 	ldw	r2,124(sp)
    6d80:	da000404 	addi	r8,sp,16
    6d84:	003fee06 	br	6d40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d40>
    6d88:	00bfffc4 	movi	r2,-1
    6d8c:	003a6f06 	br	574c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700574c>
    6d90:	008011c4 	movi	r2,71
    6d94:	1440b816 	blt	r2,r17,7078 <___vfprintf_internal_r+0x1d44>
    6d98:	040000b4 	movhi	r16,2
    6d9c:	842e6004 	addi	r16,r16,-18048
    6da0:	00c000c4 	movi	r3,3
    6da4:	00bfdfc4 	movi	r2,-129
    6da8:	d8c02a15 	stw	r3,168(sp)
    6dac:	90a4703a 	and	r18,r18,r2
    6db0:	df002783 	ldbu	fp,158(sp)
    6db4:	d8c02e15 	stw	r3,184(sp)
    6db8:	d8002915 	stw	zero,164(sp)
    6dbc:	d8003215 	stw	zero,200(sp)
    6dc0:	003b2906 	br	5a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a68>
    6dc4:	d9002d17 	ldw	r4,180(sp)
    6dc8:	24c00017 	ldw	r19,0(r4)
    6dcc:	21000104 	addi	r4,r4,4
    6dd0:	d9002d15 	stw	r4,180(sp)
    6dd4:	982dd7fa 	srai	r22,r19,31
    6dd8:	b005883a 	mov	r2,r22
    6ddc:	003a9f06 	br	585c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700585c>
    6de0:	d9402d17 	ldw	r5,180(sp)
    6de4:	d8c02f17 	ldw	r3,188(sp)
    6de8:	28800017 	ldw	r2,0(r5)
    6dec:	29400104 	addi	r5,r5,4
    6df0:	d9402d15 	stw	r5,180(sp)
    6df4:	10c00015 	stw	r3,0(r2)
    6df8:	00398606 	br	5414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005414>
    6dfc:	d9402d17 	ldw	r5,180(sp)
    6e00:	002d883a 	mov	r22,zero
    6e04:	2cc00017 	ldw	r19,0(r5)
    6e08:	29400104 	addi	r5,r5,4
    6e0c:	d9402d15 	stw	r5,180(sp)
    6e10:	003c2306 	br	5ea0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ea0>
    6e14:	d8c02d17 	ldw	r3,180(sp)
    6e18:	d9002917 	ldw	r4,164(sp)
    6e1c:	002d883a 	mov	r22,zero
    6e20:	18800104 	addi	r2,r3,4
    6e24:	1cc0000b 	ldhu	r19,0(r3)
    6e28:	203dc10e 	bge	r4,zero,6530 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006530>
    6e2c:	003f7506 	br	6c04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c04>
    6e30:	040000b4 	movhi	r16,2
    6e34:	842e5e04 	addi	r16,r16,-18056
    6e38:	003acc06 	br	596c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700596c>
    6e3c:	d9002c17 	ldw	r4,176(sp)
    6e40:	d9801e04 	addi	r6,sp,120
    6e44:	b80b883a 	mov	r5,r23
    6e48:	000be4c0 	call	be4c <__sprint_r>
    6e4c:	103a3b1e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6e50:	dc402617 	ldw	r17,152(sp)
    6e54:	d8c02017 	ldw	r3,128(sp)
    6e58:	da000404 	addi	r8,sp,16
    6e5c:	003f9c06 	br	6cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006cd0>
    6e60:	ac400043 	ldbu	r17,1(r21)
    6e64:	94800814 	ori	r18,r18,32
    6e68:	ad400044 	addi	r21,r21,1
    6e6c:	8c403fcc 	andi	r17,r17,255
    6e70:	8c40201c 	xori	r17,r17,128
    6e74:	8c7fe004 	addi	r17,r17,-128
    6e78:	00398f06 	br	54b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054b8>
    6e7c:	d8c02d15 	stw	r3,180(sp)
    6e80:	0039883a 	mov	fp,zero
    6e84:	003e3506 	br	675c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700675c>
    6e88:	d9002c17 	ldw	r4,176(sp)
    6e8c:	d9801e04 	addi	r6,sp,120
    6e90:	b80b883a 	mov	r5,r23
    6e94:	000be4c0 	call	be4c <__sprint_r>
    6e98:	103a281e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6e9c:	d8c02017 	ldw	r3,128(sp)
    6ea0:	da000404 	addi	r8,sp,16
    6ea4:	003cd006 	br	61e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061e8>
    6ea8:	8009883a 	mov	r4,r16
    6eac:	da003d15 	stw	r8,244(sp)
    6eb0:	000bcb80 	call	bcb8 <strlen>
    6eb4:	d8802e15 	stw	r2,184(sp)
    6eb8:	da003d17 	ldw	r8,244(sp)
    6ebc:	103c340e 	bge	r2,zero,5f90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f90>
    6ec0:	0005883a 	mov	r2,zero
    6ec4:	003c3206 	br	5f90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f90>
    6ec8:	d9002c17 	ldw	r4,176(sp)
    6ecc:	d9801e04 	addi	r6,sp,120
    6ed0:	b80b883a 	mov	r5,r23
    6ed4:	000be4c0 	call	be4c <__sprint_r>
    6ed8:	103a181e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6edc:	d8c02017 	ldw	r3,128(sp)
    6ee0:	d8801f17 	ldw	r2,124(sp)
    6ee4:	da000404 	addi	r8,sp,16
    6ee8:	d9403317 	ldw	r5,204(sp)
    6eec:	10800044 	addi	r2,r2,1
    6ef0:	44000015 	stw	r16,0(r8)
    6ef4:	28c7883a 	add	r3,r5,r3
    6ef8:	003b7d06 	br	5cf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005cf0>
    6efc:	010000b4 	movhi	r4,2
    6f00:	212e7284 	addi	r4,r4,-17974
    6f04:	d9003515 	stw	r4,212(sp)
    6f08:	003b1406 	br	5b5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b5c>
    6f0c:	013fffc4 	movi	r4,-1
    6f10:	003a3506 	br	57e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057e8>
    6f14:	0023883a 	mov	r17,zero
    6f18:	003d9d06 	br	6590 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006590>
    6f1c:	d9002c17 	ldw	r4,176(sp)
    6f20:	d9801e04 	addi	r6,sp,120
    6f24:	b80b883a 	mov	r5,r23
    6f28:	000be4c0 	call	be4c <__sprint_r>
    6f2c:	103a031e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6f30:	d8c02017 	ldw	r3,128(sp)
    6f34:	da000404 	addi	r8,sp,16
    6f38:	003d9406 	br	658c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700658c>
    6f3c:	010000b4 	movhi	r4,2
    6f40:	212e6e84 	addi	r4,r4,-17990
    6f44:	d9002b15 	stw	r4,172(sp)
    6f48:	d9002b17 	ldw	r4,172(sp)
    6f4c:	1c47883a 	add	r3,r3,r17
    6f50:	10800044 	addi	r2,r2,1
    6f54:	41000015 	stw	r4,0(r8)
    6f58:	44400115 	stw	r17,4(r8)
    6f5c:	d8c02015 	stw	r3,128(sp)
    6f60:	d8801f15 	stw	r2,124(sp)
    6f64:	010001c4 	movi	r4,7
    6f68:	20bfd716 	blt	r4,r2,6ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ec8>
    6f6c:	42000204 	addi	r8,r8,8
    6f70:	003fdd06 	br	6ee8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ee8>
    6f74:	d9002c17 	ldw	r4,176(sp)
    6f78:	d9801e04 	addi	r6,sp,120
    6f7c:	b80b883a 	mov	r5,r23
    6f80:	000be4c0 	call	be4c <__sprint_r>
    6f84:	1039ed1e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    6f88:	d8802617 	ldw	r2,152(sp)
    6f8c:	d8c02017 	ldw	r3,128(sp)
    6f90:	da000404 	addi	r8,sp,16
    6f94:	003e1006 	br	67d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70067d8>
    6f98:	00800044 	movi	r2,1
    6f9c:	10803fcc 	andi	r2,r2,255
    6fa0:	00c00044 	movi	r3,1
    6fa4:	10fa3526 	beq	r2,r3,587c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700587c>
    6fa8:	00c00084 	movi	r3,2
    6fac:	10fbcb26 	beq	r2,r3,5edc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005edc>
    6fb0:	003a8f06 	br	59f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059f0>
    6fb4:	010000b4 	movhi	r4,2
    6fb8:	212e7284 	addi	r4,r4,-17974
    6fbc:	d9003515 	stw	r4,212(sp)
    6fc0:	003b7606 	br	5d9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d9c>
    6fc4:	d8802917 	ldw	r2,164(sp)
    6fc8:	00c00184 	movi	r3,6
    6fcc:	1880012e 	bgeu	r3,r2,6fd4 <___vfprintf_internal_r+0x1ca0>
    6fd0:	1805883a 	mov	r2,r3
    6fd4:	d8802e15 	stw	r2,184(sp)
    6fd8:	1000ef16 	blt	r2,zero,7398 <___vfprintf_internal_r+0x2064>
    6fdc:	040000b4 	movhi	r16,2
    6fe0:	d8802a15 	stw	r2,168(sp)
    6fe4:	dcc02d15 	stw	r19,180(sp)
    6fe8:	d8002915 	stw	zero,164(sp)
    6fec:	d8003215 	stw	zero,200(sp)
    6ff0:	842e6c04 	addi	r16,r16,-18000
    6ff4:	0039883a 	mov	fp,zero
    6ff8:	003aa206 	br	5a84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a84>
    6ffc:	0021883a 	mov	r16,zero
    7000:	003e0706 	br	6820 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006820>
    7004:	d9002c17 	ldw	r4,176(sp)
    7008:	d9801e04 	addi	r6,sp,120
    700c:	b80b883a 	mov	r5,r23
    7010:	000be4c0 	call	be4c <__sprint_r>
    7014:	1039c91e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    7018:	d8802617 	ldw	r2,152(sp)
    701c:	d9403317 	ldw	r5,204(sp)
    7020:	d8c02017 	ldw	r3,128(sp)
    7024:	da000404 	addi	r8,sp,16
    7028:	2885c83a 	sub	r2,r5,r2
    702c:	003dfb06 	br	681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700681c>
    7030:	9080004c 	andi	r2,r18,1
    7034:	103e8f1e 	bne	r2,zero,6a74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a74>
    7038:	d8802117 	ldw	r2,132(sp)
    703c:	003e9e06 	br	6ab8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ab8>
    7040:	1025883a 	mov	r18,r2
    7044:	0039883a 	mov	fp,zero
    7048:	00800084 	movi	r2,2
    704c:	003fd306 	br	6f9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f9c>
    7050:	07000b44 	movi	fp,45
    7054:	df002785 	stb	fp,158(sp)
    7058:	003a4006 	br	595c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700595c>
    705c:	00c00b44 	movi	r3,45
    7060:	d8c02785 	stb	r3,158(sp)
    7064:	d8802a15 	stw	r2,168(sp)
    7068:	dc802b17 	ldw	r18,172(sp)
    706c:	d8002915 	stw	zero,164(sp)
    7070:	07000b44 	movi	fp,45
    7074:	003a8006 	br	5a78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a78>
    7078:	040000b4 	movhi	r16,2
    707c:	842e6104 	addi	r16,r16,-18044
    7080:	003f4706 	br	6da0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006da0>
    7084:	d8c02d17 	ldw	r3,180(sp)
    7088:	d9002f17 	ldw	r4,188(sp)
    708c:	18800017 	ldw	r2,0(r3)
    7090:	18c00104 	addi	r3,r3,4
    7094:	d8c02d15 	stw	r3,180(sp)
    7098:	11000015 	stw	r4,0(r2)
    709c:	0038dd06 	br	5414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005414>
    70a0:	dd802617 	ldw	r22,152(sp)
    70a4:	00bfff44 	movi	r2,-3
    70a8:	b0801c16 	blt	r22,r2,711c <___vfprintf_internal_r+0x1de8>
    70ac:	d9402917 	ldw	r5,164(sp)
    70b0:	2d801a16 	blt	r5,r22,711c <___vfprintf_internal_r+0x1de8>
    70b4:	dd803215 	stw	r22,200(sp)
    70b8:	003e8906 	br	6ae0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ae0>
    70bc:	010000b4 	movhi	r4,2
    70c0:	212e6e84 	addi	r4,r4,-17990
    70c4:	d9002b15 	stw	r4,172(sp)
    70c8:	003c9106 	br	6310 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006310>
    70cc:	e005883a 	mov	r2,fp
    70d0:	003e7906 	br	6ab8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ab8>
    70d4:	d9402917 	ldw	r5,164(sp)
    70d8:	df002783 	ldbu	fp,158(sp)
    70dc:	dcc02d15 	stw	r19,180(sp)
    70e0:	d9402a15 	stw	r5,168(sp)
    70e4:	d9402e15 	stw	r5,184(sp)
    70e8:	d8002915 	stw	zero,164(sp)
    70ec:	d8003215 	stw	zero,200(sp)
    70f0:	003a5d06 	br	5a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a68>
    70f4:	9080004c 	andi	r2,r18,1
    70f8:	0039883a 	mov	fp,zero
    70fc:	10000426 	beq	r2,zero,7110 <___vfprintf_internal_r+0x1ddc>
    7100:	00800c04 	movi	r2,48
    7104:	dc001dc4 	addi	r16,sp,119
    7108:	d8801dc5 	stb	r2,119(sp)
    710c:	003b8006 	br	5f10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f10>
    7110:	d8002e15 	stw	zero,184(sp)
    7114:	dc001e04 	addi	r16,sp,120
    7118:	003a4d06 	br	5a50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a50>
    711c:	8c7fff84 	addi	r17,r17,-2
    7120:	b5bfffc4 	addi	r22,r22,-1
    7124:	dd802615 	stw	r22,152(sp)
    7128:	dc4022c5 	stb	r17,139(sp)
    712c:	b000bf16 	blt	r22,zero,742c <___vfprintf_internal_r+0x20f8>
    7130:	00800ac4 	movi	r2,43
    7134:	d8802305 	stb	r2,140(sp)
    7138:	00800244 	movi	r2,9
    713c:	15807016 	blt	r2,r22,7300 <___vfprintf_internal_r+0x1fcc>
    7140:	00800c04 	movi	r2,48
    7144:	b5800c04 	addi	r22,r22,48
    7148:	d8802345 	stb	r2,141(sp)
    714c:	dd802385 	stb	r22,142(sp)
    7150:	d88023c4 	addi	r2,sp,143
    7154:	df0022c4 	addi	fp,sp,139
    7158:	d8c03317 	ldw	r3,204(sp)
    715c:	1739c83a 	sub	fp,r2,fp
    7160:	d9003317 	ldw	r4,204(sp)
    7164:	e0c7883a 	add	r3,fp,r3
    7168:	df003a15 	stw	fp,232(sp)
    716c:	d8c02e15 	stw	r3,184(sp)
    7170:	00800044 	movi	r2,1
    7174:	1100b30e 	bge	r2,r4,7444 <___vfprintf_internal_r+0x2110>
    7178:	d8c02e17 	ldw	r3,184(sp)
    717c:	18c00044 	addi	r3,r3,1
    7180:	d8c02e15 	stw	r3,184(sp)
    7184:	1805883a 	mov	r2,r3
    7188:	1800ac16 	blt	r3,zero,743c <___vfprintf_internal_r+0x2108>
    718c:	d8003215 	stw	zero,200(sp)
    7190:	003e5d06 	br	6b08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b08>
    7194:	d9002c17 	ldw	r4,176(sp)
    7198:	d9801e04 	addi	r6,sp,120
    719c:	b80b883a 	mov	r5,r23
    71a0:	000be4c0 	call	be4c <__sprint_r>
    71a4:	1039651e 	bne	r2,zero,573c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700573c>
    71a8:	dc402617 	ldw	r17,152(sp)
    71ac:	d8c02017 	ldw	r3,128(sp)
    71b0:	d8801f17 	ldw	r2,124(sp)
    71b4:	da000404 	addi	r8,sp,16
    71b8:	003ed606 	br	6d14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d14>
    71bc:	582b883a 	mov	r21,r11
    71c0:	d8002915 	stw	zero,164(sp)
    71c4:	0038bd06 	br	54bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054bc>
    71c8:	d8802917 	ldw	r2,164(sp)
    71cc:	103e071e 	bne	r2,zero,69ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70069ec>
    71d0:	dc002915 	stw	r16,164(sp)
    71d4:	003e0506 	br	69ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70069ec>
    71d8:	d9002917 	ldw	r4,164(sp)
    71dc:	20c00044 	addi	r3,r4,1
    71e0:	003e0f06 	br	6a20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a20>
    71e4:	01400184 	movi	r5,6
    71e8:	d9402915 	stw	r5,164(sp)
    71ec:	003dff06 	br	69ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70069ec>
    71f0:	d8802104 	addi	r2,sp,132
    71f4:	d8800315 	stw	r2,12(sp)
    71f8:	d8802504 	addi	r2,sp,148
    71fc:	d8800215 	stw	r2,8(sp)
    7200:	d8802604 	addi	r2,sp,152
    7204:	d8800115 	stw	r2,4(sp)
    7208:	d8802917 	ldw	r2,164(sp)
    720c:	d9403617 	ldw	r5,216(sp)
    7210:	d9002c17 	ldw	r4,176(sp)
    7214:	d8800015 	stw	r2,0(sp)
    7218:	01c000c4 	movi	r7,3
    721c:	980d883a 	mov	r6,r19
    7220:	da003d15 	stw	r8,244(sp)
    7224:	00079580 	call	7958 <_dtoa_r>
    7228:	d8c02917 	ldw	r3,164(sp)
    722c:	da003d17 	ldw	r8,244(sp)
    7230:	1021883a 	mov	r16,r2
    7234:	10f9883a 	add	fp,r2,r3
    7238:	81000007 	ldb	r4,0(r16)
    723c:	00800c04 	movi	r2,48
    7240:	20805e26 	beq	r4,r2,73bc <___vfprintf_internal_r+0x2088>
    7244:	d8c02617 	ldw	r3,152(sp)
    7248:	e0f9883a 	add	fp,fp,r3
    724c:	003e0a06 	br	6a78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a78>
    7250:	00c00b44 	movi	r3,45
    7254:	24e0003c 	xorhi	r19,r4,32768
    7258:	d8c02a05 	stb	r3,168(sp)
    725c:	003de906 	br	6a04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a04>
    7260:	d8c03217 	ldw	r3,200(sp)
    7264:	00c07a0e 	bge	zero,r3,7450 <___vfprintf_internal_r+0x211c>
    7268:	00800044 	movi	r2,1
    726c:	d9003317 	ldw	r4,204(sp)
    7270:	1105883a 	add	r2,r2,r4
    7274:	d8802e15 	stw	r2,184(sp)
    7278:	10004e16 	blt	r2,zero,73b4 <___vfprintf_internal_r+0x2080>
    727c:	044019c4 	movi	r17,103
    7280:	003e2106 	br	6b08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b08>
    7284:	d9002917 	ldw	r4,164(sp)
    7288:	d8802104 	addi	r2,sp,132
    728c:	d8800315 	stw	r2,12(sp)
    7290:	d9000015 	stw	r4,0(sp)
    7294:	d8802504 	addi	r2,sp,148
    7298:	d9403617 	ldw	r5,216(sp)
    729c:	d9002c17 	ldw	r4,176(sp)
    72a0:	d8800215 	stw	r2,8(sp)
    72a4:	d8802604 	addi	r2,sp,152
    72a8:	d8800115 	stw	r2,4(sp)
    72ac:	01c000c4 	movi	r7,3
    72b0:	980d883a 	mov	r6,r19
    72b4:	da003d15 	stw	r8,244(sp)
    72b8:	00079580 	call	7958 <_dtoa_r>
    72bc:	d8c02917 	ldw	r3,164(sp)
    72c0:	da003d17 	ldw	r8,244(sp)
    72c4:	1021883a 	mov	r16,r2
    72c8:	00801184 	movi	r2,70
    72cc:	80f9883a 	add	fp,r16,r3
    72d0:	88bfd926 	beq	r17,r2,7238 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007238>
    72d4:	003de806 	br	6a78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a78>
    72d8:	d9002917 	ldw	r4,164(sp)
    72dc:	00c04d0e 	bge	zero,r3,7414 <___vfprintf_internal_r+0x20e0>
    72e0:	2000441e 	bne	r4,zero,73f4 <___vfprintf_internal_r+0x20c0>
    72e4:	9480004c 	andi	r18,r18,1
    72e8:	9000421e 	bne	r18,zero,73f4 <___vfprintf_internal_r+0x20c0>
    72ec:	1805883a 	mov	r2,r3
    72f0:	18007016 	blt	r3,zero,74b4 <___vfprintf_internal_r+0x2180>
    72f4:	d8c03217 	ldw	r3,200(sp)
    72f8:	d8c02e15 	stw	r3,184(sp)
    72fc:	003e0206 	br	6b08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b08>
    7300:	df0022c4 	addi	fp,sp,139
    7304:	dc002915 	stw	r16,164(sp)
    7308:	4027883a 	mov	r19,r8
    730c:	e021883a 	mov	r16,fp
    7310:	b009883a 	mov	r4,r22
    7314:	01400284 	movi	r5,10
    7318:	0002ab40 	call	2ab4 <__modsi3>
    731c:	10800c04 	addi	r2,r2,48
    7320:	843fffc4 	addi	r16,r16,-1
    7324:	b009883a 	mov	r4,r22
    7328:	01400284 	movi	r5,10
    732c:	80800005 	stb	r2,0(r16)
    7330:	0002a300 	call	2a30 <__divsi3>
    7334:	102d883a 	mov	r22,r2
    7338:	00800244 	movi	r2,9
    733c:	15bff416 	blt	r2,r22,7310 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007310>
    7340:	9811883a 	mov	r8,r19
    7344:	b0800c04 	addi	r2,r22,48
    7348:	8027883a 	mov	r19,r16
    734c:	997fffc4 	addi	r5,r19,-1
    7350:	98bfffc5 	stb	r2,-1(r19)
    7354:	dc002917 	ldw	r16,164(sp)
    7358:	2f006a2e 	bgeu	r5,fp,7504 <___vfprintf_internal_r+0x21d0>
    735c:	d9c02384 	addi	r7,sp,142
    7360:	3ccfc83a 	sub	r7,r7,r19
    7364:	d9002344 	addi	r4,sp,141
    7368:	e1cf883a 	add	r7,fp,r7
    736c:	00000106 	br	7374 <___vfprintf_internal_r+0x2040>
    7370:	28800003 	ldbu	r2,0(r5)
    7374:	20800005 	stb	r2,0(r4)
    7378:	21000044 	addi	r4,r4,1
    737c:	29400044 	addi	r5,r5,1
    7380:	393ffb1e 	bne	r7,r4,7370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007370>
    7384:	d8802304 	addi	r2,sp,140
    7388:	14c5c83a 	sub	r2,r2,r19
    738c:	d8c02344 	addi	r3,sp,141
    7390:	1885883a 	add	r2,r3,r2
    7394:	003f7006 	br	7158 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007158>
    7398:	0005883a 	mov	r2,zero
    739c:	003f0f06 	br	6fdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006fdc>
    73a0:	d8c03217 	ldw	r3,200(sp)
    73a4:	18c00044 	addi	r3,r3,1
    73a8:	d8c02e15 	stw	r3,184(sp)
    73ac:	1805883a 	mov	r2,r3
    73b0:	183fb20e 	bge	r3,zero,727c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700727c>
    73b4:	0005883a 	mov	r2,zero
    73b8:	003fb006 	br	727c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700727c>
    73bc:	d9003617 	ldw	r4,216(sp)
    73c0:	000d883a 	mov	r6,zero
    73c4:	000f883a 	mov	r7,zero
    73c8:	980b883a 	mov	r5,r19
    73cc:	d8c03c15 	stw	r3,240(sp)
    73d0:	da003d15 	stw	r8,244(sp)
    73d4:	0003de80 	call	3de8 <__eqdf2>
    73d8:	d8c03c17 	ldw	r3,240(sp)
    73dc:	da003d17 	ldw	r8,244(sp)
    73e0:	103f9826 	beq	r2,zero,7244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007244>
    73e4:	00800044 	movi	r2,1
    73e8:	10c7c83a 	sub	r3,r2,r3
    73ec:	d8c02615 	stw	r3,152(sp)
    73f0:	003f9506 	br	7248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007248>
    73f4:	d9002917 	ldw	r4,164(sp)
    73f8:	d8c03217 	ldw	r3,200(sp)
    73fc:	20800044 	addi	r2,r4,1
    7400:	1885883a 	add	r2,r3,r2
    7404:	d8802e15 	stw	r2,184(sp)
    7408:	103dbf0e 	bge	r2,zero,6b08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b08>
    740c:	0005883a 	mov	r2,zero
    7410:	003dbd06 	br	6b08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b08>
    7414:	2000211e 	bne	r4,zero,749c <___vfprintf_internal_r+0x2168>
    7418:	9480004c 	andi	r18,r18,1
    741c:	90001f1e 	bne	r18,zero,749c <___vfprintf_internal_r+0x2168>
    7420:	00800044 	movi	r2,1
    7424:	d8802e15 	stw	r2,184(sp)
    7428:	003db706 	br	6b08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b08>
    742c:	00800b44 	movi	r2,45
    7430:	05adc83a 	sub	r22,zero,r22
    7434:	d8802305 	stb	r2,140(sp)
    7438:	003f3f06 	br	7138 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007138>
    743c:	0005883a 	mov	r2,zero
    7440:	003f5206 	br	718c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700718c>
    7444:	90a4703a 	and	r18,r18,r2
    7448:	903f4e26 	beq	r18,zero,7184 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007184>
    744c:	003f4a06 	br	7178 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007178>
    7450:	00800084 	movi	r2,2
    7454:	10c5c83a 	sub	r2,r2,r3
    7458:	003f8406 	br	726c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700726c>
    745c:	d8802d17 	ldw	r2,180(sp)
    7460:	d9002d17 	ldw	r4,180(sp)
    7464:	ac400043 	ldbu	r17,1(r21)
    7468:	10800017 	ldw	r2,0(r2)
    746c:	582b883a 	mov	r21,r11
    7470:	d8802915 	stw	r2,164(sp)
    7474:	20800104 	addi	r2,r4,4
    7478:	d9002917 	ldw	r4,164(sp)
    747c:	d8802d15 	stw	r2,180(sp)
    7480:	203e7a0e 	bge	r4,zero,6e6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e6c>
    7484:	8c403fcc 	andi	r17,r17,255
    7488:	00bfffc4 	movi	r2,-1
    748c:	8c40201c 	xori	r17,r17,128
    7490:	d8802915 	stw	r2,164(sp)
    7494:	8c7fe004 	addi	r17,r17,-128
    7498:	00380706 	br	54b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054b8>
    749c:	d8c02917 	ldw	r3,164(sp)
    74a0:	18c00084 	addi	r3,r3,2
    74a4:	d8c02e15 	stw	r3,184(sp)
    74a8:	1805883a 	mov	r2,r3
    74ac:	183d960e 	bge	r3,zero,6b08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b08>
    74b0:	003fd606 	br	740c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700740c>
    74b4:	0005883a 	mov	r2,zero
    74b8:	003f8e06 	br	72f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70072f4>
    74bc:	9080004c 	andi	r2,r18,1
    74c0:	103f811e 	bne	r2,zero,72c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70072c8>
    74c4:	d8802117 	ldw	r2,132(sp)
    74c8:	1405c83a 	sub	r2,r2,r16
    74cc:	d8803315 	stw	r2,204(sp)
    74d0:	b47ef326 	beq	r22,r17,70a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070a0>
    74d4:	dd802617 	ldw	r22,152(sp)
    74d8:	003f1106 	br	7120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007120>
    74dc:	d9c02785 	stb	r7,158(sp)
    74e0:	00390406 	br	58f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70058f4>
    74e4:	d9c02785 	stb	r7,158(sp)
    74e8:	0038d306 	br	5838 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005838>
    74ec:	d9c02785 	stb	r7,158(sp)
    74f0:	003a6106 	br	5e78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e78>
    74f4:	d9c02785 	stb	r7,158(sp)
    74f8:	003af806 	br	60dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70060dc>
    74fc:	0005883a 	mov	r2,zero
    7500:	003d7e06 	br	6afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006afc>
    7504:	d8802344 	addi	r2,sp,141
    7508:	003f1306 	br	7158 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007158>
    750c:	d9c02785 	stb	r7,158(sp)
    7510:	00392306 	br	59a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059a0>
    7514:	d9c02785 	stb	r7,158(sp)
    7518:	003aa906 	br	5fc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005fc0>
    751c:	d9c02785 	stb	r7,158(sp)
    7520:	003a3d06 	br	5e18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e18>
    7524:	d9c02785 	stb	r7,158(sp)
    7528:	003aca06 	br	6054 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006054>

0000752c <__vfprintf_internal>:
    752c:	008000b4 	movhi	r2,2
    7530:	10b73804 	addi	r2,r2,-8992
    7534:	300f883a 	mov	r7,r6
    7538:	280d883a 	mov	r6,r5
    753c:	200b883a 	mov	r5,r4
    7540:	11000017 	ldw	r4,0(r2)
    7544:	00053341 	jmpi	5334 <___vfprintf_internal_r>

00007548 <__sbprintf>:
    7548:	2880030b 	ldhu	r2,12(r5)
    754c:	2ac01917 	ldw	r11,100(r5)
    7550:	2a80038b 	ldhu	r10,14(r5)
    7554:	2a400717 	ldw	r9,28(r5)
    7558:	2a000917 	ldw	r8,36(r5)
    755c:	defee204 	addi	sp,sp,-1144
    7560:	00c10004 	movi	r3,1024
    7564:	dc011a15 	stw	r16,1128(sp)
    7568:	10bfff4c 	andi	r2,r2,65533
    756c:	2821883a 	mov	r16,r5
    7570:	d8cb883a 	add	r5,sp,r3
    7574:	dc811c15 	stw	r18,1136(sp)
    7578:	dc411b15 	stw	r17,1132(sp)
    757c:	dfc11d15 	stw	ra,1140(sp)
    7580:	2025883a 	mov	r18,r4
    7584:	d881030d 	sth	r2,1036(sp)
    7588:	dac11915 	stw	r11,1124(sp)
    758c:	da81038d 	sth	r10,1038(sp)
    7590:	da410715 	stw	r9,1052(sp)
    7594:	da010915 	stw	r8,1060(sp)
    7598:	dec10015 	stw	sp,1024(sp)
    759c:	dec10415 	stw	sp,1040(sp)
    75a0:	d8c10215 	stw	r3,1032(sp)
    75a4:	d8c10515 	stw	r3,1044(sp)
    75a8:	d8010615 	stw	zero,1048(sp)
    75ac:	00053340 	call	5334 <___vfprintf_internal_r>
    75b0:	1023883a 	mov	r17,r2
    75b4:	10000416 	blt	r2,zero,75c8 <__sbprintf+0x80>
    75b8:	d9410004 	addi	r5,sp,1024
    75bc:	9009883a 	mov	r4,r18
    75c0:	00091fc0 	call	91fc <_fflush_r>
    75c4:	10000d1e 	bne	r2,zero,75fc <__sbprintf+0xb4>
    75c8:	d881030b 	ldhu	r2,1036(sp)
    75cc:	1080100c 	andi	r2,r2,64
    75d0:	10000326 	beq	r2,zero,75e0 <__sbprintf+0x98>
    75d4:	8080030b 	ldhu	r2,12(r16)
    75d8:	10801014 	ori	r2,r2,64
    75dc:	8080030d 	sth	r2,12(r16)
    75e0:	8805883a 	mov	r2,r17
    75e4:	dfc11d17 	ldw	ra,1140(sp)
    75e8:	dc811c17 	ldw	r18,1136(sp)
    75ec:	dc411b17 	ldw	r17,1132(sp)
    75f0:	dc011a17 	ldw	r16,1128(sp)
    75f4:	dec11e04 	addi	sp,sp,1144
    75f8:	f800283a 	ret
    75fc:	047fffc4 	movi	r17,-1
    7600:	003ff106 	br	75c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075c8>

00007604 <__swsetup_r>:
    7604:	008000b4 	movhi	r2,2
    7608:	defffd04 	addi	sp,sp,-12
    760c:	10b73804 	addi	r2,r2,-8992
    7610:	dc400115 	stw	r17,4(sp)
    7614:	2023883a 	mov	r17,r4
    7618:	11000017 	ldw	r4,0(r2)
    761c:	dc000015 	stw	r16,0(sp)
    7620:	dfc00215 	stw	ra,8(sp)
    7624:	2821883a 	mov	r16,r5
    7628:	20000226 	beq	r4,zero,7634 <__swsetup_r+0x30>
    762c:	20800e17 	ldw	r2,56(r4)
    7630:	10003126 	beq	r2,zero,76f8 <__swsetup_r+0xf4>
    7634:	8080030b 	ldhu	r2,12(r16)
    7638:	10c0020c 	andi	r3,r2,8
    763c:	1009883a 	mov	r4,r2
    7640:	18000f26 	beq	r3,zero,7680 <__swsetup_r+0x7c>
    7644:	80c00417 	ldw	r3,16(r16)
    7648:	18001526 	beq	r3,zero,76a0 <__swsetup_r+0x9c>
    764c:	1100004c 	andi	r4,r2,1
    7650:	20001c1e 	bne	r4,zero,76c4 <__swsetup_r+0xc0>
    7654:	1080008c 	andi	r2,r2,2
    7658:	1000291e 	bne	r2,zero,7700 <__swsetup_r+0xfc>
    765c:	80800517 	ldw	r2,20(r16)
    7660:	80800215 	stw	r2,8(r16)
    7664:	18001c26 	beq	r3,zero,76d8 <__swsetup_r+0xd4>
    7668:	0005883a 	mov	r2,zero
    766c:	dfc00217 	ldw	ra,8(sp)
    7670:	dc400117 	ldw	r17,4(sp)
    7674:	dc000017 	ldw	r16,0(sp)
    7678:	dec00304 	addi	sp,sp,12
    767c:	f800283a 	ret
    7680:	2080040c 	andi	r2,r4,16
    7684:	10002e26 	beq	r2,zero,7740 <__swsetup_r+0x13c>
    7688:	2080010c 	andi	r2,r4,4
    768c:	10001e1e 	bne	r2,zero,7708 <__swsetup_r+0x104>
    7690:	80c00417 	ldw	r3,16(r16)
    7694:	20800214 	ori	r2,r4,8
    7698:	8080030d 	sth	r2,12(r16)
    769c:	183feb1e 	bne	r3,zero,764c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700764c>
    76a0:	1100a00c 	andi	r4,r2,640
    76a4:	01408004 	movi	r5,512
    76a8:	217fe826 	beq	r4,r5,764c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700764c>
    76ac:	800b883a 	mov	r5,r16
    76b0:	8809883a 	mov	r4,r17
    76b4:	0009cc00 	call	9cc0 <__smakebuf_r>
    76b8:	8080030b 	ldhu	r2,12(r16)
    76bc:	80c00417 	ldw	r3,16(r16)
    76c0:	003fe206 	br	764c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700764c>
    76c4:	80800517 	ldw	r2,20(r16)
    76c8:	80000215 	stw	zero,8(r16)
    76cc:	0085c83a 	sub	r2,zero,r2
    76d0:	80800615 	stw	r2,24(r16)
    76d4:	183fe41e 	bne	r3,zero,7668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007668>
    76d8:	80c0030b 	ldhu	r3,12(r16)
    76dc:	0005883a 	mov	r2,zero
    76e0:	1900200c 	andi	r4,r3,128
    76e4:	203fe126 	beq	r4,zero,766c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700766c>
    76e8:	18c01014 	ori	r3,r3,64
    76ec:	80c0030d 	sth	r3,12(r16)
    76f0:	00bfffc4 	movi	r2,-1
    76f4:	003fdd06 	br	766c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700766c>
    76f8:	00095d80 	call	95d8 <__sinit>
    76fc:	003fcd06 	br	7634 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007634>
    7700:	0005883a 	mov	r2,zero
    7704:	003fd606 	br	7660 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007660>
    7708:	81400c17 	ldw	r5,48(r16)
    770c:	28000626 	beq	r5,zero,7728 <__swsetup_r+0x124>
    7710:	80801004 	addi	r2,r16,64
    7714:	28800326 	beq	r5,r2,7724 <__swsetup_r+0x120>
    7718:	8809883a 	mov	r4,r17
    771c:	000974c0 	call	974c <_free_r>
    7720:	8100030b 	ldhu	r4,12(r16)
    7724:	80000c15 	stw	zero,48(r16)
    7728:	80c00417 	ldw	r3,16(r16)
    772c:	00bff6c4 	movi	r2,-37
    7730:	1108703a 	and	r4,r2,r4
    7734:	80000115 	stw	zero,4(r16)
    7738:	80c00015 	stw	r3,0(r16)
    773c:	003fd506 	br	7694 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007694>
    7740:	00800244 	movi	r2,9
    7744:	88800015 	stw	r2,0(r17)
    7748:	20801014 	ori	r2,r4,64
    774c:	8080030d 	sth	r2,12(r16)
    7750:	00bfffc4 	movi	r2,-1
    7754:	003fc506 	br	766c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700766c>

00007758 <quorem>:
    7758:	defff704 	addi	sp,sp,-36
    775c:	dc800215 	stw	r18,8(sp)
    7760:	20800417 	ldw	r2,16(r4)
    7764:	2c800417 	ldw	r18,16(r5)
    7768:	dfc00815 	stw	ra,32(sp)
    776c:	ddc00715 	stw	r23,28(sp)
    7770:	dd800615 	stw	r22,24(sp)
    7774:	dd400515 	stw	r21,20(sp)
    7778:	dd000415 	stw	r20,16(sp)
    777c:	dcc00315 	stw	r19,12(sp)
    7780:	dc400115 	stw	r17,4(sp)
    7784:	dc000015 	stw	r16,0(sp)
    7788:	14807116 	blt	r2,r18,7950 <quorem+0x1f8>
    778c:	94bfffc4 	addi	r18,r18,-1
    7790:	94ad883a 	add	r22,r18,r18
    7794:	b5ad883a 	add	r22,r22,r22
    7798:	2c400504 	addi	r17,r5,20
    779c:	8da9883a 	add	r20,r17,r22
    77a0:	25400504 	addi	r21,r4,20
    77a4:	282f883a 	mov	r23,r5
    77a8:	adad883a 	add	r22,r21,r22
    77ac:	a1400017 	ldw	r5,0(r20)
    77b0:	2021883a 	mov	r16,r4
    77b4:	b1000017 	ldw	r4,0(r22)
    77b8:	29400044 	addi	r5,r5,1
    77bc:	0002b280 	call	2b28 <__udivsi3>
    77c0:	1027883a 	mov	r19,r2
    77c4:	10002c26 	beq	r2,zero,7878 <quorem+0x120>
    77c8:	a813883a 	mov	r9,r21
    77cc:	880b883a 	mov	r5,r17
    77d0:	0009883a 	mov	r4,zero
    77d4:	000d883a 	mov	r6,zero
    77d8:	2a000017 	ldw	r8,0(r5)
    77dc:	49c00017 	ldw	r7,0(r9)
    77e0:	29400104 	addi	r5,r5,4
    77e4:	40bfffcc 	andi	r2,r8,65535
    77e8:	14c5383a 	mul	r2,r2,r19
    77ec:	4010d43a 	srli	r8,r8,16
    77f0:	38ffffcc 	andi	r3,r7,65535
    77f4:	1105883a 	add	r2,r2,r4
    77f8:	1008d43a 	srli	r4,r2,16
    77fc:	44d1383a 	mul	r8,r8,r19
    7800:	198d883a 	add	r6,r3,r6
    7804:	10ffffcc 	andi	r3,r2,65535
    7808:	30c7c83a 	sub	r3,r6,r3
    780c:	380ed43a 	srli	r7,r7,16
    7810:	4105883a 	add	r2,r8,r4
    7814:	180dd43a 	srai	r6,r3,16
    7818:	113fffcc 	andi	r4,r2,65535
    781c:	390fc83a 	sub	r7,r7,r4
    7820:	398d883a 	add	r6,r7,r6
    7824:	300e943a 	slli	r7,r6,16
    7828:	18ffffcc 	andi	r3,r3,65535
    782c:	1008d43a 	srli	r4,r2,16
    7830:	38ceb03a 	or	r7,r7,r3
    7834:	49c00015 	stw	r7,0(r9)
    7838:	300dd43a 	srai	r6,r6,16
    783c:	4a400104 	addi	r9,r9,4
    7840:	a17fe52e 	bgeu	r20,r5,77d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70077d8>
    7844:	b0800017 	ldw	r2,0(r22)
    7848:	10000b1e 	bne	r2,zero,7878 <quorem+0x120>
    784c:	b0bfff04 	addi	r2,r22,-4
    7850:	a880082e 	bgeu	r21,r2,7874 <quorem+0x11c>
    7854:	b0ffff17 	ldw	r3,-4(r22)
    7858:	18000326 	beq	r3,zero,7868 <quorem+0x110>
    785c:	00000506 	br	7874 <quorem+0x11c>
    7860:	10c00017 	ldw	r3,0(r2)
    7864:	1800031e 	bne	r3,zero,7874 <quorem+0x11c>
    7868:	10bfff04 	addi	r2,r2,-4
    786c:	94bfffc4 	addi	r18,r18,-1
    7870:	a8bffb36 	bltu	r21,r2,7860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007860>
    7874:	84800415 	stw	r18,16(r16)
    7878:	b80b883a 	mov	r5,r23
    787c:	8009883a 	mov	r4,r16
    7880:	000b2a40 	call	b2a4 <__mcmp>
    7884:	10002616 	blt	r2,zero,7920 <quorem+0x1c8>
    7888:	9cc00044 	addi	r19,r19,1
    788c:	a805883a 	mov	r2,r21
    7890:	000b883a 	mov	r5,zero
    7894:	11000017 	ldw	r4,0(r2)
    7898:	89800017 	ldw	r6,0(r17)
    789c:	10800104 	addi	r2,r2,4
    78a0:	20ffffcc 	andi	r3,r4,65535
    78a4:	194b883a 	add	r5,r3,r5
    78a8:	30ffffcc 	andi	r3,r6,65535
    78ac:	28c7c83a 	sub	r3,r5,r3
    78b0:	300cd43a 	srli	r6,r6,16
    78b4:	2008d43a 	srli	r4,r4,16
    78b8:	180bd43a 	srai	r5,r3,16
    78bc:	18ffffcc 	andi	r3,r3,65535
    78c0:	2189c83a 	sub	r4,r4,r6
    78c4:	2149883a 	add	r4,r4,r5
    78c8:	200c943a 	slli	r6,r4,16
    78cc:	8c400104 	addi	r17,r17,4
    78d0:	200bd43a 	srai	r5,r4,16
    78d4:	30c6b03a 	or	r3,r6,r3
    78d8:	10ffff15 	stw	r3,-4(r2)
    78dc:	a47fed2e 	bgeu	r20,r17,7894 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007894>
    78e0:	9485883a 	add	r2,r18,r18
    78e4:	1085883a 	add	r2,r2,r2
    78e8:	a887883a 	add	r3,r21,r2
    78ec:	18800017 	ldw	r2,0(r3)
    78f0:	10000b1e 	bne	r2,zero,7920 <quorem+0x1c8>
    78f4:	18bfff04 	addi	r2,r3,-4
    78f8:	a880082e 	bgeu	r21,r2,791c <quorem+0x1c4>
    78fc:	18ffff17 	ldw	r3,-4(r3)
    7900:	18000326 	beq	r3,zero,7910 <quorem+0x1b8>
    7904:	00000506 	br	791c <quorem+0x1c4>
    7908:	10c00017 	ldw	r3,0(r2)
    790c:	1800031e 	bne	r3,zero,791c <quorem+0x1c4>
    7910:	10bfff04 	addi	r2,r2,-4
    7914:	94bfffc4 	addi	r18,r18,-1
    7918:	a8bffb36 	bltu	r21,r2,7908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007908>
    791c:	84800415 	stw	r18,16(r16)
    7920:	9805883a 	mov	r2,r19
    7924:	dfc00817 	ldw	ra,32(sp)
    7928:	ddc00717 	ldw	r23,28(sp)
    792c:	dd800617 	ldw	r22,24(sp)
    7930:	dd400517 	ldw	r21,20(sp)
    7934:	dd000417 	ldw	r20,16(sp)
    7938:	dcc00317 	ldw	r19,12(sp)
    793c:	dc800217 	ldw	r18,8(sp)
    7940:	dc400117 	ldw	r17,4(sp)
    7944:	dc000017 	ldw	r16,0(sp)
    7948:	dec00904 	addi	sp,sp,36
    794c:	f800283a 	ret
    7950:	0005883a 	mov	r2,zero
    7954:	003ff306 	br	7924 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007924>

00007958 <_dtoa_r>:
    7958:	20801017 	ldw	r2,64(r4)
    795c:	deffde04 	addi	sp,sp,-136
    7960:	df002015 	stw	fp,128(sp)
    7964:	dcc01b15 	stw	r19,108(sp)
    7968:	dc801a15 	stw	r18,104(sp)
    796c:	dc401915 	stw	r17,100(sp)
    7970:	dc001815 	stw	r16,96(sp)
    7974:	dfc02115 	stw	ra,132(sp)
    7978:	ddc01f15 	stw	r23,124(sp)
    797c:	dd801e15 	stw	r22,120(sp)
    7980:	dd401d15 	stw	r21,116(sp)
    7984:	dd001c15 	stw	r20,112(sp)
    7988:	d9c00315 	stw	r7,12(sp)
    798c:	2039883a 	mov	fp,r4
    7990:	3023883a 	mov	r17,r6
    7994:	2825883a 	mov	r18,r5
    7998:	dc002417 	ldw	r16,144(sp)
    799c:	3027883a 	mov	r19,r6
    79a0:	10000826 	beq	r2,zero,79c4 <_dtoa_r+0x6c>
    79a4:	21801117 	ldw	r6,68(r4)
    79a8:	00c00044 	movi	r3,1
    79ac:	100b883a 	mov	r5,r2
    79b0:	1986983a 	sll	r3,r3,r6
    79b4:	11800115 	stw	r6,4(r2)
    79b8:	10c00215 	stw	r3,8(r2)
    79bc:	000aa840 	call	aa84 <_Bfree>
    79c0:	e0001015 	stw	zero,64(fp)
    79c4:	88002e16 	blt	r17,zero,7a80 <_dtoa_r+0x128>
    79c8:	80000015 	stw	zero,0(r16)
    79cc:	889ffc2c 	andhi	r2,r17,32752
    79d0:	00dffc34 	movhi	r3,32752
    79d4:	10c01c26 	beq	r2,r3,7a48 <_dtoa_r+0xf0>
    79d8:	000d883a 	mov	r6,zero
    79dc:	000f883a 	mov	r7,zero
    79e0:	9009883a 	mov	r4,r18
    79e4:	980b883a 	mov	r5,r19
    79e8:	0003de80 	call	3de8 <__eqdf2>
    79ec:	10002b1e 	bne	r2,zero,7a9c <_dtoa_r+0x144>
    79f0:	d9c02317 	ldw	r7,140(sp)
    79f4:	00800044 	movi	r2,1
    79f8:	38800015 	stw	r2,0(r7)
    79fc:	d8802517 	ldw	r2,148(sp)
    7a00:	10019e26 	beq	r2,zero,807c <_dtoa_r+0x724>
    7a04:	d8c02517 	ldw	r3,148(sp)
    7a08:	008000b4 	movhi	r2,2
    7a0c:	10ae6e44 	addi	r2,r2,-17991
    7a10:	18800015 	stw	r2,0(r3)
    7a14:	10bfffc4 	addi	r2,r2,-1
    7a18:	dfc02117 	ldw	ra,132(sp)
    7a1c:	df002017 	ldw	fp,128(sp)
    7a20:	ddc01f17 	ldw	r23,124(sp)
    7a24:	dd801e17 	ldw	r22,120(sp)
    7a28:	dd401d17 	ldw	r21,116(sp)
    7a2c:	dd001c17 	ldw	r20,112(sp)
    7a30:	dcc01b17 	ldw	r19,108(sp)
    7a34:	dc801a17 	ldw	r18,104(sp)
    7a38:	dc401917 	ldw	r17,100(sp)
    7a3c:	dc001817 	ldw	r16,96(sp)
    7a40:	dec02204 	addi	sp,sp,136
    7a44:	f800283a 	ret
    7a48:	d8c02317 	ldw	r3,140(sp)
    7a4c:	0089c3c4 	movi	r2,9999
    7a50:	18800015 	stw	r2,0(r3)
    7a54:	90017726 	beq	r18,zero,8034 <_dtoa_r+0x6dc>
    7a58:	008000b4 	movhi	r2,2
    7a5c:	10ae7a04 	addi	r2,r2,-17944
    7a60:	d9002517 	ldw	r4,148(sp)
    7a64:	203fec26 	beq	r4,zero,7a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a18>
    7a68:	10c000c7 	ldb	r3,3(r2)
    7a6c:	1801781e 	bne	r3,zero,8050 <_dtoa_r+0x6f8>
    7a70:	10c000c4 	addi	r3,r2,3
    7a74:	d9802517 	ldw	r6,148(sp)
    7a78:	30c00015 	stw	r3,0(r6)
    7a7c:	003fe606 	br	7a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a18>
    7a80:	04e00034 	movhi	r19,32768
    7a84:	9cffffc4 	addi	r19,r19,-1
    7a88:	00800044 	movi	r2,1
    7a8c:	8ce6703a 	and	r19,r17,r19
    7a90:	80800015 	stw	r2,0(r16)
    7a94:	9823883a 	mov	r17,r19
    7a98:	003fcc06 	br	79cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70079cc>
    7a9c:	d8800204 	addi	r2,sp,8
    7aa0:	d8800015 	stw	r2,0(sp)
    7aa4:	d9c00104 	addi	r7,sp,4
    7aa8:	900b883a 	mov	r5,r18
    7aac:	980d883a 	mov	r6,r19
    7ab0:	e009883a 	mov	r4,fp
    7ab4:	8820d53a 	srli	r16,r17,20
    7ab8:	000b6700 	call	b670 <__d2b>
    7abc:	d8800915 	stw	r2,36(sp)
    7ac0:	8001651e 	bne	r16,zero,8058 <_dtoa_r+0x700>
    7ac4:	dd800217 	ldw	r22,8(sp)
    7ac8:	dc000117 	ldw	r16,4(sp)
    7acc:	00800804 	movi	r2,32
    7ad0:	b421883a 	add	r16,r22,r16
    7ad4:	80c10c84 	addi	r3,r16,1074
    7ad8:	10c2d10e 	bge	r2,r3,8620 <_dtoa_r+0xcc8>
    7adc:	00801004 	movi	r2,64
    7ae0:	81010484 	addi	r4,r16,1042
    7ae4:	10c7c83a 	sub	r3,r2,r3
    7ae8:	9108d83a 	srl	r4,r18,r4
    7aec:	88e2983a 	sll	r17,r17,r3
    7af0:	2448b03a 	or	r4,r4,r17
    7af4:	000f3ec0 	call	f3ec <__floatunsidf>
    7af8:	017f8434 	movhi	r5,65040
    7afc:	01800044 	movi	r6,1
    7b00:	1009883a 	mov	r4,r2
    7b04:	194b883a 	add	r5,r3,r5
    7b08:	843fffc4 	addi	r16,r16,-1
    7b0c:	d9801115 	stw	r6,68(sp)
    7b10:	000d883a 	mov	r6,zero
    7b14:	01cffe34 	movhi	r7,16376
    7b18:	00046640 	call	4664 <__subdf3>
    7b1c:	0198dbf4 	movhi	r6,25455
    7b20:	01cff4f4 	movhi	r7,16339
    7b24:	3190d844 	addi	r6,r6,17249
    7b28:	39e1e9c4 	addi	r7,r7,-30809
    7b2c:	1009883a 	mov	r4,r2
    7b30:	180b883a 	mov	r5,r3
    7b34:	0003f4c0 	call	3f4c <__muldf3>
    7b38:	01a2d874 	movhi	r6,35681
    7b3c:	01cff1f4 	movhi	r7,16327
    7b40:	31b22cc4 	addi	r6,r6,-14157
    7b44:	39e28a04 	addi	r7,r7,-30168
    7b48:	180b883a 	mov	r5,r3
    7b4c:	1009883a 	mov	r4,r2
    7b50:	0002c540 	call	2c54 <__adddf3>
    7b54:	8009883a 	mov	r4,r16
    7b58:	1029883a 	mov	r20,r2
    7b5c:	1823883a 	mov	r17,r3
    7b60:	0004fe00 	call	4fe0 <__floatsidf>
    7b64:	019427f4 	movhi	r6,20639
    7b68:	01cff4f4 	movhi	r7,16339
    7b6c:	319e7ec4 	addi	r6,r6,31227
    7b70:	39d104c4 	addi	r7,r7,17427
    7b74:	1009883a 	mov	r4,r2
    7b78:	180b883a 	mov	r5,r3
    7b7c:	0003f4c0 	call	3f4c <__muldf3>
    7b80:	100d883a 	mov	r6,r2
    7b84:	180f883a 	mov	r7,r3
    7b88:	a009883a 	mov	r4,r20
    7b8c:	880b883a 	mov	r5,r17
    7b90:	0002c540 	call	2c54 <__adddf3>
    7b94:	1009883a 	mov	r4,r2
    7b98:	180b883a 	mov	r5,r3
    7b9c:	1029883a 	mov	r20,r2
    7ba0:	1823883a 	mov	r17,r3
    7ba4:	0004f600 	call	4f60 <__fixdfsi>
    7ba8:	000d883a 	mov	r6,zero
    7bac:	000f883a 	mov	r7,zero
    7bb0:	a009883a 	mov	r4,r20
    7bb4:	880b883a 	mov	r5,r17
    7bb8:	d8800515 	stw	r2,20(sp)
    7bbc:	000f2f80 	call	f2f8 <__ledf2>
    7bc0:	10028716 	blt	r2,zero,85e0 <_dtoa_r+0xc88>
    7bc4:	d8c00517 	ldw	r3,20(sp)
    7bc8:	00800584 	movi	r2,22
    7bcc:	10c27536 	bltu	r2,r3,85a4 <_dtoa_r+0xc4c>
    7bd0:	180490fa 	slli	r2,r3,3
    7bd4:	00c000b4 	movhi	r3,2
    7bd8:	18ee9604 	addi	r3,r3,-17832
    7bdc:	1885883a 	add	r2,r3,r2
    7be0:	11000017 	ldw	r4,0(r2)
    7be4:	11400117 	ldw	r5,4(r2)
    7be8:	900d883a 	mov	r6,r18
    7bec:	980f883a 	mov	r7,r19
    7bf0:	0003e700 	call	3e70 <__gedf2>
    7bf4:	00828d0e 	bge	zero,r2,862c <_dtoa_r+0xcd4>
    7bf8:	d9000517 	ldw	r4,20(sp)
    7bfc:	d8000e15 	stw	zero,56(sp)
    7c00:	213fffc4 	addi	r4,r4,-1
    7c04:	d9000515 	stw	r4,20(sp)
    7c08:	b42dc83a 	sub	r22,r22,r16
    7c0c:	b5bfffc4 	addi	r22,r22,-1
    7c10:	b0026f16 	blt	r22,zero,85d0 <_dtoa_r+0xc78>
    7c14:	d8000815 	stw	zero,32(sp)
    7c18:	d9c00517 	ldw	r7,20(sp)
    7c1c:	38026416 	blt	r7,zero,85b0 <_dtoa_r+0xc58>
    7c20:	b1ed883a 	add	r22,r22,r7
    7c24:	d9c00d15 	stw	r7,52(sp)
    7c28:	d8000a15 	stw	zero,40(sp)
    7c2c:	d9800317 	ldw	r6,12(sp)
    7c30:	00800244 	movi	r2,9
    7c34:	11811436 	bltu	r2,r6,8088 <_dtoa_r+0x730>
    7c38:	00800144 	movi	r2,5
    7c3c:	1184e10e 	bge	r2,r6,8fc4 <_dtoa_r+0x166c>
    7c40:	31bfff04 	addi	r6,r6,-4
    7c44:	d9800315 	stw	r6,12(sp)
    7c48:	0023883a 	mov	r17,zero
    7c4c:	d9800317 	ldw	r6,12(sp)
    7c50:	008000c4 	movi	r2,3
    7c54:	30836726 	beq	r6,r2,89f4 <_dtoa_r+0x109c>
    7c58:	1183410e 	bge	r2,r6,8960 <_dtoa_r+0x1008>
    7c5c:	d9c00317 	ldw	r7,12(sp)
    7c60:	00800104 	movi	r2,4
    7c64:	38827c26 	beq	r7,r2,8658 <_dtoa_r+0xd00>
    7c68:	00800144 	movi	r2,5
    7c6c:	3884c41e 	bne	r7,r2,8f80 <_dtoa_r+0x1628>
    7c70:	00800044 	movi	r2,1
    7c74:	d8800b15 	stw	r2,44(sp)
    7c78:	d8c00517 	ldw	r3,20(sp)
    7c7c:	d9002217 	ldw	r4,136(sp)
    7c80:	1907883a 	add	r3,r3,r4
    7c84:	19800044 	addi	r6,r3,1
    7c88:	d8c00c15 	stw	r3,48(sp)
    7c8c:	d9800615 	stw	r6,24(sp)
    7c90:	0183a40e 	bge	zero,r6,8b24 <_dtoa_r+0x11cc>
    7c94:	d9800617 	ldw	r6,24(sp)
    7c98:	3021883a 	mov	r16,r6
    7c9c:	e0001115 	stw	zero,68(fp)
    7ca0:	008005c4 	movi	r2,23
    7ca4:	1184c92e 	bgeu	r2,r6,8fcc <_dtoa_r+0x1674>
    7ca8:	00c00044 	movi	r3,1
    7cac:	00800104 	movi	r2,4
    7cb0:	1085883a 	add	r2,r2,r2
    7cb4:	11000504 	addi	r4,r2,20
    7cb8:	180b883a 	mov	r5,r3
    7cbc:	18c00044 	addi	r3,r3,1
    7cc0:	313ffb2e 	bgeu	r6,r4,7cb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007cb0>
    7cc4:	e1401115 	stw	r5,68(fp)
    7cc8:	e009883a 	mov	r4,fp
    7ccc:	000a9dc0 	call	a9dc <_Balloc>
    7cd0:	d8800715 	stw	r2,28(sp)
    7cd4:	e0801015 	stw	r2,64(fp)
    7cd8:	00800384 	movi	r2,14
    7cdc:	1400f736 	bltu	r2,r16,80bc <_dtoa_r+0x764>
    7ce0:	8800f626 	beq	r17,zero,80bc <_dtoa_r+0x764>
    7ce4:	d9c00517 	ldw	r7,20(sp)
    7ce8:	01c39a0e 	bge	zero,r7,8b54 <_dtoa_r+0x11fc>
    7cec:	388003cc 	andi	r2,r7,15
    7cf0:	100490fa 	slli	r2,r2,3
    7cf4:	382bd13a 	srai	r21,r7,4
    7cf8:	00c000b4 	movhi	r3,2
    7cfc:	18ee9604 	addi	r3,r3,-17832
    7d00:	1885883a 	add	r2,r3,r2
    7d04:	a8c0040c 	andi	r3,r21,16
    7d08:	12400017 	ldw	r9,0(r2)
    7d0c:	12000117 	ldw	r8,4(r2)
    7d10:	18037926 	beq	r3,zero,8af8 <_dtoa_r+0x11a0>
    7d14:	008000b4 	movhi	r2,2
    7d18:	10ae8c04 	addi	r2,r2,-17872
    7d1c:	11800817 	ldw	r6,32(r2)
    7d20:	11c00917 	ldw	r7,36(r2)
    7d24:	9009883a 	mov	r4,r18
    7d28:	980b883a 	mov	r5,r19
    7d2c:	da001715 	stw	r8,92(sp)
    7d30:	da401615 	stw	r9,88(sp)
    7d34:	00035000 	call	3500 <__divdf3>
    7d38:	da001717 	ldw	r8,92(sp)
    7d3c:	da401617 	ldw	r9,88(sp)
    7d40:	ad4003cc 	andi	r21,r21,15
    7d44:	040000c4 	movi	r16,3
    7d48:	1023883a 	mov	r17,r2
    7d4c:	1829883a 	mov	r20,r3
    7d50:	a8001126 	beq	r21,zero,7d98 <_dtoa_r+0x440>
    7d54:	05c000b4 	movhi	r23,2
    7d58:	bdee8c04 	addi	r23,r23,-17872
    7d5c:	4805883a 	mov	r2,r9
    7d60:	4007883a 	mov	r3,r8
    7d64:	a980004c 	andi	r6,r21,1
    7d68:	1009883a 	mov	r4,r2
    7d6c:	a82bd07a 	srai	r21,r21,1
    7d70:	180b883a 	mov	r5,r3
    7d74:	30000426 	beq	r6,zero,7d88 <_dtoa_r+0x430>
    7d78:	b9800017 	ldw	r6,0(r23)
    7d7c:	b9c00117 	ldw	r7,4(r23)
    7d80:	84000044 	addi	r16,r16,1
    7d84:	0003f4c0 	call	3f4c <__muldf3>
    7d88:	bdc00204 	addi	r23,r23,8
    7d8c:	a83ff51e 	bne	r21,zero,7d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d64>
    7d90:	1013883a 	mov	r9,r2
    7d94:	1811883a 	mov	r8,r3
    7d98:	480d883a 	mov	r6,r9
    7d9c:	400f883a 	mov	r7,r8
    7da0:	8809883a 	mov	r4,r17
    7da4:	a00b883a 	mov	r5,r20
    7da8:	00035000 	call	3500 <__divdf3>
    7dac:	d8800f15 	stw	r2,60(sp)
    7db0:	d8c01015 	stw	r3,64(sp)
    7db4:	d8c00e17 	ldw	r3,56(sp)
    7db8:	18000626 	beq	r3,zero,7dd4 <_dtoa_r+0x47c>
    7dbc:	d9000f17 	ldw	r4,60(sp)
    7dc0:	d9401017 	ldw	r5,64(sp)
    7dc4:	000d883a 	mov	r6,zero
    7dc8:	01cffc34 	movhi	r7,16368
    7dcc:	000f2f80 	call	f2f8 <__ledf2>
    7dd0:	10040b16 	blt	r2,zero,8e00 <_dtoa_r+0x14a8>
    7dd4:	8009883a 	mov	r4,r16
    7dd8:	0004fe00 	call	4fe0 <__floatsidf>
    7ddc:	d9800f17 	ldw	r6,60(sp)
    7de0:	d9c01017 	ldw	r7,64(sp)
    7de4:	1009883a 	mov	r4,r2
    7de8:	180b883a 	mov	r5,r3
    7dec:	0003f4c0 	call	3f4c <__muldf3>
    7df0:	000d883a 	mov	r6,zero
    7df4:	01d00734 	movhi	r7,16412
    7df8:	1009883a 	mov	r4,r2
    7dfc:	180b883a 	mov	r5,r3
    7e00:	0002c540 	call	2c54 <__adddf3>
    7e04:	1021883a 	mov	r16,r2
    7e08:	d8800617 	ldw	r2,24(sp)
    7e0c:	047f3034 	movhi	r17,64704
    7e10:	1c63883a 	add	r17,r3,r17
    7e14:	10031826 	beq	r2,zero,8a78 <_dtoa_r+0x1120>
    7e18:	d8c00517 	ldw	r3,20(sp)
    7e1c:	db000617 	ldw	r12,24(sp)
    7e20:	d8c01315 	stw	r3,76(sp)
    7e24:	d9000b17 	ldw	r4,44(sp)
    7e28:	20038f26 	beq	r4,zero,8c68 <_dtoa_r+0x1310>
    7e2c:	60bfffc4 	addi	r2,r12,-1
    7e30:	100490fa 	slli	r2,r2,3
    7e34:	00c000b4 	movhi	r3,2
    7e38:	18ee9604 	addi	r3,r3,-17832
    7e3c:	1885883a 	add	r2,r3,r2
    7e40:	11800017 	ldw	r6,0(r2)
    7e44:	11c00117 	ldw	r7,4(r2)
    7e48:	d8800717 	ldw	r2,28(sp)
    7e4c:	0009883a 	mov	r4,zero
    7e50:	014ff834 	movhi	r5,16352
    7e54:	db001615 	stw	r12,88(sp)
    7e58:	15c00044 	addi	r23,r2,1
    7e5c:	00035000 	call	3500 <__divdf3>
    7e60:	800d883a 	mov	r6,r16
    7e64:	880f883a 	mov	r7,r17
    7e68:	1009883a 	mov	r4,r2
    7e6c:	180b883a 	mov	r5,r3
    7e70:	00046640 	call	4664 <__subdf3>
    7e74:	d9401017 	ldw	r5,64(sp)
    7e78:	d9000f17 	ldw	r4,60(sp)
    7e7c:	102b883a 	mov	r21,r2
    7e80:	d8c01215 	stw	r3,72(sp)
    7e84:	0004f600 	call	4f60 <__fixdfsi>
    7e88:	1009883a 	mov	r4,r2
    7e8c:	1029883a 	mov	r20,r2
    7e90:	0004fe00 	call	4fe0 <__floatsidf>
    7e94:	d9000f17 	ldw	r4,60(sp)
    7e98:	d9401017 	ldw	r5,64(sp)
    7e9c:	100d883a 	mov	r6,r2
    7ea0:	180f883a 	mov	r7,r3
    7ea4:	00046640 	call	4664 <__subdf3>
    7ea8:	1823883a 	mov	r17,r3
    7eac:	d8c00717 	ldw	r3,28(sp)
    7eb0:	d9401217 	ldw	r5,72(sp)
    7eb4:	a2000c04 	addi	r8,r20,48
    7eb8:	1021883a 	mov	r16,r2
    7ebc:	1a000005 	stb	r8,0(r3)
    7ec0:	800d883a 	mov	r6,r16
    7ec4:	880f883a 	mov	r7,r17
    7ec8:	a809883a 	mov	r4,r21
    7ecc:	4029883a 	mov	r20,r8
    7ed0:	0003e700 	call	3e70 <__gedf2>
    7ed4:	00841d16 	blt	zero,r2,8f4c <_dtoa_r+0x15f4>
    7ed8:	800d883a 	mov	r6,r16
    7edc:	880f883a 	mov	r7,r17
    7ee0:	0009883a 	mov	r4,zero
    7ee4:	014ffc34 	movhi	r5,16368
    7ee8:	00046640 	call	4664 <__subdf3>
    7eec:	d9401217 	ldw	r5,72(sp)
    7ef0:	100d883a 	mov	r6,r2
    7ef4:	180f883a 	mov	r7,r3
    7ef8:	a809883a 	mov	r4,r21
    7efc:	0003e700 	call	3e70 <__gedf2>
    7f00:	db001617 	ldw	r12,88(sp)
    7f04:	00840e16 	blt	zero,r2,8f40 <_dtoa_r+0x15e8>
    7f08:	00800044 	movi	r2,1
    7f0c:	13006b0e 	bge	r2,r12,80bc <_dtoa_r+0x764>
    7f10:	d9000717 	ldw	r4,28(sp)
    7f14:	dd800f15 	stw	r22,60(sp)
    7f18:	dcc01015 	stw	r19,64(sp)
    7f1c:	2319883a 	add	r12,r4,r12
    7f20:	dcc01217 	ldw	r19,72(sp)
    7f24:	602d883a 	mov	r22,r12
    7f28:	dc801215 	stw	r18,72(sp)
    7f2c:	b825883a 	mov	r18,r23
    7f30:	00000906 	br	7f58 <_dtoa_r+0x600>
    7f34:	00046640 	call	4664 <__subdf3>
    7f38:	a80d883a 	mov	r6,r21
    7f3c:	980f883a 	mov	r7,r19
    7f40:	1009883a 	mov	r4,r2
    7f44:	180b883a 	mov	r5,r3
    7f48:	000f2f80 	call	f2f8 <__ledf2>
    7f4c:	1003e816 	blt	r2,zero,8ef0 <_dtoa_r+0x1598>
    7f50:	b825883a 	mov	r18,r23
    7f54:	bd83e926 	beq	r23,r22,8efc <_dtoa_r+0x15a4>
    7f58:	a809883a 	mov	r4,r21
    7f5c:	980b883a 	mov	r5,r19
    7f60:	000d883a 	mov	r6,zero
    7f64:	01d00934 	movhi	r7,16420
    7f68:	0003f4c0 	call	3f4c <__muldf3>
    7f6c:	000d883a 	mov	r6,zero
    7f70:	01d00934 	movhi	r7,16420
    7f74:	8009883a 	mov	r4,r16
    7f78:	880b883a 	mov	r5,r17
    7f7c:	102b883a 	mov	r21,r2
    7f80:	1827883a 	mov	r19,r3
    7f84:	0003f4c0 	call	3f4c <__muldf3>
    7f88:	180b883a 	mov	r5,r3
    7f8c:	1009883a 	mov	r4,r2
    7f90:	1821883a 	mov	r16,r3
    7f94:	1023883a 	mov	r17,r2
    7f98:	0004f600 	call	4f60 <__fixdfsi>
    7f9c:	1009883a 	mov	r4,r2
    7fa0:	1029883a 	mov	r20,r2
    7fa4:	0004fe00 	call	4fe0 <__floatsidf>
    7fa8:	8809883a 	mov	r4,r17
    7fac:	800b883a 	mov	r5,r16
    7fb0:	100d883a 	mov	r6,r2
    7fb4:	180f883a 	mov	r7,r3
    7fb8:	00046640 	call	4664 <__subdf3>
    7fbc:	a5000c04 	addi	r20,r20,48
    7fc0:	a80d883a 	mov	r6,r21
    7fc4:	980f883a 	mov	r7,r19
    7fc8:	1009883a 	mov	r4,r2
    7fcc:	180b883a 	mov	r5,r3
    7fd0:	95000005 	stb	r20,0(r18)
    7fd4:	1021883a 	mov	r16,r2
    7fd8:	1823883a 	mov	r17,r3
    7fdc:	000f2f80 	call	f2f8 <__ledf2>
    7fe0:	bdc00044 	addi	r23,r23,1
    7fe4:	800d883a 	mov	r6,r16
    7fe8:	880f883a 	mov	r7,r17
    7fec:	0009883a 	mov	r4,zero
    7ff0:	014ffc34 	movhi	r5,16368
    7ff4:	103fcf0e 	bge	r2,zero,7f34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f34>
    7ff8:	d8c01317 	ldw	r3,76(sp)
    7ffc:	d8c00515 	stw	r3,20(sp)
    8000:	d9400917 	ldw	r5,36(sp)
    8004:	e009883a 	mov	r4,fp
    8008:	000aa840 	call	aa84 <_Bfree>
    800c:	d9000517 	ldw	r4,20(sp)
    8010:	d9802317 	ldw	r6,140(sp)
    8014:	d9c02517 	ldw	r7,148(sp)
    8018:	b8000005 	stb	zero,0(r23)
    801c:	20800044 	addi	r2,r4,1
    8020:	30800015 	stw	r2,0(r6)
    8024:	3802aa26 	beq	r7,zero,8ad0 <_dtoa_r+0x1178>
    8028:	3dc00015 	stw	r23,0(r7)
    802c:	d8800717 	ldw	r2,28(sp)
    8030:	003e7906 	br	7a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a18>
    8034:	00800434 	movhi	r2,16
    8038:	10bfffc4 	addi	r2,r2,-1
    803c:	88a2703a 	and	r17,r17,r2
    8040:	883e851e 	bne	r17,zero,7a58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a58>
    8044:	008000b4 	movhi	r2,2
    8048:	10ae7704 	addi	r2,r2,-17956
    804c:	003e8406 	br	7a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a60>
    8050:	10c00204 	addi	r3,r2,8
    8054:	003e8706 	br	7a74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a74>
    8058:	01400434 	movhi	r5,16
    805c:	297fffc4 	addi	r5,r5,-1
    8060:	994a703a 	and	r5,r19,r5
    8064:	9009883a 	mov	r4,r18
    8068:	843f0044 	addi	r16,r16,-1023
    806c:	294ffc34 	orhi	r5,r5,16368
    8070:	dd800217 	ldw	r22,8(sp)
    8074:	d8001115 	stw	zero,68(sp)
    8078:	003ea506 	br	7b10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b10>
    807c:	008000b4 	movhi	r2,2
    8080:	10ae6e04 	addi	r2,r2,-17992
    8084:	003e6406 	br	7a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a18>
    8088:	e0001115 	stw	zero,68(fp)
    808c:	000b883a 	mov	r5,zero
    8090:	e009883a 	mov	r4,fp
    8094:	000a9dc0 	call	a9dc <_Balloc>
    8098:	01bfffc4 	movi	r6,-1
    809c:	01c00044 	movi	r7,1
    80a0:	d8800715 	stw	r2,28(sp)
    80a4:	d9800c15 	stw	r6,48(sp)
    80a8:	e0801015 	stw	r2,64(fp)
    80ac:	d8000315 	stw	zero,12(sp)
    80b0:	d9c00b15 	stw	r7,44(sp)
    80b4:	d9800615 	stw	r6,24(sp)
    80b8:	d8002215 	stw	zero,136(sp)
    80bc:	d8800117 	ldw	r2,4(sp)
    80c0:	10008916 	blt	r2,zero,82e8 <_dtoa_r+0x990>
    80c4:	d9000517 	ldw	r4,20(sp)
    80c8:	00c00384 	movi	r3,14
    80cc:	19008616 	blt	r3,r4,82e8 <_dtoa_r+0x990>
    80d0:	200490fa 	slli	r2,r4,3
    80d4:	00c000b4 	movhi	r3,2
    80d8:	d9802217 	ldw	r6,136(sp)
    80dc:	18ee9604 	addi	r3,r3,-17832
    80e0:	1885883a 	add	r2,r3,r2
    80e4:	14000017 	ldw	r16,0(r2)
    80e8:	14400117 	ldw	r17,4(r2)
    80ec:	30016316 	blt	r6,zero,867c <_dtoa_r+0xd24>
    80f0:	800d883a 	mov	r6,r16
    80f4:	880f883a 	mov	r7,r17
    80f8:	9009883a 	mov	r4,r18
    80fc:	980b883a 	mov	r5,r19
    8100:	00035000 	call	3500 <__divdf3>
    8104:	180b883a 	mov	r5,r3
    8108:	1009883a 	mov	r4,r2
    810c:	0004f600 	call	4f60 <__fixdfsi>
    8110:	1009883a 	mov	r4,r2
    8114:	102b883a 	mov	r21,r2
    8118:	0004fe00 	call	4fe0 <__floatsidf>
    811c:	800d883a 	mov	r6,r16
    8120:	880f883a 	mov	r7,r17
    8124:	1009883a 	mov	r4,r2
    8128:	180b883a 	mov	r5,r3
    812c:	0003f4c0 	call	3f4c <__muldf3>
    8130:	100d883a 	mov	r6,r2
    8134:	180f883a 	mov	r7,r3
    8138:	9009883a 	mov	r4,r18
    813c:	980b883a 	mov	r5,r19
    8140:	00046640 	call	4664 <__subdf3>
    8144:	d9c00717 	ldw	r7,28(sp)
    8148:	1009883a 	mov	r4,r2
    814c:	a8800c04 	addi	r2,r21,48
    8150:	38800005 	stb	r2,0(r7)
    8154:	3dc00044 	addi	r23,r7,1
    8158:	d9c00617 	ldw	r7,24(sp)
    815c:	01800044 	movi	r6,1
    8160:	180b883a 	mov	r5,r3
    8164:	2005883a 	mov	r2,r4
    8168:	39803826 	beq	r7,r6,824c <_dtoa_r+0x8f4>
    816c:	000d883a 	mov	r6,zero
    8170:	01d00934 	movhi	r7,16420
    8174:	0003f4c0 	call	3f4c <__muldf3>
    8178:	000d883a 	mov	r6,zero
    817c:	000f883a 	mov	r7,zero
    8180:	1009883a 	mov	r4,r2
    8184:	180b883a 	mov	r5,r3
    8188:	1025883a 	mov	r18,r2
    818c:	1827883a 	mov	r19,r3
    8190:	0003de80 	call	3de8 <__eqdf2>
    8194:	103f9a26 	beq	r2,zero,8000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008000>
    8198:	d9c00617 	ldw	r7,24(sp)
    819c:	d8c00717 	ldw	r3,28(sp)
    81a0:	b829883a 	mov	r20,r23
    81a4:	38bfffc4 	addi	r2,r7,-1
    81a8:	18ad883a 	add	r22,r3,r2
    81ac:	00000a06 	br	81d8 <_dtoa_r+0x880>
    81b0:	0003f4c0 	call	3f4c <__muldf3>
    81b4:	000d883a 	mov	r6,zero
    81b8:	000f883a 	mov	r7,zero
    81bc:	1009883a 	mov	r4,r2
    81c0:	180b883a 	mov	r5,r3
    81c4:	1025883a 	mov	r18,r2
    81c8:	1827883a 	mov	r19,r3
    81cc:	b829883a 	mov	r20,r23
    81d0:	0003de80 	call	3de8 <__eqdf2>
    81d4:	103f8a26 	beq	r2,zero,8000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008000>
    81d8:	800d883a 	mov	r6,r16
    81dc:	880f883a 	mov	r7,r17
    81e0:	9009883a 	mov	r4,r18
    81e4:	980b883a 	mov	r5,r19
    81e8:	00035000 	call	3500 <__divdf3>
    81ec:	180b883a 	mov	r5,r3
    81f0:	1009883a 	mov	r4,r2
    81f4:	0004f600 	call	4f60 <__fixdfsi>
    81f8:	1009883a 	mov	r4,r2
    81fc:	102b883a 	mov	r21,r2
    8200:	0004fe00 	call	4fe0 <__floatsidf>
    8204:	800d883a 	mov	r6,r16
    8208:	880f883a 	mov	r7,r17
    820c:	1009883a 	mov	r4,r2
    8210:	180b883a 	mov	r5,r3
    8214:	0003f4c0 	call	3f4c <__muldf3>
    8218:	100d883a 	mov	r6,r2
    821c:	180f883a 	mov	r7,r3
    8220:	9009883a 	mov	r4,r18
    8224:	980b883a 	mov	r5,r19
    8228:	00046640 	call	4664 <__subdf3>
    822c:	aa000c04 	addi	r8,r21,48
    8230:	a2000005 	stb	r8,0(r20)
    8234:	000d883a 	mov	r6,zero
    8238:	01d00934 	movhi	r7,16420
    823c:	1009883a 	mov	r4,r2
    8240:	180b883a 	mov	r5,r3
    8244:	a5c00044 	addi	r23,r20,1
    8248:	b53fd91e 	bne	r22,r20,81b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70081b0>
    824c:	100d883a 	mov	r6,r2
    8250:	180f883a 	mov	r7,r3
    8254:	1009883a 	mov	r4,r2
    8258:	180b883a 	mov	r5,r3
    825c:	0002c540 	call	2c54 <__adddf3>
    8260:	100d883a 	mov	r6,r2
    8264:	180f883a 	mov	r7,r3
    8268:	8009883a 	mov	r4,r16
    826c:	880b883a 	mov	r5,r17
    8270:	1027883a 	mov	r19,r2
    8274:	1825883a 	mov	r18,r3
    8278:	000f2f80 	call	f2f8 <__ledf2>
    827c:	10000816 	blt	r2,zero,82a0 <_dtoa_r+0x948>
    8280:	980d883a 	mov	r6,r19
    8284:	900f883a 	mov	r7,r18
    8288:	8009883a 	mov	r4,r16
    828c:	880b883a 	mov	r5,r17
    8290:	0003de80 	call	3de8 <__eqdf2>
    8294:	103f5a1e 	bne	r2,zero,8000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008000>
    8298:	ad40004c 	andi	r21,r21,1
    829c:	a83f5826 	beq	r21,zero,8000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008000>
    82a0:	bd3fffc3 	ldbu	r20,-1(r23)
    82a4:	b8bfffc4 	addi	r2,r23,-1
    82a8:	1007883a 	mov	r3,r2
    82ac:	01400e44 	movi	r5,57
    82b0:	d9800717 	ldw	r6,28(sp)
    82b4:	00000506 	br	82cc <_dtoa_r+0x974>
    82b8:	18ffffc4 	addi	r3,r3,-1
    82bc:	11824726 	beq	r2,r6,8bdc <_dtoa_r+0x1284>
    82c0:	1d000003 	ldbu	r20,0(r3)
    82c4:	102f883a 	mov	r23,r2
    82c8:	10bfffc4 	addi	r2,r2,-1
    82cc:	a1003fcc 	andi	r4,r20,255
    82d0:	2100201c 	xori	r4,r4,128
    82d4:	213fe004 	addi	r4,r4,-128
    82d8:	217ff726 	beq	r4,r5,82b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70082b8>
    82dc:	a2000044 	addi	r8,r20,1
    82e0:	12000005 	stb	r8,0(r2)
    82e4:	003f4606 	br	8000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008000>
    82e8:	d9000b17 	ldw	r4,44(sp)
    82ec:	2000c826 	beq	r4,zero,8610 <_dtoa_r+0xcb8>
    82f0:	d9800317 	ldw	r6,12(sp)
    82f4:	00c00044 	movi	r3,1
    82f8:	1980f90e 	bge	r3,r6,86e0 <_dtoa_r+0xd88>
    82fc:	d8800617 	ldw	r2,24(sp)
    8300:	d8c00a17 	ldw	r3,40(sp)
    8304:	157fffc4 	addi	r21,r2,-1
    8308:	1d41f316 	blt	r3,r21,8ad8 <_dtoa_r+0x1180>
    830c:	1d6bc83a 	sub	r21,r3,r21
    8310:	d9c00617 	ldw	r7,24(sp)
    8314:	3802aa16 	blt	r7,zero,8dc0 <_dtoa_r+0x1468>
    8318:	dd000817 	ldw	r20,32(sp)
    831c:	d8800617 	ldw	r2,24(sp)
    8320:	d8c00817 	ldw	r3,32(sp)
    8324:	01400044 	movi	r5,1
    8328:	e009883a 	mov	r4,fp
    832c:	1887883a 	add	r3,r3,r2
    8330:	d8c00815 	stw	r3,32(sp)
    8334:	b0ad883a 	add	r22,r22,r2
    8338:	000ade80 	call	ade8 <__i2b>
    833c:	1023883a 	mov	r17,r2
    8340:	a0000826 	beq	r20,zero,8364 <_dtoa_r+0xa0c>
    8344:	0580070e 	bge	zero,r22,8364 <_dtoa_r+0xa0c>
    8348:	a005883a 	mov	r2,r20
    834c:	b500b916 	blt	r22,r20,8634 <_dtoa_r+0xcdc>
    8350:	d9000817 	ldw	r4,32(sp)
    8354:	a0a9c83a 	sub	r20,r20,r2
    8358:	b0adc83a 	sub	r22,r22,r2
    835c:	2089c83a 	sub	r4,r4,r2
    8360:	d9000815 	stw	r4,32(sp)
    8364:	d9800a17 	ldw	r6,40(sp)
    8368:	0181810e 	bge	zero,r6,8970 <_dtoa_r+0x1018>
    836c:	d9c00b17 	ldw	r7,44(sp)
    8370:	3800b326 	beq	r7,zero,8640 <_dtoa_r+0xce8>
    8374:	a800b226 	beq	r21,zero,8640 <_dtoa_r+0xce8>
    8378:	880b883a 	mov	r5,r17
    837c:	a80d883a 	mov	r6,r21
    8380:	e009883a 	mov	r4,fp
    8384:	000b01c0 	call	b01c <__pow5mult>
    8388:	d9800917 	ldw	r6,36(sp)
    838c:	100b883a 	mov	r5,r2
    8390:	e009883a 	mov	r4,fp
    8394:	1023883a 	mov	r17,r2
    8398:	000ae240 	call	ae24 <__multiply>
    839c:	1021883a 	mov	r16,r2
    83a0:	d8800a17 	ldw	r2,40(sp)
    83a4:	d9400917 	ldw	r5,36(sp)
    83a8:	e009883a 	mov	r4,fp
    83ac:	1545c83a 	sub	r2,r2,r21
    83b0:	d8800a15 	stw	r2,40(sp)
    83b4:	000aa840 	call	aa84 <_Bfree>
    83b8:	d8c00a17 	ldw	r3,40(sp)
    83bc:	18009f1e 	bne	r3,zero,863c <_dtoa_r+0xce4>
    83c0:	05c00044 	movi	r23,1
    83c4:	e009883a 	mov	r4,fp
    83c8:	b80b883a 	mov	r5,r23
    83cc:	000ade80 	call	ade8 <__i2b>
    83d0:	d9000d17 	ldw	r4,52(sp)
    83d4:	102b883a 	mov	r21,r2
    83d8:	2000ce26 	beq	r4,zero,8714 <_dtoa_r+0xdbc>
    83dc:	200d883a 	mov	r6,r4
    83e0:	100b883a 	mov	r5,r2
    83e4:	e009883a 	mov	r4,fp
    83e8:	000b01c0 	call	b01c <__pow5mult>
    83ec:	d9800317 	ldw	r6,12(sp)
    83f0:	102b883a 	mov	r21,r2
    83f4:	b981810e 	bge	r23,r6,89fc <_dtoa_r+0x10a4>
    83f8:	0027883a 	mov	r19,zero
    83fc:	a8800417 	ldw	r2,16(r21)
    8400:	05c00804 	movi	r23,32
    8404:	10800104 	addi	r2,r2,4
    8408:	1085883a 	add	r2,r2,r2
    840c:	1085883a 	add	r2,r2,r2
    8410:	a885883a 	add	r2,r21,r2
    8414:	11000017 	ldw	r4,0(r2)
    8418:	000acd00 	call	acd0 <__hi0bits>
    841c:	b885c83a 	sub	r2,r23,r2
    8420:	1585883a 	add	r2,r2,r22
    8424:	108007cc 	andi	r2,r2,31
    8428:	1000b326 	beq	r2,zero,86f8 <_dtoa_r+0xda0>
    842c:	00c00804 	movi	r3,32
    8430:	1887c83a 	sub	r3,r3,r2
    8434:	01000104 	movi	r4,4
    8438:	20c2cd0e 	bge	r4,r3,8f70 <_dtoa_r+0x1618>
    843c:	00c00704 	movi	r3,28
    8440:	1885c83a 	sub	r2,r3,r2
    8444:	d8c00817 	ldw	r3,32(sp)
    8448:	a0a9883a 	add	r20,r20,r2
    844c:	b0ad883a 	add	r22,r22,r2
    8450:	1887883a 	add	r3,r3,r2
    8454:	d8c00815 	stw	r3,32(sp)
    8458:	d9800817 	ldw	r6,32(sp)
    845c:	0180040e 	bge	zero,r6,8470 <_dtoa_r+0xb18>
    8460:	800b883a 	mov	r5,r16
    8464:	e009883a 	mov	r4,fp
    8468:	000b15c0 	call	b15c <__lshift>
    846c:	1021883a 	mov	r16,r2
    8470:	0580050e 	bge	zero,r22,8488 <_dtoa_r+0xb30>
    8474:	a80b883a 	mov	r5,r21
    8478:	b00d883a 	mov	r6,r22
    847c:	e009883a 	mov	r4,fp
    8480:	000b15c0 	call	b15c <__lshift>
    8484:	102b883a 	mov	r21,r2
    8488:	d9c00e17 	ldw	r7,56(sp)
    848c:	3801211e 	bne	r7,zero,8914 <_dtoa_r+0xfbc>
    8490:	d9800617 	ldw	r6,24(sp)
    8494:	0181380e 	bge	zero,r6,8978 <_dtoa_r+0x1020>
    8498:	d8c00b17 	ldw	r3,44(sp)
    849c:	1800ab1e 	bne	r3,zero,874c <_dtoa_r+0xdf4>
    84a0:	dc800717 	ldw	r18,28(sp)
    84a4:	dcc00617 	ldw	r19,24(sp)
    84a8:	9029883a 	mov	r20,r18
    84ac:	00000206 	br	84b8 <_dtoa_r+0xb60>
    84b0:	000aaac0 	call	aaac <__multadd>
    84b4:	1021883a 	mov	r16,r2
    84b8:	a80b883a 	mov	r5,r21
    84bc:	8009883a 	mov	r4,r16
    84c0:	00077580 	call	7758 <quorem>
    84c4:	10800c04 	addi	r2,r2,48
    84c8:	90800005 	stb	r2,0(r18)
    84cc:	94800044 	addi	r18,r18,1
    84d0:	9507c83a 	sub	r3,r18,r20
    84d4:	000f883a 	mov	r7,zero
    84d8:	01800284 	movi	r6,10
    84dc:	800b883a 	mov	r5,r16
    84e0:	e009883a 	mov	r4,fp
    84e4:	1cfff216 	blt	r3,r19,84b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084b0>
    84e8:	1011883a 	mov	r8,r2
    84ec:	d8800617 	ldw	r2,24(sp)
    84f0:	0082370e 	bge	zero,r2,8dd0 <_dtoa_r+0x1478>
    84f4:	d9000717 	ldw	r4,28(sp)
    84f8:	0025883a 	mov	r18,zero
    84fc:	20af883a 	add	r23,r4,r2
    8500:	01800044 	movi	r6,1
    8504:	800b883a 	mov	r5,r16
    8508:	e009883a 	mov	r4,fp
    850c:	da001715 	stw	r8,92(sp)
    8510:	000b15c0 	call	b15c <__lshift>
    8514:	a80b883a 	mov	r5,r21
    8518:	1009883a 	mov	r4,r2
    851c:	d8800915 	stw	r2,36(sp)
    8520:	000b2a40 	call	b2a4 <__mcmp>
    8524:	da001717 	ldw	r8,92(sp)
    8528:	0081800e 	bge	zero,r2,8b2c <_dtoa_r+0x11d4>
    852c:	b93fffc3 	ldbu	r4,-1(r23)
    8530:	b8bfffc4 	addi	r2,r23,-1
    8534:	1007883a 	mov	r3,r2
    8538:	01800e44 	movi	r6,57
    853c:	d9c00717 	ldw	r7,28(sp)
    8540:	00000506 	br	8558 <_dtoa_r+0xc00>
    8544:	18ffffc4 	addi	r3,r3,-1
    8548:	11c12326 	beq	r2,r7,89d8 <_dtoa_r+0x1080>
    854c:	19000003 	ldbu	r4,0(r3)
    8550:	102f883a 	mov	r23,r2
    8554:	10bfffc4 	addi	r2,r2,-1
    8558:	21403fcc 	andi	r5,r4,255
    855c:	2940201c 	xori	r5,r5,128
    8560:	297fe004 	addi	r5,r5,-128
    8564:	29bff726 	beq	r5,r6,8544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008544>
    8568:	21000044 	addi	r4,r4,1
    856c:	11000005 	stb	r4,0(r2)
    8570:	a80b883a 	mov	r5,r21
    8574:	e009883a 	mov	r4,fp
    8578:	000aa840 	call	aa84 <_Bfree>
    857c:	883ea026 	beq	r17,zero,8000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008000>
    8580:	90000426 	beq	r18,zero,8594 <_dtoa_r+0xc3c>
    8584:	94400326 	beq	r18,r17,8594 <_dtoa_r+0xc3c>
    8588:	900b883a 	mov	r5,r18
    858c:	e009883a 	mov	r4,fp
    8590:	000aa840 	call	aa84 <_Bfree>
    8594:	880b883a 	mov	r5,r17
    8598:	e009883a 	mov	r4,fp
    859c:	000aa840 	call	aa84 <_Bfree>
    85a0:	003e9706 	br	8000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008000>
    85a4:	01800044 	movi	r6,1
    85a8:	d9800e15 	stw	r6,56(sp)
    85ac:	003d9606 	br	7c08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c08>
    85b0:	d8800817 	ldw	r2,32(sp)
    85b4:	d8c00517 	ldw	r3,20(sp)
    85b8:	d8000d15 	stw	zero,52(sp)
    85bc:	10c5c83a 	sub	r2,r2,r3
    85c0:	00c9c83a 	sub	r4,zero,r3
    85c4:	d8800815 	stw	r2,32(sp)
    85c8:	d9000a15 	stw	r4,40(sp)
    85cc:	003d9706 	br	7c2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c2c>
    85d0:	05adc83a 	sub	r22,zero,r22
    85d4:	dd800815 	stw	r22,32(sp)
    85d8:	002d883a 	mov	r22,zero
    85dc:	003d8e06 	br	7c18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c18>
    85e0:	d9000517 	ldw	r4,20(sp)
    85e4:	0004fe00 	call	4fe0 <__floatsidf>
    85e8:	100d883a 	mov	r6,r2
    85ec:	180f883a 	mov	r7,r3
    85f0:	a009883a 	mov	r4,r20
    85f4:	880b883a 	mov	r5,r17
    85f8:	0003de80 	call	3de8 <__eqdf2>
    85fc:	103d7126 	beq	r2,zero,7bc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007bc4>
    8600:	d9c00517 	ldw	r7,20(sp)
    8604:	39ffffc4 	addi	r7,r7,-1
    8608:	d9c00515 	stw	r7,20(sp)
    860c:	003d6d06 	br	7bc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007bc4>
    8610:	dd400a17 	ldw	r21,40(sp)
    8614:	dd000817 	ldw	r20,32(sp)
    8618:	0023883a 	mov	r17,zero
    861c:	003f4806 	br	8340 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008340>
    8620:	10e3c83a 	sub	r17,r2,r3
    8624:	9448983a 	sll	r4,r18,r17
    8628:	003d3206 	br	7af4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007af4>
    862c:	d8000e15 	stw	zero,56(sp)
    8630:	003d7506 	br	7c08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c08>
    8634:	b005883a 	mov	r2,r22
    8638:	003f4506 	br	8350 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008350>
    863c:	dc000915 	stw	r16,36(sp)
    8640:	d9800a17 	ldw	r6,40(sp)
    8644:	d9400917 	ldw	r5,36(sp)
    8648:	e009883a 	mov	r4,fp
    864c:	000b01c0 	call	b01c <__pow5mult>
    8650:	1021883a 	mov	r16,r2
    8654:	003f5a06 	br	83c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70083c0>
    8658:	01c00044 	movi	r7,1
    865c:	d9c00b15 	stw	r7,44(sp)
    8660:	d8802217 	ldw	r2,136(sp)
    8664:	0081280e 	bge	zero,r2,8b08 <_dtoa_r+0x11b0>
    8668:	100d883a 	mov	r6,r2
    866c:	1021883a 	mov	r16,r2
    8670:	d8800c15 	stw	r2,48(sp)
    8674:	d8800615 	stw	r2,24(sp)
    8678:	003d8806 	br	7c9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c9c>
    867c:	d8800617 	ldw	r2,24(sp)
    8680:	00be9b16 	blt	zero,r2,80f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080f0>
    8684:	10010f1e 	bne	r2,zero,8ac4 <_dtoa_r+0x116c>
    8688:	880b883a 	mov	r5,r17
    868c:	000d883a 	mov	r6,zero
    8690:	01d00534 	movhi	r7,16404
    8694:	8009883a 	mov	r4,r16
    8698:	0003f4c0 	call	3f4c <__muldf3>
    869c:	900d883a 	mov	r6,r18
    86a0:	980f883a 	mov	r7,r19
    86a4:	1009883a 	mov	r4,r2
    86a8:	180b883a 	mov	r5,r3
    86ac:	0003e700 	call	3e70 <__gedf2>
    86b0:	002b883a 	mov	r21,zero
    86b4:	0023883a 	mov	r17,zero
    86b8:	1000bf16 	blt	r2,zero,89b8 <_dtoa_r+0x1060>
    86bc:	d9802217 	ldw	r6,136(sp)
    86c0:	ddc00717 	ldw	r23,28(sp)
    86c4:	018c303a 	nor	r6,zero,r6
    86c8:	d9800515 	stw	r6,20(sp)
    86cc:	a80b883a 	mov	r5,r21
    86d0:	e009883a 	mov	r4,fp
    86d4:	000aa840 	call	aa84 <_Bfree>
    86d8:	883e4926 	beq	r17,zero,8000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008000>
    86dc:	003fad06 	br	8594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008594>
    86e0:	d9c01117 	ldw	r7,68(sp)
    86e4:	3801bc26 	beq	r7,zero,8dd8 <_dtoa_r+0x1480>
    86e8:	10810cc4 	addi	r2,r2,1075
    86ec:	dd400a17 	ldw	r21,40(sp)
    86f0:	dd000817 	ldw	r20,32(sp)
    86f4:	003f0a06 	br	8320 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008320>
    86f8:	00800704 	movi	r2,28
    86fc:	d9000817 	ldw	r4,32(sp)
    8700:	a0a9883a 	add	r20,r20,r2
    8704:	b0ad883a 	add	r22,r22,r2
    8708:	2089883a 	add	r4,r4,r2
    870c:	d9000815 	stw	r4,32(sp)
    8710:	003f5106 	br	8458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008458>
    8714:	d8c00317 	ldw	r3,12(sp)
    8718:	b8c1fc0e 	bge	r23,r3,8f0c <_dtoa_r+0x15b4>
    871c:	0027883a 	mov	r19,zero
    8720:	b805883a 	mov	r2,r23
    8724:	003f3e06 	br	8420 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008420>
    8728:	880b883a 	mov	r5,r17
    872c:	e009883a 	mov	r4,fp
    8730:	000f883a 	mov	r7,zero
    8734:	01800284 	movi	r6,10
    8738:	000aaac0 	call	aaac <__multadd>
    873c:	d9000c17 	ldw	r4,48(sp)
    8740:	1023883a 	mov	r17,r2
    8744:	0102040e 	bge	zero,r4,8f58 <_dtoa_r+0x1600>
    8748:	d9000615 	stw	r4,24(sp)
    874c:	0500050e 	bge	zero,r20,8764 <_dtoa_r+0xe0c>
    8750:	880b883a 	mov	r5,r17
    8754:	a00d883a 	mov	r6,r20
    8758:	e009883a 	mov	r4,fp
    875c:	000b15c0 	call	b15c <__lshift>
    8760:	1023883a 	mov	r17,r2
    8764:	9801241e 	bne	r19,zero,8bf8 <_dtoa_r+0x12a0>
    8768:	8829883a 	mov	r20,r17
    876c:	d9000617 	ldw	r4,24(sp)
    8770:	dcc00717 	ldw	r19,28(sp)
    8774:	9480004c 	andi	r18,r18,1
    8778:	20bfffc4 	addi	r2,r4,-1
    877c:	9885883a 	add	r2,r19,r2
    8780:	d8800415 	stw	r2,16(sp)
    8784:	dc800615 	stw	r18,24(sp)
    8788:	a80b883a 	mov	r5,r21
    878c:	8009883a 	mov	r4,r16
    8790:	00077580 	call	7758 <quorem>
    8794:	880b883a 	mov	r5,r17
    8798:	8009883a 	mov	r4,r16
    879c:	102f883a 	mov	r23,r2
    87a0:	000b2a40 	call	b2a4 <__mcmp>
    87a4:	a80b883a 	mov	r5,r21
    87a8:	a00d883a 	mov	r6,r20
    87ac:	e009883a 	mov	r4,fp
    87b0:	102d883a 	mov	r22,r2
    87b4:	000b3040 	call	b304 <__mdiff>
    87b8:	1007883a 	mov	r3,r2
    87bc:	10800317 	ldw	r2,12(r2)
    87c0:	bc800c04 	addi	r18,r23,48
    87c4:	180b883a 	mov	r5,r3
    87c8:	10004e1e 	bne	r2,zero,8904 <_dtoa_r+0xfac>
    87cc:	8009883a 	mov	r4,r16
    87d0:	d8c01615 	stw	r3,88(sp)
    87d4:	000b2a40 	call	b2a4 <__mcmp>
    87d8:	d8c01617 	ldw	r3,88(sp)
    87dc:	e009883a 	mov	r4,fp
    87e0:	d8801615 	stw	r2,88(sp)
    87e4:	180b883a 	mov	r5,r3
    87e8:	000aa840 	call	aa84 <_Bfree>
    87ec:	d8801617 	ldw	r2,88(sp)
    87f0:	1000041e 	bne	r2,zero,8804 <_dtoa_r+0xeac>
    87f4:	d9800317 	ldw	r6,12(sp)
    87f8:	3000021e 	bne	r6,zero,8804 <_dtoa_r+0xeac>
    87fc:	d8c00617 	ldw	r3,24(sp)
    8800:	18003726 	beq	r3,zero,88e0 <_dtoa_r+0xf88>
    8804:	b0002016 	blt	r22,zero,8888 <_dtoa_r+0xf30>
    8808:	b000041e 	bne	r22,zero,881c <_dtoa_r+0xec4>
    880c:	d9000317 	ldw	r4,12(sp)
    8810:	2000021e 	bne	r4,zero,881c <_dtoa_r+0xec4>
    8814:	d8c00617 	ldw	r3,24(sp)
    8818:	18001b26 	beq	r3,zero,8888 <_dtoa_r+0xf30>
    881c:	00810716 	blt	zero,r2,8c3c <_dtoa_r+0x12e4>
    8820:	d8c00417 	ldw	r3,16(sp)
    8824:	9d800044 	addi	r22,r19,1
    8828:	9c800005 	stb	r18,0(r19)
    882c:	b02f883a 	mov	r23,r22
    8830:	98c10626 	beq	r19,r3,8c4c <_dtoa_r+0x12f4>
    8834:	800b883a 	mov	r5,r16
    8838:	000f883a 	mov	r7,zero
    883c:	01800284 	movi	r6,10
    8840:	e009883a 	mov	r4,fp
    8844:	000aaac0 	call	aaac <__multadd>
    8848:	1021883a 	mov	r16,r2
    884c:	000f883a 	mov	r7,zero
    8850:	01800284 	movi	r6,10
    8854:	880b883a 	mov	r5,r17
    8858:	e009883a 	mov	r4,fp
    885c:	8d002526 	beq	r17,r20,88f4 <_dtoa_r+0xf9c>
    8860:	000aaac0 	call	aaac <__multadd>
    8864:	a00b883a 	mov	r5,r20
    8868:	000f883a 	mov	r7,zero
    886c:	01800284 	movi	r6,10
    8870:	e009883a 	mov	r4,fp
    8874:	1023883a 	mov	r17,r2
    8878:	000aaac0 	call	aaac <__multadd>
    887c:	1029883a 	mov	r20,r2
    8880:	b027883a 	mov	r19,r22
    8884:	003fc006 	br	8788 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008788>
    8888:	9011883a 	mov	r8,r18
    888c:	00800e0e 	bge	zero,r2,88c8 <_dtoa_r+0xf70>
    8890:	800b883a 	mov	r5,r16
    8894:	01800044 	movi	r6,1
    8898:	e009883a 	mov	r4,fp
    889c:	da001715 	stw	r8,92(sp)
    88a0:	000b15c0 	call	b15c <__lshift>
    88a4:	a80b883a 	mov	r5,r21
    88a8:	1009883a 	mov	r4,r2
    88ac:	1021883a 	mov	r16,r2
    88b0:	000b2a40 	call	b2a4 <__mcmp>
    88b4:	da001717 	ldw	r8,92(sp)
    88b8:	0081960e 	bge	zero,r2,8f14 <_dtoa_r+0x15bc>
    88bc:	00800e44 	movi	r2,57
    88c0:	40817026 	beq	r8,r2,8e84 <_dtoa_r+0x152c>
    88c4:	ba000c44 	addi	r8,r23,49
    88c8:	8825883a 	mov	r18,r17
    88cc:	9dc00044 	addi	r23,r19,1
    88d0:	9a000005 	stb	r8,0(r19)
    88d4:	a023883a 	mov	r17,r20
    88d8:	dc000915 	stw	r16,36(sp)
    88dc:	003f2406 	br	8570 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008570>
    88e0:	00800e44 	movi	r2,57
    88e4:	9011883a 	mov	r8,r18
    88e8:	90816626 	beq	r18,r2,8e84 <_dtoa_r+0x152c>
    88ec:	05bff516 	blt	zero,r22,88c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70088c4>
    88f0:	003ff506 	br	88c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70088c8>
    88f4:	000aaac0 	call	aaac <__multadd>
    88f8:	1023883a 	mov	r17,r2
    88fc:	1029883a 	mov	r20,r2
    8900:	003fdf06 	br	8880 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008880>
    8904:	e009883a 	mov	r4,fp
    8908:	000aa840 	call	aa84 <_Bfree>
    890c:	00800044 	movi	r2,1
    8910:	003fbc06 	br	8804 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008804>
    8914:	a80b883a 	mov	r5,r21
    8918:	8009883a 	mov	r4,r16
    891c:	000b2a40 	call	b2a4 <__mcmp>
    8920:	103edb0e 	bge	r2,zero,8490 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008490>
    8924:	800b883a 	mov	r5,r16
    8928:	000f883a 	mov	r7,zero
    892c:	01800284 	movi	r6,10
    8930:	e009883a 	mov	r4,fp
    8934:	000aaac0 	call	aaac <__multadd>
    8938:	1021883a 	mov	r16,r2
    893c:	d8800517 	ldw	r2,20(sp)
    8940:	d8c00b17 	ldw	r3,44(sp)
    8944:	10bfffc4 	addi	r2,r2,-1
    8948:	d8800515 	stw	r2,20(sp)
    894c:	183f761e 	bne	r3,zero,8728 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008728>
    8950:	d9000c17 	ldw	r4,48(sp)
    8954:	0101730e 	bge	zero,r4,8f24 <_dtoa_r+0x15cc>
    8958:	d9000615 	stw	r4,24(sp)
    895c:	003ed006 	br	84a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084a0>
    8960:	00800084 	movi	r2,2
    8964:	3081861e 	bne	r6,r2,8f80 <_dtoa_r+0x1628>
    8968:	d8000b15 	stw	zero,44(sp)
    896c:	003f3c06 	br	8660 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008660>
    8970:	dc000917 	ldw	r16,36(sp)
    8974:	003e9206 	br	83c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70083c0>
    8978:	d9c00317 	ldw	r7,12(sp)
    897c:	00800084 	movi	r2,2
    8980:	11fec50e 	bge	r2,r7,8498 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008498>
    8984:	d9000617 	ldw	r4,24(sp)
    8988:	20013c1e 	bne	r4,zero,8e7c <_dtoa_r+0x1524>
    898c:	a80b883a 	mov	r5,r21
    8990:	000f883a 	mov	r7,zero
    8994:	01800144 	movi	r6,5
    8998:	e009883a 	mov	r4,fp
    899c:	000aaac0 	call	aaac <__multadd>
    89a0:	100b883a 	mov	r5,r2
    89a4:	8009883a 	mov	r4,r16
    89a8:	102b883a 	mov	r21,r2
    89ac:	000b2a40 	call	b2a4 <__mcmp>
    89b0:	dc000915 	stw	r16,36(sp)
    89b4:	00bf410e 	bge	zero,r2,86bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086bc>
    89b8:	d9c00717 	ldw	r7,28(sp)
    89bc:	00800c44 	movi	r2,49
    89c0:	38800005 	stb	r2,0(r7)
    89c4:	d8800517 	ldw	r2,20(sp)
    89c8:	3dc00044 	addi	r23,r7,1
    89cc:	10800044 	addi	r2,r2,1
    89d0:	d8800515 	stw	r2,20(sp)
    89d4:	003f3d06 	br	86cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086cc>
    89d8:	d9800517 	ldw	r6,20(sp)
    89dc:	d9c00717 	ldw	r7,28(sp)
    89e0:	00800c44 	movi	r2,49
    89e4:	31800044 	addi	r6,r6,1
    89e8:	d9800515 	stw	r6,20(sp)
    89ec:	38800005 	stb	r2,0(r7)
    89f0:	003edf06 	br	8570 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008570>
    89f4:	d8000b15 	stw	zero,44(sp)
    89f8:	003c9f06 	br	7c78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c78>
    89fc:	903e7e1e 	bne	r18,zero,83f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70083f8>
    8a00:	00800434 	movhi	r2,16
    8a04:	10bfffc4 	addi	r2,r2,-1
    8a08:	9884703a 	and	r2,r19,r2
    8a0c:	1000ea1e 	bne	r2,zero,8db8 <_dtoa_r+0x1460>
    8a10:	9cdffc2c 	andhi	r19,r19,32752
    8a14:	9800e826 	beq	r19,zero,8db8 <_dtoa_r+0x1460>
    8a18:	d9c00817 	ldw	r7,32(sp)
    8a1c:	b5800044 	addi	r22,r22,1
    8a20:	04c00044 	movi	r19,1
    8a24:	39c00044 	addi	r7,r7,1
    8a28:	d9c00815 	stw	r7,32(sp)
    8a2c:	d8800d17 	ldw	r2,52(sp)
    8a30:	103e721e 	bne	r2,zero,83fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70083fc>
    8a34:	00800044 	movi	r2,1
    8a38:	003e7906 	br	8420 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008420>
    8a3c:	8009883a 	mov	r4,r16
    8a40:	0004fe00 	call	4fe0 <__floatsidf>
    8a44:	d9800f17 	ldw	r6,60(sp)
    8a48:	d9c01017 	ldw	r7,64(sp)
    8a4c:	1009883a 	mov	r4,r2
    8a50:	180b883a 	mov	r5,r3
    8a54:	0003f4c0 	call	3f4c <__muldf3>
    8a58:	000d883a 	mov	r6,zero
    8a5c:	01d00734 	movhi	r7,16412
    8a60:	1009883a 	mov	r4,r2
    8a64:	180b883a 	mov	r5,r3
    8a68:	0002c540 	call	2c54 <__adddf3>
    8a6c:	047f3034 	movhi	r17,64704
    8a70:	1021883a 	mov	r16,r2
    8a74:	1c63883a 	add	r17,r3,r17
    8a78:	d9000f17 	ldw	r4,60(sp)
    8a7c:	d9401017 	ldw	r5,64(sp)
    8a80:	000d883a 	mov	r6,zero
    8a84:	01d00534 	movhi	r7,16404
    8a88:	00046640 	call	4664 <__subdf3>
    8a8c:	800d883a 	mov	r6,r16
    8a90:	880f883a 	mov	r7,r17
    8a94:	1009883a 	mov	r4,r2
    8a98:	180b883a 	mov	r5,r3
    8a9c:	102b883a 	mov	r21,r2
    8aa0:	1829883a 	mov	r20,r3
    8aa4:	0003e700 	call	3e70 <__gedf2>
    8aa8:	00806c16 	blt	zero,r2,8c5c <_dtoa_r+0x1304>
    8aac:	89e0003c 	xorhi	r7,r17,32768
    8ab0:	800d883a 	mov	r6,r16
    8ab4:	a809883a 	mov	r4,r21
    8ab8:	a00b883a 	mov	r5,r20
    8abc:	000f2f80 	call	f2f8 <__ledf2>
    8ac0:	103d7e0e 	bge	r2,zero,80bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080bc>
    8ac4:	002b883a 	mov	r21,zero
    8ac8:	0023883a 	mov	r17,zero
    8acc:	003efb06 	br	86bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086bc>
    8ad0:	d8800717 	ldw	r2,28(sp)
    8ad4:	003bd006 	br	7a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a18>
    8ad8:	d9000a17 	ldw	r4,40(sp)
    8adc:	d9800d17 	ldw	r6,52(sp)
    8ae0:	dd400a15 	stw	r21,40(sp)
    8ae4:	a905c83a 	sub	r2,r21,r4
    8ae8:	308d883a 	add	r6,r6,r2
    8aec:	d9800d15 	stw	r6,52(sp)
    8af0:	002b883a 	mov	r21,zero
    8af4:	003e0606 	br	8310 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008310>
    8af8:	9023883a 	mov	r17,r18
    8afc:	9829883a 	mov	r20,r19
    8b00:	04000084 	movi	r16,2
    8b04:	003c9206 	br	7d50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d50>
    8b08:	04000044 	movi	r16,1
    8b0c:	dc000c15 	stw	r16,48(sp)
    8b10:	dc000615 	stw	r16,24(sp)
    8b14:	dc002215 	stw	r16,136(sp)
    8b18:	e0001115 	stw	zero,68(fp)
    8b1c:	000b883a 	mov	r5,zero
    8b20:	003c6906 	br	7cc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007cc8>
    8b24:	3021883a 	mov	r16,r6
    8b28:	003ffb06 	br	8b18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b18>
    8b2c:	1000021e 	bne	r2,zero,8b38 <_dtoa_r+0x11e0>
    8b30:	4200004c 	andi	r8,r8,1
    8b34:	403e7d1e 	bne	r8,zero,852c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700852c>
    8b38:	01000c04 	movi	r4,48
    8b3c:	00000106 	br	8b44 <_dtoa_r+0x11ec>
    8b40:	102f883a 	mov	r23,r2
    8b44:	b8bfffc4 	addi	r2,r23,-1
    8b48:	10c00007 	ldb	r3,0(r2)
    8b4c:	193ffc26 	beq	r3,r4,8b40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b40>
    8b50:	003e8706 	br	8570 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008570>
    8b54:	d8800517 	ldw	r2,20(sp)
    8b58:	00a3c83a 	sub	r17,zero,r2
    8b5c:	8800a426 	beq	r17,zero,8df0 <_dtoa_r+0x1498>
    8b60:	888003cc 	andi	r2,r17,15
    8b64:	100490fa 	slli	r2,r2,3
    8b68:	00c000b4 	movhi	r3,2
    8b6c:	18ee9604 	addi	r3,r3,-17832
    8b70:	1885883a 	add	r2,r3,r2
    8b74:	11800017 	ldw	r6,0(r2)
    8b78:	11c00117 	ldw	r7,4(r2)
    8b7c:	9009883a 	mov	r4,r18
    8b80:	980b883a 	mov	r5,r19
    8b84:	8823d13a 	srai	r17,r17,4
    8b88:	0003f4c0 	call	3f4c <__muldf3>
    8b8c:	d8800f15 	stw	r2,60(sp)
    8b90:	d8c01015 	stw	r3,64(sp)
    8b94:	8800e826 	beq	r17,zero,8f38 <_dtoa_r+0x15e0>
    8b98:	050000b4 	movhi	r20,2
    8b9c:	a52e8c04 	addi	r20,r20,-17872
    8ba0:	04000084 	movi	r16,2
    8ba4:	8980004c 	andi	r6,r17,1
    8ba8:	1009883a 	mov	r4,r2
    8bac:	8823d07a 	srai	r17,r17,1
    8bb0:	180b883a 	mov	r5,r3
    8bb4:	30000426 	beq	r6,zero,8bc8 <_dtoa_r+0x1270>
    8bb8:	a1800017 	ldw	r6,0(r20)
    8bbc:	a1c00117 	ldw	r7,4(r20)
    8bc0:	84000044 	addi	r16,r16,1
    8bc4:	0003f4c0 	call	3f4c <__muldf3>
    8bc8:	a5000204 	addi	r20,r20,8
    8bcc:	883ff51e 	bne	r17,zero,8ba4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ba4>
    8bd0:	d8800f15 	stw	r2,60(sp)
    8bd4:	d8c01015 	stw	r3,64(sp)
    8bd8:	003c7606 	br	7db4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007db4>
    8bdc:	00c00c04 	movi	r3,48
    8be0:	10c00005 	stb	r3,0(r2)
    8be4:	d8c00517 	ldw	r3,20(sp)
    8be8:	bd3fffc3 	ldbu	r20,-1(r23)
    8bec:	18c00044 	addi	r3,r3,1
    8bf0:	d8c00515 	stw	r3,20(sp)
    8bf4:	003db906 	br	82dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70082dc>
    8bf8:	89400117 	ldw	r5,4(r17)
    8bfc:	e009883a 	mov	r4,fp
    8c00:	000a9dc0 	call	a9dc <_Balloc>
    8c04:	89800417 	ldw	r6,16(r17)
    8c08:	89400304 	addi	r5,r17,12
    8c0c:	11000304 	addi	r4,r2,12
    8c10:	31800084 	addi	r6,r6,2
    8c14:	318d883a 	add	r6,r6,r6
    8c18:	318d883a 	add	r6,r6,r6
    8c1c:	1027883a 	mov	r19,r2
    8c20:	000a76c0 	call	a76c <memcpy>
    8c24:	01800044 	movi	r6,1
    8c28:	980b883a 	mov	r5,r19
    8c2c:	e009883a 	mov	r4,fp
    8c30:	000b15c0 	call	b15c <__lshift>
    8c34:	1029883a 	mov	r20,r2
    8c38:	003ecc06 	br	876c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700876c>
    8c3c:	00800e44 	movi	r2,57
    8c40:	90809026 	beq	r18,r2,8e84 <_dtoa_r+0x152c>
    8c44:	92000044 	addi	r8,r18,1
    8c48:	003f1f06 	br	88c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70088c8>
    8c4c:	9011883a 	mov	r8,r18
    8c50:	8825883a 	mov	r18,r17
    8c54:	a023883a 	mov	r17,r20
    8c58:	003e2906 	br	8500 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008500>
    8c5c:	002b883a 	mov	r21,zero
    8c60:	0023883a 	mov	r17,zero
    8c64:	003f5406 	br	89b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089b8>
    8c68:	61bfffc4 	addi	r6,r12,-1
    8c6c:	300490fa 	slli	r2,r6,3
    8c70:	00c000b4 	movhi	r3,2
    8c74:	18ee9604 	addi	r3,r3,-17832
    8c78:	1885883a 	add	r2,r3,r2
    8c7c:	11000017 	ldw	r4,0(r2)
    8c80:	11400117 	ldw	r5,4(r2)
    8c84:	d8800717 	ldw	r2,28(sp)
    8c88:	880f883a 	mov	r7,r17
    8c8c:	d9801215 	stw	r6,72(sp)
    8c90:	800d883a 	mov	r6,r16
    8c94:	db001615 	stw	r12,88(sp)
    8c98:	15c00044 	addi	r23,r2,1
    8c9c:	0003f4c0 	call	3f4c <__muldf3>
    8ca0:	d9401017 	ldw	r5,64(sp)
    8ca4:	d9000f17 	ldw	r4,60(sp)
    8ca8:	d8c01515 	stw	r3,84(sp)
    8cac:	d8801415 	stw	r2,80(sp)
    8cb0:	0004f600 	call	4f60 <__fixdfsi>
    8cb4:	1009883a 	mov	r4,r2
    8cb8:	1021883a 	mov	r16,r2
    8cbc:	0004fe00 	call	4fe0 <__floatsidf>
    8cc0:	d9000f17 	ldw	r4,60(sp)
    8cc4:	d9401017 	ldw	r5,64(sp)
    8cc8:	100d883a 	mov	r6,r2
    8ccc:	180f883a 	mov	r7,r3
    8cd0:	00046640 	call	4664 <__subdf3>
    8cd4:	1829883a 	mov	r20,r3
    8cd8:	d8c00717 	ldw	r3,28(sp)
    8cdc:	84000c04 	addi	r16,r16,48
    8ce0:	1023883a 	mov	r17,r2
    8ce4:	1c000005 	stb	r16,0(r3)
    8ce8:	db001617 	ldw	r12,88(sp)
    8cec:	00800044 	movi	r2,1
    8cf0:	60802226 	beq	r12,r2,8d7c <_dtoa_r+0x1424>
    8cf4:	d9c00717 	ldw	r7,28(sp)
    8cf8:	8805883a 	mov	r2,r17
    8cfc:	b82b883a 	mov	r21,r23
    8d00:	3b19883a 	add	r12,r7,r12
    8d04:	6023883a 	mov	r17,r12
    8d08:	a007883a 	mov	r3,r20
    8d0c:	dc800f15 	stw	r18,60(sp)
    8d10:	000d883a 	mov	r6,zero
    8d14:	01d00934 	movhi	r7,16420
    8d18:	1009883a 	mov	r4,r2
    8d1c:	180b883a 	mov	r5,r3
    8d20:	0003f4c0 	call	3f4c <__muldf3>
    8d24:	180b883a 	mov	r5,r3
    8d28:	1009883a 	mov	r4,r2
    8d2c:	1829883a 	mov	r20,r3
    8d30:	1025883a 	mov	r18,r2
    8d34:	0004f600 	call	4f60 <__fixdfsi>
    8d38:	1009883a 	mov	r4,r2
    8d3c:	1021883a 	mov	r16,r2
    8d40:	0004fe00 	call	4fe0 <__floatsidf>
    8d44:	100d883a 	mov	r6,r2
    8d48:	180f883a 	mov	r7,r3
    8d4c:	9009883a 	mov	r4,r18
    8d50:	a00b883a 	mov	r5,r20
    8d54:	84000c04 	addi	r16,r16,48
    8d58:	00046640 	call	4664 <__subdf3>
    8d5c:	ad400044 	addi	r21,r21,1
    8d60:	ac3fffc5 	stb	r16,-1(r21)
    8d64:	ac7fea1e 	bne	r21,r17,8d10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d10>
    8d68:	1023883a 	mov	r17,r2
    8d6c:	d8801217 	ldw	r2,72(sp)
    8d70:	dc800f17 	ldw	r18,60(sp)
    8d74:	1829883a 	mov	r20,r3
    8d78:	b8af883a 	add	r23,r23,r2
    8d7c:	d9001417 	ldw	r4,80(sp)
    8d80:	d9401517 	ldw	r5,84(sp)
    8d84:	000d883a 	mov	r6,zero
    8d88:	01cff834 	movhi	r7,16352
    8d8c:	0002c540 	call	2c54 <__adddf3>
    8d90:	880d883a 	mov	r6,r17
    8d94:	a00f883a 	mov	r7,r20
    8d98:	1009883a 	mov	r4,r2
    8d9c:	180b883a 	mov	r5,r3
    8da0:	000f2f80 	call	f2f8 <__ledf2>
    8da4:	10003e0e 	bge	r2,zero,8ea0 <_dtoa_r+0x1548>
    8da8:	d9001317 	ldw	r4,76(sp)
    8dac:	bd3fffc3 	ldbu	r20,-1(r23)
    8db0:	d9000515 	stw	r4,20(sp)
    8db4:	003d3b06 	br	82a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70082a4>
    8db8:	0027883a 	mov	r19,zero
    8dbc:	003f1b06 	br	8a2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a2c>
    8dc0:	d8800817 	ldw	r2,32(sp)
    8dc4:	11e9c83a 	sub	r20,r2,r7
    8dc8:	0005883a 	mov	r2,zero
    8dcc:	003d5406 	br	8320 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008320>
    8dd0:	00800044 	movi	r2,1
    8dd4:	003dc706 	br	84f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084f4>
    8dd8:	d8c00217 	ldw	r3,8(sp)
    8ddc:	00800d84 	movi	r2,54
    8de0:	dd400a17 	ldw	r21,40(sp)
    8de4:	10c5c83a 	sub	r2,r2,r3
    8de8:	dd000817 	ldw	r20,32(sp)
    8dec:	003d4c06 	br	8320 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008320>
    8df0:	dc800f15 	stw	r18,60(sp)
    8df4:	dcc01015 	stw	r19,64(sp)
    8df8:	04000084 	movi	r16,2
    8dfc:	003bed06 	br	7db4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007db4>
    8e00:	d9000617 	ldw	r4,24(sp)
    8e04:	203f0d26 	beq	r4,zero,8a3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a3c>
    8e08:	d9800c17 	ldw	r6,48(sp)
    8e0c:	01bcab0e 	bge	zero,r6,80bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080bc>
    8e10:	d9401017 	ldw	r5,64(sp)
    8e14:	d9000f17 	ldw	r4,60(sp)
    8e18:	000d883a 	mov	r6,zero
    8e1c:	01d00934 	movhi	r7,16420
    8e20:	0003f4c0 	call	3f4c <__muldf3>
    8e24:	81000044 	addi	r4,r16,1
    8e28:	d8800f15 	stw	r2,60(sp)
    8e2c:	d8c01015 	stw	r3,64(sp)
    8e30:	0004fe00 	call	4fe0 <__floatsidf>
    8e34:	d9800f17 	ldw	r6,60(sp)
    8e38:	d9c01017 	ldw	r7,64(sp)
    8e3c:	1009883a 	mov	r4,r2
    8e40:	180b883a 	mov	r5,r3
    8e44:	0003f4c0 	call	3f4c <__muldf3>
    8e48:	01d00734 	movhi	r7,16412
    8e4c:	000d883a 	mov	r6,zero
    8e50:	1009883a 	mov	r4,r2
    8e54:	180b883a 	mov	r5,r3
    8e58:	0002c540 	call	2c54 <__adddf3>
    8e5c:	d9c00517 	ldw	r7,20(sp)
    8e60:	047f3034 	movhi	r17,64704
    8e64:	1021883a 	mov	r16,r2
    8e68:	39ffffc4 	addi	r7,r7,-1
    8e6c:	d9c01315 	stw	r7,76(sp)
    8e70:	1c63883a 	add	r17,r3,r17
    8e74:	db000c17 	ldw	r12,48(sp)
    8e78:	003bea06 	br	7e24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e24>
    8e7c:	dc000915 	stw	r16,36(sp)
    8e80:	003e0e06 	br	86bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086bc>
    8e84:	01000e44 	movi	r4,57
    8e88:	8825883a 	mov	r18,r17
    8e8c:	9dc00044 	addi	r23,r19,1
    8e90:	99000005 	stb	r4,0(r19)
    8e94:	a023883a 	mov	r17,r20
    8e98:	dc000915 	stw	r16,36(sp)
    8e9c:	003da406 	br	8530 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008530>
    8ea0:	d9801417 	ldw	r6,80(sp)
    8ea4:	d9c01517 	ldw	r7,84(sp)
    8ea8:	0009883a 	mov	r4,zero
    8eac:	014ff834 	movhi	r5,16352
    8eb0:	00046640 	call	4664 <__subdf3>
    8eb4:	880d883a 	mov	r6,r17
    8eb8:	a00f883a 	mov	r7,r20
    8ebc:	1009883a 	mov	r4,r2
    8ec0:	180b883a 	mov	r5,r3
    8ec4:	0003e700 	call	3e70 <__gedf2>
    8ec8:	00bc7c0e 	bge	zero,r2,80bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080bc>
    8ecc:	01000c04 	movi	r4,48
    8ed0:	00000106 	br	8ed8 <_dtoa_r+0x1580>
    8ed4:	102f883a 	mov	r23,r2
    8ed8:	b8bfffc4 	addi	r2,r23,-1
    8edc:	10c00007 	ldb	r3,0(r2)
    8ee0:	193ffc26 	beq	r3,r4,8ed4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ed4>
    8ee4:	d9801317 	ldw	r6,76(sp)
    8ee8:	d9800515 	stw	r6,20(sp)
    8eec:	003c4406 	br	8000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008000>
    8ef0:	d9801317 	ldw	r6,76(sp)
    8ef4:	d9800515 	stw	r6,20(sp)
    8ef8:	003cea06 	br	82a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70082a4>
    8efc:	dd800f17 	ldw	r22,60(sp)
    8f00:	dcc01017 	ldw	r19,64(sp)
    8f04:	dc801217 	ldw	r18,72(sp)
    8f08:	003c6c06 	br	80bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080bc>
    8f0c:	903e031e 	bne	r18,zero,871c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700871c>
    8f10:	003ebb06 	br	8a00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a00>
    8f14:	103e6c1e 	bne	r2,zero,88c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70088c8>
    8f18:	4080004c 	andi	r2,r8,1
    8f1c:	103e6a26 	beq	r2,zero,88c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70088c8>
    8f20:	003e6606 	br	88bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70088bc>
    8f24:	d8c00317 	ldw	r3,12(sp)
    8f28:	00800084 	movi	r2,2
    8f2c:	10c02916 	blt	r2,r3,8fd4 <_dtoa_r+0x167c>
    8f30:	d9000c17 	ldw	r4,48(sp)
    8f34:	003e8806 	br	8958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008958>
    8f38:	04000084 	movi	r16,2
    8f3c:	003b9d06 	br	7db4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007db4>
    8f40:	d9001317 	ldw	r4,76(sp)
    8f44:	d9000515 	stw	r4,20(sp)
    8f48:	003cd606 	br	82a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70082a4>
    8f4c:	d8801317 	ldw	r2,76(sp)
    8f50:	d8800515 	stw	r2,20(sp)
    8f54:	003c2a06 	br	8000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008000>
    8f58:	d9800317 	ldw	r6,12(sp)
    8f5c:	00800084 	movi	r2,2
    8f60:	11801516 	blt	r2,r6,8fb8 <_dtoa_r+0x1660>
    8f64:	d9c00c17 	ldw	r7,48(sp)
    8f68:	d9c00615 	stw	r7,24(sp)
    8f6c:	003df706 	br	874c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700874c>
    8f70:	193d3926 	beq	r3,r4,8458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008458>
    8f74:	00c00f04 	movi	r3,60
    8f78:	1885c83a 	sub	r2,r3,r2
    8f7c:	003ddf06 	br	86fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086fc>
    8f80:	e009883a 	mov	r4,fp
    8f84:	e0001115 	stw	zero,68(fp)
    8f88:	000b883a 	mov	r5,zero
    8f8c:	000a9dc0 	call	a9dc <_Balloc>
    8f90:	d8800715 	stw	r2,28(sp)
    8f94:	d8c00717 	ldw	r3,28(sp)
    8f98:	00bfffc4 	movi	r2,-1
    8f9c:	01000044 	movi	r4,1
    8fa0:	d8800c15 	stw	r2,48(sp)
    8fa4:	e0c01015 	stw	r3,64(fp)
    8fa8:	d9000b15 	stw	r4,44(sp)
    8fac:	d8800615 	stw	r2,24(sp)
    8fb0:	d8002215 	stw	zero,136(sp)
    8fb4:	003c4106 	br	80bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080bc>
    8fb8:	d8c00c17 	ldw	r3,48(sp)
    8fbc:	d8c00615 	stw	r3,24(sp)
    8fc0:	003e7006 	br	8984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008984>
    8fc4:	04400044 	movi	r17,1
    8fc8:	003b2006 	br	7c4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c4c>
    8fcc:	000b883a 	mov	r5,zero
    8fd0:	003b3d06 	br	7cc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007cc8>
    8fd4:	d8800c17 	ldw	r2,48(sp)
    8fd8:	d8800615 	stw	r2,24(sp)
    8fdc:	003e6906 	br	8984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008984>

00008fe0 <__sflush_r>:
    8fe0:	2880030b 	ldhu	r2,12(r5)
    8fe4:	defffb04 	addi	sp,sp,-20
    8fe8:	dcc00315 	stw	r19,12(sp)
    8fec:	dc400115 	stw	r17,4(sp)
    8ff0:	dfc00415 	stw	ra,16(sp)
    8ff4:	dc800215 	stw	r18,8(sp)
    8ff8:	dc000015 	stw	r16,0(sp)
    8ffc:	10c0020c 	andi	r3,r2,8
    9000:	2823883a 	mov	r17,r5
    9004:	2027883a 	mov	r19,r4
    9008:	1800311e 	bne	r3,zero,90d0 <__sflush_r+0xf0>
    900c:	28c00117 	ldw	r3,4(r5)
    9010:	10820014 	ori	r2,r2,2048
    9014:	2880030d 	sth	r2,12(r5)
    9018:	00c04b0e 	bge	zero,r3,9148 <__sflush_r+0x168>
    901c:	8a000a17 	ldw	r8,40(r17)
    9020:	40002326 	beq	r8,zero,90b0 <__sflush_r+0xd0>
    9024:	9c000017 	ldw	r16,0(r19)
    9028:	10c4000c 	andi	r3,r2,4096
    902c:	98000015 	stw	zero,0(r19)
    9030:	18004826 	beq	r3,zero,9154 <__sflush_r+0x174>
    9034:	89801417 	ldw	r6,80(r17)
    9038:	10c0010c 	andi	r3,r2,4
    903c:	18000626 	beq	r3,zero,9058 <__sflush_r+0x78>
    9040:	88c00117 	ldw	r3,4(r17)
    9044:	88800c17 	ldw	r2,48(r17)
    9048:	30cdc83a 	sub	r6,r6,r3
    904c:	10000226 	beq	r2,zero,9058 <__sflush_r+0x78>
    9050:	88800f17 	ldw	r2,60(r17)
    9054:	308dc83a 	sub	r6,r6,r2
    9058:	89400717 	ldw	r5,28(r17)
    905c:	000f883a 	mov	r7,zero
    9060:	9809883a 	mov	r4,r19
    9064:	403ee83a 	callr	r8
    9068:	00ffffc4 	movi	r3,-1
    906c:	10c04426 	beq	r2,r3,9180 <__sflush_r+0x1a0>
    9070:	88c0030b 	ldhu	r3,12(r17)
    9074:	89000417 	ldw	r4,16(r17)
    9078:	88000115 	stw	zero,4(r17)
    907c:	197dffcc 	andi	r5,r3,63487
    9080:	8940030d 	sth	r5,12(r17)
    9084:	89000015 	stw	r4,0(r17)
    9088:	18c4000c 	andi	r3,r3,4096
    908c:	18002c1e 	bne	r3,zero,9140 <__sflush_r+0x160>
    9090:	89400c17 	ldw	r5,48(r17)
    9094:	9c000015 	stw	r16,0(r19)
    9098:	28000526 	beq	r5,zero,90b0 <__sflush_r+0xd0>
    909c:	88801004 	addi	r2,r17,64
    90a0:	28800226 	beq	r5,r2,90ac <__sflush_r+0xcc>
    90a4:	9809883a 	mov	r4,r19
    90a8:	000974c0 	call	974c <_free_r>
    90ac:	88000c15 	stw	zero,48(r17)
    90b0:	0005883a 	mov	r2,zero
    90b4:	dfc00417 	ldw	ra,16(sp)
    90b8:	dcc00317 	ldw	r19,12(sp)
    90bc:	dc800217 	ldw	r18,8(sp)
    90c0:	dc400117 	ldw	r17,4(sp)
    90c4:	dc000017 	ldw	r16,0(sp)
    90c8:	dec00504 	addi	sp,sp,20
    90cc:	f800283a 	ret
    90d0:	2c800417 	ldw	r18,16(r5)
    90d4:	903ff626 	beq	r18,zero,90b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090b0>
    90d8:	2c000017 	ldw	r16,0(r5)
    90dc:	108000cc 	andi	r2,r2,3
    90e0:	2c800015 	stw	r18,0(r5)
    90e4:	84a1c83a 	sub	r16,r16,r18
    90e8:	1000131e 	bne	r2,zero,9138 <__sflush_r+0x158>
    90ec:	28800517 	ldw	r2,20(r5)
    90f0:	88800215 	stw	r2,8(r17)
    90f4:	04000316 	blt	zero,r16,9104 <__sflush_r+0x124>
    90f8:	003fed06 	br	90b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090b0>
    90fc:	90a5883a 	add	r18,r18,r2
    9100:	043feb0e 	bge	zero,r16,90b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090b0>
    9104:	88800917 	ldw	r2,36(r17)
    9108:	89400717 	ldw	r5,28(r17)
    910c:	800f883a 	mov	r7,r16
    9110:	900d883a 	mov	r6,r18
    9114:	9809883a 	mov	r4,r19
    9118:	103ee83a 	callr	r2
    911c:	80a1c83a 	sub	r16,r16,r2
    9120:	00bff616 	blt	zero,r2,90fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090fc>
    9124:	88c0030b 	ldhu	r3,12(r17)
    9128:	00bfffc4 	movi	r2,-1
    912c:	18c01014 	ori	r3,r3,64
    9130:	88c0030d 	sth	r3,12(r17)
    9134:	003fdf06 	br	90b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090b4>
    9138:	0005883a 	mov	r2,zero
    913c:	003fec06 	br	90f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090f0>
    9140:	88801415 	stw	r2,80(r17)
    9144:	003fd206 	br	9090 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009090>
    9148:	28c00f17 	ldw	r3,60(r5)
    914c:	00ffb316 	blt	zero,r3,901c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700901c>
    9150:	003fd706 	br	90b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090b0>
    9154:	89400717 	ldw	r5,28(r17)
    9158:	000d883a 	mov	r6,zero
    915c:	01c00044 	movi	r7,1
    9160:	9809883a 	mov	r4,r19
    9164:	403ee83a 	callr	r8
    9168:	100d883a 	mov	r6,r2
    916c:	00bfffc4 	movi	r2,-1
    9170:	30801426 	beq	r6,r2,91c4 <__sflush_r+0x1e4>
    9174:	8880030b 	ldhu	r2,12(r17)
    9178:	8a000a17 	ldw	r8,40(r17)
    917c:	003fae06 	br	9038 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009038>
    9180:	98c00017 	ldw	r3,0(r19)
    9184:	183fba26 	beq	r3,zero,9070 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009070>
    9188:	01000744 	movi	r4,29
    918c:	19000626 	beq	r3,r4,91a8 <__sflush_r+0x1c8>
    9190:	01000584 	movi	r4,22
    9194:	19000426 	beq	r3,r4,91a8 <__sflush_r+0x1c8>
    9198:	88c0030b 	ldhu	r3,12(r17)
    919c:	18c01014 	ori	r3,r3,64
    91a0:	88c0030d 	sth	r3,12(r17)
    91a4:	003fc306 	br	90b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090b4>
    91a8:	8880030b 	ldhu	r2,12(r17)
    91ac:	88c00417 	ldw	r3,16(r17)
    91b0:	88000115 	stw	zero,4(r17)
    91b4:	10bdffcc 	andi	r2,r2,63487
    91b8:	8880030d 	sth	r2,12(r17)
    91bc:	88c00015 	stw	r3,0(r17)
    91c0:	003fb306 	br	9090 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009090>
    91c4:	98800017 	ldw	r2,0(r19)
    91c8:	103fea26 	beq	r2,zero,9174 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009174>
    91cc:	00c00744 	movi	r3,29
    91d0:	10c00226 	beq	r2,r3,91dc <__sflush_r+0x1fc>
    91d4:	00c00584 	movi	r3,22
    91d8:	10c0031e 	bne	r2,r3,91e8 <__sflush_r+0x208>
    91dc:	9c000015 	stw	r16,0(r19)
    91e0:	0005883a 	mov	r2,zero
    91e4:	003fb306 	br	90b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090b4>
    91e8:	88c0030b 	ldhu	r3,12(r17)
    91ec:	3005883a 	mov	r2,r6
    91f0:	18c01014 	ori	r3,r3,64
    91f4:	88c0030d 	sth	r3,12(r17)
    91f8:	003fae06 	br	90b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090b4>

000091fc <_fflush_r>:
    91fc:	defffd04 	addi	sp,sp,-12
    9200:	dc000115 	stw	r16,4(sp)
    9204:	dfc00215 	stw	ra,8(sp)
    9208:	2021883a 	mov	r16,r4
    920c:	20000226 	beq	r4,zero,9218 <_fflush_r+0x1c>
    9210:	20800e17 	ldw	r2,56(r4)
    9214:	10000c26 	beq	r2,zero,9248 <_fflush_r+0x4c>
    9218:	2880030f 	ldh	r2,12(r5)
    921c:	1000051e 	bne	r2,zero,9234 <_fflush_r+0x38>
    9220:	0005883a 	mov	r2,zero
    9224:	dfc00217 	ldw	ra,8(sp)
    9228:	dc000117 	ldw	r16,4(sp)
    922c:	dec00304 	addi	sp,sp,12
    9230:	f800283a 	ret
    9234:	8009883a 	mov	r4,r16
    9238:	dfc00217 	ldw	ra,8(sp)
    923c:	dc000117 	ldw	r16,4(sp)
    9240:	dec00304 	addi	sp,sp,12
    9244:	0008fe01 	jmpi	8fe0 <__sflush_r>
    9248:	d9400015 	stw	r5,0(sp)
    924c:	00095d80 	call	95d8 <__sinit>
    9250:	d9400017 	ldw	r5,0(sp)
    9254:	003ff006 	br	9218 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009218>

00009258 <fflush>:
    9258:	20000526 	beq	r4,zero,9270 <fflush+0x18>
    925c:	008000b4 	movhi	r2,2
    9260:	10b73804 	addi	r2,r2,-8992
    9264:	200b883a 	mov	r5,r4
    9268:	11000017 	ldw	r4,0(r2)
    926c:	00091fc1 	jmpi	91fc <_fflush_r>
    9270:	008000b4 	movhi	r2,2
    9274:	10b73704 	addi	r2,r2,-8996
    9278:	11000017 	ldw	r4,0(r2)
    927c:	01400074 	movhi	r5,1
    9280:	29647f04 	addi	r5,r5,-28164
    9284:	0009b201 	jmpi	9b20 <_fwalk_reent>

00009288 <__fp_unlock>:
    9288:	0005883a 	mov	r2,zero
    928c:	f800283a 	ret

00009290 <_cleanup_r>:
    9290:	01400074 	movhi	r5,1
    9294:	29754404 	addi	r5,r5,-10992
    9298:	0009b201 	jmpi	9b20 <_fwalk_reent>

0000929c <__sinit.part.1>:
    929c:	defff704 	addi	sp,sp,-36
    92a0:	00c00074 	movhi	r3,1
    92a4:	dfc00815 	stw	ra,32(sp)
    92a8:	ddc00715 	stw	r23,28(sp)
    92ac:	dd800615 	stw	r22,24(sp)
    92b0:	dd400515 	stw	r21,20(sp)
    92b4:	dd000415 	stw	r20,16(sp)
    92b8:	dcc00315 	stw	r19,12(sp)
    92bc:	dc800215 	stw	r18,8(sp)
    92c0:	dc400115 	stw	r17,4(sp)
    92c4:	dc000015 	stw	r16,0(sp)
    92c8:	18e4a404 	addi	r3,r3,-28016
    92cc:	24000117 	ldw	r16,4(r4)
    92d0:	20c00f15 	stw	r3,60(r4)
    92d4:	2080bb04 	addi	r2,r4,748
    92d8:	00c000c4 	movi	r3,3
    92dc:	20c0b915 	stw	r3,740(r4)
    92e0:	2080ba15 	stw	r2,744(r4)
    92e4:	2000b815 	stw	zero,736(r4)
    92e8:	05c00204 	movi	r23,8
    92ec:	00800104 	movi	r2,4
    92f0:	2025883a 	mov	r18,r4
    92f4:	b80d883a 	mov	r6,r23
    92f8:	81001704 	addi	r4,r16,92
    92fc:	000b883a 	mov	r5,zero
    9300:	80000015 	stw	zero,0(r16)
    9304:	80000115 	stw	zero,4(r16)
    9308:	80000215 	stw	zero,8(r16)
    930c:	8080030d 	sth	r2,12(r16)
    9310:	80001915 	stw	zero,100(r16)
    9314:	8000038d 	sth	zero,14(r16)
    9318:	80000415 	stw	zero,16(r16)
    931c:	80000515 	stw	zero,20(r16)
    9320:	80000615 	stw	zero,24(r16)
    9324:	000a8b40 	call	a8b4 <memset>
    9328:	05800074 	movhi	r22,1
    932c:	94400217 	ldw	r17,8(r18)
    9330:	05400074 	movhi	r21,1
    9334:	05000074 	movhi	r20,1
    9338:	04c00074 	movhi	r19,1
    933c:	b5aea804 	addi	r22,r22,-17760
    9340:	ad6ebf04 	addi	r21,r21,-17668
    9344:	a52ede04 	addi	r20,r20,-17544
    9348:	9ceef504 	addi	r19,r19,-17452
    934c:	85800815 	stw	r22,32(r16)
    9350:	85400915 	stw	r21,36(r16)
    9354:	85000a15 	stw	r20,40(r16)
    9358:	84c00b15 	stw	r19,44(r16)
    935c:	84000715 	stw	r16,28(r16)
    9360:	00800284 	movi	r2,10
    9364:	8880030d 	sth	r2,12(r17)
    9368:	00800044 	movi	r2,1
    936c:	b80d883a 	mov	r6,r23
    9370:	89001704 	addi	r4,r17,92
    9374:	000b883a 	mov	r5,zero
    9378:	88000015 	stw	zero,0(r17)
    937c:	88000115 	stw	zero,4(r17)
    9380:	88000215 	stw	zero,8(r17)
    9384:	88001915 	stw	zero,100(r17)
    9388:	8880038d 	sth	r2,14(r17)
    938c:	88000415 	stw	zero,16(r17)
    9390:	88000515 	stw	zero,20(r17)
    9394:	88000615 	stw	zero,24(r17)
    9398:	000a8b40 	call	a8b4 <memset>
    939c:	94000317 	ldw	r16,12(r18)
    93a0:	00800484 	movi	r2,18
    93a4:	8c400715 	stw	r17,28(r17)
    93a8:	8d800815 	stw	r22,32(r17)
    93ac:	8d400915 	stw	r21,36(r17)
    93b0:	8d000a15 	stw	r20,40(r17)
    93b4:	8cc00b15 	stw	r19,44(r17)
    93b8:	8080030d 	sth	r2,12(r16)
    93bc:	00800084 	movi	r2,2
    93c0:	80000015 	stw	zero,0(r16)
    93c4:	80000115 	stw	zero,4(r16)
    93c8:	80000215 	stw	zero,8(r16)
    93cc:	80001915 	stw	zero,100(r16)
    93d0:	8080038d 	sth	r2,14(r16)
    93d4:	80000415 	stw	zero,16(r16)
    93d8:	80000515 	stw	zero,20(r16)
    93dc:	80000615 	stw	zero,24(r16)
    93e0:	b80d883a 	mov	r6,r23
    93e4:	000b883a 	mov	r5,zero
    93e8:	81001704 	addi	r4,r16,92
    93ec:	000a8b40 	call	a8b4 <memset>
    93f0:	00800044 	movi	r2,1
    93f4:	84000715 	stw	r16,28(r16)
    93f8:	85800815 	stw	r22,32(r16)
    93fc:	85400915 	stw	r21,36(r16)
    9400:	85000a15 	stw	r20,40(r16)
    9404:	84c00b15 	stw	r19,44(r16)
    9408:	90800e15 	stw	r2,56(r18)
    940c:	dfc00817 	ldw	ra,32(sp)
    9410:	ddc00717 	ldw	r23,28(sp)
    9414:	dd800617 	ldw	r22,24(sp)
    9418:	dd400517 	ldw	r21,20(sp)
    941c:	dd000417 	ldw	r20,16(sp)
    9420:	dcc00317 	ldw	r19,12(sp)
    9424:	dc800217 	ldw	r18,8(sp)
    9428:	dc400117 	ldw	r17,4(sp)
    942c:	dc000017 	ldw	r16,0(sp)
    9430:	dec00904 	addi	sp,sp,36
    9434:	f800283a 	ret

00009438 <__fp_lock>:
    9438:	0005883a 	mov	r2,zero
    943c:	f800283a 	ret

00009440 <__sfmoreglue>:
    9440:	defffc04 	addi	sp,sp,-16
    9444:	dc400115 	stw	r17,4(sp)
    9448:	2c7fffc4 	addi	r17,r5,-1
    944c:	8c401a24 	muli	r17,r17,104
    9450:	dc800215 	stw	r18,8(sp)
    9454:	2825883a 	mov	r18,r5
    9458:	89401d04 	addi	r5,r17,116
    945c:	dc000015 	stw	r16,0(sp)
    9460:	dfc00315 	stw	ra,12(sp)
    9464:	0009e7c0 	call	9e7c <_malloc_r>
    9468:	1021883a 	mov	r16,r2
    946c:	10000726 	beq	r2,zero,948c <__sfmoreglue+0x4c>
    9470:	11000304 	addi	r4,r2,12
    9474:	10000015 	stw	zero,0(r2)
    9478:	14800115 	stw	r18,4(r2)
    947c:	11000215 	stw	r4,8(r2)
    9480:	89801a04 	addi	r6,r17,104
    9484:	000b883a 	mov	r5,zero
    9488:	000a8b40 	call	a8b4 <memset>
    948c:	8005883a 	mov	r2,r16
    9490:	dfc00317 	ldw	ra,12(sp)
    9494:	dc800217 	ldw	r18,8(sp)
    9498:	dc400117 	ldw	r17,4(sp)
    949c:	dc000017 	ldw	r16,0(sp)
    94a0:	dec00404 	addi	sp,sp,16
    94a4:	f800283a 	ret

000094a8 <__sfp>:
    94a8:	defffb04 	addi	sp,sp,-20
    94ac:	dc000015 	stw	r16,0(sp)
    94b0:	040000b4 	movhi	r16,2
    94b4:	84373704 	addi	r16,r16,-8996
    94b8:	dcc00315 	stw	r19,12(sp)
    94bc:	2027883a 	mov	r19,r4
    94c0:	81000017 	ldw	r4,0(r16)
    94c4:	dfc00415 	stw	ra,16(sp)
    94c8:	dc800215 	stw	r18,8(sp)
    94cc:	20800e17 	ldw	r2,56(r4)
    94d0:	dc400115 	stw	r17,4(sp)
    94d4:	1000021e 	bne	r2,zero,94e0 <__sfp+0x38>
    94d8:	000929c0 	call	929c <__sinit.part.1>
    94dc:	81000017 	ldw	r4,0(r16)
    94e0:	2480b804 	addi	r18,r4,736
    94e4:	047fffc4 	movi	r17,-1
    94e8:	91000117 	ldw	r4,4(r18)
    94ec:	94000217 	ldw	r16,8(r18)
    94f0:	213fffc4 	addi	r4,r4,-1
    94f4:	20000a16 	blt	r4,zero,9520 <__sfp+0x78>
    94f8:	8080030f 	ldh	r2,12(r16)
    94fc:	10000c26 	beq	r2,zero,9530 <__sfp+0x88>
    9500:	80c01d04 	addi	r3,r16,116
    9504:	00000206 	br	9510 <__sfp+0x68>
    9508:	18bfe60f 	ldh	r2,-104(r3)
    950c:	10000826 	beq	r2,zero,9530 <__sfp+0x88>
    9510:	213fffc4 	addi	r4,r4,-1
    9514:	1c3ffd04 	addi	r16,r3,-12
    9518:	18c01a04 	addi	r3,r3,104
    951c:	247ffa1e 	bne	r4,r17,9508 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009508>
    9520:	90800017 	ldw	r2,0(r18)
    9524:	10001d26 	beq	r2,zero,959c <__sfp+0xf4>
    9528:	1025883a 	mov	r18,r2
    952c:	003fee06 	br	94e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70094e8>
    9530:	00bfffc4 	movi	r2,-1
    9534:	8080038d 	sth	r2,14(r16)
    9538:	00800044 	movi	r2,1
    953c:	8080030d 	sth	r2,12(r16)
    9540:	80001915 	stw	zero,100(r16)
    9544:	80000015 	stw	zero,0(r16)
    9548:	80000215 	stw	zero,8(r16)
    954c:	80000115 	stw	zero,4(r16)
    9550:	80000415 	stw	zero,16(r16)
    9554:	80000515 	stw	zero,20(r16)
    9558:	80000615 	stw	zero,24(r16)
    955c:	01800204 	movi	r6,8
    9560:	000b883a 	mov	r5,zero
    9564:	81001704 	addi	r4,r16,92
    9568:	000a8b40 	call	a8b4 <memset>
    956c:	8005883a 	mov	r2,r16
    9570:	80000c15 	stw	zero,48(r16)
    9574:	80000d15 	stw	zero,52(r16)
    9578:	80001115 	stw	zero,68(r16)
    957c:	80001215 	stw	zero,72(r16)
    9580:	dfc00417 	ldw	ra,16(sp)
    9584:	dcc00317 	ldw	r19,12(sp)
    9588:	dc800217 	ldw	r18,8(sp)
    958c:	dc400117 	ldw	r17,4(sp)
    9590:	dc000017 	ldw	r16,0(sp)
    9594:	dec00504 	addi	sp,sp,20
    9598:	f800283a 	ret
    959c:	01400104 	movi	r5,4
    95a0:	9809883a 	mov	r4,r19
    95a4:	00094400 	call	9440 <__sfmoreglue>
    95a8:	90800015 	stw	r2,0(r18)
    95ac:	103fde1e 	bne	r2,zero,9528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009528>
    95b0:	00800304 	movi	r2,12
    95b4:	98800015 	stw	r2,0(r19)
    95b8:	0005883a 	mov	r2,zero
    95bc:	003ff006 	br	9580 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009580>

000095c0 <_cleanup>:
    95c0:	008000b4 	movhi	r2,2
    95c4:	10b73704 	addi	r2,r2,-8996
    95c8:	11000017 	ldw	r4,0(r2)
    95cc:	01400074 	movhi	r5,1
    95d0:	29754404 	addi	r5,r5,-10992
    95d4:	0009b201 	jmpi	9b20 <_fwalk_reent>

000095d8 <__sinit>:
    95d8:	20800e17 	ldw	r2,56(r4)
    95dc:	10000126 	beq	r2,zero,95e4 <__sinit+0xc>
    95e0:	f800283a 	ret
    95e4:	000929c1 	jmpi	929c <__sinit.part.1>

000095e8 <__sfp_lock_acquire>:
    95e8:	f800283a 	ret

000095ec <__sfp_lock_release>:
    95ec:	f800283a 	ret

000095f0 <__sinit_lock_acquire>:
    95f0:	f800283a 	ret

000095f4 <__sinit_lock_release>:
    95f4:	f800283a 	ret

000095f8 <__fp_lock_all>:
    95f8:	008000b4 	movhi	r2,2
    95fc:	10b73804 	addi	r2,r2,-8992
    9600:	11000017 	ldw	r4,0(r2)
    9604:	01400074 	movhi	r5,1
    9608:	29650e04 	addi	r5,r5,-27592
    960c:	0009a5c1 	jmpi	9a5c <_fwalk>

00009610 <__fp_unlock_all>:
    9610:	008000b4 	movhi	r2,2
    9614:	10b73804 	addi	r2,r2,-8992
    9618:	11000017 	ldw	r4,0(r2)
    961c:	01400074 	movhi	r5,1
    9620:	2964a204 	addi	r5,r5,-28024
    9624:	0009a5c1 	jmpi	9a5c <_fwalk>

00009628 <_malloc_trim_r>:
    9628:	defffb04 	addi	sp,sp,-20
    962c:	dcc00315 	stw	r19,12(sp)
    9630:	04c000b4 	movhi	r19,2
    9634:	dc800215 	stw	r18,8(sp)
    9638:	dc400115 	stw	r17,4(sp)
    963c:	dc000015 	stw	r16,0(sp)
    9640:	dfc00415 	stw	ra,16(sp)
    9644:	2821883a 	mov	r16,r5
    9648:	9cf0b304 	addi	r19,r19,-15668
    964c:	2025883a 	mov	r18,r4
    9650:	000fef40 	call	fef4 <__malloc_lock>
    9654:	98800217 	ldw	r2,8(r19)
    9658:	14400117 	ldw	r17,4(r2)
    965c:	00bfff04 	movi	r2,-4
    9660:	88a2703a 	and	r17,r17,r2
    9664:	8c21c83a 	sub	r16,r17,r16
    9668:	8403fbc4 	addi	r16,r16,4079
    966c:	8020d33a 	srli	r16,r16,12
    9670:	0083ffc4 	movi	r2,4095
    9674:	843fffc4 	addi	r16,r16,-1
    9678:	8020933a 	slli	r16,r16,12
    967c:	1400060e 	bge	r2,r16,9698 <_malloc_trim_r+0x70>
    9680:	000b883a 	mov	r5,zero
    9684:	9009883a 	mov	r4,r18
    9688:	000ba4c0 	call	ba4c <_sbrk_r>
    968c:	98c00217 	ldw	r3,8(r19)
    9690:	1c47883a 	add	r3,r3,r17
    9694:	10c00a26 	beq	r2,r3,96c0 <_malloc_trim_r+0x98>
    9698:	9009883a 	mov	r4,r18
    969c:	00100140 	call	10014 <__malloc_unlock>
    96a0:	0005883a 	mov	r2,zero
    96a4:	dfc00417 	ldw	ra,16(sp)
    96a8:	dcc00317 	ldw	r19,12(sp)
    96ac:	dc800217 	ldw	r18,8(sp)
    96b0:	dc400117 	ldw	r17,4(sp)
    96b4:	dc000017 	ldw	r16,0(sp)
    96b8:	dec00504 	addi	sp,sp,20
    96bc:	f800283a 	ret
    96c0:	040bc83a 	sub	r5,zero,r16
    96c4:	9009883a 	mov	r4,r18
    96c8:	000ba4c0 	call	ba4c <_sbrk_r>
    96cc:	00ffffc4 	movi	r3,-1
    96d0:	10c00d26 	beq	r2,r3,9708 <_malloc_trim_r+0xe0>
    96d4:	00c000b4 	movhi	r3,2
    96d8:	18ff6704 	addi	r3,r3,-612
    96dc:	18800017 	ldw	r2,0(r3)
    96e0:	99000217 	ldw	r4,8(r19)
    96e4:	8c23c83a 	sub	r17,r17,r16
    96e8:	8c400054 	ori	r17,r17,1
    96ec:	1421c83a 	sub	r16,r2,r16
    96f0:	24400115 	stw	r17,4(r4)
    96f4:	9009883a 	mov	r4,r18
    96f8:	1c000015 	stw	r16,0(r3)
    96fc:	00100140 	call	10014 <__malloc_unlock>
    9700:	00800044 	movi	r2,1
    9704:	003fe706 	br	96a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70096a4>
    9708:	000b883a 	mov	r5,zero
    970c:	9009883a 	mov	r4,r18
    9710:	000ba4c0 	call	ba4c <_sbrk_r>
    9714:	99000217 	ldw	r4,8(r19)
    9718:	014003c4 	movi	r5,15
    971c:	1107c83a 	sub	r3,r2,r4
    9720:	28ffdd0e 	bge	r5,r3,9698 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009698>
    9724:	014000b4 	movhi	r5,2
    9728:	29773a04 	addi	r5,r5,-8984
    972c:	29400017 	ldw	r5,0(r5)
    9730:	18c00054 	ori	r3,r3,1
    9734:	20c00115 	stw	r3,4(r4)
    9738:	00c000b4 	movhi	r3,2
    973c:	1145c83a 	sub	r2,r2,r5
    9740:	18ff6704 	addi	r3,r3,-612
    9744:	18800015 	stw	r2,0(r3)
    9748:	003fd306 	br	9698 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009698>

0000974c <_free_r>:
    974c:	28004126 	beq	r5,zero,9854 <_free_r+0x108>
    9750:	defffd04 	addi	sp,sp,-12
    9754:	dc400115 	stw	r17,4(sp)
    9758:	dc000015 	stw	r16,0(sp)
    975c:	2023883a 	mov	r17,r4
    9760:	2821883a 	mov	r16,r5
    9764:	dfc00215 	stw	ra,8(sp)
    9768:	000fef40 	call	fef4 <__malloc_lock>
    976c:	81ffff17 	ldw	r7,-4(r16)
    9770:	00bfff84 	movi	r2,-2
    9774:	010000b4 	movhi	r4,2
    9778:	81bffe04 	addi	r6,r16,-8
    977c:	3884703a 	and	r2,r7,r2
    9780:	2130b304 	addi	r4,r4,-15668
    9784:	308b883a 	add	r5,r6,r2
    9788:	2a400117 	ldw	r9,4(r5)
    978c:	22000217 	ldw	r8,8(r4)
    9790:	00ffff04 	movi	r3,-4
    9794:	48c6703a 	and	r3,r9,r3
    9798:	2a005726 	beq	r5,r8,98f8 <_free_r+0x1ac>
    979c:	28c00115 	stw	r3,4(r5)
    97a0:	39c0004c 	andi	r7,r7,1
    97a4:	3800091e 	bne	r7,zero,97cc <_free_r+0x80>
    97a8:	823ffe17 	ldw	r8,-8(r16)
    97ac:	22400204 	addi	r9,r4,8
    97b0:	320dc83a 	sub	r6,r6,r8
    97b4:	31c00217 	ldw	r7,8(r6)
    97b8:	1205883a 	add	r2,r2,r8
    97bc:	3a406526 	beq	r7,r9,9954 <_free_r+0x208>
    97c0:	32000317 	ldw	r8,12(r6)
    97c4:	3a000315 	stw	r8,12(r7)
    97c8:	41c00215 	stw	r7,8(r8)
    97cc:	28cf883a 	add	r7,r5,r3
    97d0:	39c00117 	ldw	r7,4(r7)
    97d4:	39c0004c 	andi	r7,r7,1
    97d8:	38003a26 	beq	r7,zero,98c4 <_free_r+0x178>
    97dc:	10c00054 	ori	r3,r2,1
    97e0:	30c00115 	stw	r3,4(r6)
    97e4:	3087883a 	add	r3,r6,r2
    97e8:	18800015 	stw	r2,0(r3)
    97ec:	00c07fc4 	movi	r3,511
    97f0:	18801936 	bltu	r3,r2,9858 <_free_r+0x10c>
    97f4:	1004d0fa 	srli	r2,r2,3
    97f8:	01c00044 	movi	r7,1
    97fc:	21400117 	ldw	r5,4(r4)
    9800:	10c00044 	addi	r3,r2,1
    9804:	18c7883a 	add	r3,r3,r3
    9808:	1005d0ba 	srai	r2,r2,2
    980c:	18c7883a 	add	r3,r3,r3
    9810:	18c7883a 	add	r3,r3,r3
    9814:	1907883a 	add	r3,r3,r4
    9818:	3884983a 	sll	r2,r7,r2
    981c:	19c00017 	ldw	r7,0(r3)
    9820:	1a3ffe04 	addi	r8,r3,-8
    9824:	1144b03a 	or	r2,r2,r5
    9828:	32000315 	stw	r8,12(r6)
    982c:	31c00215 	stw	r7,8(r6)
    9830:	20800115 	stw	r2,4(r4)
    9834:	19800015 	stw	r6,0(r3)
    9838:	39800315 	stw	r6,12(r7)
    983c:	8809883a 	mov	r4,r17
    9840:	dfc00217 	ldw	ra,8(sp)
    9844:	dc400117 	ldw	r17,4(sp)
    9848:	dc000017 	ldw	r16,0(sp)
    984c:	dec00304 	addi	sp,sp,12
    9850:	00100141 	jmpi	10014 <__malloc_unlock>
    9854:	f800283a 	ret
    9858:	100ad27a 	srli	r5,r2,9
    985c:	00c00104 	movi	r3,4
    9860:	19404a36 	bltu	r3,r5,998c <_free_r+0x240>
    9864:	100ad1ba 	srli	r5,r2,6
    9868:	28c00e44 	addi	r3,r5,57
    986c:	18c7883a 	add	r3,r3,r3
    9870:	29400e04 	addi	r5,r5,56
    9874:	18c7883a 	add	r3,r3,r3
    9878:	18c7883a 	add	r3,r3,r3
    987c:	1909883a 	add	r4,r3,r4
    9880:	20c00017 	ldw	r3,0(r4)
    9884:	01c000b4 	movhi	r7,2
    9888:	213ffe04 	addi	r4,r4,-8
    988c:	39f0b304 	addi	r7,r7,-15668
    9890:	20c04426 	beq	r4,r3,99a4 <_free_r+0x258>
    9894:	01ffff04 	movi	r7,-4
    9898:	19400117 	ldw	r5,4(r3)
    989c:	29ca703a 	and	r5,r5,r7
    98a0:	1140022e 	bgeu	r2,r5,98ac <_free_r+0x160>
    98a4:	18c00217 	ldw	r3,8(r3)
    98a8:	20fffb1e 	bne	r4,r3,9898 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009898>
    98ac:	19000317 	ldw	r4,12(r3)
    98b0:	31000315 	stw	r4,12(r6)
    98b4:	30c00215 	stw	r3,8(r6)
    98b8:	21800215 	stw	r6,8(r4)
    98bc:	19800315 	stw	r6,12(r3)
    98c0:	003fde06 	br	983c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700983c>
    98c4:	29c00217 	ldw	r7,8(r5)
    98c8:	10c5883a 	add	r2,r2,r3
    98cc:	00c000b4 	movhi	r3,2
    98d0:	18f0b504 	addi	r3,r3,-15660
    98d4:	38c03b26 	beq	r7,r3,99c4 <_free_r+0x278>
    98d8:	2a000317 	ldw	r8,12(r5)
    98dc:	11400054 	ori	r5,r2,1
    98e0:	3087883a 	add	r3,r6,r2
    98e4:	3a000315 	stw	r8,12(r7)
    98e8:	41c00215 	stw	r7,8(r8)
    98ec:	31400115 	stw	r5,4(r6)
    98f0:	18800015 	stw	r2,0(r3)
    98f4:	003fbd06 	br	97ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097ec>
    98f8:	39c0004c 	andi	r7,r7,1
    98fc:	10c5883a 	add	r2,r2,r3
    9900:	3800071e 	bne	r7,zero,9920 <_free_r+0x1d4>
    9904:	81fffe17 	ldw	r7,-8(r16)
    9908:	31cdc83a 	sub	r6,r6,r7
    990c:	30c00317 	ldw	r3,12(r6)
    9910:	31400217 	ldw	r5,8(r6)
    9914:	11c5883a 	add	r2,r2,r7
    9918:	28c00315 	stw	r3,12(r5)
    991c:	19400215 	stw	r5,8(r3)
    9920:	10c00054 	ori	r3,r2,1
    9924:	30c00115 	stw	r3,4(r6)
    9928:	00c000b4 	movhi	r3,2
    992c:	18f73b04 	addi	r3,r3,-8980
    9930:	18c00017 	ldw	r3,0(r3)
    9934:	21800215 	stw	r6,8(r4)
    9938:	10ffc036 	bltu	r2,r3,983c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700983c>
    993c:	008000b4 	movhi	r2,2
    9940:	10bf4504 	addi	r2,r2,-748
    9944:	11400017 	ldw	r5,0(r2)
    9948:	8809883a 	mov	r4,r17
    994c:	00096280 	call	9628 <_malloc_trim_r>
    9950:	003fba06 	br	983c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700983c>
    9954:	28c9883a 	add	r4,r5,r3
    9958:	21000117 	ldw	r4,4(r4)
    995c:	2100004c 	andi	r4,r4,1
    9960:	2000391e 	bne	r4,zero,9a48 <_free_r+0x2fc>
    9964:	29c00217 	ldw	r7,8(r5)
    9968:	29000317 	ldw	r4,12(r5)
    996c:	1885883a 	add	r2,r3,r2
    9970:	10c00054 	ori	r3,r2,1
    9974:	39000315 	stw	r4,12(r7)
    9978:	21c00215 	stw	r7,8(r4)
    997c:	30c00115 	stw	r3,4(r6)
    9980:	308d883a 	add	r6,r6,r2
    9984:	30800015 	stw	r2,0(r6)
    9988:	003fac06 	br	983c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700983c>
    998c:	00c00504 	movi	r3,20
    9990:	19401536 	bltu	r3,r5,99e8 <_free_r+0x29c>
    9994:	28c01704 	addi	r3,r5,92
    9998:	18c7883a 	add	r3,r3,r3
    999c:	294016c4 	addi	r5,r5,91
    99a0:	003fb406 	br	9874 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009874>
    99a4:	280bd0ba 	srai	r5,r5,2
    99a8:	00c00044 	movi	r3,1
    99ac:	38800117 	ldw	r2,4(r7)
    99b0:	194a983a 	sll	r5,r3,r5
    99b4:	2007883a 	mov	r3,r4
    99b8:	2884b03a 	or	r2,r5,r2
    99bc:	38800115 	stw	r2,4(r7)
    99c0:	003fbb06 	br	98b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70098b0>
    99c4:	21800515 	stw	r6,20(r4)
    99c8:	21800415 	stw	r6,16(r4)
    99cc:	10c00054 	ori	r3,r2,1
    99d0:	31c00315 	stw	r7,12(r6)
    99d4:	31c00215 	stw	r7,8(r6)
    99d8:	30c00115 	stw	r3,4(r6)
    99dc:	308d883a 	add	r6,r6,r2
    99e0:	30800015 	stw	r2,0(r6)
    99e4:	003f9506 	br	983c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700983c>
    99e8:	00c01504 	movi	r3,84
    99ec:	19400536 	bltu	r3,r5,9a04 <_free_r+0x2b8>
    99f0:	100ad33a 	srli	r5,r2,12
    99f4:	28c01bc4 	addi	r3,r5,111
    99f8:	18c7883a 	add	r3,r3,r3
    99fc:	29401b84 	addi	r5,r5,110
    9a00:	003f9c06 	br	9874 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009874>
    9a04:	00c05504 	movi	r3,340
    9a08:	19400536 	bltu	r3,r5,9a20 <_free_r+0x2d4>
    9a0c:	100ad3fa 	srli	r5,r2,15
    9a10:	28c01e04 	addi	r3,r5,120
    9a14:	18c7883a 	add	r3,r3,r3
    9a18:	29401dc4 	addi	r5,r5,119
    9a1c:	003f9506 	br	9874 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009874>
    9a20:	00c15504 	movi	r3,1364
    9a24:	19400536 	bltu	r3,r5,9a3c <_free_r+0x2f0>
    9a28:	100ad4ba 	srli	r5,r2,18
    9a2c:	28c01f44 	addi	r3,r5,125
    9a30:	18c7883a 	add	r3,r3,r3
    9a34:	29401f04 	addi	r5,r5,124
    9a38:	003f8e06 	br	9874 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009874>
    9a3c:	00c03f84 	movi	r3,254
    9a40:	01401f84 	movi	r5,126
    9a44:	003f8b06 	br	9874 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009874>
    9a48:	10c00054 	ori	r3,r2,1
    9a4c:	30c00115 	stw	r3,4(r6)
    9a50:	308d883a 	add	r6,r6,r2
    9a54:	30800015 	stw	r2,0(r6)
    9a58:	003f7806 	br	983c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700983c>

00009a5c <_fwalk>:
    9a5c:	defff704 	addi	sp,sp,-36
    9a60:	dd000415 	stw	r20,16(sp)
    9a64:	dfc00815 	stw	ra,32(sp)
    9a68:	ddc00715 	stw	r23,28(sp)
    9a6c:	dd800615 	stw	r22,24(sp)
    9a70:	dd400515 	stw	r21,20(sp)
    9a74:	dcc00315 	stw	r19,12(sp)
    9a78:	dc800215 	stw	r18,8(sp)
    9a7c:	dc400115 	stw	r17,4(sp)
    9a80:	dc000015 	stw	r16,0(sp)
    9a84:	2500b804 	addi	r20,r4,736
    9a88:	a0002326 	beq	r20,zero,9b18 <_fwalk+0xbc>
    9a8c:	282b883a 	mov	r21,r5
    9a90:	002f883a 	mov	r23,zero
    9a94:	05800044 	movi	r22,1
    9a98:	04ffffc4 	movi	r19,-1
    9a9c:	a4400117 	ldw	r17,4(r20)
    9aa0:	a4800217 	ldw	r18,8(r20)
    9aa4:	8c7fffc4 	addi	r17,r17,-1
    9aa8:	88000d16 	blt	r17,zero,9ae0 <_fwalk+0x84>
    9aac:	94000304 	addi	r16,r18,12
    9ab0:	94800384 	addi	r18,r18,14
    9ab4:	8080000b 	ldhu	r2,0(r16)
    9ab8:	8c7fffc4 	addi	r17,r17,-1
    9abc:	813ffd04 	addi	r4,r16,-12
    9ac0:	b080042e 	bgeu	r22,r2,9ad4 <_fwalk+0x78>
    9ac4:	9080000f 	ldh	r2,0(r18)
    9ac8:	14c00226 	beq	r2,r19,9ad4 <_fwalk+0x78>
    9acc:	a83ee83a 	callr	r21
    9ad0:	b8aeb03a 	or	r23,r23,r2
    9ad4:	84001a04 	addi	r16,r16,104
    9ad8:	94801a04 	addi	r18,r18,104
    9adc:	8cfff51e 	bne	r17,r19,9ab4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ab4>
    9ae0:	a5000017 	ldw	r20,0(r20)
    9ae4:	a03fed1e 	bne	r20,zero,9a9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a9c>
    9ae8:	b805883a 	mov	r2,r23
    9aec:	dfc00817 	ldw	ra,32(sp)
    9af0:	ddc00717 	ldw	r23,28(sp)
    9af4:	dd800617 	ldw	r22,24(sp)
    9af8:	dd400517 	ldw	r21,20(sp)
    9afc:	dd000417 	ldw	r20,16(sp)
    9b00:	dcc00317 	ldw	r19,12(sp)
    9b04:	dc800217 	ldw	r18,8(sp)
    9b08:	dc400117 	ldw	r17,4(sp)
    9b0c:	dc000017 	ldw	r16,0(sp)
    9b10:	dec00904 	addi	sp,sp,36
    9b14:	f800283a 	ret
    9b18:	002f883a 	mov	r23,zero
    9b1c:	003ff206 	br	9ae8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ae8>

00009b20 <_fwalk_reent>:
    9b20:	defff704 	addi	sp,sp,-36
    9b24:	dd000415 	stw	r20,16(sp)
    9b28:	dfc00815 	stw	ra,32(sp)
    9b2c:	ddc00715 	stw	r23,28(sp)
    9b30:	dd800615 	stw	r22,24(sp)
    9b34:	dd400515 	stw	r21,20(sp)
    9b38:	dcc00315 	stw	r19,12(sp)
    9b3c:	dc800215 	stw	r18,8(sp)
    9b40:	dc400115 	stw	r17,4(sp)
    9b44:	dc000015 	stw	r16,0(sp)
    9b48:	2500b804 	addi	r20,r4,736
    9b4c:	a0002326 	beq	r20,zero,9bdc <_fwalk_reent+0xbc>
    9b50:	282b883a 	mov	r21,r5
    9b54:	2027883a 	mov	r19,r4
    9b58:	002f883a 	mov	r23,zero
    9b5c:	05800044 	movi	r22,1
    9b60:	04bfffc4 	movi	r18,-1
    9b64:	a4400117 	ldw	r17,4(r20)
    9b68:	a4000217 	ldw	r16,8(r20)
    9b6c:	8c7fffc4 	addi	r17,r17,-1
    9b70:	88000c16 	blt	r17,zero,9ba4 <_fwalk_reent+0x84>
    9b74:	84000304 	addi	r16,r16,12
    9b78:	8080000b 	ldhu	r2,0(r16)
    9b7c:	8c7fffc4 	addi	r17,r17,-1
    9b80:	817ffd04 	addi	r5,r16,-12
    9b84:	b080052e 	bgeu	r22,r2,9b9c <_fwalk_reent+0x7c>
    9b88:	8080008f 	ldh	r2,2(r16)
    9b8c:	9809883a 	mov	r4,r19
    9b90:	14800226 	beq	r2,r18,9b9c <_fwalk_reent+0x7c>
    9b94:	a83ee83a 	callr	r21
    9b98:	b8aeb03a 	or	r23,r23,r2
    9b9c:	84001a04 	addi	r16,r16,104
    9ba0:	8cbff51e 	bne	r17,r18,9b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b78>
    9ba4:	a5000017 	ldw	r20,0(r20)
    9ba8:	a03fee1e 	bne	r20,zero,9b64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b64>
    9bac:	b805883a 	mov	r2,r23
    9bb0:	dfc00817 	ldw	ra,32(sp)
    9bb4:	ddc00717 	ldw	r23,28(sp)
    9bb8:	dd800617 	ldw	r22,24(sp)
    9bbc:	dd400517 	ldw	r21,20(sp)
    9bc0:	dd000417 	ldw	r20,16(sp)
    9bc4:	dcc00317 	ldw	r19,12(sp)
    9bc8:	dc800217 	ldw	r18,8(sp)
    9bcc:	dc400117 	ldw	r17,4(sp)
    9bd0:	dc000017 	ldw	r16,0(sp)
    9bd4:	dec00904 	addi	sp,sp,36
    9bd8:	f800283a 	ret
    9bdc:	002f883a 	mov	r23,zero
    9be0:	003ff206 	br	9bac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009bac>

00009be4 <_setlocale_r>:
    9be4:	30001b26 	beq	r6,zero,9c54 <_setlocale_r+0x70>
    9be8:	014000b4 	movhi	r5,2
    9bec:	defffe04 	addi	sp,sp,-8
    9bf0:	296e7c04 	addi	r5,r5,-17936
    9bf4:	3009883a 	mov	r4,r6
    9bf8:	dc000015 	stw	r16,0(sp)
    9bfc:	dfc00115 	stw	ra,4(sp)
    9c00:	3021883a 	mov	r16,r6
    9c04:	000bbdc0 	call	bbdc <strcmp>
    9c08:	1000061e 	bne	r2,zero,9c24 <_setlocale_r+0x40>
    9c0c:	008000b4 	movhi	r2,2
    9c10:	10ae7b04 	addi	r2,r2,-17940
    9c14:	dfc00117 	ldw	ra,4(sp)
    9c18:	dc000017 	ldw	r16,0(sp)
    9c1c:	dec00204 	addi	sp,sp,8
    9c20:	f800283a 	ret
    9c24:	014000b4 	movhi	r5,2
    9c28:	296e7b04 	addi	r5,r5,-17940
    9c2c:	8009883a 	mov	r4,r16
    9c30:	000bbdc0 	call	bbdc <strcmp>
    9c34:	103ff526 	beq	r2,zero,9c0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c0c>
    9c38:	014000b4 	movhi	r5,2
    9c3c:	296e6604 	addi	r5,r5,-18024
    9c40:	8009883a 	mov	r4,r16
    9c44:	000bbdc0 	call	bbdc <strcmp>
    9c48:	103ff026 	beq	r2,zero,9c0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c0c>
    9c4c:	0005883a 	mov	r2,zero
    9c50:	003ff006 	br	9c14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c14>
    9c54:	008000b4 	movhi	r2,2
    9c58:	10ae7b04 	addi	r2,r2,-17940
    9c5c:	f800283a 	ret

00009c60 <__locale_charset>:
    9c60:	008000b4 	movhi	r2,2
    9c64:	10b09d04 	addi	r2,r2,-15756
    9c68:	f800283a 	ret

00009c6c <__locale_mb_cur_max>:
    9c6c:	008000b4 	movhi	r2,2
    9c70:	10b73904 	addi	r2,r2,-8988
    9c74:	10800017 	ldw	r2,0(r2)
    9c78:	f800283a 	ret

00009c7c <__locale_msgcharset>:
    9c7c:	008000b4 	movhi	r2,2
    9c80:	10b09504 	addi	r2,r2,-15788
    9c84:	f800283a 	ret

00009c88 <__locale_cjk_lang>:
    9c88:	0005883a 	mov	r2,zero
    9c8c:	f800283a 	ret

00009c90 <_localeconv_r>:
    9c90:	008000b4 	movhi	r2,2
    9c94:	10b0a504 	addi	r2,r2,-15724
    9c98:	f800283a 	ret

00009c9c <setlocale>:
    9c9c:	008000b4 	movhi	r2,2
    9ca0:	10b73804 	addi	r2,r2,-8992
    9ca4:	280d883a 	mov	r6,r5
    9ca8:	200b883a 	mov	r5,r4
    9cac:	11000017 	ldw	r4,0(r2)
    9cb0:	0009be41 	jmpi	9be4 <_setlocale_r>

00009cb4 <localeconv>:
    9cb4:	008000b4 	movhi	r2,2
    9cb8:	10b0a504 	addi	r2,r2,-15724
    9cbc:	f800283a 	ret

00009cc0 <__smakebuf_r>:
    9cc0:	2880030b 	ldhu	r2,12(r5)
    9cc4:	10c0008c 	andi	r3,r2,2
    9cc8:	1800411e 	bne	r3,zero,9dd0 <__smakebuf_r+0x110>
    9ccc:	deffec04 	addi	sp,sp,-80
    9cd0:	dc000f15 	stw	r16,60(sp)
    9cd4:	2821883a 	mov	r16,r5
    9cd8:	2940038f 	ldh	r5,14(r5)
    9cdc:	dc401015 	stw	r17,64(sp)
    9ce0:	dfc01315 	stw	ra,76(sp)
    9ce4:	dcc01215 	stw	r19,72(sp)
    9ce8:	dc801115 	stw	r18,68(sp)
    9cec:	2023883a 	mov	r17,r4
    9cf0:	28001c16 	blt	r5,zero,9d64 <__smakebuf_r+0xa4>
    9cf4:	d80d883a 	mov	r6,sp
    9cf8:	000d81c0 	call	d81c <_fstat_r>
    9cfc:	10001816 	blt	r2,zero,9d60 <__smakebuf_r+0xa0>
    9d00:	d8800117 	ldw	r2,4(sp)
    9d04:	00e00014 	movui	r3,32768
    9d08:	10bc000c 	andi	r2,r2,61440
    9d0c:	14c80020 	cmpeqi	r19,r2,8192
    9d10:	10c03726 	beq	r2,r3,9df0 <__smakebuf_r+0x130>
    9d14:	80c0030b 	ldhu	r3,12(r16)
    9d18:	18c20014 	ori	r3,r3,2048
    9d1c:	80c0030d 	sth	r3,12(r16)
    9d20:	00c80004 	movi	r3,8192
    9d24:	10c0521e 	bne	r2,r3,9e70 <__smakebuf_r+0x1b0>
    9d28:	8140038f 	ldh	r5,14(r16)
    9d2c:	8809883a 	mov	r4,r17
    9d30:	000dd340 	call	dd34 <_isatty_r>
    9d34:	10004c26 	beq	r2,zero,9e68 <__smakebuf_r+0x1a8>
    9d38:	8080030b 	ldhu	r2,12(r16)
    9d3c:	80c010c4 	addi	r3,r16,67
    9d40:	80c00015 	stw	r3,0(r16)
    9d44:	10800054 	ori	r2,r2,1
    9d48:	8080030d 	sth	r2,12(r16)
    9d4c:	00800044 	movi	r2,1
    9d50:	80c00415 	stw	r3,16(r16)
    9d54:	80800515 	stw	r2,20(r16)
    9d58:	04810004 	movi	r18,1024
    9d5c:	00000706 	br	9d7c <__smakebuf_r+0xbc>
    9d60:	8080030b 	ldhu	r2,12(r16)
    9d64:	10c0200c 	andi	r3,r2,128
    9d68:	18001f1e 	bne	r3,zero,9de8 <__smakebuf_r+0x128>
    9d6c:	04810004 	movi	r18,1024
    9d70:	10820014 	ori	r2,r2,2048
    9d74:	8080030d 	sth	r2,12(r16)
    9d78:	0027883a 	mov	r19,zero
    9d7c:	900b883a 	mov	r5,r18
    9d80:	8809883a 	mov	r4,r17
    9d84:	0009e7c0 	call	9e7c <_malloc_r>
    9d88:	10002c26 	beq	r2,zero,9e3c <__smakebuf_r+0x17c>
    9d8c:	80c0030b 	ldhu	r3,12(r16)
    9d90:	01000074 	movhi	r4,1
    9d94:	2124a404 	addi	r4,r4,-28016
    9d98:	89000f15 	stw	r4,60(r17)
    9d9c:	18c02014 	ori	r3,r3,128
    9da0:	80c0030d 	sth	r3,12(r16)
    9da4:	80800015 	stw	r2,0(r16)
    9da8:	80800415 	stw	r2,16(r16)
    9dac:	84800515 	stw	r18,20(r16)
    9db0:	98001a1e 	bne	r19,zero,9e1c <__smakebuf_r+0x15c>
    9db4:	dfc01317 	ldw	ra,76(sp)
    9db8:	dcc01217 	ldw	r19,72(sp)
    9dbc:	dc801117 	ldw	r18,68(sp)
    9dc0:	dc401017 	ldw	r17,64(sp)
    9dc4:	dc000f17 	ldw	r16,60(sp)
    9dc8:	dec01404 	addi	sp,sp,80
    9dcc:	f800283a 	ret
    9dd0:	288010c4 	addi	r2,r5,67
    9dd4:	28800015 	stw	r2,0(r5)
    9dd8:	28800415 	stw	r2,16(r5)
    9ddc:	00800044 	movi	r2,1
    9de0:	28800515 	stw	r2,20(r5)
    9de4:	f800283a 	ret
    9de8:	04801004 	movi	r18,64
    9dec:	003fe006 	br	9d70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d70>
    9df0:	81000a17 	ldw	r4,40(r16)
    9df4:	00c00074 	movhi	r3,1
    9df8:	18eede04 	addi	r3,r3,-17544
    9dfc:	20ffc51e 	bne	r4,r3,9d14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d14>
    9e00:	8080030b 	ldhu	r2,12(r16)
    9e04:	04810004 	movi	r18,1024
    9e08:	84801315 	stw	r18,76(r16)
    9e0c:	1484b03a 	or	r2,r2,r18
    9e10:	8080030d 	sth	r2,12(r16)
    9e14:	0027883a 	mov	r19,zero
    9e18:	003fd806 	br	9d7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d7c>
    9e1c:	8140038f 	ldh	r5,14(r16)
    9e20:	8809883a 	mov	r4,r17
    9e24:	000dd340 	call	dd34 <_isatty_r>
    9e28:	103fe226 	beq	r2,zero,9db4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009db4>
    9e2c:	8080030b 	ldhu	r2,12(r16)
    9e30:	10800054 	ori	r2,r2,1
    9e34:	8080030d 	sth	r2,12(r16)
    9e38:	003fde06 	br	9db4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009db4>
    9e3c:	8080030b 	ldhu	r2,12(r16)
    9e40:	10c0800c 	andi	r3,r2,512
    9e44:	183fdb1e 	bne	r3,zero,9db4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009db4>
    9e48:	10800094 	ori	r2,r2,2
    9e4c:	80c010c4 	addi	r3,r16,67
    9e50:	8080030d 	sth	r2,12(r16)
    9e54:	00800044 	movi	r2,1
    9e58:	80c00015 	stw	r3,0(r16)
    9e5c:	80c00415 	stw	r3,16(r16)
    9e60:	80800515 	stw	r2,20(r16)
    9e64:	003fd306 	br	9db4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009db4>
    9e68:	04810004 	movi	r18,1024
    9e6c:	003fc306 	br	9d7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d7c>
    9e70:	0027883a 	mov	r19,zero
    9e74:	04810004 	movi	r18,1024
    9e78:	003fc006 	br	9d7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d7c>

00009e7c <_malloc_r>:
    9e7c:	defff504 	addi	sp,sp,-44
    9e80:	dc800315 	stw	r18,12(sp)
    9e84:	dfc00a15 	stw	ra,40(sp)
    9e88:	df000915 	stw	fp,36(sp)
    9e8c:	ddc00815 	stw	r23,32(sp)
    9e90:	dd800715 	stw	r22,28(sp)
    9e94:	dd400615 	stw	r21,24(sp)
    9e98:	dd000515 	stw	r20,20(sp)
    9e9c:	dcc00415 	stw	r19,16(sp)
    9ea0:	dc400215 	stw	r17,8(sp)
    9ea4:	dc000115 	stw	r16,4(sp)
    9ea8:	288002c4 	addi	r2,r5,11
    9eac:	00c00584 	movi	r3,22
    9eb0:	2025883a 	mov	r18,r4
    9eb4:	18807f2e 	bgeu	r3,r2,a0b4 <_malloc_r+0x238>
    9eb8:	047ffe04 	movi	r17,-8
    9ebc:	1462703a 	and	r17,r2,r17
    9ec0:	8800a316 	blt	r17,zero,a150 <_malloc_r+0x2d4>
    9ec4:	8940a236 	bltu	r17,r5,a150 <_malloc_r+0x2d4>
    9ec8:	000fef40 	call	fef4 <__malloc_lock>
    9ecc:	00807dc4 	movi	r2,503
    9ed0:	1441e92e 	bgeu	r2,r17,a678 <_malloc_r+0x7fc>
    9ed4:	8804d27a 	srli	r2,r17,9
    9ed8:	1000a126 	beq	r2,zero,a160 <_malloc_r+0x2e4>
    9edc:	00c00104 	movi	r3,4
    9ee0:	18811e36 	bltu	r3,r2,a35c <_malloc_r+0x4e0>
    9ee4:	8804d1ba 	srli	r2,r17,6
    9ee8:	12000e44 	addi	r8,r2,57
    9eec:	11c00e04 	addi	r7,r2,56
    9ef0:	4209883a 	add	r4,r8,r8
    9ef4:	04c000b4 	movhi	r19,2
    9ef8:	2109883a 	add	r4,r4,r4
    9efc:	9cf0b304 	addi	r19,r19,-15668
    9f00:	2109883a 	add	r4,r4,r4
    9f04:	9909883a 	add	r4,r19,r4
    9f08:	24000117 	ldw	r16,4(r4)
    9f0c:	213ffe04 	addi	r4,r4,-8
    9f10:	24009726 	beq	r4,r16,a170 <_malloc_r+0x2f4>
    9f14:	80800117 	ldw	r2,4(r16)
    9f18:	01bfff04 	movi	r6,-4
    9f1c:	014003c4 	movi	r5,15
    9f20:	1184703a 	and	r2,r2,r6
    9f24:	1447c83a 	sub	r3,r2,r17
    9f28:	28c00716 	blt	r5,r3,9f48 <_malloc_r+0xcc>
    9f2c:	1800920e 	bge	r3,zero,a178 <_malloc_r+0x2fc>
    9f30:	84000317 	ldw	r16,12(r16)
    9f34:	24008e26 	beq	r4,r16,a170 <_malloc_r+0x2f4>
    9f38:	80800117 	ldw	r2,4(r16)
    9f3c:	1184703a 	and	r2,r2,r6
    9f40:	1447c83a 	sub	r3,r2,r17
    9f44:	28fff90e 	bge	r5,r3,9f2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f2c>
    9f48:	3809883a 	mov	r4,r7
    9f4c:	018000b4 	movhi	r6,2
    9f50:	9c000417 	ldw	r16,16(r19)
    9f54:	31b0b304 	addi	r6,r6,-15668
    9f58:	32000204 	addi	r8,r6,8
    9f5c:	82013426 	beq	r16,r8,a430 <_malloc_r+0x5b4>
    9f60:	80c00117 	ldw	r3,4(r16)
    9f64:	00bfff04 	movi	r2,-4
    9f68:	188e703a 	and	r7,r3,r2
    9f6c:	3c45c83a 	sub	r2,r7,r17
    9f70:	00c003c4 	movi	r3,15
    9f74:	18811f16 	blt	r3,r2,a3f4 <_malloc_r+0x578>
    9f78:	32000515 	stw	r8,20(r6)
    9f7c:	32000415 	stw	r8,16(r6)
    9f80:	10007f0e 	bge	r2,zero,a180 <_malloc_r+0x304>
    9f84:	00807fc4 	movi	r2,511
    9f88:	11c0fd36 	bltu	r2,r7,a380 <_malloc_r+0x504>
    9f8c:	3806d0fa 	srli	r3,r7,3
    9f90:	01c00044 	movi	r7,1
    9f94:	30800117 	ldw	r2,4(r6)
    9f98:	19400044 	addi	r5,r3,1
    9f9c:	294b883a 	add	r5,r5,r5
    9fa0:	1807d0ba 	srai	r3,r3,2
    9fa4:	294b883a 	add	r5,r5,r5
    9fa8:	294b883a 	add	r5,r5,r5
    9fac:	298b883a 	add	r5,r5,r6
    9fb0:	38c6983a 	sll	r3,r7,r3
    9fb4:	29c00017 	ldw	r7,0(r5)
    9fb8:	2a7ffe04 	addi	r9,r5,-8
    9fbc:	1886b03a 	or	r3,r3,r2
    9fc0:	82400315 	stw	r9,12(r16)
    9fc4:	81c00215 	stw	r7,8(r16)
    9fc8:	30c00115 	stw	r3,4(r6)
    9fcc:	2c000015 	stw	r16,0(r5)
    9fd0:	3c000315 	stw	r16,12(r7)
    9fd4:	2005d0ba 	srai	r2,r4,2
    9fd8:	01400044 	movi	r5,1
    9fdc:	288a983a 	sll	r5,r5,r2
    9fe0:	19406f36 	bltu	r3,r5,a1a0 <_malloc_r+0x324>
    9fe4:	28c4703a 	and	r2,r5,r3
    9fe8:	10000a1e 	bne	r2,zero,a014 <_malloc_r+0x198>
    9fec:	00bfff04 	movi	r2,-4
    9ff0:	294b883a 	add	r5,r5,r5
    9ff4:	2088703a 	and	r4,r4,r2
    9ff8:	28c4703a 	and	r2,r5,r3
    9ffc:	21000104 	addi	r4,r4,4
    a000:	1000041e 	bne	r2,zero,a014 <_malloc_r+0x198>
    a004:	294b883a 	add	r5,r5,r5
    a008:	28c4703a 	and	r2,r5,r3
    a00c:	21000104 	addi	r4,r4,4
    a010:	103ffc26 	beq	r2,zero,a004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a004>
    a014:	02bfff04 	movi	r10,-4
    a018:	024003c4 	movi	r9,15
    a01c:	21800044 	addi	r6,r4,1
    a020:	318d883a 	add	r6,r6,r6
    a024:	318d883a 	add	r6,r6,r6
    a028:	318d883a 	add	r6,r6,r6
    a02c:	998d883a 	add	r6,r19,r6
    a030:	333ffe04 	addi	r12,r6,-8
    a034:	2017883a 	mov	r11,r4
    a038:	31800104 	addi	r6,r6,4
    a03c:	34000017 	ldw	r16,0(r6)
    a040:	31fffd04 	addi	r7,r6,-12
    a044:	81c0041e 	bne	r16,r7,a058 <_malloc_r+0x1dc>
    a048:	0000fb06 	br	a438 <_malloc_r+0x5bc>
    a04c:	1801030e 	bge	r3,zero,a45c <_malloc_r+0x5e0>
    a050:	84000317 	ldw	r16,12(r16)
    a054:	81c0f826 	beq	r16,r7,a438 <_malloc_r+0x5bc>
    a058:	80800117 	ldw	r2,4(r16)
    a05c:	1284703a 	and	r2,r2,r10
    a060:	1447c83a 	sub	r3,r2,r17
    a064:	48fff90e 	bge	r9,r3,a04c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a04c>
    a068:	80800317 	ldw	r2,12(r16)
    a06c:	81000217 	ldw	r4,8(r16)
    a070:	89400054 	ori	r5,r17,1
    a074:	81400115 	stw	r5,4(r16)
    a078:	20800315 	stw	r2,12(r4)
    a07c:	11000215 	stw	r4,8(r2)
    a080:	8463883a 	add	r17,r16,r17
    a084:	9c400515 	stw	r17,20(r19)
    a088:	9c400415 	stw	r17,16(r19)
    a08c:	18800054 	ori	r2,r3,1
    a090:	88800115 	stw	r2,4(r17)
    a094:	8a000315 	stw	r8,12(r17)
    a098:	8a000215 	stw	r8,8(r17)
    a09c:	88e3883a 	add	r17,r17,r3
    a0a0:	88c00015 	stw	r3,0(r17)
    a0a4:	9009883a 	mov	r4,r18
    a0a8:	00100140 	call	10014 <__malloc_unlock>
    a0ac:	80800204 	addi	r2,r16,8
    a0b0:	00001b06 	br	a120 <_malloc_r+0x2a4>
    a0b4:	04400404 	movi	r17,16
    a0b8:	89402536 	bltu	r17,r5,a150 <_malloc_r+0x2d4>
    a0bc:	000fef40 	call	fef4 <__malloc_lock>
    a0c0:	00800184 	movi	r2,6
    a0c4:	01000084 	movi	r4,2
    a0c8:	04c000b4 	movhi	r19,2
    a0cc:	1085883a 	add	r2,r2,r2
    a0d0:	9cf0b304 	addi	r19,r19,-15668
    a0d4:	1085883a 	add	r2,r2,r2
    a0d8:	9885883a 	add	r2,r19,r2
    a0dc:	14000117 	ldw	r16,4(r2)
    a0e0:	10fffe04 	addi	r3,r2,-8
    a0e4:	80c0d926 	beq	r16,r3,a44c <_malloc_r+0x5d0>
    a0e8:	80c00117 	ldw	r3,4(r16)
    a0ec:	81000317 	ldw	r4,12(r16)
    a0f0:	00bfff04 	movi	r2,-4
    a0f4:	1884703a 	and	r2,r3,r2
    a0f8:	81400217 	ldw	r5,8(r16)
    a0fc:	8085883a 	add	r2,r16,r2
    a100:	10c00117 	ldw	r3,4(r2)
    a104:	29000315 	stw	r4,12(r5)
    a108:	21400215 	stw	r5,8(r4)
    a10c:	18c00054 	ori	r3,r3,1
    a110:	10c00115 	stw	r3,4(r2)
    a114:	9009883a 	mov	r4,r18
    a118:	00100140 	call	10014 <__malloc_unlock>
    a11c:	80800204 	addi	r2,r16,8
    a120:	dfc00a17 	ldw	ra,40(sp)
    a124:	df000917 	ldw	fp,36(sp)
    a128:	ddc00817 	ldw	r23,32(sp)
    a12c:	dd800717 	ldw	r22,28(sp)
    a130:	dd400617 	ldw	r21,24(sp)
    a134:	dd000517 	ldw	r20,20(sp)
    a138:	dcc00417 	ldw	r19,16(sp)
    a13c:	dc800317 	ldw	r18,12(sp)
    a140:	dc400217 	ldw	r17,8(sp)
    a144:	dc000117 	ldw	r16,4(sp)
    a148:	dec00b04 	addi	sp,sp,44
    a14c:	f800283a 	ret
    a150:	00800304 	movi	r2,12
    a154:	90800015 	stw	r2,0(r18)
    a158:	0005883a 	mov	r2,zero
    a15c:	003ff006 	br	a120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a120>
    a160:	01002004 	movi	r4,128
    a164:	02001004 	movi	r8,64
    a168:	01c00fc4 	movi	r7,63
    a16c:	003f6106 	br	9ef4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ef4>
    a170:	4009883a 	mov	r4,r8
    a174:	003f7506 	br	9f4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f4c>
    a178:	81000317 	ldw	r4,12(r16)
    a17c:	003fde06 	br	a0f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a0f8>
    a180:	81c5883a 	add	r2,r16,r7
    a184:	11400117 	ldw	r5,4(r2)
    a188:	9009883a 	mov	r4,r18
    a18c:	29400054 	ori	r5,r5,1
    a190:	11400115 	stw	r5,4(r2)
    a194:	00100140 	call	10014 <__malloc_unlock>
    a198:	80800204 	addi	r2,r16,8
    a19c:	003fe006 	br	a120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a120>
    a1a0:	9c000217 	ldw	r16,8(r19)
    a1a4:	00bfff04 	movi	r2,-4
    a1a8:	85800117 	ldw	r22,4(r16)
    a1ac:	b0ac703a 	and	r22,r22,r2
    a1b0:	b4400336 	bltu	r22,r17,a1c0 <_malloc_r+0x344>
    a1b4:	b445c83a 	sub	r2,r22,r17
    a1b8:	00c003c4 	movi	r3,15
    a1bc:	18805d16 	blt	r3,r2,a334 <_malloc_r+0x4b8>
    a1c0:	05c000b4 	movhi	r23,2
    a1c4:	008000b4 	movhi	r2,2
    a1c8:	10bf4504 	addi	r2,r2,-748
    a1cc:	bdf73a04 	addi	r23,r23,-8984
    a1d0:	15400017 	ldw	r21,0(r2)
    a1d4:	b8c00017 	ldw	r3,0(r23)
    a1d8:	00bfffc4 	movi	r2,-1
    a1dc:	858d883a 	add	r6,r16,r22
    a1e0:	8d6b883a 	add	r21,r17,r21
    a1e4:	1880ea26 	beq	r3,r2,a590 <_malloc_r+0x714>
    a1e8:	ad4403c4 	addi	r21,r21,4111
    a1ec:	00bc0004 	movi	r2,-4096
    a1f0:	a8aa703a 	and	r21,r21,r2
    a1f4:	a80b883a 	mov	r5,r21
    a1f8:	9009883a 	mov	r4,r18
    a1fc:	d9800015 	stw	r6,0(sp)
    a200:	000ba4c0 	call	ba4c <_sbrk_r>
    a204:	1029883a 	mov	r20,r2
    a208:	00bfffc4 	movi	r2,-1
    a20c:	d9800017 	ldw	r6,0(sp)
    a210:	a080e826 	beq	r20,r2,a5b4 <_malloc_r+0x738>
    a214:	a180a636 	bltu	r20,r6,a4b0 <_malloc_r+0x634>
    a218:	070000b4 	movhi	fp,2
    a21c:	e73f6704 	addi	fp,fp,-612
    a220:	e0800017 	ldw	r2,0(fp)
    a224:	a887883a 	add	r3,r21,r2
    a228:	e0c00015 	stw	r3,0(fp)
    a22c:	3500e626 	beq	r6,r20,a5c8 <_malloc_r+0x74c>
    a230:	b9000017 	ldw	r4,0(r23)
    a234:	00bfffc4 	movi	r2,-1
    a238:	2080ee26 	beq	r4,r2,a5f4 <_malloc_r+0x778>
    a23c:	a185c83a 	sub	r2,r20,r6
    a240:	10c5883a 	add	r2,r2,r3
    a244:	e0800015 	stw	r2,0(fp)
    a248:	a0c001cc 	andi	r3,r20,7
    a24c:	1800bc26 	beq	r3,zero,a540 <_malloc_r+0x6c4>
    a250:	a0e9c83a 	sub	r20,r20,r3
    a254:	00840204 	movi	r2,4104
    a258:	a5000204 	addi	r20,r20,8
    a25c:	10c7c83a 	sub	r3,r2,r3
    a260:	a545883a 	add	r2,r20,r21
    a264:	1083ffcc 	andi	r2,r2,4095
    a268:	18abc83a 	sub	r21,r3,r2
    a26c:	a80b883a 	mov	r5,r21
    a270:	9009883a 	mov	r4,r18
    a274:	000ba4c0 	call	ba4c <_sbrk_r>
    a278:	00ffffc4 	movi	r3,-1
    a27c:	10c0e126 	beq	r2,r3,a604 <_malloc_r+0x788>
    a280:	1505c83a 	sub	r2,r2,r20
    a284:	1545883a 	add	r2,r2,r21
    a288:	10800054 	ori	r2,r2,1
    a28c:	e0c00017 	ldw	r3,0(fp)
    a290:	9d000215 	stw	r20,8(r19)
    a294:	a0800115 	stw	r2,4(r20)
    a298:	a8c7883a 	add	r3,r21,r3
    a29c:	e0c00015 	stw	r3,0(fp)
    a2a0:	84c00e26 	beq	r16,r19,a2dc <_malloc_r+0x460>
    a2a4:	018003c4 	movi	r6,15
    a2a8:	3580a72e 	bgeu	r6,r22,a548 <_malloc_r+0x6cc>
    a2ac:	81400117 	ldw	r5,4(r16)
    a2b0:	013ffe04 	movi	r4,-8
    a2b4:	b0bffd04 	addi	r2,r22,-12
    a2b8:	1104703a 	and	r2,r2,r4
    a2bc:	2900004c 	andi	r4,r5,1
    a2c0:	2088b03a 	or	r4,r4,r2
    a2c4:	81000115 	stw	r4,4(r16)
    a2c8:	01400144 	movi	r5,5
    a2cc:	8089883a 	add	r4,r16,r2
    a2d0:	21400115 	stw	r5,4(r4)
    a2d4:	21400215 	stw	r5,8(r4)
    a2d8:	3080cd36 	bltu	r6,r2,a610 <_malloc_r+0x794>
    a2dc:	008000b4 	movhi	r2,2
    a2e0:	10bf4404 	addi	r2,r2,-752
    a2e4:	11000017 	ldw	r4,0(r2)
    a2e8:	20c0012e 	bgeu	r4,r3,a2f0 <_malloc_r+0x474>
    a2ec:	10c00015 	stw	r3,0(r2)
    a2f0:	008000b4 	movhi	r2,2
    a2f4:	10bf4304 	addi	r2,r2,-756
    a2f8:	11000017 	ldw	r4,0(r2)
    a2fc:	9c000217 	ldw	r16,8(r19)
    a300:	20c0012e 	bgeu	r4,r3,a308 <_malloc_r+0x48c>
    a304:	10c00015 	stw	r3,0(r2)
    a308:	80c00117 	ldw	r3,4(r16)
    a30c:	00bfff04 	movi	r2,-4
    a310:	1886703a 	and	r3,r3,r2
    a314:	1c45c83a 	sub	r2,r3,r17
    a318:	1c400236 	bltu	r3,r17,a324 <_malloc_r+0x4a8>
    a31c:	00c003c4 	movi	r3,15
    a320:	18800416 	blt	r3,r2,a334 <_malloc_r+0x4b8>
    a324:	9009883a 	mov	r4,r18
    a328:	00100140 	call	10014 <__malloc_unlock>
    a32c:	0005883a 	mov	r2,zero
    a330:	003f7b06 	br	a120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a120>
    a334:	88c00054 	ori	r3,r17,1
    a338:	80c00115 	stw	r3,4(r16)
    a33c:	8463883a 	add	r17,r16,r17
    a340:	10800054 	ori	r2,r2,1
    a344:	9c400215 	stw	r17,8(r19)
    a348:	88800115 	stw	r2,4(r17)
    a34c:	9009883a 	mov	r4,r18
    a350:	00100140 	call	10014 <__malloc_unlock>
    a354:	80800204 	addi	r2,r16,8
    a358:	003f7106 	br	a120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a120>
    a35c:	00c00504 	movi	r3,20
    a360:	18804a2e 	bgeu	r3,r2,a48c <_malloc_r+0x610>
    a364:	00c01504 	movi	r3,84
    a368:	18806e36 	bltu	r3,r2,a524 <_malloc_r+0x6a8>
    a36c:	8804d33a 	srli	r2,r17,12
    a370:	12001bc4 	addi	r8,r2,111
    a374:	11c01b84 	addi	r7,r2,110
    a378:	4209883a 	add	r4,r8,r8
    a37c:	003edd06 	br	9ef4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ef4>
    a380:	3804d27a 	srli	r2,r7,9
    a384:	00c00104 	movi	r3,4
    a388:	1880442e 	bgeu	r3,r2,a49c <_malloc_r+0x620>
    a38c:	00c00504 	movi	r3,20
    a390:	18808136 	bltu	r3,r2,a598 <_malloc_r+0x71c>
    a394:	11401704 	addi	r5,r2,92
    a398:	10c016c4 	addi	r3,r2,91
    a39c:	294b883a 	add	r5,r5,r5
    a3a0:	294b883a 	add	r5,r5,r5
    a3a4:	294b883a 	add	r5,r5,r5
    a3a8:	994b883a 	add	r5,r19,r5
    a3ac:	28800017 	ldw	r2,0(r5)
    a3b0:	018000b4 	movhi	r6,2
    a3b4:	297ffe04 	addi	r5,r5,-8
    a3b8:	31b0b304 	addi	r6,r6,-15668
    a3bc:	28806526 	beq	r5,r2,a554 <_malloc_r+0x6d8>
    a3c0:	01bfff04 	movi	r6,-4
    a3c4:	10c00117 	ldw	r3,4(r2)
    a3c8:	1986703a 	and	r3,r3,r6
    a3cc:	38c0022e 	bgeu	r7,r3,a3d8 <_malloc_r+0x55c>
    a3d0:	10800217 	ldw	r2,8(r2)
    a3d4:	28bffb1e 	bne	r5,r2,a3c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3c4>
    a3d8:	11400317 	ldw	r5,12(r2)
    a3dc:	98c00117 	ldw	r3,4(r19)
    a3e0:	81400315 	stw	r5,12(r16)
    a3e4:	80800215 	stw	r2,8(r16)
    a3e8:	2c000215 	stw	r16,8(r5)
    a3ec:	14000315 	stw	r16,12(r2)
    a3f0:	003ef806 	br	9fd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fd4>
    a3f4:	88c00054 	ori	r3,r17,1
    a3f8:	80c00115 	stw	r3,4(r16)
    a3fc:	8463883a 	add	r17,r16,r17
    a400:	34400515 	stw	r17,20(r6)
    a404:	34400415 	stw	r17,16(r6)
    a408:	10c00054 	ori	r3,r2,1
    a40c:	8a000315 	stw	r8,12(r17)
    a410:	8a000215 	stw	r8,8(r17)
    a414:	88c00115 	stw	r3,4(r17)
    a418:	88a3883a 	add	r17,r17,r2
    a41c:	88800015 	stw	r2,0(r17)
    a420:	9009883a 	mov	r4,r18
    a424:	00100140 	call	10014 <__malloc_unlock>
    a428:	80800204 	addi	r2,r16,8
    a42c:	003f3c06 	br	a120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a120>
    a430:	30c00117 	ldw	r3,4(r6)
    a434:	003ee706 	br	9fd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fd4>
    a438:	5ac00044 	addi	r11,r11,1
    a43c:	588000cc 	andi	r2,r11,3
    a440:	31800204 	addi	r6,r6,8
    a444:	103efd1e 	bne	r2,zero,a03c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a03c>
    a448:	00002406 	br	a4dc <_malloc_r+0x660>
    a44c:	14000317 	ldw	r16,12(r2)
    a450:	143f251e 	bne	r2,r16,a0e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a0e8>
    a454:	21000084 	addi	r4,r4,2
    a458:	003ebc06 	br	9f4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f4c>
    a45c:	8085883a 	add	r2,r16,r2
    a460:	10c00117 	ldw	r3,4(r2)
    a464:	81000317 	ldw	r4,12(r16)
    a468:	81400217 	ldw	r5,8(r16)
    a46c:	18c00054 	ori	r3,r3,1
    a470:	10c00115 	stw	r3,4(r2)
    a474:	29000315 	stw	r4,12(r5)
    a478:	21400215 	stw	r5,8(r4)
    a47c:	9009883a 	mov	r4,r18
    a480:	00100140 	call	10014 <__malloc_unlock>
    a484:	80800204 	addi	r2,r16,8
    a488:	003f2506 	br	a120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a120>
    a48c:	12001704 	addi	r8,r2,92
    a490:	11c016c4 	addi	r7,r2,91
    a494:	4209883a 	add	r4,r8,r8
    a498:	003e9606 	br	9ef4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ef4>
    a49c:	3804d1ba 	srli	r2,r7,6
    a4a0:	11400e44 	addi	r5,r2,57
    a4a4:	10c00e04 	addi	r3,r2,56
    a4a8:	294b883a 	add	r5,r5,r5
    a4ac:	003fbc06 	br	a3a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3a0>
    a4b0:	84ff5926 	beq	r16,r19,a218 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a218>
    a4b4:	008000b4 	movhi	r2,2
    a4b8:	10b0b304 	addi	r2,r2,-15668
    a4bc:	14000217 	ldw	r16,8(r2)
    a4c0:	00bfff04 	movi	r2,-4
    a4c4:	80c00117 	ldw	r3,4(r16)
    a4c8:	1886703a 	and	r3,r3,r2
    a4cc:	003f9106 	br	a314 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a314>
    a4d0:	60800217 	ldw	r2,8(r12)
    a4d4:	213fffc4 	addi	r4,r4,-1
    a4d8:	1300651e 	bne	r2,r12,a670 <_malloc_r+0x7f4>
    a4dc:	208000cc 	andi	r2,r4,3
    a4e0:	633ffe04 	addi	r12,r12,-8
    a4e4:	103ffa1e 	bne	r2,zero,a4d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4d0>
    a4e8:	98800117 	ldw	r2,4(r19)
    a4ec:	0146303a 	nor	r3,zero,r5
    a4f0:	1884703a 	and	r2,r3,r2
    a4f4:	98800115 	stw	r2,4(r19)
    a4f8:	294b883a 	add	r5,r5,r5
    a4fc:	117f2836 	bltu	r2,r5,a1a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a1a0>
    a500:	283f2726 	beq	r5,zero,a1a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a1a0>
    a504:	2886703a 	and	r3,r5,r2
    a508:	5809883a 	mov	r4,r11
    a50c:	183ec31e 	bne	r3,zero,a01c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a01c>
    a510:	294b883a 	add	r5,r5,r5
    a514:	2886703a 	and	r3,r5,r2
    a518:	21000104 	addi	r4,r4,4
    a51c:	183ffc26 	beq	r3,zero,a510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a510>
    a520:	003ebe06 	br	a01c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a01c>
    a524:	00c05504 	movi	r3,340
    a528:	18801236 	bltu	r3,r2,a574 <_malloc_r+0x6f8>
    a52c:	8804d3fa 	srli	r2,r17,15
    a530:	12001e04 	addi	r8,r2,120
    a534:	11c01dc4 	addi	r7,r2,119
    a538:	4209883a 	add	r4,r8,r8
    a53c:	003e6d06 	br	9ef4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ef4>
    a540:	00c40004 	movi	r3,4096
    a544:	003f4606 	br	a260 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a260>
    a548:	00800044 	movi	r2,1
    a54c:	a0800115 	stw	r2,4(r20)
    a550:	003f7406 	br	a324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a324>
    a554:	1805d0ba 	srai	r2,r3,2
    a558:	01c00044 	movi	r7,1
    a55c:	30c00117 	ldw	r3,4(r6)
    a560:	388e983a 	sll	r7,r7,r2
    a564:	2805883a 	mov	r2,r5
    a568:	38c6b03a 	or	r3,r7,r3
    a56c:	30c00115 	stw	r3,4(r6)
    a570:	003f9b06 	br	a3e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3e0>
    a574:	00c15504 	movi	r3,1364
    a578:	18801a36 	bltu	r3,r2,a5e4 <_malloc_r+0x768>
    a57c:	8804d4ba 	srli	r2,r17,18
    a580:	12001f44 	addi	r8,r2,125
    a584:	11c01f04 	addi	r7,r2,124
    a588:	4209883a 	add	r4,r8,r8
    a58c:	003e5906 	br	9ef4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ef4>
    a590:	ad400404 	addi	r21,r21,16
    a594:	003f1706 	br	a1f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a1f4>
    a598:	00c01504 	movi	r3,84
    a59c:	18802336 	bltu	r3,r2,a62c <_malloc_r+0x7b0>
    a5a0:	3804d33a 	srli	r2,r7,12
    a5a4:	11401bc4 	addi	r5,r2,111
    a5a8:	10c01b84 	addi	r3,r2,110
    a5ac:	294b883a 	add	r5,r5,r5
    a5b0:	003f7b06 	br	a3a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3a0>
    a5b4:	9c000217 	ldw	r16,8(r19)
    a5b8:	00bfff04 	movi	r2,-4
    a5bc:	80c00117 	ldw	r3,4(r16)
    a5c0:	1886703a 	and	r3,r3,r2
    a5c4:	003f5306 	br	a314 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a314>
    a5c8:	3083ffcc 	andi	r2,r6,4095
    a5cc:	103f181e 	bne	r2,zero,a230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a230>
    a5d0:	99000217 	ldw	r4,8(r19)
    a5d4:	b545883a 	add	r2,r22,r21
    a5d8:	10800054 	ori	r2,r2,1
    a5dc:	20800115 	stw	r2,4(r4)
    a5e0:	003f3e06 	br	a2dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a2dc>
    a5e4:	01003f84 	movi	r4,254
    a5e8:	02001fc4 	movi	r8,127
    a5ec:	01c01f84 	movi	r7,126
    a5f0:	003e4006 	br	9ef4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ef4>
    a5f4:	008000b4 	movhi	r2,2
    a5f8:	10b73a04 	addi	r2,r2,-8984
    a5fc:	15000015 	stw	r20,0(r2)
    a600:	003f1106 	br	a248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a248>
    a604:	00800044 	movi	r2,1
    a608:	002b883a 	mov	r21,zero
    a60c:	003f1f06 	br	a28c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a28c>
    a610:	81400204 	addi	r5,r16,8
    a614:	9009883a 	mov	r4,r18
    a618:	000974c0 	call	974c <_free_r>
    a61c:	008000b4 	movhi	r2,2
    a620:	10bf6704 	addi	r2,r2,-612
    a624:	10c00017 	ldw	r3,0(r2)
    a628:	003f2c06 	br	a2dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a2dc>
    a62c:	00c05504 	movi	r3,340
    a630:	18800536 	bltu	r3,r2,a648 <_malloc_r+0x7cc>
    a634:	3804d3fa 	srli	r2,r7,15
    a638:	11401e04 	addi	r5,r2,120
    a63c:	10c01dc4 	addi	r3,r2,119
    a640:	294b883a 	add	r5,r5,r5
    a644:	003f5606 	br	a3a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3a0>
    a648:	00c15504 	movi	r3,1364
    a64c:	18800536 	bltu	r3,r2,a664 <_malloc_r+0x7e8>
    a650:	3804d4ba 	srli	r2,r7,18
    a654:	11401f44 	addi	r5,r2,125
    a658:	10c01f04 	addi	r3,r2,124
    a65c:	294b883a 	add	r5,r5,r5
    a660:	003f4f06 	br	a3a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3a0>
    a664:	01403f84 	movi	r5,254
    a668:	00c01f84 	movi	r3,126
    a66c:	003f4c06 	br	a3a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3a0>
    a670:	98800117 	ldw	r2,4(r19)
    a674:	003fa006 	br	a4f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4f8>
    a678:	8808d0fa 	srli	r4,r17,3
    a67c:	20800044 	addi	r2,r4,1
    a680:	1085883a 	add	r2,r2,r2
    a684:	003e9006 	br	a0c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a0c8>

0000a688 <memchr>:
    a688:	208000cc 	andi	r2,r4,3
    a68c:	280f883a 	mov	r7,r5
    a690:	10003426 	beq	r2,zero,a764 <memchr+0xdc>
    a694:	30bfffc4 	addi	r2,r6,-1
    a698:	30001a26 	beq	r6,zero,a704 <memchr+0x7c>
    a69c:	20c00003 	ldbu	r3,0(r4)
    a6a0:	29803fcc 	andi	r6,r5,255
    a6a4:	30c0051e 	bne	r6,r3,a6bc <memchr+0x34>
    a6a8:	00001806 	br	a70c <memchr+0x84>
    a6ac:	10001526 	beq	r2,zero,a704 <memchr+0x7c>
    a6b0:	20c00003 	ldbu	r3,0(r4)
    a6b4:	10bfffc4 	addi	r2,r2,-1
    a6b8:	30c01426 	beq	r6,r3,a70c <memchr+0x84>
    a6bc:	21000044 	addi	r4,r4,1
    a6c0:	20c000cc 	andi	r3,r4,3
    a6c4:	183ff91e 	bne	r3,zero,a6ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6ac>
    a6c8:	020000c4 	movi	r8,3
    a6cc:	40801136 	bltu	r8,r2,a714 <memchr+0x8c>
    a6d0:	10000c26 	beq	r2,zero,a704 <memchr+0x7c>
    a6d4:	20c00003 	ldbu	r3,0(r4)
    a6d8:	29403fcc 	andi	r5,r5,255
    a6dc:	28c00b26 	beq	r5,r3,a70c <memchr+0x84>
    a6e0:	20c00044 	addi	r3,r4,1
    a6e4:	39803fcc 	andi	r6,r7,255
    a6e8:	2089883a 	add	r4,r4,r2
    a6ec:	00000306 	br	a6fc <memchr+0x74>
    a6f0:	18c00044 	addi	r3,r3,1
    a6f4:	197fffc3 	ldbu	r5,-1(r3)
    a6f8:	31400526 	beq	r6,r5,a710 <memchr+0x88>
    a6fc:	1805883a 	mov	r2,r3
    a700:	20fffb1e 	bne	r4,r3,a6f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6f0>
    a704:	0005883a 	mov	r2,zero
    a708:	f800283a 	ret
    a70c:	2005883a 	mov	r2,r4
    a710:	f800283a 	ret
    a714:	28c03fcc 	andi	r3,r5,255
    a718:	1812923a 	slli	r9,r3,8
    a71c:	02ffbff4 	movhi	r11,65279
    a720:	02a02074 	movhi	r10,32897
    a724:	48d2b03a 	or	r9,r9,r3
    a728:	4806943a 	slli	r3,r9,16
    a72c:	5affbfc4 	addi	r11,r11,-257
    a730:	52a02004 	addi	r10,r10,-32640
    a734:	48d2b03a 	or	r9,r9,r3
    a738:	20c00017 	ldw	r3,0(r4)
    a73c:	48c6f03a 	xor	r3,r9,r3
    a740:	1acd883a 	add	r6,r3,r11
    a744:	00c6303a 	nor	r3,zero,r3
    a748:	30c6703a 	and	r3,r6,r3
    a74c:	1a86703a 	and	r3,r3,r10
    a750:	183fe01e 	bne	r3,zero,a6d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6d4>
    a754:	10bfff04 	addi	r2,r2,-4
    a758:	21000104 	addi	r4,r4,4
    a75c:	40bff636 	bltu	r8,r2,a738 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a738>
    a760:	003fdb06 	br	a6d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6d0>
    a764:	3005883a 	mov	r2,r6
    a768:	003fd706 	br	a6c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6c8>

0000a76c <memcpy>:
    a76c:	defffd04 	addi	sp,sp,-12
    a770:	dfc00215 	stw	ra,8(sp)
    a774:	dc400115 	stw	r17,4(sp)
    a778:	dc000015 	stw	r16,0(sp)
    a77c:	00c003c4 	movi	r3,15
    a780:	2005883a 	mov	r2,r4
    a784:	1980452e 	bgeu	r3,r6,a89c <memcpy+0x130>
    a788:	2906b03a 	or	r3,r5,r4
    a78c:	18c000cc 	andi	r3,r3,3
    a790:	1800441e 	bne	r3,zero,a8a4 <memcpy+0x138>
    a794:	347ffc04 	addi	r17,r6,-16
    a798:	8822d13a 	srli	r17,r17,4
    a79c:	28c00104 	addi	r3,r5,4
    a7a0:	23400104 	addi	r13,r4,4
    a7a4:	8820913a 	slli	r16,r17,4
    a7a8:	2b000204 	addi	r12,r5,8
    a7ac:	22c00204 	addi	r11,r4,8
    a7b0:	84000504 	addi	r16,r16,20
    a7b4:	2a800304 	addi	r10,r5,12
    a7b8:	22400304 	addi	r9,r4,12
    a7bc:	2c21883a 	add	r16,r5,r16
    a7c0:	2811883a 	mov	r8,r5
    a7c4:	200f883a 	mov	r7,r4
    a7c8:	41000017 	ldw	r4,0(r8)
    a7cc:	1fc00017 	ldw	ra,0(r3)
    a7d0:	63c00017 	ldw	r15,0(r12)
    a7d4:	39000015 	stw	r4,0(r7)
    a7d8:	53800017 	ldw	r14,0(r10)
    a7dc:	6fc00015 	stw	ra,0(r13)
    a7e0:	5bc00015 	stw	r15,0(r11)
    a7e4:	4b800015 	stw	r14,0(r9)
    a7e8:	18c00404 	addi	r3,r3,16
    a7ec:	39c00404 	addi	r7,r7,16
    a7f0:	42000404 	addi	r8,r8,16
    a7f4:	6b400404 	addi	r13,r13,16
    a7f8:	63000404 	addi	r12,r12,16
    a7fc:	5ac00404 	addi	r11,r11,16
    a800:	52800404 	addi	r10,r10,16
    a804:	4a400404 	addi	r9,r9,16
    a808:	1c3fef1e 	bne	r3,r16,a7c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7c8>
    a80c:	89c00044 	addi	r7,r17,1
    a810:	380e913a 	slli	r7,r7,4
    a814:	310003cc 	andi	r4,r6,15
    a818:	02c000c4 	movi	r11,3
    a81c:	11c7883a 	add	r3,r2,r7
    a820:	29cb883a 	add	r5,r5,r7
    a824:	5900212e 	bgeu	r11,r4,a8ac <memcpy+0x140>
    a828:	1813883a 	mov	r9,r3
    a82c:	2811883a 	mov	r8,r5
    a830:	200f883a 	mov	r7,r4
    a834:	42800017 	ldw	r10,0(r8)
    a838:	4a400104 	addi	r9,r9,4
    a83c:	39ffff04 	addi	r7,r7,-4
    a840:	4abfff15 	stw	r10,-4(r9)
    a844:	42000104 	addi	r8,r8,4
    a848:	59fffa36 	bltu	r11,r7,a834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a834>
    a84c:	213fff04 	addi	r4,r4,-4
    a850:	2008d0ba 	srli	r4,r4,2
    a854:	318000cc 	andi	r6,r6,3
    a858:	21000044 	addi	r4,r4,1
    a85c:	2109883a 	add	r4,r4,r4
    a860:	2109883a 	add	r4,r4,r4
    a864:	1907883a 	add	r3,r3,r4
    a868:	290b883a 	add	r5,r5,r4
    a86c:	30000626 	beq	r6,zero,a888 <memcpy+0x11c>
    a870:	198d883a 	add	r6,r3,r6
    a874:	29c00003 	ldbu	r7,0(r5)
    a878:	18c00044 	addi	r3,r3,1
    a87c:	29400044 	addi	r5,r5,1
    a880:	19ffffc5 	stb	r7,-1(r3)
    a884:	19bffb1e 	bne	r3,r6,a874 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a874>
    a888:	dfc00217 	ldw	ra,8(sp)
    a88c:	dc400117 	ldw	r17,4(sp)
    a890:	dc000017 	ldw	r16,0(sp)
    a894:	dec00304 	addi	sp,sp,12
    a898:	f800283a 	ret
    a89c:	2007883a 	mov	r3,r4
    a8a0:	003ff206 	br	a86c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a86c>
    a8a4:	2007883a 	mov	r3,r4
    a8a8:	003ff106 	br	a870 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a870>
    a8ac:	200d883a 	mov	r6,r4
    a8b0:	003fee06 	br	a86c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a86c>

0000a8b4 <memset>:
    a8b4:	20c000cc 	andi	r3,r4,3
    a8b8:	2005883a 	mov	r2,r4
    a8bc:	18004426 	beq	r3,zero,a9d0 <memset+0x11c>
    a8c0:	31ffffc4 	addi	r7,r6,-1
    a8c4:	30004026 	beq	r6,zero,a9c8 <memset+0x114>
    a8c8:	2813883a 	mov	r9,r5
    a8cc:	200d883a 	mov	r6,r4
    a8d0:	2007883a 	mov	r3,r4
    a8d4:	00000406 	br	a8e8 <memset+0x34>
    a8d8:	3a3fffc4 	addi	r8,r7,-1
    a8dc:	31800044 	addi	r6,r6,1
    a8e0:	38003926 	beq	r7,zero,a9c8 <memset+0x114>
    a8e4:	400f883a 	mov	r7,r8
    a8e8:	18c00044 	addi	r3,r3,1
    a8ec:	32400005 	stb	r9,0(r6)
    a8f0:	1a0000cc 	andi	r8,r3,3
    a8f4:	403ff81e 	bne	r8,zero,a8d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8d8>
    a8f8:	010000c4 	movi	r4,3
    a8fc:	21c02d2e 	bgeu	r4,r7,a9b4 <memset+0x100>
    a900:	29003fcc 	andi	r4,r5,255
    a904:	200c923a 	slli	r6,r4,8
    a908:	3108b03a 	or	r4,r6,r4
    a90c:	200c943a 	slli	r6,r4,16
    a910:	218cb03a 	or	r6,r4,r6
    a914:	010003c4 	movi	r4,15
    a918:	21c0182e 	bgeu	r4,r7,a97c <memset+0xc8>
    a91c:	3b3ffc04 	addi	r12,r7,-16
    a920:	6018d13a 	srli	r12,r12,4
    a924:	1a000104 	addi	r8,r3,4
    a928:	1ac00204 	addi	r11,r3,8
    a92c:	6008913a 	slli	r4,r12,4
    a930:	1a800304 	addi	r10,r3,12
    a934:	1813883a 	mov	r9,r3
    a938:	21000504 	addi	r4,r4,20
    a93c:	1909883a 	add	r4,r3,r4
    a940:	49800015 	stw	r6,0(r9)
    a944:	41800015 	stw	r6,0(r8)
    a948:	59800015 	stw	r6,0(r11)
    a94c:	51800015 	stw	r6,0(r10)
    a950:	42000404 	addi	r8,r8,16
    a954:	4a400404 	addi	r9,r9,16
    a958:	5ac00404 	addi	r11,r11,16
    a95c:	52800404 	addi	r10,r10,16
    a960:	413ff71e 	bne	r8,r4,a940 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a940>
    a964:	63000044 	addi	r12,r12,1
    a968:	6018913a 	slli	r12,r12,4
    a96c:	39c003cc 	andi	r7,r7,15
    a970:	010000c4 	movi	r4,3
    a974:	1b07883a 	add	r3,r3,r12
    a978:	21c00e2e 	bgeu	r4,r7,a9b4 <memset+0x100>
    a97c:	1813883a 	mov	r9,r3
    a980:	3811883a 	mov	r8,r7
    a984:	010000c4 	movi	r4,3
    a988:	49800015 	stw	r6,0(r9)
    a98c:	423fff04 	addi	r8,r8,-4
    a990:	4a400104 	addi	r9,r9,4
    a994:	223ffc36 	bltu	r4,r8,a988 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a988>
    a998:	393fff04 	addi	r4,r7,-4
    a99c:	2008d0ba 	srli	r4,r4,2
    a9a0:	39c000cc 	andi	r7,r7,3
    a9a4:	21000044 	addi	r4,r4,1
    a9a8:	2109883a 	add	r4,r4,r4
    a9ac:	2109883a 	add	r4,r4,r4
    a9b0:	1907883a 	add	r3,r3,r4
    a9b4:	38000526 	beq	r7,zero,a9cc <memset+0x118>
    a9b8:	19cf883a 	add	r7,r3,r7
    a9bc:	19400005 	stb	r5,0(r3)
    a9c0:	18c00044 	addi	r3,r3,1
    a9c4:	38fffd1e 	bne	r7,r3,a9bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a9bc>
    a9c8:	f800283a 	ret
    a9cc:	f800283a 	ret
    a9d0:	2007883a 	mov	r3,r4
    a9d4:	300f883a 	mov	r7,r6
    a9d8:	003fc706 	br	a8f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8f8>

0000a9dc <_Balloc>:
    a9dc:	20801317 	ldw	r2,76(r4)
    a9e0:	defffc04 	addi	sp,sp,-16
    a9e4:	dc400115 	stw	r17,4(sp)
    a9e8:	dc000015 	stw	r16,0(sp)
    a9ec:	dfc00315 	stw	ra,12(sp)
    a9f0:	dc800215 	stw	r18,8(sp)
    a9f4:	2023883a 	mov	r17,r4
    a9f8:	2821883a 	mov	r16,r5
    a9fc:	10000f26 	beq	r2,zero,aa3c <_Balloc+0x60>
    aa00:	8407883a 	add	r3,r16,r16
    aa04:	18c7883a 	add	r3,r3,r3
    aa08:	10c7883a 	add	r3,r2,r3
    aa0c:	18800017 	ldw	r2,0(r3)
    aa10:	10001126 	beq	r2,zero,aa58 <_Balloc+0x7c>
    aa14:	11000017 	ldw	r4,0(r2)
    aa18:	19000015 	stw	r4,0(r3)
    aa1c:	10000415 	stw	zero,16(r2)
    aa20:	10000315 	stw	zero,12(r2)
    aa24:	dfc00317 	ldw	ra,12(sp)
    aa28:	dc800217 	ldw	r18,8(sp)
    aa2c:	dc400117 	ldw	r17,4(sp)
    aa30:	dc000017 	ldw	r16,0(sp)
    aa34:	dec00404 	addi	sp,sp,16
    aa38:	f800283a 	ret
    aa3c:	01800844 	movi	r6,33
    aa40:	01400104 	movi	r5,4
    aa44:	000d44c0 	call	d44c <_calloc_r>
    aa48:	88801315 	stw	r2,76(r17)
    aa4c:	103fec1e 	bne	r2,zero,aa00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa00>
    aa50:	0005883a 	mov	r2,zero
    aa54:	003ff306 	br	aa24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa24>
    aa58:	01400044 	movi	r5,1
    aa5c:	2c24983a 	sll	r18,r5,r16
    aa60:	8809883a 	mov	r4,r17
    aa64:	91800144 	addi	r6,r18,5
    aa68:	318d883a 	add	r6,r6,r6
    aa6c:	318d883a 	add	r6,r6,r6
    aa70:	000d44c0 	call	d44c <_calloc_r>
    aa74:	103ff626 	beq	r2,zero,aa50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa50>
    aa78:	14000115 	stw	r16,4(r2)
    aa7c:	14800215 	stw	r18,8(r2)
    aa80:	003fe606 	br	aa1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa1c>

0000aa84 <_Bfree>:
    aa84:	28000826 	beq	r5,zero,aaa8 <_Bfree+0x24>
    aa88:	28c00117 	ldw	r3,4(r5)
    aa8c:	20801317 	ldw	r2,76(r4)
    aa90:	18c7883a 	add	r3,r3,r3
    aa94:	18c7883a 	add	r3,r3,r3
    aa98:	10c5883a 	add	r2,r2,r3
    aa9c:	10c00017 	ldw	r3,0(r2)
    aaa0:	28c00015 	stw	r3,0(r5)
    aaa4:	11400015 	stw	r5,0(r2)
    aaa8:	f800283a 	ret

0000aaac <__multadd>:
    aaac:	defffa04 	addi	sp,sp,-24
    aab0:	dc800315 	stw	r18,12(sp)
    aab4:	dc400215 	stw	r17,8(sp)
    aab8:	dc000115 	stw	r16,4(sp)
    aabc:	2823883a 	mov	r17,r5
    aac0:	2c000417 	ldw	r16,16(r5)
    aac4:	dfc00515 	stw	ra,20(sp)
    aac8:	dcc00415 	stw	r19,16(sp)
    aacc:	2025883a 	mov	r18,r4
    aad0:	29400504 	addi	r5,r5,20
    aad4:	0011883a 	mov	r8,zero
    aad8:	28c00017 	ldw	r3,0(r5)
    aadc:	29400104 	addi	r5,r5,4
    aae0:	42000044 	addi	r8,r8,1
    aae4:	18bfffcc 	andi	r2,r3,65535
    aae8:	1185383a 	mul	r2,r2,r6
    aaec:	1806d43a 	srli	r3,r3,16
    aaf0:	11cf883a 	add	r7,r2,r7
    aaf4:	3808d43a 	srli	r4,r7,16
    aaf8:	1987383a 	mul	r3,r3,r6
    aafc:	38bfffcc 	andi	r2,r7,65535
    ab00:	1907883a 	add	r3,r3,r4
    ab04:	1808943a 	slli	r4,r3,16
    ab08:	180ed43a 	srli	r7,r3,16
    ab0c:	2085883a 	add	r2,r4,r2
    ab10:	28bfff15 	stw	r2,-4(r5)
    ab14:	443ff016 	blt	r8,r16,aad8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aad8>
    ab18:	38000926 	beq	r7,zero,ab40 <__multadd+0x94>
    ab1c:	88800217 	ldw	r2,8(r17)
    ab20:	80800f0e 	bge	r16,r2,ab60 <__multadd+0xb4>
    ab24:	80800144 	addi	r2,r16,5
    ab28:	1085883a 	add	r2,r2,r2
    ab2c:	1085883a 	add	r2,r2,r2
    ab30:	8885883a 	add	r2,r17,r2
    ab34:	11c00015 	stw	r7,0(r2)
    ab38:	84000044 	addi	r16,r16,1
    ab3c:	8c000415 	stw	r16,16(r17)
    ab40:	8805883a 	mov	r2,r17
    ab44:	dfc00517 	ldw	ra,20(sp)
    ab48:	dcc00417 	ldw	r19,16(sp)
    ab4c:	dc800317 	ldw	r18,12(sp)
    ab50:	dc400217 	ldw	r17,8(sp)
    ab54:	dc000117 	ldw	r16,4(sp)
    ab58:	dec00604 	addi	sp,sp,24
    ab5c:	f800283a 	ret
    ab60:	89400117 	ldw	r5,4(r17)
    ab64:	9009883a 	mov	r4,r18
    ab68:	d9c00015 	stw	r7,0(sp)
    ab6c:	29400044 	addi	r5,r5,1
    ab70:	000a9dc0 	call	a9dc <_Balloc>
    ab74:	89800417 	ldw	r6,16(r17)
    ab78:	89400304 	addi	r5,r17,12
    ab7c:	11000304 	addi	r4,r2,12
    ab80:	31800084 	addi	r6,r6,2
    ab84:	318d883a 	add	r6,r6,r6
    ab88:	318d883a 	add	r6,r6,r6
    ab8c:	1027883a 	mov	r19,r2
    ab90:	000a76c0 	call	a76c <memcpy>
    ab94:	d9c00017 	ldw	r7,0(sp)
    ab98:	88000a26 	beq	r17,zero,abc4 <__multadd+0x118>
    ab9c:	88c00117 	ldw	r3,4(r17)
    aba0:	90801317 	ldw	r2,76(r18)
    aba4:	18c7883a 	add	r3,r3,r3
    aba8:	18c7883a 	add	r3,r3,r3
    abac:	10c5883a 	add	r2,r2,r3
    abb0:	10c00017 	ldw	r3,0(r2)
    abb4:	88c00015 	stw	r3,0(r17)
    abb8:	14400015 	stw	r17,0(r2)
    abbc:	9823883a 	mov	r17,r19
    abc0:	003fd806 	br	ab24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab24>
    abc4:	9823883a 	mov	r17,r19
    abc8:	003fd606 	br	ab24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab24>

0000abcc <__s2b>:
    abcc:	defff904 	addi	sp,sp,-28
    abd0:	dc400115 	stw	r17,4(sp)
    abd4:	dc000015 	stw	r16,0(sp)
    abd8:	2023883a 	mov	r17,r4
    abdc:	2821883a 	mov	r16,r5
    abe0:	39000204 	addi	r4,r7,8
    abe4:	01400244 	movi	r5,9
    abe8:	dcc00315 	stw	r19,12(sp)
    abec:	dc800215 	stw	r18,8(sp)
    abf0:	dfc00615 	stw	ra,24(sp)
    abf4:	dd400515 	stw	r21,20(sp)
    abf8:	dd000415 	stw	r20,16(sp)
    abfc:	3825883a 	mov	r18,r7
    ac00:	3027883a 	mov	r19,r6
    ac04:	0002a300 	call	2a30 <__divsi3>
    ac08:	00c00044 	movi	r3,1
    ac0c:	000b883a 	mov	r5,zero
    ac10:	1880030e 	bge	r3,r2,ac20 <__s2b+0x54>
    ac14:	18c7883a 	add	r3,r3,r3
    ac18:	29400044 	addi	r5,r5,1
    ac1c:	18bffd16 	blt	r3,r2,ac14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ac14>
    ac20:	8809883a 	mov	r4,r17
    ac24:	000a9dc0 	call	a9dc <_Balloc>
    ac28:	d8c00717 	ldw	r3,28(sp)
    ac2c:	10c00515 	stw	r3,20(r2)
    ac30:	00c00044 	movi	r3,1
    ac34:	10c00415 	stw	r3,16(r2)
    ac38:	00c00244 	movi	r3,9
    ac3c:	1cc0210e 	bge	r3,r19,acc4 <__s2b+0xf8>
    ac40:	80eb883a 	add	r21,r16,r3
    ac44:	a829883a 	mov	r20,r21
    ac48:	84e1883a 	add	r16,r16,r19
    ac4c:	a1c00007 	ldb	r7,0(r20)
    ac50:	01800284 	movi	r6,10
    ac54:	a5000044 	addi	r20,r20,1
    ac58:	100b883a 	mov	r5,r2
    ac5c:	39fff404 	addi	r7,r7,-48
    ac60:	8809883a 	mov	r4,r17
    ac64:	000aaac0 	call	aaac <__multadd>
    ac68:	a43ff81e 	bne	r20,r16,ac4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ac4c>
    ac6c:	ace1883a 	add	r16,r21,r19
    ac70:	843ffe04 	addi	r16,r16,-8
    ac74:	9c800a0e 	bge	r19,r18,aca0 <__s2b+0xd4>
    ac78:	94e5c83a 	sub	r18,r18,r19
    ac7c:	84a5883a 	add	r18,r16,r18
    ac80:	81c00007 	ldb	r7,0(r16)
    ac84:	01800284 	movi	r6,10
    ac88:	84000044 	addi	r16,r16,1
    ac8c:	100b883a 	mov	r5,r2
    ac90:	39fff404 	addi	r7,r7,-48
    ac94:	8809883a 	mov	r4,r17
    ac98:	000aaac0 	call	aaac <__multadd>
    ac9c:	84bff81e 	bne	r16,r18,ac80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ac80>
    aca0:	dfc00617 	ldw	ra,24(sp)
    aca4:	dd400517 	ldw	r21,20(sp)
    aca8:	dd000417 	ldw	r20,16(sp)
    acac:	dcc00317 	ldw	r19,12(sp)
    acb0:	dc800217 	ldw	r18,8(sp)
    acb4:	dc400117 	ldw	r17,4(sp)
    acb8:	dc000017 	ldw	r16,0(sp)
    acbc:	dec00704 	addi	sp,sp,28
    acc0:	f800283a 	ret
    acc4:	84000284 	addi	r16,r16,10
    acc8:	1827883a 	mov	r19,r3
    accc:	003fe906 	br	ac74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ac74>

0000acd0 <__hi0bits>:
    acd0:	20bfffec 	andhi	r2,r4,65535
    acd4:	1000141e 	bne	r2,zero,ad28 <__hi0bits+0x58>
    acd8:	2008943a 	slli	r4,r4,16
    acdc:	00800404 	movi	r2,16
    ace0:	20ffc02c 	andhi	r3,r4,65280
    ace4:	1800021e 	bne	r3,zero,acf0 <__hi0bits+0x20>
    ace8:	2008923a 	slli	r4,r4,8
    acec:	10800204 	addi	r2,r2,8
    acf0:	20fc002c 	andhi	r3,r4,61440
    acf4:	1800021e 	bne	r3,zero,ad00 <__hi0bits+0x30>
    acf8:	2008913a 	slli	r4,r4,4
    acfc:	10800104 	addi	r2,r2,4
    ad00:	20f0002c 	andhi	r3,r4,49152
    ad04:	1800031e 	bne	r3,zero,ad14 <__hi0bits+0x44>
    ad08:	2109883a 	add	r4,r4,r4
    ad0c:	10800084 	addi	r2,r2,2
    ad10:	2109883a 	add	r4,r4,r4
    ad14:	20000316 	blt	r4,zero,ad24 <__hi0bits+0x54>
    ad18:	2110002c 	andhi	r4,r4,16384
    ad1c:	2000041e 	bne	r4,zero,ad30 <__hi0bits+0x60>
    ad20:	00800804 	movi	r2,32
    ad24:	f800283a 	ret
    ad28:	0005883a 	mov	r2,zero
    ad2c:	003fec06 	br	ace0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ace0>
    ad30:	10800044 	addi	r2,r2,1
    ad34:	f800283a 	ret

0000ad38 <__lo0bits>:
    ad38:	20c00017 	ldw	r3,0(r4)
    ad3c:	188001cc 	andi	r2,r3,7
    ad40:	10000826 	beq	r2,zero,ad64 <__lo0bits+0x2c>
    ad44:	1880004c 	andi	r2,r3,1
    ad48:	1000211e 	bne	r2,zero,add0 <__lo0bits+0x98>
    ad4c:	1880008c 	andi	r2,r3,2
    ad50:	1000211e 	bne	r2,zero,add8 <__lo0bits+0xa0>
    ad54:	1806d0ba 	srli	r3,r3,2
    ad58:	00800084 	movi	r2,2
    ad5c:	20c00015 	stw	r3,0(r4)
    ad60:	f800283a 	ret
    ad64:	18bfffcc 	andi	r2,r3,65535
    ad68:	10001326 	beq	r2,zero,adb8 <__lo0bits+0x80>
    ad6c:	0005883a 	mov	r2,zero
    ad70:	19403fcc 	andi	r5,r3,255
    ad74:	2800021e 	bne	r5,zero,ad80 <__lo0bits+0x48>
    ad78:	1806d23a 	srli	r3,r3,8
    ad7c:	10800204 	addi	r2,r2,8
    ad80:	194003cc 	andi	r5,r3,15
    ad84:	2800021e 	bne	r5,zero,ad90 <__lo0bits+0x58>
    ad88:	1806d13a 	srli	r3,r3,4
    ad8c:	10800104 	addi	r2,r2,4
    ad90:	194000cc 	andi	r5,r3,3
    ad94:	2800021e 	bne	r5,zero,ada0 <__lo0bits+0x68>
    ad98:	1806d0ba 	srli	r3,r3,2
    ad9c:	10800084 	addi	r2,r2,2
    ada0:	1940004c 	andi	r5,r3,1
    ada4:	2800081e 	bne	r5,zero,adc8 <__lo0bits+0x90>
    ada8:	1806d07a 	srli	r3,r3,1
    adac:	1800051e 	bne	r3,zero,adc4 <__lo0bits+0x8c>
    adb0:	00800804 	movi	r2,32
    adb4:	f800283a 	ret
    adb8:	1806d43a 	srli	r3,r3,16
    adbc:	00800404 	movi	r2,16
    adc0:	003feb06 	br	ad70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad70>
    adc4:	10800044 	addi	r2,r2,1
    adc8:	20c00015 	stw	r3,0(r4)
    adcc:	f800283a 	ret
    add0:	0005883a 	mov	r2,zero
    add4:	f800283a 	ret
    add8:	1806d07a 	srli	r3,r3,1
    addc:	00800044 	movi	r2,1
    ade0:	20c00015 	stw	r3,0(r4)
    ade4:	f800283a 	ret

0000ade8 <__i2b>:
    ade8:	defffd04 	addi	sp,sp,-12
    adec:	dc000015 	stw	r16,0(sp)
    adf0:	04000044 	movi	r16,1
    adf4:	dc400115 	stw	r17,4(sp)
    adf8:	2823883a 	mov	r17,r5
    adfc:	800b883a 	mov	r5,r16
    ae00:	dfc00215 	stw	ra,8(sp)
    ae04:	000a9dc0 	call	a9dc <_Balloc>
    ae08:	14400515 	stw	r17,20(r2)
    ae0c:	14000415 	stw	r16,16(r2)
    ae10:	dfc00217 	ldw	ra,8(sp)
    ae14:	dc400117 	ldw	r17,4(sp)
    ae18:	dc000017 	ldw	r16,0(sp)
    ae1c:	dec00304 	addi	sp,sp,12
    ae20:	f800283a 	ret

0000ae24 <__multiply>:
    ae24:	defffa04 	addi	sp,sp,-24
    ae28:	dcc00315 	stw	r19,12(sp)
    ae2c:	dc800215 	stw	r18,8(sp)
    ae30:	34c00417 	ldw	r19,16(r6)
    ae34:	2c800417 	ldw	r18,16(r5)
    ae38:	dd000415 	stw	r20,16(sp)
    ae3c:	dc400115 	stw	r17,4(sp)
    ae40:	dfc00515 	stw	ra,20(sp)
    ae44:	dc000015 	stw	r16,0(sp)
    ae48:	2829883a 	mov	r20,r5
    ae4c:	3023883a 	mov	r17,r6
    ae50:	94c0050e 	bge	r18,r19,ae68 <__multiply+0x44>
    ae54:	9007883a 	mov	r3,r18
    ae58:	3029883a 	mov	r20,r6
    ae5c:	9825883a 	mov	r18,r19
    ae60:	2823883a 	mov	r17,r5
    ae64:	1827883a 	mov	r19,r3
    ae68:	a0800217 	ldw	r2,8(r20)
    ae6c:	94e1883a 	add	r16,r18,r19
    ae70:	a1400117 	ldw	r5,4(r20)
    ae74:	1400010e 	bge	r2,r16,ae7c <__multiply+0x58>
    ae78:	29400044 	addi	r5,r5,1
    ae7c:	000a9dc0 	call	a9dc <_Balloc>
    ae80:	8415883a 	add	r10,r16,r16
    ae84:	12c00504 	addi	r11,r2,20
    ae88:	5295883a 	add	r10,r10,r10
    ae8c:	5a95883a 	add	r10,r11,r10
    ae90:	5807883a 	mov	r3,r11
    ae94:	5a80032e 	bgeu	r11,r10,aea4 <__multiply+0x80>
    ae98:	18000015 	stw	zero,0(r3)
    ae9c:	18c00104 	addi	r3,r3,4
    aea0:	1abffd36 	bltu	r3,r10,ae98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae98>
    aea4:	9ce7883a 	add	r19,r19,r19
    aea8:	94a5883a 	add	r18,r18,r18
    aeac:	89800504 	addi	r6,r17,20
    aeb0:	9ce7883a 	add	r19,r19,r19
    aeb4:	a3400504 	addi	r13,r20,20
    aeb8:	94a5883a 	add	r18,r18,r18
    aebc:	34d9883a 	add	r12,r6,r19
    aec0:	6c93883a 	add	r9,r13,r18
    aec4:	3300422e 	bgeu	r6,r12,afd0 <__multiply+0x1ac>
    aec8:	37c00017 	ldw	ra,0(r6)
    aecc:	fbffffcc 	andi	r15,ra,65535
    aed0:	78001b26 	beq	r15,zero,af40 <__multiply+0x11c>
    aed4:	5811883a 	mov	r8,r11
    aed8:	681d883a 	mov	r14,r13
    aedc:	000f883a 	mov	r7,zero
    aee0:	71000017 	ldw	r4,0(r14)
    aee4:	40c00017 	ldw	r3,0(r8)
    aee8:	73800104 	addi	r14,r14,4
    aeec:	217fffcc 	andi	r5,r4,65535
    aef0:	2bcb383a 	mul	r5,r5,r15
    aef4:	2008d43a 	srli	r4,r4,16
    aef8:	1c7fffcc 	andi	r17,r3,65535
    aefc:	2c4b883a 	add	r5,r5,r17
    af00:	29cb883a 	add	r5,r5,r7
    af04:	23c9383a 	mul	r4,r4,r15
    af08:	1806d43a 	srli	r3,r3,16
    af0c:	280ed43a 	srli	r7,r5,16
    af10:	297fffcc 	andi	r5,r5,65535
    af14:	20c7883a 	add	r3,r4,r3
    af18:	19c7883a 	add	r3,r3,r7
    af1c:	1808943a 	slli	r4,r3,16
    af20:	4023883a 	mov	r17,r8
    af24:	180ed43a 	srli	r7,r3,16
    af28:	214ab03a 	or	r5,r4,r5
    af2c:	41400015 	stw	r5,0(r8)
    af30:	42000104 	addi	r8,r8,4
    af34:	727fea36 	bltu	r14,r9,aee0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aee0>
    af38:	89c00115 	stw	r7,4(r17)
    af3c:	37c00017 	ldw	ra,0(r6)
    af40:	f83ed43a 	srli	ra,ra,16
    af44:	f8001f26 	beq	ra,zero,afc4 <__multiply+0x1a0>
    af48:	58c00017 	ldw	r3,0(r11)
    af4c:	681d883a 	mov	r14,r13
    af50:	581f883a 	mov	r15,r11
    af54:	1811883a 	mov	r8,r3
    af58:	5825883a 	mov	r18,r11
    af5c:	000f883a 	mov	r7,zero
    af60:	00000106 	br	af68 <__multiply+0x144>
    af64:	8825883a 	mov	r18,r17
    af68:	7140000b 	ldhu	r5,0(r14)
    af6c:	4010d43a 	srli	r8,r8,16
    af70:	193fffcc 	andi	r4,r3,65535
    af74:	2fcb383a 	mul	r5,r5,ra
    af78:	7bc00104 	addi	r15,r15,4
    af7c:	73800104 	addi	r14,r14,4
    af80:	2a0b883a 	add	r5,r5,r8
    af84:	29cb883a 	add	r5,r5,r7
    af88:	2806943a 	slli	r3,r5,16
    af8c:	94400104 	addi	r17,r18,4
    af90:	280ad43a 	srli	r5,r5,16
    af94:	1908b03a 	or	r4,r3,r4
    af98:	793fff15 	stw	r4,-4(r15)
    af9c:	70ffff17 	ldw	r3,-4(r14)
    afa0:	8a000017 	ldw	r8,0(r17)
    afa4:	1806d43a 	srli	r3,r3,16
    afa8:	413fffcc 	andi	r4,r8,65535
    afac:	1fc7383a 	mul	r3,r3,ra
    afb0:	1907883a 	add	r3,r3,r4
    afb4:	1947883a 	add	r3,r3,r5
    afb8:	180ed43a 	srli	r7,r3,16
    afbc:	727fe936 	bltu	r14,r9,af64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af64>
    afc0:	90c00115 	stw	r3,4(r18)
    afc4:	31800104 	addi	r6,r6,4
    afc8:	5ac00104 	addi	r11,r11,4
    afcc:	333fbe36 	bltu	r6,r12,aec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aec8>
    afd0:	0400090e 	bge	zero,r16,aff8 <__multiply+0x1d4>
    afd4:	50ffff17 	ldw	r3,-4(r10)
    afd8:	52bfff04 	addi	r10,r10,-4
    afdc:	18000326 	beq	r3,zero,afec <__multiply+0x1c8>
    afe0:	00000506 	br	aff8 <__multiply+0x1d4>
    afe4:	50c00017 	ldw	r3,0(r10)
    afe8:	1800031e 	bne	r3,zero,aff8 <__multiply+0x1d4>
    afec:	843fffc4 	addi	r16,r16,-1
    aff0:	52bfff04 	addi	r10,r10,-4
    aff4:	803ffb1e 	bne	r16,zero,afe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700afe4>
    aff8:	14000415 	stw	r16,16(r2)
    affc:	dfc00517 	ldw	ra,20(sp)
    b000:	dd000417 	ldw	r20,16(sp)
    b004:	dcc00317 	ldw	r19,12(sp)
    b008:	dc800217 	ldw	r18,8(sp)
    b00c:	dc400117 	ldw	r17,4(sp)
    b010:	dc000017 	ldw	r16,0(sp)
    b014:	dec00604 	addi	sp,sp,24
    b018:	f800283a 	ret

0000b01c <__pow5mult>:
    b01c:	defffa04 	addi	sp,sp,-24
    b020:	dcc00315 	stw	r19,12(sp)
    b024:	dc000015 	stw	r16,0(sp)
    b028:	dfc00515 	stw	ra,20(sp)
    b02c:	dd000415 	stw	r20,16(sp)
    b030:	dc800215 	stw	r18,8(sp)
    b034:	dc400115 	stw	r17,4(sp)
    b038:	308000cc 	andi	r2,r6,3
    b03c:	3021883a 	mov	r16,r6
    b040:	2027883a 	mov	r19,r4
    b044:	10002f1e 	bne	r2,zero,b104 <__pow5mult+0xe8>
    b048:	2825883a 	mov	r18,r5
    b04c:	8021d0ba 	srai	r16,r16,2
    b050:	80001a26 	beq	r16,zero,b0bc <__pow5mult+0xa0>
    b054:	9c401217 	ldw	r17,72(r19)
    b058:	8800061e 	bne	r17,zero,b074 <__pow5mult+0x58>
    b05c:	00003406 	br	b130 <__pow5mult+0x114>
    b060:	8021d07a 	srai	r16,r16,1
    b064:	80001526 	beq	r16,zero,b0bc <__pow5mult+0xa0>
    b068:	88800017 	ldw	r2,0(r17)
    b06c:	10001c26 	beq	r2,zero,b0e0 <__pow5mult+0xc4>
    b070:	1023883a 	mov	r17,r2
    b074:	8080004c 	andi	r2,r16,1
    b078:	103ff926 	beq	r2,zero,b060 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b060>
    b07c:	880d883a 	mov	r6,r17
    b080:	900b883a 	mov	r5,r18
    b084:	9809883a 	mov	r4,r19
    b088:	000ae240 	call	ae24 <__multiply>
    b08c:	90001b26 	beq	r18,zero,b0fc <__pow5mult+0xe0>
    b090:	91000117 	ldw	r4,4(r18)
    b094:	98c01317 	ldw	r3,76(r19)
    b098:	8021d07a 	srai	r16,r16,1
    b09c:	2109883a 	add	r4,r4,r4
    b0a0:	2109883a 	add	r4,r4,r4
    b0a4:	1907883a 	add	r3,r3,r4
    b0a8:	19000017 	ldw	r4,0(r3)
    b0ac:	91000015 	stw	r4,0(r18)
    b0b0:	1c800015 	stw	r18,0(r3)
    b0b4:	1025883a 	mov	r18,r2
    b0b8:	803feb1e 	bne	r16,zero,b068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b068>
    b0bc:	9005883a 	mov	r2,r18
    b0c0:	dfc00517 	ldw	ra,20(sp)
    b0c4:	dd000417 	ldw	r20,16(sp)
    b0c8:	dcc00317 	ldw	r19,12(sp)
    b0cc:	dc800217 	ldw	r18,8(sp)
    b0d0:	dc400117 	ldw	r17,4(sp)
    b0d4:	dc000017 	ldw	r16,0(sp)
    b0d8:	dec00604 	addi	sp,sp,24
    b0dc:	f800283a 	ret
    b0e0:	880d883a 	mov	r6,r17
    b0e4:	880b883a 	mov	r5,r17
    b0e8:	9809883a 	mov	r4,r19
    b0ec:	000ae240 	call	ae24 <__multiply>
    b0f0:	88800015 	stw	r2,0(r17)
    b0f4:	10000015 	stw	zero,0(r2)
    b0f8:	003fdd06 	br	b070 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b070>
    b0fc:	1025883a 	mov	r18,r2
    b100:	003fd706 	br	b060 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b060>
    b104:	10bfffc4 	addi	r2,r2,-1
    b108:	1085883a 	add	r2,r2,r2
    b10c:	00c000b4 	movhi	r3,2
    b110:	18ee7f04 	addi	r3,r3,-17924
    b114:	1085883a 	add	r2,r2,r2
    b118:	1885883a 	add	r2,r3,r2
    b11c:	11800017 	ldw	r6,0(r2)
    b120:	000f883a 	mov	r7,zero
    b124:	000aaac0 	call	aaac <__multadd>
    b128:	1025883a 	mov	r18,r2
    b12c:	003fc706 	br	b04c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b04c>
    b130:	05000044 	movi	r20,1
    b134:	a00b883a 	mov	r5,r20
    b138:	9809883a 	mov	r4,r19
    b13c:	000a9dc0 	call	a9dc <_Balloc>
    b140:	1023883a 	mov	r17,r2
    b144:	00809c44 	movi	r2,625
    b148:	88800515 	stw	r2,20(r17)
    b14c:	8d000415 	stw	r20,16(r17)
    b150:	9c401215 	stw	r17,72(r19)
    b154:	88000015 	stw	zero,0(r17)
    b158:	003fc606 	br	b074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b074>

0000b15c <__lshift>:
    b15c:	defff904 	addi	sp,sp,-28
    b160:	dd400515 	stw	r21,20(sp)
    b164:	dcc00315 	stw	r19,12(sp)
    b168:	302bd17a 	srai	r21,r6,5
    b16c:	2cc00417 	ldw	r19,16(r5)
    b170:	28800217 	ldw	r2,8(r5)
    b174:	dd000415 	stw	r20,16(sp)
    b178:	ace7883a 	add	r19,r21,r19
    b17c:	dc800215 	stw	r18,8(sp)
    b180:	dc400115 	stw	r17,4(sp)
    b184:	dc000015 	stw	r16,0(sp)
    b188:	dfc00615 	stw	ra,24(sp)
    b18c:	9c000044 	addi	r16,r19,1
    b190:	2823883a 	mov	r17,r5
    b194:	3029883a 	mov	r20,r6
    b198:	2025883a 	mov	r18,r4
    b19c:	29400117 	ldw	r5,4(r5)
    b1a0:	1400030e 	bge	r2,r16,b1b0 <__lshift+0x54>
    b1a4:	1085883a 	add	r2,r2,r2
    b1a8:	29400044 	addi	r5,r5,1
    b1ac:	143ffd16 	blt	r2,r16,b1a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b1a4>
    b1b0:	9009883a 	mov	r4,r18
    b1b4:	000a9dc0 	call	a9dc <_Balloc>
    b1b8:	10c00504 	addi	r3,r2,20
    b1bc:	0540070e 	bge	zero,r21,b1dc <__lshift+0x80>
    b1c0:	ad6b883a 	add	r21,r21,r21
    b1c4:	ad6b883a 	add	r21,r21,r21
    b1c8:	1809883a 	mov	r4,r3
    b1cc:	1d47883a 	add	r3,r3,r21
    b1d0:	20000015 	stw	zero,0(r4)
    b1d4:	21000104 	addi	r4,r4,4
    b1d8:	193ffd1e 	bne	r3,r4,b1d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b1d0>
    b1dc:	8a000417 	ldw	r8,16(r17)
    b1e0:	89000504 	addi	r4,r17,20
    b1e4:	a18007cc 	andi	r6,r20,31
    b1e8:	4211883a 	add	r8,r8,r8
    b1ec:	4211883a 	add	r8,r8,r8
    b1f0:	2211883a 	add	r8,r4,r8
    b1f4:	30002326 	beq	r6,zero,b284 <__lshift+0x128>
    b1f8:	02400804 	movi	r9,32
    b1fc:	4993c83a 	sub	r9,r9,r6
    b200:	000b883a 	mov	r5,zero
    b204:	21c00017 	ldw	r7,0(r4)
    b208:	1815883a 	mov	r10,r3
    b20c:	18c00104 	addi	r3,r3,4
    b210:	398e983a 	sll	r7,r7,r6
    b214:	21000104 	addi	r4,r4,4
    b218:	394ab03a 	or	r5,r7,r5
    b21c:	197fff15 	stw	r5,-4(r3)
    b220:	217fff17 	ldw	r5,-4(r4)
    b224:	2a4ad83a 	srl	r5,r5,r9
    b228:	223ff636 	bltu	r4,r8,b204 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b204>
    b22c:	51400115 	stw	r5,4(r10)
    b230:	28001a1e 	bne	r5,zero,b29c <__lshift+0x140>
    b234:	843fffc4 	addi	r16,r16,-1
    b238:	14000415 	stw	r16,16(r2)
    b23c:	88000826 	beq	r17,zero,b260 <__lshift+0x104>
    b240:	89000117 	ldw	r4,4(r17)
    b244:	90c01317 	ldw	r3,76(r18)
    b248:	2109883a 	add	r4,r4,r4
    b24c:	2109883a 	add	r4,r4,r4
    b250:	1907883a 	add	r3,r3,r4
    b254:	19000017 	ldw	r4,0(r3)
    b258:	89000015 	stw	r4,0(r17)
    b25c:	1c400015 	stw	r17,0(r3)
    b260:	dfc00617 	ldw	ra,24(sp)
    b264:	dd400517 	ldw	r21,20(sp)
    b268:	dd000417 	ldw	r20,16(sp)
    b26c:	dcc00317 	ldw	r19,12(sp)
    b270:	dc800217 	ldw	r18,8(sp)
    b274:	dc400117 	ldw	r17,4(sp)
    b278:	dc000017 	ldw	r16,0(sp)
    b27c:	dec00704 	addi	sp,sp,28
    b280:	f800283a 	ret
    b284:	21400017 	ldw	r5,0(r4)
    b288:	18c00104 	addi	r3,r3,4
    b28c:	21000104 	addi	r4,r4,4
    b290:	197fff15 	stw	r5,-4(r3)
    b294:	223ffb36 	bltu	r4,r8,b284 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b284>
    b298:	003fe606 	br	b234 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b234>
    b29c:	9c000084 	addi	r16,r19,2
    b2a0:	003fe406 	br	b234 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b234>

0000b2a4 <__mcmp>:
    b2a4:	20800417 	ldw	r2,16(r4)
    b2a8:	28c00417 	ldw	r3,16(r5)
    b2ac:	10c5c83a 	sub	r2,r2,r3
    b2b0:	1000111e 	bne	r2,zero,b2f8 <__mcmp+0x54>
    b2b4:	18c7883a 	add	r3,r3,r3
    b2b8:	18c7883a 	add	r3,r3,r3
    b2bc:	21000504 	addi	r4,r4,20
    b2c0:	29400504 	addi	r5,r5,20
    b2c4:	20c5883a 	add	r2,r4,r3
    b2c8:	28cb883a 	add	r5,r5,r3
    b2cc:	00000106 	br	b2d4 <__mcmp+0x30>
    b2d0:	20800a2e 	bgeu	r4,r2,b2fc <__mcmp+0x58>
    b2d4:	10bfff04 	addi	r2,r2,-4
    b2d8:	297fff04 	addi	r5,r5,-4
    b2dc:	11800017 	ldw	r6,0(r2)
    b2e0:	28c00017 	ldw	r3,0(r5)
    b2e4:	30fffa26 	beq	r6,r3,b2d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2d0>
    b2e8:	30c00236 	bltu	r6,r3,b2f4 <__mcmp+0x50>
    b2ec:	00800044 	movi	r2,1
    b2f0:	f800283a 	ret
    b2f4:	00bfffc4 	movi	r2,-1
    b2f8:	f800283a 	ret
    b2fc:	0005883a 	mov	r2,zero
    b300:	f800283a 	ret

0000b304 <__mdiff>:
    b304:	28c00417 	ldw	r3,16(r5)
    b308:	30800417 	ldw	r2,16(r6)
    b30c:	defffa04 	addi	sp,sp,-24
    b310:	dcc00315 	stw	r19,12(sp)
    b314:	dc800215 	stw	r18,8(sp)
    b318:	dfc00515 	stw	ra,20(sp)
    b31c:	dd000415 	stw	r20,16(sp)
    b320:	dc400115 	stw	r17,4(sp)
    b324:	dc000015 	stw	r16,0(sp)
    b328:	1887c83a 	sub	r3,r3,r2
    b32c:	2825883a 	mov	r18,r5
    b330:	3027883a 	mov	r19,r6
    b334:	1800141e 	bne	r3,zero,b388 <__mdiff+0x84>
    b338:	1085883a 	add	r2,r2,r2
    b33c:	1085883a 	add	r2,r2,r2
    b340:	2a000504 	addi	r8,r5,20
    b344:	34000504 	addi	r16,r6,20
    b348:	4087883a 	add	r3,r8,r2
    b34c:	8085883a 	add	r2,r16,r2
    b350:	00000106 	br	b358 <__mdiff+0x54>
    b354:	40c0592e 	bgeu	r8,r3,b4bc <__mdiff+0x1b8>
    b358:	18ffff04 	addi	r3,r3,-4
    b35c:	10bfff04 	addi	r2,r2,-4
    b360:	19c00017 	ldw	r7,0(r3)
    b364:	11400017 	ldw	r5,0(r2)
    b368:	397ffa26 	beq	r7,r5,b354 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b354>
    b36c:	3940592e 	bgeu	r7,r5,b4d4 <__mdiff+0x1d0>
    b370:	9005883a 	mov	r2,r18
    b374:	4023883a 	mov	r17,r8
    b378:	9825883a 	mov	r18,r19
    b37c:	05000044 	movi	r20,1
    b380:	1027883a 	mov	r19,r2
    b384:	00000406 	br	b398 <__mdiff+0x94>
    b388:	18005616 	blt	r3,zero,b4e4 <__mdiff+0x1e0>
    b38c:	34400504 	addi	r17,r6,20
    b390:	2c000504 	addi	r16,r5,20
    b394:	0029883a 	mov	r20,zero
    b398:	91400117 	ldw	r5,4(r18)
    b39c:	000a9dc0 	call	a9dc <_Balloc>
    b3a0:	92400417 	ldw	r9,16(r18)
    b3a4:	9b000417 	ldw	r12,16(r19)
    b3a8:	12c00504 	addi	r11,r2,20
    b3ac:	4a51883a 	add	r8,r9,r9
    b3b0:	6319883a 	add	r12,r12,r12
    b3b4:	4211883a 	add	r8,r8,r8
    b3b8:	6319883a 	add	r12,r12,r12
    b3bc:	15000315 	stw	r20,12(r2)
    b3c0:	8211883a 	add	r8,r16,r8
    b3c4:	8b19883a 	add	r12,r17,r12
    b3c8:	0007883a 	mov	r3,zero
    b3cc:	81400017 	ldw	r5,0(r16)
    b3d0:	89c00017 	ldw	r7,0(r17)
    b3d4:	59800104 	addi	r6,r11,4
    b3d8:	293fffcc 	andi	r4,r5,65535
    b3dc:	20c7883a 	add	r3,r4,r3
    b3e0:	393fffcc 	andi	r4,r7,65535
    b3e4:	1909c83a 	sub	r4,r3,r4
    b3e8:	280ad43a 	srli	r5,r5,16
    b3ec:	380ed43a 	srli	r7,r7,16
    b3f0:	2007d43a 	srai	r3,r4,16
    b3f4:	213fffcc 	andi	r4,r4,65535
    b3f8:	29cbc83a 	sub	r5,r5,r7
    b3fc:	28c7883a 	add	r3,r5,r3
    b400:	180a943a 	slli	r5,r3,16
    b404:	8c400104 	addi	r17,r17,4
    b408:	84000104 	addi	r16,r16,4
    b40c:	2908b03a 	or	r4,r5,r4
    b410:	59000015 	stw	r4,0(r11)
    b414:	1807d43a 	srai	r3,r3,16
    b418:	3015883a 	mov	r10,r6
    b41c:	3017883a 	mov	r11,r6
    b420:	8b3fea36 	bltu	r17,r12,b3cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b3cc>
    b424:	8200162e 	bgeu	r16,r8,b480 <__mdiff+0x17c>
    b428:	8017883a 	mov	r11,r16
    b42c:	59400017 	ldw	r5,0(r11)
    b430:	31800104 	addi	r6,r6,4
    b434:	5ac00104 	addi	r11,r11,4
    b438:	293fffcc 	andi	r4,r5,65535
    b43c:	20c7883a 	add	r3,r4,r3
    b440:	280ed43a 	srli	r7,r5,16
    b444:	180bd43a 	srai	r5,r3,16
    b448:	193fffcc 	andi	r4,r3,65535
    b44c:	3947883a 	add	r3,r7,r5
    b450:	180a943a 	slli	r5,r3,16
    b454:	1807d43a 	srai	r3,r3,16
    b458:	2908b03a 	or	r4,r5,r4
    b45c:	313fff15 	stw	r4,-4(r6)
    b460:	5a3ff236 	bltu	r11,r8,b42c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b42c>
    b464:	0406303a 	nor	r3,zero,r16
    b468:	1a07883a 	add	r3,r3,r8
    b46c:	1806d0ba 	srli	r3,r3,2
    b470:	18c00044 	addi	r3,r3,1
    b474:	18c7883a 	add	r3,r3,r3
    b478:	18c7883a 	add	r3,r3,r3
    b47c:	50d5883a 	add	r10,r10,r3
    b480:	50ffff04 	addi	r3,r10,-4
    b484:	2000041e 	bne	r4,zero,b498 <__mdiff+0x194>
    b488:	18ffff04 	addi	r3,r3,-4
    b48c:	19000017 	ldw	r4,0(r3)
    b490:	4a7fffc4 	addi	r9,r9,-1
    b494:	203ffc26 	beq	r4,zero,b488 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b488>
    b498:	12400415 	stw	r9,16(r2)
    b49c:	dfc00517 	ldw	ra,20(sp)
    b4a0:	dd000417 	ldw	r20,16(sp)
    b4a4:	dcc00317 	ldw	r19,12(sp)
    b4a8:	dc800217 	ldw	r18,8(sp)
    b4ac:	dc400117 	ldw	r17,4(sp)
    b4b0:	dc000017 	ldw	r16,0(sp)
    b4b4:	dec00604 	addi	sp,sp,24
    b4b8:	f800283a 	ret
    b4bc:	000b883a 	mov	r5,zero
    b4c0:	000a9dc0 	call	a9dc <_Balloc>
    b4c4:	00c00044 	movi	r3,1
    b4c8:	10c00415 	stw	r3,16(r2)
    b4cc:	10000515 	stw	zero,20(r2)
    b4d0:	003ff206 	br	b49c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b49c>
    b4d4:	8023883a 	mov	r17,r16
    b4d8:	0029883a 	mov	r20,zero
    b4dc:	4021883a 	mov	r16,r8
    b4e0:	003fad06 	br	b398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b398>
    b4e4:	9005883a 	mov	r2,r18
    b4e8:	94400504 	addi	r17,r18,20
    b4ec:	9c000504 	addi	r16,r19,20
    b4f0:	9825883a 	mov	r18,r19
    b4f4:	05000044 	movi	r20,1
    b4f8:	1027883a 	mov	r19,r2
    b4fc:	003fa606 	br	b398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b398>

0000b500 <__ulp>:
    b500:	295ffc2c 	andhi	r5,r5,32752
    b504:	00bf3034 	movhi	r2,64704
    b508:	2887883a 	add	r3,r5,r2
    b50c:	00c0020e 	bge	zero,r3,b518 <__ulp+0x18>
    b510:	0005883a 	mov	r2,zero
    b514:	f800283a 	ret
    b518:	00c7c83a 	sub	r3,zero,r3
    b51c:	1807d53a 	srai	r3,r3,20
    b520:	008004c4 	movi	r2,19
    b524:	10c00b0e 	bge	r2,r3,b554 <__ulp+0x54>
    b528:	18bffb04 	addi	r2,r3,-20
    b52c:	01000784 	movi	r4,30
    b530:	0007883a 	mov	r3,zero
    b534:	20800516 	blt	r4,r2,b54c <__ulp+0x4c>
    b538:	010007c4 	movi	r4,31
    b53c:	2089c83a 	sub	r4,r4,r2
    b540:	00800044 	movi	r2,1
    b544:	1104983a 	sll	r2,r2,r4
    b548:	f800283a 	ret
    b54c:	00800044 	movi	r2,1
    b550:	f800283a 	ret
    b554:	01400234 	movhi	r5,8
    b558:	28c7d83a 	sra	r3,r5,r3
    b55c:	0005883a 	mov	r2,zero
    b560:	f800283a 	ret

0000b564 <__b2d>:
    b564:	defffa04 	addi	sp,sp,-24
    b568:	dc000015 	stw	r16,0(sp)
    b56c:	24000417 	ldw	r16,16(r4)
    b570:	dc400115 	stw	r17,4(sp)
    b574:	24400504 	addi	r17,r4,20
    b578:	8421883a 	add	r16,r16,r16
    b57c:	8421883a 	add	r16,r16,r16
    b580:	8c21883a 	add	r16,r17,r16
    b584:	dc800215 	stw	r18,8(sp)
    b588:	84bfff17 	ldw	r18,-4(r16)
    b58c:	dd000415 	stw	r20,16(sp)
    b590:	dcc00315 	stw	r19,12(sp)
    b594:	9009883a 	mov	r4,r18
    b598:	2829883a 	mov	r20,r5
    b59c:	dfc00515 	stw	ra,20(sp)
    b5a0:	000acd00 	call	acd0 <__hi0bits>
    b5a4:	00c00804 	movi	r3,32
    b5a8:	1889c83a 	sub	r4,r3,r2
    b5ac:	a1000015 	stw	r4,0(r20)
    b5b0:	01000284 	movi	r4,10
    b5b4:	84ffff04 	addi	r19,r16,-4
    b5b8:	20801216 	blt	r4,r2,b604 <__b2d+0xa0>
    b5bc:	018002c4 	movi	r6,11
    b5c0:	308dc83a 	sub	r6,r6,r2
    b5c4:	9186d83a 	srl	r3,r18,r6
    b5c8:	18cffc34 	orhi	r3,r3,16368
    b5cc:	8cc0212e 	bgeu	r17,r19,b654 <__b2d+0xf0>
    b5d0:	813ffe17 	ldw	r4,-8(r16)
    b5d4:	218cd83a 	srl	r6,r4,r6
    b5d8:	10800544 	addi	r2,r2,21
    b5dc:	9084983a 	sll	r2,r18,r2
    b5e0:	1184b03a 	or	r2,r2,r6
    b5e4:	dfc00517 	ldw	ra,20(sp)
    b5e8:	dd000417 	ldw	r20,16(sp)
    b5ec:	dcc00317 	ldw	r19,12(sp)
    b5f0:	dc800217 	ldw	r18,8(sp)
    b5f4:	dc400117 	ldw	r17,4(sp)
    b5f8:	dc000017 	ldw	r16,0(sp)
    b5fc:	dec00604 	addi	sp,sp,24
    b600:	f800283a 	ret
    b604:	8cc00f2e 	bgeu	r17,r19,b644 <__b2d+0xe0>
    b608:	117ffd44 	addi	r5,r2,-11
    b60c:	80bffe17 	ldw	r2,-8(r16)
    b610:	28000e26 	beq	r5,zero,b64c <__b2d+0xe8>
    b614:	1949c83a 	sub	r4,r3,r5
    b618:	9164983a 	sll	r18,r18,r5
    b61c:	1106d83a 	srl	r3,r2,r4
    b620:	81bffe04 	addi	r6,r16,-8
    b624:	948ffc34 	orhi	r18,r18,16368
    b628:	90c6b03a 	or	r3,r18,r3
    b62c:	89800e2e 	bgeu	r17,r6,b668 <__b2d+0x104>
    b630:	81bffd17 	ldw	r6,-12(r16)
    b634:	1144983a 	sll	r2,r2,r5
    b638:	310ad83a 	srl	r5,r6,r4
    b63c:	2884b03a 	or	r2,r5,r2
    b640:	003fe806 	br	b5e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5e4>
    b644:	10bffd44 	addi	r2,r2,-11
    b648:	1000041e 	bne	r2,zero,b65c <__b2d+0xf8>
    b64c:	90cffc34 	orhi	r3,r18,16368
    b650:	003fe406 	br	b5e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5e4>
    b654:	000d883a 	mov	r6,zero
    b658:	003fdf06 	br	b5d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5d8>
    b65c:	90a4983a 	sll	r18,r18,r2
    b660:	0005883a 	mov	r2,zero
    b664:	003ff906 	br	b64c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b64c>
    b668:	1144983a 	sll	r2,r2,r5
    b66c:	003fdd06 	br	b5e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5e4>

0000b670 <__d2b>:
    b670:	defff804 	addi	sp,sp,-32
    b674:	dc000215 	stw	r16,8(sp)
    b678:	3021883a 	mov	r16,r6
    b67c:	dc400315 	stw	r17,12(sp)
    b680:	8022907a 	slli	r17,r16,1
    b684:	dd000615 	stw	r20,24(sp)
    b688:	2829883a 	mov	r20,r5
    b68c:	01400044 	movi	r5,1
    b690:	dcc00515 	stw	r19,20(sp)
    b694:	dc800415 	stw	r18,16(sp)
    b698:	dfc00715 	stw	ra,28(sp)
    b69c:	3825883a 	mov	r18,r7
    b6a0:	8822d57a 	srli	r17,r17,21
    b6a4:	000a9dc0 	call	a9dc <_Balloc>
    b6a8:	1027883a 	mov	r19,r2
    b6ac:	00800434 	movhi	r2,16
    b6b0:	10bfffc4 	addi	r2,r2,-1
    b6b4:	808c703a 	and	r6,r16,r2
    b6b8:	88000126 	beq	r17,zero,b6c0 <__d2b+0x50>
    b6bc:	31800434 	orhi	r6,r6,16
    b6c0:	d9800015 	stw	r6,0(sp)
    b6c4:	a0002426 	beq	r20,zero,b758 <__d2b+0xe8>
    b6c8:	d9000104 	addi	r4,sp,4
    b6cc:	dd000115 	stw	r20,4(sp)
    b6d0:	000ad380 	call	ad38 <__lo0bits>
    b6d4:	d8c00017 	ldw	r3,0(sp)
    b6d8:	10002f1e 	bne	r2,zero,b798 <__d2b+0x128>
    b6dc:	d9000117 	ldw	r4,4(sp)
    b6e0:	99000515 	stw	r4,20(r19)
    b6e4:	1821003a 	cmpeq	r16,r3,zero
    b6e8:	01000084 	movi	r4,2
    b6ec:	2421c83a 	sub	r16,r4,r16
    b6f0:	98c00615 	stw	r3,24(r19)
    b6f4:	9c000415 	stw	r16,16(r19)
    b6f8:	88001f1e 	bne	r17,zero,b778 <__d2b+0x108>
    b6fc:	10bef384 	addi	r2,r2,-1074
    b700:	90800015 	stw	r2,0(r18)
    b704:	00900034 	movhi	r2,16384
    b708:	10bfffc4 	addi	r2,r2,-1
    b70c:	8085883a 	add	r2,r16,r2
    b710:	1085883a 	add	r2,r2,r2
    b714:	1085883a 	add	r2,r2,r2
    b718:	9885883a 	add	r2,r19,r2
    b71c:	11000517 	ldw	r4,20(r2)
    b720:	8020917a 	slli	r16,r16,5
    b724:	000acd00 	call	acd0 <__hi0bits>
    b728:	d8c00817 	ldw	r3,32(sp)
    b72c:	8085c83a 	sub	r2,r16,r2
    b730:	18800015 	stw	r2,0(r3)
    b734:	9805883a 	mov	r2,r19
    b738:	dfc00717 	ldw	ra,28(sp)
    b73c:	dd000617 	ldw	r20,24(sp)
    b740:	dcc00517 	ldw	r19,20(sp)
    b744:	dc800417 	ldw	r18,16(sp)
    b748:	dc400317 	ldw	r17,12(sp)
    b74c:	dc000217 	ldw	r16,8(sp)
    b750:	dec00804 	addi	sp,sp,32
    b754:	f800283a 	ret
    b758:	d809883a 	mov	r4,sp
    b75c:	000ad380 	call	ad38 <__lo0bits>
    b760:	d8c00017 	ldw	r3,0(sp)
    b764:	04000044 	movi	r16,1
    b768:	9c000415 	stw	r16,16(r19)
    b76c:	98c00515 	stw	r3,20(r19)
    b770:	10800804 	addi	r2,r2,32
    b774:	883fe126 	beq	r17,zero,b6fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b6fc>
    b778:	00c00d44 	movi	r3,53
    b77c:	8c7ef344 	addi	r17,r17,-1075
    b780:	88a3883a 	add	r17,r17,r2
    b784:	1885c83a 	sub	r2,r3,r2
    b788:	d8c00817 	ldw	r3,32(sp)
    b78c:	94400015 	stw	r17,0(r18)
    b790:	18800015 	stw	r2,0(r3)
    b794:	003fe706 	br	b734 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b734>
    b798:	01000804 	movi	r4,32
    b79c:	2089c83a 	sub	r4,r4,r2
    b7a0:	1908983a 	sll	r4,r3,r4
    b7a4:	d9400117 	ldw	r5,4(sp)
    b7a8:	1886d83a 	srl	r3,r3,r2
    b7ac:	2148b03a 	or	r4,r4,r5
    b7b0:	99000515 	stw	r4,20(r19)
    b7b4:	d8c00015 	stw	r3,0(sp)
    b7b8:	003fca06 	br	b6e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b6e4>

0000b7bc <__ratio>:
    b7bc:	defff904 	addi	sp,sp,-28
    b7c0:	dc400315 	stw	r17,12(sp)
    b7c4:	2823883a 	mov	r17,r5
    b7c8:	d9400104 	addi	r5,sp,4
    b7cc:	dfc00615 	stw	ra,24(sp)
    b7d0:	dcc00515 	stw	r19,20(sp)
    b7d4:	dc800415 	stw	r18,16(sp)
    b7d8:	2027883a 	mov	r19,r4
    b7dc:	dc000215 	stw	r16,8(sp)
    b7e0:	000b5640 	call	b564 <__b2d>
    b7e4:	d80b883a 	mov	r5,sp
    b7e8:	8809883a 	mov	r4,r17
    b7ec:	1025883a 	mov	r18,r2
    b7f0:	1821883a 	mov	r16,r3
    b7f4:	000b5640 	call	b564 <__b2d>
    b7f8:	8a000417 	ldw	r8,16(r17)
    b7fc:	99000417 	ldw	r4,16(r19)
    b800:	d9400117 	ldw	r5,4(sp)
    b804:	2209c83a 	sub	r4,r4,r8
    b808:	2010917a 	slli	r8,r4,5
    b80c:	d9000017 	ldw	r4,0(sp)
    b810:	2909c83a 	sub	r4,r5,r4
    b814:	4109883a 	add	r4,r8,r4
    b818:	01000e0e 	bge	zero,r4,b854 <__ratio+0x98>
    b81c:	2008953a 	slli	r4,r4,20
    b820:	2421883a 	add	r16,r4,r16
    b824:	100d883a 	mov	r6,r2
    b828:	180f883a 	mov	r7,r3
    b82c:	9009883a 	mov	r4,r18
    b830:	800b883a 	mov	r5,r16
    b834:	00035000 	call	3500 <__divdf3>
    b838:	dfc00617 	ldw	ra,24(sp)
    b83c:	dcc00517 	ldw	r19,20(sp)
    b840:	dc800417 	ldw	r18,16(sp)
    b844:	dc400317 	ldw	r17,12(sp)
    b848:	dc000217 	ldw	r16,8(sp)
    b84c:	dec00704 	addi	sp,sp,28
    b850:	f800283a 	ret
    b854:	2008953a 	slli	r4,r4,20
    b858:	1907c83a 	sub	r3,r3,r4
    b85c:	003ff106 	br	b824 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b824>

0000b860 <_mprec_log10>:
    b860:	defffe04 	addi	sp,sp,-8
    b864:	dc000015 	stw	r16,0(sp)
    b868:	dfc00115 	stw	ra,4(sp)
    b86c:	008005c4 	movi	r2,23
    b870:	2021883a 	mov	r16,r4
    b874:	11000d0e 	bge	r2,r4,b8ac <_mprec_log10+0x4c>
    b878:	0005883a 	mov	r2,zero
    b87c:	00cffc34 	movhi	r3,16368
    b880:	843fffc4 	addi	r16,r16,-1
    b884:	000d883a 	mov	r6,zero
    b888:	01d00934 	movhi	r7,16420
    b88c:	1009883a 	mov	r4,r2
    b890:	180b883a 	mov	r5,r3
    b894:	0003f4c0 	call	3f4c <__muldf3>
    b898:	803ff91e 	bne	r16,zero,b880 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b880>
    b89c:	dfc00117 	ldw	ra,4(sp)
    b8a0:	dc000017 	ldw	r16,0(sp)
    b8a4:	dec00204 	addi	sp,sp,8
    b8a8:	f800283a 	ret
    b8ac:	202090fa 	slli	r16,r4,3
    b8b0:	008000b4 	movhi	r2,2
    b8b4:	10ae9604 	addi	r2,r2,-17832
    b8b8:	1421883a 	add	r16,r2,r16
    b8bc:	80800017 	ldw	r2,0(r16)
    b8c0:	80c00117 	ldw	r3,4(r16)
    b8c4:	dfc00117 	ldw	ra,4(sp)
    b8c8:	dc000017 	ldw	r16,0(sp)
    b8cc:	dec00204 	addi	sp,sp,8
    b8d0:	f800283a 	ret

0000b8d4 <__copybits>:
    b8d4:	297fffc4 	addi	r5,r5,-1
    b8d8:	280fd17a 	srai	r7,r5,5
    b8dc:	30c00417 	ldw	r3,16(r6)
    b8e0:	30800504 	addi	r2,r6,20
    b8e4:	39c00044 	addi	r7,r7,1
    b8e8:	18c7883a 	add	r3,r3,r3
    b8ec:	39cf883a 	add	r7,r7,r7
    b8f0:	18c7883a 	add	r3,r3,r3
    b8f4:	39cf883a 	add	r7,r7,r7
    b8f8:	10c7883a 	add	r3,r2,r3
    b8fc:	21cf883a 	add	r7,r4,r7
    b900:	10c00d2e 	bgeu	r2,r3,b938 <__copybits+0x64>
    b904:	200b883a 	mov	r5,r4
    b908:	12000017 	ldw	r8,0(r2)
    b90c:	29400104 	addi	r5,r5,4
    b910:	10800104 	addi	r2,r2,4
    b914:	2a3fff15 	stw	r8,-4(r5)
    b918:	10fffb36 	bltu	r2,r3,b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    b91c:	1985c83a 	sub	r2,r3,r6
    b920:	10bffac4 	addi	r2,r2,-21
    b924:	1004d0ba 	srli	r2,r2,2
    b928:	10800044 	addi	r2,r2,1
    b92c:	1085883a 	add	r2,r2,r2
    b930:	1085883a 	add	r2,r2,r2
    b934:	2089883a 	add	r4,r4,r2
    b938:	21c0032e 	bgeu	r4,r7,b948 <__copybits+0x74>
    b93c:	20000015 	stw	zero,0(r4)
    b940:	21000104 	addi	r4,r4,4
    b944:	21fffd36 	bltu	r4,r7,b93c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b93c>
    b948:	f800283a 	ret

0000b94c <__any_on>:
    b94c:	20c00417 	ldw	r3,16(r4)
    b950:	2805d17a 	srai	r2,r5,5
    b954:	21000504 	addi	r4,r4,20
    b958:	18800d0e 	bge	r3,r2,b990 <__any_on+0x44>
    b95c:	18c7883a 	add	r3,r3,r3
    b960:	18c7883a 	add	r3,r3,r3
    b964:	20c7883a 	add	r3,r4,r3
    b968:	20c0192e 	bgeu	r4,r3,b9d0 <__any_on+0x84>
    b96c:	18bfff17 	ldw	r2,-4(r3)
    b970:	18ffff04 	addi	r3,r3,-4
    b974:	1000041e 	bne	r2,zero,b988 <__any_on+0x3c>
    b978:	20c0142e 	bgeu	r4,r3,b9cc <__any_on+0x80>
    b97c:	18ffff04 	addi	r3,r3,-4
    b980:	19400017 	ldw	r5,0(r3)
    b984:	283ffc26 	beq	r5,zero,b978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b978>
    b988:	00800044 	movi	r2,1
    b98c:	f800283a 	ret
    b990:	10c00a0e 	bge	r2,r3,b9bc <__any_on+0x70>
    b994:	1085883a 	add	r2,r2,r2
    b998:	1085883a 	add	r2,r2,r2
    b99c:	294007cc 	andi	r5,r5,31
    b9a0:	2087883a 	add	r3,r4,r2
    b9a4:	283ff026 	beq	r5,zero,b968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b968>
    b9a8:	19800017 	ldw	r6,0(r3)
    b9ac:	3144d83a 	srl	r2,r6,r5
    b9b0:	114a983a 	sll	r5,r2,r5
    b9b4:	317ff41e 	bne	r6,r5,b988 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b988>
    b9b8:	003feb06 	br	b968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b968>
    b9bc:	1085883a 	add	r2,r2,r2
    b9c0:	1085883a 	add	r2,r2,r2
    b9c4:	2087883a 	add	r3,r4,r2
    b9c8:	003fe706 	br	b968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b968>
    b9cc:	f800283a 	ret
    b9d0:	0005883a 	mov	r2,zero
    b9d4:	f800283a 	ret

0000b9d8 <__fpclassifyd>:
    b9d8:	00a00034 	movhi	r2,32768
    b9dc:	10bfffc4 	addi	r2,r2,-1
    b9e0:	2884703a 	and	r2,r5,r2
    b9e4:	10000726 	beq	r2,zero,ba04 <__fpclassifyd+0x2c>
    b9e8:	00fffc34 	movhi	r3,65520
    b9ec:	019ff834 	movhi	r6,32736
    b9f0:	28c7883a 	add	r3,r5,r3
    b9f4:	31bfffc4 	addi	r6,r6,-1
    b9f8:	30c00536 	bltu	r6,r3,ba10 <__fpclassifyd+0x38>
    b9fc:	00800104 	movi	r2,4
    ba00:	f800283a 	ret
    ba04:	2000021e 	bne	r4,zero,ba10 <__fpclassifyd+0x38>
    ba08:	00800084 	movi	r2,2
    ba0c:	f800283a 	ret
    ba10:	00dffc34 	movhi	r3,32752
    ba14:	019ff834 	movhi	r6,32736
    ba18:	28cb883a 	add	r5,r5,r3
    ba1c:	31bfffc4 	addi	r6,r6,-1
    ba20:	317ff62e 	bgeu	r6,r5,b9fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9fc>
    ba24:	01400434 	movhi	r5,16
    ba28:	297fffc4 	addi	r5,r5,-1
    ba2c:	28800236 	bltu	r5,r2,ba38 <__fpclassifyd+0x60>
    ba30:	008000c4 	movi	r2,3
    ba34:	f800283a 	ret
    ba38:	10c00226 	beq	r2,r3,ba44 <__fpclassifyd+0x6c>
    ba3c:	0005883a 	mov	r2,zero
    ba40:	f800283a 	ret
    ba44:	2005003a 	cmpeq	r2,r4,zero
    ba48:	f800283a 	ret

0000ba4c <_sbrk_r>:
    ba4c:	defffd04 	addi	sp,sp,-12
    ba50:	dc000015 	stw	r16,0(sp)
    ba54:	040000b4 	movhi	r16,2
    ba58:	dc400115 	stw	r17,4(sp)
    ba5c:	843f4604 	addi	r16,r16,-744
    ba60:	2023883a 	mov	r17,r4
    ba64:	2809883a 	mov	r4,r5
    ba68:	dfc00215 	stw	ra,8(sp)
    ba6c:	80000015 	stw	zero,0(r16)
    ba70:	000fbec0 	call	fbec <sbrk>
    ba74:	00ffffc4 	movi	r3,-1
    ba78:	10c00526 	beq	r2,r3,ba90 <_sbrk_r+0x44>
    ba7c:	dfc00217 	ldw	ra,8(sp)
    ba80:	dc400117 	ldw	r17,4(sp)
    ba84:	dc000017 	ldw	r16,0(sp)
    ba88:	dec00304 	addi	sp,sp,12
    ba8c:	f800283a 	ret
    ba90:	80c00017 	ldw	r3,0(r16)
    ba94:	183ff926 	beq	r3,zero,ba7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba7c>
    ba98:	88c00015 	stw	r3,0(r17)
    ba9c:	003ff706 	br	ba7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba7c>

0000baa0 <__sread>:
    baa0:	defffe04 	addi	sp,sp,-8
    baa4:	dc000015 	stw	r16,0(sp)
    baa8:	2821883a 	mov	r16,r5
    baac:	2940038f 	ldh	r5,14(r5)
    bab0:	dfc00115 	stw	ra,4(sp)
    bab4:	000df440 	call	df44 <_read_r>
    bab8:	10000716 	blt	r2,zero,bad8 <__sread+0x38>
    babc:	80c01417 	ldw	r3,80(r16)
    bac0:	1887883a 	add	r3,r3,r2
    bac4:	80c01415 	stw	r3,80(r16)
    bac8:	dfc00117 	ldw	ra,4(sp)
    bacc:	dc000017 	ldw	r16,0(sp)
    bad0:	dec00204 	addi	sp,sp,8
    bad4:	f800283a 	ret
    bad8:	80c0030b 	ldhu	r3,12(r16)
    badc:	18fbffcc 	andi	r3,r3,61439
    bae0:	80c0030d 	sth	r3,12(r16)
    bae4:	dfc00117 	ldw	ra,4(sp)
    bae8:	dc000017 	ldw	r16,0(sp)
    baec:	dec00204 	addi	sp,sp,8
    baf0:	f800283a 	ret

0000baf4 <__seofread>:
    baf4:	0005883a 	mov	r2,zero
    baf8:	f800283a 	ret

0000bafc <__swrite>:
    bafc:	2880030b 	ldhu	r2,12(r5)
    bb00:	defffb04 	addi	sp,sp,-20
    bb04:	dcc00315 	stw	r19,12(sp)
    bb08:	dc800215 	stw	r18,8(sp)
    bb0c:	dc400115 	stw	r17,4(sp)
    bb10:	dc000015 	stw	r16,0(sp)
    bb14:	dfc00415 	stw	ra,16(sp)
    bb18:	10c0400c 	andi	r3,r2,256
    bb1c:	2821883a 	mov	r16,r5
    bb20:	2023883a 	mov	r17,r4
    bb24:	3025883a 	mov	r18,r6
    bb28:	3827883a 	mov	r19,r7
    bb2c:	18000526 	beq	r3,zero,bb44 <__swrite+0x48>
    bb30:	2940038f 	ldh	r5,14(r5)
    bb34:	01c00084 	movi	r7,2
    bb38:	000d883a 	mov	r6,zero
    bb3c:	000dd880 	call	dd88 <_lseek_r>
    bb40:	8080030b 	ldhu	r2,12(r16)
    bb44:	8140038f 	ldh	r5,14(r16)
    bb48:	10bbffcc 	andi	r2,r2,61439
    bb4c:	980f883a 	mov	r7,r19
    bb50:	900d883a 	mov	r6,r18
    bb54:	8809883a 	mov	r4,r17
    bb58:	8080030d 	sth	r2,12(r16)
    bb5c:	dfc00417 	ldw	ra,16(sp)
    bb60:	dcc00317 	ldw	r19,12(sp)
    bb64:	dc800217 	ldw	r18,8(sp)
    bb68:	dc400117 	ldw	r17,4(sp)
    bb6c:	dc000017 	ldw	r16,0(sp)
    bb70:	dec00504 	addi	sp,sp,20
    bb74:	000d3981 	jmpi	d398 <_write_r>

0000bb78 <__sseek>:
    bb78:	defffe04 	addi	sp,sp,-8
    bb7c:	dc000015 	stw	r16,0(sp)
    bb80:	2821883a 	mov	r16,r5
    bb84:	2940038f 	ldh	r5,14(r5)
    bb88:	dfc00115 	stw	ra,4(sp)
    bb8c:	000dd880 	call	dd88 <_lseek_r>
    bb90:	00ffffc4 	movi	r3,-1
    bb94:	10c00826 	beq	r2,r3,bbb8 <__sseek+0x40>
    bb98:	80c0030b 	ldhu	r3,12(r16)
    bb9c:	80801415 	stw	r2,80(r16)
    bba0:	18c40014 	ori	r3,r3,4096
    bba4:	80c0030d 	sth	r3,12(r16)
    bba8:	dfc00117 	ldw	ra,4(sp)
    bbac:	dc000017 	ldw	r16,0(sp)
    bbb0:	dec00204 	addi	sp,sp,8
    bbb4:	f800283a 	ret
    bbb8:	80c0030b 	ldhu	r3,12(r16)
    bbbc:	18fbffcc 	andi	r3,r3,61439
    bbc0:	80c0030d 	sth	r3,12(r16)
    bbc4:	dfc00117 	ldw	ra,4(sp)
    bbc8:	dc000017 	ldw	r16,0(sp)
    bbcc:	dec00204 	addi	sp,sp,8
    bbd0:	f800283a 	ret

0000bbd4 <__sclose>:
    bbd4:	2940038f 	ldh	r5,14(r5)
    bbd8:	000d3f81 	jmpi	d3f8 <_close_r>

0000bbdc <strcmp>:
    bbdc:	2144b03a 	or	r2,r4,r5
    bbe0:	108000cc 	andi	r2,r2,3
    bbe4:	1000171e 	bne	r2,zero,bc44 <strcmp+0x68>
    bbe8:	20800017 	ldw	r2,0(r4)
    bbec:	28c00017 	ldw	r3,0(r5)
    bbf0:	10c0141e 	bne	r2,r3,bc44 <strcmp+0x68>
    bbf4:	027fbff4 	movhi	r9,65279
    bbf8:	4a7fbfc4 	addi	r9,r9,-257
    bbfc:	0086303a 	nor	r3,zero,r2
    bc00:	02202074 	movhi	r8,32897
    bc04:	1245883a 	add	r2,r2,r9
    bc08:	42202004 	addi	r8,r8,-32640
    bc0c:	10c4703a 	and	r2,r2,r3
    bc10:	1204703a 	and	r2,r2,r8
    bc14:	10000226 	beq	r2,zero,bc20 <strcmp+0x44>
    bc18:	00002306 	br	bca8 <strcmp+0xcc>
    bc1c:	1000221e 	bne	r2,zero,bca8 <strcmp+0xcc>
    bc20:	21000104 	addi	r4,r4,4
    bc24:	20c00017 	ldw	r3,0(r4)
    bc28:	29400104 	addi	r5,r5,4
    bc2c:	29800017 	ldw	r6,0(r5)
    bc30:	1a4f883a 	add	r7,r3,r9
    bc34:	00c4303a 	nor	r2,zero,r3
    bc38:	3884703a 	and	r2,r7,r2
    bc3c:	1204703a 	and	r2,r2,r8
    bc40:	19bff626 	beq	r3,r6,bc1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc1c>
    bc44:	20800003 	ldbu	r2,0(r4)
    bc48:	10c03fcc 	andi	r3,r2,255
    bc4c:	18c0201c 	xori	r3,r3,128
    bc50:	18ffe004 	addi	r3,r3,-128
    bc54:	18000c26 	beq	r3,zero,bc88 <strcmp+0xac>
    bc58:	29800007 	ldb	r6,0(r5)
    bc5c:	19800326 	beq	r3,r6,bc6c <strcmp+0x90>
    bc60:	00001306 	br	bcb0 <strcmp+0xd4>
    bc64:	29800007 	ldb	r6,0(r5)
    bc68:	11800b1e 	bne	r2,r6,bc98 <strcmp+0xbc>
    bc6c:	21000044 	addi	r4,r4,1
    bc70:	20c00003 	ldbu	r3,0(r4)
    bc74:	29400044 	addi	r5,r5,1
    bc78:	18803fcc 	andi	r2,r3,255
    bc7c:	1080201c 	xori	r2,r2,128
    bc80:	10bfe004 	addi	r2,r2,-128
    bc84:	103ff71e 	bne	r2,zero,bc64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc64>
    bc88:	0007883a 	mov	r3,zero
    bc8c:	28800003 	ldbu	r2,0(r5)
    bc90:	1885c83a 	sub	r2,r3,r2
    bc94:	f800283a 	ret
    bc98:	28800003 	ldbu	r2,0(r5)
    bc9c:	18c03fcc 	andi	r3,r3,255
    bca0:	1885c83a 	sub	r2,r3,r2
    bca4:	f800283a 	ret
    bca8:	0005883a 	mov	r2,zero
    bcac:	f800283a 	ret
    bcb0:	10c03fcc 	andi	r3,r2,255
    bcb4:	003ff506 	br	bc8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc8c>

0000bcb8 <strlen>:
    bcb8:	208000cc 	andi	r2,r4,3
    bcbc:	10002026 	beq	r2,zero,bd40 <strlen+0x88>
    bcc0:	20800007 	ldb	r2,0(r4)
    bcc4:	10002026 	beq	r2,zero,bd48 <strlen+0x90>
    bcc8:	2005883a 	mov	r2,r4
    bccc:	00000206 	br	bcd8 <strlen+0x20>
    bcd0:	10c00007 	ldb	r3,0(r2)
    bcd4:	18001826 	beq	r3,zero,bd38 <strlen+0x80>
    bcd8:	10800044 	addi	r2,r2,1
    bcdc:	10c000cc 	andi	r3,r2,3
    bce0:	183ffb1e 	bne	r3,zero,bcd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcd0>
    bce4:	10c00017 	ldw	r3,0(r2)
    bce8:	01ffbff4 	movhi	r7,65279
    bcec:	39ffbfc4 	addi	r7,r7,-257
    bcf0:	00ca303a 	nor	r5,zero,r3
    bcf4:	01a02074 	movhi	r6,32897
    bcf8:	19c7883a 	add	r3,r3,r7
    bcfc:	31a02004 	addi	r6,r6,-32640
    bd00:	1946703a 	and	r3,r3,r5
    bd04:	1986703a 	and	r3,r3,r6
    bd08:	1800091e 	bne	r3,zero,bd30 <strlen+0x78>
    bd0c:	10800104 	addi	r2,r2,4
    bd10:	10c00017 	ldw	r3,0(r2)
    bd14:	19cb883a 	add	r5,r3,r7
    bd18:	00c6303a 	nor	r3,zero,r3
    bd1c:	28c6703a 	and	r3,r5,r3
    bd20:	1986703a 	and	r3,r3,r6
    bd24:	183ff926 	beq	r3,zero,bd0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd0c>
    bd28:	00000106 	br	bd30 <strlen+0x78>
    bd2c:	10800044 	addi	r2,r2,1
    bd30:	10c00007 	ldb	r3,0(r2)
    bd34:	183ffd1e 	bne	r3,zero,bd2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd2c>
    bd38:	1105c83a 	sub	r2,r2,r4
    bd3c:	f800283a 	ret
    bd40:	2005883a 	mov	r2,r4
    bd44:	003fe706 	br	bce4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bce4>
    bd48:	0005883a 	mov	r2,zero
    bd4c:	f800283a 	ret

0000bd50 <__sprint_r.part.0>:
    bd50:	28801917 	ldw	r2,100(r5)
    bd54:	defff604 	addi	sp,sp,-40
    bd58:	dd400515 	stw	r21,20(sp)
    bd5c:	dfc00915 	stw	ra,36(sp)
    bd60:	df000815 	stw	fp,32(sp)
    bd64:	ddc00715 	stw	r23,28(sp)
    bd68:	dd800615 	stw	r22,24(sp)
    bd6c:	dd000415 	stw	r20,16(sp)
    bd70:	dcc00315 	stw	r19,12(sp)
    bd74:	dc800215 	stw	r18,8(sp)
    bd78:	dc400115 	stw	r17,4(sp)
    bd7c:	dc000015 	stw	r16,0(sp)
    bd80:	1088000c 	andi	r2,r2,8192
    bd84:	302b883a 	mov	r21,r6
    bd88:	10002e26 	beq	r2,zero,be44 <__sprint_r.part.0+0xf4>
    bd8c:	30800217 	ldw	r2,8(r6)
    bd90:	35800017 	ldw	r22,0(r6)
    bd94:	10002926 	beq	r2,zero,be3c <__sprint_r.part.0+0xec>
    bd98:	2827883a 	mov	r19,r5
    bd9c:	2029883a 	mov	r20,r4
    bda0:	b5c00104 	addi	r23,r22,4
    bda4:	04bfffc4 	movi	r18,-1
    bda8:	bc400017 	ldw	r17,0(r23)
    bdac:	b4000017 	ldw	r16,0(r22)
    bdb0:	0039883a 	mov	fp,zero
    bdb4:	8822d0ba 	srli	r17,r17,2
    bdb8:	8800031e 	bne	r17,zero,bdc8 <__sprint_r.part.0+0x78>
    bdbc:	00001806 	br	be20 <__sprint_r.part.0+0xd0>
    bdc0:	84000104 	addi	r16,r16,4
    bdc4:	8f001526 	beq	r17,fp,be1c <__sprint_r.part.0+0xcc>
    bdc8:	81400017 	ldw	r5,0(r16)
    bdcc:	980d883a 	mov	r6,r19
    bdd0:	a009883a 	mov	r4,r20
    bdd4:	000d7780 	call	d778 <_fputwc_r>
    bdd8:	e7000044 	addi	fp,fp,1
    bddc:	14bff81e 	bne	r2,r18,bdc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bdc0>
    bde0:	9005883a 	mov	r2,r18
    bde4:	a8000215 	stw	zero,8(r21)
    bde8:	a8000115 	stw	zero,4(r21)
    bdec:	dfc00917 	ldw	ra,36(sp)
    bdf0:	df000817 	ldw	fp,32(sp)
    bdf4:	ddc00717 	ldw	r23,28(sp)
    bdf8:	dd800617 	ldw	r22,24(sp)
    bdfc:	dd400517 	ldw	r21,20(sp)
    be00:	dd000417 	ldw	r20,16(sp)
    be04:	dcc00317 	ldw	r19,12(sp)
    be08:	dc800217 	ldw	r18,8(sp)
    be0c:	dc400117 	ldw	r17,4(sp)
    be10:	dc000017 	ldw	r16,0(sp)
    be14:	dec00a04 	addi	sp,sp,40
    be18:	f800283a 	ret
    be1c:	a8800217 	ldw	r2,8(r21)
    be20:	8c63883a 	add	r17,r17,r17
    be24:	8c63883a 	add	r17,r17,r17
    be28:	1445c83a 	sub	r2,r2,r17
    be2c:	a8800215 	stw	r2,8(r21)
    be30:	b5800204 	addi	r22,r22,8
    be34:	bdc00204 	addi	r23,r23,8
    be38:	103fdb1e 	bne	r2,zero,bda8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bda8>
    be3c:	0005883a 	mov	r2,zero
    be40:	003fe806 	br	bde4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bde4>
    be44:	000d8780 	call	d878 <__sfvwrite_r>
    be48:	003fe606 	br	bde4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bde4>

0000be4c <__sprint_r>:
    be4c:	30c00217 	ldw	r3,8(r6)
    be50:	18000126 	beq	r3,zero,be58 <__sprint_r+0xc>
    be54:	000bd501 	jmpi	bd50 <__sprint_r.part.0>
    be58:	30000115 	stw	zero,4(r6)
    be5c:	0005883a 	mov	r2,zero
    be60:	f800283a 	ret

0000be64 <___vfiprintf_internal_r>:
    be64:	deffc904 	addi	sp,sp,-220
    be68:	df003515 	stw	fp,212(sp)
    be6c:	dd003115 	stw	r20,196(sp)
    be70:	dfc03615 	stw	ra,216(sp)
    be74:	ddc03415 	stw	r23,208(sp)
    be78:	dd803315 	stw	r22,204(sp)
    be7c:	dd403215 	stw	r21,200(sp)
    be80:	dcc03015 	stw	r19,192(sp)
    be84:	dc802f15 	stw	r18,188(sp)
    be88:	dc402e15 	stw	r17,184(sp)
    be8c:	dc002d15 	stw	r16,180(sp)
    be90:	d9002015 	stw	r4,128(sp)
    be94:	d9c02215 	stw	r7,136(sp)
    be98:	2829883a 	mov	r20,r5
    be9c:	3039883a 	mov	fp,r6
    bea0:	20000226 	beq	r4,zero,beac <___vfiprintf_internal_r+0x48>
    bea4:	20800e17 	ldw	r2,56(r4)
    bea8:	1000cf26 	beq	r2,zero,c1e8 <___vfiprintf_internal_r+0x384>
    beac:	a080030b 	ldhu	r2,12(r20)
    beb0:	10c8000c 	andi	r3,r2,8192
    beb4:	1800061e 	bne	r3,zero,bed0 <___vfiprintf_internal_r+0x6c>
    beb8:	a1001917 	ldw	r4,100(r20)
    bebc:	00f7ffc4 	movi	r3,-8193
    bec0:	10880014 	ori	r2,r2,8192
    bec4:	20c6703a 	and	r3,r4,r3
    bec8:	a080030d 	sth	r2,12(r20)
    becc:	a0c01915 	stw	r3,100(r20)
    bed0:	10c0020c 	andi	r3,r2,8
    bed4:	1800a926 	beq	r3,zero,c17c <___vfiprintf_internal_r+0x318>
    bed8:	a0c00417 	ldw	r3,16(r20)
    bedc:	1800a726 	beq	r3,zero,c17c <___vfiprintf_internal_r+0x318>
    bee0:	1080068c 	andi	r2,r2,26
    bee4:	00c00284 	movi	r3,10
    bee8:	10c0ac26 	beq	r2,r3,c19c <___vfiprintf_internal_r+0x338>
    beec:	da801a04 	addi	r10,sp,104
    bef0:	da801e15 	stw	r10,120(sp)
    bef4:	d8801e17 	ldw	r2,120(sp)
    bef8:	da8019c4 	addi	r10,sp,103
    befc:	058000b4 	movhi	r22,2
    bf00:	05c000b4 	movhi	r23,2
    bf04:	da801f15 	stw	r10,124(sp)
    bf08:	1295c83a 	sub	r10,r2,r10
    bf0c:	b5aecc04 	addi	r22,r22,-17616
    bf10:	bdeec804 	addi	r23,r23,-17632
    bf14:	dec01a15 	stw	sp,104(sp)
    bf18:	d8001c15 	stw	zero,112(sp)
    bf1c:	d8001b15 	stw	zero,108(sp)
    bf20:	d8002615 	stw	zero,152(sp)
    bf24:	d8002315 	stw	zero,140(sp)
    bf28:	da802715 	stw	r10,156(sp)
    bf2c:	d811883a 	mov	r8,sp
    bf30:	dd002115 	stw	r20,132(sp)
    bf34:	e021883a 	mov	r16,fp
    bf38:	80800007 	ldb	r2,0(r16)
    bf3c:	1003ea26 	beq	r2,zero,cee8 <___vfiprintf_internal_r+0x1084>
    bf40:	00c00944 	movi	r3,37
    bf44:	8025883a 	mov	r18,r16
    bf48:	10c0021e 	bne	r2,r3,bf54 <___vfiprintf_internal_r+0xf0>
    bf4c:	00001606 	br	bfa8 <___vfiprintf_internal_r+0x144>
    bf50:	10c00326 	beq	r2,r3,bf60 <___vfiprintf_internal_r+0xfc>
    bf54:	94800044 	addi	r18,r18,1
    bf58:	90800007 	ldb	r2,0(r18)
    bf5c:	103ffc1e 	bne	r2,zero,bf50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf50>
    bf60:	9423c83a 	sub	r17,r18,r16
    bf64:	88001026 	beq	r17,zero,bfa8 <___vfiprintf_internal_r+0x144>
    bf68:	d8c01c17 	ldw	r3,112(sp)
    bf6c:	d8801b17 	ldw	r2,108(sp)
    bf70:	44000015 	stw	r16,0(r8)
    bf74:	88c7883a 	add	r3,r17,r3
    bf78:	10800044 	addi	r2,r2,1
    bf7c:	44400115 	stw	r17,4(r8)
    bf80:	d8c01c15 	stw	r3,112(sp)
    bf84:	d8801b15 	stw	r2,108(sp)
    bf88:	010001c4 	movi	r4,7
    bf8c:	2080760e 	bge	r4,r2,c168 <___vfiprintf_internal_r+0x304>
    bf90:	1803821e 	bne	r3,zero,cd9c <___vfiprintf_internal_r+0xf38>
    bf94:	da802317 	ldw	r10,140(sp)
    bf98:	d8001b15 	stw	zero,108(sp)
    bf9c:	d811883a 	mov	r8,sp
    bfa0:	5455883a 	add	r10,r10,r17
    bfa4:	da802315 	stw	r10,140(sp)
    bfa8:	90800007 	ldb	r2,0(r18)
    bfac:	10044626 	beq	r2,zero,d0c8 <___vfiprintf_internal_r+0x1264>
    bfb0:	90c00047 	ldb	r3,1(r18)
    bfb4:	94000044 	addi	r16,r18,1
    bfb8:	d8001d85 	stb	zero,118(sp)
    bfbc:	0009883a 	mov	r4,zero
    bfc0:	000f883a 	mov	r7,zero
    bfc4:	027fffc4 	movi	r9,-1
    bfc8:	0023883a 	mov	r17,zero
    bfcc:	0029883a 	mov	r20,zero
    bfd0:	01401604 	movi	r5,88
    bfd4:	01800244 	movi	r6,9
    bfd8:	03400a84 	movi	r13,42
    bfdc:	03001b04 	movi	r12,108
    bfe0:	84000044 	addi	r16,r16,1
    bfe4:	18bff804 	addi	r2,r3,-32
    bfe8:	28827336 	bltu	r5,r2,c9b8 <___vfiprintf_internal_r+0xb54>
    bfec:	100490ba 	slli	r2,r2,2
    bff0:	02800074 	movhi	r10,1
    bff4:	52b00104 	addi	r10,r10,-16380
    bff8:	1285883a 	add	r2,r2,r10
    bffc:	10800017 	ldw	r2,0(r2)
    c000:	1000683a 	jmp	r2
    c004:	0000c6ec 	andhi	zero,zero,795
    c008:	0000c9b8 	rdprs	zero,zero,806
    c00c:	0000c9b8 	rdprs	zero,zero,806
    c010:	0000c70c 	andi	zero,zero,796
    c014:	0000c9b8 	rdprs	zero,zero,806
    c018:	0000c9b8 	rdprs	zero,zero,806
    c01c:	0000c9b8 	rdprs	zero,zero,806
    c020:	0000c9b8 	rdprs	zero,zero,806
    c024:	0000c9b8 	rdprs	zero,zero,806
    c028:	0000c9b8 	rdprs	zero,zero,806
    c02c:	0000c8f4 	movhi	zero,803
    c030:	0000c910 	cmplti	zero,zero,804
    c034:	0000c9b8 	rdprs	zero,zero,806
    c038:	0000c1f8 	rdprs	zero,zero,775
    c03c:	0000c920 	cmpeqi	zero,zero,804
    c040:	0000c9b8 	rdprs	zero,zero,806
    c044:	0000c718 	cmpnei	zero,zero,796
    c048:	0000c724 	muli	zero,zero,796
    c04c:	0000c724 	muli	zero,zero,796
    c050:	0000c724 	muli	zero,zero,796
    c054:	0000c724 	muli	zero,zero,796
    c058:	0000c724 	muli	zero,zero,796
    c05c:	0000c724 	muli	zero,zero,796
    c060:	0000c724 	muli	zero,zero,796
    c064:	0000c724 	muli	zero,zero,796
    c068:	0000c724 	muli	zero,zero,796
    c06c:	0000c9b8 	rdprs	zero,zero,806
    c070:	0000c9b8 	rdprs	zero,zero,806
    c074:	0000c9b8 	rdprs	zero,zero,806
    c078:	0000c9b8 	rdprs	zero,zero,806
    c07c:	0000c9b8 	rdprs	zero,zero,806
    c080:	0000c9b8 	rdprs	zero,zero,806
    c084:	0000c9b8 	rdprs	zero,zero,806
    c088:	0000c9b8 	rdprs	zero,zero,806
    c08c:	0000c9b8 	rdprs	zero,zero,806
    c090:	0000c9b8 	rdprs	zero,zero,806
    c094:	0000c750 	cmplti	zero,zero,797
    c098:	0000c9b8 	rdprs	zero,zero,806
    c09c:	0000c9b8 	rdprs	zero,zero,806
    c0a0:	0000c9b8 	rdprs	zero,zero,806
    c0a4:	0000c9b8 	rdprs	zero,zero,806
    c0a8:	0000c9b8 	rdprs	zero,zero,806
    c0ac:	0000c9b8 	rdprs	zero,zero,806
    c0b0:	0000c9b8 	rdprs	zero,zero,806
    c0b4:	0000c9b8 	rdprs	zero,zero,806
    c0b8:	0000c9b8 	rdprs	zero,zero,806
    c0bc:	0000c9b8 	rdprs	zero,zero,806
    c0c0:	0000c788 	cmpgei	zero,zero,798
    c0c4:	0000c9b8 	rdprs	zero,zero,806
    c0c8:	0000c9b8 	rdprs	zero,zero,806
    c0cc:	0000c9b8 	rdprs	zero,zero,806
    c0d0:	0000c9b8 	rdprs	zero,zero,806
    c0d4:	0000c9b8 	rdprs	zero,zero,806
    c0d8:	0000c7e0 	cmpeqi	zero,zero,799
    c0dc:	0000c9b8 	rdprs	zero,zero,806
    c0e0:	0000c9b8 	rdprs	zero,zero,806
    c0e4:	0000c850 	cmplti	zero,zero,801
    c0e8:	0000c9b8 	rdprs	zero,zero,806
    c0ec:	0000c9b8 	rdprs	zero,zero,806
    c0f0:	0000c9b8 	rdprs	zero,zero,806
    c0f4:	0000c9b8 	rdprs	zero,zero,806
    c0f8:	0000c9b8 	rdprs	zero,zero,806
    c0fc:	0000c9b8 	rdprs	zero,zero,806
    c100:	0000c9b8 	rdprs	zero,zero,806
    c104:	0000c9b8 	rdprs	zero,zero,806
    c108:	0000c9b8 	rdprs	zero,zero,806
    c10c:	0000c9b8 	rdprs	zero,zero,806
    c110:	0000c5fc 	xorhi	zero,zero,791
    c114:	0000c628 	cmpgeui	zero,zero,792
    c118:	0000c9b8 	rdprs	zero,zero,806
    c11c:	0000c9b8 	rdprs	zero,zero,806
    c120:	0000c9b8 	rdprs	zero,zero,806
    c124:	0000c960 	cmpeqi	zero,zero,805
    c128:	0000c628 	cmpgeui	zero,zero,792
    c12c:	0000c9b8 	rdprs	zero,zero,806
    c130:	0000c9b8 	rdprs	zero,zero,806
    c134:	0000c4bc 	xorhi	zero,zero,786
    c138:	0000c9b8 	rdprs	zero,zero,806
    c13c:	0000c4cc 	andi	zero,zero,787
    c140:	0000c508 	cmpgei	zero,zero,788
    c144:	0000c204 	movi	zero,776
    c148:	0000c4b0 	cmpltui	zero,zero,786
    c14c:	0000c9b8 	rdprs	zero,zero,806
    c150:	0000c88c 	andi	zero,zero,802
    c154:	0000c9b8 	rdprs	zero,zero,806
    c158:	0000c8e4 	muli	zero,zero,803
    c15c:	0000c9b8 	rdprs	zero,zero,806
    c160:	0000c9b8 	rdprs	zero,zero,806
    c164:	0000c5a8 	cmpgeui	zero,zero,790
    c168:	42000204 	addi	r8,r8,8
    c16c:	da802317 	ldw	r10,140(sp)
    c170:	5455883a 	add	r10,r10,r17
    c174:	da802315 	stw	r10,140(sp)
    c178:	003f8b06 	br	bfa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfa8>
    c17c:	d9002017 	ldw	r4,128(sp)
    c180:	a00b883a 	mov	r5,r20
    c184:	00076040 	call	7604 <__swsetup_r>
    c188:	1003b11e 	bne	r2,zero,d050 <___vfiprintf_internal_r+0x11ec>
    c18c:	a080030b 	ldhu	r2,12(r20)
    c190:	00c00284 	movi	r3,10
    c194:	1080068c 	andi	r2,r2,26
    c198:	10ff541e 	bne	r2,r3,beec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700beec>
    c19c:	a080038f 	ldh	r2,14(r20)
    c1a0:	103f5216 	blt	r2,zero,beec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700beec>
    c1a4:	d9c02217 	ldw	r7,136(sp)
    c1a8:	d9002017 	ldw	r4,128(sp)
    c1ac:	e00d883a 	mov	r6,fp
    c1b0:	a00b883a 	mov	r5,r20
    c1b4:	000d2dc0 	call	d2dc <__sbprintf>
    c1b8:	dfc03617 	ldw	ra,216(sp)
    c1bc:	df003517 	ldw	fp,212(sp)
    c1c0:	ddc03417 	ldw	r23,208(sp)
    c1c4:	dd803317 	ldw	r22,204(sp)
    c1c8:	dd403217 	ldw	r21,200(sp)
    c1cc:	dd003117 	ldw	r20,196(sp)
    c1d0:	dcc03017 	ldw	r19,192(sp)
    c1d4:	dc802f17 	ldw	r18,188(sp)
    c1d8:	dc402e17 	ldw	r17,184(sp)
    c1dc:	dc002d17 	ldw	r16,180(sp)
    c1e0:	dec03704 	addi	sp,sp,220
    c1e4:	f800283a 	ret
    c1e8:	00095d80 	call	95d8 <__sinit>
    c1ec:	003f2f06 	br	beac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700beac>
    c1f0:	0463c83a 	sub	r17,zero,r17
    c1f4:	d8802215 	stw	r2,136(sp)
    c1f8:	a5000114 	ori	r20,r20,4
    c1fc:	80c00007 	ldb	r3,0(r16)
    c200:	003f7706 	br	bfe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe0>
    c204:	00800c04 	movi	r2,48
    c208:	da802217 	ldw	r10,136(sp)
    c20c:	d8801d05 	stb	r2,116(sp)
    c210:	00801e04 	movi	r2,120
    c214:	d8801d45 	stb	r2,117(sp)
    c218:	d8001d85 	stb	zero,118(sp)
    c21c:	50c00104 	addi	r3,r10,4
    c220:	54800017 	ldw	r18,0(r10)
    c224:	0027883a 	mov	r19,zero
    c228:	a0800094 	ori	r2,r20,2
    c22c:	48030b16 	blt	r9,zero,ce5c <___vfiprintf_internal_r+0xff8>
    c230:	00bfdfc4 	movi	r2,-129
    c234:	a096703a 	and	r11,r20,r2
    c238:	d8c02215 	stw	r3,136(sp)
    c23c:	5d000094 	ori	r20,r11,2
    c240:	90032b1e 	bne	r18,zero,cef0 <___vfiprintf_internal_r+0x108c>
    c244:	008000b4 	movhi	r2,2
    c248:	10ae6704 	addi	r2,r2,-18020
    c24c:	d8802615 	stw	r2,152(sp)
    c250:	0039883a 	mov	fp,zero
    c254:	48017b1e 	bne	r9,zero,c844 <___vfiprintf_internal_r+0x9e0>
    c258:	0013883a 	mov	r9,zero
    c25c:	0027883a 	mov	r19,zero
    c260:	dd401a04 	addi	r21,sp,104
    c264:	4825883a 	mov	r18,r9
    c268:	4cc0010e 	bge	r9,r19,c270 <___vfiprintf_internal_r+0x40c>
    c26c:	9825883a 	mov	r18,r19
    c270:	e7003fcc 	andi	fp,fp,255
    c274:	e700201c 	xori	fp,fp,128
    c278:	e73fe004 	addi	fp,fp,-128
    c27c:	e0000126 	beq	fp,zero,c284 <___vfiprintf_internal_r+0x420>
    c280:	94800044 	addi	r18,r18,1
    c284:	a380008c 	andi	r14,r20,2
    c288:	70000126 	beq	r14,zero,c290 <___vfiprintf_internal_r+0x42c>
    c28c:	94800084 	addi	r18,r18,2
    c290:	a700210c 	andi	fp,r20,132
    c294:	e001df1e 	bne	fp,zero,ca14 <___vfiprintf_internal_r+0xbb0>
    c298:	8c87c83a 	sub	r3,r17,r18
    c29c:	00c1dd0e 	bge	zero,r3,ca14 <___vfiprintf_internal_r+0xbb0>
    c2a0:	01c00404 	movi	r7,16
    c2a4:	d8801c17 	ldw	r2,112(sp)
    c2a8:	38c3ad0e 	bge	r7,r3,d160 <___vfiprintf_internal_r+0x12fc>
    c2ac:	028000b4 	movhi	r10,2
    c2b0:	52aecc04 	addi	r10,r10,-17616
    c2b4:	dc002915 	stw	r16,164(sp)
    c2b8:	d9801b17 	ldw	r6,108(sp)
    c2bc:	da802415 	stw	r10,144(sp)
    c2c0:	03c001c4 	movi	r15,7
    c2c4:	da402515 	stw	r9,148(sp)
    c2c8:	db802815 	stw	r14,160(sp)
    c2cc:	1821883a 	mov	r16,r3
    c2d0:	00000506 	br	c2e8 <___vfiprintf_internal_r+0x484>
    c2d4:	31400084 	addi	r5,r6,2
    c2d8:	42000204 	addi	r8,r8,8
    c2dc:	200d883a 	mov	r6,r4
    c2e0:	843ffc04 	addi	r16,r16,-16
    c2e4:	3c000d0e 	bge	r7,r16,c31c <___vfiprintf_internal_r+0x4b8>
    c2e8:	10800404 	addi	r2,r2,16
    c2ec:	31000044 	addi	r4,r6,1
    c2f0:	45800015 	stw	r22,0(r8)
    c2f4:	41c00115 	stw	r7,4(r8)
    c2f8:	d8801c15 	stw	r2,112(sp)
    c2fc:	d9001b15 	stw	r4,108(sp)
    c300:	793ff40e 	bge	r15,r4,c2d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c2d4>
    c304:	1001b51e 	bne	r2,zero,c9dc <___vfiprintf_internal_r+0xb78>
    c308:	843ffc04 	addi	r16,r16,-16
    c30c:	000d883a 	mov	r6,zero
    c310:	01400044 	movi	r5,1
    c314:	d811883a 	mov	r8,sp
    c318:	3c3ff316 	blt	r7,r16,c2e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c2e8>
    c31c:	8007883a 	mov	r3,r16
    c320:	da402517 	ldw	r9,148(sp)
    c324:	db802817 	ldw	r14,160(sp)
    c328:	dc002917 	ldw	r16,164(sp)
    c32c:	da802417 	ldw	r10,144(sp)
    c330:	1885883a 	add	r2,r3,r2
    c334:	40c00115 	stw	r3,4(r8)
    c338:	42800015 	stw	r10,0(r8)
    c33c:	d8801c15 	stw	r2,112(sp)
    c340:	d9401b15 	stw	r5,108(sp)
    c344:	00c001c4 	movi	r3,7
    c348:	19426016 	blt	r3,r5,cccc <___vfiprintf_internal_r+0xe68>
    c34c:	d8c01d87 	ldb	r3,118(sp)
    c350:	42000204 	addi	r8,r8,8
    c354:	29000044 	addi	r4,r5,1
    c358:	1801b31e 	bne	r3,zero,ca28 <___vfiprintf_internal_r+0xbc4>
    c35c:	7001c026 	beq	r14,zero,ca60 <___vfiprintf_internal_r+0xbfc>
    c360:	d8c01d04 	addi	r3,sp,116
    c364:	10800084 	addi	r2,r2,2
    c368:	40c00015 	stw	r3,0(r8)
    c36c:	00c00084 	movi	r3,2
    c370:	40c00115 	stw	r3,4(r8)
    c374:	d8801c15 	stw	r2,112(sp)
    c378:	d9001b15 	stw	r4,108(sp)
    c37c:	00c001c4 	movi	r3,7
    c380:	1902650e 	bge	r3,r4,cd18 <___vfiprintf_internal_r+0xeb4>
    c384:	10029a1e 	bne	r2,zero,cdf0 <___vfiprintf_internal_r+0xf8c>
    c388:	00c02004 	movi	r3,128
    c38c:	01000044 	movi	r4,1
    c390:	000b883a 	mov	r5,zero
    c394:	d811883a 	mov	r8,sp
    c398:	e0c1b31e 	bne	fp,r3,ca68 <___vfiprintf_internal_r+0xc04>
    c39c:	8cb9c83a 	sub	fp,r17,r18
    c3a0:	0701b10e 	bge	zero,fp,ca68 <___vfiprintf_internal_r+0xc04>
    c3a4:	01c00404 	movi	r7,16
    c3a8:	3f03890e 	bge	r7,fp,d1d0 <___vfiprintf_internal_r+0x136c>
    c3ac:	00c000b4 	movhi	r3,2
    c3b0:	18eec804 	addi	r3,r3,-17632
    c3b4:	d8c02415 	stw	r3,144(sp)
    c3b8:	8007883a 	mov	r3,r16
    c3bc:	034001c4 	movi	r13,7
    c3c0:	e021883a 	mov	r16,fp
    c3c4:	da402515 	stw	r9,148(sp)
    c3c8:	1839883a 	mov	fp,r3
    c3cc:	00000506 	br	c3e4 <___vfiprintf_internal_r+0x580>
    c3d0:	29800084 	addi	r6,r5,2
    c3d4:	42000204 	addi	r8,r8,8
    c3d8:	180b883a 	mov	r5,r3
    c3dc:	843ffc04 	addi	r16,r16,-16
    c3e0:	3c000d0e 	bge	r7,r16,c418 <___vfiprintf_internal_r+0x5b4>
    c3e4:	10800404 	addi	r2,r2,16
    c3e8:	28c00044 	addi	r3,r5,1
    c3ec:	45c00015 	stw	r23,0(r8)
    c3f0:	41c00115 	stw	r7,4(r8)
    c3f4:	d8801c15 	stw	r2,112(sp)
    c3f8:	d8c01b15 	stw	r3,108(sp)
    c3fc:	68fff40e 	bge	r13,r3,c3d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3d0>
    c400:	1002241e 	bne	r2,zero,cc94 <___vfiprintf_internal_r+0xe30>
    c404:	843ffc04 	addi	r16,r16,-16
    c408:	01800044 	movi	r6,1
    c40c:	000b883a 	mov	r5,zero
    c410:	d811883a 	mov	r8,sp
    c414:	3c3ff316 	blt	r7,r16,c3e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3e4>
    c418:	da402517 	ldw	r9,148(sp)
    c41c:	e007883a 	mov	r3,fp
    c420:	8039883a 	mov	fp,r16
    c424:	1821883a 	mov	r16,r3
    c428:	d8c02417 	ldw	r3,144(sp)
    c42c:	1705883a 	add	r2,r2,fp
    c430:	47000115 	stw	fp,4(r8)
    c434:	40c00015 	stw	r3,0(r8)
    c438:	d8801c15 	stw	r2,112(sp)
    c43c:	d9801b15 	stw	r6,108(sp)
    c440:	00c001c4 	movi	r3,7
    c444:	19827616 	blt	r3,r6,ce20 <___vfiprintf_internal_r+0xfbc>
    c448:	4cf9c83a 	sub	fp,r9,r19
    c44c:	42000204 	addi	r8,r8,8
    c450:	31000044 	addi	r4,r6,1
    c454:	300b883a 	mov	r5,r6
    c458:	07018516 	blt	zero,fp,ca70 <___vfiprintf_internal_r+0xc0c>
    c45c:	9885883a 	add	r2,r19,r2
    c460:	45400015 	stw	r21,0(r8)
    c464:	44c00115 	stw	r19,4(r8)
    c468:	d8801c15 	stw	r2,112(sp)
    c46c:	d9001b15 	stw	r4,108(sp)
    c470:	00c001c4 	movi	r3,7
    c474:	1901dd0e 	bge	r3,r4,cbec <___vfiprintf_internal_r+0xd88>
    c478:	1002401e 	bne	r2,zero,cd7c <___vfiprintf_internal_r+0xf18>
    c47c:	d8001b15 	stw	zero,108(sp)
    c480:	a2c0010c 	andi	r11,r20,4
    c484:	58000226 	beq	r11,zero,c490 <___vfiprintf_internal_r+0x62c>
    c488:	8ca7c83a 	sub	r19,r17,r18
    c48c:	04c2f216 	blt	zero,r19,d058 <___vfiprintf_internal_r+0x11f4>
    c490:	8c80010e 	bge	r17,r18,c498 <___vfiprintf_internal_r+0x634>
    c494:	9023883a 	mov	r17,r18
    c498:	da802317 	ldw	r10,140(sp)
    c49c:	5455883a 	add	r10,r10,r17
    c4a0:	da802315 	stw	r10,140(sp)
    c4a4:	d8001b15 	stw	zero,108(sp)
    c4a8:	d811883a 	mov	r8,sp
    c4ac:	003ea206 	br	bf38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf38>
    c4b0:	a5000814 	ori	r20,r20,32
    c4b4:	80c00007 	ldb	r3,0(r16)
    c4b8:	003ec906 	br	bfe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe0>
    c4bc:	80c00007 	ldb	r3,0(r16)
    c4c0:	1b030926 	beq	r3,r12,d0e8 <___vfiprintf_internal_r+0x1284>
    c4c4:	a5000414 	ori	r20,r20,16
    c4c8:	003ec506 	br	bfe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe0>
    c4cc:	21003fcc 	andi	r4,r4,255
    c4d0:	20035e1e 	bne	r4,zero,d24c <___vfiprintf_internal_r+0x13e8>
    c4d4:	a080080c 	andi	r2,r20,32
    c4d8:	1002a526 	beq	r2,zero,cf70 <___vfiprintf_internal_r+0x110c>
    c4dc:	da802217 	ldw	r10,136(sp)
    c4e0:	50800017 	ldw	r2,0(r10)
    c4e4:	da802317 	ldw	r10,140(sp)
    c4e8:	5007d7fa 	srai	r3,r10,31
    c4ec:	da802217 	ldw	r10,136(sp)
    c4f0:	10c00115 	stw	r3,4(r2)
    c4f4:	52800104 	addi	r10,r10,4
    c4f8:	da802215 	stw	r10,136(sp)
    c4fc:	da802317 	ldw	r10,140(sp)
    c500:	12800015 	stw	r10,0(r2)
    c504:	003e8c06 	br	bf38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf38>
    c508:	21003fcc 	andi	r4,r4,255
    c50c:	2003511e 	bne	r4,zero,d254 <___vfiprintf_internal_r+0x13f0>
    c510:	a080080c 	andi	r2,r20,32
    c514:	1000a126 	beq	r2,zero,c79c <___vfiprintf_internal_r+0x938>
    c518:	da802217 	ldw	r10,136(sp)
    c51c:	d8001d85 	stb	zero,118(sp)
    c520:	50800204 	addi	r2,r10,8
    c524:	54800017 	ldw	r18,0(r10)
    c528:	54c00117 	ldw	r19,4(r10)
    c52c:	4802b416 	blt	r9,zero,d000 <___vfiprintf_internal_r+0x119c>
    c530:	013fdfc4 	movi	r4,-129
    c534:	94c6b03a 	or	r3,r18,r19
    c538:	d8802215 	stw	r2,136(sp)
    c53c:	a128703a 	and	r20,r20,r4
    c540:	1800a226 	beq	r3,zero,c7cc <___vfiprintf_internal_r+0x968>
    c544:	0039883a 	mov	fp,zero
    c548:	dd401a04 	addi	r21,sp,104
    c54c:	9006d0fa 	srli	r3,r18,3
    c550:	9808977a 	slli	r4,r19,29
    c554:	9826d0fa 	srli	r19,r19,3
    c558:	948001cc 	andi	r18,r18,7
    c55c:	90800c04 	addi	r2,r18,48
    c560:	ad7fffc4 	addi	r21,r21,-1
    c564:	20e4b03a 	or	r18,r4,r3
    c568:	a8800005 	stb	r2,0(r21)
    c56c:	94c6b03a 	or	r3,r18,r19
    c570:	183ff61e 	bne	r3,zero,c54c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c54c>
    c574:	a0c0004c 	andi	r3,r20,1
    c578:	18005926 	beq	r3,zero,c6e0 <___vfiprintf_internal_r+0x87c>
    c57c:	10803fcc 	andi	r2,r2,255
    c580:	1080201c 	xori	r2,r2,128
    c584:	10bfe004 	addi	r2,r2,-128
    c588:	00c00c04 	movi	r3,48
    c58c:	10c05426 	beq	r2,r3,c6e0 <___vfiprintf_internal_r+0x87c>
    c590:	da801e17 	ldw	r10,120(sp)
    c594:	a8bfffc4 	addi	r2,r21,-1
    c598:	a8ffffc5 	stb	r3,-1(r21)
    c59c:	50a7c83a 	sub	r19,r10,r2
    c5a0:	102b883a 	mov	r21,r2
    c5a4:	003f2f06 	br	c264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c264>
    c5a8:	21003fcc 	andi	r4,r4,255
    c5ac:	2003421e 	bne	r4,zero,d2b8 <___vfiprintf_internal_r+0x1454>
    c5b0:	008000b4 	movhi	r2,2
    c5b4:	10ae6704 	addi	r2,r2,-18020
    c5b8:	d8802615 	stw	r2,152(sp)
    c5bc:	a080080c 	andi	r2,r20,32
    c5c0:	1000aa26 	beq	r2,zero,c86c <___vfiprintf_internal_r+0xa08>
    c5c4:	da802217 	ldw	r10,136(sp)
    c5c8:	54800017 	ldw	r18,0(r10)
    c5cc:	54c00117 	ldw	r19,4(r10)
    c5d0:	52800204 	addi	r10,r10,8
    c5d4:	da802215 	stw	r10,136(sp)
    c5d8:	a080004c 	andi	r2,r20,1
    c5dc:	1001d226 	beq	r2,zero,cd28 <___vfiprintf_internal_r+0xec4>
    c5e0:	94c4b03a 	or	r2,r18,r19
    c5e4:	1002351e 	bne	r2,zero,cebc <___vfiprintf_internal_r+0x1058>
    c5e8:	d8001d85 	stb	zero,118(sp)
    c5ec:	48022216 	blt	r9,zero,ce78 <___vfiprintf_internal_r+0x1014>
    c5f0:	00bfdfc4 	movi	r2,-129
    c5f4:	a0a8703a 	and	r20,r20,r2
    c5f8:	003f1506 	br	c250 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c250>
    c5fc:	da802217 	ldw	r10,136(sp)
    c600:	04800044 	movi	r18,1
    c604:	d8001d85 	stb	zero,118(sp)
    c608:	50800017 	ldw	r2,0(r10)
    c60c:	52800104 	addi	r10,r10,4
    c610:	da802215 	stw	r10,136(sp)
    c614:	d8801005 	stb	r2,64(sp)
    c618:	9027883a 	mov	r19,r18
    c61c:	dd401004 	addi	r21,sp,64
    c620:	0013883a 	mov	r9,zero
    c624:	003f1706 	br	c284 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c284>
    c628:	21003fcc 	andi	r4,r4,255
    c62c:	2003201e 	bne	r4,zero,d2b0 <___vfiprintf_internal_r+0x144c>
    c630:	a080080c 	andi	r2,r20,32
    c634:	10004b26 	beq	r2,zero,c764 <___vfiprintf_internal_r+0x900>
    c638:	da802217 	ldw	r10,136(sp)
    c63c:	50800117 	ldw	r2,4(r10)
    c640:	54800017 	ldw	r18,0(r10)
    c644:	52800204 	addi	r10,r10,8
    c648:	da802215 	stw	r10,136(sp)
    c64c:	1027883a 	mov	r19,r2
    c650:	10022c16 	blt	r2,zero,cf04 <___vfiprintf_internal_r+0x10a0>
    c654:	df001d83 	ldbu	fp,118(sp)
    c658:	48007216 	blt	r9,zero,c824 <___vfiprintf_internal_r+0x9c0>
    c65c:	00ffdfc4 	movi	r3,-129
    c660:	94c4b03a 	or	r2,r18,r19
    c664:	a0e8703a 	and	r20,r20,r3
    c668:	1000cc26 	beq	r2,zero,c99c <___vfiprintf_internal_r+0xb38>
    c66c:	98021026 	beq	r19,zero,ceb0 <___vfiprintf_internal_r+0x104c>
    c670:	dc402415 	stw	r17,144(sp)
    c674:	dc002515 	stw	r16,148(sp)
    c678:	9823883a 	mov	r17,r19
    c67c:	9021883a 	mov	r16,r18
    c680:	dd401a04 	addi	r21,sp,104
    c684:	4825883a 	mov	r18,r9
    c688:	4027883a 	mov	r19,r8
    c68c:	8009883a 	mov	r4,r16
    c690:	880b883a 	mov	r5,r17
    c694:	01800284 	movi	r6,10
    c698:	000f883a 	mov	r7,zero
    c69c:	000edc00 	call	edc0 <__umoddi3>
    c6a0:	10800c04 	addi	r2,r2,48
    c6a4:	ad7fffc4 	addi	r21,r21,-1
    c6a8:	8009883a 	mov	r4,r16
    c6ac:	880b883a 	mov	r5,r17
    c6b0:	a8800005 	stb	r2,0(r21)
    c6b4:	01800284 	movi	r6,10
    c6b8:	000f883a 	mov	r7,zero
    c6bc:	000e8480 	call	e848 <__udivdi3>
    c6c0:	1021883a 	mov	r16,r2
    c6c4:	10c4b03a 	or	r2,r2,r3
    c6c8:	1823883a 	mov	r17,r3
    c6cc:	103fef1e 	bne	r2,zero,c68c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c68c>
    c6d0:	dc402417 	ldw	r17,144(sp)
    c6d4:	dc002517 	ldw	r16,148(sp)
    c6d8:	9013883a 	mov	r9,r18
    c6dc:	9811883a 	mov	r8,r19
    c6e0:	da801e17 	ldw	r10,120(sp)
    c6e4:	5567c83a 	sub	r19,r10,r21
    c6e8:	003ede06 	br	c264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c264>
    c6ec:	38803fcc 	andi	r2,r7,255
    c6f0:	1080201c 	xori	r2,r2,128
    c6f4:	10bfe004 	addi	r2,r2,-128
    c6f8:	1002371e 	bne	r2,zero,cfd8 <___vfiprintf_internal_r+0x1174>
    c6fc:	01000044 	movi	r4,1
    c700:	01c00804 	movi	r7,32
    c704:	80c00007 	ldb	r3,0(r16)
    c708:	003e3506 	br	bfe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe0>
    c70c:	a5000054 	ori	r20,r20,1
    c710:	80c00007 	ldb	r3,0(r16)
    c714:	003e3206 	br	bfe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe0>
    c718:	a5002014 	ori	r20,r20,128
    c71c:	80c00007 	ldb	r3,0(r16)
    c720:	003e2f06 	br	bfe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe0>
    c724:	8015883a 	mov	r10,r16
    c728:	0023883a 	mov	r17,zero
    c72c:	18bff404 	addi	r2,r3,-48
    c730:	50c00007 	ldb	r3,0(r10)
    c734:	8c4002a4 	muli	r17,r17,10
    c738:	84000044 	addi	r16,r16,1
    c73c:	8015883a 	mov	r10,r16
    c740:	1463883a 	add	r17,r2,r17
    c744:	18bff404 	addi	r2,r3,-48
    c748:	30bff92e 	bgeu	r6,r2,c730 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c730>
    c74c:	003e2506 	br	bfe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe4>
    c750:	21003fcc 	andi	r4,r4,255
    c754:	2002d41e 	bne	r4,zero,d2a8 <___vfiprintf_internal_r+0x1444>
    c758:	a5000414 	ori	r20,r20,16
    c75c:	a080080c 	andi	r2,r20,32
    c760:	103fb51e 	bne	r2,zero,c638 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c638>
    c764:	a080040c 	andi	r2,r20,16
    c768:	1001f826 	beq	r2,zero,cf4c <___vfiprintf_internal_r+0x10e8>
    c76c:	da802217 	ldw	r10,136(sp)
    c770:	54800017 	ldw	r18,0(r10)
    c774:	52800104 	addi	r10,r10,4
    c778:	da802215 	stw	r10,136(sp)
    c77c:	9027d7fa 	srai	r19,r18,31
    c780:	9805883a 	mov	r2,r19
    c784:	003fb206 	br	c650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c650>
    c788:	21003fcc 	andi	r4,r4,255
    c78c:	2002c41e 	bne	r4,zero,d2a0 <___vfiprintf_internal_r+0x143c>
    c790:	a5000414 	ori	r20,r20,16
    c794:	a080080c 	andi	r2,r20,32
    c798:	103f5f1e 	bne	r2,zero,c518 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c518>
    c79c:	a080040c 	andi	r2,r20,16
    c7a0:	10020f26 	beq	r2,zero,cfe0 <___vfiprintf_internal_r+0x117c>
    c7a4:	da802217 	ldw	r10,136(sp)
    c7a8:	d8001d85 	stb	zero,118(sp)
    c7ac:	0027883a 	mov	r19,zero
    c7b0:	50800104 	addi	r2,r10,4
    c7b4:	54800017 	ldw	r18,0(r10)
    c7b8:	48021116 	blt	r9,zero,d000 <___vfiprintf_internal_r+0x119c>
    c7bc:	00ffdfc4 	movi	r3,-129
    c7c0:	d8802215 	stw	r2,136(sp)
    c7c4:	a0e8703a 	and	r20,r20,r3
    c7c8:	903f5e1e 	bne	r18,zero,c544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c544>
    c7cc:	0039883a 	mov	fp,zero
    c7d0:	4802a626 	beq	r9,zero,d26c <___vfiprintf_internal_r+0x1408>
    c7d4:	0025883a 	mov	r18,zero
    c7d8:	0027883a 	mov	r19,zero
    c7dc:	003f5a06 	br	c548 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c548>
    c7e0:	21003fcc 	andi	r4,r4,255
    c7e4:	20029f1e 	bne	r4,zero,d264 <___vfiprintf_internal_r+0x1400>
    c7e8:	a5000414 	ori	r20,r20,16
    c7ec:	a080080c 	andi	r2,r20,32
    c7f0:	10005e1e 	bne	r2,zero,c96c <___vfiprintf_internal_r+0xb08>
    c7f4:	a080040c 	andi	r2,r20,16
    c7f8:	1001a21e 	bne	r2,zero,ce84 <___vfiprintf_internal_r+0x1020>
    c7fc:	a080100c 	andi	r2,r20,64
    c800:	d8001d85 	stb	zero,118(sp)
    c804:	da802217 	ldw	r10,136(sp)
    c808:	1002231e 	bne	r2,zero,d098 <___vfiprintf_internal_r+0x1234>
    c80c:	50800104 	addi	r2,r10,4
    c810:	54800017 	ldw	r18,0(r10)
    c814:	0027883a 	mov	r19,zero
    c818:	4801a00e 	bge	r9,zero,ce9c <___vfiprintf_internal_r+0x1038>
    c81c:	d8802215 	stw	r2,136(sp)
    c820:	0039883a 	mov	fp,zero
    c824:	94c4b03a 	or	r2,r18,r19
    c828:	103f901e 	bne	r2,zero,c66c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c66c>
    c82c:	00800044 	movi	r2,1
    c830:	10803fcc 	andi	r2,r2,255
    c834:	00c00044 	movi	r3,1
    c838:	10c05926 	beq	r2,r3,c9a0 <___vfiprintf_internal_r+0xb3c>
    c83c:	00c00084 	movi	r3,2
    c840:	10ffe41e 	bne	r2,r3,c7d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c7d4>
    c844:	0025883a 	mov	r18,zero
    c848:	0027883a 	mov	r19,zero
    c84c:	00013d06 	br	cd44 <___vfiprintf_internal_r+0xee0>
    c850:	21003fcc 	andi	r4,r4,255
    c854:	2002811e 	bne	r4,zero,d25c <___vfiprintf_internal_r+0x13f8>
    c858:	008000b4 	movhi	r2,2
    c85c:	10ae6204 	addi	r2,r2,-18040
    c860:	d8802615 	stw	r2,152(sp)
    c864:	a080080c 	andi	r2,r20,32
    c868:	103f561e 	bne	r2,zero,c5c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5c4>
    c86c:	a080040c 	andi	r2,r20,16
    c870:	1001d126 	beq	r2,zero,cfb8 <___vfiprintf_internal_r+0x1154>
    c874:	da802217 	ldw	r10,136(sp)
    c878:	0027883a 	mov	r19,zero
    c87c:	54800017 	ldw	r18,0(r10)
    c880:	52800104 	addi	r10,r10,4
    c884:	da802215 	stw	r10,136(sp)
    c888:	003f5306 	br	c5d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5d8>
    c88c:	da802217 	ldw	r10,136(sp)
    c890:	d8001d85 	stb	zero,118(sp)
    c894:	55400017 	ldw	r21,0(r10)
    c898:	50c00104 	addi	r3,r10,4
    c89c:	a8024226 	beq	r21,zero,d1a8 <___vfiprintf_internal_r+0x1344>
    c8a0:	48021816 	blt	r9,zero,d104 <___vfiprintf_internal_r+0x12a0>
    c8a4:	480d883a 	mov	r6,r9
    c8a8:	000b883a 	mov	r5,zero
    c8ac:	a809883a 	mov	r4,r21
    c8b0:	d8c02a15 	stw	r3,168(sp)
    c8b4:	da002b15 	stw	r8,172(sp)
    c8b8:	da402c15 	stw	r9,176(sp)
    c8bc:	000a6880 	call	a688 <memchr>
    c8c0:	d8c02a17 	ldw	r3,168(sp)
    c8c4:	da002b17 	ldw	r8,172(sp)
    c8c8:	da402c17 	ldw	r9,176(sp)
    c8cc:	10024826 	beq	r2,zero,d1f0 <___vfiprintf_internal_r+0x138c>
    c8d0:	1567c83a 	sub	r19,r2,r21
    c8d4:	df001d83 	ldbu	fp,118(sp)
    c8d8:	d8c02215 	stw	r3,136(sp)
    c8dc:	0013883a 	mov	r9,zero
    c8e0:	003e6006 	br	c264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c264>
    c8e4:	21003fcc 	andi	r4,r4,255
    c8e8:	203fc026 	beq	r4,zero,c7ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c7ec>
    c8ec:	d9c01d85 	stb	r7,118(sp)
    c8f0:	003fbe06 	br	c7ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c7ec>
    c8f4:	da802217 	ldw	r10,136(sp)
    c8f8:	54400017 	ldw	r17,0(r10)
    c8fc:	50800104 	addi	r2,r10,4
    c900:	883e3b16 	blt	r17,zero,c1f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1f0>
    c904:	d8802215 	stw	r2,136(sp)
    c908:	80c00007 	ldb	r3,0(r16)
    c90c:	003db406 	br	bfe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe0>
    c910:	01000044 	movi	r4,1
    c914:	01c00ac4 	movi	r7,43
    c918:	80c00007 	ldb	r3,0(r16)
    c91c:	003db006 	br	bfe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe0>
    c920:	80c00007 	ldb	r3,0(r16)
    c924:	82800044 	addi	r10,r16,1
    c928:	1b423c26 	beq	r3,r13,d21c <___vfiprintf_internal_r+0x13b8>
    c92c:	18bff404 	addi	r2,r3,-48
    c930:	0013883a 	mov	r9,zero
    c934:	30822b36 	bltu	r6,r2,d1e4 <___vfiprintf_internal_r+0x1380>
    c938:	50c00007 	ldb	r3,0(r10)
    c93c:	4a4002a4 	muli	r9,r9,10
    c940:	54000044 	addi	r16,r10,1
    c944:	8015883a 	mov	r10,r16
    c948:	4893883a 	add	r9,r9,r2
    c94c:	18bff404 	addi	r2,r3,-48
    c950:	30bff92e 	bgeu	r6,r2,c938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c938>
    c954:	483da30e 	bge	r9,zero,bfe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe4>
    c958:	027fffc4 	movi	r9,-1
    c95c:	003da106 	br	bfe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe4>
    c960:	a5001014 	ori	r20,r20,64
    c964:	80c00007 	ldb	r3,0(r16)
    c968:	003d9d06 	br	bfe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe0>
    c96c:	da802217 	ldw	r10,136(sp)
    c970:	d8001d85 	stb	zero,118(sp)
    c974:	50c00204 	addi	r3,r10,8
    c978:	54800017 	ldw	r18,0(r10)
    c97c:	54c00117 	ldw	r19,4(r10)
    c980:	4801ca16 	blt	r9,zero,d0ac <___vfiprintf_internal_r+0x1248>
    c984:	013fdfc4 	movi	r4,-129
    c988:	94c4b03a 	or	r2,r18,r19
    c98c:	d8c02215 	stw	r3,136(sp)
    c990:	a128703a 	and	r20,r20,r4
    c994:	0039883a 	mov	fp,zero
    c998:	103f341e 	bne	r2,zero,c66c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c66c>
    c99c:	483e2e26 	beq	r9,zero,c258 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c258>
    c9a0:	0025883a 	mov	r18,zero
    c9a4:	94800c04 	addi	r18,r18,48
    c9a8:	dc8019c5 	stb	r18,103(sp)
    c9ac:	dcc02717 	ldw	r19,156(sp)
    c9b0:	dd4019c4 	addi	r21,sp,103
    c9b4:	003e2b06 	br	c264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c264>
    c9b8:	21003fcc 	andi	r4,r4,255
    c9bc:	2002361e 	bne	r4,zero,d298 <___vfiprintf_internal_r+0x1434>
    c9c0:	1801c126 	beq	r3,zero,d0c8 <___vfiprintf_internal_r+0x1264>
    c9c4:	04800044 	movi	r18,1
    c9c8:	d8c01005 	stb	r3,64(sp)
    c9cc:	d8001d85 	stb	zero,118(sp)
    c9d0:	9027883a 	mov	r19,r18
    c9d4:	dd401004 	addi	r21,sp,64
    c9d8:	003f1106 	br	c620 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c620>
    c9dc:	d9402117 	ldw	r5,132(sp)
    c9e0:	d9002017 	ldw	r4,128(sp)
    c9e4:	d9801a04 	addi	r6,sp,104
    c9e8:	d9c02b15 	stw	r7,172(sp)
    c9ec:	dbc02a15 	stw	r15,168(sp)
    c9f0:	000bd500 	call	bd50 <__sprint_r.part.0>
    c9f4:	d9c02b17 	ldw	r7,172(sp)
    c9f8:	dbc02a17 	ldw	r15,168(sp)
    c9fc:	10006d1e 	bne	r2,zero,cbb4 <___vfiprintf_internal_r+0xd50>
    ca00:	d9801b17 	ldw	r6,108(sp)
    ca04:	d8801c17 	ldw	r2,112(sp)
    ca08:	d811883a 	mov	r8,sp
    ca0c:	31400044 	addi	r5,r6,1
    ca10:	003e3306 	br	c2e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c2e0>
    ca14:	d9401b17 	ldw	r5,108(sp)
    ca18:	d8801c17 	ldw	r2,112(sp)
    ca1c:	29000044 	addi	r4,r5,1
    ca20:	d8c01d87 	ldb	r3,118(sp)
    ca24:	183e4d26 	beq	r3,zero,c35c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c35c>
    ca28:	00c00044 	movi	r3,1
    ca2c:	d9401d84 	addi	r5,sp,118
    ca30:	10c5883a 	add	r2,r2,r3
    ca34:	41400015 	stw	r5,0(r8)
    ca38:	40c00115 	stw	r3,4(r8)
    ca3c:	d8801c15 	stw	r2,112(sp)
    ca40:	d9001b15 	stw	r4,108(sp)
    ca44:	014001c4 	movi	r5,7
    ca48:	2900a90e 	bge	r5,r4,ccf0 <___vfiprintf_internal_r+0xe8c>
    ca4c:	1000da1e 	bne	r2,zero,cdb8 <___vfiprintf_internal_r+0xf54>
    ca50:	7000ab1e 	bne	r14,zero,cd00 <___vfiprintf_internal_r+0xe9c>
    ca54:	000b883a 	mov	r5,zero
    ca58:	1809883a 	mov	r4,r3
    ca5c:	d811883a 	mov	r8,sp
    ca60:	00c02004 	movi	r3,128
    ca64:	e0fe4d26 	beq	fp,r3,c39c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c39c>
    ca68:	4cf9c83a 	sub	fp,r9,r19
    ca6c:	073e7b0e 	bge	zero,fp,c45c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c45c>
    ca70:	01c00404 	movi	r7,16
    ca74:	3f01900e 	bge	r7,fp,d0b8 <___vfiprintf_internal_r+0x1254>
    ca78:	00c000b4 	movhi	r3,2
    ca7c:	18eec804 	addi	r3,r3,-17632
    ca80:	d8c02415 	stw	r3,144(sp)
    ca84:	034001c4 	movi	r13,7
    ca88:	00000506 	br	caa0 <___vfiprintf_internal_r+0xc3c>
    ca8c:	29000084 	addi	r4,r5,2
    ca90:	42000204 	addi	r8,r8,8
    ca94:	180b883a 	mov	r5,r3
    ca98:	e73ffc04 	addi	fp,fp,-16
    ca9c:	3f000d0e 	bge	r7,fp,cad4 <___vfiprintf_internal_r+0xc70>
    caa0:	10800404 	addi	r2,r2,16
    caa4:	28c00044 	addi	r3,r5,1
    caa8:	45c00015 	stw	r23,0(r8)
    caac:	41c00115 	stw	r7,4(r8)
    cab0:	d8801c15 	stw	r2,112(sp)
    cab4:	d8c01b15 	stw	r3,108(sp)
    cab8:	68fff40e 	bge	r13,r3,ca8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca8c>
    cabc:	1000101e 	bne	r2,zero,cb00 <___vfiprintf_internal_r+0xc9c>
    cac0:	e73ffc04 	addi	fp,fp,-16
    cac4:	01000044 	movi	r4,1
    cac8:	000b883a 	mov	r5,zero
    cacc:	d811883a 	mov	r8,sp
    cad0:	3f3ff316 	blt	r7,fp,caa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700caa0>
    cad4:	da802417 	ldw	r10,144(sp)
    cad8:	1705883a 	add	r2,r2,fp
    cadc:	47000115 	stw	fp,4(r8)
    cae0:	42800015 	stw	r10,0(r8)
    cae4:	d8801c15 	stw	r2,112(sp)
    cae8:	d9001b15 	stw	r4,108(sp)
    caec:	00c001c4 	movi	r3,7
    caf0:	19003616 	blt	r3,r4,cbcc <___vfiprintf_internal_r+0xd68>
    caf4:	42000204 	addi	r8,r8,8
    caf8:	21000044 	addi	r4,r4,1
    cafc:	003e5706 	br	c45c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c45c>
    cb00:	d9402117 	ldw	r5,132(sp)
    cb04:	d9002017 	ldw	r4,128(sp)
    cb08:	d9801a04 	addi	r6,sp,104
    cb0c:	d9c02b15 	stw	r7,172(sp)
    cb10:	db402a15 	stw	r13,168(sp)
    cb14:	000bd500 	call	bd50 <__sprint_r.part.0>
    cb18:	d9c02b17 	ldw	r7,172(sp)
    cb1c:	db402a17 	ldw	r13,168(sp)
    cb20:	1000241e 	bne	r2,zero,cbb4 <___vfiprintf_internal_r+0xd50>
    cb24:	d9401b17 	ldw	r5,108(sp)
    cb28:	d8801c17 	ldw	r2,112(sp)
    cb2c:	d811883a 	mov	r8,sp
    cb30:	29000044 	addi	r4,r5,1
    cb34:	003fd806 	br	ca98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca98>
    cb38:	d9401b17 	ldw	r5,108(sp)
    cb3c:	00c000b4 	movhi	r3,2
    cb40:	18eecc04 	addi	r3,r3,-17616
    cb44:	d8c02415 	stw	r3,144(sp)
    cb48:	29400044 	addi	r5,r5,1
    cb4c:	d8c02417 	ldw	r3,144(sp)
    cb50:	14c5883a 	add	r2,r2,r19
    cb54:	44c00115 	stw	r19,4(r8)
    cb58:	40c00015 	stw	r3,0(r8)
    cb5c:	d8801c15 	stw	r2,112(sp)
    cb60:	d9401b15 	stw	r5,108(sp)
    cb64:	00c001c4 	movi	r3,7
    cb68:	1940070e 	bge	r3,r5,cb88 <___vfiprintf_internal_r+0xd24>
    cb6c:	103e4826 	beq	r2,zero,c490 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c490>
    cb70:	d9402117 	ldw	r5,132(sp)
    cb74:	d9002017 	ldw	r4,128(sp)
    cb78:	d9801a04 	addi	r6,sp,104
    cb7c:	000bd500 	call	bd50 <__sprint_r.part.0>
    cb80:	10000c1e 	bne	r2,zero,cbb4 <___vfiprintf_internal_r+0xd50>
    cb84:	d8801c17 	ldw	r2,112(sp)
    cb88:	8c80010e 	bge	r17,r18,cb90 <___vfiprintf_internal_r+0xd2c>
    cb8c:	9023883a 	mov	r17,r18
    cb90:	da802317 	ldw	r10,140(sp)
    cb94:	5455883a 	add	r10,r10,r17
    cb98:	da802315 	stw	r10,140(sp)
    cb9c:	103e4126 	beq	r2,zero,c4a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4a4>
    cba0:	d9402117 	ldw	r5,132(sp)
    cba4:	d9002017 	ldw	r4,128(sp)
    cba8:	d9801a04 	addi	r6,sp,104
    cbac:	000bd500 	call	bd50 <__sprint_r.part.0>
    cbb0:	103e3c26 	beq	r2,zero,c4a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4a4>
    cbb4:	dd002117 	ldw	r20,132(sp)
    cbb8:	a080030b 	ldhu	r2,12(r20)
    cbbc:	1080100c 	andi	r2,r2,64
    cbc0:	1001231e 	bne	r2,zero,d050 <___vfiprintf_internal_r+0x11ec>
    cbc4:	d8802317 	ldw	r2,140(sp)
    cbc8:	003d7b06 	br	c1b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1b8>
    cbcc:	1000991e 	bne	r2,zero,ce34 <___vfiprintf_internal_r+0xfd0>
    cbd0:	00c00044 	movi	r3,1
    cbd4:	9805883a 	mov	r2,r19
    cbd8:	dd400015 	stw	r21,0(sp)
    cbdc:	dcc00115 	stw	r19,4(sp)
    cbe0:	dcc01c15 	stw	r19,112(sp)
    cbe4:	d8c01b15 	stw	r3,108(sp)
    cbe8:	d811883a 	mov	r8,sp
    cbec:	42000204 	addi	r8,r8,8
    cbf0:	a2c0010c 	andi	r11,r20,4
    cbf4:	583fe426 	beq	r11,zero,cb88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb88>
    cbf8:	8ca7c83a 	sub	r19,r17,r18
    cbfc:	04ffe20e 	bge	zero,r19,cb88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb88>
    cc00:	01c00404 	movi	r7,16
    cc04:	3cffcc0e 	bge	r7,r19,cb38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb38>
    cc08:	028000b4 	movhi	r10,2
    cc0c:	52aecc04 	addi	r10,r10,-17616
    cc10:	d9001b17 	ldw	r4,108(sp)
    cc14:	da802415 	stw	r10,144(sp)
    cc18:	382b883a 	mov	r21,r7
    cc1c:	050001c4 	movi	r20,7
    cc20:	df002017 	ldw	fp,128(sp)
    cc24:	00000506 	br	cc3c <___vfiprintf_internal_r+0xdd8>
    cc28:	21400084 	addi	r5,r4,2
    cc2c:	42000204 	addi	r8,r8,8
    cc30:	1809883a 	mov	r4,r3
    cc34:	9cfffc04 	addi	r19,r19,-16
    cc38:	acffc40e 	bge	r21,r19,cb4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb4c>
    cc3c:	10800404 	addi	r2,r2,16
    cc40:	20c00044 	addi	r3,r4,1
    cc44:	45800015 	stw	r22,0(r8)
    cc48:	45400115 	stw	r21,4(r8)
    cc4c:	d8801c15 	stw	r2,112(sp)
    cc50:	d8c01b15 	stw	r3,108(sp)
    cc54:	a0fff40e 	bge	r20,r3,cc28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc28>
    cc58:	1000041e 	bne	r2,zero,cc6c <___vfiprintf_internal_r+0xe08>
    cc5c:	01400044 	movi	r5,1
    cc60:	0009883a 	mov	r4,zero
    cc64:	d811883a 	mov	r8,sp
    cc68:	003ff206 	br	cc34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc34>
    cc6c:	d9402117 	ldw	r5,132(sp)
    cc70:	d9801a04 	addi	r6,sp,104
    cc74:	e009883a 	mov	r4,fp
    cc78:	000bd500 	call	bd50 <__sprint_r.part.0>
    cc7c:	103fcd1e 	bne	r2,zero,cbb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbb4>
    cc80:	d9001b17 	ldw	r4,108(sp)
    cc84:	d8801c17 	ldw	r2,112(sp)
    cc88:	d811883a 	mov	r8,sp
    cc8c:	21400044 	addi	r5,r4,1
    cc90:	003fe806 	br	cc34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc34>
    cc94:	d9402117 	ldw	r5,132(sp)
    cc98:	d9002017 	ldw	r4,128(sp)
    cc9c:	d9801a04 	addi	r6,sp,104
    cca0:	d9c02b15 	stw	r7,172(sp)
    cca4:	db402a15 	stw	r13,168(sp)
    cca8:	000bd500 	call	bd50 <__sprint_r.part.0>
    ccac:	d9c02b17 	ldw	r7,172(sp)
    ccb0:	db402a17 	ldw	r13,168(sp)
    ccb4:	103fbf1e 	bne	r2,zero,cbb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbb4>
    ccb8:	d9401b17 	ldw	r5,108(sp)
    ccbc:	d8801c17 	ldw	r2,112(sp)
    ccc0:	d811883a 	mov	r8,sp
    ccc4:	29800044 	addi	r6,r5,1
    ccc8:	003dc406 	br	c3dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3dc>
    cccc:	1000d21e 	bne	r2,zero,d018 <___vfiprintf_internal_r+0x11b4>
    ccd0:	d8c01d87 	ldb	r3,118(sp)
    ccd4:	18009526 	beq	r3,zero,cf2c <___vfiprintf_internal_r+0x10c8>
    ccd8:	00800044 	movi	r2,1
    ccdc:	d8c01d84 	addi	r3,sp,118
    cce0:	1009883a 	mov	r4,r2
    cce4:	d8c00015 	stw	r3,0(sp)
    cce8:	d8800115 	stw	r2,4(sp)
    ccec:	d811883a 	mov	r8,sp
    ccf0:	200b883a 	mov	r5,r4
    ccf4:	42000204 	addi	r8,r8,8
    ccf8:	21000044 	addi	r4,r4,1
    ccfc:	003d9706 	br	c35c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c35c>
    cd00:	d9001d04 	addi	r4,sp,116
    cd04:	00800084 	movi	r2,2
    cd08:	d9000015 	stw	r4,0(sp)
    cd0c:	d8800115 	stw	r2,4(sp)
    cd10:	1809883a 	mov	r4,r3
    cd14:	d811883a 	mov	r8,sp
    cd18:	200b883a 	mov	r5,r4
    cd1c:	42000204 	addi	r8,r8,8
    cd20:	21000044 	addi	r4,r4,1
    cd24:	003f4e06 	br	ca60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca60>
    cd28:	d8001d85 	stb	zero,118(sp)
    cd2c:	48005016 	blt	r9,zero,ce70 <___vfiprintf_internal_r+0x100c>
    cd30:	00ffdfc4 	movi	r3,-129
    cd34:	94c4b03a 	or	r2,r18,r19
    cd38:	a0e8703a 	and	r20,r20,r3
    cd3c:	103d4426 	beq	r2,zero,c250 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c250>
    cd40:	0039883a 	mov	fp,zero
    cd44:	d9002617 	ldw	r4,152(sp)
    cd48:	dd401a04 	addi	r21,sp,104
    cd4c:	908003cc 	andi	r2,r18,15
    cd50:	9806973a 	slli	r3,r19,28
    cd54:	2085883a 	add	r2,r4,r2
    cd58:	9024d13a 	srli	r18,r18,4
    cd5c:	10800003 	ldbu	r2,0(r2)
    cd60:	9826d13a 	srli	r19,r19,4
    cd64:	ad7fffc4 	addi	r21,r21,-1
    cd68:	1ca4b03a 	or	r18,r3,r18
    cd6c:	a8800005 	stb	r2,0(r21)
    cd70:	94c4b03a 	or	r2,r18,r19
    cd74:	103ff51e 	bne	r2,zero,cd4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd4c>
    cd78:	003e5906 	br	c6e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c6e0>
    cd7c:	d9402117 	ldw	r5,132(sp)
    cd80:	d9002017 	ldw	r4,128(sp)
    cd84:	d9801a04 	addi	r6,sp,104
    cd88:	000bd500 	call	bd50 <__sprint_r.part.0>
    cd8c:	103f891e 	bne	r2,zero,cbb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbb4>
    cd90:	d8801c17 	ldw	r2,112(sp)
    cd94:	d811883a 	mov	r8,sp
    cd98:	003f9506 	br	cbf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbf0>
    cd9c:	d9402117 	ldw	r5,132(sp)
    cda0:	d9002017 	ldw	r4,128(sp)
    cda4:	d9801a04 	addi	r6,sp,104
    cda8:	000bd500 	call	bd50 <__sprint_r.part.0>
    cdac:	103f811e 	bne	r2,zero,cbb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbb4>
    cdb0:	d811883a 	mov	r8,sp
    cdb4:	003ced06 	br	c16c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c16c>
    cdb8:	d9402117 	ldw	r5,132(sp)
    cdbc:	d9002017 	ldw	r4,128(sp)
    cdc0:	d9801a04 	addi	r6,sp,104
    cdc4:	da402c15 	stw	r9,176(sp)
    cdc8:	db802a15 	stw	r14,168(sp)
    cdcc:	000bd500 	call	bd50 <__sprint_r.part.0>
    cdd0:	da402c17 	ldw	r9,176(sp)
    cdd4:	db802a17 	ldw	r14,168(sp)
    cdd8:	103f761e 	bne	r2,zero,cbb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbb4>
    cddc:	d9401b17 	ldw	r5,108(sp)
    cde0:	d8801c17 	ldw	r2,112(sp)
    cde4:	d811883a 	mov	r8,sp
    cde8:	29000044 	addi	r4,r5,1
    cdec:	003d5b06 	br	c35c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c35c>
    cdf0:	d9402117 	ldw	r5,132(sp)
    cdf4:	d9002017 	ldw	r4,128(sp)
    cdf8:	d9801a04 	addi	r6,sp,104
    cdfc:	da402c15 	stw	r9,176(sp)
    ce00:	000bd500 	call	bd50 <__sprint_r.part.0>
    ce04:	da402c17 	ldw	r9,176(sp)
    ce08:	103f6a1e 	bne	r2,zero,cbb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbb4>
    ce0c:	d9401b17 	ldw	r5,108(sp)
    ce10:	d8801c17 	ldw	r2,112(sp)
    ce14:	d811883a 	mov	r8,sp
    ce18:	29000044 	addi	r4,r5,1
    ce1c:	003f1006 	br	ca60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca60>
    ce20:	1000c31e 	bne	r2,zero,d130 <___vfiprintf_internal_r+0x12cc>
    ce24:	01000044 	movi	r4,1
    ce28:	000b883a 	mov	r5,zero
    ce2c:	d811883a 	mov	r8,sp
    ce30:	003f0d06 	br	ca68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca68>
    ce34:	d9402117 	ldw	r5,132(sp)
    ce38:	d9002017 	ldw	r4,128(sp)
    ce3c:	d9801a04 	addi	r6,sp,104
    ce40:	000bd500 	call	bd50 <__sprint_r.part.0>
    ce44:	103f5b1e 	bne	r2,zero,cbb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbb4>
    ce48:	d9001b17 	ldw	r4,108(sp)
    ce4c:	d8801c17 	ldw	r2,112(sp)
    ce50:	d811883a 	mov	r8,sp
    ce54:	21000044 	addi	r4,r4,1
    ce58:	003d8006 	br	c45c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c45c>
    ce5c:	010000b4 	movhi	r4,2
    ce60:	212e6704 	addi	r4,r4,-18020
    ce64:	d9002615 	stw	r4,152(sp)
    ce68:	d8c02215 	stw	r3,136(sp)
    ce6c:	1029883a 	mov	r20,r2
    ce70:	94c4b03a 	or	r2,r18,r19
    ce74:	103fb21e 	bne	r2,zero,cd40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd40>
    ce78:	0039883a 	mov	fp,zero
    ce7c:	00800084 	movi	r2,2
    ce80:	003e6b06 	br	c830 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c830>
    ce84:	da802217 	ldw	r10,136(sp)
    ce88:	d8001d85 	stb	zero,118(sp)
    ce8c:	0027883a 	mov	r19,zero
    ce90:	50800104 	addi	r2,r10,4
    ce94:	54800017 	ldw	r18,0(r10)
    ce98:	483e6016 	blt	r9,zero,c81c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c81c>
    ce9c:	00ffdfc4 	movi	r3,-129
    cea0:	d8802215 	stw	r2,136(sp)
    cea4:	a0e8703a 	and	r20,r20,r3
    cea8:	0039883a 	mov	fp,zero
    ceac:	903ebb26 	beq	r18,zero,c99c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c99c>
    ceb0:	00800244 	movi	r2,9
    ceb4:	14bdee36 	bltu	r2,r18,c670 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c670>
    ceb8:	003eba06 	br	c9a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9a4>
    cebc:	00800c04 	movi	r2,48
    cec0:	d8c01d45 	stb	r3,117(sp)
    cec4:	d8801d05 	stb	r2,116(sp)
    cec8:	d8001d85 	stb	zero,118(sp)
    cecc:	a0c00094 	ori	r3,r20,2
    ced0:	4800a916 	blt	r9,zero,d178 <___vfiprintf_internal_r+0x1314>
    ced4:	00bfdfc4 	movi	r2,-129
    ced8:	a096703a 	and	r11,r20,r2
    cedc:	5d000094 	ori	r20,r11,2
    cee0:	0039883a 	mov	fp,zero
    cee4:	003f9706 	br	cd44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd44>
    cee8:	8025883a 	mov	r18,r16
    ceec:	003c2e06 	br	bfa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfa8>
    cef0:	008000b4 	movhi	r2,2
    cef4:	10ae6704 	addi	r2,r2,-18020
    cef8:	0039883a 	mov	fp,zero
    cefc:	d8802615 	stw	r2,152(sp)
    cf00:	003f9006 	br	cd44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd44>
    cf04:	04a5c83a 	sub	r18,zero,r18
    cf08:	07000b44 	movi	fp,45
    cf0c:	9004c03a 	cmpne	r2,r18,zero
    cf10:	04e7c83a 	sub	r19,zero,r19
    cf14:	df001d85 	stb	fp,118(sp)
    cf18:	98a7c83a 	sub	r19,r19,r2
    cf1c:	48009f16 	blt	r9,zero,d19c <___vfiprintf_internal_r+0x1338>
    cf20:	00bfdfc4 	movi	r2,-129
    cf24:	a0a8703a 	and	r20,r20,r2
    cf28:	003dd006 	br	c66c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c66c>
    cf2c:	70004c26 	beq	r14,zero,d060 <___vfiprintf_internal_r+0x11fc>
    cf30:	00800084 	movi	r2,2
    cf34:	d8c01d04 	addi	r3,sp,116
    cf38:	d8c00015 	stw	r3,0(sp)
    cf3c:	d8800115 	stw	r2,4(sp)
    cf40:	01000044 	movi	r4,1
    cf44:	d811883a 	mov	r8,sp
    cf48:	003f7306 	br	cd18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd18>
    cf4c:	a080100c 	andi	r2,r20,64
    cf50:	da802217 	ldw	r10,136(sp)
    cf54:	103e0626 	beq	r2,zero,c770 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c770>
    cf58:	5480000f 	ldh	r18,0(r10)
    cf5c:	52800104 	addi	r10,r10,4
    cf60:	da802215 	stw	r10,136(sp)
    cf64:	9027d7fa 	srai	r19,r18,31
    cf68:	9805883a 	mov	r2,r19
    cf6c:	003db806 	br	c650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c650>
    cf70:	a080040c 	andi	r2,r20,16
    cf74:	1000091e 	bne	r2,zero,cf9c <___vfiprintf_internal_r+0x1138>
    cf78:	a2c0100c 	andi	r11,r20,64
    cf7c:	58000726 	beq	r11,zero,cf9c <___vfiprintf_internal_r+0x1138>
    cf80:	da802217 	ldw	r10,136(sp)
    cf84:	50800017 	ldw	r2,0(r10)
    cf88:	52800104 	addi	r10,r10,4
    cf8c:	da802215 	stw	r10,136(sp)
    cf90:	da802317 	ldw	r10,140(sp)
    cf94:	1280000d 	sth	r10,0(r2)
    cf98:	003be706 	br	bf38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf38>
    cf9c:	da802217 	ldw	r10,136(sp)
    cfa0:	50800017 	ldw	r2,0(r10)
    cfa4:	52800104 	addi	r10,r10,4
    cfa8:	da802215 	stw	r10,136(sp)
    cfac:	da802317 	ldw	r10,140(sp)
    cfb0:	12800015 	stw	r10,0(r2)
    cfb4:	003be006 	br	bf38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf38>
    cfb8:	a080100c 	andi	r2,r20,64
    cfbc:	da802217 	ldw	r10,136(sp)
    cfc0:	10003026 	beq	r2,zero,d084 <___vfiprintf_internal_r+0x1220>
    cfc4:	5480000b 	ldhu	r18,0(r10)
    cfc8:	52800104 	addi	r10,r10,4
    cfcc:	0027883a 	mov	r19,zero
    cfd0:	da802215 	stw	r10,136(sp)
    cfd4:	003d8006 	br	c5d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5d8>
    cfd8:	80c00007 	ldb	r3,0(r16)
    cfdc:	003c0006 	br	bfe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe0>
    cfe0:	a080100c 	andi	r2,r20,64
    cfe4:	d8001d85 	stb	zero,118(sp)
    cfe8:	da802217 	ldw	r10,136(sp)
    cfec:	1000201e 	bne	r2,zero,d070 <___vfiprintf_internal_r+0x120c>
    cff0:	50800104 	addi	r2,r10,4
    cff4:	54800017 	ldw	r18,0(r10)
    cff8:	0027883a 	mov	r19,zero
    cffc:	483def0e 	bge	r9,zero,c7bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c7bc>
    d000:	94c6b03a 	or	r3,r18,r19
    d004:	d8802215 	stw	r2,136(sp)
    d008:	183d4e1e 	bne	r3,zero,c544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c544>
    d00c:	0039883a 	mov	fp,zero
    d010:	0005883a 	mov	r2,zero
    d014:	003e0606 	br	c830 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c830>
    d018:	d9402117 	ldw	r5,132(sp)
    d01c:	d9002017 	ldw	r4,128(sp)
    d020:	d9801a04 	addi	r6,sp,104
    d024:	da402c15 	stw	r9,176(sp)
    d028:	db802a15 	stw	r14,168(sp)
    d02c:	000bd500 	call	bd50 <__sprint_r.part.0>
    d030:	da402c17 	ldw	r9,176(sp)
    d034:	db802a17 	ldw	r14,168(sp)
    d038:	103ede1e 	bne	r2,zero,cbb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbb4>
    d03c:	d9401b17 	ldw	r5,108(sp)
    d040:	d8801c17 	ldw	r2,112(sp)
    d044:	d811883a 	mov	r8,sp
    d048:	29000044 	addi	r4,r5,1
    d04c:	003e7406 	br	ca20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca20>
    d050:	00bfffc4 	movi	r2,-1
    d054:	003c5806 	br	c1b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1b8>
    d058:	d811883a 	mov	r8,sp
    d05c:	003ee806 	br	cc00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc00>
    d060:	000b883a 	mov	r5,zero
    d064:	01000044 	movi	r4,1
    d068:	d811883a 	mov	r8,sp
    d06c:	003e7c06 	br	ca60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca60>
    d070:	50800104 	addi	r2,r10,4
    d074:	5480000b 	ldhu	r18,0(r10)
    d078:	0027883a 	mov	r19,zero
    d07c:	483dcf0e 	bge	r9,zero,c7bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c7bc>
    d080:	003fdf06 	br	d000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d000>
    d084:	54800017 	ldw	r18,0(r10)
    d088:	52800104 	addi	r10,r10,4
    d08c:	0027883a 	mov	r19,zero
    d090:	da802215 	stw	r10,136(sp)
    d094:	003d5006 	br	c5d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5d8>
    d098:	50800104 	addi	r2,r10,4
    d09c:	5480000b 	ldhu	r18,0(r10)
    d0a0:	0027883a 	mov	r19,zero
    d0a4:	483f7d0e 	bge	r9,zero,ce9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce9c>
    d0a8:	003ddc06 	br	c81c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c81c>
    d0ac:	d8c02215 	stw	r3,136(sp)
    d0b0:	0039883a 	mov	fp,zero
    d0b4:	003ddb06 	br	c824 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c824>
    d0b8:	028000b4 	movhi	r10,2
    d0bc:	52aec804 	addi	r10,r10,-17632
    d0c0:	da802415 	stw	r10,144(sp)
    d0c4:	003e8306 	br	cad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cad4>
    d0c8:	d8801c17 	ldw	r2,112(sp)
    d0cc:	dd002117 	ldw	r20,132(sp)
    d0d0:	103eb926 	beq	r2,zero,cbb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbb8>
    d0d4:	d9002017 	ldw	r4,128(sp)
    d0d8:	d9801a04 	addi	r6,sp,104
    d0dc:	a00b883a 	mov	r5,r20
    d0e0:	000bd500 	call	bd50 <__sprint_r.part.0>
    d0e4:	003eb406 	br	cbb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbb8>
    d0e8:	80c00043 	ldbu	r3,1(r16)
    d0ec:	a5000814 	ori	r20,r20,32
    d0f0:	84000044 	addi	r16,r16,1
    d0f4:	18c03fcc 	andi	r3,r3,255
    d0f8:	18c0201c 	xori	r3,r3,128
    d0fc:	18ffe004 	addi	r3,r3,-128
    d100:	003bb706 	br	bfe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe0>
    d104:	a809883a 	mov	r4,r21
    d108:	d8c02a15 	stw	r3,168(sp)
    d10c:	da002b15 	stw	r8,172(sp)
    d110:	000bcb80 	call	bcb8 <strlen>
    d114:	d8c02a17 	ldw	r3,168(sp)
    d118:	1027883a 	mov	r19,r2
    d11c:	df001d83 	ldbu	fp,118(sp)
    d120:	d8c02215 	stw	r3,136(sp)
    d124:	0013883a 	mov	r9,zero
    d128:	da002b17 	ldw	r8,172(sp)
    d12c:	003c4d06 	br	c264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c264>
    d130:	d9402117 	ldw	r5,132(sp)
    d134:	d9002017 	ldw	r4,128(sp)
    d138:	d9801a04 	addi	r6,sp,104
    d13c:	da402c15 	stw	r9,176(sp)
    d140:	000bd500 	call	bd50 <__sprint_r.part.0>
    d144:	da402c17 	ldw	r9,176(sp)
    d148:	103e9a1e 	bne	r2,zero,cbb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbb4>
    d14c:	d9401b17 	ldw	r5,108(sp)
    d150:	d8801c17 	ldw	r2,112(sp)
    d154:	d811883a 	mov	r8,sp
    d158:	29000044 	addi	r4,r5,1
    d15c:	003e4206 	br	ca68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca68>
    d160:	d9401b17 	ldw	r5,108(sp)
    d164:	010000b4 	movhi	r4,2
    d168:	212ecc04 	addi	r4,r4,-17616
    d16c:	d9002415 	stw	r4,144(sp)
    d170:	29400044 	addi	r5,r5,1
    d174:	003c6d06 	br	c32c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c32c>
    d178:	0039883a 	mov	fp,zero
    d17c:	00800084 	movi	r2,2
    d180:	10803fcc 	andi	r2,r2,255
    d184:	01000044 	movi	r4,1
    d188:	11001e26 	beq	r2,r4,d204 <___vfiprintf_internal_r+0x13a0>
    d18c:	01000084 	movi	r4,2
    d190:	11001e1e 	bne	r2,r4,d20c <___vfiprintf_internal_r+0x13a8>
    d194:	1829883a 	mov	r20,r3
    d198:	003eea06 	br	cd44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd44>
    d19c:	a007883a 	mov	r3,r20
    d1a0:	00800044 	movi	r2,1
    d1a4:	003ff606 	br	d180 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d180>
    d1a8:	00800184 	movi	r2,6
    d1ac:	1240012e 	bgeu	r2,r9,d1b4 <___vfiprintf_internal_r+0x1350>
    d1b0:	1013883a 	mov	r9,r2
    d1b4:	4827883a 	mov	r19,r9
    d1b8:	4825883a 	mov	r18,r9
    d1bc:	48001516 	blt	r9,zero,d214 <___vfiprintf_internal_r+0x13b0>
    d1c0:	054000b4 	movhi	r21,2
    d1c4:	d8c02215 	stw	r3,136(sp)
    d1c8:	ad6e6c04 	addi	r21,r21,-18000
    d1cc:	003d1406 	br	c620 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c620>
    d1d0:	028000b4 	movhi	r10,2
    d1d4:	52aec804 	addi	r10,r10,-17632
    d1d8:	da802415 	stw	r10,144(sp)
    d1dc:	200d883a 	mov	r6,r4
    d1e0:	003c9106 	br	c428 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c428>
    d1e4:	5021883a 	mov	r16,r10
    d1e8:	0013883a 	mov	r9,zero
    d1ec:	003b7d06 	br	bfe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe4>
    d1f0:	4827883a 	mov	r19,r9
    d1f4:	df001d83 	ldbu	fp,118(sp)
    d1f8:	d8c02215 	stw	r3,136(sp)
    d1fc:	0013883a 	mov	r9,zero
    d200:	003c1806 	br	c264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c264>
    d204:	1829883a 	mov	r20,r3
    d208:	003d1806 	br	c66c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c66c>
    d20c:	1829883a 	mov	r20,r3
    d210:	003ccd06 	br	c548 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c548>
    d214:	0025883a 	mov	r18,zero
    d218:	003fe906 	br	d1c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d1c0>
    d21c:	d8802217 	ldw	r2,136(sp)
    d220:	80c00043 	ldbu	r3,1(r16)
    d224:	5021883a 	mov	r16,r10
    d228:	12400017 	ldw	r9,0(r2)
    d22c:	10800104 	addi	r2,r2,4
    d230:	d8802215 	stw	r2,136(sp)
    d234:	483faf0e 	bge	r9,zero,d0f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0f4>
    d238:	18c03fcc 	andi	r3,r3,255
    d23c:	18c0201c 	xori	r3,r3,128
    d240:	027fffc4 	movi	r9,-1
    d244:	18ffe004 	addi	r3,r3,-128
    d248:	003b6506 	br	bfe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfe0>
    d24c:	d9c01d85 	stb	r7,118(sp)
    d250:	003ca006 	br	c4d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4d4>
    d254:	d9c01d85 	stb	r7,118(sp)
    d258:	003cad06 	br	c510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c510>
    d25c:	d9c01d85 	stb	r7,118(sp)
    d260:	003d7d06 	br	c858 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c858>
    d264:	d9c01d85 	stb	r7,118(sp)
    d268:	003d5f06 	br	c7e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c7e8>
    d26c:	a080004c 	andi	r2,r20,1
    d270:	0039883a 	mov	fp,zero
    d274:	10000526 	beq	r2,zero,d28c <___vfiprintf_internal_r+0x1428>
    d278:	00800c04 	movi	r2,48
    d27c:	d88019c5 	stb	r2,103(sp)
    d280:	dcc02717 	ldw	r19,156(sp)
    d284:	dd4019c4 	addi	r21,sp,103
    d288:	003bf606 	br	c264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c264>
    d28c:	0027883a 	mov	r19,zero
    d290:	dd401a04 	addi	r21,sp,104
    d294:	003bf306 	br	c264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c264>
    d298:	d9c01d85 	stb	r7,118(sp)
    d29c:	003dc806 	br	c9c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9c0>
    d2a0:	d9c01d85 	stb	r7,118(sp)
    d2a4:	003d3a06 	br	c790 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c790>
    d2a8:	d9c01d85 	stb	r7,118(sp)
    d2ac:	003d2a06 	br	c758 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c758>
    d2b0:	d9c01d85 	stb	r7,118(sp)
    d2b4:	003cde06 	br	c630 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c630>
    d2b8:	d9c01d85 	stb	r7,118(sp)
    d2bc:	003cbc06 	br	c5b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5b0>

0000d2c0 <__vfiprintf_internal>:
    d2c0:	008000b4 	movhi	r2,2
    d2c4:	10b73804 	addi	r2,r2,-8992
    d2c8:	300f883a 	mov	r7,r6
    d2cc:	280d883a 	mov	r6,r5
    d2d0:	200b883a 	mov	r5,r4
    d2d4:	11000017 	ldw	r4,0(r2)
    d2d8:	000be641 	jmpi	be64 <___vfiprintf_internal_r>

0000d2dc <__sbprintf>:
    d2dc:	2880030b 	ldhu	r2,12(r5)
    d2e0:	2ac01917 	ldw	r11,100(r5)
    d2e4:	2a80038b 	ldhu	r10,14(r5)
    d2e8:	2a400717 	ldw	r9,28(r5)
    d2ec:	2a000917 	ldw	r8,36(r5)
    d2f0:	defee204 	addi	sp,sp,-1144
    d2f4:	00c10004 	movi	r3,1024
    d2f8:	dc011a15 	stw	r16,1128(sp)
    d2fc:	10bfff4c 	andi	r2,r2,65533
    d300:	2821883a 	mov	r16,r5
    d304:	d8cb883a 	add	r5,sp,r3
    d308:	dc811c15 	stw	r18,1136(sp)
    d30c:	dc411b15 	stw	r17,1132(sp)
    d310:	dfc11d15 	stw	ra,1140(sp)
    d314:	2025883a 	mov	r18,r4
    d318:	d881030d 	sth	r2,1036(sp)
    d31c:	dac11915 	stw	r11,1124(sp)
    d320:	da81038d 	sth	r10,1038(sp)
    d324:	da410715 	stw	r9,1052(sp)
    d328:	da010915 	stw	r8,1060(sp)
    d32c:	dec10015 	stw	sp,1024(sp)
    d330:	dec10415 	stw	sp,1040(sp)
    d334:	d8c10215 	stw	r3,1032(sp)
    d338:	d8c10515 	stw	r3,1044(sp)
    d33c:	d8010615 	stw	zero,1048(sp)
    d340:	000be640 	call	be64 <___vfiprintf_internal_r>
    d344:	1023883a 	mov	r17,r2
    d348:	10000416 	blt	r2,zero,d35c <__sbprintf+0x80>
    d34c:	d9410004 	addi	r5,sp,1024
    d350:	9009883a 	mov	r4,r18
    d354:	00091fc0 	call	91fc <_fflush_r>
    d358:	10000d1e 	bne	r2,zero,d390 <__sbprintf+0xb4>
    d35c:	d881030b 	ldhu	r2,1036(sp)
    d360:	1080100c 	andi	r2,r2,64
    d364:	10000326 	beq	r2,zero,d374 <__sbprintf+0x98>
    d368:	8080030b 	ldhu	r2,12(r16)
    d36c:	10801014 	ori	r2,r2,64
    d370:	8080030d 	sth	r2,12(r16)
    d374:	8805883a 	mov	r2,r17
    d378:	dfc11d17 	ldw	ra,1140(sp)
    d37c:	dc811c17 	ldw	r18,1136(sp)
    d380:	dc411b17 	ldw	r17,1132(sp)
    d384:	dc011a17 	ldw	r16,1128(sp)
    d388:	dec11e04 	addi	sp,sp,1144
    d38c:	f800283a 	ret
    d390:	047fffc4 	movi	r17,-1
    d394:	003ff106 	br	d35c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d35c>

0000d398 <_write_r>:
    d398:	defffd04 	addi	sp,sp,-12
    d39c:	2805883a 	mov	r2,r5
    d3a0:	dc000015 	stw	r16,0(sp)
    d3a4:	040000b4 	movhi	r16,2
    d3a8:	dc400115 	stw	r17,4(sp)
    d3ac:	300b883a 	mov	r5,r6
    d3b0:	843f4604 	addi	r16,r16,-744
    d3b4:	2023883a 	mov	r17,r4
    d3b8:	380d883a 	mov	r6,r7
    d3bc:	1009883a 	mov	r4,r2
    d3c0:	dfc00215 	stw	ra,8(sp)
    d3c4:	80000015 	stw	zero,0(r16)
    d3c8:	000fcd80 	call	fcd8 <write>
    d3cc:	00ffffc4 	movi	r3,-1
    d3d0:	10c00526 	beq	r2,r3,d3e8 <_write_r+0x50>
    d3d4:	dfc00217 	ldw	ra,8(sp)
    d3d8:	dc400117 	ldw	r17,4(sp)
    d3dc:	dc000017 	ldw	r16,0(sp)
    d3e0:	dec00304 	addi	sp,sp,12
    d3e4:	f800283a 	ret
    d3e8:	80c00017 	ldw	r3,0(r16)
    d3ec:	183ff926 	beq	r3,zero,d3d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3d4>
    d3f0:	88c00015 	stw	r3,0(r17)
    d3f4:	003ff706 	br	d3d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3d4>

0000d3f8 <_close_r>:
    d3f8:	defffd04 	addi	sp,sp,-12
    d3fc:	dc000015 	stw	r16,0(sp)
    d400:	040000b4 	movhi	r16,2
    d404:	dc400115 	stw	r17,4(sp)
    d408:	843f4604 	addi	r16,r16,-744
    d40c:	2023883a 	mov	r17,r4
    d410:	2809883a 	mov	r4,r5
    d414:	dfc00215 	stw	ra,8(sp)
    d418:	80000015 	stw	zero,0(r16)
    d41c:	000f4d00 	call	f4d0 <close>
    d420:	00ffffc4 	movi	r3,-1
    d424:	10c00526 	beq	r2,r3,d43c <_close_r+0x44>
    d428:	dfc00217 	ldw	ra,8(sp)
    d42c:	dc400117 	ldw	r17,4(sp)
    d430:	dc000017 	ldw	r16,0(sp)
    d434:	dec00304 	addi	sp,sp,12
    d438:	f800283a 	ret
    d43c:	80c00017 	ldw	r3,0(r16)
    d440:	183ff926 	beq	r3,zero,d428 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d428>
    d444:	88c00015 	stw	r3,0(r17)
    d448:	003ff706 	br	d428 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d428>

0000d44c <_calloc_r>:
    d44c:	298b383a 	mul	r5,r5,r6
    d450:	defffe04 	addi	sp,sp,-8
    d454:	dfc00115 	stw	ra,4(sp)
    d458:	dc000015 	stw	r16,0(sp)
    d45c:	0009e7c0 	call	9e7c <_malloc_r>
    d460:	10002926 	beq	r2,zero,d508 <_calloc_r+0xbc>
    d464:	11bfff17 	ldw	r6,-4(r2)
    d468:	1021883a 	mov	r16,r2
    d46c:	00bfff04 	movi	r2,-4
    d470:	308c703a 	and	r6,r6,r2
    d474:	00c00904 	movi	r3,36
    d478:	308d883a 	add	r6,r6,r2
    d47c:	19801636 	bltu	r3,r6,d4d8 <_calloc_r+0x8c>
    d480:	008004c4 	movi	r2,19
    d484:	11800b2e 	bgeu	r2,r6,d4b4 <_calloc_r+0x68>
    d488:	80000015 	stw	zero,0(r16)
    d48c:	80000115 	stw	zero,4(r16)
    d490:	008006c4 	movi	r2,27
    d494:	11801a2e 	bgeu	r2,r6,d500 <_calloc_r+0xb4>
    d498:	80000215 	stw	zero,8(r16)
    d49c:	80000315 	stw	zero,12(r16)
    d4a0:	30c0151e 	bne	r6,r3,d4f8 <_calloc_r+0xac>
    d4a4:	80000415 	stw	zero,16(r16)
    d4a8:	80800604 	addi	r2,r16,24
    d4ac:	80000515 	stw	zero,20(r16)
    d4b0:	00000106 	br	d4b8 <_calloc_r+0x6c>
    d4b4:	8005883a 	mov	r2,r16
    d4b8:	10000015 	stw	zero,0(r2)
    d4bc:	10000115 	stw	zero,4(r2)
    d4c0:	10000215 	stw	zero,8(r2)
    d4c4:	8005883a 	mov	r2,r16
    d4c8:	dfc00117 	ldw	ra,4(sp)
    d4cc:	dc000017 	ldw	r16,0(sp)
    d4d0:	dec00204 	addi	sp,sp,8
    d4d4:	f800283a 	ret
    d4d8:	000b883a 	mov	r5,zero
    d4dc:	8009883a 	mov	r4,r16
    d4e0:	000a8b40 	call	a8b4 <memset>
    d4e4:	8005883a 	mov	r2,r16
    d4e8:	dfc00117 	ldw	ra,4(sp)
    d4ec:	dc000017 	ldw	r16,0(sp)
    d4f0:	dec00204 	addi	sp,sp,8
    d4f4:	f800283a 	ret
    d4f8:	80800404 	addi	r2,r16,16
    d4fc:	003fee06 	br	d4b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4b8>
    d500:	80800204 	addi	r2,r16,8
    d504:	003fec06 	br	d4b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4b8>
    d508:	0005883a 	mov	r2,zero
    d50c:	003fee06 	br	d4c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4c8>

0000d510 <_fclose_r>:
    d510:	28003926 	beq	r5,zero,d5f8 <_fclose_r+0xe8>
    d514:	defffc04 	addi	sp,sp,-16
    d518:	dc400115 	stw	r17,4(sp)
    d51c:	dc000015 	stw	r16,0(sp)
    d520:	dfc00315 	stw	ra,12(sp)
    d524:	dc800215 	stw	r18,8(sp)
    d528:	2023883a 	mov	r17,r4
    d52c:	2821883a 	mov	r16,r5
    d530:	20000226 	beq	r4,zero,d53c <_fclose_r+0x2c>
    d534:	20800e17 	ldw	r2,56(r4)
    d538:	10002726 	beq	r2,zero,d5d8 <_fclose_r+0xc8>
    d53c:	8080030f 	ldh	r2,12(r16)
    d540:	1000071e 	bne	r2,zero,d560 <_fclose_r+0x50>
    d544:	0005883a 	mov	r2,zero
    d548:	dfc00317 	ldw	ra,12(sp)
    d54c:	dc800217 	ldw	r18,8(sp)
    d550:	dc400117 	ldw	r17,4(sp)
    d554:	dc000017 	ldw	r16,0(sp)
    d558:	dec00404 	addi	sp,sp,16
    d55c:	f800283a 	ret
    d560:	800b883a 	mov	r5,r16
    d564:	8809883a 	mov	r4,r17
    d568:	0008fe00 	call	8fe0 <__sflush_r>
    d56c:	1025883a 	mov	r18,r2
    d570:	80800b17 	ldw	r2,44(r16)
    d574:	10000426 	beq	r2,zero,d588 <_fclose_r+0x78>
    d578:	81400717 	ldw	r5,28(r16)
    d57c:	8809883a 	mov	r4,r17
    d580:	103ee83a 	callr	r2
    d584:	10001616 	blt	r2,zero,d5e0 <_fclose_r+0xd0>
    d588:	8080030b 	ldhu	r2,12(r16)
    d58c:	1080200c 	andi	r2,r2,128
    d590:	1000151e 	bne	r2,zero,d5e8 <_fclose_r+0xd8>
    d594:	81400c17 	ldw	r5,48(r16)
    d598:	28000526 	beq	r5,zero,d5b0 <_fclose_r+0xa0>
    d59c:	80801004 	addi	r2,r16,64
    d5a0:	28800226 	beq	r5,r2,d5ac <_fclose_r+0x9c>
    d5a4:	8809883a 	mov	r4,r17
    d5a8:	000974c0 	call	974c <_free_r>
    d5ac:	80000c15 	stw	zero,48(r16)
    d5b0:	81401117 	ldw	r5,68(r16)
    d5b4:	28000326 	beq	r5,zero,d5c4 <_fclose_r+0xb4>
    d5b8:	8809883a 	mov	r4,r17
    d5bc:	000974c0 	call	974c <_free_r>
    d5c0:	80001115 	stw	zero,68(r16)
    d5c4:	00095e80 	call	95e8 <__sfp_lock_acquire>
    d5c8:	8000030d 	sth	zero,12(r16)
    d5cc:	00095ec0 	call	95ec <__sfp_lock_release>
    d5d0:	9005883a 	mov	r2,r18
    d5d4:	003fdc06 	br	d548 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d548>
    d5d8:	00095d80 	call	95d8 <__sinit>
    d5dc:	003fd706 	br	d53c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d53c>
    d5e0:	04bfffc4 	movi	r18,-1
    d5e4:	003fe806 	br	d588 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d588>
    d5e8:	81400417 	ldw	r5,16(r16)
    d5ec:	8809883a 	mov	r4,r17
    d5f0:	000974c0 	call	974c <_free_r>
    d5f4:	003fe706 	br	d594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d594>
    d5f8:	0005883a 	mov	r2,zero
    d5fc:	f800283a 	ret

0000d600 <fclose>:
    d600:	008000b4 	movhi	r2,2
    d604:	10b73804 	addi	r2,r2,-8992
    d608:	200b883a 	mov	r5,r4
    d60c:	11000017 	ldw	r4,0(r2)
    d610:	000d5101 	jmpi	d510 <_fclose_r>

0000d614 <__fputwc>:
    d614:	defff804 	addi	sp,sp,-32
    d618:	dcc00415 	stw	r19,16(sp)
    d61c:	dc800315 	stw	r18,12(sp)
    d620:	dc000115 	stw	r16,4(sp)
    d624:	dfc00715 	stw	ra,28(sp)
    d628:	dd400615 	stw	r21,24(sp)
    d62c:	dd000515 	stw	r20,20(sp)
    d630:	dc400215 	stw	r17,8(sp)
    d634:	2027883a 	mov	r19,r4
    d638:	2825883a 	mov	r18,r5
    d63c:	3021883a 	mov	r16,r6
    d640:	0009c6c0 	call	9c6c <__locale_mb_cur_max>
    d644:	00c00044 	movi	r3,1
    d648:	10c03e26 	beq	r2,r3,d744 <__fputwc+0x130>
    d64c:	81c01704 	addi	r7,r16,92
    d650:	900d883a 	mov	r6,r18
    d654:	d80b883a 	mov	r5,sp
    d658:	9809883a 	mov	r4,r19
    d65c:	000e6600 	call	e660 <_wcrtomb_r>
    d660:	1029883a 	mov	r20,r2
    d664:	00bfffc4 	movi	r2,-1
    d668:	a0802026 	beq	r20,r2,d6ec <__fputwc+0xd8>
    d66c:	d9400003 	ldbu	r5,0(sp)
    d670:	a0001c26 	beq	r20,zero,d6e4 <__fputwc+0xd0>
    d674:	0023883a 	mov	r17,zero
    d678:	05400284 	movi	r21,10
    d67c:	00000906 	br	d6a4 <__fputwc+0x90>
    d680:	80800017 	ldw	r2,0(r16)
    d684:	11400005 	stb	r5,0(r2)
    d688:	80c00017 	ldw	r3,0(r16)
    d68c:	18c00044 	addi	r3,r3,1
    d690:	80c00015 	stw	r3,0(r16)
    d694:	8c400044 	addi	r17,r17,1
    d698:	dc45883a 	add	r2,sp,r17
    d69c:	8d00112e 	bgeu	r17,r20,d6e4 <__fputwc+0xd0>
    d6a0:	11400003 	ldbu	r5,0(r2)
    d6a4:	80c00217 	ldw	r3,8(r16)
    d6a8:	18ffffc4 	addi	r3,r3,-1
    d6ac:	80c00215 	stw	r3,8(r16)
    d6b0:	183ff30e 	bge	r3,zero,d680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d680>
    d6b4:	80800617 	ldw	r2,24(r16)
    d6b8:	18801916 	blt	r3,r2,d720 <__fputwc+0x10c>
    d6bc:	80800017 	ldw	r2,0(r16)
    d6c0:	11400005 	stb	r5,0(r2)
    d6c4:	80800017 	ldw	r2,0(r16)
    d6c8:	10c00003 	ldbu	r3,0(r2)
    d6cc:	10800044 	addi	r2,r2,1
    d6d0:	1d402326 	beq	r3,r21,d760 <__fputwc+0x14c>
    d6d4:	80800015 	stw	r2,0(r16)
    d6d8:	8c400044 	addi	r17,r17,1
    d6dc:	dc45883a 	add	r2,sp,r17
    d6e0:	8d3fef36 	bltu	r17,r20,d6a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d6a0>
    d6e4:	9005883a 	mov	r2,r18
    d6e8:	00000406 	br	d6fc <__fputwc+0xe8>
    d6ec:	80c0030b 	ldhu	r3,12(r16)
    d6f0:	a005883a 	mov	r2,r20
    d6f4:	18c01014 	ori	r3,r3,64
    d6f8:	80c0030d 	sth	r3,12(r16)
    d6fc:	dfc00717 	ldw	ra,28(sp)
    d700:	dd400617 	ldw	r21,24(sp)
    d704:	dd000517 	ldw	r20,20(sp)
    d708:	dcc00417 	ldw	r19,16(sp)
    d70c:	dc800317 	ldw	r18,12(sp)
    d710:	dc400217 	ldw	r17,8(sp)
    d714:	dc000117 	ldw	r16,4(sp)
    d718:	dec00804 	addi	sp,sp,32
    d71c:	f800283a 	ret
    d720:	800d883a 	mov	r6,r16
    d724:	29403fcc 	andi	r5,r5,255
    d728:	9809883a 	mov	r4,r19
    d72c:	000e5080 	call	e508 <__swbuf_r>
    d730:	10bfffe0 	cmpeqi	r2,r2,-1
    d734:	10803fcc 	andi	r2,r2,255
    d738:	103fd626 	beq	r2,zero,d694 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d694>
    d73c:	00bfffc4 	movi	r2,-1
    d740:	003fee06 	br	d6fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d6fc>
    d744:	90ffffc4 	addi	r3,r18,-1
    d748:	01003f84 	movi	r4,254
    d74c:	20ffbf36 	bltu	r4,r3,d64c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d64c>
    d750:	900b883a 	mov	r5,r18
    d754:	dc800005 	stb	r18,0(sp)
    d758:	1029883a 	mov	r20,r2
    d75c:	003fc506 	br	d674 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d674>
    d760:	800d883a 	mov	r6,r16
    d764:	a80b883a 	mov	r5,r21
    d768:	9809883a 	mov	r4,r19
    d76c:	000e5080 	call	e508 <__swbuf_r>
    d770:	10bfffe0 	cmpeqi	r2,r2,-1
    d774:	003fef06 	br	d734 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d734>

0000d778 <_fputwc_r>:
    d778:	3080030b 	ldhu	r2,12(r6)
    d77c:	10c8000c 	andi	r3,r2,8192
    d780:	1800051e 	bne	r3,zero,d798 <_fputwc_r+0x20>
    d784:	30c01917 	ldw	r3,100(r6)
    d788:	10880014 	ori	r2,r2,8192
    d78c:	3080030d 	sth	r2,12(r6)
    d790:	18880014 	ori	r2,r3,8192
    d794:	30801915 	stw	r2,100(r6)
    d798:	000d6141 	jmpi	d614 <__fputwc>

0000d79c <fputwc>:
    d79c:	008000b4 	movhi	r2,2
    d7a0:	defffc04 	addi	sp,sp,-16
    d7a4:	10b73804 	addi	r2,r2,-8992
    d7a8:	dc000115 	stw	r16,4(sp)
    d7ac:	14000017 	ldw	r16,0(r2)
    d7b0:	dc400215 	stw	r17,8(sp)
    d7b4:	dfc00315 	stw	ra,12(sp)
    d7b8:	2023883a 	mov	r17,r4
    d7bc:	80000226 	beq	r16,zero,d7c8 <fputwc+0x2c>
    d7c0:	80800e17 	ldw	r2,56(r16)
    d7c4:	10001026 	beq	r2,zero,d808 <fputwc+0x6c>
    d7c8:	2880030b 	ldhu	r2,12(r5)
    d7cc:	10c8000c 	andi	r3,r2,8192
    d7d0:	1800051e 	bne	r3,zero,d7e8 <fputwc+0x4c>
    d7d4:	28c01917 	ldw	r3,100(r5)
    d7d8:	10880014 	ori	r2,r2,8192
    d7dc:	2880030d 	sth	r2,12(r5)
    d7e0:	18880014 	ori	r2,r3,8192
    d7e4:	28801915 	stw	r2,100(r5)
    d7e8:	280d883a 	mov	r6,r5
    d7ec:	8009883a 	mov	r4,r16
    d7f0:	880b883a 	mov	r5,r17
    d7f4:	dfc00317 	ldw	ra,12(sp)
    d7f8:	dc400217 	ldw	r17,8(sp)
    d7fc:	dc000117 	ldw	r16,4(sp)
    d800:	dec00404 	addi	sp,sp,16
    d804:	000d6141 	jmpi	d614 <__fputwc>
    d808:	8009883a 	mov	r4,r16
    d80c:	d9400015 	stw	r5,0(sp)
    d810:	00095d80 	call	95d8 <__sinit>
    d814:	d9400017 	ldw	r5,0(sp)
    d818:	003feb06 	br	d7c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d7c8>

0000d81c <_fstat_r>:
    d81c:	defffd04 	addi	sp,sp,-12
    d820:	2805883a 	mov	r2,r5
    d824:	dc000015 	stw	r16,0(sp)
    d828:	040000b4 	movhi	r16,2
    d82c:	dc400115 	stw	r17,4(sp)
    d830:	843f4604 	addi	r16,r16,-744
    d834:	2023883a 	mov	r17,r4
    d838:	300b883a 	mov	r5,r6
    d83c:	1009883a 	mov	r4,r2
    d840:	dfc00215 	stw	ra,8(sp)
    d844:	80000015 	stw	zero,0(r16)
    d848:	000f6080 	call	f608 <fstat>
    d84c:	00ffffc4 	movi	r3,-1
    d850:	10c00526 	beq	r2,r3,d868 <_fstat_r+0x4c>
    d854:	dfc00217 	ldw	ra,8(sp)
    d858:	dc400117 	ldw	r17,4(sp)
    d85c:	dc000017 	ldw	r16,0(sp)
    d860:	dec00304 	addi	sp,sp,12
    d864:	f800283a 	ret
    d868:	80c00017 	ldw	r3,0(r16)
    d86c:	183ff926 	beq	r3,zero,d854 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d854>
    d870:	88c00015 	stw	r3,0(r17)
    d874:	003ff706 	br	d854 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d854>

0000d878 <__sfvwrite_r>:
    d878:	30800217 	ldw	r2,8(r6)
    d87c:	10006726 	beq	r2,zero,da1c <__sfvwrite_r+0x1a4>
    d880:	28c0030b 	ldhu	r3,12(r5)
    d884:	defff404 	addi	sp,sp,-48
    d888:	dd400715 	stw	r21,28(sp)
    d88c:	dd000615 	stw	r20,24(sp)
    d890:	dc000215 	stw	r16,8(sp)
    d894:	dfc00b15 	stw	ra,44(sp)
    d898:	df000a15 	stw	fp,40(sp)
    d89c:	ddc00915 	stw	r23,36(sp)
    d8a0:	dd800815 	stw	r22,32(sp)
    d8a4:	dcc00515 	stw	r19,20(sp)
    d8a8:	dc800415 	stw	r18,16(sp)
    d8ac:	dc400315 	stw	r17,12(sp)
    d8b0:	1880020c 	andi	r2,r3,8
    d8b4:	2821883a 	mov	r16,r5
    d8b8:	202b883a 	mov	r21,r4
    d8bc:	3029883a 	mov	r20,r6
    d8c0:	10002726 	beq	r2,zero,d960 <__sfvwrite_r+0xe8>
    d8c4:	28800417 	ldw	r2,16(r5)
    d8c8:	10002526 	beq	r2,zero,d960 <__sfvwrite_r+0xe8>
    d8cc:	1880008c 	andi	r2,r3,2
    d8d0:	a4400017 	ldw	r17,0(r20)
    d8d4:	10002a26 	beq	r2,zero,d980 <__sfvwrite_r+0x108>
    d8d8:	05a00034 	movhi	r22,32768
    d8dc:	0027883a 	mov	r19,zero
    d8e0:	0025883a 	mov	r18,zero
    d8e4:	b5bf0004 	addi	r22,r22,-1024
    d8e8:	980d883a 	mov	r6,r19
    d8ec:	a809883a 	mov	r4,r21
    d8f0:	90004626 	beq	r18,zero,da0c <__sfvwrite_r+0x194>
    d8f4:	900f883a 	mov	r7,r18
    d8f8:	b480022e 	bgeu	r22,r18,d904 <__sfvwrite_r+0x8c>
    d8fc:	01e00034 	movhi	r7,32768
    d900:	39ff0004 	addi	r7,r7,-1024
    d904:	80800917 	ldw	r2,36(r16)
    d908:	81400717 	ldw	r5,28(r16)
    d90c:	103ee83a 	callr	r2
    d910:	0080570e 	bge	zero,r2,da70 <__sfvwrite_r+0x1f8>
    d914:	a0c00217 	ldw	r3,8(r20)
    d918:	98a7883a 	add	r19,r19,r2
    d91c:	90a5c83a 	sub	r18,r18,r2
    d920:	1885c83a 	sub	r2,r3,r2
    d924:	a0800215 	stw	r2,8(r20)
    d928:	103fef1e 	bne	r2,zero,d8e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8e8>
    d92c:	0005883a 	mov	r2,zero
    d930:	dfc00b17 	ldw	ra,44(sp)
    d934:	df000a17 	ldw	fp,40(sp)
    d938:	ddc00917 	ldw	r23,36(sp)
    d93c:	dd800817 	ldw	r22,32(sp)
    d940:	dd400717 	ldw	r21,28(sp)
    d944:	dd000617 	ldw	r20,24(sp)
    d948:	dcc00517 	ldw	r19,20(sp)
    d94c:	dc800417 	ldw	r18,16(sp)
    d950:	dc400317 	ldw	r17,12(sp)
    d954:	dc000217 	ldw	r16,8(sp)
    d958:	dec00c04 	addi	sp,sp,48
    d95c:	f800283a 	ret
    d960:	800b883a 	mov	r5,r16
    d964:	a809883a 	mov	r4,r21
    d968:	00076040 	call	7604 <__swsetup_r>
    d96c:	1000eb1e 	bne	r2,zero,dd1c <__sfvwrite_r+0x4a4>
    d970:	80c0030b 	ldhu	r3,12(r16)
    d974:	a4400017 	ldw	r17,0(r20)
    d978:	1880008c 	andi	r2,r3,2
    d97c:	103fd61e 	bne	r2,zero,d8d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8d8>
    d980:	1880004c 	andi	r2,r3,1
    d984:	10003f1e 	bne	r2,zero,da84 <__sfvwrite_r+0x20c>
    d988:	0039883a 	mov	fp,zero
    d98c:	0025883a 	mov	r18,zero
    d990:	90001a26 	beq	r18,zero,d9fc <__sfvwrite_r+0x184>
    d994:	1880800c 	andi	r2,r3,512
    d998:	84c00217 	ldw	r19,8(r16)
    d99c:	10002126 	beq	r2,zero,da24 <__sfvwrite_r+0x1ac>
    d9a0:	982f883a 	mov	r23,r19
    d9a4:	94c09336 	bltu	r18,r19,dbf4 <__sfvwrite_r+0x37c>
    d9a8:	1881200c 	andi	r2,r3,1152
    d9ac:	10009e1e 	bne	r2,zero,dc28 <__sfvwrite_r+0x3b0>
    d9b0:	81000017 	ldw	r4,0(r16)
    d9b4:	b80d883a 	mov	r6,r23
    d9b8:	e00b883a 	mov	r5,fp
    d9bc:	000dde80 	call	dde8 <memmove>
    d9c0:	80c00217 	ldw	r3,8(r16)
    d9c4:	81000017 	ldw	r4,0(r16)
    d9c8:	9005883a 	mov	r2,r18
    d9cc:	1ce7c83a 	sub	r19,r3,r19
    d9d0:	25cf883a 	add	r7,r4,r23
    d9d4:	84c00215 	stw	r19,8(r16)
    d9d8:	81c00015 	stw	r7,0(r16)
    d9dc:	a0c00217 	ldw	r3,8(r20)
    d9e0:	e0b9883a 	add	fp,fp,r2
    d9e4:	90a5c83a 	sub	r18,r18,r2
    d9e8:	18a7c83a 	sub	r19,r3,r2
    d9ec:	a4c00215 	stw	r19,8(r20)
    d9f0:	983fce26 	beq	r19,zero,d92c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d92c>
    d9f4:	80c0030b 	ldhu	r3,12(r16)
    d9f8:	903fe61e 	bne	r18,zero,d994 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d994>
    d9fc:	8f000017 	ldw	fp,0(r17)
    da00:	8c800117 	ldw	r18,4(r17)
    da04:	8c400204 	addi	r17,r17,8
    da08:	003fe106 	br	d990 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d990>
    da0c:	8cc00017 	ldw	r19,0(r17)
    da10:	8c800117 	ldw	r18,4(r17)
    da14:	8c400204 	addi	r17,r17,8
    da18:	003fb306 	br	d8e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8e8>
    da1c:	0005883a 	mov	r2,zero
    da20:	f800283a 	ret
    da24:	81000017 	ldw	r4,0(r16)
    da28:	80800417 	ldw	r2,16(r16)
    da2c:	11005736 	bltu	r2,r4,db8c <__sfvwrite_r+0x314>
    da30:	85c00517 	ldw	r23,20(r16)
    da34:	95c05536 	bltu	r18,r23,db8c <__sfvwrite_r+0x314>
    da38:	00a00034 	movhi	r2,32768
    da3c:	10bfffc4 	addi	r2,r2,-1
    da40:	9009883a 	mov	r4,r18
    da44:	1480012e 	bgeu	r2,r18,da4c <__sfvwrite_r+0x1d4>
    da48:	1009883a 	mov	r4,r2
    da4c:	b80b883a 	mov	r5,r23
    da50:	0002a300 	call	2a30 <__divsi3>
    da54:	15cf383a 	mul	r7,r2,r23
    da58:	81400717 	ldw	r5,28(r16)
    da5c:	80800917 	ldw	r2,36(r16)
    da60:	e00d883a 	mov	r6,fp
    da64:	a809883a 	mov	r4,r21
    da68:	103ee83a 	callr	r2
    da6c:	00bfdb16 	blt	zero,r2,d9dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9dc>
    da70:	8080030b 	ldhu	r2,12(r16)
    da74:	10801014 	ori	r2,r2,64
    da78:	8080030d 	sth	r2,12(r16)
    da7c:	00bfffc4 	movi	r2,-1
    da80:	003fab06 	br	d930 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d930>
    da84:	0027883a 	mov	r19,zero
    da88:	0011883a 	mov	r8,zero
    da8c:	0039883a 	mov	fp,zero
    da90:	0025883a 	mov	r18,zero
    da94:	90001f26 	beq	r18,zero,db14 <__sfvwrite_r+0x29c>
    da98:	40005a26 	beq	r8,zero,dc04 <__sfvwrite_r+0x38c>
    da9c:	982d883a 	mov	r22,r19
    daa0:	94c0012e 	bgeu	r18,r19,daa8 <__sfvwrite_r+0x230>
    daa4:	902d883a 	mov	r22,r18
    daa8:	81000017 	ldw	r4,0(r16)
    daac:	80800417 	ldw	r2,16(r16)
    dab0:	b02f883a 	mov	r23,r22
    dab4:	81c00517 	ldw	r7,20(r16)
    dab8:	1100032e 	bgeu	r2,r4,dac8 <__sfvwrite_r+0x250>
    dabc:	80c00217 	ldw	r3,8(r16)
    dac0:	38c7883a 	add	r3,r7,r3
    dac4:	1d801816 	blt	r3,r22,db28 <__sfvwrite_r+0x2b0>
    dac8:	b1c03e16 	blt	r22,r7,dbc4 <__sfvwrite_r+0x34c>
    dacc:	80800917 	ldw	r2,36(r16)
    dad0:	81400717 	ldw	r5,28(r16)
    dad4:	e00d883a 	mov	r6,fp
    dad8:	da000115 	stw	r8,4(sp)
    dadc:	a809883a 	mov	r4,r21
    dae0:	103ee83a 	callr	r2
    dae4:	102f883a 	mov	r23,r2
    dae8:	da000117 	ldw	r8,4(sp)
    daec:	00bfe00e 	bge	zero,r2,da70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da70>
    daf0:	9de7c83a 	sub	r19,r19,r23
    daf4:	98001f26 	beq	r19,zero,db74 <__sfvwrite_r+0x2fc>
    daf8:	a0800217 	ldw	r2,8(r20)
    dafc:	e5f9883a 	add	fp,fp,r23
    db00:	95e5c83a 	sub	r18,r18,r23
    db04:	15efc83a 	sub	r23,r2,r23
    db08:	a5c00215 	stw	r23,8(r20)
    db0c:	b83f8726 	beq	r23,zero,d92c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d92c>
    db10:	903fe11e 	bne	r18,zero,da98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da98>
    db14:	8f000017 	ldw	fp,0(r17)
    db18:	8c800117 	ldw	r18,4(r17)
    db1c:	0011883a 	mov	r8,zero
    db20:	8c400204 	addi	r17,r17,8
    db24:	003fdb06 	br	da94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da94>
    db28:	180d883a 	mov	r6,r3
    db2c:	e00b883a 	mov	r5,fp
    db30:	da000115 	stw	r8,4(sp)
    db34:	d8c00015 	stw	r3,0(sp)
    db38:	000dde80 	call	dde8 <memmove>
    db3c:	d8c00017 	ldw	r3,0(sp)
    db40:	80800017 	ldw	r2,0(r16)
    db44:	800b883a 	mov	r5,r16
    db48:	a809883a 	mov	r4,r21
    db4c:	10c5883a 	add	r2,r2,r3
    db50:	80800015 	stw	r2,0(r16)
    db54:	d8c00015 	stw	r3,0(sp)
    db58:	00091fc0 	call	91fc <_fflush_r>
    db5c:	d8c00017 	ldw	r3,0(sp)
    db60:	da000117 	ldw	r8,4(sp)
    db64:	103fc21e 	bne	r2,zero,da70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da70>
    db68:	182f883a 	mov	r23,r3
    db6c:	9de7c83a 	sub	r19,r19,r23
    db70:	983fe11e 	bne	r19,zero,daf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700daf8>
    db74:	800b883a 	mov	r5,r16
    db78:	a809883a 	mov	r4,r21
    db7c:	00091fc0 	call	91fc <_fflush_r>
    db80:	103fbb1e 	bne	r2,zero,da70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da70>
    db84:	0011883a 	mov	r8,zero
    db88:	003fdb06 	br	daf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700daf8>
    db8c:	94c0012e 	bgeu	r18,r19,db94 <__sfvwrite_r+0x31c>
    db90:	9027883a 	mov	r19,r18
    db94:	980d883a 	mov	r6,r19
    db98:	e00b883a 	mov	r5,fp
    db9c:	000dde80 	call	dde8 <memmove>
    dba0:	80800217 	ldw	r2,8(r16)
    dba4:	80c00017 	ldw	r3,0(r16)
    dba8:	14c5c83a 	sub	r2,r2,r19
    dbac:	1cc7883a 	add	r3,r3,r19
    dbb0:	80800215 	stw	r2,8(r16)
    dbb4:	80c00015 	stw	r3,0(r16)
    dbb8:	10004326 	beq	r2,zero,dcc8 <__sfvwrite_r+0x450>
    dbbc:	9805883a 	mov	r2,r19
    dbc0:	003f8606 	br	d9dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9dc>
    dbc4:	b00d883a 	mov	r6,r22
    dbc8:	e00b883a 	mov	r5,fp
    dbcc:	da000115 	stw	r8,4(sp)
    dbd0:	000dde80 	call	dde8 <memmove>
    dbd4:	80800217 	ldw	r2,8(r16)
    dbd8:	80c00017 	ldw	r3,0(r16)
    dbdc:	da000117 	ldw	r8,4(sp)
    dbe0:	1585c83a 	sub	r2,r2,r22
    dbe4:	1dad883a 	add	r22,r3,r22
    dbe8:	80800215 	stw	r2,8(r16)
    dbec:	85800015 	stw	r22,0(r16)
    dbf0:	003fbf06 	br	daf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700daf0>
    dbf4:	81000017 	ldw	r4,0(r16)
    dbf8:	9027883a 	mov	r19,r18
    dbfc:	902f883a 	mov	r23,r18
    dc00:	003f6c06 	br	d9b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9b4>
    dc04:	900d883a 	mov	r6,r18
    dc08:	01400284 	movi	r5,10
    dc0c:	e009883a 	mov	r4,fp
    dc10:	000a6880 	call	a688 <memchr>
    dc14:	10003e26 	beq	r2,zero,dd10 <__sfvwrite_r+0x498>
    dc18:	10800044 	addi	r2,r2,1
    dc1c:	1727c83a 	sub	r19,r2,fp
    dc20:	02000044 	movi	r8,1
    dc24:	003f9d06 	br	da9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da9c>
    dc28:	80800517 	ldw	r2,20(r16)
    dc2c:	81400417 	ldw	r5,16(r16)
    dc30:	81c00017 	ldw	r7,0(r16)
    dc34:	10a7883a 	add	r19,r2,r2
    dc38:	9885883a 	add	r2,r19,r2
    dc3c:	1026d7fa 	srli	r19,r2,31
    dc40:	396dc83a 	sub	r22,r7,r5
    dc44:	b1000044 	addi	r4,r22,1
    dc48:	9885883a 	add	r2,r19,r2
    dc4c:	1027d07a 	srai	r19,r2,1
    dc50:	2485883a 	add	r2,r4,r18
    dc54:	980d883a 	mov	r6,r19
    dc58:	9880022e 	bgeu	r19,r2,dc64 <__sfvwrite_r+0x3ec>
    dc5c:	1027883a 	mov	r19,r2
    dc60:	100d883a 	mov	r6,r2
    dc64:	18c1000c 	andi	r3,r3,1024
    dc68:	18001c26 	beq	r3,zero,dcdc <__sfvwrite_r+0x464>
    dc6c:	300b883a 	mov	r5,r6
    dc70:	a809883a 	mov	r4,r21
    dc74:	0009e7c0 	call	9e7c <_malloc_r>
    dc78:	102f883a 	mov	r23,r2
    dc7c:	10002926 	beq	r2,zero,dd24 <__sfvwrite_r+0x4ac>
    dc80:	81400417 	ldw	r5,16(r16)
    dc84:	b00d883a 	mov	r6,r22
    dc88:	1009883a 	mov	r4,r2
    dc8c:	000a76c0 	call	a76c <memcpy>
    dc90:	8080030b 	ldhu	r2,12(r16)
    dc94:	00fedfc4 	movi	r3,-1153
    dc98:	10c4703a 	and	r2,r2,r3
    dc9c:	10802014 	ori	r2,r2,128
    dca0:	8080030d 	sth	r2,12(r16)
    dca4:	bd89883a 	add	r4,r23,r22
    dca8:	9d8fc83a 	sub	r7,r19,r22
    dcac:	85c00415 	stw	r23,16(r16)
    dcb0:	84c00515 	stw	r19,20(r16)
    dcb4:	81000015 	stw	r4,0(r16)
    dcb8:	9027883a 	mov	r19,r18
    dcbc:	81c00215 	stw	r7,8(r16)
    dcc0:	902f883a 	mov	r23,r18
    dcc4:	003f3b06 	br	d9b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9b4>
    dcc8:	800b883a 	mov	r5,r16
    dccc:	a809883a 	mov	r4,r21
    dcd0:	00091fc0 	call	91fc <_fflush_r>
    dcd4:	103fb926 	beq	r2,zero,dbbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dbbc>
    dcd8:	003f6506 	br	da70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da70>
    dcdc:	a809883a 	mov	r4,r21
    dce0:	000dfa40 	call	dfa4 <_realloc_r>
    dce4:	102f883a 	mov	r23,r2
    dce8:	103fee1e 	bne	r2,zero,dca4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dca4>
    dcec:	81400417 	ldw	r5,16(r16)
    dcf0:	a809883a 	mov	r4,r21
    dcf4:	000974c0 	call	974c <_free_r>
    dcf8:	8080030b 	ldhu	r2,12(r16)
    dcfc:	00ffdfc4 	movi	r3,-129
    dd00:	1884703a 	and	r2,r3,r2
    dd04:	00c00304 	movi	r3,12
    dd08:	a8c00015 	stw	r3,0(r21)
    dd0c:	003f5906 	br	da74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da74>
    dd10:	94c00044 	addi	r19,r18,1
    dd14:	02000044 	movi	r8,1
    dd18:	003f6006 	br	da9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da9c>
    dd1c:	00bfffc4 	movi	r2,-1
    dd20:	003f0306 	br	d930 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d930>
    dd24:	00800304 	movi	r2,12
    dd28:	a8800015 	stw	r2,0(r21)
    dd2c:	8080030b 	ldhu	r2,12(r16)
    dd30:	003f5006 	br	da74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da74>

0000dd34 <_isatty_r>:
    dd34:	defffd04 	addi	sp,sp,-12
    dd38:	dc000015 	stw	r16,0(sp)
    dd3c:	040000b4 	movhi	r16,2
    dd40:	dc400115 	stw	r17,4(sp)
    dd44:	843f4604 	addi	r16,r16,-744
    dd48:	2023883a 	mov	r17,r4
    dd4c:	2809883a 	mov	r4,r5
    dd50:	dfc00215 	stw	ra,8(sp)
    dd54:	80000015 	stw	zero,0(r16)
    dd58:	000f6f40 	call	f6f4 <isatty>
    dd5c:	00ffffc4 	movi	r3,-1
    dd60:	10c00526 	beq	r2,r3,dd78 <_isatty_r+0x44>
    dd64:	dfc00217 	ldw	ra,8(sp)
    dd68:	dc400117 	ldw	r17,4(sp)
    dd6c:	dc000017 	ldw	r16,0(sp)
    dd70:	dec00304 	addi	sp,sp,12
    dd74:	f800283a 	ret
    dd78:	80c00017 	ldw	r3,0(r16)
    dd7c:	183ff926 	beq	r3,zero,dd64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd64>
    dd80:	88c00015 	stw	r3,0(r17)
    dd84:	003ff706 	br	dd64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd64>

0000dd88 <_lseek_r>:
    dd88:	defffd04 	addi	sp,sp,-12
    dd8c:	2805883a 	mov	r2,r5
    dd90:	dc000015 	stw	r16,0(sp)
    dd94:	040000b4 	movhi	r16,2
    dd98:	dc400115 	stw	r17,4(sp)
    dd9c:	300b883a 	mov	r5,r6
    dda0:	843f4604 	addi	r16,r16,-744
    dda4:	2023883a 	mov	r17,r4
    dda8:	380d883a 	mov	r6,r7
    ddac:	1009883a 	mov	r4,r2
    ddb0:	dfc00215 	stw	ra,8(sp)
    ddb4:	80000015 	stw	zero,0(r16)
    ddb8:	000f8c00 	call	f8c0 <lseek>
    ddbc:	00ffffc4 	movi	r3,-1
    ddc0:	10c00526 	beq	r2,r3,ddd8 <_lseek_r+0x50>
    ddc4:	dfc00217 	ldw	ra,8(sp)
    ddc8:	dc400117 	ldw	r17,4(sp)
    ddcc:	dc000017 	ldw	r16,0(sp)
    ddd0:	dec00304 	addi	sp,sp,12
    ddd4:	f800283a 	ret
    ddd8:	80c00017 	ldw	r3,0(r16)
    dddc:	183ff926 	beq	r3,zero,ddc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddc4>
    dde0:	88c00015 	stw	r3,0(r17)
    dde4:	003ff706 	br	ddc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddc4>

0000dde8 <memmove>:
    dde8:	2005883a 	mov	r2,r4
    ddec:	29000b2e 	bgeu	r5,r4,de1c <memmove+0x34>
    ddf0:	298f883a 	add	r7,r5,r6
    ddf4:	21c0092e 	bgeu	r4,r7,de1c <memmove+0x34>
    ddf8:	2187883a 	add	r3,r4,r6
    ddfc:	198bc83a 	sub	r5,r3,r6
    de00:	30004826 	beq	r6,zero,df24 <memmove+0x13c>
    de04:	39ffffc4 	addi	r7,r7,-1
    de08:	39000003 	ldbu	r4,0(r7)
    de0c:	18ffffc4 	addi	r3,r3,-1
    de10:	19000005 	stb	r4,0(r3)
    de14:	28fffb1e 	bne	r5,r3,de04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de04>
    de18:	f800283a 	ret
    de1c:	00c003c4 	movi	r3,15
    de20:	1980412e 	bgeu	r3,r6,df28 <memmove+0x140>
    de24:	2886b03a 	or	r3,r5,r2
    de28:	18c000cc 	andi	r3,r3,3
    de2c:	1800401e 	bne	r3,zero,df30 <memmove+0x148>
    de30:	33fffc04 	addi	r15,r6,-16
    de34:	781ed13a 	srli	r15,r15,4
    de38:	28c00104 	addi	r3,r5,4
    de3c:	13400104 	addi	r13,r2,4
    de40:	781c913a 	slli	r14,r15,4
    de44:	2b000204 	addi	r12,r5,8
    de48:	12c00204 	addi	r11,r2,8
    de4c:	73800504 	addi	r14,r14,20
    de50:	2a800304 	addi	r10,r5,12
    de54:	12400304 	addi	r9,r2,12
    de58:	2b9d883a 	add	r14,r5,r14
    de5c:	2811883a 	mov	r8,r5
    de60:	100f883a 	mov	r7,r2
    de64:	41000017 	ldw	r4,0(r8)
    de68:	39c00404 	addi	r7,r7,16
    de6c:	18c00404 	addi	r3,r3,16
    de70:	393ffc15 	stw	r4,-16(r7)
    de74:	193ffc17 	ldw	r4,-16(r3)
    de78:	6b400404 	addi	r13,r13,16
    de7c:	5ac00404 	addi	r11,r11,16
    de80:	693ffc15 	stw	r4,-16(r13)
    de84:	61000017 	ldw	r4,0(r12)
    de88:	4a400404 	addi	r9,r9,16
    de8c:	42000404 	addi	r8,r8,16
    de90:	593ffc15 	stw	r4,-16(r11)
    de94:	51000017 	ldw	r4,0(r10)
    de98:	63000404 	addi	r12,r12,16
    de9c:	52800404 	addi	r10,r10,16
    dea0:	493ffc15 	stw	r4,-16(r9)
    dea4:	1bbfef1e 	bne	r3,r14,de64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de64>
    dea8:	79000044 	addi	r4,r15,1
    deac:	2008913a 	slli	r4,r4,4
    deb0:	328003cc 	andi	r10,r6,15
    deb4:	02c000c4 	movi	r11,3
    deb8:	1107883a 	add	r3,r2,r4
    debc:	290b883a 	add	r5,r5,r4
    dec0:	5a801e2e 	bgeu	r11,r10,df3c <memmove+0x154>
    dec4:	1813883a 	mov	r9,r3
    dec8:	2811883a 	mov	r8,r5
    decc:	500f883a 	mov	r7,r10
    ded0:	41000017 	ldw	r4,0(r8)
    ded4:	4a400104 	addi	r9,r9,4
    ded8:	39ffff04 	addi	r7,r7,-4
    dedc:	493fff15 	stw	r4,-4(r9)
    dee0:	42000104 	addi	r8,r8,4
    dee4:	59fffa36 	bltu	r11,r7,ded0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ded0>
    dee8:	513fff04 	addi	r4,r10,-4
    deec:	2008d0ba 	srli	r4,r4,2
    def0:	318000cc 	andi	r6,r6,3
    def4:	21000044 	addi	r4,r4,1
    def8:	2109883a 	add	r4,r4,r4
    defc:	2109883a 	add	r4,r4,r4
    df00:	1907883a 	add	r3,r3,r4
    df04:	290b883a 	add	r5,r5,r4
    df08:	30000b26 	beq	r6,zero,df38 <memmove+0x150>
    df0c:	198d883a 	add	r6,r3,r6
    df10:	29c00003 	ldbu	r7,0(r5)
    df14:	18c00044 	addi	r3,r3,1
    df18:	29400044 	addi	r5,r5,1
    df1c:	19ffffc5 	stb	r7,-1(r3)
    df20:	19bffb1e 	bne	r3,r6,df10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df10>
    df24:	f800283a 	ret
    df28:	1007883a 	mov	r3,r2
    df2c:	003ff606 	br	df08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df08>
    df30:	1007883a 	mov	r3,r2
    df34:	003ff506 	br	df0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df0c>
    df38:	f800283a 	ret
    df3c:	500d883a 	mov	r6,r10
    df40:	003ff106 	br	df08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df08>

0000df44 <_read_r>:
    df44:	defffd04 	addi	sp,sp,-12
    df48:	2805883a 	mov	r2,r5
    df4c:	dc000015 	stw	r16,0(sp)
    df50:	040000b4 	movhi	r16,2
    df54:	dc400115 	stw	r17,4(sp)
    df58:	300b883a 	mov	r5,r6
    df5c:	843f4604 	addi	r16,r16,-744
    df60:	2023883a 	mov	r17,r4
    df64:	380d883a 	mov	r6,r7
    df68:	1009883a 	mov	r4,r2
    df6c:	dfc00215 	stw	ra,8(sp)
    df70:	80000015 	stw	zero,0(r16)
    df74:	000fa8c0 	call	fa8c <read>
    df78:	00ffffc4 	movi	r3,-1
    df7c:	10c00526 	beq	r2,r3,df94 <_read_r+0x50>
    df80:	dfc00217 	ldw	ra,8(sp)
    df84:	dc400117 	ldw	r17,4(sp)
    df88:	dc000017 	ldw	r16,0(sp)
    df8c:	dec00304 	addi	sp,sp,12
    df90:	f800283a 	ret
    df94:	80c00017 	ldw	r3,0(r16)
    df98:	183ff926 	beq	r3,zero,df80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df80>
    df9c:	88c00015 	stw	r3,0(r17)
    dfa0:	003ff706 	br	df80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df80>

0000dfa4 <_realloc_r>:
    dfa4:	defff604 	addi	sp,sp,-40
    dfa8:	dc800215 	stw	r18,8(sp)
    dfac:	dfc00915 	stw	ra,36(sp)
    dfb0:	df000815 	stw	fp,32(sp)
    dfb4:	ddc00715 	stw	r23,28(sp)
    dfb8:	dd800615 	stw	r22,24(sp)
    dfbc:	dd400515 	stw	r21,20(sp)
    dfc0:	dd000415 	stw	r20,16(sp)
    dfc4:	dcc00315 	stw	r19,12(sp)
    dfc8:	dc400115 	stw	r17,4(sp)
    dfcc:	dc000015 	stw	r16,0(sp)
    dfd0:	3025883a 	mov	r18,r6
    dfd4:	2800b726 	beq	r5,zero,e2b4 <_realloc_r+0x310>
    dfd8:	282b883a 	mov	r21,r5
    dfdc:	2029883a 	mov	r20,r4
    dfe0:	000fef40 	call	fef4 <__malloc_lock>
    dfe4:	a8bfff17 	ldw	r2,-4(r21)
    dfe8:	043fff04 	movi	r16,-4
    dfec:	90c002c4 	addi	r3,r18,11
    dff0:	01000584 	movi	r4,22
    dff4:	acfffe04 	addi	r19,r21,-8
    dff8:	1420703a 	and	r16,r2,r16
    dffc:	20c0332e 	bgeu	r4,r3,e0cc <_realloc_r+0x128>
    e000:	047ffe04 	movi	r17,-8
    e004:	1c62703a 	and	r17,r3,r17
    e008:	8807883a 	mov	r3,r17
    e00c:	88005816 	blt	r17,zero,e170 <_realloc_r+0x1cc>
    e010:	8c805736 	bltu	r17,r18,e170 <_realloc_r+0x1cc>
    e014:	80c0300e 	bge	r16,r3,e0d8 <_realloc_r+0x134>
    e018:	070000b4 	movhi	fp,2
    e01c:	e730b304 	addi	fp,fp,-15668
    e020:	e1c00217 	ldw	r7,8(fp)
    e024:	9c09883a 	add	r4,r19,r16
    e028:	22000117 	ldw	r8,4(r4)
    e02c:	21c06326 	beq	r4,r7,e1bc <_realloc_r+0x218>
    e030:	017fff84 	movi	r5,-2
    e034:	414a703a 	and	r5,r8,r5
    e038:	214b883a 	add	r5,r4,r5
    e03c:	29800117 	ldw	r6,4(r5)
    e040:	3180004c 	andi	r6,r6,1
    e044:	30003f26 	beq	r6,zero,e144 <_realloc_r+0x1a0>
    e048:	1080004c 	andi	r2,r2,1
    e04c:	10008326 	beq	r2,zero,e25c <_realloc_r+0x2b8>
    e050:	900b883a 	mov	r5,r18
    e054:	a009883a 	mov	r4,r20
    e058:	0009e7c0 	call	9e7c <_malloc_r>
    e05c:	1025883a 	mov	r18,r2
    e060:	10011e26 	beq	r2,zero,e4dc <_realloc_r+0x538>
    e064:	a93fff17 	ldw	r4,-4(r21)
    e068:	10fffe04 	addi	r3,r2,-8
    e06c:	00bfff84 	movi	r2,-2
    e070:	2084703a 	and	r2,r4,r2
    e074:	9885883a 	add	r2,r19,r2
    e078:	1880ee26 	beq	r3,r2,e434 <_realloc_r+0x490>
    e07c:	81bfff04 	addi	r6,r16,-4
    e080:	00800904 	movi	r2,36
    e084:	1180b836 	bltu	r2,r6,e368 <_realloc_r+0x3c4>
    e088:	00c004c4 	movi	r3,19
    e08c:	19809636 	bltu	r3,r6,e2e8 <_realloc_r+0x344>
    e090:	9005883a 	mov	r2,r18
    e094:	a807883a 	mov	r3,r21
    e098:	19000017 	ldw	r4,0(r3)
    e09c:	11000015 	stw	r4,0(r2)
    e0a0:	19000117 	ldw	r4,4(r3)
    e0a4:	11000115 	stw	r4,4(r2)
    e0a8:	18c00217 	ldw	r3,8(r3)
    e0ac:	10c00215 	stw	r3,8(r2)
    e0b0:	a80b883a 	mov	r5,r21
    e0b4:	a009883a 	mov	r4,r20
    e0b8:	000974c0 	call	974c <_free_r>
    e0bc:	a009883a 	mov	r4,r20
    e0c0:	00100140 	call	10014 <__malloc_unlock>
    e0c4:	9005883a 	mov	r2,r18
    e0c8:	00001206 	br	e114 <_realloc_r+0x170>
    e0cc:	00c00404 	movi	r3,16
    e0d0:	1823883a 	mov	r17,r3
    e0d4:	003fce06 	br	e010 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e010>
    e0d8:	a825883a 	mov	r18,r21
    e0dc:	8445c83a 	sub	r2,r16,r17
    e0e0:	00c003c4 	movi	r3,15
    e0e4:	18802636 	bltu	r3,r2,e180 <_realloc_r+0x1dc>
    e0e8:	99800117 	ldw	r6,4(r19)
    e0ec:	9c07883a 	add	r3,r19,r16
    e0f0:	3180004c 	andi	r6,r6,1
    e0f4:	3420b03a 	or	r16,r6,r16
    e0f8:	9c000115 	stw	r16,4(r19)
    e0fc:	18800117 	ldw	r2,4(r3)
    e100:	10800054 	ori	r2,r2,1
    e104:	18800115 	stw	r2,4(r3)
    e108:	a009883a 	mov	r4,r20
    e10c:	00100140 	call	10014 <__malloc_unlock>
    e110:	9005883a 	mov	r2,r18
    e114:	dfc00917 	ldw	ra,36(sp)
    e118:	df000817 	ldw	fp,32(sp)
    e11c:	ddc00717 	ldw	r23,28(sp)
    e120:	dd800617 	ldw	r22,24(sp)
    e124:	dd400517 	ldw	r21,20(sp)
    e128:	dd000417 	ldw	r20,16(sp)
    e12c:	dcc00317 	ldw	r19,12(sp)
    e130:	dc800217 	ldw	r18,8(sp)
    e134:	dc400117 	ldw	r17,4(sp)
    e138:	dc000017 	ldw	r16,0(sp)
    e13c:	dec00a04 	addi	sp,sp,40
    e140:	f800283a 	ret
    e144:	017fff04 	movi	r5,-4
    e148:	414a703a 	and	r5,r8,r5
    e14c:	814d883a 	add	r6,r16,r5
    e150:	30c01f16 	blt	r6,r3,e1d0 <_realloc_r+0x22c>
    e154:	20800317 	ldw	r2,12(r4)
    e158:	20c00217 	ldw	r3,8(r4)
    e15c:	a825883a 	mov	r18,r21
    e160:	3021883a 	mov	r16,r6
    e164:	18800315 	stw	r2,12(r3)
    e168:	10c00215 	stw	r3,8(r2)
    e16c:	003fdb06 	br	e0dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0dc>
    e170:	00800304 	movi	r2,12
    e174:	a0800015 	stw	r2,0(r20)
    e178:	0005883a 	mov	r2,zero
    e17c:	003fe506 	br	e114 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e114>
    e180:	98c00117 	ldw	r3,4(r19)
    e184:	9c4b883a 	add	r5,r19,r17
    e188:	11000054 	ori	r4,r2,1
    e18c:	18c0004c 	andi	r3,r3,1
    e190:	1c62b03a 	or	r17,r3,r17
    e194:	9c400115 	stw	r17,4(r19)
    e198:	29000115 	stw	r4,4(r5)
    e19c:	2885883a 	add	r2,r5,r2
    e1a0:	10c00117 	ldw	r3,4(r2)
    e1a4:	29400204 	addi	r5,r5,8
    e1a8:	a009883a 	mov	r4,r20
    e1ac:	18c00054 	ori	r3,r3,1
    e1b0:	10c00115 	stw	r3,4(r2)
    e1b4:	000974c0 	call	974c <_free_r>
    e1b8:	003fd306 	br	e108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e108>
    e1bc:	017fff04 	movi	r5,-4
    e1c0:	414a703a 	and	r5,r8,r5
    e1c4:	89800404 	addi	r6,r17,16
    e1c8:	8151883a 	add	r8,r16,r5
    e1cc:	4180590e 	bge	r8,r6,e334 <_realloc_r+0x390>
    e1d0:	1080004c 	andi	r2,r2,1
    e1d4:	103f9e1e 	bne	r2,zero,e050 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e050>
    e1d8:	adbffe17 	ldw	r22,-8(r21)
    e1dc:	00bfff04 	movi	r2,-4
    e1e0:	9dadc83a 	sub	r22,r19,r22
    e1e4:	b1800117 	ldw	r6,4(r22)
    e1e8:	3084703a 	and	r2,r6,r2
    e1ec:	20002026 	beq	r4,zero,e270 <_realloc_r+0x2cc>
    e1f0:	80af883a 	add	r23,r16,r2
    e1f4:	b96f883a 	add	r23,r23,r5
    e1f8:	21c05f26 	beq	r4,r7,e378 <_realloc_r+0x3d4>
    e1fc:	b8c01c16 	blt	r23,r3,e270 <_realloc_r+0x2cc>
    e200:	20800317 	ldw	r2,12(r4)
    e204:	20c00217 	ldw	r3,8(r4)
    e208:	81bfff04 	addi	r6,r16,-4
    e20c:	01000904 	movi	r4,36
    e210:	18800315 	stw	r2,12(r3)
    e214:	10c00215 	stw	r3,8(r2)
    e218:	b0c00217 	ldw	r3,8(r22)
    e21c:	b0800317 	ldw	r2,12(r22)
    e220:	b4800204 	addi	r18,r22,8
    e224:	18800315 	stw	r2,12(r3)
    e228:	10c00215 	stw	r3,8(r2)
    e22c:	21801b36 	bltu	r4,r6,e29c <_realloc_r+0x2f8>
    e230:	008004c4 	movi	r2,19
    e234:	1180352e 	bgeu	r2,r6,e30c <_realloc_r+0x368>
    e238:	a8800017 	ldw	r2,0(r21)
    e23c:	b0800215 	stw	r2,8(r22)
    e240:	a8800117 	ldw	r2,4(r21)
    e244:	b0800315 	stw	r2,12(r22)
    e248:	008006c4 	movi	r2,27
    e24c:	11807f36 	bltu	r2,r6,e44c <_realloc_r+0x4a8>
    e250:	b0800404 	addi	r2,r22,16
    e254:	ad400204 	addi	r21,r21,8
    e258:	00002d06 	br	e310 <_realloc_r+0x36c>
    e25c:	adbffe17 	ldw	r22,-8(r21)
    e260:	00bfff04 	movi	r2,-4
    e264:	9dadc83a 	sub	r22,r19,r22
    e268:	b1000117 	ldw	r4,4(r22)
    e26c:	2084703a 	and	r2,r4,r2
    e270:	b03f7726 	beq	r22,zero,e050 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e050>
    e274:	80af883a 	add	r23,r16,r2
    e278:	b8ff7516 	blt	r23,r3,e050 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e050>
    e27c:	b0800317 	ldw	r2,12(r22)
    e280:	b0c00217 	ldw	r3,8(r22)
    e284:	81bfff04 	addi	r6,r16,-4
    e288:	01000904 	movi	r4,36
    e28c:	18800315 	stw	r2,12(r3)
    e290:	10c00215 	stw	r3,8(r2)
    e294:	b4800204 	addi	r18,r22,8
    e298:	21bfe52e 	bgeu	r4,r6,e230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e230>
    e29c:	a80b883a 	mov	r5,r21
    e2a0:	9009883a 	mov	r4,r18
    e2a4:	000dde80 	call	dde8 <memmove>
    e2a8:	b821883a 	mov	r16,r23
    e2ac:	b027883a 	mov	r19,r22
    e2b0:	003f8a06 	br	e0dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0dc>
    e2b4:	300b883a 	mov	r5,r6
    e2b8:	dfc00917 	ldw	ra,36(sp)
    e2bc:	df000817 	ldw	fp,32(sp)
    e2c0:	ddc00717 	ldw	r23,28(sp)
    e2c4:	dd800617 	ldw	r22,24(sp)
    e2c8:	dd400517 	ldw	r21,20(sp)
    e2cc:	dd000417 	ldw	r20,16(sp)
    e2d0:	dcc00317 	ldw	r19,12(sp)
    e2d4:	dc800217 	ldw	r18,8(sp)
    e2d8:	dc400117 	ldw	r17,4(sp)
    e2dc:	dc000017 	ldw	r16,0(sp)
    e2e0:	dec00a04 	addi	sp,sp,40
    e2e4:	0009e7c1 	jmpi	9e7c <_malloc_r>
    e2e8:	a8c00017 	ldw	r3,0(r21)
    e2ec:	90c00015 	stw	r3,0(r18)
    e2f0:	a8c00117 	ldw	r3,4(r21)
    e2f4:	90c00115 	stw	r3,4(r18)
    e2f8:	00c006c4 	movi	r3,27
    e2fc:	19804536 	bltu	r3,r6,e414 <_realloc_r+0x470>
    e300:	90800204 	addi	r2,r18,8
    e304:	a8c00204 	addi	r3,r21,8
    e308:	003f6306 	br	e098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e098>
    e30c:	9005883a 	mov	r2,r18
    e310:	a8c00017 	ldw	r3,0(r21)
    e314:	b821883a 	mov	r16,r23
    e318:	b027883a 	mov	r19,r22
    e31c:	10c00015 	stw	r3,0(r2)
    e320:	a8c00117 	ldw	r3,4(r21)
    e324:	10c00115 	stw	r3,4(r2)
    e328:	a8c00217 	ldw	r3,8(r21)
    e32c:	10c00215 	stw	r3,8(r2)
    e330:	003f6a06 	br	e0dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0dc>
    e334:	9c67883a 	add	r19,r19,r17
    e338:	4445c83a 	sub	r2,r8,r17
    e33c:	e4c00215 	stw	r19,8(fp)
    e340:	10800054 	ori	r2,r2,1
    e344:	98800115 	stw	r2,4(r19)
    e348:	a8bfff17 	ldw	r2,-4(r21)
    e34c:	a009883a 	mov	r4,r20
    e350:	1080004c 	andi	r2,r2,1
    e354:	1462b03a 	or	r17,r2,r17
    e358:	ac7fff15 	stw	r17,-4(r21)
    e35c:	00100140 	call	10014 <__malloc_unlock>
    e360:	a805883a 	mov	r2,r21
    e364:	003f6b06 	br	e114 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e114>
    e368:	a80b883a 	mov	r5,r21
    e36c:	9009883a 	mov	r4,r18
    e370:	000dde80 	call	dde8 <memmove>
    e374:	003f4e06 	br	e0b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0b0>
    e378:	89000404 	addi	r4,r17,16
    e37c:	b93fbc16 	blt	r23,r4,e270 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e270>
    e380:	b0800317 	ldw	r2,12(r22)
    e384:	b0c00217 	ldw	r3,8(r22)
    e388:	81bfff04 	addi	r6,r16,-4
    e38c:	01000904 	movi	r4,36
    e390:	18800315 	stw	r2,12(r3)
    e394:	10c00215 	stw	r3,8(r2)
    e398:	b4800204 	addi	r18,r22,8
    e39c:	21804336 	bltu	r4,r6,e4ac <_realloc_r+0x508>
    e3a0:	008004c4 	movi	r2,19
    e3a4:	11803f2e 	bgeu	r2,r6,e4a4 <_realloc_r+0x500>
    e3a8:	a8800017 	ldw	r2,0(r21)
    e3ac:	b0800215 	stw	r2,8(r22)
    e3b0:	a8800117 	ldw	r2,4(r21)
    e3b4:	b0800315 	stw	r2,12(r22)
    e3b8:	008006c4 	movi	r2,27
    e3bc:	11803f36 	bltu	r2,r6,e4bc <_realloc_r+0x518>
    e3c0:	b0800404 	addi	r2,r22,16
    e3c4:	ad400204 	addi	r21,r21,8
    e3c8:	a8c00017 	ldw	r3,0(r21)
    e3cc:	10c00015 	stw	r3,0(r2)
    e3d0:	a8c00117 	ldw	r3,4(r21)
    e3d4:	10c00115 	stw	r3,4(r2)
    e3d8:	a8c00217 	ldw	r3,8(r21)
    e3dc:	10c00215 	stw	r3,8(r2)
    e3e0:	b447883a 	add	r3,r22,r17
    e3e4:	bc45c83a 	sub	r2,r23,r17
    e3e8:	e0c00215 	stw	r3,8(fp)
    e3ec:	10800054 	ori	r2,r2,1
    e3f0:	18800115 	stw	r2,4(r3)
    e3f4:	b0800117 	ldw	r2,4(r22)
    e3f8:	a009883a 	mov	r4,r20
    e3fc:	1080004c 	andi	r2,r2,1
    e400:	1462b03a 	or	r17,r2,r17
    e404:	b4400115 	stw	r17,4(r22)
    e408:	00100140 	call	10014 <__malloc_unlock>
    e40c:	9005883a 	mov	r2,r18
    e410:	003f4006 	br	e114 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e114>
    e414:	a8c00217 	ldw	r3,8(r21)
    e418:	90c00215 	stw	r3,8(r18)
    e41c:	a8c00317 	ldw	r3,12(r21)
    e420:	90c00315 	stw	r3,12(r18)
    e424:	30801126 	beq	r6,r2,e46c <_realloc_r+0x4c8>
    e428:	90800404 	addi	r2,r18,16
    e42c:	a8c00404 	addi	r3,r21,16
    e430:	003f1906 	br	e098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e098>
    e434:	90ffff17 	ldw	r3,-4(r18)
    e438:	00bfff04 	movi	r2,-4
    e43c:	a825883a 	mov	r18,r21
    e440:	1884703a 	and	r2,r3,r2
    e444:	80a1883a 	add	r16,r16,r2
    e448:	003f2406 	br	e0dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0dc>
    e44c:	a8800217 	ldw	r2,8(r21)
    e450:	b0800415 	stw	r2,16(r22)
    e454:	a8800317 	ldw	r2,12(r21)
    e458:	b0800515 	stw	r2,20(r22)
    e45c:	31000a26 	beq	r6,r4,e488 <_realloc_r+0x4e4>
    e460:	b0800604 	addi	r2,r22,24
    e464:	ad400404 	addi	r21,r21,16
    e468:	003fa906 	br	e310 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e310>
    e46c:	a9000417 	ldw	r4,16(r21)
    e470:	90800604 	addi	r2,r18,24
    e474:	a8c00604 	addi	r3,r21,24
    e478:	91000415 	stw	r4,16(r18)
    e47c:	a9000517 	ldw	r4,20(r21)
    e480:	91000515 	stw	r4,20(r18)
    e484:	003f0406 	br	e098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e098>
    e488:	a8c00417 	ldw	r3,16(r21)
    e48c:	ad400604 	addi	r21,r21,24
    e490:	b0800804 	addi	r2,r22,32
    e494:	b0c00615 	stw	r3,24(r22)
    e498:	a8ffff17 	ldw	r3,-4(r21)
    e49c:	b0c00715 	stw	r3,28(r22)
    e4a0:	003f9b06 	br	e310 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e310>
    e4a4:	9005883a 	mov	r2,r18
    e4a8:	003fc706 	br	e3c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e3c8>
    e4ac:	a80b883a 	mov	r5,r21
    e4b0:	9009883a 	mov	r4,r18
    e4b4:	000dde80 	call	dde8 <memmove>
    e4b8:	003fc906 	br	e3e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e3e0>
    e4bc:	a8800217 	ldw	r2,8(r21)
    e4c0:	b0800415 	stw	r2,16(r22)
    e4c4:	a8800317 	ldw	r2,12(r21)
    e4c8:	b0800515 	stw	r2,20(r22)
    e4cc:	31000726 	beq	r6,r4,e4ec <_realloc_r+0x548>
    e4d0:	b0800604 	addi	r2,r22,24
    e4d4:	ad400404 	addi	r21,r21,16
    e4d8:	003fbb06 	br	e3c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e3c8>
    e4dc:	a009883a 	mov	r4,r20
    e4e0:	00100140 	call	10014 <__malloc_unlock>
    e4e4:	0005883a 	mov	r2,zero
    e4e8:	003f0a06 	br	e114 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e114>
    e4ec:	a8c00417 	ldw	r3,16(r21)
    e4f0:	ad400604 	addi	r21,r21,24
    e4f4:	b0800804 	addi	r2,r22,32
    e4f8:	b0c00615 	stw	r3,24(r22)
    e4fc:	a8ffff17 	ldw	r3,-4(r21)
    e500:	b0c00715 	stw	r3,28(r22)
    e504:	003fb006 	br	e3c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e3c8>

0000e508 <__swbuf_r>:
    e508:	defffb04 	addi	sp,sp,-20
    e50c:	dcc00315 	stw	r19,12(sp)
    e510:	dc800215 	stw	r18,8(sp)
    e514:	dc000015 	stw	r16,0(sp)
    e518:	dfc00415 	stw	ra,16(sp)
    e51c:	dc400115 	stw	r17,4(sp)
    e520:	2025883a 	mov	r18,r4
    e524:	2827883a 	mov	r19,r5
    e528:	3021883a 	mov	r16,r6
    e52c:	20000226 	beq	r4,zero,e538 <__swbuf_r+0x30>
    e530:	20800e17 	ldw	r2,56(r4)
    e534:	10004226 	beq	r2,zero,e640 <__swbuf_r+0x138>
    e538:	80800617 	ldw	r2,24(r16)
    e53c:	8100030b 	ldhu	r4,12(r16)
    e540:	80800215 	stw	r2,8(r16)
    e544:	2080020c 	andi	r2,r4,8
    e548:	10003626 	beq	r2,zero,e624 <__swbuf_r+0x11c>
    e54c:	80c00417 	ldw	r3,16(r16)
    e550:	18003426 	beq	r3,zero,e624 <__swbuf_r+0x11c>
    e554:	2088000c 	andi	r2,r4,8192
    e558:	9c403fcc 	andi	r17,r19,255
    e55c:	10001a26 	beq	r2,zero,e5c8 <__swbuf_r+0xc0>
    e560:	80800017 	ldw	r2,0(r16)
    e564:	81000517 	ldw	r4,20(r16)
    e568:	10c7c83a 	sub	r3,r2,r3
    e56c:	1900200e 	bge	r3,r4,e5f0 <__swbuf_r+0xe8>
    e570:	18c00044 	addi	r3,r3,1
    e574:	81000217 	ldw	r4,8(r16)
    e578:	11400044 	addi	r5,r2,1
    e57c:	81400015 	stw	r5,0(r16)
    e580:	213fffc4 	addi	r4,r4,-1
    e584:	81000215 	stw	r4,8(r16)
    e588:	14c00005 	stb	r19,0(r2)
    e58c:	80800517 	ldw	r2,20(r16)
    e590:	10c01e26 	beq	r2,r3,e60c <__swbuf_r+0x104>
    e594:	8080030b 	ldhu	r2,12(r16)
    e598:	1080004c 	andi	r2,r2,1
    e59c:	10000226 	beq	r2,zero,e5a8 <__swbuf_r+0xa0>
    e5a0:	00800284 	movi	r2,10
    e5a4:	88801926 	beq	r17,r2,e60c <__swbuf_r+0x104>
    e5a8:	8805883a 	mov	r2,r17
    e5ac:	dfc00417 	ldw	ra,16(sp)
    e5b0:	dcc00317 	ldw	r19,12(sp)
    e5b4:	dc800217 	ldw	r18,8(sp)
    e5b8:	dc400117 	ldw	r17,4(sp)
    e5bc:	dc000017 	ldw	r16,0(sp)
    e5c0:	dec00504 	addi	sp,sp,20
    e5c4:	f800283a 	ret
    e5c8:	81401917 	ldw	r5,100(r16)
    e5cc:	00b7ffc4 	movi	r2,-8193
    e5d0:	21080014 	ori	r4,r4,8192
    e5d4:	2884703a 	and	r2,r5,r2
    e5d8:	80801915 	stw	r2,100(r16)
    e5dc:	80800017 	ldw	r2,0(r16)
    e5e0:	8100030d 	sth	r4,12(r16)
    e5e4:	81000517 	ldw	r4,20(r16)
    e5e8:	10c7c83a 	sub	r3,r2,r3
    e5ec:	193fe016 	blt	r3,r4,e570 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e570>
    e5f0:	800b883a 	mov	r5,r16
    e5f4:	9009883a 	mov	r4,r18
    e5f8:	00091fc0 	call	91fc <_fflush_r>
    e5fc:	1000071e 	bne	r2,zero,e61c <__swbuf_r+0x114>
    e600:	80800017 	ldw	r2,0(r16)
    e604:	00c00044 	movi	r3,1
    e608:	003fda06 	br	e574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e574>
    e60c:	800b883a 	mov	r5,r16
    e610:	9009883a 	mov	r4,r18
    e614:	00091fc0 	call	91fc <_fflush_r>
    e618:	103fe326 	beq	r2,zero,e5a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e5a8>
    e61c:	00bfffc4 	movi	r2,-1
    e620:	003fe206 	br	e5ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e5ac>
    e624:	800b883a 	mov	r5,r16
    e628:	9009883a 	mov	r4,r18
    e62c:	00076040 	call	7604 <__swsetup_r>
    e630:	103ffa1e 	bne	r2,zero,e61c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e61c>
    e634:	8100030b 	ldhu	r4,12(r16)
    e638:	80c00417 	ldw	r3,16(r16)
    e63c:	003fc506 	br	e554 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e554>
    e640:	00095d80 	call	95d8 <__sinit>
    e644:	003fbc06 	br	e538 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e538>

0000e648 <__swbuf>:
    e648:	008000b4 	movhi	r2,2
    e64c:	10b73804 	addi	r2,r2,-8992
    e650:	280d883a 	mov	r6,r5
    e654:	200b883a 	mov	r5,r4
    e658:	11000017 	ldw	r4,0(r2)
    e65c:	000e5081 	jmpi	e508 <__swbuf_r>

0000e660 <_wcrtomb_r>:
    e660:	defff604 	addi	sp,sp,-40
    e664:	008000b4 	movhi	r2,2
    e668:	dc800815 	stw	r18,32(sp)
    e66c:	dc400715 	stw	r17,28(sp)
    e670:	dc000615 	stw	r16,24(sp)
    e674:	10b73c04 	addi	r2,r2,-8976
    e678:	dfc00915 	stw	ra,36(sp)
    e67c:	2021883a 	mov	r16,r4
    e680:	3823883a 	mov	r17,r7
    e684:	14800017 	ldw	r18,0(r2)
    e688:	28001426 	beq	r5,zero,e6dc <_wcrtomb_r+0x7c>
    e68c:	d9400415 	stw	r5,16(sp)
    e690:	d9800515 	stw	r6,20(sp)
    e694:	0009c600 	call	9c60 <__locale_charset>
    e698:	d9800517 	ldw	r6,20(sp)
    e69c:	d9400417 	ldw	r5,16(sp)
    e6a0:	100f883a 	mov	r7,r2
    e6a4:	dc400015 	stw	r17,0(sp)
    e6a8:	8009883a 	mov	r4,r16
    e6ac:	903ee83a 	callr	r18
    e6b0:	00ffffc4 	movi	r3,-1
    e6b4:	10c0031e 	bne	r2,r3,e6c4 <_wcrtomb_r+0x64>
    e6b8:	88000015 	stw	zero,0(r17)
    e6bc:	00c02284 	movi	r3,138
    e6c0:	80c00015 	stw	r3,0(r16)
    e6c4:	dfc00917 	ldw	ra,36(sp)
    e6c8:	dc800817 	ldw	r18,32(sp)
    e6cc:	dc400717 	ldw	r17,28(sp)
    e6d0:	dc000617 	ldw	r16,24(sp)
    e6d4:	dec00a04 	addi	sp,sp,40
    e6d8:	f800283a 	ret
    e6dc:	0009c600 	call	9c60 <__locale_charset>
    e6e0:	100f883a 	mov	r7,r2
    e6e4:	dc400015 	stw	r17,0(sp)
    e6e8:	000d883a 	mov	r6,zero
    e6ec:	d9400104 	addi	r5,sp,4
    e6f0:	8009883a 	mov	r4,r16
    e6f4:	903ee83a 	callr	r18
    e6f8:	003fed06 	br	e6b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e6b0>

0000e6fc <wcrtomb>:
    e6fc:	defff604 	addi	sp,sp,-40
    e700:	008000b4 	movhi	r2,2
    e704:	dc800615 	stw	r18,24(sp)
    e708:	dc400515 	stw	r17,20(sp)
    e70c:	10b73804 	addi	r2,r2,-8992
    e710:	dfc00915 	stw	ra,36(sp)
    e714:	dd000815 	stw	r20,32(sp)
    e718:	dcc00715 	stw	r19,28(sp)
    e71c:	dc000415 	stw	r16,16(sp)
    e720:	3025883a 	mov	r18,r6
    e724:	14400017 	ldw	r17,0(r2)
    e728:	20001926 	beq	r4,zero,e790 <wcrtomb+0x94>
    e72c:	008000b4 	movhi	r2,2
    e730:	10b73c04 	addi	r2,r2,-8976
    e734:	15000017 	ldw	r20,0(r2)
    e738:	2021883a 	mov	r16,r4
    e73c:	2827883a 	mov	r19,r5
    e740:	0009c600 	call	9c60 <__locale_charset>
    e744:	100f883a 	mov	r7,r2
    e748:	dc800015 	stw	r18,0(sp)
    e74c:	980d883a 	mov	r6,r19
    e750:	800b883a 	mov	r5,r16
    e754:	8809883a 	mov	r4,r17
    e758:	a03ee83a 	callr	r20
    e75c:	00ffffc4 	movi	r3,-1
    e760:	10c0031e 	bne	r2,r3,e770 <wcrtomb+0x74>
    e764:	90000015 	stw	zero,0(r18)
    e768:	00c02284 	movi	r3,138
    e76c:	88c00015 	stw	r3,0(r17)
    e770:	dfc00917 	ldw	ra,36(sp)
    e774:	dd000817 	ldw	r20,32(sp)
    e778:	dcc00717 	ldw	r19,28(sp)
    e77c:	dc800617 	ldw	r18,24(sp)
    e780:	dc400517 	ldw	r17,20(sp)
    e784:	dc000417 	ldw	r16,16(sp)
    e788:	dec00a04 	addi	sp,sp,40
    e78c:	f800283a 	ret
    e790:	008000b4 	movhi	r2,2
    e794:	10b73c04 	addi	r2,r2,-8976
    e798:	14000017 	ldw	r16,0(r2)
    e79c:	0009c600 	call	9c60 <__locale_charset>
    e7a0:	100f883a 	mov	r7,r2
    e7a4:	dc800015 	stw	r18,0(sp)
    e7a8:	000d883a 	mov	r6,zero
    e7ac:	d9400104 	addi	r5,sp,4
    e7b0:	8809883a 	mov	r4,r17
    e7b4:	803ee83a 	callr	r16
    e7b8:	003fe806 	br	e75c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e75c>

0000e7bc <__ascii_wctomb>:
    e7bc:	28000526 	beq	r5,zero,e7d4 <__ascii_wctomb+0x18>
    e7c0:	00803fc4 	movi	r2,255
    e7c4:	11800536 	bltu	r2,r6,e7dc <__ascii_wctomb+0x20>
    e7c8:	29800005 	stb	r6,0(r5)
    e7cc:	00800044 	movi	r2,1
    e7d0:	f800283a 	ret
    e7d4:	0005883a 	mov	r2,zero
    e7d8:	f800283a 	ret
    e7dc:	00802284 	movi	r2,138
    e7e0:	20800015 	stw	r2,0(r4)
    e7e4:	00bfffc4 	movi	r2,-1
    e7e8:	f800283a 	ret

0000e7ec <_wctomb_r>:
    e7ec:	008000b4 	movhi	r2,2
    e7f0:	defff904 	addi	sp,sp,-28
    e7f4:	10b73c04 	addi	r2,r2,-8976
    e7f8:	dfc00615 	stw	ra,24(sp)
    e7fc:	dc400515 	stw	r17,20(sp)
    e800:	dc000415 	stw	r16,16(sp)
    e804:	3823883a 	mov	r17,r7
    e808:	14000017 	ldw	r16,0(r2)
    e80c:	d9000115 	stw	r4,4(sp)
    e810:	d9400215 	stw	r5,8(sp)
    e814:	d9800315 	stw	r6,12(sp)
    e818:	0009c600 	call	9c60 <__locale_charset>
    e81c:	d9800317 	ldw	r6,12(sp)
    e820:	d9400217 	ldw	r5,8(sp)
    e824:	d9000117 	ldw	r4,4(sp)
    e828:	100f883a 	mov	r7,r2
    e82c:	dc400015 	stw	r17,0(sp)
    e830:	803ee83a 	callr	r16
    e834:	dfc00617 	ldw	ra,24(sp)
    e838:	dc400517 	ldw	r17,20(sp)
    e83c:	dc000417 	ldw	r16,16(sp)
    e840:	dec00704 	addi	sp,sp,28
    e844:	f800283a 	ret

0000e848 <__udivdi3>:
    e848:	defff504 	addi	sp,sp,-44
    e84c:	dcc00415 	stw	r19,16(sp)
    e850:	dc000115 	stw	r16,4(sp)
    e854:	dfc00a15 	stw	ra,40(sp)
    e858:	df000915 	stw	fp,36(sp)
    e85c:	ddc00815 	stw	r23,32(sp)
    e860:	dd800715 	stw	r22,28(sp)
    e864:	dd400615 	stw	r21,24(sp)
    e868:	dd000515 	stw	r20,20(sp)
    e86c:	dc800315 	stw	r18,12(sp)
    e870:	dc400215 	stw	r17,8(sp)
    e874:	2027883a 	mov	r19,r4
    e878:	2821883a 	mov	r16,r5
    e87c:	3800411e 	bne	r7,zero,e984 <__udivdi3+0x13c>
    e880:	3023883a 	mov	r17,r6
    e884:	2025883a 	mov	r18,r4
    e888:	2980522e 	bgeu	r5,r6,e9d4 <__udivdi3+0x18c>
    e88c:	00bfffd4 	movui	r2,65535
    e890:	282d883a 	mov	r22,r5
    e894:	1180a836 	bltu	r2,r6,eb38 <__udivdi3+0x2f0>
    e898:	00803fc4 	movi	r2,255
    e89c:	1185803a 	cmpltu	r2,r2,r6
    e8a0:	100490fa 	slli	r2,r2,3
    e8a4:	3086d83a 	srl	r3,r6,r2
    e8a8:	010000b4 	movhi	r4,2
    e8ac:	212e1e04 	addi	r4,r4,-18312
    e8b0:	20c7883a 	add	r3,r4,r3
    e8b4:	18c00003 	ldbu	r3,0(r3)
    e8b8:	1885883a 	add	r2,r3,r2
    e8bc:	00c00804 	movi	r3,32
    e8c0:	1887c83a 	sub	r3,r3,r2
    e8c4:	18000526 	beq	r3,zero,e8dc <__udivdi3+0x94>
    e8c8:	80e0983a 	sll	r16,r16,r3
    e8cc:	9884d83a 	srl	r2,r19,r2
    e8d0:	30e2983a 	sll	r17,r6,r3
    e8d4:	98e4983a 	sll	r18,r19,r3
    e8d8:	142cb03a 	or	r22,r2,r16
    e8dc:	882ad43a 	srli	r21,r17,16
    e8e0:	b009883a 	mov	r4,r22
    e8e4:	8d3fffcc 	andi	r20,r17,65535
    e8e8:	a80b883a 	mov	r5,r21
    e8ec:	0002b8c0 	call	2b8c <__umodsi3>
    e8f0:	b009883a 	mov	r4,r22
    e8f4:	a80b883a 	mov	r5,r21
    e8f8:	1027883a 	mov	r19,r2
    e8fc:	0002b280 	call	2b28 <__udivsi3>
    e900:	102d883a 	mov	r22,r2
    e904:	9826943a 	slli	r19,r19,16
    e908:	9004d43a 	srli	r2,r18,16
    e90c:	a5a1383a 	mul	r16,r20,r22
    e910:	14c4b03a 	or	r2,r2,r19
    e914:	1400052e 	bgeu	r2,r16,e92c <__udivdi3+0xe4>
    e918:	1445883a 	add	r2,r2,r17
    e91c:	b0ffffc4 	addi	r3,r22,-1
    e920:	14400136 	bltu	r2,r17,e928 <__udivdi3+0xe0>
    e924:	14012336 	bltu	r2,r16,edb4 <__udivdi3+0x56c>
    e928:	182d883a 	mov	r22,r3
    e92c:	1421c83a 	sub	r16,r2,r16
    e930:	a80b883a 	mov	r5,r21
    e934:	8009883a 	mov	r4,r16
    e938:	0002b8c0 	call	2b8c <__umodsi3>
    e93c:	1027883a 	mov	r19,r2
    e940:	a80b883a 	mov	r5,r21
    e944:	8009883a 	mov	r4,r16
    e948:	0002b280 	call	2b28 <__udivsi3>
    e94c:	9826943a 	slli	r19,r19,16
    e950:	a0a9383a 	mul	r20,r20,r2
    e954:	94bfffcc 	andi	r18,r18,65535
    e958:	94e4b03a 	or	r18,r18,r19
    e95c:	9500052e 	bgeu	r18,r20,e974 <__udivdi3+0x12c>
    e960:	8ca5883a 	add	r18,r17,r18
    e964:	10ffffc4 	addi	r3,r2,-1
    e968:	9440f136 	bltu	r18,r17,ed30 <__udivdi3+0x4e8>
    e96c:	9500f02e 	bgeu	r18,r20,ed30 <__udivdi3+0x4e8>
    e970:	10bfff84 	addi	r2,r2,-2
    e974:	b00c943a 	slli	r6,r22,16
    e978:	0007883a 	mov	r3,zero
    e97c:	3084b03a 	or	r2,r6,r2
    e980:	00005906 	br	eae8 <__udivdi3+0x2a0>
    e984:	29c05636 	bltu	r5,r7,eae0 <__udivdi3+0x298>
    e988:	00bfffd4 	movui	r2,65535
    e98c:	11c0622e 	bgeu	r2,r7,eb18 <__udivdi3+0x2d0>
    e990:	00804034 	movhi	r2,256
    e994:	10bfffc4 	addi	r2,r2,-1
    e998:	11c0ee36 	bltu	r2,r7,ed54 <__udivdi3+0x50c>
    e99c:	00800404 	movi	r2,16
    e9a0:	3886d83a 	srl	r3,r7,r2
    e9a4:	010000b4 	movhi	r4,2
    e9a8:	212e1e04 	addi	r4,r4,-18312
    e9ac:	20c7883a 	add	r3,r4,r3
    e9b0:	18c00003 	ldbu	r3,0(r3)
    e9b4:	05400804 	movi	r21,32
    e9b8:	1885883a 	add	r2,r3,r2
    e9bc:	a8abc83a 	sub	r21,r21,r2
    e9c0:	a800621e 	bne	r21,zero,eb4c <__udivdi3+0x304>
    e9c4:	3c00e936 	bltu	r7,r16,ed6c <__udivdi3+0x524>
    e9c8:	9985403a 	cmpgeu	r2,r19,r6
    e9cc:	0007883a 	mov	r3,zero
    e9d0:	00004506 	br	eae8 <__udivdi3+0x2a0>
    e9d4:	3000041e 	bne	r6,zero,e9e8 <__udivdi3+0x1a0>
    e9d8:	000b883a 	mov	r5,zero
    e9dc:	01000044 	movi	r4,1
    e9e0:	0002b280 	call	2b28 <__udivsi3>
    e9e4:	1023883a 	mov	r17,r2
    e9e8:	00bfffd4 	movui	r2,65535
    e9ec:	14404e2e 	bgeu	r2,r17,eb28 <__udivdi3+0x2e0>
    e9f0:	00804034 	movhi	r2,256
    e9f4:	10bfffc4 	addi	r2,r2,-1
    e9f8:	1440d836 	bltu	r2,r17,ed5c <__udivdi3+0x514>
    e9fc:	00800404 	movi	r2,16
    ea00:	8886d83a 	srl	r3,r17,r2
    ea04:	010000b4 	movhi	r4,2
    ea08:	212e1e04 	addi	r4,r4,-18312
    ea0c:	20c7883a 	add	r3,r4,r3
    ea10:	18c00003 	ldbu	r3,0(r3)
    ea14:	1885883a 	add	r2,r3,r2
    ea18:	00c00804 	movi	r3,32
    ea1c:	1887c83a 	sub	r3,r3,r2
    ea20:	18008f1e 	bne	r3,zero,ec60 <__udivdi3+0x418>
    ea24:	882ad43a 	srli	r21,r17,16
    ea28:	8461c83a 	sub	r16,r16,r17
    ea2c:	8d3fffcc 	andi	r20,r17,65535
    ea30:	00c00044 	movi	r3,1
    ea34:	8009883a 	mov	r4,r16
    ea38:	a80b883a 	mov	r5,r21
    ea3c:	d8c00015 	stw	r3,0(sp)
    ea40:	0002b8c0 	call	2b8c <__umodsi3>
    ea44:	8009883a 	mov	r4,r16
    ea48:	a80b883a 	mov	r5,r21
    ea4c:	1027883a 	mov	r19,r2
    ea50:	0002b280 	call	2b28 <__udivsi3>
    ea54:	9826943a 	slli	r19,r19,16
    ea58:	9008d43a 	srli	r4,r18,16
    ea5c:	1521383a 	mul	r16,r2,r20
    ea60:	102d883a 	mov	r22,r2
    ea64:	24c8b03a 	or	r4,r4,r19
    ea68:	d8c00017 	ldw	r3,0(sp)
    ea6c:	2400052e 	bgeu	r4,r16,ea84 <__udivdi3+0x23c>
    ea70:	2449883a 	add	r4,r4,r17
    ea74:	b0bfffc4 	addi	r2,r22,-1
    ea78:	24400136 	bltu	r4,r17,ea80 <__udivdi3+0x238>
    ea7c:	2400ca36 	bltu	r4,r16,eda8 <__udivdi3+0x560>
    ea80:	102d883a 	mov	r22,r2
    ea84:	2421c83a 	sub	r16,r4,r16
    ea88:	a80b883a 	mov	r5,r21
    ea8c:	8009883a 	mov	r4,r16
    ea90:	d8c00015 	stw	r3,0(sp)
    ea94:	0002b8c0 	call	2b8c <__umodsi3>
    ea98:	1027883a 	mov	r19,r2
    ea9c:	a80b883a 	mov	r5,r21
    eaa0:	8009883a 	mov	r4,r16
    eaa4:	0002b280 	call	2b28 <__udivsi3>
    eaa8:	9826943a 	slli	r19,r19,16
    eaac:	1529383a 	mul	r20,r2,r20
    eab0:	94bfffcc 	andi	r18,r18,65535
    eab4:	94e4b03a 	or	r18,r18,r19
    eab8:	d8c00017 	ldw	r3,0(sp)
    eabc:	9500052e 	bgeu	r18,r20,ead4 <__udivdi3+0x28c>
    eac0:	8ca5883a 	add	r18,r17,r18
    eac4:	113fffc4 	addi	r4,r2,-1
    eac8:	94409736 	bltu	r18,r17,ed28 <__udivdi3+0x4e0>
    eacc:	9500962e 	bgeu	r18,r20,ed28 <__udivdi3+0x4e0>
    ead0:	10bfff84 	addi	r2,r2,-2
    ead4:	b00c943a 	slli	r6,r22,16
    ead8:	3084b03a 	or	r2,r6,r2
    eadc:	00000206 	br	eae8 <__udivdi3+0x2a0>
    eae0:	0007883a 	mov	r3,zero
    eae4:	0005883a 	mov	r2,zero
    eae8:	dfc00a17 	ldw	ra,40(sp)
    eaec:	df000917 	ldw	fp,36(sp)
    eaf0:	ddc00817 	ldw	r23,32(sp)
    eaf4:	dd800717 	ldw	r22,28(sp)
    eaf8:	dd400617 	ldw	r21,24(sp)
    eafc:	dd000517 	ldw	r20,20(sp)
    eb00:	dcc00417 	ldw	r19,16(sp)
    eb04:	dc800317 	ldw	r18,12(sp)
    eb08:	dc400217 	ldw	r17,8(sp)
    eb0c:	dc000117 	ldw	r16,4(sp)
    eb10:	dec00b04 	addi	sp,sp,44
    eb14:	f800283a 	ret
    eb18:	00803fc4 	movi	r2,255
    eb1c:	11c5803a 	cmpltu	r2,r2,r7
    eb20:	100490fa 	slli	r2,r2,3
    eb24:	003f9e06 	br	e9a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e9a0>
    eb28:	00803fc4 	movi	r2,255
    eb2c:	1445803a 	cmpltu	r2,r2,r17
    eb30:	100490fa 	slli	r2,r2,3
    eb34:	003fb206 	br	ea00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea00>
    eb38:	00804034 	movhi	r2,256
    eb3c:	10bfffc4 	addi	r2,r2,-1
    eb40:	11808836 	bltu	r2,r6,ed64 <__udivdi3+0x51c>
    eb44:	00800404 	movi	r2,16
    eb48:	003f5606 	br	e8a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e8a4>
    eb4c:	30aed83a 	srl	r23,r6,r2
    eb50:	3d4e983a 	sll	r7,r7,r21
    eb54:	80acd83a 	srl	r22,r16,r2
    eb58:	9884d83a 	srl	r2,r19,r2
    eb5c:	3deeb03a 	or	r23,r7,r23
    eb60:	b824d43a 	srli	r18,r23,16
    eb64:	8560983a 	sll	r16,r16,r21
    eb68:	b009883a 	mov	r4,r22
    eb6c:	900b883a 	mov	r5,r18
    eb70:	3568983a 	sll	r20,r6,r21
    eb74:	1420b03a 	or	r16,r2,r16
    eb78:	0002b8c0 	call	2b8c <__umodsi3>
    eb7c:	b009883a 	mov	r4,r22
    eb80:	900b883a 	mov	r5,r18
    eb84:	1023883a 	mov	r17,r2
    eb88:	0002b280 	call	2b28 <__udivsi3>
    eb8c:	8808943a 	slli	r4,r17,16
    eb90:	bf3fffcc 	andi	fp,r23,65535
    eb94:	8006d43a 	srli	r3,r16,16
    eb98:	e0a3383a 	mul	r17,fp,r2
    eb9c:	100d883a 	mov	r6,r2
    eba0:	1906b03a 	or	r3,r3,r4
    eba4:	1c40042e 	bgeu	r3,r17,ebb8 <__udivdi3+0x370>
    eba8:	1dc7883a 	add	r3,r3,r23
    ebac:	10bfffc4 	addi	r2,r2,-1
    ebb0:	1dc0752e 	bgeu	r3,r23,ed88 <__udivdi3+0x540>
    ebb4:	100d883a 	mov	r6,r2
    ebb8:	1c63c83a 	sub	r17,r3,r17
    ebbc:	900b883a 	mov	r5,r18
    ebc0:	8809883a 	mov	r4,r17
    ebc4:	d9800015 	stw	r6,0(sp)
    ebc8:	0002b8c0 	call	2b8c <__umodsi3>
    ebcc:	102d883a 	mov	r22,r2
    ebd0:	8809883a 	mov	r4,r17
    ebd4:	900b883a 	mov	r5,r18
    ebd8:	0002b280 	call	2b28 <__udivsi3>
    ebdc:	b02c943a 	slli	r22,r22,16
    ebe0:	e089383a 	mul	r4,fp,r2
    ebe4:	843fffcc 	andi	r16,r16,65535
    ebe8:	85a0b03a 	or	r16,r16,r22
    ebec:	d9800017 	ldw	r6,0(sp)
    ebf0:	8100042e 	bgeu	r16,r4,ec04 <__udivdi3+0x3bc>
    ebf4:	85e1883a 	add	r16,r16,r23
    ebf8:	10ffffc4 	addi	r3,r2,-1
    ebfc:	85c05e2e 	bgeu	r16,r23,ed78 <__udivdi3+0x530>
    ec00:	1805883a 	mov	r2,r3
    ec04:	300c943a 	slli	r6,r6,16
    ec08:	a17fffcc 	andi	r5,r20,65535
    ec0c:	a028d43a 	srli	r20,r20,16
    ec10:	3084b03a 	or	r2,r6,r2
    ec14:	10ffffcc 	andi	r3,r2,65535
    ec18:	100cd43a 	srli	r6,r2,16
    ec1c:	194f383a 	mul	r7,r3,r5
    ec20:	1d07383a 	mul	r3,r3,r20
    ec24:	314b383a 	mul	r5,r6,r5
    ec28:	3810d43a 	srli	r8,r7,16
    ec2c:	8121c83a 	sub	r16,r16,r4
    ec30:	1947883a 	add	r3,r3,r5
    ec34:	40c7883a 	add	r3,r8,r3
    ec38:	350d383a 	mul	r6,r6,r20
    ec3c:	1940022e 	bgeu	r3,r5,ec48 <__udivdi3+0x400>
    ec40:	01000074 	movhi	r4,1
    ec44:	310d883a 	add	r6,r6,r4
    ec48:	1828d43a 	srli	r20,r3,16
    ec4c:	a18d883a 	add	r6,r20,r6
    ec50:	81803e36 	bltu	r16,r6,ed4c <__udivdi3+0x504>
    ec54:	81803826 	beq	r16,r6,ed38 <__udivdi3+0x4f0>
    ec58:	0007883a 	mov	r3,zero
    ec5c:	003fa206 	br	eae8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eae8>
    ec60:	88e2983a 	sll	r17,r17,r3
    ec64:	80a8d83a 	srl	r20,r16,r2
    ec68:	80e0983a 	sll	r16,r16,r3
    ec6c:	882ad43a 	srli	r21,r17,16
    ec70:	9884d83a 	srl	r2,r19,r2
    ec74:	a009883a 	mov	r4,r20
    ec78:	a80b883a 	mov	r5,r21
    ec7c:	142eb03a 	or	r23,r2,r16
    ec80:	98e4983a 	sll	r18,r19,r3
    ec84:	0002b8c0 	call	2b8c <__umodsi3>
    ec88:	a009883a 	mov	r4,r20
    ec8c:	a80b883a 	mov	r5,r21
    ec90:	1021883a 	mov	r16,r2
    ec94:	0002b280 	call	2b28 <__udivsi3>
    ec98:	1039883a 	mov	fp,r2
    ec9c:	8d3fffcc 	andi	r20,r17,65535
    eca0:	8020943a 	slli	r16,r16,16
    eca4:	b804d43a 	srli	r2,r23,16
    eca8:	a72d383a 	mul	r22,r20,fp
    ecac:	1404b03a 	or	r2,r2,r16
    ecb0:	1580062e 	bgeu	r2,r22,eccc <__udivdi3+0x484>
    ecb4:	1445883a 	add	r2,r2,r17
    ecb8:	e0ffffc4 	addi	r3,fp,-1
    ecbc:	14403836 	bltu	r2,r17,eda0 <__udivdi3+0x558>
    ecc0:	1580372e 	bgeu	r2,r22,eda0 <__udivdi3+0x558>
    ecc4:	e73fff84 	addi	fp,fp,-2
    ecc8:	1445883a 	add	r2,r2,r17
    eccc:	15adc83a 	sub	r22,r2,r22
    ecd0:	a80b883a 	mov	r5,r21
    ecd4:	b009883a 	mov	r4,r22
    ecd8:	0002b8c0 	call	2b8c <__umodsi3>
    ecdc:	1027883a 	mov	r19,r2
    ece0:	b009883a 	mov	r4,r22
    ece4:	a80b883a 	mov	r5,r21
    ece8:	0002b280 	call	2b28 <__udivsi3>
    ecec:	9826943a 	slli	r19,r19,16
    ecf0:	a0a1383a 	mul	r16,r20,r2
    ecf4:	b93fffcc 	andi	r4,r23,65535
    ecf8:	24c8b03a 	or	r4,r4,r19
    ecfc:	2400062e 	bgeu	r4,r16,ed18 <__udivdi3+0x4d0>
    ed00:	2449883a 	add	r4,r4,r17
    ed04:	10ffffc4 	addi	r3,r2,-1
    ed08:	24402336 	bltu	r4,r17,ed98 <__udivdi3+0x550>
    ed0c:	2400222e 	bgeu	r4,r16,ed98 <__udivdi3+0x550>
    ed10:	10bfff84 	addi	r2,r2,-2
    ed14:	2449883a 	add	r4,r4,r17
    ed18:	e038943a 	slli	fp,fp,16
    ed1c:	2421c83a 	sub	r16,r4,r16
    ed20:	e086b03a 	or	r3,fp,r2
    ed24:	003f4306 	br	ea34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea34>
    ed28:	2005883a 	mov	r2,r4
    ed2c:	003f6906 	br	ead4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ead4>
    ed30:	1805883a 	mov	r2,r3
    ed34:	003f0f06 	br	e974 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e974>
    ed38:	1806943a 	slli	r3,r3,16
    ed3c:	9d66983a 	sll	r19,r19,r21
    ed40:	39ffffcc 	andi	r7,r7,65535
    ed44:	19c7883a 	add	r3,r3,r7
    ed48:	98ffc32e 	bgeu	r19,r3,ec58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec58>
    ed4c:	10bfffc4 	addi	r2,r2,-1
    ed50:	003fc106 	br	ec58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec58>
    ed54:	00800604 	movi	r2,24
    ed58:	003f1106 	br	e9a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e9a0>
    ed5c:	00800604 	movi	r2,24
    ed60:	003f2706 	br	ea00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea00>
    ed64:	00800604 	movi	r2,24
    ed68:	003ece06 	br	e8a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e8a4>
    ed6c:	0007883a 	mov	r3,zero
    ed70:	00800044 	movi	r2,1
    ed74:	003f5c06 	br	eae8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eae8>
    ed78:	813fa12e 	bgeu	r16,r4,ec00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec00>
    ed7c:	10bfff84 	addi	r2,r2,-2
    ed80:	85e1883a 	add	r16,r16,r23
    ed84:	003f9f06 	br	ec04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec04>
    ed88:	1c7f8a2e 	bgeu	r3,r17,ebb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ebb4>
    ed8c:	31bfff84 	addi	r6,r6,-2
    ed90:	1dc7883a 	add	r3,r3,r23
    ed94:	003f8806 	br	ebb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ebb8>
    ed98:	1805883a 	mov	r2,r3
    ed9c:	003fde06 	br	ed18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ed18>
    eda0:	1839883a 	mov	fp,r3
    eda4:	003fc906 	br	eccc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eccc>
    eda8:	b5bfff84 	addi	r22,r22,-2
    edac:	2449883a 	add	r4,r4,r17
    edb0:	003f3406 	br	ea84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea84>
    edb4:	b5bfff84 	addi	r22,r22,-2
    edb8:	1445883a 	add	r2,r2,r17
    edbc:	003edb06 	br	e92c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e92c>

0000edc0 <__umoddi3>:
    edc0:	defff404 	addi	sp,sp,-48
    edc4:	df000a15 	stw	fp,40(sp)
    edc8:	dc400315 	stw	r17,12(sp)
    edcc:	dc000215 	stw	r16,8(sp)
    edd0:	dfc00b15 	stw	ra,44(sp)
    edd4:	ddc00915 	stw	r23,36(sp)
    edd8:	dd800815 	stw	r22,32(sp)
    eddc:	dd400715 	stw	r21,28(sp)
    ede0:	dd000615 	stw	r20,24(sp)
    ede4:	dcc00515 	stw	r19,20(sp)
    ede8:	dc800415 	stw	r18,16(sp)
    edec:	2021883a 	mov	r16,r4
    edf0:	2823883a 	mov	r17,r5
    edf4:	2839883a 	mov	fp,r5
    edf8:	38003c1e 	bne	r7,zero,eeec <__umoddi3+0x12c>
    edfc:	3027883a 	mov	r19,r6
    ee00:	2029883a 	mov	r20,r4
    ee04:	2980512e 	bgeu	r5,r6,ef4c <__umoddi3+0x18c>
    ee08:	00bfffd4 	movui	r2,65535
    ee0c:	11809a36 	bltu	r2,r6,f078 <__umoddi3+0x2b8>
    ee10:	01003fc4 	movi	r4,255
    ee14:	2189803a 	cmpltu	r4,r4,r6
    ee18:	200890fa 	slli	r4,r4,3
    ee1c:	3104d83a 	srl	r2,r6,r4
    ee20:	00c000b4 	movhi	r3,2
    ee24:	18ee1e04 	addi	r3,r3,-18312
    ee28:	1885883a 	add	r2,r3,r2
    ee2c:	10c00003 	ldbu	r3,0(r2)
    ee30:	00800804 	movi	r2,32
    ee34:	1909883a 	add	r4,r3,r4
    ee38:	1125c83a 	sub	r18,r2,r4
    ee3c:	90000526 	beq	r18,zero,ee54 <__umoddi3+0x94>
    ee40:	8ca2983a 	sll	r17,r17,r18
    ee44:	8108d83a 	srl	r4,r16,r4
    ee48:	34a6983a 	sll	r19,r6,r18
    ee4c:	84a8983a 	sll	r20,r16,r18
    ee50:	2478b03a 	or	fp,r4,r17
    ee54:	982ed43a 	srli	r23,r19,16
    ee58:	e009883a 	mov	r4,fp
    ee5c:	9dbfffcc 	andi	r22,r19,65535
    ee60:	b80b883a 	mov	r5,r23
    ee64:	0002b8c0 	call	2b8c <__umodsi3>
    ee68:	e009883a 	mov	r4,fp
    ee6c:	b80b883a 	mov	r5,r23
    ee70:	102b883a 	mov	r21,r2
    ee74:	0002b280 	call	2b28 <__udivsi3>
    ee78:	a806943a 	slli	r3,r21,16
    ee7c:	a008d43a 	srli	r4,r20,16
    ee80:	b085383a 	mul	r2,r22,r2
    ee84:	20c8b03a 	or	r4,r4,r3
    ee88:	2080032e 	bgeu	r4,r2,ee98 <__umoddi3+0xd8>
    ee8c:	24c9883a 	add	r4,r4,r19
    ee90:	24c00136 	bltu	r4,r19,ee98 <__umoddi3+0xd8>
    ee94:	20811036 	bltu	r4,r2,f2d8 <__umoddi3+0x518>
    ee98:	20abc83a 	sub	r21,r4,r2
    ee9c:	b80b883a 	mov	r5,r23
    eea0:	a809883a 	mov	r4,r21
    eea4:	0002b8c0 	call	2b8c <__umodsi3>
    eea8:	1023883a 	mov	r17,r2
    eeac:	b80b883a 	mov	r5,r23
    eeb0:	a809883a 	mov	r4,r21
    eeb4:	0002b280 	call	2b28 <__udivsi3>
    eeb8:	8822943a 	slli	r17,r17,16
    eebc:	b085383a 	mul	r2,r22,r2
    eec0:	a0ffffcc 	andi	r3,r20,65535
    eec4:	1c46b03a 	or	r3,r3,r17
    eec8:	1880042e 	bgeu	r3,r2,eedc <__umoddi3+0x11c>
    eecc:	1cc7883a 	add	r3,r3,r19
    eed0:	1cc00236 	bltu	r3,r19,eedc <__umoddi3+0x11c>
    eed4:	1880012e 	bgeu	r3,r2,eedc <__umoddi3+0x11c>
    eed8:	1cc7883a 	add	r3,r3,r19
    eedc:	1885c83a 	sub	r2,r3,r2
    eee0:	1484d83a 	srl	r2,r2,r18
    eee4:	0007883a 	mov	r3,zero
    eee8:	00004f06 	br	f028 <__umoddi3+0x268>
    eeec:	29c04c36 	bltu	r5,r7,f020 <__umoddi3+0x260>
    eef0:	00bfffd4 	movui	r2,65535
    eef4:	11c0582e 	bgeu	r2,r7,f058 <__umoddi3+0x298>
    eef8:	00804034 	movhi	r2,256
    eefc:	10bfffc4 	addi	r2,r2,-1
    ef00:	11c0e736 	bltu	r2,r7,f2a0 <__umoddi3+0x4e0>
    ef04:	01000404 	movi	r4,16
    ef08:	3904d83a 	srl	r2,r7,r4
    ef0c:	00c000b4 	movhi	r3,2
    ef10:	18ee1e04 	addi	r3,r3,-18312
    ef14:	1885883a 	add	r2,r3,r2
    ef18:	14c00003 	ldbu	r19,0(r2)
    ef1c:	00c00804 	movi	r3,32
    ef20:	9927883a 	add	r19,r19,r4
    ef24:	1ce9c83a 	sub	r20,r3,r19
    ef28:	a000581e 	bne	r20,zero,f08c <__umoddi3+0x2cc>
    ef2c:	3c400136 	bltu	r7,r17,ef34 <__umoddi3+0x174>
    ef30:	8180eb36 	bltu	r16,r6,f2e0 <__umoddi3+0x520>
    ef34:	8185c83a 	sub	r2,r16,r6
    ef38:	89e3c83a 	sub	r17,r17,r7
    ef3c:	8089803a 	cmpltu	r4,r16,r2
    ef40:	8939c83a 	sub	fp,r17,r4
    ef44:	e007883a 	mov	r3,fp
    ef48:	00003706 	br	f028 <__umoddi3+0x268>
    ef4c:	3000041e 	bne	r6,zero,ef60 <__umoddi3+0x1a0>
    ef50:	000b883a 	mov	r5,zero
    ef54:	01000044 	movi	r4,1
    ef58:	0002b280 	call	2b28 <__udivsi3>
    ef5c:	1027883a 	mov	r19,r2
    ef60:	00bfffd4 	movui	r2,65535
    ef64:	14c0402e 	bgeu	r2,r19,f068 <__umoddi3+0x2a8>
    ef68:	00804034 	movhi	r2,256
    ef6c:	10bfffc4 	addi	r2,r2,-1
    ef70:	14c0cd36 	bltu	r2,r19,f2a8 <__umoddi3+0x4e8>
    ef74:	00800404 	movi	r2,16
    ef78:	9886d83a 	srl	r3,r19,r2
    ef7c:	010000b4 	movhi	r4,2
    ef80:	212e1e04 	addi	r4,r4,-18312
    ef84:	20c7883a 	add	r3,r4,r3
    ef88:	18c00003 	ldbu	r3,0(r3)
    ef8c:	1887883a 	add	r3,r3,r2
    ef90:	00800804 	movi	r2,32
    ef94:	10e5c83a 	sub	r18,r2,r3
    ef98:	9000901e 	bne	r18,zero,f1dc <__umoddi3+0x41c>
    ef9c:	982cd43a 	srli	r22,r19,16
    efa0:	8ce3c83a 	sub	r17,r17,r19
    efa4:	9d7fffcc 	andi	r21,r19,65535
    efa8:	b00b883a 	mov	r5,r22
    efac:	8809883a 	mov	r4,r17
    efb0:	0002b8c0 	call	2b8c <__umodsi3>
    efb4:	8809883a 	mov	r4,r17
    efb8:	b00b883a 	mov	r5,r22
    efbc:	1021883a 	mov	r16,r2
    efc0:	0002b280 	call	2b28 <__udivsi3>
    efc4:	8006943a 	slli	r3,r16,16
    efc8:	a008d43a 	srli	r4,r20,16
    efcc:	1545383a 	mul	r2,r2,r21
    efd0:	20c8b03a 	or	r4,r4,r3
    efd4:	2080042e 	bgeu	r4,r2,efe8 <__umoddi3+0x228>
    efd8:	24c9883a 	add	r4,r4,r19
    efdc:	24c00236 	bltu	r4,r19,efe8 <__umoddi3+0x228>
    efe0:	2080012e 	bgeu	r4,r2,efe8 <__umoddi3+0x228>
    efe4:	24c9883a 	add	r4,r4,r19
    efe8:	20a1c83a 	sub	r16,r4,r2
    efec:	b00b883a 	mov	r5,r22
    eff0:	8009883a 	mov	r4,r16
    eff4:	0002b8c0 	call	2b8c <__umodsi3>
    eff8:	1023883a 	mov	r17,r2
    effc:	b00b883a 	mov	r5,r22
    f000:	8009883a 	mov	r4,r16
    f004:	0002b280 	call	2b28 <__udivsi3>
    f008:	8822943a 	slli	r17,r17,16
    f00c:	1545383a 	mul	r2,r2,r21
    f010:	a53fffcc 	andi	r20,r20,65535
    f014:	a446b03a 	or	r3,r20,r17
    f018:	18bfb02e 	bgeu	r3,r2,eedc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eedc>
    f01c:	003fab06 	br	eecc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eecc>
    f020:	2005883a 	mov	r2,r4
    f024:	2807883a 	mov	r3,r5
    f028:	dfc00b17 	ldw	ra,44(sp)
    f02c:	df000a17 	ldw	fp,40(sp)
    f030:	ddc00917 	ldw	r23,36(sp)
    f034:	dd800817 	ldw	r22,32(sp)
    f038:	dd400717 	ldw	r21,28(sp)
    f03c:	dd000617 	ldw	r20,24(sp)
    f040:	dcc00517 	ldw	r19,20(sp)
    f044:	dc800417 	ldw	r18,16(sp)
    f048:	dc400317 	ldw	r17,12(sp)
    f04c:	dc000217 	ldw	r16,8(sp)
    f050:	dec00c04 	addi	sp,sp,48
    f054:	f800283a 	ret
    f058:	04c03fc4 	movi	r19,255
    f05c:	99c9803a 	cmpltu	r4,r19,r7
    f060:	200890fa 	slli	r4,r4,3
    f064:	003fa806 	br	ef08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef08>
    f068:	00803fc4 	movi	r2,255
    f06c:	14c5803a 	cmpltu	r2,r2,r19
    f070:	100490fa 	slli	r2,r2,3
    f074:	003fc006 	br	ef78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef78>
    f078:	00804034 	movhi	r2,256
    f07c:	10bfffc4 	addi	r2,r2,-1
    f080:	11808b36 	bltu	r2,r6,f2b0 <__umoddi3+0x4f0>
    f084:	01000404 	movi	r4,16
    f088:	003f6406 	br	ee1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee1c>
    f08c:	34c4d83a 	srl	r2,r6,r19
    f090:	3d0e983a 	sll	r7,r7,r20
    f094:	8cf8d83a 	srl	fp,r17,r19
    f098:	8d10983a 	sll	r8,r17,r20
    f09c:	38aab03a 	or	r21,r7,r2
    f0a0:	a82cd43a 	srli	r22,r21,16
    f0a4:	84e2d83a 	srl	r17,r16,r19
    f0a8:	e009883a 	mov	r4,fp
    f0ac:	b00b883a 	mov	r5,r22
    f0b0:	8a22b03a 	or	r17,r17,r8
    f0b4:	3524983a 	sll	r18,r6,r20
    f0b8:	0002b8c0 	call	2b8c <__umodsi3>
    f0bc:	e009883a 	mov	r4,fp
    f0c0:	b00b883a 	mov	r5,r22
    f0c4:	102f883a 	mov	r23,r2
    f0c8:	0002b280 	call	2b28 <__udivsi3>
    f0cc:	100d883a 	mov	r6,r2
    f0d0:	b808943a 	slli	r4,r23,16
    f0d4:	aa3fffcc 	andi	r8,r21,65535
    f0d8:	8804d43a 	srli	r2,r17,16
    f0dc:	41af383a 	mul	r23,r8,r6
    f0e0:	8520983a 	sll	r16,r16,r20
    f0e4:	1104b03a 	or	r2,r2,r4
    f0e8:	15c0042e 	bgeu	r2,r23,f0fc <__umoddi3+0x33c>
    f0ec:	1545883a 	add	r2,r2,r21
    f0f0:	30ffffc4 	addi	r3,r6,-1
    f0f4:	1540742e 	bgeu	r2,r21,f2c8 <__umoddi3+0x508>
    f0f8:	180d883a 	mov	r6,r3
    f0fc:	15efc83a 	sub	r23,r2,r23
    f100:	b00b883a 	mov	r5,r22
    f104:	b809883a 	mov	r4,r23
    f108:	d9800115 	stw	r6,4(sp)
    f10c:	da000015 	stw	r8,0(sp)
    f110:	0002b8c0 	call	2b8c <__umodsi3>
    f114:	b00b883a 	mov	r5,r22
    f118:	b809883a 	mov	r4,r23
    f11c:	1039883a 	mov	fp,r2
    f120:	0002b280 	call	2b28 <__udivsi3>
    f124:	da000017 	ldw	r8,0(sp)
    f128:	e038943a 	slli	fp,fp,16
    f12c:	100b883a 	mov	r5,r2
    f130:	4089383a 	mul	r4,r8,r2
    f134:	8a3fffcc 	andi	r8,r17,65535
    f138:	4710b03a 	or	r8,r8,fp
    f13c:	d9800117 	ldw	r6,4(sp)
    f140:	4100042e 	bgeu	r8,r4,f154 <__umoddi3+0x394>
    f144:	4551883a 	add	r8,r8,r21
    f148:	10bfffc4 	addi	r2,r2,-1
    f14c:	45405a2e 	bgeu	r8,r21,f2b8 <__umoddi3+0x4f8>
    f150:	100b883a 	mov	r5,r2
    f154:	300c943a 	slli	r6,r6,16
    f158:	91ffffcc 	andi	r7,r18,65535
    f15c:	9004d43a 	srli	r2,r18,16
    f160:	314cb03a 	or	r6,r6,r5
    f164:	317fffcc 	andi	r5,r6,65535
    f168:	300cd43a 	srli	r6,r6,16
    f16c:	29d3383a 	mul	r9,r5,r7
    f170:	288b383a 	mul	r5,r5,r2
    f174:	31cf383a 	mul	r7,r6,r7
    f178:	4806d43a 	srli	r3,r9,16
    f17c:	4111c83a 	sub	r8,r8,r4
    f180:	29cb883a 	add	r5,r5,r7
    f184:	194b883a 	add	r5,r3,r5
    f188:	3085383a 	mul	r2,r6,r2
    f18c:	29c0022e 	bgeu	r5,r7,f198 <__umoddi3+0x3d8>
    f190:	00c00074 	movhi	r3,1
    f194:	10c5883a 	add	r2,r2,r3
    f198:	2808d43a 	srli	r4,r5,16
    f19c:	280a943a 	slli	r5,r5,16
    f1a0:	4a7fffcc 	andi	r9,r9,65535
    f1a4:	2085883a 	add	r2,r4,r2
    f1a8:	2a4b883a 	add	r5,r5,r9
    f1ac:	40803636 	bltu	r8,r2,f288 <__umoddi3+0x4c8>
    f1b0:	40804d26 	beq	r8,r2,f2e8 <__umoddi3+0x528>
    f1b4:	4089c83a 	sub	r4,r8,r2
    f1b8:	280f883a 	mov	r7,r5
    f1bc:	81cfc83a 	sub	r7,r16,r7
    f1c0:	81c7803a 	cmpltu	r3,r16,r7
    f1c4:	20c7c83a 	sub	r3,r4,r3
    f1c8:	1cc4983a 	sll	r2,r3,r19
    f1cc:	3d0ed83a 	srl	r7,r7,r20
    f1d0:	1d06d83a 	srl	r3,r3,r20
    f1d4:	11c4b03a 	or	r2,r2,r7
    f1d8:	003f9306 	br	f028 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f028>
    f1dc:	9ca6983a 	sll	r19,r19,r18
    f1e0:	88e8d83a 	srl	r20,r17,r3
    f1e4:	80c4d83a 	srl	r2,r16,r3
    f1e8:	982cd43a 	srli	r22,r19,16
    f1ec:	8ca2983a 	sll	r17,r17,r18
    f1f0:	a009883a 	mov	r4,r20
    f1f4:	b00b883a 	mov	r5,r22
    f1f8:	1478b03a 	or	fp,r2,r17
    f1fc:	0002b8c0 	call	2b8c <__umodsi3>
    f200:	a009883a 	mov	r4,r20
    f204:	b00b883a 	mov	r5,r22
    f208:	1023883a 	mov	r17,r2
    f20c:	0002b280 	call	2b28 <__udivsi3>
    f210:	9d7fffcc 	andi	r21,r19,65535
    f214:	880a943a 	slli	r5,r17,16
    f218:	e008d43a 	srli	r4,fp,16
    f21c:	a885383a 	mul	r2,r21,r2
    f220:	84a8983a 	sll	r20,r16,r18
    f224:	2148b03a 	or	r4,r4,r5
    f228:	2080042e 	bgeu	r4,r2,f23c <__umoddi3+0x47c>
    f22c:	24c9883a 	add	r4,r4,r19
    f230:	24c00236 	bltu	r4,r19,f23c <__umoddi3+0x47c>
    f234:	2080012e 	bgeu	r4,r2,f23c <__umoddi3+0x47c>
    f238:	24c9883a 	add	r4,r4,r19
    f23c:	20a3c83a 	sub	r17,r4,r2
    f240:	b00b883a 	mov	r5,r22
    f244:	8809883a 	mov	r4,r17
    f248:	0002b8c0 	call	2b8c <__umodsi3>
    f24c:	102f883a 	mov	r23,r2
    f250:	8809883a 	mov	r4,r17
    f254:	b00b883a 	mov	r5,r22
    f258:	0002b280 	call	2b28 <__udivsi3>
    f25c:	b82e943a 	slli	r23,r23,16
    f260:	a885383a 	mul	r2,r21,r2
    f264:	e13fffcc 	andi	r4,fp,65535
    f268:	25c8b03a 	or	r4,r4,r23
    f26c:	2080042e 	bgeu	r4,r2,f280 <__umoddi3+0x4c0>
    f270:	24c9883a 	add	r4,r4,r19
    f274:	24c00236 	bltu	r4,r19,f280 <__umoddi3+0x4c0>
    f278:	2080012e 	bgeu	r4,r2,f280 <__umoddi3+0x4c0>
    f27c:	24c9883a 	add	r4,r4,r19
    f280:	20a3c83a 	sub	r17,r4,r2
    f284:	003f4806 	br	efa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700efa8>
    f288:	2c8fc83a 	sub	r7,r5,r18
    f28c:	1545c83a 	sub	r2,r2,r21
    f290:	29cb803a 	cmpltu	r5,r5,r7
    f294:	1145c83a 	sub	r2,r2,r5
    f298:	4089c83a 	sub	r4,r8,r2
    f29c:	003fc706 	br	f1bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f1bc>
    f2a0:	01000604 	movi	r4,24
    f2a4:	003f1806 	br	ef08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef08>
    f2a8:	00800604 	movi	r2,24
    f2ac:	003f3206 	br	ef78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef78>
    f2b0:	01000604 	movi	r4,24
    f2b4:	003ed906 	br	ee1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee1c>
    f2b8:	413fa52e 	bgeu	r8,r4,f150 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f150>
    f2bc:	297fff84 	addi	r5,r5,-2
    f2c0:	4551883a 	add	r8,r8,r21
    f2c4:	003fa306 	br	f154 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f154>
    f2c8:	15ff8b2e 	bgeu	r2,r23,f0f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f0f8>
    f2cc:	31bfff84 	addi	r6,r6,-2
    f2d0:	1545883a 	add	r2,r2,r21
    f2d4:	003f8906 	br	f0fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f0fc>
    f2d8:	24c9883a 	add	r4,r4,r19
    f2dc:	003eee06 	br	ee98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee98>
    f2e0:	8005883a 	mov	r2,r16
    f2e4:	003f1706 	br	ef44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef44>
    f2e8:	817fe736 	bltu	r16,r5,f288 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f288>
    f2ec:	280f883a 	mov	r7,r5
    f2f0:	0009883a 	mov	r4,zero
    f2f4:	003fb106 	br	f1bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f1bc>

0000f2f8 <__ledf2>:
    f2f8:	2804d53a 	srli	r2,r5,20
    f2fc:	3810d53a 	srli	r8,r7,20
    f300:	00c00434 	movhi	r3,16
    f304:	18ffffc4 	addi	r3,r3,-1
    f308:	1081ffcc 	andi	r2,r2,2047
    f30c:	0241ffc4 	movi	r9,2047
    f310:	28d4703a 	and	r10,r5,r3
    f314:	4201ffcc 	andi	r8,r8,2047
    f318:	38c6703a 	and	r3,r7,r3
    f31c:	280ad7fa 	srli	r5,r5,31
    f320:	380ed7fa 	srli	r7,r7,31
    f324:	12401f26 	beq	r2,r9,f3a4 <__ledf2+0xac>
    f328:	0241ffc4 	movi	r9,2047
    f32c:	42401426 	beq	r8,r9,f380 <__ledf2+0x88>
    f330:	1000091e 	bne	r2,zero,f358 <__ledf2+0x60>
    f334:	2296b03a 	or	r11,r4,r10
    f338:	5813003a 	cmpeq	r9,r11,zero
    f33c:	29403fcc 	andi	r5,r5,255
    f340:	40000a1e 	bne	r8,zero,f36c <__ledf2+0x74>
    f344:	30d8b03a 	or	r12,r6,r3
    f348:	6000081e 	bne	r12,zero,f36c <__ledf2+0x74>
    f34c:	0005883a 	mov	r2,zero
    f350:	5800111e 	bne	r11,zero,f398 <__ledf2+0xa0>
    f354:	f800283a 	ret
    f358:	29403fcc 	andi	r5,r5,255
    f35c:	40000c1e 	bne	r8,zero,f390 <__ledf2+0x98>
    f360:	30d2b03a 	or	r9,r6,r3
    f364:	48000c26 	beq	r9,zero,f398 <__ledf2+0xa0>
    f368:	0013883a 	mov	r9,zero
    f36c:	39c03fcc 	andi	r7,r7,255
    f370:	48000826 	beq	r9,zero,f394 <__ledf2+0x9c>
    f374:	38001126 	beq	r7,zero,f3bc <__ledf2+0xc4>
    f378:	00800044 	movi	r2,1
    f37c:	f800283a 	ret
    f380:	30d2b03a 	or	r9,r6,r3
    f384:	483fea26 	beq	r9,zero,f330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f330>
    f388:	00800084 	movi	r2,2
    f38c:	f800283a 	ret
    f390:	39c03fcc 	andi	r7,r7,255
    f394:	39400726 	beq	r7,r5,f3b4 <__ledf2+0xbc>
    f398:	2800081e 	bne	r5,zero,f3bc <__ledf2+0xc4>
    f39c:	00800044 	movi	r2,1
    f3a0:	f800283a 	ret
    f3a4:	2292b03a 	or	r9,r4,r10
    f3a8:	483fdf26 	beq	r9,zero,f328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f328>
    f3ac:	00800084 	movi	r2,2
    f3b0:	f800283a 	ret
    f3b4:	4080030e 	bge	r8,r2,f3c4 <__ledf2+0xcc>
    f3b8:	383fef26 	beq	r7,zero,f378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f378>
    f3bc:	00bfffc4 	movi	r2,-1
    f3c0:	f800283a 	ret
    f3c4:	123feb16 	blt	r2,r8,f374 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f374>
    f3c8:	1abff336 	bltu	r3,r10,f398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f398>
    f3cc:	50c00326 	beq	r10,r3,f3dc <__ledf2+0xe4>
    f3d0:	50c0042e 	bgeu	r10,r3,f3e4 <__ledf2+0xec>
    f3d4:	283fe81e 	bne	r5,zero,f378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f378>
    f3d8:	003ff806 	br	f3bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f3bc>
    f3dc:	313fee36 	bltu	r6,r4,f398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f398>
    f3e0:	21bffc36 	bltu	r4,r6,f3d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f3d4>
    f3e4:	0005883a 	mov	r2,zero
    f3e8:	f800283a 	ret

0000f3ec <__floatunsidf>:
    f3ec:	defffe04 	addi	sp,sp,-8
    f3f0:	dc000015 	stw	r16,0(sp)
    f3f4:	dfc00115 	stw	ra,4(sp)
    f3f8:	2021883a 	mov	r16,r4
    f3fc:	20002226 	beq	r4,zero,f488 <__floatunsidf+0x9c>
    f400:	00052640 	call	5264 <__clzsi2>
    f404:	01010784 	movi	r4,1054
    f408:	2089c83a 	sub	r4,r4,r2
    f40c:	01810cc4 	movi	r6,1075
    f410:	310dc83a 	sub	r6,r6,r4
    f414:	00c007c4 	movi	r3,31
    f418:	1980120e 	bge	r3,r6,f464 <__floatunsidf+0x78>
    f41c:	00c104c4 	movi	r3,1043
    f420:	1907c83a 	sub	r3,r3,r4
    f424:	80ca983a 	sll	r5,r16,r3
    f428:	00800434 	movhi	r2,16
    f42c:	10bfffc4 	addi	r2,r2,-1
    f430:	2101ffcc 	andi	r4,r4,2047
    f434:	0021883a 	mov	r16,zero
    f438:	288a703a 	and	r5,r5,r2
    f43c:	2008953a 	slli	r4,r4,20
    f440:	00c00434 	movhi	r3,16
    f444:	18ffffc4 	addi	r3,r3,-1
    f448:	28c6703a 	and	r3,r5,r3
    f44c:	8005883a 	mov	r2,r16
    f450:	1906b03a 	or	r3,r3,r4
    f454:	dfc00117 	ldw	ra,4(sp)
    f458:	dc000017 	ldw	r16,0(sp)
    f45c:	dec00204 	addi	sp,sp,8
    f460:	f800283a 	ret
    f464:	00c002c4 	movi	r3,11
    f468:	188bc83a 	sub	r5,r3,r2
    f46c:	814ad83a 	srl	r5,r16,r5
    f470:	00c00434 	movhi	r3,16
    f474:	18ffffc4 	addi	r3,r3,-1
    f478:	81a0983a 	sll	r16,r16,r6
    f47c:	2101ffcc 	andi	r4,r4,2047
    f480:	28ca703a 	and	r5,r5,r3
    f484:	003fed06 	br	f43c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f43c>
    f488:	0009883a 	mov	r4,zero
    f48c:	000b883a 	mov	r5,zero
    f490:	003fea06 	br	f43c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f43c>

0000f494 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f494:	defffe04 	addi	sp,sp,-8
    f498:	dfc00115 	stw	ra,4(sp)
    f49c:	df000015 	stw	fp,0(sp)
    f4a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f4a4:	d0a00b17 	ldw	r2,-32724(gp)
    f4a8:	10000326 	beq	r2,zero,f4b8 <alt_get_errno+0x24>
    f4ac:	d0a00b17 	ldw	r2,-32724(gp)
    f4b0:	103ee83a 	callr	r2
    f4b4:	00000106 	br	f4bc <alt_get_errno+0x28>
    f4b8:	d0a80f04 	addi	r2,gp,-24516
}
    f4bc:	e037883a 	mov	sp,fp
    f4c0:	dfc00117 	ldw	ra,4(sp)
    f4c4:	df000017 	ldw	fp,0(sp)
    f4c8:	dec00204 	addi	sp,sp,8
    f4cc:	f800283a 	ret

0000f4d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f4d0:	defffb04 	addi	sp,sp,-20
    f4d4:	dfc00415 	stw	ra,16(sp)
    f4d8:	df000315 	stw	fp,12(sp)
    f4dc:	df000304 	addi	fp,sp,12
    f4e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f4e4:	e0bfff17 	ldw	r2,-4(fp)
    f4e8:	10000616 	blt	r2,zero,f504 <close+0x34>
    f4ec:	e0bfff17 	ldw	r2,-4(fp)
    f4f0:	10c00324 	muli	r3,r2,12
    f4f4:	008000b4 	movhi	r2,2
    f4f8:	10b1bf04 	addi	r2,r2,-14596
    f4fc:	1885883a 	add	r2,r3,r2
    f500:	00000106 	br	f508 <close+0x38>
    f504:	0005883a 	mov	r2,zero
    f508:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f50c:	e0bffd17 	ldw	r2,-12(fp)
    f510:	10001926 	beq	r2,zero,f578 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f514:	e0bffd17 	ldw	r2,-12(fp)
    f518:	10800017 	ldw	r2,0(r2)
    f51c:	10800417 	ldw	r2,16(r2)
    f520:	10000626 	beq	r2,zero,f53c <close+0x6c>
    f524:	e0bffd17 	ldw	r2,-12(fp)
    f528:	10800017 	ldw	r2,0(r2)
    f52c:	10800417 	ldw	r2,16(r2)
    f530:	e13ffd17 	ldw	r4,-12(fp)
    f534:	103ee83a 	callr	r2
    f538:	00000106 	br	f540 <close+0x70>
    f53c:	0005883a 	mov	r2,zero
    f540:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f544:	e13fff17 	ldw	r4,-4(fp)
    f548:	000fb880 	call	fb88 <alt_release_fd>
    if (rval < 0)
    f54c:	e0bffe17 	ldw	r2,-8(fp)
    f550:	1000070e 	bge	r2,zero,f570 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    f554:	000f4940 	call	f494 <alt_get_errno>
    f558:	1007883a 	mov	r3,r2
    f55c:	e0bffe17 	ldw	r2,-8(fp)
    f560:	0085c83a 	sub	r2,zero,r2
    f564:	18800015 	stw	r2,0(r3)
      return -1;
    f568:	00bfffc4 	movi	r2,-1
    f56c:	00000706 	br	f58c <close+0xbc>
    }
    return 0;
    f570:	0005883a 	mov	r2,zero
    f574:	00000506 	br	f58c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f578:	000f4940 	call	f494 <alt_get_errno>
    f57c:	1007883a 	mov	r3,r2
    f580:	00801444 	movi	r2,81
    f584:	18800015 	stw	r2,0(r3)
    return -1;
    f588:	00bfffc4 	movi	r2,-1
  }
}
    f58c:	e037883a 	mov	sp,fp
    f590:	dfc00117 	ldw	ra,4(sp)
    f594:	df000017 	ldw	fp,0(sp)
    f598:	dec00204 	addi	sp,sp,8
    f59c:	f800283a 	ret

0000f5a0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f5a0:	defffc04 	addi	sp,sp,-16
    f5a4:	df000315 	stw	fp,12(sp)
    f5a8:	df000304 	addi	fp,sp,12
    f5ac:	e13ffd15 	stw	r4,-12(fp)
    f5b0:	e17ffe15 	stw	r5,-8(fp)
    f5b4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f5b8:	e0bfff17 	ldw	r2,-4(fp)
}
    f5bc:	e037883a 	mov	sp,fp
    f5c0:	df000017 	ldw	fp,0(sp)
    f5c4:	dec00104 	addi	sp,sp,4
    f5c8:	f800283a 	ret

0000f5cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f5cc:	defffe04 	addi	sp,sp,-8
    f5d0:	dfc00115 	stw	ra,4(sp)
    f5d4:	df000015 	stw	fp,0(sp)
    f5d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f5dc:	d0a00b17 	ldw	r2,-32724(gp)
    f5e0:	10000326 	beq	r2,zero,f5f0 <alt_get_errno+0x24>
    f5e4:	d0a00b17 	ldw	r2,-32724(gp)
    f5e8:	103ee83a 	callr	r2
    f5ec:	00000106 	br	f5f4 <alt_get_errno+0x28>
    f5f0:	d0a80f04 	addi	r2,gp,-24516
}
    f5f4:	e037883a 	mov	sp,fp
    f5f8:	dfc00117 	ldw	ra,4(sp)
    f5fc:	df000017 	ldw	fp,0(sp)
    f600:	dec00204 	addi	sp,sp,8
    f604:	f800283a 	ret

0000f608 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f608:	defffb04 	addi	sp,sp,-20
    f60c:	dfc00415 	stw	ra,16(sp)
    f610:	df000315 	stw	fp,12(sp)
    f614:	df000304 	addi	fp,sp,12
    f618:	e13ffe15 	stw	r4,-8(fp)
    f61c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f620:	e0bffe17 	ldw	r2,-8(fp)
    f624:	10000616 	blt	r2,zero,f640 <fstat+0x38>
    f628:	e0bffe17 	ldw	r2,-8(fp)
    f62c:	10c00324 	muli	r3,r2,12
    f630:	008000b4 	movhi	r2,2
    f634:	10b1bf04 	addi	r2,r2,-14596
    f638:	1885883a 	add	r2,r3,r2
    f63c:	00000106 	br	f644 <fstat+0x3c>
    f640:	0005883a 	mov	r2,zero
    f644:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f648:	e0bffd17 	ldw	r2,-12(fp)
    f64c:	10001026 	beq	r2,zero,f690 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f650:	e0bffd17 	ldw	r2,-12(fp)
    f654:	10800017 	ldw	r2,0(r2)
    f658:	10800817 	ldw	r2,32(r2)
    f65c:	10000726 	beq	r2,zero,f67c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    f660:	e0bffd17 	ldw	r2,-12(fp)
    f664:	10800017 	ldw	r2,0(r2)
    f668:	10800817 	ldw	r2,32(r2)
    f66c:	e17fff17 	ldw	r5,-4(fp)
    f670:	e13ffd17 	ldw	r4,-12(fp)
    f674:	103ee83a 	callr	r2
    f678:	00000a06 	br	f6a4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f67c:	e0bfff17 	ldw	r2,-4(fp)
    f680:	00c80004 	movi	r3,8192
    f684:	10c00115 	stw	r3,4(r2)
      return 0;
    f688:	0005883a 	mov	r2,zero
    f68c:	00000506 	br	f6a4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f690:	000f5cc0 	call	f5cc <alt_get_errno>
    f694:	1007883a 	mov	r3,r2
    f698:	00801444 	movi	r2,81
    f69c:	18800015 	stw	r2,0(r3)
    return -1;
    f6a0:	00bfffc4 	movi	r2,-1
  }
}
    f6a4:	e037883a 	mov	sp,fp
    f6a8:	dfc00117 	ldw	ra,4(sp)
    f6ac:	df000017 	ldw	fp,0(sp)
    f6b0:	dec00204 	addi	sp,sp,8
    f6b4:	f800283a 	ret

0000f6b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f6b8:	defffe04 	addi	sp,sp,-8
    f6bc:	dfc00115 	stw	ra,4(sp)
    f6c0:	df000015 	stw	fp,0(sp)
    f6c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f6c8:	d0a00b17 	ldw	r2,-32724(gp)
    f6cc:	10000326 	beq	r2,zero,f6dc <alt_get_errno+0x24>
    f6d0:	d0a00b17 	ldw	r2,-32724(gp)
    f6d4:	103ee83a 	callr	r2
    f6d8:	00000106 	br	f6e0 <alt_get_errno+0x28>
    f6dc:	d0a80f04 	addi	r2,gp,-24516
}
    f6e0:	e037883a 	mov	sp,fp
    f6e4:	dfc00117 	ldw	ra,4(sp)
    f6e8:	df000017 	ldw	fp,0(sp)
    f6ec:	dec00204 	addi	sp,sp,8
    f6f0:	f800283a 	ret

0000f6f4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f6f4:	deffed04 	addi	sp,sp,-76
    f6f8:	dfc01215 	stw	ra,72(sp)
    f6fc:	df001115 	stw	fp,68(sp)
    f700:	df001104 	addi	fp,sp,68
    f704:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f708:	e0bfff17 	ldw	r2,-4(fp)
    f70c:	10000616 	blt	r2,zero,f728 <isatty+0x34>
    f710:	e0bfff17 	ldw	r2,-4(fp)
    f714:	10c00324 	muli	r3,r2,12
    f718:	008000b4 	movhi	r2,2
    f71c:	10b1bf04 	addi	r2,r2,-14596
    f720:	1885883a 	add	r2,r3,r2
    f724:	00000106 	br	f72c <isatty+0x38>
    f728:	0005883a 	mov	r2,zero
    f72c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f730:	e0bfef17 	ldw	r2,-68(fp)
    f734:	10000e26 	beq	r2,zero,f770 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f738:	e0bfef17 	ldw	r2,-68(fp)
    f73c:	10800017 	ldw	r2,0(r2)
    f740:	10800817 	ldw	r2,32(r2)
    f744:	1000021e 	bne	r2,zero,f750 <isatty+0x5c>
    {
      return 1;
    f748:	00800044 	movi	r2,1
    f74c:	00000d06 	br	f784 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f750:	e0bff004 	addi	r2,fp,-64
    f754:	100b883a 	mov	r5,r2
    f758:	e13fff17 	ldw	r4,-4(fp)
    f75c:	000f6080 	call	f608 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f760:	e0bff117 	ldw	r2,-60(fp)
    f764:	10880020 	cmpeqi	r2,r2,8192
    f768:	10803fcc 	andi	r2,r2,255
    f76c:	00000506 	br	f784 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f770:	000f6b80 	call	f6b8 <alt_get_errno>
    f774:	1007883a 	mov	r3,r2
    f778:	00801444 	movi	r2,81
    f77c:	18800015 	stw	r2,0(r3)
    return 0;
    f780:	0005883a 	mov	r2,zero
  }
}
    f784:	e037883a 	mov	sp,fp
    f788:	dfc00117 	ldw	ra,4(sp)
    f78c:	df000017 	ldw	fp,0(sp)
    f790:	dec00204 	addi	sp,sp,8
    f794:	f800283a 	ret

0000f798 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f798:	defffc04 	addi	sp,sp,-16
    f79c:	df000315 	stw	fp,12(sp)
    f7a0:	df000304 	addi	fp,sp,12
    f7a4:	e13ffd15 	stw	r4,-12(fp)
    f7a8:	e17ffe15 	stw	r5,-8(fp)
    f7ac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f7b0:	e0fffe17 	ldw	r3,-8(fp)
    f7b4:	e0bffd17 	ldw	r2,-12(fp)
    f7b8:	18800c26 	beq	r3,r2,f7ec <alt_load_section+0x54>
  {
    while( to != end )
    f7bc:	00000806 	br	f7e0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f7c0:	e0bffe17 	ldw	r2,-8(fp)
    f7c4:	10c00104 	addi	r3,r2,4
    f7c8:	e0fffe15 	stw	r3,-8(fp)
    f7cc:	e0fffd17 	ldw	r3,-12(fp)
    f7d0:	19000104 	addi	r4,r3,4
    f7d4:	e13ffd15 	stw	r4,-12(fp)
    f7d8:	18c00017 	ldw	r3,0(r3)
    f7dc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f7e0:	e0fffe17 	ldw	r3,-8(fp)
    f7e4:	e0bfff17 	ldw	r2,-4(fp)
    f7e8:	18bff51e 	bne	r3,r2,f7c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f7c0>
    {
      *to++ = *from++;
    }
  }
}
    f7ec:	0001883a 	nop
    f7f0:	e037883a 	mov	sp,fp
    f7f4:	df000017 	ldw	fp,0(sp)
    f7f8:	dec00104 	addi	sp,sp,4
    f7fc:	f800283a 	ret

0000f800 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f800:	defffe04 	addi	sp,sp,-8
    f804:	dfc00115 	stw	ra,4(sp)
    f808:	df000015 	stw	fp,0(sp)
    f80c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f810:	018000b4 	movhi	r6,2
    f814:	31b76604 	addi	r6,r6,-8808
    f818:	014000b4 	movhi	r5,2
    f81c:	296f8c04 	addi	r5,r5,-16848
    f820:	010000b4 	movhi	r4,2
    f824:	21376604 	addi	r4,r4,-8808
    f828:	000f7980 	call	f798 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f82c:	01800034 	movhi	r6,0
    f830:	31809204 	addi	r6,r6,584
    f834:	01400034 	movhi	r5,0
    f838:	29400804 	addi	r5,r5,32
    f83c:	01000034 	movhi	r4,0
    f840:	21000804 	addi	r4,r4,32
    f844:	000f7980 	call	f798 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f848:	018000b4 	movhi	r6,2
    f84c:	31af8c04 	addi	r6,r6,-16848
    f850:	014000b4 	movhi	r5,2
    f854:	296da704 	addi	r5,r5,-18788
    f858:	010000b4 	movhi	r4,2
    f85c:	212da704 	addi	r4,r4,-18788
    f860:	000f7980 	call	f798 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f864:	001a3400 	call	1a340 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f868:	001a5900 	call	1a590 <alt_icache_flush_all>
}
    f86c:	0001883a 	nop
    f870:	e037883a 	mov	sp,fp
    f874:	dfc00117 	ldw	ra,4(sp)
    f878:	df000017 	ldw	fp,0(sp)
    f87c:	dec00204 	addi	sp,sp,8
    f880:	f800283a 	ret

0000f884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f884:	defffe04 	addi	sp,sp,-8
    f888:	dfc00115 	stw	ra,4(sp)
    f88c:	df000015 	stw	fp,0(sp)
    f890:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f894:	d0a00b17 	ldw	r2,-32724(gp)
    f898:	10000326 	beq	r2,zero,f8a8 <alt_get_errno+0x24>
    f89c:	d0a00b17 	ldw	r2,-32724(gp)
    f8a0:	103ee83a 	callr	r2
    f8a4:	00000106 	br	f8ac <alt_get_errno+0x28>
    f8a8:	d0a80f04 	addi	r2,gp,-24516
}
    f8ac:	e037883a 	mov	sp,fp
    f8b0:	dfc00117 	ldw	ra,4(sp)
    f8b4:	df000017 	ldw	fp,0(sp)
    f8b8:	dec00204 	addi	sp,sp,8
    f8bc:	f800283a 	ret

0000f8c0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f8c0:	defff904 	addi	sp,sp,-28
    f8c4:	dfc00615 	stw	ra,24(sp)
    f8c8:	df000515 	stw	fp,20(sp)
    f8cc:	df000504 	addi	fp,sp,20
    f8d0:	e13ffd15 	stw	r4,-12(fp)
    f8d4:	e17ffe15 	stw	r5,-8(fp)
    f8d8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f8dc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f8e0:	e0bffd17 	ldw	r2,-12(fp)
    f8e4:	10000616 	blt	r2,zero,f900 <lseek+0x40>
    f8e8:	e0bffd17 	ldw	r2,-12(fp)
    f8ec:	10c00324 	muli	r3,r2,12
    f8f0:	008000b4 	movhi	r2,2
    f8f4:	10b1bf04 	addi	r2,r2,-14596
    f8f8:	1885883a 	add	r2,r3,r2
    f8fc:	00000106 	br	f904 <lseek+0x44>
    f900:	0005883a 	mov	r2,zero
    f904:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f908:	e0bffc17 	ldw	r2,-16(fp)
    f90c:	10001026 	beq	r2,zero,f950 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f910:	e0bffc17 	ldw	r2,-16(fp)
    f914:	10800017 	ldw	r2,0(r2)
    f918:	10800717 	ldw	r2,28(r2)
    f91c:	10000926 	beq	r2,zero,f944 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f920:	e0bffc17 	ldw	r2,-16(fp)
    f924:	10800017 	ldw	r2,0(r2)
    f928:	10800717 	ldw	r2,28(r2)
    f92c:	e1bfff17 	ldw	r6,-4(fp)
    f930:	e17ffe17 	ldw	r5,-8(fp)
    f934:	e13ffc17 	ldw	r4,-16(fp)
    f938:	103ee83a 	callr	r2
    f93c:	e0bffb15 	stw	r2,-20(fp)
    f940:	00000506 	br	f958 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f944:	00bfde84 	movi	r2,-134
    f948:	e0bffb15 	stw	r2,-20(fp)
    f94c:	00000206 	br	f958 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    f950:	00bfebc4 	movi	r2,-81
    f954:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f958:	e0bffb17 	ldw	r2,-20(fp)
    f95c:	1000070e 	bge	r2,zero,f97c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    f960:	000f8840 	call	f884 <alt_get_errno>
    f964:	1007883a 	mov	r3,r2
    f968:	e0bffb17 	ldw	r2,-20(fp)
    f96c:	0085c83a 	sub	r2,zero,r2
    f970:	18800015 	stw	r2,0(r3)
    rc = -1;
    f974:	00bfffc4 	movi	r2,-1
    f978:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f97c:	e0bffb17 	ldw	r2,-20(fp)
}
    f980:	e037883a 	mov	sp,fp
    f984:	dfc00117 	ldw	ra,4(sp)
    f988:	df000017 	ldw	fp,0(sp)
    f98c:	dec00204 	addi	sp,sp,8
    f990:	f800283a 	ret

0000f994 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f994:	defff904 	addi	sp,sp,-28
    f998:	dfc00615 	stw	ra,24(sp)
    f99c:	df000515 	stw	fp,20(sp)
    f9a0:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f9a4:	0009883a 	mov	r4,zero
    f9a8:	00178f40 	call	178f4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f9ac:	00109500 	call	10950 <OSInit>
    f9b0:	01000044 	movi	r4,1
    f9b4:	00152b00 	call	152b0 <OSSemCreate>
    f9b8:	d0a81515 	stw	r2,-24492(gp)
    f9bc:	01000044 	movi	r4,1
    f9c0:	00152b00 	call	152b0 <OSSemCreate>
    f9c4:	d0a81715 	stw	r2,-24484(gp)
    f9c8:	d0a81004 	addi	r2,gp,-24512
    f9cc:	e0bffc15 	stw	r2,-16(fp)
    f9d0:	00800044 	movi	r2,1
    f9d4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    f9d8:	e0bffd0b 	ldhu	r2,-12(fp)
    f9dc:	1009883a 	mov	r4,r2
    f9e0:	00152b00 	call	152b0 <OSSemCreate>
    f9e4:	1007883a 	mov	r3,r2
    f9e8:	e0bffc17 	ldw	r2,-16(fp)
    f9ec:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f9f0:	001792c0 	call	1792c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f9f4:	018000b4 	movhi	r6,2
    f9f8:	31aed304 	addi	r6,r6,-17588
    f9fc:	014000b4 	movhi	r5,2
    fa00:	296ed304 	addi	r5,r5,-17588
    fa04:	010000b4 	movhi	r4,2
    fa08:	212ed304 	addi	r4,r4,-17588
    fa0c:	001a6880 	call	1a688 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    fa10:	001a4400 	call	1a440 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    fa14:	010000b4 	movhi	r4,2
    fa18:	21292804 	addi	r4,r4,-23392
    fa1c:	001b3080 	call	1b308 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    fa20:	d0a81117 	ldw	r2,-24508(gp)
    fa24:	d0e81217 	ldw	r3,-24504(gp)
    fa28:	d1281317 	ldw	r4,-24500(gp)
    fa2c:	200d883a 	mov	r6,r4
    fa30:	180b883a 	mov	r5,r3
    fa34:	1009883a 	mov	r4,r2
    fa38:	00002840 	call	284 <main>
    fa3c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    fa40:	01000044 	movi	r4,1
    fa44:	000f4d00 	call	f4d0 <close>
  exit (result);
    fa48:	e13ffb17 	ldw	r4,-20(fp)
    fa4c:	001b31c0 	call	1b31c <exit>

0000fa50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fa50:	defffe04 	addi	sp,sp,-8
    fa54:	dfc00115 	stw	ra,4(sp)
    fa58:	df000015 	stw	fp,0(sp)
    fa5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fa60:	d0a00b17 	ldw	r2,-32724(gp)
    fa64:	10000326 	beq	r2,zero,fa74 <alt_get_errno+0x24>
    fa68:	d0a00b17 	ldw	r2,-32724(gp)
    fa6c:	103ee83a 	callr	r2
    fa70:	00000106 	br	fa78 <alt_get_errno+0x28>
    fa74:	d0a80f04 	addi	r2,gp,-24516
}
    fa78:	e037883a 	mov	sp,fp
    fa7c:	dfc00117 	ldw	ra,4(sp)
    fa80:	df000017 	ldw	fp,0(sp)
    fa84:	dec00204 	addi	sp,sp,8
    fa88:	f800283a 	ret

0000fa8c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    fa8c:	defff904 	addi	sp,sp,-28
    fa90:	dfc00615 	stw	ra,24(sp)
    fa94:	df000515 	stw	fp,20(sp)
    fa98:	df000504 	addi	fp,sp,20
    fa9c:	e13ffd15 	stw	r4,-12(fp)
    faa0:	e17ffe15 	stw	r5,-8(fp)
    faa4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    faa8:	e0bffd17 	ldw	r2,-12(fp)
    faac:	10000616 	blt	r2,zero,fac8 <read+0x3c>
    fab0:	e0bffd17 	ldw	r2,-12(fp)
    fab4:	10c00324 	muli	r3,r2,12
    fab8:	008000b4 	movhi	r2,2
    fabc:	10b1bf04 	addi	r2,r2,-14596
    fac0:	1885883a 	add	r2,r3,r2
    fac4:	00000106 	br	facc <read+0x40>
    fac8:	0005883a 	mov	r2,zero
    facc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fad0:	e0bffb17 	ldw	r2,-20(fp)
    fad4:	10002226 	beq	r2,zero,fb60 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fad8:	e0bffb17 	ldw	r2,-20(fp)
    fadc:	10800217 	ldw	r2,8(r2)
    fae0:	108000cc 	andi	r2,r2,3
    fae4:	10800060 	cmpeqi	r2,r2,1
    fae8:	1000181e 	bne	r2,zero,fb4c <read+0xc0>
        (fd->dev->read))
    faec:	e0bffb17 	ldw	r2,-20(fp)
    faf0:	10800017 	ldw	r2,0(r2)
    faf4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    faf8:	10001426 	beq	r2,zero,fb4c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fafc:	e0bffb17 	ldw	r2,-20(fp)
    fb00:	10800017 	ldw	r2,0(r2)
    fb04:	10800517 	ldw	r2,20(r2)
    fb08:	e0ffff17 	ldw	r3,-4(fp)
    fb0c:	180d883a 	mov	r6,r3
    fb10:	e17ffe17 	ldw	r5,-8(fp)
    fb14:	e13ffb17 	ldw	r4,-20(fp)
    fb18:	103ee83a 	callr	r2
    fb1c:	e0bffc15 	stw	r2,-16(fp)
    fb20:	e0bffc17 	ldw	r2,-16(fp)
    fb24:	1000070e 	bge	r2,zero,fb44 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    fb28:	000fa500 	call	fa50 <alt_get_errno>
    fb2c:	1007883a 	mov	r3,r2
    fb30:	e0bffc17 	ldw	r2,-16(fp)
    fb34:	0085c83a 	sub	r2,zero,r2
    fb38:	18800015 	stw	r2,0(r3)
          return -1;
    fb3c:	00bfffc4 	movi	r2,-1
    fb40:	00000c06 	br	fb74 <read+0xe8>
        }
        return rval;
    fb44:	e0bffc17 	ldw	r2,-16(fp)
    fb48:	00000a06 	br	fb74 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fb4c:	000fa500 	call	fa50 <alt_get_errno>
    fb50:	1007883a 	mov	r3,r2
    fb54:	00800344 	movi	r2,13
    fb58:	18800015 	stw	r2,0(r3)
    fb5c:	00000406 	br	fb70 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fb60:	000fa500 	call	fa50 <alt_get_errno>
    fb64:	1007883a 	mov	r3,r2
    fb68:	00801444 	movi	r2,81
    fb6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fb70:	00bfffc4 	movi	r2,-1
}
    fb74:	e037883a 	mov	sp,fp
    fb78:	dfc00117 	ldw	ra,4(sp)
    fb7c:	df000017 	ldw	fp,0(sp)
    fb80:	dec00204 	addi	sp,sp,8
    fb84:	f800283a 	ret

0000fb88 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    fb88:	defffe04 	addi	sp,sp,-8
    fb8c:	df000115 	stw	fp,4(sp)
    fb90:	df000104 	addi	fp,sp,4
    fb94:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    fb98:	e0bfff17 	ldw	r2,-4(fp)
    fb9c:	108000d0 	cmplti	r2,r2,3
    fba0:	10000d1e 	bne	r2,zero,fbd8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    fba4:	008000b4 	movhi	r2,2
    fba8:	10b1bf04 	addi	r2,r2,-14596
    fbac:	e0ffff17 	ldw	r3,-4(fp)
    fbb0:	18c00324 	muli	r3,r3,12
    fbb4:	10c5883a 	add	r2,r2,r3
    fbb8:	10800204 	addi	r2,r2,8
    fbbc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    fbc0:	008000b4 	movhi	r2,2
    fbc4:	10b1bf04 	addi	r2,r2,-14596
    fbc8:	e0ffff17 	ldw	r3,-4(fp)
    fbcc:	18c00324 	muli	r3,r3,12
    fbd0:	10c5883a 	add	r2,r2,r3
    fbd4:	10000015 	stw	zero,0(r2)
  }
}
    fbd8:	0001883a 	nop
    fbdc:	e037883a 	mov	sp,fp
    fbe0:	df000017 	ldw	fp,0(sp)
    fbe4:	dec00104 	addi	sp,sp,4
    fbe8:	f800283a 	ret

0000fbec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    fbec:	defff904 	addi	sp,sp,-28
    fbf0:	df000615 	stw	fp,24(sp)
    fbf4:	df000604 	addi	fp,sp,24
    fbf8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fbfc:	0005303a 	rdctl	r2,status
    fc00:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc04:	e0fffe17 	ldw	r3,-8(fp)
    fc08:	00bfff84 	movi	r2,-2
    fc0c:	1884703a 	and	r2,r3,r2
    fc10:	1001703a 	wrctl	status,r2
  
  return context;
    fc14:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    fc18:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fc1c:	d0a00c17 	ldw	r2,-32720(gp)
    fc20:	10c000c4 	addi	r3,r2,3
    fc24:	00bfff04 	movi	r2,-4
    fc28:	1884703a 	and	r2,r3,r2
    fc2c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fc30:	d0e00c17 	ldw	r3,-32720(gp)
    fc34:	e0bfff17 	ldw	r2,-4(fp)
    fc38:	1887883a 	add	r3,r3,r2
    fc3c:	00810034 	movhi	r2,1024
    fc40:	10800004 	addi	r2,r2,0
    fc44:	10c0062e 	bgeu	r2,r3,fc60 <sbrk+0x74>
    fc48:	e0bffb17 	ldw	r2,-20(fp)
    fc4c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc50:	e0bffa17 	ldw	r2,-24(fp)
    fc54:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fc58:	00bfffc4 	movi	r2,-1
    fc5c:	00000b06 	br	fc8c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fc60:	d0a00c17 	ldw	r2,-32720(gp)
    fc64:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    fc68:	d0e00c17 	ldw	r3,-32720(gp)
    fc6c:	e0bfff17 	ldw	r2,-4(fp)
    fc70:	1885883a 	add	r2,r3,r2
    fc74:	d0a00c15 	stw	r2,-32720(gp)
    fc78:	e0bffb17 	ldw	r2,-20(fp)
    fc7c:	e0bffc15 	stw	r2,-16(fp)
    fc80:	e0bffc17 	ldw	r2,-16(fp)
    fc84:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fc88:	e0bffd17 	ldw	r2,-12(fp)
} 
    fc8c:	e037883a 	mov	sp,fp
    fc90:	df000017 	ldw	fp,0(sp)
    fc94:	dec00104 	addi	sp,sp,4
    fc98:	f800283a 	ret

0000fc9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fc9c:	defffe04 	addi	sp,sp,-8
    fca0:	dfc00115 	stw	ra,4(sp)
    fca4:	df000015 	stw	fp,0(sp)
    fca8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fcac:	d0a00b17 	ldw	r2,-32724(gp)
    fcb0:	10000326 	beq	r2,zero,fcc0 <alt_get_errno+0x24>
    fcb4:	d0a00b17 	ldw	r2,-32724(gp)
    fcb8:	103ee83a 	callr	r2
    fcbc:	00000106 	br	fcc4 <alt_get_errno+0x28>
    fcc0:	d0a80f04 	addi	r2,gp,-24516
}
    fcc4:	e037883a 	mov	sp,fp
    fcc8:	dfc00117 	ldw	ra,4(sp)
    fccc:	df000017 	ldw	fp,0(sp)
    fcd0:	dec00204 	addi	sp,sp,8
    fcd4:	f800283a 	ret

0000fcd8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fcd8:	defff904 	addi	sp,sp,-28
    fcdc:	dfc00615 	stw	ra,24(sp)
    fce0:	df000515 	stw	fp,20(sp)
    fce4:	df000504 	addi	fp,sp,20
    fce8:	e13ffd15 	stw	r4,-12(fp)
    fcec:	e17ffe15 	stw	r5,-8(fp)
    fcf0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fcf4:	e0bffd17 	ldw	r2,-12(fp)
    fcf8:	10000616 	blt	r2,zero,fd14 <write+0x3c>
    fcfc:	e0bffd17 	ldw	r2,-12(fp)
    fd00:	10c00324 	muli	r3,r2,12
    fd04:	008000b4 	movhi	r2,2
    fd08:	10b1bf04 	addi	r2,r2,-14596
    fd0c:	1885883a 	add	r2,r3,r2
    fd10:	00000106 	br	fd18 <write+0x40>
    fd14:	0005883a 	mov	r2,zero
    fd18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fd1c:	e0bffb17 	ldw	r2,-20(fp)
    fd20:	10002126 	beq	r2,zero,fda8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fd24:	e0bffb17 	ldw	r2,-20(fp)
    fd28:	10800217 	ldw	r2,8(r2)
    fd2c:	108000cc 	andi	r2,r2,3
    fd30:	10001826 	beq	r2,zero,fd94 <write+0xbc>
    fd34:	e0bffb17 	ldw	r2,-20(fp)
    fd38:	10800017 	ldw	r2,0(r2)
    fd3c:	10800617 	ldw	r2,24(r2)
    fd40:	10001426 	beq	r2,zero,fd94 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fd44:	e0bffb17 	ldw	r2,-20(fp)
    fd48:	10800017 	ldw	r2,0(r2)
    fd4c:	10800617 	ldw	r2,24(r2)
    fd50:	e0ffff17 	ldw	r3,-4(fp)
    fd54:	180d883a 	mov	r6,r3
    fd58:	e17ffe17 	ldw	r5,-8(fp)
    fd5c:	e13ffb17 	ldw	r4,-20(fp)
    fd60:	103ee83a 	callr	r2
    fd64:	e0bffc15 	stw	r2,-16(fp)
    fd68:	e0bffc17 	ldw	r2,-16(fp)
    fd6c:	1000070e 	bge	r2,zero,fd8c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    fd70:	000fc9c0 	call	fc9c <alt_get_errno>
    fd74:	1007883a 	mov	r3,r2
    fd78:	e0bffc17 	ldw	r2,-16(fp)
    fd7c:	0085c83a 	sub	r2,zero,r2
    fd80:	18800015 	stw	r2,0(r3)
        return -1;
    fd84:	00bfffc4 	movi	r2,-1
    fd88:	00000c06 	br	fdbc <write+0xe4>
      }
      return rval;
    fd8c:	e0bffc17 	ldw	r2,-16(fp)
    fd90:	00000a06 	br	fdbc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fd94:	000fc9c0 	call	fc9c <alt_get_errno>
    fd98:	1007883a 	mov	r3,r2
    fd9c:	00800344 	movi	r2,13
    fda0:	18800015 	stw	r2,0(r3)
    fda4:	00000406 	br	fdb8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fda8:	000fc9c0 	call	fc9c <alt_get_errno>
    fdac:	1007883a 	mov	r3,r2
    fdb0:	00801444 	movi	r2,81
    fdb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fdb8:	00bfffc4 	movi	r2,-1
}
    fdbc:	e037883a 	mov	sp,fp
    fdc0:	dfc00117 	ldw	ra,4(sp)
    fdc4:	df000017 	ldw	fp,0(sp)
    fdc8:	dec00204 	addi	sp,sp,8
    fdcc:	f800283a 	ret

0000fdd0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    fdd0:	deffdf04 	addi	sp,sp,-132
    fdd4:	dfc02015 	stw	ra,128(sp)
    fdd8:	df001f15 	stw	fp,124(sp)
    fddc:	df001f04 	addi	fp,sp,124
    fde0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    fde4:	e0bfe204 	addi	r2,fp,-120
    fde8:	100b883a 	mov	r5,r2
    fdec:	01003fc4 	movi	r4,255
    fdf0:	00172380 	call	17238 <OSTaskQuery>
    fdf4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    fdf8:	e0bffe83 	ldbu	r2,-6(fp)
    fdfc:	10803fcc 	andi	r2,r2,255
    fe00:	10001e1e 	bne	r2,zero,fe7c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    fe04:	e0bfee83 	ldbu	r2,-70(fp)
    fe08:	10803fcc 	andi	r2,r2,255
    fe0c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    fe10:	d0a81517 	ldw	r2,-24492(gp)
    fe14:	e0fffd04 	addi	r3,fp,-12
    fe18:	180b883a 	mov	r5,r3
    fe1c:	1009883a 	mov	r4,r2
    fe20:	0015a500 	call	15a50 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    fe24:	e0bffe43 	ldbu	r2,-7(fp)
    fe28:	10803fcc 	andi	r2,r2,255
    fe2c:	10000726 	beq	r2,zero,fe4c <__env_lock+0x7c>
    fe30:	d0a00d17 	ldw	r2,-32716(gp)
    fe34:	e0ffe117 	ldw	r3,-124(fp)
    fe38:	1880041e 	bne	r3,r2,fe4c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    fe3c:	d0a81417 	ldw	r2,-24496(gp)
    fe40:	10800044 	addi	r2,r2,1
    fe44:	d0a81415 	stw	r2,-24496(gp)
    fe48:	00000a06 	br	fe74 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    fe4c:	d0a81517 	ldw	r2,-24492(gp)
    fe50:	e0fffe84 	addi	r3,fp,-6
    fe54:	180d883a 	mov	r6,r3
    fe58:	000b883a 	mov	r5,zero
    fe5c:	1009883a 	mov	r4,r2
    fe60:	00155c80 	call	155c8 <OSSemPend>
    locks  = 1;
    fe64:	00800044 	movi	r2,1
    fe68:	d0a81415 	stw	r2,-24496(gp)
    lockid = id;
    fe6c:	e0bfe117 	ldw	r2,-124(fp)
    fe70:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    fe74:	0001883a 	nop
    fe78:	00000106 	br	fe80 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    fe7c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    fe80:	e037883a 	mov	sp,fp
    fe84:	dfc00117 	ldw	ra,4(sp)
    fe88:	df000017 	ldw	fp,0(sp)
    fe8c:	dec00204 	addi	sp,sp,8
    fe90:	f800283a 	ret

0000fe94 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    fe94:	defffd04 	addi	sp,sp,-12
    fe98:	dfc00215 	stw	ra,8(sp)
    fe9c:	df000115 	stw	fp,4(sp)
    fea0:	df000104 	addi	fp,sp,4
    fea4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    fea8:	d0a81417 	ldw	r2,-24496(gp)
    feac:	10000b26 	beq	r2,zero,fedc <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    feb0:	d0a81417 	ldw	r2,-24496(gp)
    feb4:	10bfffc4 	addi	r2,r2,-1
    feb8:	d0a81415 	stw	r2,-24496(gp)
    febc:	d0a81417 	ldw	r2,-24496(gp)
    fec0:	1000071e 	bne	r2,zero,fee0 <__env_unlock+0x4c>
  {
    lockid = -1;
    fec4:	00bfffc4 	movi	r2,-1
    fec8:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
    fecc:	d0a81517 	ldw	r2,-24492(gp)
    fed0:	1009883a 	mov	r4,r2
    fed4:	00159400 	call	15940 <OSSemPost>
    fed8:	00000106 	br	fee0 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    fedc:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    fee0:	e037883a 	mov	sp,fp
    fee4:	dfc00117 	ldw	ra,4(sp)
    fee8:	df000017 	ldw	fp,0(sp)
    feec:	dec00204 	addi	sp,sp,8
    fef0:	f800283a 	ret

0000fef4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    fef4:	deffdb04 	addi	sp,sp,-148
    fef8:	dfc02415 	stw	ra,144(sp)
    fefc:	df002315 	stw	fp,140(sp)
    ff00:	df002304 	addi	fp,sp,140
    ff04:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ff08:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    ff0c:	d0a81843 	ldbu	r2,-24479(gp)
    ff10:	10803fcc 	andi	r2,r2,255
    ff14:	10800060 	cmpeqi	r2,r2,1
    ff18:	10003626 	beq	r2,zero,fff4 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    ff1c:	e0bfe204 	addi	r2,fp,-120
    ff20:	100b883a 	mov	r5,r2
    ff24:	01003fc4 	movi	r4,255
    ff28:	00172380 	call	17238 <OSTaskQuery>
    ff2c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    ff30:	e0bffe83 	ldbu	r2,-6(fp)
    ff34:	10803fcc 	andi	r2,r2,255
    ff38:	1000301e 	bne	r2,zero,fffc <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    ff3c:	e0bfee83 	ldbu	r2,-70(fp)
    ff40:	10803fcc 	andi	r2,r2,255
    ff44:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    ff48:	d0a81717 	ldw	r2,-24484(gp)
    ff4c:	e0fffd04 	addi	r3,fp,-12
    ff50:	180b883a 	mov	r5,r3
    ff54:	1009883a 	mov	r4,r2
    ff58:	0015a500 	call	15a50 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff5c:	0005303a 	rdctl	r2,status
    ff60:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff64:	e0ffe117 	ldw	r3,-124(fp)
    ff68:	00bfff84 	movi	r2,-2
    ff6c:	1884703a 	and	r2,r3,r2
    ff70:	1001703a 	wrctl	status,r2
  
  return context;
    ff74:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    ff78:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    ff7c:	e0bffd0b 	ldhu	r2,-12(fp)
    ff80:	10bfffcc 	andi	r2,r2,65535
    ff84:	10000b1e 	bne	r2,zero,ffb4 <__malloc_lock+0xc0>
    ff88:	d0a00e17 	ldw	r2,-32712(gp)
    ff8c:	e0ffde17 	ldw	r3,-136(fp)
    ff90:	1880081e 	bne	r3,r2,ffb4 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    ff94:	d0a81617 	ldw	r2,-24488(gp)
    ff98:	10800044 	addi	r2,r2,1
    ff9c:	d0a81615 	stw	r2,-24488(gp)
    ffa0:	e0bfdd17 	ldw	r2,-140(fp)
    ffa4:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ffa8:	e0bfdf17 	ldw	r2,-132(fp)
    ffac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    ffb0:	00000e06 	br	ffec <__malloc_lock+0xf8>
    ffb4:	e0bfdd17 	ldw	r2,-140(fp)
    ffb8:	e0bfe015 	stw	r2,-128(fp)
    ffbc:	e0bfe017 	ldw	r2,-128(fp)
    ffc0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    ffc4:	d0a81717 	ldw	r2,-24484(gp)
    ffc8:	e0fffe84 	addi	r3,fp,-6
    ffcc:	180d883a 	mov	r6,r3
    ffd0:	000b883a 	mov	r5,zero
    ffd4:	1009883a 	mov	r4,r2
    ffd8:	00155c80 	call	155c8 <OSSemPend>
    locks  = 1;
    ffdc:	00800044 	movi	r2,1
    ffe0:	d0a81615 	stw	r2,-24488(gp)
    lockid = id;
    ffe4:	e0bfde17 	ldw	r2,-136(fp)
    ffe8:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    ffec:	0001883a 	nop
    fff0:	00000306 	br	10000 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    fff4:	0001883a 	nop
    fff8:	00000106 	br	10000 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    fffc:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   10000:	e037883a 	mov	sp,fp
   10004:	dfc00117 	ldw	ra,4(sp)
   10008:	df000017 	ldw	fp,0(sp)
   1000c:	dec00204 	addi	sp,sp,8
   10010:	f800283a 	ret

00010014 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10014:	defff804 	addi	sp,sp,-32
   10018:	dfc00715 	stw	ra,28(sp)
   1001c:	df000615 	stw	fp,24(sp)
   10020:	df000604 	addi	fp,sp,24
   10024:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10028:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   1002c:	d0a81843 	ldbu	r2,-24479(gp)
   10030:	10803fcc 	andi	r2,r2,255
   10034:	10800060 	cmpeqi	r2,r2,1
   10038:	10002326 	beq	r2,zero,100c8 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1003c:	0005303a 	rdctl	r2,status
   10040:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10044:	e0fffe17 	ldw	r3,-8(fp)
   10048:	00bfff84 	movi	r2,-2
   1004c:	1884703a 	and	r2,r3,r2
   10050:	1001703a 	wrctl	status,r2
  
  return context;
   10054:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   10058:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   1005c:	d0a81617 	ldw	r2,-24488(gp)
   10060:	1000051e 	bne	r2,zero,10078 <__malloc_unlock+0x64>
   10064:	e0bffa17 	ldw	r2,-24(fp)
   10068:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1006c:	e0bffb17 	ldw	r2,-20(fp)
   10070:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   10074:	00001506 	br	100cc <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   10078:	d0a81617 	ldw	r2,-24488(gp)
   1007c:	10bfffc4 	addi	r2,r2,-1
   10080:	d0a81615 	stw	r2,-24488(gp)
   10084:	d0a81617 	ldw	r2,-24488(gp)
   10088:	10000a1e 	bne	r2,zero,100b4 <__malloc_unlock+0xa0>
  {
    lockid = -1;
   1008c:	00bfffc4 	movi	r2,-1
   10090:	d0a00e15 	stw	r2,-32712(gp)
   10094:	e0bffa17 	ldw	r2,-24(fp)
   10098:	e0bffc15 	stw	r2,-16(fp)
   1009c:	e0bffc17 	ldw	r2,-16(fp)
   100a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   100a4:	d0a81717 	ldw	r2,-24484(gp)
   100a8:	1009883a 	mov	r4,r2
   100ac:	00159400 	call	15940 <OSSemPost>
   100b0:	00000606 	br	100cc <__malloc_unlock+0xb8>
   100b4:	e0bffa17 	ldw	r2,-24(fp)
   100b8:	e0bffd15 	stw	r2,-12(fp)
   100bc:	e0bffd17 	ldw	r2,-12(fp)
   100c0:	1001703a 	wrctl	status,r2
   100c4:	00000106 	br	100cc <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   100c8:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   100cc:	e037883a 	mov	sp,fp
   100d0:	dfc00117 	ldw	ra,4(sp)
   100d4:	df000017 	ldw	fp,0(sp)
   100d8:	dec00204 	addi	sp,sp,8
   100dc:	f800283a 	ret

000100e0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   100e0:	defff704 	addi	sp,sp,-36
   100e4:	dfc00815 	stw	ra,32(sp)
   100e8:	df000715 	stw	fp,28(sp)
   100ec:	df000704 	addi	fp,sp,28
   100f0:	e13ffd15 	stw	r4,-12(fp)
   100f4:	e17ffe15 	stw	r5,-8(fp)
   100f8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   100fc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10100:	e0bfff17 	ldw	r2,-4(fp)
   10104:	1000021e 	bne	r2,zero,10110 <OSEventNameGet+0x30>
        return (0);
   10108:	0005883a 	mov	r2,zero
   1010c:	00003706 	br	101ec <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   10110:	e0bffd17 	ldw	r2,-12(fp)
   10114:	1000051e 	bne	r2,zero,1012c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   10118:	e0bfff17 	ldw	r2,-4(fp)
   1011c:	00c00104 	movi	r3,4
   10120:	10c00005 	stb	r3,0(r2)
        return (0);
   10124:	0005883a 	mov	r2,zero
   10128:	00003006 	br	101ec <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1012c:	e0bffe17 	ldw	r2,-8(fp)
   10130:	1000051e 	bne	r2,zero,10148 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10134:	e0bfff17 	ldw	r2,-4(fp)
   10138:	00c00304 	movi	r3,12
   1013c:	10c00005 	stb	r3,0(r2)
        return (0);
   10140:	0005883a 	mov	r2,zero
   10144:	00002906 	br	101ec <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10148:	d0a82603 	ldbu	r2,-24424(gp)
   1014c:	10803fcc 	andi	r2,r2,255
   10150:	10000526 	beq	r2,zero,10168 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   10154:	e0bfff17 	ldw	r2,-4(fp)
   10158:	00c00444 	movi	r3,17
   1015c:	10c00005 	stb	r3,0(r2)
        return (0);
   10160:	0005883a 	mov	r2,zero
   10164:	00002106 	br	101ec <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   10168:	e0bffd17 	ldw	r2,-12(fp)
   1016c:	10800003 	ldbu	r2,0(r2)
   10170:	10803fcc 	andi	r2,r2,255
   10174:	10bfffc4 	addi	r2,r2,-1
   10178:	10800128 	cmpgeui	r2,r2,4
   1017c:	10000526 	beq	r2,zero,10194 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   10180:	e0bfff17 	ldw	r2,-4(fp)
   10184:	00c00044 	movi	r3,1
   10188:	10c00005 	stb	r3,0(r2)
             return (0);
   1018c:	0005883a 	mov	r2,zero
   10190:	00001606 	br	101ec <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   10194:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10198:	0005303a 	rdctl	r2,status
   1019c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101a0:	e0fffb17 	ldw	r3,-20(fp)
   101a4:	00bfff84 	movi	r2,-2
   101a8:	1884703a 	and	r2,r3,r2
   101ac:	1001703a 	wrctl	status,r2
  
  return context;
   101b0:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   101b4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   101b8:	e0bffd17 	ldw	r2,-12(fp)
   101bc:	10800384 	addi	r2,r2,14
   101c0:	100b883a 	mov	r5,r2
   101c4:	e13ffe17 	ldw	r4,-8(fp)
   101c8:	0011b640 	call	11b64 <OS_StrCopy>
   101cc:	e0bffa05 	stb	r2,-24(fp)
   101d0:	e0bff917 	ldw	r2,-28(fp)
   101d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101d8:	e0bffc17 	ldw	r2,-16(fp)
   101dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   101e0:	e0bfff17 	ldw	r2,-4(fp)
   101e4:	10000005 	stb	zero,0(r2)
    return (len);
   101e8:	e0bffa03 	ldbu	r2,-24(fp)
}
   101ec:	e037883a 	mov	sp,fp
   101f0:	dfc00117 	ldw	ra,4(sp)
   101f4:	df000017 	ldw	fp,0(sp)
   101f8:	dec00204 	addi	sp,sp,8
   101fc:	f800283a 	ret

00010200 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   10200:	defff604 	addi	sp,sp,-40
   10204:	dfc00915 	stw	ra,36(sp)
   10208:	df000815 	stw	fp,32(sp)
   1020c:	df000804 	addi	fp,sp,32
   10210:	e13ffd15 	stw	r4,-12(fp)
   10214:	e17ffe15 	stw	r5,-8(fp)
   10218:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1021c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10220:	e0bfff17 	ldw	r2,-4(fp)
   10224:	10004026 	beq	r2,zero,10328 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   10228:	e0bffd17 	ldw	r2,-12(fp)
   1022c:	1000041e 	bne	r2,zero,10240 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   10230:	e0bfff17 	ldw	r2,-4(fp)
   10234:	00c00104 	movi	r3,4
   10238:	10c00005 	stb	r3,0(r2)
        return;
   1023c:	00003b06 	br	1032c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10240:	e0bffe17 	ldw	r2,-8(fp)
   10244:	1000041e 	bne	r2,zero,10258 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   10248:	e0bfff17 	ldw	r2,-4(fp)
   1024c:	00c00304 	movi	r3,12
   10250:	10c00005 	stb	r3,0(r2)
        return;
   10254:	00003506 	br	1032c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10258:	d0a82603 	ldbu	r2,-24424(gp)
   1025c:	10803fcc 	andi	r2,r2,255
   10260:	10000426 	beq	r2,zero,10274 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   10264:	e0bfff17 	ldw	r2,-4(fp)
   10268:	00c00484 	movi	r3,18
   1026c:	10c00005 	stb	r3,0(r2)
        return;
   10270:	00002e06 	br	1032c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   10274:	e0bffd17 	ldw	r2,-12(fp)
   10278:	10800003 	ldbu	r2,0(r2)
   1027c:	10803fcc 	andi	r2,r2,255
   10280:	10bfffc4 	addi	r2,r2,-1
   10284:	10800128 	cmpgeui	r2,r2,4
   10288:	10000426 	beq	r2,zero,1029c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   1028c:	e0bfff17 	ldw	r2,-4(fp)
   10290:	00c00044 	movi	r3,1
   10294:	10c00005 	stb	r3,0(r2)
             return;
   10298:	00002406 	br	1032c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   1029c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   102a0:	0005303a 	rdctl	r2,status
   102a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   102a8:	e0fffc17 	ldw	r3,-16(fp)
   102ac:	00bfff84 	movi	r2,-2
   102b0:	1884703a 	and	r2,r3,r2
   102b4:	1001703a 	wrctl	status,r2
  
  return context;
   102b8:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   102bc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   102c0:	e13ffe17 	ldw	r4,-8(fp)
   102c4:	0011bd80 	call	11bd8 <OS_StrLen>
   102c8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   102cc:	e0bffa03 	ldbu	r2,-24(fp)
   102d0:	10800830 	cmpltui	r2,r2,32
   102d4:	1000081e 	bne	r2,zero,102f8 <OSEventNameSet+0xf8>
   102d8:	e0bff817 	ldw	r2,-32(fp)
   102dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   102e0:	e0bff917 	ldw	r2,-28(fp)
   102e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   102e8:	e0bfff17 	ldw	r2,-4(fp)
   102ec:	00c002c4 	movi	r3,11
   102f0:	10c00005 	stb	r3,0(r2)
        return;
   102f4:	00000d06 	br	1032c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   102f8:	e0bffd17 	ldw	r2,-12(fp)
   102fc:	10800384 	addi	r2,r2,14
   10300:	e17ffe17 	ldw	r5,-8(fp)
   10304:	1009883a 	mov	r4,r2
   10308:	0011b640 	call	11b64 <OS_StrCopy>
   1030c:	e0bff817 	ldw	r2,-32(fp)
   10310:	e0bffb15 	stw	r2,-20(fp)
   10314:	e0bffb17 	ldw	r2,-20(fp)
   10318:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1031c:	e0bfff17 	ldw	r2,-4(fp)
   10320:	10000005 	stb	zero,0(r2)
   10324:	00000106 	br	1032c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   10328:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   1032c:	e037883a 	mov	sp,fp
   10330:	dfc00117 	ldw	ra,4(sp)
   10334:	df000017 	ldw	fp,0(sp)
   10338:	dec00204 	addi	sp,sp,8
   1033c:	f800283a 	ret

00010340 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   10340:	deffed04 	addi	sp,sp,-76
   10344:	dfc01215 	stw	ra,72(sp)
   10348:	df001115 	stw	fp,68(sp)
   1034c:	df001104 	addi	fp,sp,68
   10350:	e13ffc15 	stw	r4,-16(fp)
   10354:	e17ffd15 	stw	r5,-12(fp)
   10358:	e1bffe15 	stw	r6,-8(fp)
   1035c:	3805883a 	mov	r2,r7
   10360:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   10364:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   10368:	e0800217 	ldw	r2,8(fp)
   1036c:	1000021e 	bne	r2,zero,10378 <OSEventPendMulti+0x38>
        return (0);
   10370:	0005883a 	mov	r2,zero
   10374:	00017106 	br	1093c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   10378:	e0bffc17 	ldw	r2,-16(fp)
   1037c:	1000051e 	bne	r2,zero,10394 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   10380:	e0800217 	ldw	r2,8(fp)
   10384:	00c00104 	movi	r3,4
   10388:	10c00005 	stb	r3,0(r2)
        return (0);
   1038c:	0005883a 	mov	r2,zero
   10390:	00016a06 	br	1093c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   10394:	e0bffd17 	ldw	r2,-12(fp)
   10398:	1000051e 	bne	r2,zero,103b0 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   1039c:	e0800217 	ldw	r2,8(fp)
   103a0:	00c00104 	movi	r3,4
   103a4:	10c00005 	stb	r3,0(r2)
        return (0);
   103a8:	0005883a 	mov	r2,zero
   103ac:	00016306 	br	1093c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   103b0:	e0bffe17 	ldw	r2,-8(fp)
   103b4:	1000051e 	bne	r2,zero,103cc <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   103b8:	e0800217 	ldw	r2,8(fp)
   103bc:	00c00104 	movi	r3,4
   103c0:	10c00005 	stb	r3,0(r2)
        return (0);
   103c4:	0005883a 	mov	r2,zero
   103c8:	00015c06 	br	1093c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   103cc:	e0bffd17 	ldw	r2,-12(fp)
   103d0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   103d4:	e0bffc17 	ldw	r2,-16(fp)
   103d8:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   103dc:	e0bfef17 	ldw	r2,-68(fp)
   103e0:	10800017 	ldw	r2,0(r2)
   103e4:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   103e8:	00001906 	br	10450 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   103ec:	e0bff017 	ldw	r2,-64(fp)
   103f0:	10800003 	ldbu	r2,0(r2)
   103f4:	10803fcc 	andi	r2,r2,255
   103f8:	10c000a0 	cmpeqi	r3,r2,2
   103fc:	1800091e 	bne	r3,zero,10424 <OSEventPendMulti+0xe4>
   10400:	10c000e0 	cmpeqi	r3,r2,3
   10404:	1800091e 	bne	r3,zero,1042c <OSEventPendMulti+0xec>
   10408:	10800060 	cmpeqi	r2,r2,1
   1040c:	1000091e 	bne	r2,zero,10434 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   10410:	e0800217 	ldw	r2,8(fp)
   10414:	00c00044 	movi	r3,1
   10418:	10c00005 	stb	r3,0(r2)
                 return (0);
   1041c:	0005883a 	mov	r2,zero
   10420:	00014606 	br	1093c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   10424:	0001883a 	nop
   10428:	00000306 	br	10438 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   1042c:	0001883a 	nop
   10430:	00000106 	br	10438 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   10434:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   10438:	e0bfef17 	ldw	r2,-68(fp)
   1043c:	10800104 	addi	r2,r2,4
   10440:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   10444:	e0bfef17 	ldw	r2,-68(fp)
   10448:	10800017 	ldw	r2,0(r2)
   1044c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   10450:	e0bff017 	ldw	r2,-64(fp)
   10454:	103fe51e 	bne	r2,zero,103ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70103ec>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   10458:	d0a82603 	ldbu	r2,-24424(gp)
   1045c:	10803fcc 	andi	r2,r2,255
   10460:	10000526 	beq	r2,zero,10478 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   10464:	e0800217 	ldw	r2,8(fp)
   10468:	00c00084 	movi	r3,2
   1046c:	10c00005 	stb	r3,0(r2)
        return (0);
   10470:	0005883a 	mov	r2,zero
   10474:	00013106 	br	1093c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   10478:	d0a81803 	ldbu	r2,-24480(gp)
   1047c:	10803fcc 	andi	r2,r2,255
   10480:	10000526 	beq	r2,zero,10498 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   10484:	e0800217 	ldw	r2,8(fp)
   10488:	00c00344 	movi	r3,13
   1048c:	10c00005 	stb	r3,0(r2)
        return (0);
   10490:	0005883a 	mov	r2,zero
   10494:	00012906 	br	1093c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10498:	0005303a 	rdctl	r2,status
   1049c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   104a0:	e0fffb17 	ldw	r3,-20(fp)
   104a4:	00bfff84 	movi	r2,-2
   104a8:	1884703a 	and	r2,r3,r2
   104ac:	1001703a 	wrctl	status,r2
  
  return context;
   104b0:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   104b4:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   104b8:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   104bc:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   104c0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   104c4:	e0bffc17 	ldw	r2,-16(fp)
   104c8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   104cc:	e0bfef17 	ldw	r2,-68(fp)
   104d0:	10800017 	ldw	r2,0(r2)
   104d4:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   104d8:	00008106 	br	106e0 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   104dc:	e0bff017 	ldw	r2,-64(fp)
   104e0:	10800003 	ldbu	r2,0(r2)
   104e4:	10803fcc 	andi	r2,r2,255
   104e8:	10c000a0 	cmpeqi	r3,r2,2
   104ec:	18003c1e 	bne	r3,zero,105e0 <OSEventPendMulti+0x2a0>
   104f0:	10c000e0 	cmpeqi	r3,r2,3
   104f4:	1800031e 	bne	r3,zero,10504 <OSEventPendMulti+0x1c4>
   104f8:	10800060 	cmpeqi	r2,r2,1
   104fc:	10001e1e 	bne	r2,zero,10578 <OSEventPendMulti+0x238>
   10500:	00006606 	br	1069c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   10504:	e0bff017 	ldw	r2,-64(fp)
   10508:	1080020b 	ldhu	r2,8(r2)
   1050c:	10bfffcc 	andi	r2,r2,65535
   10510:	10001526 	beq	r2,zero,10568 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   10514:	e0bff017 	ldw	r2,-64(fp)
   10518:	1080020b 	ldhu	r2,8(r2)
   1051c:	10bfffc4 	addi	r2,r2,-1
   10520:	1007883a 	mov	r3,r2
   10524:	e0bff017 	ldw	r2,-64(fp)
   10528:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   1052c:	e0bffd17 	ldw	r2,-12(fp)
   10530:	10c00104 	addi	r3,r2,4
   10534:	e0fffd15 	stw	r3,-12(fp)
   10538:	e0fff017 	ldw	r3,-64(fp)
   1053c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   10540:	00800044 	movi	r2,1
   10544:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   10548:	e0bffe17 	ldw	r2,-8(fp)
   1054c:	10c00104 	addi	r3,r2,4
   10550:	e0fffe15 	stw	r3,-8(fp)
   10554:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   10558:	e0bff18b 	ldhu	r2,-58(fp)
   1055c:	10800044 	addi	r2,r2,1
   10560:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   10564:	00005806 	br	106c8 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   10568:	e0bff203 	ldbu	r2,-56(fp)
   1056c:	10800054 	ori	r2,r2,1
   10570:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   10574:	00005406 	br	106c8 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   10578:	e0bff017 	ldw	r2,-64(fp)
   1057c:	10800117 	ldw	r2,4(r2)
   10580:	10001326 	beq	r2,zero,105d0 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   10584:	e0bffe17 	ldw	r2,-8(fp)
   10588:	10c00104 	addi	r3,r2,4
   1058c:	e0fffe15 	stw	r3,-8(fp)
   10590:	e0fff017 	ldw	r3,-64(fp)
   10594:	18c00117 	ldw	r3,4(r3)
   10598:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   1059c:	e0bff017 	ldw	r2,-64(fp)
   105a0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   105a4:	e0bffd17 	ldw	r2,-12(fp)
   105a8:	10c00104 	addi	r3,r2,4
   105ac:	e0fffd15 	stw	r3,-12(fp)
   105b0:	e0fff017 	ldw	r3,-64(fp)
   105b4:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   105b8:	00800044 	movi	r2,1
   105bc:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   105c0:	e0bff18b 	ldhu	r2,-58(fp)
   105c4:	10800044 	addi	r2,r2,1
   105c8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   105cc:	00003e06 	br	106c8 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   105d0:	e0bff203 	ldbu	r2,-56(fp)
   105d4:	10800094 	ori	r2,r2,2
   105d8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   105dc:	00003a06 	br	106c8 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   105e0:	e0bff017 	ldw	r2,-64(fp)
   105e4:	10800117 	ldw	r2,4(r2)
   105e8:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   105ec:	e0bff517 	ldw	r2,-44(fp)
   105f0:	1080058b 	ldhu	r2,22(r2)
   105f4:	10bfffcc 	andi	r2,r2,65535
   105f8:	10002426 	beq	r2,zero,1068c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   105fc:	e0bffe17 	ldw	r2,-8(fp)
   10600:	10c00104 	addi	r3,r2,4
   10604:	e0fffe15 	stw	r3,-8(fp)
   10608:	e0fff517 	ldw	r3,-44(fp)
   1060c:	18c00417 	ldw	r3,16(r3)
   10610:	19400104 	addi	r5,r3,4
   10614:	e13ff517 	ldw	r4,-44(fp)
   10618:	21400415 	stw	r5,16(r4)
   1061c:	18c00017 	ldw	r3,0(r3)
   10620:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   10624:	e0bff517 	ldw	r2,-44(fp)
   10628:	10c00417 	ldw	r3,16(r2)
   1062c:	e0bff517 	ldw	r2,-44(fp)
   10630:	10800217 	ldw	r2,8(r2)
   10634:	1880041e 	bne	r3,r2,10648 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   10638:	e0bff517 	ldw	r2,-44(fp)
   1063c:	10c00117 	ldw	r3,4(r2)
   10640:	e0bff517 	ldw	r2,-44(fp)
   10644:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   10648:	e0bff517 	ldw	r2,-44(fp)
   1064c:	1080058b 	ldhu	r2,22(r2)
   10650:	10bfffc4 	addi	r2,r2,-1
   10654:	1007883a 	mov	r3,r2
   10658:	e0bff517 	ldw	r2,-44(fp)
   1065c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   10660:	e0bffd17 	ldw	r2,-12(fp)
   10664:	10c00104 	addi	r3,r2,4
   10668:	e0fffd15 	stw	r3,-12(fp)
   1066c:	e0fff017 	ldw	r3,-64(fp)
   10670:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   10674:	00800044 	movi	r2,1
   10678:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1067c:	e0bff18b 	ldhu	r2,-58(fp)
   10680:	10800044 	addi	r2,r2,1
   10684:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   10688:	00000f06 	br	106c8 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   1068c:	e0bff203 	ldbu	r2,-56(fp)
   10690:	10800114 	ori	r2,r2,4
   10694:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   10698:	00000b06 	br	106c8 <OSEventPendMulti+0x388>
   1069c:	e0bff317 	ldw	r2,-52(fp)
   106a0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   106a4:	e0bff417 	ldw	r2,-48(fp)
   106a8:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   106ac:	e0bffd17 	ldw	r2,-12(fp)
   106b0:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   106b4:	e0800217 	ldw	r2,8(fp)
   106b8:	00c00044 	movi	r3,1
   106bc:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   106c0:	e0bff18b 	ldhu	r2,-58(fp)
   106c4:	00009d06 	br	1093c <OSEventPendMulti+0x5fc>
        }
        pevents++;
   106c8:	e0bfef17 	ldw	r2,-68(fp)
   106cc:	10800104 	addi	r2,r2,4
   106d0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   106d4:	e0bfef17 	ldw	r2,-68(fp)
   106d8:	10800017 	ldw	r2,0(r2)
   106dc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   106e0:	e0bff017 	ldw	r2,-64(fp)
   106e4:	103f7d1e 	bne	r2,zero,104dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70104dc>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   106e8:	e0bff103 	ldbu	r2,-60(fp)
   106ec:	10800058 	cmpnei	r2,r2,1
   106f0:	10000a1e 	bne	r2,zero,1071c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   106f4:	e0bffd17 	ldw	r2,-12(fp)
   106f8:	10000015 	stw	zero,0(r2)
   106fc:	e0bff317 	ldw	r2,-52(fp)
   10700:	e0bff615 	stw	r2,-40(fp)
   10704:	e0bff617 	ldw	r2,-40(fp)
   10708:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   1070c:	e0800217 	ldw	r2,8(fp)
   10710:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   10714:	e0bff18b 	ldhu	r2,-58(fp)
   10718:	00008806 	br	1093c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   1071c:	d0a82717 	ldw	r2,-24420(gp)
   10720:	d0e82717 	ldw	r3,-24420(gp)
   10724:	19000c03 	ldbu	r4,48(r3)
   10728:	e0fff203 	ldbu	r3,-56(fp)
   1072c:	20c6b03a 	or	r3,r4,r3
   10730:	1809883a 	mov	r4,r3
   10734:	00ffe004 	movi	r3,-128
   10738:	20c6b03a 	or	r3,r4,r3
   1073c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   10740:	d0a82717 	ldw	r2,-24420(gp)
   10744:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   10748:	d0a82717 	ldw	r2,-24420(gp)
   1074c:	e0ffff0b 	ldhu	r3,-4(fp)
   10750:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   10754:	e13ffc17 	ldw	r4,-16(fp)
   10758:	001127c0 	call	1127c <OS_EventTaskWaitMulti>
   1075c:	e0bff317 	ldw	r2,-52(fp)
   10760:	e0bff915 	stw	r2,-28(fp)
   10764:	e0bff917 	ldw	r2,-28(fp)
   10768:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   1076c:	0011a200 	call	11a20 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10770:	0005303a 	rdctl	r2,status
   10774:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10778:	e0fff717 	ldw	r3,-36(fp)
   1077c:	00bfff84 	movi	r2,-2
   10780:	1884703a 	and	r2,r3,r2
   10784:	1001703a 	wrctl	status,r2
  
  return context;
   10788:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   1078c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   10790:	d0a82717 	ldw	r2,-24420(gp)
   10794:	10800c43 	ldbu	r2,49(r2)
   10798:	10803fcc 	andi	r2,r2,255
   1079c:	10000226 	beq	r2,zero,107a8 <OSEventPendMulti+0x468>
   107a0:	108000a0 	cmpeqi	r2,r2,2
   107a4:	10001826 	beq	r2,zero,10808 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   107a8:	d0a82717 	ldw	r2,-24420(gp)
   107ac:	10800717 	ldw	r2,28(r2)
   107b0:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   107b4:	e0bff017 	ldw	r2,-64(fp)
   107b8:	10000b26 	beq	r2,zero,107e8 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   107bc:	e0bffd17 	ldw	r2,-12(fp)
   107c0:	10c00104 	addi	r3,r2,4
   107c4:	e0fffd15 	stw	r3,-12(fp)
   107c8:	e0fff017 	ldw	r3,-64(fp)
   107cc:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   107d0:	e0bffd17 	ldw	r2,-12(fp)
   107d4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   107d8:	e0bff18b 	ldhu	r2,-58(fp)
   107dc:	10800044 	addi	r2,r2,1
   107e0:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   107e4:	00000d06 	br	1081c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   107e8:	d0a82717 	ldw	r2,-24420(gp)
   107ec:	00c00044 	movi	r3,1
   107f0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   107f4:	d0a82717 	ldw	r2,-24420(gp)
   107f8:	e17ffc17 	ldw	r5,-16(fp)
   107fc:	1009883a 	mov	r4,r2
   10800:	00114840 	call	11484 <OS_EventTaskRemoveMulti>
             }
			 break;
   10804:	00000506 	br	1081c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   10808:	d0a82717 	ldw	r2,-24420(gp)
   1080c:	e17ffc17 	ldw	r5,-16(fp)
   10810:	1009883a 	mov	r4,r2
   10814:	00114840 	call	11484 <OS_EventTaskRemoveMulti>
             break;
   10818:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   1081c:	d0a82717 	ldw	r2,-24420(gp)
   10820:	10800c43 	ldbu	r2,49(r2)
   10824:	10803fcc 	andi	r2,r2,255
   10828:	10000326 	beq	r2,zero,10838 <OSEventPendMulti+0x4f8>
   1082c:	108000a0 	cmpeqi	r2,r2,2
   10830:	1000231e 	bne	r2,zero,108c0 <OSEventPendMulti+0x580>
   10834:	00002a06 	br	108e0 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   10838:	e0bff017 	ldw	r2,-64(fp)
   1083c:	10800003 	ldbu	r2,0(r2)
   10840:	10803fcc 	andi	r2,r2,255
   10844:	0080100e 	bge	zero,r2,10888 <OSEventPendMulti+0x548>
   10848:	10c000d0 	cmplti	r3,r2,3
   1084c:	1800071e 	bne	r3,zero,1086c <OSEventPendMulti+0x52c>
   10850:	108000e0 	cmpeqi	r2,r2,3
   10854:	10000c26 	beq	r2,zero,10888 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   10858:	e0bffe17 	ldw	r2,-8(fp)
   1085c:	10c00104 	addi	r3,r2,4
   10860:	e0fffe15 	stw	r3,-8(fp)
   10864:	10000015 	stw	zero,0(r2)
                      break;
   10868:	00001206 	br	108b4 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   1086c:	e0bffe17 	ldw	r2,-8(fp)
   10870:	10c00104 	addi	r3,r2,4
   10874:	e0fffe15 	stw	r3,-8(fp)
   10878:	d0e82717 	ldw	r3,-24420(gp)
   1087c:	18c00917 	ldw	r3,36(r3)
   10880:	10c00015 	stw	r3,0(r2)
                      break;
   10884:	00000b06 	br	108b4 <OSEventPendMulti+0x574>
   10888:	e0bff317 	ldw	r2,-52(fp)
   1088c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10890:	e0bff817 	ldw	r2,-32(fp)
   10894:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   10898:	e0bffd17 	ldw	r2,-12(fp)
   1089c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   108a0:	e0800217 	ldw	r2,8(fp)
   108a4:	00c00044 	movi	r3,1
   108a8:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   108ac:	e0bff18b 	ldhu	r2,-58(fp)
   108b0:	00002206 	br	1093c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   108b4:	e0800217 	ldw	r2,8(fp)
   108b8:	10000005 	stb	zero,0(r2)
             break;
   108bc:	00001006 	br	10900 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   108c0:	e0bffe17 	ldw	r2,-8(fp)
   108c4:	10c00104 	addi	r3,r2,4
   108c8:	e0fffe15 	stw	r3,-8(fp)
   108cc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   108d0:	e0800217 	ldw	r2,8(fp)
   108d4:	00c00384 	movi	r3,14
   108d8:	10c00005 	stb	r3,0(r2)
             break;
   108dc:	00000806 	br	10900 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   108e0:	e0bffe17 	ldw	r2,-8(fp)
   108e4:	10c00104 	addi	r3,r2,4
   108e8:	e0fffe15 	stw	r3,-8(fp)
   108ec:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   108f0:	e0800217 	ldw	r2,8(fp)
   108f4:	00c00284 	movi	r3,10
   108f8:	10c00005 	stb	r3,0(r2)
             break;
   108fc:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   10900:	d0a82717 	ldw	r2,-24420(gp)
   10904:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   10908:	d0a82717 	ldw	r2,-24420(gp)
   1090c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   10910:	d0a82717 	ldw	r2,-24420(gp)
   10914:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   10918:	d0a82717 	ldw	r2,-24420(gp)
   1091c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   10920:	d0a82717 	ldw	r2,-24420(gp)
   10924:	10000915 	stw	zero,36(r2)
   10928:	e0bff317 	ldw	r2,-52(fp)
   1092c:	e0bffa15 	stw	r2,-24(fp)
   10930:	e0bffa17 	ldw	r2,-24(fp)
   10934:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   10938:	e0bff18b 	ldhu	r2,-58(fp)
}
   1093c:	e037883a 	mov	sp,fp
   10940:	dfc00117 	ldw	ra,4(sp)
   10944:	df000017 	ldw	fp,0(sp)
   10948:	dec00204 	addi	sp,sp,8
   1094c:	f800283a 	ret

00010950 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   10950:	defffe04 	addi	sp,sp,-8
   10954:	dfc00115 	stw	ra,4(sp)
   10958:	df000015 	stw	fp,0(sp)
   1095c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   10960:	001af740 	call	1af74 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   10964:	00116cc0 	call	116cc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   10968:	00117140 	call	11714 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   1096c:	00118800 	call	11880 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   10970:	00115ec0 	call	115ec <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   10974:	00137300 	call	13730 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   10978:	00140300 	call	14030 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   1097c:	00151580 	call	15158 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   10980:	00117800 	call	11780 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   10984:	00118000 	call	11800 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   10988:	001af940 	call	1af94 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   1098c:	00121040 	call	12104 <OSDebugInit>
#endif
}
   10990:	0001883a 	nop
   10994:	e037883a 	mov	sp,fp
   10998:	dfc00117 	ldw	ra,4(sp)
   1099c:	df000017 	ldw	fp,0(sp)
   109a0:	dec00204 	addi	sp,sp,8
   109a4:	f800283a 	ret

000109a8 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   109a8:	deffff04 	addi	sp,sp,-4
   109ac:	df000015 	stw	fp,0(sp)
   109b0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   109b4:	d0a81843 	ldbu	r2,-24479(gp)
   109b8:	10803fcc 	andi	r2,r2,255
   109bc:	10800058 	cmpnei	r2,r2,1
   109c0:	1000071e 	bne	r2,zero,109e0 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   109c4:	d0a82603 	ldbu	r2,-24424(gp)
   109c8:	10803fcc 	andi	r2,r2,255
   109cc:	10803fe0 	cmpeqi	r2,r2,255
   109d0:	1000031e 	bne	r2,zero,109e0 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   109d4:	d0a82603 	ldbu	r2,-24424(gp)
   109d8:	10800044 	addi	r2,r2,1
   109dc:	d0a82605 	stb	r2,-24424(gp)
        }
    }
}
   109e0:	0001883a 	nop
   109e4:	e037883a 	mov	sp,fp
   109e8:	df000017 	ldw	fp,0(sp)
   109ec:	dec00104 	addi	sp,sp,4
   109f0:	f800283a 	ret

000109f4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   109f4:	defffb04 	addi	sp,sp,-20
   109f8:	dfc00415 	stw	ra,16(sp)
   109fc:	df000315 	stw	fp,12(sp)
   10a00:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   10a04:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   10a08:	d0a81843 	ldbu	r2,-24479(gp)
   10a0c:	10803fcc 	andi	r2,r2,255
   10a10:	10800058 	cmpnei	r2,r2,1
   10a14:	10002f1e 	bne	r2,zero,10ad4 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a18:	0005303a 	rdctl	r2,status
   10a1c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a20:	e0ffff17 	ldw	r3,-4(fp)
   10a24:	00bfff84 	movi	r2,-2
   10a28:	1884703a 	and	r2,r3,r2
   10a2c:	1001703a 	wrctl	status,r2
  
  return context;
   10a30:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   10a34:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   10a38:	d0a82603 	ldbu	r2,-24424(gp)
   10a3c:	10803fcc 	andi	r2,r2,255
   10a40:	10000326 	beq	r2,zero,10a50 <OSIntExit+0x5c>
            OSIntNesting--;
   10a44:	d0a82603 	ldbu	r2,-24424(gp)
   10a48:	10bfffc4 	addi	r2,r2,-1
   10a4c:	d0a82605 	stb	r2,-24424(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   10a50:	d0a82603 	ldbu	r2,-24424(gp)
   10a54:	10803fcc 	andi	r2,r2,255
   10a58:	10001a1e 	bne	r2,zero,10ac4 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   10a5c:	d0a81803 	ldbu	r2,-24480(gp)
   10a60:	10803fcc 	andi	r2,r2,255
   10a64:	1000171e 	bne	r2,zero,10ac4 <OSIntExit+0xd0>
                OS_SchedNew();
   10a68:	0011af00 	call	11af0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   10a6c:	d0e81a03 	ldbu	r3,-24472(gp)
   10a70:	d0a81a43 	ldbu	r2,-24471(gp)
   10a74:	18c03fcc 	andi	r3,r3,255
   10a78:	10803fcc 	andi	r2,r2,255
   10a7c:	18801126 	beq	r3,r2,10ac4 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   10a80:	d0a81a03 	ldbu	r2,-24472(gp)
   10a84:	10c03fcc 	andi	r3,r2,255
   10a88:	008000b4 	movhi	r2,2
   10a8c:	108be504 	addi	r2,r2,12180
   10a90:	18c7883a 	add	r3,r3,r3
   10a94:	18c7883a 	add	r3,r3,r3
   10a98:	10c5883a 	add	r2,r2,r3
   10a9c:	10800017 	ldw	r2,0(r2)
   10aa0:	d0a82215 	stw	r2,-24440(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   10aa4:	d0a82217 	ldw	r2,-24440(gp)
   10aa8:	10c00e17 	ldw	r3,56(r2)
   10aac:	18c00044 	addi	r3,r3,1
   10ab0:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   10ab4:	d0a81d17 	ldw	r2,-24460(gp)
   10ab8:	10800044 	addi	r2,r2,1
   10abc:	d0a81d15 	stw	r2,-24460(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   10ac0:	001aca00 	call	1aca0 <OSCtxSw>
   10ac4:	e0bffd17 	ldw	r2,-12(fp)
   10ac8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10acc:	e0bffe17 	ldw	r2,-8(fp)
   10ad0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   10ad4:	0001883a 	nop
   10ad8:	e037883a 	mov	sp,fp
   10adc:	dfc00117 	ldw	ra,4(sp)
   10ae0:	df000017 	ldw	fp,0(sp)
   10ae4:	dec00204 	addi	sp,sp,8
   10ae8:	f800283a 	ret

00010aec <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   10aec:	defffc04 	addi	sp,sp,-16
   10af0:	df000315 	stw	fp,12(sp)
   10af4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10af8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   10afc:	d0a81843 	ldbu	r2,-24479(gp)
   10b00:	10803fcc 	andi	r2,r2,255
   10b04:	10800058 	cmpnei	r2,r2,1
   10b08:	1000161e 	bne	r2,zero,10b64 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b0c:	0005303a 	rdctl	r2,status
   10b10:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b14:	e0ffff17 	ldw	r3,-4(fp)
   10b18:	00bfff84 	movi	r2,-2
   10b1c:	1884703a 	and	r2,r3,r2
   10b20:	1001703a 	wrctl	status,r2
  
  return context;
   10b24:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   10b28:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   10b2c:	d0a82603 	ldbu	r2,-24424(gp)
   10b30:	10803fcc 	andi	r2,r2,255
   10b34:	1000071e 	bne	r2,zero,10b54 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   10b38:	d0a81803 	ldbu	r2,-24480(gp)
   10b3c:	10803fcc 	andi	r2,r2,255
   10b40:	10803fe0 	cmpeqi	r2,r2,255
   10b44:	1000031e 	bne	r2,zero,10b54 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   10b48:	d0a81803 	ldbu	r2,-24480(gp)
   10b4c:	10800044 	addi	r2,r2,1
   10b50:	d0a81805 	stb	r2,-24480(gp)
   10b54:	e0bffd17 	ldw	r2,-12(fp)
   10b58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b5c:	e0bffe17 	ldw	r2,-8(fp)
   10b60:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   10b64:	0001883a 	nop
   10b68:	e037883a 	mov	sp,fp
   10b6c:	df000017 	ldw	fp,0(sp)
   10b70:	dec00104 	addi	sp,sp,4
   10b74:	f800283a 	ret

00010b78 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   10b78:	defff804 	addi	sp,sp,-32
   10b7c:	dfc00715 	stw	ra,28(sp)
   10b80:	df000615 	stw	fp,24(sp)
   10b84:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   10b88:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   10b8c:	d0a81843 	ldbu	r2,-24479(gp)
   10b90:	10803fcc 	andi	r2,r2,255
   10b94:	10800058 	cmpnei	r2,r2,1
   10b98:	1000281e 	bne	r2,zero,10c3c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b9c:	0005303a 	rdctl	r2,status
   10ba0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ba4:	e0ffff17 	ldw	r3,-4(fp)
   10ba8:	00bfff84 	movi	r2,-2
   10bac:	1884703a 	and	r2,r3,r2
   10bb0:	1001703a 	wrctl	status,r2
  
  return context;
   10bb4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   10bb8:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   10bbc:	d0a81803 	ldbu	r2,-24480(gp)
   10bc0:	10803fcc 	andi	r2,r2,255
   10bc4:	10001926 	beq	r2,zero,10c2c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   10bc8:	d0a81803 	ldbu	r2,-24480(gp)
   10bcc:	10bfffc4 	addi	r2,r2,-1
   10bd0:	d0a81805 	stb	r2,-24480(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   10bd4:	d0a81803 	ldbu	r2,-24480(gp)
   10bd8:	10803fcc 	andi	r2,r2,255
   10bdc:	10000e1e 	bne	r2,zero,10c18 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   10be0:	d0a82603 	ldbu	r2,-24424(gp)
   10be4:	10803fcc 	andi	r2,r2,255
   10be8:	1000061e 	bne	r2,zero,10c04 <OSSchedUnlock+0x8c>
   10bec:	e0bffa17 	ldw	r2,-24(fp)
   10bf0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10bf4:	e0bffb17 	ldw	r2,-20(fp)
   10bf8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   10bfc:	0011a200 	call	11a20 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   10c00:	00000e06 	br	10c3c <OSSchedUnlock+0xc4>
   10c04:	e0bffa17 	ldw	r2,-24(fp)
   10c08:	e0bffc15 	stw	r2,-16(fp)
   10c0c:	e0bffc17 	ldw	r2,-16(fp)
   10c10:	1001703a 	wrctl	status,r2
   10c14:	00000906 	br	10c3c <OSSchedUnlock+0xc4>
   10c18:	e0bffa17 	ldw	r2,-24(fp)
   10c1c:	e0bffd15 	stw	r2,-12(fp)
   10c20:	e0bffd17 	ldw	r2,-12(fp)
   10c24:	1001703a 	wrctl	status,r2
   10c28:	00000406 	br	10c3c <OSSchedUnlock+0xc4>
   10c2c:	e0bffa17 	ldw	r2,-24(fp)
   10c30:	e0bffe15 	stw	r2,-8(fp)
   10c34:	e0bffe17 	ldw	r2,-8(fp)
   10c38:	1001703a 	wrctl	status,r2
   10c3c:	0001883a 	nop
   10c40:	e037883a 	mov	sp,fp
   10c44:	dfc00117 	ldw	ra,4(sp)
   10c48:	df000017 	ldw	fp,0(sp)
   10c4c:	dec00204 	addi	sp,sp,8
   10c50:	f800283a 	ret

00010c54 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   10c54:	defffe04 	addi	sp,sp,-8
   10c58:	dfc00115 	stw	ra,4(sp)
   10c5c:	df000015 	stw	fp,0(sp)
   10c60:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   10c64:	d0a81843 	ldbu	r2,-24479(gp)
   10c68:	10803fcc 	andi	r2,r2,255
   10c6c:	10000f1e 	bne	r2,zero,10cac <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   10c70:	0011af00 	call	11af0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   10c74:	d0a81a03 	ldbu	r2,-24472(gp)
   10c78:	d0a81a45 	stb	r2,-24471(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   10c7c:	d0a81a03 	ldbu	r2,-24472(gp)
   10c80:	10c03fcc 	andi	r3,r2,255
   10c84:	008000b4 	movhi	r2,2
   10c88:	108be504 	addi	r2,r2,12180
   10c8c:	18c7883a 	add	r3,r3,r3
   10c90:	18c7883a 	add	r3,r3,r3
   10c94:	10c5883a 	add	r2,r2,r3
   10c98:	10800017 	ldw	r2,0(r2)
   10c9c:	d0a82215 	stw	r2,-24440(gp)
        OSTCBCur      = OSTCBHighRdy;
   10ca0:	d0a82217 	ldw	r2,-24440(gp)
   10ca4:	d0a82715 	stw	r2,-24420(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   10ca8:	001ad2c0 	call	1ad2c <OSStartHighRdy>
    }
}
   10cac:	0001883a 	nop
   10cb0:	e037883a 	mov	sp,fp
   10cb4:	dfc00117 	ldw	ra,4(sp)
   10cb8:	df000017 	ldw	fp,0(sp)
   10cbc:	dec00204 	addi	sp,sp,8
   10cc0:	f800283a 	ret

00010cc4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   10cc4:	defff904 	addi	sp,sp,-28
   10cc8:	dfc00615 	stw	ra,24(sp)
   10ccc:	df000515 	stw	fp,20(sp)
   10cd0:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10cd4:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   10cd8:	01000084 	movi	r4,2
   10cdc:	00173cc0 	call	173cc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ce0:	0005303a 	rdctl	r2,status
   10ce4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ce8:	e0fffc17 	ldw	r3,-16(fp)
   10cec:	00bfff84 	movi	r2,-2
   10cf0:	1884703a 	and	r2,r3,r2
   10cf4:	1001703a 	wrctl	status,r2
  
  return context;
   10cf8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   10cfc:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   10d00:	d0281915 	stw	zero,-24476(gp)
   10d04:	e0bffb17 	ldw	r2,-20(fp)
   10d08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d0c:	e0bffd17 	ldw	r2,-12(fp)
   10d10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   10d14:	0009883a 	mov	r4,zero
   10d18:	00173cc0 	call	173cc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d1c:	0005303a 	rdctl	r2,status
   10d20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d24:	e0fffe17 	ldw	r3,-8(fp)
   10d28:	00bfff84 	movi	r2,-2
   10d2c:	1884703a 	and	r2,r3,r2
   10d30:	1001703a 	wrctl	status,r2
  
  return context;
   10d34:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   10d38:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   10d3c:	d0a81917 	ldw	r2,-24476(gp)
   10d40:	d0a81e15 	stw	r2,-24456(gp)
    OSStatRdy    = OS_TRUE;
   10d44:	00800044 	movi	r2,1
   10d48:	d0a82a05 	stb	r2,-24408(gp)
   10d4c:	e0bffb17 	ldw	r2,-20(fp)
   10d50:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d54:	e0bfff17 	ldw	r2,-4(fp)
   10d58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   10d5c:	0001883a 	nop
   10d60:	e037883a 	mov	sp,fp
   10d64:	dfc00117 	ldw	ra,4(sp)
   10d68:	df000017 	ldw	fp,0(sp)
   10d6c:	dec00204 	addi	sp,sp,8
   10d70:	f800283a 	ret

00010d74 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   10d74:	defff704 	addi	sp,sp,-36
   10d78:	dfc00815 	stw	ra,32(sp)
   10d7c:	df000715 	stw	fp,28(sp)
   10d80:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   10d84:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   10d88:	001af540 	call	1af54 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d8c:	0005303a 	rdctl	r2,status
   10d90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d94:	e0fffd17 	ldw	r3,-12(fp)
   10d98:	00bfff84 	movi	r2,-2
   10d9c:	1884703a 	and	r2,r3,r2
   10da0:	1001703a 	wrctl	status,r2
  
  return context;
   10da4:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   10da8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   10dac:	d0a82817 	ldw	r2,-24416(gp)
   10db0:	10800044 	addi	r2,r2,1
   10db4:	d0a82815 	stw	r2,-24416(gp)
   10db8:	e0bffb17 	ldw	r2,-20(fp)
   10dbc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10dc0:	e0bfff17 	ldw	r2,-4(fp)
   10dc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   10dc8:	d0a81843 	ldbu	r2,-24479(gp)
   10dcc:	10803fcc 	andi	r2,r2,255
   10dd0:	10800058 	cmpnei	r2,r2,1
   10dd4:	10006a1e 	bne	r2,zero,10f80 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   10dd8:	d0a81c03 	ldbu	r2,-24464(gp)
   10ddc:	10803fcc 	andi	r2,r2,255
   10de0:	10c00060 	cmpeqi	r3,r2,1
   10de4:	1800061e 	bne	r3,zero,10e00 <OSTimeTick+0x8c>
   10de8:	10c000a0 	cmpeqi	r3,r2,2
   10dec:	1800061e 	bne	r3,zero,10e08 <OSTimeTick+0x94>
   10df0:	10000a1e 	bne	r2,zero,10e1c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   10df4:	00800044 	movi	r2,1
   10df8:	e0bffa05 	stb	r2,-24(fp)
                 break;
   10dfc:	00000b06 	br	10e2c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   10e00:	e03ffa05 	stb	zero,-24(fp)
                 break;
   10e04:	00000906 	br	10e2c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   10e08:	00800044 	movi	r2,1
   10e0c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   10e10:	00800044 	movi	r2,1
   10e14:	d0a81c05 	stb	r2,-24464(gp)
                 break;
   10e18:	00000406 	br	10e2c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   10e1c:	00800044 	movi	r2,1
   10e20:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   10e24:	d0281c05 	stb	zero,-24464(gp)
                 break;
   10e28:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   10e2c:	e0bffa03 	ldbu	r2,-24(fp)
   10e30:	10005226 	beq	r2,zero,10f7c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   10e34:	d0a81b17 	ldw	r2,-24468(gp)
   10e38:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   10e3c:	00004906 	br	10f64 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e40:	0005303a 	rdctl	r2,status
   10e44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e48:	e0fffc17 	ldw	r3,-16(fp)
   10e4c:	00bfff84 	movi	r2,-2
   10e50:	1884703a 	and	r2,r3,r2
   10e54:	1001703a 	wrctl	status,r2
  
  return context;
   10e58:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   10e5c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   10e60:	e0bff917 	ldw	r2,-28(fp)
   10e64:	10800b8b 	ldhu	r2,46(r2)
   10e68:	10bfffcc 	andi	r2,r2,65535
   10e6c:	10003626 	beq	r2,zero,10f48 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   10e70:	e0bff917 	ldw	r2,-28(fp)
   10e74:	10800b8b 	ldhu	r2,46(r2)
   10e78:	10bfffc4 	addi	r2,r2,-1
   10e7c:	1007883a 	mov	r3,r2
   10e80:	e0bff917 	ldw	r2,-28(fp)
   10e84:	10c00b8d 	sth	r3,46(r2)
   10e88:	e0bff917 	ldw	r2,-28(fp)
   10e8c:	10800b8b 	ldhu	r2,46(r2)
   10e90:	10bfffcc 	andi	r2,r2,65535
   10e94:	10002c1e 	bne	r2,zero,10f48 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   10e98:	e0bff917 	ldw	r2,-28(fp)
   10e9c:	10800c03 	ldbu	r2,48(r2)
   10ea0:	10803fcc 	andi	r2,r2,255
   10ea4:	10800dcc 	andi	r2,r2,55
   10ea8:	10000b26 	beq	r2,zero,10ed8 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   10eac:	e0bff917 	ldw	r2,-28(fp)
   10eb0:	10c00c03 	ldbu	r3,48(r2)
   10eb4:	00bff204 	movi	r2,-56
   10eb8:	1884703a 	and	r2,r3,r2
   10ebc:	1007883a 	mov	r3,r2
   10ec0:	e0bff917 	ldw	r2,-28(fp)
   10ec4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   10ec8:	e0bff917 	ldw	r2,-28(fp)
   10ecc:	00c00044 	movi	r3,1
   10ed0:	10c00c45 	stb	r3,49(r2)
   10ed4:	00000206 	br	10ee0 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   10ed8:	e0bff917 	ldw	r2,-28(fp)
   10edc:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   10ee0:	e0bff917 	ldw	r2,-28(fp)
   10ee4:	10800c03 	ldbu	r2,48(r2)
   10ee8:	10803fcc 	andi	r2,r2,255
   10eec:	1080020c 	andi	r2,r2,8
   10ef0:	1000151e 	bne	r2,zero,10f48 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   10ef4:	e0bff917 	ldw	r2,-28(fp)
   10ef8:	10c00d83 	ldbu	r3,54(r2)
   10efc:	d0a82403 	ldbu	r2,-24432(gp)
   10f00:	1884b03a 	or	r2,r3,r2
   10f04:	d0a82405 	stb	r2,-24432(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   10f08:	e0bff917 	ldw	r2,-28(fp)
   10f0c:	10800d03 	ldbu	r2,52(r2)
   10f10:	10c03fcc 	andi	r3,r2,255
   10f14:	e0bff917 	ldw	r2,-28(fp)
   10f18:	10800d03 	ldbu	r2,52(r2)
   10f1c:	11003fcc 	andi	r4,r2,255
   10f20:	d0a82444 	addi	r2,gp,-24431
   10f24:	2085883a 	add	r2,r4,r2
   10f28:	11000003 	ldbu	r4,0(r2)
   10f2c:	e0bff917 	ldw	r2,-28(fp)
   10f30:	10800d43 	ldbu	r2,53(r2)
   10f34:	2084b03a 	or	r2,r4,r2
   10f38:	1009883a 	mov	r4,r2
   10f3c:	d0a82444 	addi	r2,gp,-24431
   10f40:	1885883a 	add	r2,r3,r2
   10f44:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   10f48:	e0bff917 	ldw	r2,-28(fp)
   10f4c:	10800517 	ldw	r2,20(r2)
   10f50:	e0bff915 	stw	r2,-28(fp)
   10f54:	e0bffb17 	ldw	r2,-20(fp)
   10f58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f5c:	e0bffe17 	ldw	r2,-8(fp)
   10f60:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   10f64:	e0bff917 	ldw	r2,-28(fp)
   10f68:	10800c83 	ldbu	r2,50(r2)
   10f6c:	10803fcc 	andi	r2,r2,255
   10f70:	10800518 	cmpnei	r2,r2,20
   10f74:	103fb21e 	bne	r2,zero,10e40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010e40>
   10f78:	00000106 	br	10f80 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   10f7c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   10f80:	e037883a 	mov	sp,fp
   10f84:	dfc00117 	ldw	ra,4(sp)
   10f88:	df000017 	ldw	fp,0(sp)
   10f8c:	dec00204 	addi	sp,sp,8
   10f90:	f800283a 	ret

00010f94 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   10f94:	deffff04 	addi	sp,sp,-4
   10f98:	df000015 	stw	fp,0(sp)
   10f9c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   10fa0:	00804784 	movi	r2,286
}
   10fa4:	e037883a 	mov	sp,fp
   10fa8:	df000017 	ldw	fp,0(sp)
   10fac:	dec00104 	addi	sp,sp,4
   10fb0:	f800283a 	ret

00010fb4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   10fb4:	deffff04 	addi	sp,sp,-4
   10fb8:	df000015 	stw	fp,0(sp)
   10fbc:	d839883a 	mov	fp,sp
}
   10fc0:	0001883a 	nop
   10fc4:	e037883a 	mov	sp,fp
   10fc8:	df000017 	ldw	fp,0(sp)
   10fcc:	dec00104 	addi	sp,sp,4
   10fd0:	f800283a 	ret

00010fd4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   10fd4:	defff804 	addi	sp,sp,-32
   10fd8:	dfc00715 	stw	ra,28(sp)
   10fdc:	df000615 	stw	fp,24(sp)
   10fe0:	df000604 	addi	fp,sp,24
   10fe4:	e13ffc15 	stw	r4,-16(fp)
   10fe8:	e17ffd15 	stw	r5,-12(fp)
   10fec:	3007883a 	mov	r3,r6
   10ff0:	3805883a 	mov	r2,r7
   10ff4:	e0fffe05 	stb	r3,-8(fp)
   10ff8:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   10ffc:	e0bffc17 	ldw	r2,-16(fp)
   11000:	10800283 	ldbu	r2,10(r2)
   11004:	10c03fcc 	andi	r3,r2,255
   11008:	008000b4 	movhi	r2,2
   1100c:	10aed704 	addi	r2,r2,-17572
   11010:	10c5883a 	add	r2,r2,r3
   11014:	10800003 	ldbu	r2,0(r2)
   11018:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   1101c:	e0bffa03 	ldbu	r2,-24(fp)
   11020:	e0fffc17 	ldw	r3,-16(fp)
   11024:	1885883a 	add	r2,r3,r2
   11028:	108002c4 	addi	r2,r2,11
   1102c:	10800003 	ldbu	r2,0(r2)
   11030:	10c03fcc 	andi	r3,r2,255
   11034:	008000b4 	movhi	r2,2
   11038:	10aed704 	addi	r2,r2,-17572
   1103c:	10c5883a 	add	r2,r2,r3
   11040:	10800003 	ldbu	r2,0(r2)
   11044:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   11048:	e0bffa03 	ldbu	r2,-24(fp)
   1104c:	100490fa 	slli	r2,r2,3
   11050:	1007883a 	mov	r3,r2
   11054:	e0bffa43 	ldbu	r2,-23(fp)
   11058:	1885883a 	add	r2,r3,r2
   1105c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   11060:	e0fffa83 	ldbu	r3,-22(fp)
   11064:	008000b4 	movhi	r2,2
   11068:	108be504 	addi	r2,r2,12180
   1106c:	18c7883a 	add	r3,r3,r3
   11070:	18c7883a 	add	r3,r3,r3
   11074:	10c5883a 	add	r2,r2,r3
   11078:	10800017 	ldw	r2,0(r2)
   1107c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   11080:	e0bffb17 	ldw	r2,-20(fp)
   11084:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   11088:	e0bffb17 	ldw	r2,-20(fp)
   1108c:	e0fffd17 	ldw	r3,-12(fp)
   11090:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   11094:	e0bffb17 	ldw	r2,-20(fp)
   11098:	10800c03 	ldbu	r2,48(r2)
   1109c:	1007883a 	mov	r3,r2
   110a0:	e0bffe03 	ldbu	r2,-8(fp)
   110a4:	0084303a 	nor	r2,zero,r2
   110a8:	1884703a 	and	r2,r3,r2
   110ac:	1007883a 	mov	r3,r2
   110b0:	e0bffb17 	ldw	r2,-20(fp)
   110b4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   110b8:	e0bffb17 	ldw	r2,-20(fp)
   110bc:	e0ffff03 	ldbu	r3,-4(fp)
   110c0:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   110c4:	e0bffb17 	ldw	r2,-20(fp)
   110c8:	10800c03 	ldbu	r2,48(r2)
   110cc:	10803fcc 	andi	r2,r2,255
   110d0:	1080020c 	andi	r2,r2,8
   110d4:	1000111e 	bne	r2,zero,1111c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   110d8:	e0bffb17 	ldw	r2,-20(fp)
   110dc:	10c00d83 	ldbu	r3,54(r2)
   110e0:	d0a82403 	ldbu	r2,-24432(gp)
   110e4:	1884b03a 	or	r2,r3,r2
   110e8:	d0a82405 	stb	r2,-24432(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   110ec:	e0fffa03 	ldbu	r3,-24(fp)
   110f0:	e13ffa03 	ldbu	r4,-24(fp)
   110f4:	d0a82444 	addi	r2,gp,-24431
   110f8:	2085883a 	add	r2,r4,r2
   110fc:	11000003 	ldbu	r4,0(r2)
   11100:	e0bffb17 	ldw	r2,-20(fp)
   11104:	10800d43 	ldbu	r2,53(r2)
   11108:	2084b03a 	or	r2,r4,r2
   1110c:	1009883a 	mov	r4,r2
   11110:	d0a82444 	addi	r2,gp,-24431
   11114:	1885883a 	add	r2,r3,r2
   11118:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   1111c:	e17ffc17 	ldw	r5,-16(fp)
   11120:	e13ffb17 	ldw	r4,-20(fp)
   11124:	00113cc0 	call	113cc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   11128:	e0bffb17 	ldw	r2,-20(fp)
   1112c:	10800817 	ldw	r2,32(r2)
   11130:	10000826 	beq	r2,zero,11154 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   11134:	e0bffb17 	ldw	r2,-20(fp)
   11138:	10800817 	ldw	r2,32(r2)
   1113c:	100b883a 	mov	r5,r2
   11140:	e13ffb17 	ldw	r4,-20(fp)
   11144:	00114840 	call	11484 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   11148:	e0bffb17 	ldw	r2,-20(fp)
   1114c:	e0fffc17 	ldw	r3,-16(fp)
   11150:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   11154:	e0bffa83 	ldbu	r2,-22(fp)
}
   11158:	e037883a 	mov	sp,fp
   1115c:	dfc00117 	ldw	ra,4(sp)
   11160:	df000017 	ldw	fp,0(sp)
   11164:	dec00204 	addi	sp,sp,8
   11168:	f800283a 	ret

0001116c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   1116c:	defffd04 	addi	sp,sp,-12
   11170:	df000215 	stw	fp,8(sp)
   11174:	df000204 	addi	fp,sp,8
   11178:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   1117c:	d0a82717 	ldw	r2,-24420(gp)
   11180:	e0ffff17 	ldw	r3,-4(fp)
   11184:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   11188:	d0a82717 	ldw	r2,-24420(gp)
   1118c:	10800d03 	ldbu	r2,52(r2)
   11190:	10803fcc 	andi	r2,r2,255
   11194:	d0e82717 	ldw	r3,-24420(gp)
   11198:	18c00d03 	ldbu	r3,52(r3)
   1119c:	18c03fcc 	andi	r3,r3,255
   111a0:	e13fff17 	ldw	r4,-4(fp)
   111a4:	20c7883a 	add	r3,r4,r3
   111a8:	18c002c4 	addi	r3,r3,11
   111ac:	19000003 	ldbu	r4,0(r3)
   111b0:	d0e82717 	ldw	r3,-24420(gp)
   111b4:	18c00d43 	ldbu	r3,53(r3)
   111b8:	20c6b03a 	or	r3,r4,r3
   111bc:	1809883a 	mov	r4,r3
   111c0:	e0ffff17 	ldw	r3,-4(fp)
   111c4:	1885883a 	add	r2,r3,r2
   111c8:	108002c4 	addi	r2,r2,11
   111cc:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   111d0:	e0bfff17 	ldw	r2,-4(fp)
   111d4:	10c00283 	ldbu	r3,10(r2)
   111d8:	d0a82717 	ldw	r2,-24420(gp)
   111dc:	10800d83 	ldbu	r2,54(r2)
   111e0:	1884b03a 	or	r2,r3,r2
   111e4:	1007883a 	mov	r3,r2
   111e8:	e0bfff17 	ldw	r2,-4(fp)
   111ec:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   111f0:	d0a82717 	ldw	r2,-24420(gp)
   111f4:	10800d03 	ldbu	r2,52(r2)
   111f8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   111fc:	e0fffe03 	ldbu	r3,-8(fp)
   11200:	e13ffe03 	ldbu	r4,-8(fp)
   11204:	d0a82444 	addi	r2,gp,-24431
   11208:	2085883a 	add	r2,r4,r2
   1120c:	10800003 	ldbu	r2,0(r2)
   11210:	1009883a 	mov	r4,r2
   11214:	d0a82717 	ldw	r2,-24420(gp)
   11218:	10800d43 	ldbu	r2,53(r2)
   1121c:	0084303a 	nor	r2,zero,r2
   11220:	2084703a 	and	r2,r4,r2
   11224:	1009883a 	mov	r4,r2
   11228:	d0a82444 	addi	r2,gp,-24431
   1122c:	1885883a 	add	r2,r3,r2
   11230:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   11234:	e0fffe03 	ldbu	r3,-8(fp)
   11238:	d0a82444 	addi	r2,gp,-24431
   1123c:	1885883a 	add	r2,r3,r2
   11240:	10800003 	ldbu	r2,0(r2)
   11244:	10803fcc 	andi	r2,r2,255
   11248:	1000071e 	bne	r2,zero,11268 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   1124c:	d0a82717 	ldw	r2,-24420(gp)
   11250:	10800d83 	ldbu	r2,54(r2)
   11254:	0084303a 	nor	r2,zero,r2
   11258:	1007883a 	mov	r3,r2
   1125c:	d0a82403 	ldbu	r2,-24432(gp)
   11260:	1884703a 	and	r2,r3,r2
   11264:	d0a82405 	stb	r2,-24432(gp)
    }
}
   11268:	0001883a 	nop
   1126c:	e037883a 	mov	sp,fp
   11270:	df000017 	ldw	fp,0(sp)
   11274:	dec00104 	addi	sp,sp,4
   11278:	f800283a 	ret

0001127c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   1127c:	defffb04 	addi	sp,sp,-20
   11280:	df000415 	stw	fp,16(sp)
   11284:	df000404 	addi	fp,sp,16
   11288:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   1128c:	d0a82717 	ldw	r2,-24420(gp)
   11290:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   11294:	d0a82717 	ldw	r2,-24420(gp)
   11298:	e0ffff17 	ldw	r3,-4(fp)
   1129c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   112a0:	e0bfff17 	ldw	r2,-4(fp)
   112a4:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   112a8:	e0bffc17 	ldw	r2,-16(fp)
   112ac:	10800017 	ldw	r2,0(r2)
   112b0:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   112b4:	00002006 	br	11338 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   112b8:	d0a82717 	ldw	r2,-24420(gp)
   112bc:	10800d03 	ldbu	r2,52(r2)
   112c0:	10803fcc 	andi	r2,r2,255
   112c4:	d0e82717 	ldw	r3,-24420(gp)
   112c8:	18c00d03 	ldbu	r3,52(r3)
   112cc:	18c03fcc 	andi	r3,r3,255
   112d0:	e13ffd17 	ldw	r4,-12(fp)
   112d4:	20c7883a 	add	r3,r4,r3
   112d8:	18c002c4 	addi	r3,r3,11
   112dc:	19000003 	ldbu	r4,0(r3)
   112e0:	d0e82717 	ldw	r3,-24420(gp)
   112e4:	18c00d43 	ldbu	r3,53(r3)
   112e8:	20c6b03a 	or	r3,r4,r3
   112ec:	1809883a 	mov	r4,r3
   112f0:	e0fffd17 	ldw	r3,-12(fp)
   112f4:	1885883a 	add	r2,r3,r2
   112f8:	108002c4 	addi	r2,r2,11
   112fc:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   11300:	e0bffd17 	ldw	r2,-12(fp)
   11304:	10c00283 	ldbu	r3,10(r2)
   11308:	d0a82717 	ldw	r2,-24420(gp)
   1130c:	10800d83 	ldbu	r2,54(r2)
   11310:	1884b03a 	or	r2,r3,r2
   11314:	1007883a 	mov	r3,r2
   11318:	e0bffd17 	ldw	r2,-12(fp)
   1131c:	10c00285 	stb	r3,10(r2)
        pevents++;
   11320:	e0bffc17 	ldw	r2,-16(fp)
   11324:	10800104 	addi	r2,r2,4
   11328:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   1132c:	e0bffc17 	ldw	r2,-16(fp)
   11330:	10800017 	ldw	r2,0(r2)
   11334:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   11338:	e0bffd17 	ldw	r2,-12(fp)
   1133c:	103fde1e 	bne	r2,zero,112b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70112b8>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   11340:	d0a82717 	ldw	r2,-24420(gp)
   11344:	10800d03 	ldbu	r2,52(r2)
   11348:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   1134c:	e0fffe03 	ldbu	r3,-8(fp)
   11350:	e13ffe03 	ldbu	r4,-8(fp)
   11354:	d0a82444 	addi	r2,gp,-24431
   11358:	2085883a 	add	r2,r4,r2
   1135c:	10800003 	ldbu	r2,0(r2)
   11360:	1009883a 	mov	r4,r2
   11364:	d0a82717 	ldw	r2,-24420(gp)
   11368:	10800d43 	ldbu	r2,53(r2)
   1136c:	0084303a 	nor	r2,zero,r2
   11370:	2084703a 	and	r2,r4,r2
   11374:	1009883a 	mov	r4,r2
   11378:	d0a82444 	addi	r2,gp,-24431
   1137c:	1885883a 	add	r2,r3,r2
   11380:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   11384:	e0fffe03 	ldbu	r3,-8(fp)
   11388:	d0a82444 	addi	r2,gp,-24431
   1138c:	1885883a 	add	r2,r3,r2
   11390:	10800003 	ldbu	r2,0(r2)
   11394:	10803fcc 	andi	r2,r2,255
   11398:	1000071e 	bne	r2,zero,113b8 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   1139c:	d0a82717 	ldw	r2,-24420(gp)
   113a0:	10800d83 	ldbu	r2,54(r2)
   113a4:	0084303a 	nor	r2,zero,r2
   113a8:	1007883a 	mov	r3,r2
   113ac:	d0a82403 	ldbu	r2,-24432(gp)
   113b0:	1884703a 	and	r2,r3,r2
   113b4:	d0a82405 	stb	r2,-24432(gp)
    }
}
   113b8:	0001883a 	nop
   113bc:	e037883a 	mov	sp,fp
   113c0:	df000017 	ldw	fp,0(sp)
   113c4:	dec00104 	addi	sp,sp,4
   113c8:	f800283a 	ret

000113cc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   113cc:	defffc04 	addi	sp,sp,-16
   113d0:	df000315 	stw	fp,12(sp)
   113d4:	df000304 	addi	fp,sp,12
   113d8:	e13ffe15 	stw	r4,-8(fp)
   113dc:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   113e0:	e0bffe17 	ldw	r2,-8(fp)
   113e4:	10800d03 	ldbu	r2,52(r2)
   113e8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   113ec:	e0bffd03 	ldbu	r2,-12(fp)
   113f0:	e0fffd03 	ldbu	r3,-12(fp)
   113f4:	e13fff17 	ldw	r4,-4(fp)
   113f8:	20c7883a 	add	r3,r4,r3
   113fc:	18c002c4 	addi	r3,r3,11
   11400:	18c00003 	ldbu	r3,0(r3)
   11404:	1809883a 	mov	r4,r3
   11408:	e0fffe17 	ldw	r3,-8(fp)
   1140c:	18c00d43 	ldbu	r3,53(r3)
   11410:	00c6303a 	nor	r3,zero,r3
   11414:	20c6703a 	and	r3,r4,r3
   11418:	1809883a 	mov	r4,r3
   1141c:	e0ffff17 	ldw	r3,-4(fp)
   11420:	1885883a 	add	r2,r3,r2
   11424:	108002c4 	addi	r2,r2,11
   11428:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   1142c:	e0bffd03 	ldbu	r2,-12(fp)
   11430:	e0ffff17 	ldw	r3,-4(fp)
   11434:	1885883a 	add	r2,r3,r2
   11438:	108002c4 	addi	r2,r2,11
   1143c:	10800003 	ldbu	r2,0(r2)
   11440:	10803fcc 	andi	r2,r2,255
   11444:	10000a1e 	bne	r2,zero,11470 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   11448:	e0bfff17 	ldw	r2,-4(fp)
   1144c:	10800283 	ldbu	r2,10(r2)
   11450:	1007883a 	mov	r3,r2
   11454:	e0bffe17 	ldw	r2,-8(fp)
   11458:	10800d83 	ldbu	r2,54(r2)
   1145c:	0084303a 	nor	r2,zero,r2
   11460:	1884703a 	and	r2,r3,r2
   11464:	1007883a 	mov	r3,r2
   11468:	e0bfff17 	ldw	r2,-4(fp)
   1146c:	10c00285 	stb	r3,10(r2)
    }
}
   11470:	0001883a 	nop
   11474:	e037883a 	mov	sp,fp
   11478:	df000017 	ldw	fp,0(sp)
   1147c:	dec00104 	addi	sp,sp,4
   11480:	f800283a 	ret

00011484 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   11484:	defffa04 	addi	sp,sp,-24
   11488:	df000515 	stw	fp,20(sp)
   1148c:	df000504 	addi	fp,sp,20
   11490:	e13ffe15 	stw	r4,-8(fp)
   11494:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   11498:	e0bffe17 	ldw	r2,-8(fp)
   1149c:	10800d03 	ldbu	r2,52(r2)
   114a0:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   114a4:	e0bffe17 	ldw	r2,-8(fp)
   114a8:	10800d83 	ldbu	r2,54(r2)
   114ac:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   114b0:	e0bffe17 	ldw	r2,-8(fp)
   114b4:	10800d43 	ldbu	r2,53(r2)
   114b8:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   114bc:	e0bfff17 	ldw	r2,-4(fp)
   114c0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   114c4:	e0bffb17 	ldw	r2,-20(fp)
   114c8:	10800017 	ldw	r2,0(r2)
   114cc:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   114d0:	00002506 	br	11568 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   114d4:	e0bffd03 	ldbu	r2,-12(fp)
   114d8:	e0fffd03 	ldbu	r3,-12(fp)
   114dc:	e13ffc17 	ldw	r4,-16(fp)
   114e0:	20c7883a 	add	r3,r4,r3
   114e4:	18c002c4 	addi	r3,r3,11
   114e8:	18c00003 	ldbu	r3,0(r3)
   114ec:	1809883a 	mov	r4,r3
   114f0:	e0fffd83 	ldbu	r3,-10(fp)
   114f4:	00c6303a 	nor	r3,zero,r3
   114f8:	20c6703a 	and	r3,r4,r3
   114fc:	1809883a 	mov	r4,r3
   11500:	e0fffc17 	ldw	r3,-16(fp)
   11504:	1885883a 	add	r2,r3,r2
   11508:	108002c4 	addi	r2,r2,11
   1150c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   11510:	e0bffd03 	ldbu	r2,-12(fp)
   11514:	e0fffc17 	ldw	r3,-16(fp)
   11518:	1885883a 	add	r2,r3,r2
   1151c:	108002c4 	addi	r2,r2,11
   11520:	10800003 	ldbu	r2,0(r2)
   11524:	10803fcc 	andi	r2,r2,255
   11528:	1000091e 	bne	r2,zero,11550 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   1152c:	e0bffc17 	ldw	r2,-16(fp)
   11530:	10800283 	ldbu	r2,10(r2)
   11534:	1007883a 	mov	r3,r2
   11538:	e0bffd43 	ldbu	r2,-11(fp)
   1153c:	0084303a 	nor	r2,zero,r2
   11540:	1884703a 	and	r2,r3,r2
   11544:	1007883a 	mov	r3,r2
   11548:	e0bffc17 	ldw	r2,-16(fp)
   1154c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   11550:	e0bffb17 	ldw	r2,-20(fp)
   11554:	10800104 	addi	r2,r2,4
   11558:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   1155c:	e0bffb17 	ldw	r2,-20(fp)
   11560:	10800017 	ldw	r2,0(r2)
   11564:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   11568:	e0bffc17 	ldw	r2,-16(fp)
   1156c:	103fd91e 	bne	r2,zero,114d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70114d4>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   11570:	0001883a 	nop
   11574:	e037883a 	mov	sp,fp
   11578:	df000017 	ldw	fp,0(sp)
   1157c:	dec00104 	addi	sp,sp,4
   11580:	f800283a 	ret

00011584 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   11584:	defffc04 	addi	sp,sp,-16
   11588:	df000315 	stw	fp,12(sp)
   1158c:	df000304 	addi	fp,sp,12
   11590:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   11594:	e0bfff17 	ldw	r2,-4(fp)
   11598:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   1159c:	e0bfff17 	ldw	r2,-4(fp)
   115a0:	108002c4 	addi	r2,r2,11
   115a4:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   115a8:	e03ffe05 	stb	zero,-8(fp)
   115ac:	00000706 	br	115cc <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   115b0:	e0bffd17 	ldw	r2,-12(fp)
   115b4:	10c00044 	addi	r3,r2,1
   115b8:	e0fffd15 	stw	r3,-12(fp)
   115bc:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   115c0:	e0bffe03 	ldbu	r2,-8(fp)
   115c4:	10800044 	addi	r2,r2,1
   115c8:	e0bffe05 	stb	r2,-8(fp)
   115cc:	e0bffe03 	ldbu	r2,-8(fp)
   115d0:	108000f0 	cmpltui	r2,r2,3
   115d4:	103ff61e 	bne	r2,zero,115b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70115b0>
        *ptbl++ = 0;
    }
}
   115d8:	0001883a 	nop
   115dc:	e037883a 	mov	sp,fp
   115e0:	df000017 	ldw	fp,0(sp)
   115e4:	dec00104 	addi	sp,sp,4
   115e8:	f800283a 	ret

000115ec <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   115ec:	defffb04 	addi	sp,sp,-20
   115f0:	dfc00415 	stw	ra,16(sp)
   115f4:	df000315 	stw	fp,12(sp)
   115f8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   115fc:	0142d004 	movi	r5,2880
   11600:	010000b4 	movhi	r4,2
   11604:	2107d104 	addi	r4,r4,8004
   11608:	00119640 	call	11964 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   1160c:	008000b4 	movhi	r2,2
   11610:	1087d104 	addi	r2,r2,8004
   11614:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   11618:	008000b4 	movhi	r2,2
   1161c:	1087dd04 	addi	r2,r2,8052
   11620:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   11624:	e03ffd0d 	sth	zero,-12(fp)
   11628:	00001306 	br	11678 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1162c:	e0bffe17 	ldw	r2,-8(fp)
   11630:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   11634:	e0bffe17 	ldw	r2,-8(fp)
   11638:	e0ffff17 	ldw	r3,-4(fp)
   1163c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   11640:	e0bffe17 	ldw	r2,-8(fp)
   11644:	00c00fc4 	movi	r3,63
   11648:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   1164c:	e0bffe17 	ldw	r2,-8(fp)
   11650:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   11654:	e0bffe17 	ldw	r2,-8(fp)
   11658:	10800c04 	addi	r2,r2,48
   1165c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   11660:	e0bfff17 	ldw	r2,-4(fp)
   11664:	10800c04 	addi	r2,r2,48
   11668:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1166c:	e0bffd0b 	ldhu	r2,-12(fp)
   11670:	10800044 	addi	r2,r2,1
   11674:	e0bffd0d 	sth	r2,-12(fp)
   11678:	e0bffd0b 	ldhu	r2,-12(fp)
   1167c:	10800ef0 	cmpltui	r2,r2,59
   11680:	103fea1e 	bne	r2,zero,1162c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701162c>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   11684:	e0bffe17 	ldw	r2,-8(fp)
   11688:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   1168c:	e0bffe17 	ldw	r2,-8(fp)
   11690:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   11694:	e0bffe17 	ldw	r2,-8(fp)
   11698:	00c00fc4 	movi	r3,63
   1169c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   116a0:	e0bffe17 	ldw	r2,-8(fp)
   116a4:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   116a8:	008000b4 	movhi	r2,2
   116ac:	1087d104 	addi	r2,r2,8004
   116b0:	d0a82515 	stw	r2,-24428(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   116b4:	0001883a 	nop
   116b8:	e037883a 	mov	sp,fp
   116bc:	dfc00117 	ldw	ra,4(sp)
   116c0:	df000017 	ldw	fp,0(sp)
   116c4:	dec00204 	addi	sp,sp,8
   116c8:	f800283a 	ret

000116cc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   116cc:	deffff04 	addi	sp,sp,-4
   116d0:	df000015 	stw	fp,0(sp)
   116d4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   116d8:	d0282815 	stw	zero,-24416(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   116dc:	d0282605 	stb	zero,-24424(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   116e0:	d0281805 	stb	zero,-24480(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   116e4:	d0282045 	stb	zero,-24447(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   116e8:	d0281845 	stb	zero,-24479(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   116ec:	d0281d15 	stw	zero,-24460(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   116f0:	d0281915 	stw	zero,-24476(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   116f4:	d0282b15 	stw	zero,-24404(gp)
    OSIdleCtrMax  = 0L;
   116f8:	d0281e15 	stw	zero,-24456(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   116fc:	d0282a05 	stb	zero,-24408(gp)
#endif
}
   11700:	0001883a 	nop
   11704:	e037883a 	mov	sp,fp
   11708:	df000017 	ldw	fp,0(sp)
   1170c:	dec00104 	addi	sp,sp,4
   11710:	f800283a 	ret

00011714 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   11714:	defffd04 	addi	sp,sp,-12
   11718:	df000215 	stw	fp,8(sp)
   1171c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   11720:	d0282405 	stb	zero,-24432(gp)
    prdytbl       = &OSRdyTbl[0];
   11724:	d0a82444 	addi	r2,gp,-24431
   11728:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   1172c:	e03ffe05 	stb	zero,-8(fp)
   11730:	00000706 	br	11750 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   11734:	e0bfff17 	ldw	r2,-4(fp)
   11738:	10c00044 	addi	r3,r2,1
   1173c:	e0ffff15 	stw	r3,-4(fp)
   11740:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   11744:	e0bffe03 	ldbu	r2,-8(fp)
   11748:	10800044 	addi	r2,r2,1
   1174c:	e0bffe05 	stb	r2,-8(fp)
   11750:	e0bffe03 	ldbu	r2,-8(fp)
   11754:	108000f0 	cmpltui	r2,r2,3
   11758:	103ff61e 	bne	r2,zero,11734 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011734>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   1175c:	d0281a45 	stb	zero,-24471(gp)
    OSPrioHighRdy = 0;
   11760:	d0281a05 	stb	zero,-24472(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   11764:	d0282215 	stw	zero,-24440(gp)
    OSTCBCur      = (OS_TCB *)0;
   11768:	d0282715 	stw	zero,-24420(gp)
}
   1176c:	0001883a 	nop
   11770:	e037883a 	mov	sp,fp
   11774:	df000017 	ldw	fp,0(sp)
   11778:	dec00104 	addi	sp,sp,4
   1177c:	f800283a 	ret

00011780 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   11780:	defff804 	addi	sp,sp,-32
   11784:	dfc00715 	stw	ra,28(sp)
   11788:	df000615 	stw	fp,24(sp)
   1178c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   11790:	008000c4 	movi	r2,3
   11794:	d8800415 	stw	r2,16(sp)
   11798:	d8000315 	stw	zero,12(sp)
   1179c:	00808004 	movi	r2,512
   117a0:	d8800215 	stw	r2,8(sp)
   117a4:	008000b4 	movhi	r2,2
   117a8:	1085d104 	addi	r2,r2,5956
   117ac:	d8800115 	stw	r2,4(sp)
   117b0:	00bfffd4 	movui	r2,65535
   117b4:	d8800015 	stw	r2,0(sp)
   117b8:	01c00504 	movi	r7,20
   117bc:	018000b4 	movhi	r6,2
   117c0:	3187d004 	addi	r6,r6,8000
   117c4:	000b883a 	mov	r5,zero
   117c8:	01000074 	movhi	r4,1
   117cc:	21070b04 	addi	r4,r4,7212
   117d0:	00162fc0 	call	162fc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   117d4:	e1bfff04 	addi	r6,fp,-4
   117d8:	014000b4 	movhi	r5,2
   117dc:	296f1704 	addi	r5,r5,-17316
   117e0:	01000504 	movi	r4,20
   117e4:	0016b0c0 	call	16b0c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   117e8:	0001883a 	nop
   117ec:	e037883a 	mov	sp,fp
   117f0:	dfc00117 	ldw	ra,4(sp)
   117f4:	df000017 	ldw	fp,0(sp)
   117f8:	dec00204 	addi	sp,sp,8
   117fc:	f800283a 	ret

00011800 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   11800:	defff804 	addi	sp,sp,-32
   11804:	dfc00715 	stw	ra,28(sp)
   11808:	df000615 	stw	fp,24(sp)
   1180c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   11810:	008000c4 	movi	r2,3
   11814:	d8800415 	stw	r2,16(sp)
   11818:	d8000315 	stw	zero,12(sp)
   1181c:	00808004 	movi	r2,512
   11820:	d8800215 	stw	r2,8(sp)
   11824:	008000b4 	movhi	r2,2
   11828:	10835904 	addi	r2,r2,3428
   1182c:	d8800115 	stw	r2,4(sp)
   11830:	00bfff94 	movui	r2,65534
   11834:	d8800015 	stw	r2,0(sp)
   11838:	01c004c4 	movi	r7,19
   1183c:	018000b4 	movhi	r6,2
   11840:	31855804 	addi	r6,r6,5472
   11844:	000b883a 	mov	r5,zero
   11848:	01000074 	movhi	r4,1
   1184c:	21072204 	addi	r4,r4,7304
   11850:	00162fc0 	call	162fc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   11854:	e1bfff04 	addi	r6,fp,-4
   11858:	014000b4 	movhi	r5,2
   1185c:	296f1b04 	addi	r5,r5,-17300
   11860:	010004c4 	movi	r4,19
   11864:	0016b0c0 	call	16b0c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   11868:	0001883a 	nop
   1186c:	e037883a 	mov	sp,fp
   11870:	dfc00117 	ldw	ra,4(sp)
   11874:	df000017 	ldw	fp,0(sp)
   11878:	dec00204 	addi	sp,sp,8
   1187c:	f800283a 	ret

00011880 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   11880:	defffb04 	addi	sp,sp,-20
   11884:	dfc00415 	stw	ra,16(sp)
   11888:	df000315 	stw	fp,12(sp)
   1188c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   11890:	01414404 	movi	r5,1296
   11894:	010000b4 	movhi	r4,2
   11898:	210aa104 	addi	r4,r4,10884
   1189c:	00119640 	call	11964 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   118a0:	01401504 	movi	r5,84
   118a4:	010000b4 	movhi	r4,2
   118a8:	210be504 	addi	r4,r4,12180
   118ac:	00119640 	call	11964 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   118b0:	008000b4 	movhi	r2,2
   118b4:	108aa104 	addi	r2,r2,10884
   118b8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   118bc:	008000b4 	movhi	r2,2
   118c0:	108abc04 	addi	r2,r2,10992
   118c4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   118c8:	e03ffd05 	stb	zero,-12(fp)
   118cc:	00001106 	br	11914 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   118d0:	e0bffe17 	ldw	r2,-8(fp)
   118d4:	e0ffff17 	ldw	r3,-4(fp)
   118d8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   118dc:	e0bffe17 	ldw	r2,-8(fp)
   118e0:	00c00fc4 	movi	r3,63
   118e4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   118e8:	e0bffe17 	ldw	r2,-8(fp)
   118ec:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   118f0:	e0bffe17 	ldw	r2,-8(fp)
   118f4:	10801b04 	addi	r2,r2,108
   118f8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   118fc:	e0bfff17 	ldw	r2,-4(fp)
   11900:	10801b04 	addi	r2,r2,108
   11904:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   11908:	e0bffd03 	ldbu	r2,-12(fp)
   1190c:	10800044 	addi	r2,r2,1
   11910:	e0bffd05 	stb	r2,-12(fp)
   11914:	e0bffd03 	ldbu	r2,-12(fp)
   11918:	108002f0 	cmpltui	r2,r2,11
   1191c:	103fec1e 	bne	r2,zero,118d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70118d0>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   11920:	e0bffe17 	ldw	r2,-8(fp)
   11924:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   11928:	e0bffe17 	ldw	r2,-8(fp)
   1192c:	00c00fc4 	movi	r3,63
   11930:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   11934:	e0bffe17 	ldw	r2,-8(fp)
   11938:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   1193c:	d0281b15 	stw	zero,-24468(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   11940:	008000b4 	movhi	r2,2
   11944:	108aa104 	addi	r2,r2,10884
   11948:	d0a81f15 	stw	r2,-24452(gp)
}
   1194c:	0001883a 	nop
   11950:	e037883a 	mov	sp,fp
   11954:	dfc00117 	ldw	ra,4(sp)
   11958:	df000017 	ldw	fp,0(sp)
   1195c:	dec00204 	addi	sp,sp,8
   11960:	f800283a 	ret

00011964 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   11964:	defffd04 	addi	sp,sp,-12
   11968:	df000215 	stw	fp,8(sp)
   1196c:	df000204 	addi	fp,sp,8
   11970:	e13ffe15 	stw	r4,-8(fp)
   11974:	2805883a 	mov	r2,r5
   11978:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1197c:	00000706 	br	1199c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   11980:	e0bffe17 	ldw	r2,-8(fp)
   11984:	10c00044 	addi	r3,r2,1
   11988:	e0fffe15 	stw	r3,-8(fp)
   1198c:	10000005 	stb	zero,0(r2)
        size--;
   11990:	e0bfff0b 	ldhu	r2,-4(fp)
   11994:	10bfffc4 	addi	r2,r2,-1
   11998:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   1199c:	e0bfff0b 	ldhu	r2,-4(fp)
   119a0:	103ff71e 	bne	r2,zero,11980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011980>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   119a4:	0001883a 	nop
   119a8:	e037883a 	mov	sp,fp
   119ac:	df000017 	ldw	fp,0(sp)
   119b0:	dec00104 	addi	sp,sp,4
   119b4:	f800283a 	ret

000119b8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   119b8:	defffc04 	addi	sp,sp,-16
   119bc:	df000315 	stw	fp,12(sp)
   119c0:	df000304 	addi	fp,sp,12
   119c4:	e13ffd15 	stw	r4,-12(fp)
   119c8:	e17ffe15 	stw	r5,-8(fp)
   119cc:	3005883a 	mov	r2,r6
   119d0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   119d4:	00000b06 	br	11a04 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   119d8:	e0bffd17 	ldw	r2,-12(fp)
   119dc:	10c00044 	addi	r3,r2,1
   119e0:	e0fffd15 	stw	r3,-12(fp)
   119e4:	e0fffe17 	ldw	r3,-8(fp)
   119e8:	19000044 	addi	r4,r3,1
   119ec:	e13ffe15 	stw	r4,-8(fp)
   119f0:	18c00003 	ldbu	r3,0(r3)
   119f4:	10c00005 	stb	r3,0(r2)
        size--;
   119f8:	e0bfff0b 	ldhu	r2,-4(fp)
   119fc:	10bfffc4 	addi	r2,r2,-1
   11a00:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   11a04:	e0bfff0b 	ldhu	r2,-4(fp)
   11a08:	103ff31e 	bne	r2,zero,119d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70119d8>
        *pdest++ = *psrc++;
        size--;
    }
}
   11a0c:	0001883a 	nop
   11a10:	e037883a 	mov	sp,fp
   11a14:	df000017 	ldw	fp,0(sp)
   11a18:	dec00104 	addi	sp,sp,4
   11a1c:	f800283a 	ret

00011a20 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   11a20:	defffb04 	addi	sp,sp,-20
   11a24:	dfc00415 	stw	ra,16(sp)
   11a28:	df000315 	stw	fp,12(sp)
   11a2c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   11a30:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a34:	0005303a 	rdctl	r2,status
   11a38:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a3c:	e0ffff17 	ldw	r3,-4(fp)
   11a40:	00bfff84 	movi	r2,-2
   11a44:	1884703a 	and	r2,r3,r2
   11a48:	1001703a 	wrctl	status,r2
  
  return context;
   11a4c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   11a50:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   11a54:	d0a82603 	ldbu	r2,-24424(gp)
   11a58:	10803fcc 	andi	r2,r2,255
   11a5c:	10001a1e 	bne	r2,zero,11ac8 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   11a60:	d0a81803 	ldbu	r2,-24480(gp)
   11a64:	10803fcc 	andi	r2,r2,255
   11a68:	1000171e 	bne	r2,zero,11ac8 <OS_Sched+0xa8>
            OS_SchedNew();
   11a6c:	0011af00 	call	11af0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   11a70:	d0e81a03 	ldbu	r3,-24472(gp)
   11a74:	d0a81a43 	ldbu	r2,-24471(gp)
   11a78:	18c03fcc 	andi	r3,r3,255
   11a7c:	10803fcc 	andi	r2,r2,255
   11a80:	18801126 	beq	r3,r2,11ac8 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   11a84:	d0a81a03 	ldbu	r2,-24472(gp)
   11a88:	10c03fcc 	andi	r3,r2,255
   11a8c:	008000b4 	movhi	r2,2
   11a90:	108be504 	addi	r2,r2,12180
   11a94:	18c7883a 	add	r3,r3,r3
   11a98:	18c7883a 	add	r3,r3,r3
   11a9c:	10c5883a 	add	r2,r2,r3
   11aa0:	10800017 	ldw	r2,0(r2)
   11aa4:	d0a82215 	stw	r2,-24440(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   11aa8:	d0a82217 	ldw	r2,-24440(gp)
   11aac:	10c00e17 	ldw	r3,56(r2)
   11ab0:	18c00044 	addi	r3,r3,1
   11ab4:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   11ab8:	d0a81d17 	ldw	r2,-24460(gp)
   11abc:	10800044 	addi	r2,r2,1
   11ac0:	d0a81d15 	stw	r2,-24460(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   11ac4:	001aca00 	call	1aca0 <OSCtxSw>
   11ac8:	e0bffd17 	ldw	r2,-12(fp)
   11acc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ad0:	e0bffe17 	ldw	r2,-8(fp)
   11ad4:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   11ad8:	0001883a 	nop
   11adc:	e037883a 	mov	sp,fp
   11ae0:	dfc00117 	ldw	ra,4(sp)
   11ae4:	df000017 	ldw	fp,0(sp)
   11ae8:	dec00204 	addi	sp,sp,8
   11aec:	f800283a 	ret

00011af0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   11af0:	defffe04 	addi	sp,sp,-8
   11af4:	df000115 	stw	fp,4(sp)
   11af8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   11afc:	d0a82403 	ldbu	r2,-24432(gp)
   11b00:	10c03fcc 	andi	r3,r2,255
   11b04:	008000b4 	movhi	r2,2
   11b08:	10aed704 	addi	r2,r2,-17572
   11b0c:	10c5883a 	add	r2,r2,r3
   11b10:	10800003 	ldbu	r2,0(r2)
   11b14:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   11b18:	e0bfff03 	ldbu	r2,-4(fp)
   11b1c:	100490fa 	slli	r2,r2,3
   11b20:	1009883a 	mov	r4,r2
   11b24:	e0ffff03 	ldbu	r3,-4(fp)
   11b28:	d0a82444 	addi	r2,gp,-24431
   11b2c:	1885883a 	add	r2,r3,r2
   11b30:	10800003 	ldbu	r2,0(r2)
   11b34:	10c03fcc 	andi	r3,r2,255
   11b38:	008000b4 	movhi	r2,2
   11b3c:	10aed704 	addi	r2,r2,-17572
   11b40:	10c5883a 	add	r2,r2,r3
   11b44:	10800003 	ldbu	r2,0(r2)
   11b48:	2085883a 	add	r2,r4,r2
   11b4c:	d0a81a05 	stb	r2,-24472(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   11b50:	0001883a 	nop
   11b54:	e037883a 	mov	sp,fp
   11b58:	df000017 	ldw	fp,0(sp)
   11b5c:	dec00104 	addi	sp,sp,4
   11b60:	f800283a 	ret

00011b64 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   11b64:	defffc04 	addi	sp,sp,-16
   11b68:	df000315 	stw	fp,12(sp)
   11b6c:	df000304 	addi	fp,sp,12
   11b70:	e13ffe15 	stw	r4,-8(fp)
   11b74:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   11b78:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   11b7c:	00000b06 	br	11bac <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   11b80:	e0bffe17 	ldw	r2,-8(fp)
   11b84:	10c00044 	addi	r3,r2,1
   11b88:	e0fffe15 	stw	r3,-8(fp)
   11b8c:	e0ffff17 	ldw	r3,-4(fp)
   11b90:	19000044 	addi	r4,r3,1
   11b94:	e13fff15 	stw	r4,-4(fp)
   11b98:	18c00003 	ldbu	r3,0(r3)
   11b9c:	10c00005 	stb	r3,0(r2)
        len++;
   11ba0:	e0bffd03 	ldbu	r2,-12(fp)
   11ba4:	10800044 	addi	r2,r2,1
   11ba8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   11bac:	e0bfff17 	ldw	r2,-4(fp)
   11bb0:	10800003 	ldbu	r2,0(r2)
   11bb4:	10803fcc 	andi	r2,r2,255
   11bb8:	103ff11e 	bne	r2,zero,11b80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b80>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   11bbc:	e0bffe17 	ldw	r2,-8(fp)
   11bc0:	10000005 	stb	zero,0(r2)
    return (len);
   11bc4:	e0bffd03 	ldbu	r2,-12(fp)
}
   11bc8:	e037883a 	mov	sp,fp
   11bcc:	df000017 	ldw	fp,0(sp)
   11bd0:	dec00104 	addi	sp,sp,4
   11bd4:	f800283a 	ret

00011bd8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   11bd8:	defffd04 	addi	sp,sp,-12
   11bdc:	df000215 	stw	fp,8(sp)
   11be0:	df000204 	addi	fp,sp,8
   11be4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   11be8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   11bec:	00000606 	br	11c08 <OS_StrLen+0x30>
        psrc++;
   11bf0:	e0bfff17 	ldw	r2,-4(fp)
   11bf4:	10800044 	addi	r2,r2,1
   11bf8:	e0bfff15 	stw	r2,-4(fp)
        len++;
   11bfc:	e0bffe03 	ldbu	r2,-8(fp)
   11c00:	10800044 	addi	r2,r2,1
   11c04:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   11c08:	e0bfff17 	ldw	r2,-4(fp)
   11c0c:	10800003 	ldbu	r2,0(r2)
   11c10:	10803fcc 	andi	r2,r2,255
   11c14:	103ff61e 	bne	r2,zero,11bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011bf0>
        psrc++;
        len++;
    }
    return (len);
   11c18:	e0bffe03 	ldbu	r2,-8(fp)
}
   11c1c:	e037883a 	mov	sp,fp
   11c20:	df000017 	ldw	fp,0(sp)
   11c24:	dec00104 	addi	sp,sp,4
   11c28:	f800283a 	ret

00011c2c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   11c2c:	defffa04 	addi	sp,sp,-24
   11c30:	dfc00515 	stw	ra,20(sp)
   11c34:	df000415 	stw	fp,16(sp)
   11c38:	df000404 	addi	fp,sp,16
   11c3c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11c40:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c44:	0005303a 	rdctl	r2,status
   11c48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c4c:	e0fffd17 	ldw	r3,-12(fp)
   11c50:	00bfff84 	movi	r2,-2
   11c54:	1884703a 	and	r2,r3,r2
   11c58:	1001703a 	wrctl	status,r2
  
  return context;
   11c5c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   11c60:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   11c64:	d0a81917 	ldw	r2,-24476(gp)
   11c68:	10800044 	addi	r2,r2,1
   11c6c:	d0a81915 	stw	r2,-24476(gp)
   11c70:	e0bffc17 	ldw	r2,-16(fp)
   11c74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c78:	e0bffe17 	ldw	r2,-8(fp)
   11c7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   11c80:	001afb40 	call	1afb4 <OSTaskIdleHook>
    }
   11c84:	003fef06 	br	11c44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011c44>

00011c88 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   11c88:	defff804 	addi	sp,sp,-32
   11c8c:	dfc00715 	stw	ra,28(sp)
   11c90:	df000615 	stw	fp,24(sp)
   11c94:	dc400515 	stw	r17,20(sp)
   11c98:	dc000415 	stw	r16,16(sp)
   11c9c:	df000604 	addi	fp,sp,24
   11ca0:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11ca4:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   11ca8:	00000206 	br	11cb4 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   11cac:	01000044 	movi	r4,1
   11cb0:	00173cc0 	call	173cc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   11cb4:	d0a82a03 	ldbu	r2,-24408(gp)
   11cb8:	10803fcc 	andi	r2,r2,255
   11cbc:	103ffb26 	beq	r2,zero,11cac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011cac>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   11cc0:	d0e81e17 	ldw	r3,-24456(gp)
   11cc4:	00947b34 	movhi	r2,20972
   11cc8:	10a147c4 	addi	r2,r2,-31457
   11ccc:	1888383a 	mulxuu	r4,r3,r2
   11cd0:	1885383a 	mul	r2,r3,r2
   11cd4:	1021883a 	mov	r16,r2
   11cd8:	2023883a 	mov	r17,r4
   11cdc:	8804d17a 	srli	r2,r17,5
   11ce0:	d0a81e15 	stw	r2,-24456(gp)
    if (OSIdleCtrMax == 0L) {
   11ce4:	d0a81e17 	ldw	r2,-24456(gp)
   11ce8:	1000031e 	bne	r2,zero,11cf8 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   11cec:	d0282005 	stb	zero,-24448(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   11cf0:	01003fc4 	movi	r4,255
   11cf4:	00170540 	call	17054 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11cf8:	0005303a 	rdctl	r2,status
   11cfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d00:	e0fffb17 	ldw	r3,-20(fp)
   11d04:	00bfff84 	movi	r2,-2
   11d08:	1884703a 	and	r2,r3,r2
   11d0c:	1001703a 	wrctl	status,r2
  
  return context;
   11d10:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   11d14:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   11d18:	d0a81917 	ldw	r2,-24476(gp)
   11d1c:	d0a82b15 	stw	r2,-24404(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   11d20:	d0281915 	stw	zero,-24476(gp)
   11d24:	e0bffa17 	ldw	r2,-24(fp)
   11d28:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11d2c:	e0bffc17 	ldw	r2,-16(fp)
   11d30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   11d34:	d0e82b17 	ldw	r3,-24404(gp)
   11d38:	d0a81e17 	ldw	r2,-24456(gp)
   11d3c:	1885203a 	divu	r2,r3,r2
   11d40:	1007883a 	mov	r3,r2
   11d44:	00801904 	movi	r2,100
   11d48:	10c5c83a 	sub	r2,r2,r3
   11d4c:	d0a82005 	stb	r2,-24448(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   11d50:	001af340 	call	1af34 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   11d54:	0011d640 	call	11d64 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   11d58:	0009883a 	mov	r4,zero
   11d5c:	00173cc0 	call	173cc <OSTimeDly>
    }
   11d60:	003fe506 	br	11cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011cf8>

00011d64 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   11d64:	defffa04 	addi	sp,sp,-24
   11d68:	dfc00515 	stw	ra,20(sp)
   11d6c:	df000415 	stw	fp,16(sp)
   11d70:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   11d74:	e03ffc05 	stb	zero,-16(fp)
   11d78:	00002406 	br	11e0c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   11d7c:	e0bffc03 	ldbu	r2,-16(fp)
   11d80:	e0fffe04 	addi	r3,fp,-8
   11d84:	180b883a 	mov	r5,r3
   11d88:	1009883a 	mov	r4,r2
   11d8c:	0016e940 	call	16e94 <OSTaskStkChk>
   11d90:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   11d94:	e0bffc43 	ldbu	r2,-15(fp)
   11d98:	1000191e 	bne	r2,zero,11e00 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   11d9c:	e0fffc03 	ldbu	r3,-16(fp)
   11da0:	008000b4 	movhi	r2,2
   11da4:	108be504 	addi	r2,r2,12180
   11da8:	18c7883a 	add	r3,r3,r3
   11dac:	18c7883a 	add	r3,r3,r3
   11db0:	10c5883a 	add	r2,r2,r3
   11db4:	10800017 	ldw	r2,0(r2)
   11db8:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   11dbc:	e0bffd17 	ldw	r2,-12(fp)
   11dc0:	10000f26 	beq	r2,zero,11e00 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   11dc4:	e0bffd17 	ldw	r2,-12(fp)
   11dc8:	10800060 	cmpeqi	r2,r2,1
   11dcc:	10000c1e 	bne	r2,zero,11e00 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   11dd0:	e0bffd17 	ldw	r2,-12(fp)
   11dd4:	10c00217 	ldw	r3,8(r2)
   11dd8:	e0bffd17 	ldw	r2,-12(fp)
   11ddc:	10800317 	ldw	r2,12(r2)
   11de0:	1085883a 	add	r2,r2,r2
   11de4:	1085883a 	add	r2,r2,r2
   11de8:	1887883a 	add	r3,r3,r2
   11dec:	e0bffd17 	ldw	r2,-12(fp)
   11df0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   11df4:	e0ffff17 	ldw	r3,-4(fp)
   11df8:	e0bffd17 	ldw	r2,-12(fp)
   11dfc:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   11e00:	e0bffc03 	ldbu	r2,-16(fp)
   11e04:	10800044 	addi	r2,r2,1
   11e08:	e0bffc05 	stb	r2,-16(fp)
   11e0c:	e0bffc03 	ldbu	r2,-16(fp)
   11e10:	10800570 	cmpltui	r2,r2,21
   11e14:	103fd91e 	bne	r2,zero,11d7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011d7c>
#endif
                }
            }
        }
    }
}
   11e18:	0001883a 	nop
   11e1c:	e037883a 	mov	sp,fp
   11e20:	dfc00117 	ldw	ra,4(sp)
   11e24:	df000017 	ldw	fp,0(sp)
   11e28:	dec00204 	addi	sp,sp,8
   11e2c:	f800283a 	ret

00011e30 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   11e30:	defff204 	addi	sp,sp,-56
   11e34:	dfc00d15 	stw	ra,52(sp)
   11e38:	df000c15 	stw	fp,48(sp)
   11e3c:	df000c04 	addi	fp,sp,48
   11e40:	e17ffc15 	stw	r5,-16(fp)
   11e44:	e1bffd15 	stw	r6,-12(fp)
   11e48:	3807883a 	mov	r3,r7
   11e4c:	e0800417 	ldw	r2,16(fp)
   11e50:	e13ffb05 	stb	r4,-20(fp)
   11e54:	e0fffe0d 	sth	r3,-8(fp)
   11e58:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11e5c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e60:	0005303a 	rdctl	r2,status
   11e64:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e68:	e0fffa17 	ldw	r3,-24(fp)
   11e6c:	00bfff84 	movi	r2,-2
   11e70:	1884703a 	and	r2,r3,r2
   11e74:	1001703a 	wrctl	status,r2
  
  return context;
   11e78:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   11e7c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   11e80:	d0a81f17 	ldw	r2,-24452(gp)
   11e84:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   11e88:	e0bff617 	ldw	r2,-40(fp)
   11e8c:	10009326 	beq	r2,zero,120dc <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   11e90:	e0bff617 	ldw	r2,-40(fp)
   11e94:	10800517 	ldw	r2,20(r2)
   11e98:	d0a81f15 	stw	r2,-24452(gp)
   11e9c:	e0bff417 	ldw	r2,-48(fp)
   11ea0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ea4:	e0bff817 	ldw	r2,-32(fp)
   11ea8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   11eac:	e0bff617 	ldw	r2,-40(fp)
   11eb0:	e0fffc17 	ldw	r3,-16(fp)
   11eb4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   11eb8:	e0bff617 	ldw	r2,-40(fp)
   11ebc:	e0fffb03 	ldbu	r3,-20(fp)
   11ec0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   11ec4:	e0bff617 	ldw	r2,-40(fp)
   11ec8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   11ecc:	e0bff617 	ldw	r2,-40(fp)
   11ed0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   11ed4:	e0bff617 	ldw	r2,-40(fp)
   11ed8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   11edc:	e0bff617 	ldw	r2,-40(fp)
   11ee0:	e0c00317 	ldw	r3,12(fp)
   11ee4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   11ee8:	e0bff617 	ldw	r2,-40(fp)
   11eec:	e0c00217 	ldw	r3,8(fp)
   11ef0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   11ef4:	e0bff617 	ldw	r2,-40(fp)
   11ef8:	e0fffd17 	ldw	r3,-12(fp)
   11efc:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   11f00:	e0bff617 	ldw	r2,-40(fp)
   11f04:	e0ffff0b 	ldhu	r3,-4(fp)
   11f08:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   11f0c:	e0bff617 	ldw	r2,-40(fp)
   11f10:	e0fffe0b 	ldhu	r3,-8(fp)
   11f14:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   11f18:	e0bff617 	ldw	r2,-40(fp)
   11f1c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   11f20:	e0bffb03 	ldbu	r2,-20(fp)
   11f24:	1004d0fa 	srli	r2,r2,3
   11f28:	1007883a 	mov	r3,r2
   11f2c:	e0bff617 	ldw	r2,-40(fp)
   11f30:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   11f34:	e0bffb03 	ldbu	r2,-20(fp)
   11f38:	108001cc 	andi	r2,r2,7
   11f3c:	1007883a 	mov	r3,r2
   11f40:	e0bff617 	ldw	r2,-40(fp)
   11f44:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   11f48:	e0bff617 	ldw	r2,-40(fp)
   11f4c:	10800d03 	ldbu	r2,52(r2)
   11f50:	10803fcc 	andi	r2,r2,255
   11f54:	00c00044 	movi	r3,1
   11f58:	1884983a 	sll	r2,r3,r2
   11f5c:	1007883a 	mov	r3,r2
   11f60:	e0bff617 	ldw	r2,-40(fp)
   11f64:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   11f68:	e0bff617 	ldw	r2,-40(fp)
   11f6c:	10800cc3 	ldbu	r2,51(r2)
   11f70:	10803fcc 	andi	r2,r2,255
   11f74:	00c00044 	movi	r3,1
   11f78:	1884983a 	sll	r2,r3,r2
   11f7c:	1007883a 	mov	r3,r2
   11f80:	e0bff617 	ldw	r2,-40(fp)
   11f84:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   11f88:	e0bff617 	ldw	r2,-40(fp)
   11f8c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   11f90:	e0bff617 	ldw	r2,-40(fp)
   11f94:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   11f98:	e0bff617 	ldw	r2,-40(fp)
   11f9c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   11fa0:	e0bff617 	ldw	r2,-40(fp)
   11fa4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   11fa8:	e0bff617 	ldw	r2,-40(fp)
   11fac:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   11fb0:	e0bff617 	ldw	r2,-40(fp)
   11fb4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   11fb8:	e0bff617 	ldw	r2,-40(fp)
   11fbc:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   11fc0:	e0bff617 	ldw	r2,-40(fp)
   11fc4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   11fc8:	e0bff617 	ldw	r2,-40(fp)
   11fcc:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   11fd0:	e0bff617 	ldw	r2,-40(fp)
   11fd4:	00c00fc4 	movi	r3,63
   11fd8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   11fdc:	e0bff617 	ldw	r2,-40(fp)
   11fe0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   11fe4:	e13ff617 	ldw	r4,-40(fp)
   11fe8:	001afd40 	call	1afd4 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   11fec:	e13ff617 	ldw	r4,-40(fp)
   11ff0:	001aecc0 	call	1aecc <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ff4:	0005303a 	rdctl	r2,status
   11ff8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ffc:	e0fff517 	ldw	r3,-44(fp)
   12000:	00bfff84 	movi	r2,-2
   12004:	1884703a 	and	r2,r3,r2
   12008:	1001703a 	wrctl	status,r2
  
  return context;
   1200c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   12010:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   12014:	e0fffb03 	ldbu	r3,-20(fp)
   12018:	008000b4 	movhi	r2,2
   1201c:	108be504 	addi	r2,r2,12180
   12020:	18c7883a 	add	r3,r3,r3
   12024:	18c7883a 	add	r3,r3,r3
   12028:	10c5883a 	add	r2,r2,r3
   1202c:	e0fff617 	ldw	r3,-40(fp)
   12030:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   12034:	d0e81b17 	ldw	r3,-24468(gp)
   12038:	e0bff617 	ldw	r2,-40(fp)
   1203c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   12040:	e0bff617 	ldw	r2,-40(fp)
   12044:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   12048:	d0a81b17 	ldw	r2,-24468(gp)
   1204c:	10000326 	beq	r2,zero,1205c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   12050:	d0a81b17 	ldw	r2,-24468(gp)
   12054:	e0fff617 	ldw	r3,-40(fp)
   12058:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   1205c:	e0bff617 	ldw	r2,-40(fp)
   12060:	d0a81b15 	stw	r2,-24468(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   12064:	e0bff617 	ldw	r2,-40(fp)
   12068:	10c00d83 	ldbu	r3,54(r2)
   1206c:	d0a82403 	ldbu	r2,-24432(gp)
   12070:	1884b03a 	or	r2,r3,r2
   12074:	d0a82405 	stb	r2,-24432(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   12078:	e0bff617 	ldw	r2,-40(fp)
   1207c:	10800d03 	ldbu	r2,52(r2)
   12080:	10c03fcc 	andi	r3,r2,255
   12084:	e0bff617 	ldw	r2,-40(fp)
   12088:	10800d03 	ldbu	r2,52(r2)
   1208c:	11003fcc 	andi	r4,r2,255
   12090:	d0a82444 	addi	r2,gp,-24431
   12094:	2085883a 	add	r2,r4,r2
   12098:	11000003 	ldbu	r4,0(r2)
   1209c:	e0bff617 	ldw	r2,-40(fp)
   120a0:	10800d43 	ldbu	r2,53(r2)
   120a4:	2084b03a 	or	r2,r4,r2
   120a8:	1009883a 	mov	r4,r2
   120ac:	d0a82444 	addi	r2,gp,-24431
   120b0:	1885883a 	add	r2,r3,r2
   120b4:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   120b8:	d0a82043 	ldbu	r2,-24447(gp)
   120bc:	10800044 	addi	r2,r2,1
   120c0:	d0a82045 	stb	r2,-24447(gp)
   120c4:	e0bff417 	ldw	r2,-48(fp)
   120c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   120cc:	e0bff717 	ldw	r2,-36(fp)
   120d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   120d4:	0005883a 	mov	r2,zero
   120d8:	00000506 	br	120f0 <OS_TCBInit+0x2c0>
   120dc:	e0bff417 	ldw	r2,-48(fp)
   120e0:	e0bff915 	stw	r2,-28(fp)
   120e4:	e0bff917 	ldw	r2,-28(fp)
   120e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   120ec:	00801084 	movi	r2,66
}
   120f0:	e037883a 	mov	sp,fp
   120f4:	dfc00117 	ldw	ra,4(sp)
   120f8:	df000017 	ldw	fp,0(sp)
   120fc:	dec00204 	addi	sp,sp,8
   12100:	f800283a 	ret

00012104 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   12104:	defffe04 	addi	sp,sp,-8
   12108:	df000115 	stw	fp,4(sp)
   1210c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   12110:	d0a00f04 	addi	r2,gp,-32708
   12114:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   12118:	d0a01004 	addi	r2,gp,-32704
   1211c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   12120:	d0a01184 	addi	r2,gp,-32698
   12124:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   12128:	d0a01204 	addi	r2,gp,-32696
   1212c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   12130:	d0a01104 	addi	r2,gp,-32700
   12134:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   12138:	d0a01284 	addi	r2,gp,-32694
   1213c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   12140:	d0a01304 	addi	r2,gp,-32692
   12144:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   12148:	d0a01384 	addi	r2,gp,-32690
   1214c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   12150:	d0a01404 	addi	r2,gp,-32688
   12154:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   12158:	d0a01484 	addi	r2,gp,-32686
   1215c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   12160:	d0a01504 	addi	r2,gp,-32684
   12164:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   12168:	d0a01584 	addi	r2,gp,-32682
   1216c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   12170:	d0a01604 	addi	r2,gp,-32680
   12174:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   12178:	d0a01684 	addi	r2,gp,-32678
   1217c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   12180:	d0a01704 	addi	r2,gp,-32676
   12184:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   12188:	d0a01784 	addi	r2,gp,-32674
   1218c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   12190:	d0a01804 	addi	r2,gp,-32672
   12194:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   12198:	d0a01884 	addi	r2,gp,-32670
   1219c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   121a0:	d0a01904 	addi	r2,gp,-32668
   121a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   121a8:	d0a01984 	addi	r2,gp,-32666
   121ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   121b0:	d0a01a04 	addi	r2,gp,-32664
   121b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   121b8:	d0a01a84 	addi	r2,gp,-32662
   121bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   121c0:	d0a01b04 	addi	r2,gp,-32660
   121c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   121c8:	d0a01b84 	addi	r2,gp,-32658
   121cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   121d0:	d0a01c04 	addi	r2,gp,-32656
   121d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   121d8:	d0a01c84 	addi	r2,gp,-32654
   121dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   121e0:	d0a01d04 	addi	r2,gp,-32652
   121e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   121e8:	d0a01d84 	addi	r2,gp,-32650
   121ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   121f0:	d0a01e04 	addi	r2,gp,-32648
   121f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   121f8:	d0a01e84 	addi	r2,gp,-32646
   121fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   12200:	d0a01f04 	addi	r2,gp,-32644
   12204:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   12208:	d0a01f84 	addi	r2,gp,-32642
   1220c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   12210:	d0a02004 	addi	r2,gp,-32640
   12214:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   12218:	d0a02084 	addi	r2,gp,-32638
   1221c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   12220:	d0a02104 	addi	r2,gp,-32636
   12224:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   12228:	d0a02184 	addi	r2,gp,-32634
   1222c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   12230:	d0a02204 	addi	r2,gp,-32632
   12234:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   12238:	d0a02284 	addi	r2,gp,-32630
   1223c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   12240:	d0a02304 	addi	r2,gp,-32628
   12244:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   12248:	d0a02384 	addi	r2,gp,-32626
   1224c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   12250:	d0a02404 	addi	r2,gp,-32624
   12254:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   12258:	d0a02484 	addi	r2,gp,-32622
   1225c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   12260:	d0a02504 	addi	r2,gp,-32620
   12264:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   12268:	d0a02584 	addi	r2,gp,-32618
   1226c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   12270:	d0a02604 	addi	r2,gp,-32616
   12274:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   12278:	d0a02b04 	addi	r2,gp,-32596
   1227c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   12280:	0001883a 	nop
   12284:	e037883a 	mov	sp,fp
   12288:	df000017 	ldw	fp,0(sp)
   1228c:	dec00104 	addi	sp,sp,4
   12290:	f800283a 	ret

00012294 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   12294:	defff204 	addi	sp,sp,-56
   12298:	df000d15 	stw	fp,52(sp)
   1229c:	df000d04 	addi	fp,sp,52
   122a0:	e13ffc15 	stw	r4,-16(fp)
   122a4:	2807883a 	mov	r3,r5
   122a8:	3005883a 	mov	r2,r6
   122ac:	e1ffff15 	stw	r7,-4(fp)
   122b0:	e0fffd0d 	sth	r3,-12(fp)
   122b4:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   122b8:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   122bc:	e0bfff17 	ldw	r2,-4(fp)
   122c0:	1000021e 	bne	r2,zero,122cc <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   122c4:	0005883a 	mov	r2,zero
   122c8:	0000b006 	br	1258c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   122cc:	e0bffc17 	ldw	r2,-16(fp)
   122d0:	1000051e 	bne	r2,zero,122e8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   122d4:	e0bfff17 	ldw	r2,-4(fp)
   122d8:	00c01b84 	movi	r3,110
   122dc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   122e0:	0005883a 	mov	r2,zero
   122e4:	0000a906 	br	1258c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   122e8:	e0bffc17 	ldw	r2,-16(fp)
   122ec:	10800003 	ldbu	r2,0(r2)
   122f0:	10803fcc 	andi	r2,r2,255
   122f4:	10800160 	cmpeqi	r2,r2,5
   122f8:	1000051e 	bne	r2,zero,12310 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   122fc:	e0bfff17 	ldw	r2,-4(fp)
   12300:	00c00044 	movi	r3,1
   12304:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12308:	0005883a 	mov	r2,zero
   1230c:	00009f06 	br	1258c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   12310:	e0fffe03 	ldbu	r3,-8(fp)
   12314:	00bfe004 	movi	r2,-128
   12318:	1884703a 	and	r2,r3,r2
   1231c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   12320:	e0bff503 	ldbu	r2,-44(fp)
   12324:	10000626 	beq	r2,zero,12340 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   12328:	e0bffe03 	ldbu	r2,-8(fp)
   1232c:	10801fcc 	andi	r2,r2,127
   12330:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   12334:	00800044 	movi	r2,1
   12338:	e0bff385 	stb	r2,-50(fp)
   1233c:	00000106 	br	12344 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   12340:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   12344:	e0bfff17 	ldw	r2,-4(fp)
   12348:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1234c:	0005303a 	rdctl	r2,status
   12350:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12354:	e0fffb17 	ldw	r3,-20(fp)
   12358:	00bfff84 	movi	r2,-2
   1235c:	1884703a 	and	r2,r3,r2
   12360:	1001703a 	wrctl	status,r2
  
  return context;
   12364:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   12368:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   1236c:	e0bffe03 	ldbu	r2,-8(fp)
   12370:	10c00060 	cmpeqi	r3,r2,1
   12374:	18005f1e 	bne	r3,zero,124f4 <OSFlagAccept+0x260>
   12378:	10c00088 	cmpgei	r3,r2,2
   1237c:	1800021e 	bne	r3,zero,12388 <OSFlagAccept+0xf4>
   12380:	10003f26 	beq	r2,zero,12480 <OSFlagAccept+0x1ec>
   12384:	00007706 	br	12564 <OSFlagAccept+0x2d0>
   12388:	10c000a0 	cmpeqi	r3,r2,2
   1238c:	1800031e 	bne	r3,zero,1239c <OSFlagAccept+0x108>
   12390:	108000e0 	cmpeqi	r2,r2,3
   12394:	10001e1e 	bne	r2,zero,12410 <OSFlagAccept+0x17c>
   12398:	00007206 	br	12564 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1239c:	e0bffc17 	ldw	r2,-16(fp)
   123a0:	10c0020b 	ldhu	r3,8(r2)
   123a4:	e0bffd0b 	ldhu	r2,-12(fp)
   123a8:	1884703a 	and	r2,r3,r2
   123ac:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   123b0:	e0fff30b 	ldhu	r3,-52(fp)
   123b4:	e0bffd0b 	ldhu	r2,-12(fp)
   123b8:	18800d1e 	bne	r3,r2,123f0 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   123bc:	e0bff383 	ldbu	r2,-50(fp)
   123c0:	10800058 	cmpnei	r2,r2,1
   123c4:	10000d1e 	bne	r2,zero,123fc <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   123c8:	e0bffc17 	ldw	r2,-16(fp)
   123cc:	1080020b 	ldhu	r2,8(r2)
   123d0:	1007883a 	mov	r3,r2
   123d4:	e0bff30b 	ldhu	r2,-52(fp)
   123d8:	0084303a 	nor	r2,zero,r2
   123dc:	1884703a 	and	r2,r3,r2
   123e0:	1007883a 	mov	r3,r2
   123e4:	e0bffc17 	ldw	r2,-16(fp)
   123e8:	10c0020d 	sth	r3,8(r2)
   123ec:	00000306 	br	123fc <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   123f0:	e0bfff17 	ldw	r2,-4(fp)
   123f4:	00c01c04 	movi	r3,112
   123f8:	10c00005 	stb	r3,0(r2)
   123fc:	e0bff417 	ldw	r2,-48(fp)
   12400:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12404:	e0bff617 	ldw	r2,-40(fp)
   12408:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1240c:	00005e06 	br	12588 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   12410:	e0bffc17 	ldw	r2,-16(fp)
   12414:	10c0020b 	ldhu	r3,8(r2)
   12418:	e0bffd0b 	ldhu	r2,-12(fp)
   1241c:	1884703a 	and	r2,r3,r2
   12420:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   12424:	e0bff30b 	ldhu	r2,-52(fp)
   12428:	10000d26 	beq	r2,zero,12460 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1242c:	e0bff383 	ldbu	r2,-50(fp)
   12430:	10800058 	cmpnei	r2,r2,1
   12434:	10000d1e 	bne	r2,zero,1246c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   12438:	e0bffc17 	ldw	r2,-16(fp)
   1243c:	1080020b 	ldhu	r2,8(r2)
   12440:	1007883a 	mov	r3,r2
   12444:	e0bff30b 	ldhu	r2,-52(fp)
   12448:	0084303a 	nor	r2,zero,r2
   1244c:	1884703a 	and	r2,r3,r2
   12450:	1007883a 	mov	r3,r2
   12454:	e0bffc17 	ldw	r2,-16(fp)
   12458:	10c0020d 	sth	r3,8(r2)
   1245c:	00000306 	br	1246c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12460:	e0bfff17 	ldw	r2,-4(fp)
   12464:	00c01c04 	movi	r3,112
   12468:	10c00005 	stb	r3,0(r2)
   1246c:	e0bff417 	ldw	r2,-48(fp)
   12470:	e0bff715 	stw	r2,-36(fp)
   12474:	e0bff717 	ldw	r2,-36(fp)
   12478:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1247c:	00004206 	br	12588 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   12480:	e0bffc17 	ldw	r2,-16(fp)
   12484:	1080020b 	ldhu	r2,8(r2)
   12488:	0084303a 	nor	r2,zero,r2
   1248c:	1007883a 	mov	r3,r2
   12490:	e0bffd0b 	ldhu	r2,-12(fp)
   12494:	1884703a 	and	r2,r3,r2
   12498:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1249c:	e0fff30b 	ldhu	r3,-52(fp)
   124a0:	e0bffd0b 	ldhu	r2,-12(fp)
   124a4:	18800b1e 	bne	r3,r2,124d4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   124a8:	e0bff383 	ldbu	r2,-50(fp)
   124ac:	10800058 	cmpnei	r2,r2,1
   124b0:	10000b1e 	bne	r2,zero,124e0 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   124b4:	e0bffc17 	ldw	r2,-16(fp)
   124b8:	10c0020b 	ldhu	r3,8(r2)
   124bc:	e0bff30b 	ldhu	r2,-52(fp)
   124c0:	1884b03a 	or	r2,r3,r2
   124c4:	1007883a 	mov	r3,r2
   124c8:	e0bffc17 	ldw	r2,-16(fp)
   124cc:	10c0020d 	sth	r3,8(r2)
   124d0:	00000306 	br	124e0 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   124d4:	e0bfff17 	ldw	r2,-4(fp)
   124d8:	00c01c04 	movi	r3,112
   124dc:	10c00005 	stb	r3,0(r2)
   124e0:	e0bff417 	ldw	r2,-48(fp)
   124e4:	e0bff815 	stw	r2,-32(fp)
   124e8:	e0bff817 	ldw	r2,-32(fp)
   124ec:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   124f0:	00002506 	br	12588 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   124f4:	e0bffc17 	ldw	r2,-16(fp)
   124f8:	1080020b 	ldhu	r2,8(r2)
   124fc:	0084303a 	nor	r2,zero,r2
   12500:	1007883a 	mov	r3,r2
   12504:	e0bffd0b 	ldhu	r2,-12(fp)
   12508:	1884703a 	and	r2,r3,r2
   1250c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   12510:	e0bff30b 	ldhu	r2,-52(fp)
   12514:	10000b26 	beq	r2,zero,12544 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12518:	e0bff383 	ldbu	r2,-50(fp)
   1251c:	10800058 	cmpnei	r2,r2,1
   12520:	10000b1e 	bne	r2,zero,12550 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   12524:	e0bffc17 	ldw	r2,-16(fp)
   12528:	10c0020b 	ldhu	r3,8(r2)
   1252c:	e0bff30b 	ldhu	r2,-52(fp)
   12530:	1884b03a 	or	r2,r3,r2
   12534:	1007883a 	mov	r3,r2
   12538:	e0bffc17 	ldw	r2,-16(fp)
   1253c:	10c0020d 	sth	r3,8(r2)
   12540:	00000306 	br	12550 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12544:	e0bfff17 	ldw	r2,-4(fp)
   12548:	00c01c04 	movi	r3,112
   1254c:	10c00005 	stb	r3,0(r2)
   12550:	e0bff417 	ldw	r2,-48(fp)
   12554:	e0bff915 	stw	r2,-28(fp)
   12558:	e0bff917 	ldw	r2,-28(fp)
   1255c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12560:	00000906 	br	12588 <OSFlagAccept+0x2f4>
   12564:	e0bff417 	ldw	r2,-48(fp)
   12568:	e0bffa15 	stw	r2,-24(fp)
   1256c:	e0bffa17 	ldw	r2,-24(fp)
   12570:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   12574:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   12578:	e0bfff17 	ldw	r2,-4(fp)
   1257c:	00c01bc4 	movi	r3,111
   12580:	10c00005 	stb	r3,0(r2)
             break;
   12584:	0001883a 	nop
    }
    return (flags_rdy);
   12588:	e0bff30b 	ldhu	r2,-52(fp)
}
   1258c:	e037883a 	mov	sp,fp
   12590:	df000017 	ldw	fp,0(sp)
   12594:	dec00104 	addi	sp,sp,4
   12598:	f800283a 	ret

0001259c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   1259c:	defff804 	addi	sp,sp,-32
   125a0:	df000715 	stw	fp,28(sp)
   125a4:	df000704 	addi	fp,sp,28
   125a8:	2005883a 	mov	r2,r4
   125ac:	e17fff15 	stw	r5,-4(fp)
   125b0:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   125b4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   125b8:	e0bfff17 	ldw	r2,-4(fp)
   125bc:	1000021e 	bne	r2,zero,125c8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   125c0:	0005883a 	mov	r2,zero
   125c4:	00003306 	br	12694 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   125c8:	d0a82603 	ldbu	r2,-24424(gp)
   125cc:	10803fcc 	andi	r2,r2,255
   125d0:	10000526 	beq	r2,zero,125e8 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   125d4:	e0bfff17 	ldw	r2,-4(fp)
   125d8:	00c00404 	movi	r3,16
   125dc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   125e0:	0005883a 	mov	r2,zero
   125e4:	00002b06 	br	12694 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   125e8:	0005303a 	rdctl	r2,status
   125ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   125f0:	e0fffd17 	ldw	r3,-12(fp)
   125f4:	00bfff84 	movi	r2,-2
   125f8:	1884703a 	and	r2,r3,r2
   125fc:	1001703a 	wrctl	status,r2
  
  return context;
   12600:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12604:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   12608:	d0a82917 	ldw	r2,-24412(gp)
   1260c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   12610:	e0bffb17 	ldw	r2,-20(fp)
   12614:	10001726 	beq	r2,zero,12674 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   12618:	d0a82917 	ldw	r2,-24412(gp)
   1261c:	10800117 	ldw	r2,4(r2)
   12620:	d0a82915 	stw	r2,-24412(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   12624:	e0bffb17 	ldw	r2,-20(fp)
   12628:	00c00144 	movi	r3,5
   1262c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   12630:	e0bffb17 	ldw	r2,-20(fp)
   12634:	e0fffe0b 	ldhu	r3,-8(fp)
   12638:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   1263c:	e0bffb17 	ldw	r2,-20(fp)
   12640:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   12644:	e0bffb17 	ldw	r2,-20(fp)
   12648:	00c00fc4 	movi	r3,63
   1264c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   12650:	e0bffb17 	ldw	r2,-20(fp)
   12654:	100002c5 	stb	zero,11(r2)
   12658:	e0bff917 	ldw	r2,-28(fp)
   1265c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12660:	e0bffa17 	ldw	r2,-24(fp)
   12664:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   12668:	e0bfff17 	ldw	r2,-4(fp)
   1266c:	10000005 	stb	zero,0(r2)
   12670:	00000706 	br	12690 <OSFlagCreate+0xf4>
   12674:	e0bff917 	ldw	r2,-28(fp)
   12678:	e0bffc15 	stw	r2,-16(fp)
   1267c:	e0bffc17 	ldw	r2,-16(fp)
   12680:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   12684:	e0bfff17 	ldw	r2,-4(fp)
   12688:	00c01c84 	movi	r3,114
   1268c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   12690:	e0bffb17 	ldw	r2,-20(fp)
}
   12694:	e037883a 	mov	sp,fp
   12698:	df000017 	ldw	fp,0(sp)
   1269c:	dec00104 	addi	sp,sp,4
   126a0:	f800283a 	ret

000126a4 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   126a4:	defff204 	addi	sp,sp,-56
   126a8:	dfc00d15 	stw	ra,52(sp)
   126ac:	df000c15 	stw	fp,48(sp)
   126b0:	df000c04 	addi	fp,sp,48
   126b4:	e13ffd15 	stw	r4,-12(fp)
   126b8:	2805883a 	mov	r2,r5
   126bc:	e1bfff15 	stw	r6,-4(fp)
   126c0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   126c4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   126c8:	e0bfff17 	ldw	r2,-4(fp)
   126cc:	1000021e 	bne	r2,zero,126d8 <OSFlagDel+0x34>
        return (pgrp);
   126d0:	e0bffd17 	ldw	r2,-12(fp)
   126d4:	00008006 	br	128d8 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   126d8:	e0bffd17 	ldw	r2,-12(fp)
   126dc:	1000051e 	bne	r2,zero,126f4 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   126e0:	e0bfff17 	ldw	r2,-4(fp)
   126e4:	00c01b84 	movi	r3,110
   126e8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   126ec:	e0bffd17 	ldw	r2,-12(fp)
   126f0:	00007906 	br	128d8 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   126f4:	d0a82603 	ldbu	r2,-24424(gp)
   126f8:	10803fcc 	andi	r2,r2,255
   126fc:	10000526 	beq	r2,zero,12714 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   12700:	e0bfff17 	ldw	r2,-4(fp)
   12704:	00c003c4 	movi	r3,15
   12708:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1270c:	e0bffd17 	ldw	r2,-12(fp)
   12710:	00007106 	br	128d8 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   12714:	e0bffd17 	ldw	r2,-12(fp)
   12718:	10800003 	ldbu	r2,0(r2)
   1271c:	10803fcc 	andi	r2,r2,255
   12720:	10800160 	cmpeqi	r2,r2,5
   12724:	1000051e 	bne	r2,zero,1273c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   12728:	e0bfff17 	ldw	r2,-4(fp)
   1272c:	00c00044 	movi	r3,1
   12730:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   12734:	e0bffd17 	ldw	r2,-12(fp)
   12738:	00006706 	br	128d8 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1273c:	0005303a 	rdctl	r2,status
   12740:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12744:	e0fffc17 	ldw	r3,-16(fp)
   12748:	00bfff84 	movi	r2,-2
   1274c:	1884703a 	and	r2,r3,r2
   12750:	1001703a 	wrctl	status,r2
  
  return context;
   12754:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12758:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   1275c:	e0bffd17 	ldw	r2,-12(fp)
   12760:	10800117 	ldw	r2,4(r2)
   12764:	10000326 	beq	r2,zero,12774 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   12768:	00800044 	movi	r2,1
   1276c:	e0bff405 	stb	r2,-48(fp)
   12770:	00000106 	br	12778 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12774:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   12778:	e0bffe03 	ldbu	r2,-8(fp)
   1277c:	10000326 	beq	r2,zero,1278c <OSFlagDel+0xe8>
   12780:	10800060 	cmpeqi	r2,r2,1
   12784:	1000231e 	bne	r2,zero,12814 <OSFlagDel+0x170>
   12788:	00004806 	br	128ac <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1278c:	e0bff403 	ldbu	r2,-48(fp)
   12790:	1000161e 	bne	r2,zero,127ec <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   12794:	e0bffd17 	ldw	r2,-12(fp)
   12798:	00c00fc4 	movi	r3,63
   1279c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   127a0:	e0bffd17 	ldw	r2,-12(fp)
   127a4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   127a8:	e0bffd17 	ldw	r2,-12(fp)
   127ac:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   127b0:	d0e82917 	ldw	r3,-24412(gp)
   127b4:	e0bffd17 	ldw	r2,-12(fp)
   127b8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   127bc:	e0bffd17 	ldw	r2,-12(fp)
   127c0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   127c4:	e0bffd17 	ldw	r2,-12(fp)
   127c8:	d0a82915 	stw	r2,-24412(gp)
   127cc:	e0bff717 	ldw	r2,-36(fp)
   127d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127d4:	e0bff817 	ldw	r2,-32(fp)
   127d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   127dc:	e0bfff17 	ldw	r2,-4(fp)
   127e0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   127e4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   127e8:	00003a06 	br	128d4 <OSFlagDel+0x230>
   127ec:	e0bff717 	ldw	r2,-36(fp)
   127f0:	e0bff915 	stw	r2,-28(fp)
   127f4:	e0bff917 	ldw	r2,-28(fp)
   127f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   127fc:	e0bfff17 	ldw	r2,-4(fp)
   12800:	00c01244 	movi	r3,73
   12804:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   12808:	e0bffd17 	ldw	r2,-12(fp)
   1280c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   12810:	00003006 	br	128d4 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   12814:	e0bffd17 	ldw	r2,-12(fp)
   12818:	10800117 	ldw	r2,4(r2)
   1281c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   12820:	00000606 	br	1283c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   12824:	000b883a 	mov	r5,zero
   12828:	e13ff517 	ldw	r4,-44(fp)
   1282c:	00138100 	call	13810 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   12830:	e0bff517 	ldw	r2,-44(fp)
   12834:	10800017 	ldw	r2,0(r2)
   12838:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1283c:	e0bff517 	ldw	r2,-44(fp)
   12840:	103ff81e 	bne	r2,zero,12824 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012824>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   12844:	e0bffd17 	ldw	r2,-12(fp)
   12848:	00c00fc4 	movi	r3,63
   1284c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   12850:	e0bffd17 	ldw	r2,-12(fp)
   12854:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   12858:	e0bffd17 	ldw	r2,-12(fp)
   1285c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   12860:	d0e82917 	ldw	r3,-24412(gp)
   12864:	e0bffd17 	ldw	r2,-12(fp)
   12868:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1286c:	e0bffd17 	ldw	r2,-12(fp)
   12870:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   12874:	e0bffd17 	ldw	r2,-12(fp)
   12878:	d0a82915 	stw	r2,-24412(gp)
   1287c:	e0bff717 	ldw	r2,-36(fp)
   12880:	e0bffa15 	stw	r2,-24(fp)
   12884:	e0bffa17 	ldw	r2,-24(fp)
   12888:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1288c:	e0bff403 	ldbu	r2,-48(fp)
   12890:	10800058 	cmpnei	r2,r2,1
   12894:	1000011e 	bne	r2,zero,1289c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12898:	0011a200 	call	11a20 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1289c:	e0bfff17 	ldw	r2,-4(fp)
   128a0:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   128a4:	e03ff615 	stw	zero,-40(fp)
             break;
   128a8:	00000a06 	br	128d4 <OSFlagDel+0x230>
   128ac:	e0bff717 	ldw	r2,-36(fp)
   128b0:	e0bffb15 	stw	r2,-20(fp)
   128b4:	e0bffb17 	ldw	r2,-20(fp)
   128b8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   128bc:	e0bfff17 	ldw	r2,-4(fp)
   128c0:	00c001c4 	movi	r3,7
   128c4:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   128c8:	e0bffd17 	ldw	r2,-12(fp)
   128cc:	e0bff615 	stw	r2,-40(fp)
             break;
   128d0:	0001883a 	nop
    }
    return (pgrp_return);
   128d4:	e0bff617 	ldw	r2,-40(fp)
}
   128d8:	e037883a 	mov	sp,fp
   128dc:	dfc00117 	ldw	ra,4(sp)
   128e0:	df000017 	ldw	fp,0(sp)
   128e4:	dec00204 	addi	sp,sp,8
   128e8:	f800283a 	ret

000128ec <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   128ec:	defff604 	addi	sp,sp,-40
   128f0:	dfc00915 	stw	ra,36(sp)
   128f4:	df000815 	stw	fp,32(sp)
   128f8:	df000804 	addi	fp,sp,32
   128fc:	e13ffd15 	stw	r4,-12(fp)
   12900:	e17ffe15 	stw	r5,-8(fp)
   12904:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12908:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1290c:	e0bfff17 	ldw	r2,-4(fp)
   12910:	1000021e 	bne	r2,zero,1291c <OSFlagNameGet+0x30>
        return (0);
   12914:	0005883a 	mov	r2,zero
   12918:	00003906 	br	12a00 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1291c:	e0bffd17 	ldw	r2,-12(fp)
   12920:	1000051e 	bne	r2,zero,12938 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12924:	e0bfff17 	ldw	r2,-4(fp)
   12928:	00c01b84 	movi	r3,110
   1292c:	10c00005 	stb	r3,0(r2)
        return (0);
   12930:	0005883a 	mov	r2,zero
   12934:	00003206 	br	12a00 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12938:	e0bffe17 	ldw	r2,-8(fp)
   1293c:	1000051e 	bne	r2,zero,12954 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   12940:	e0bfff17 	ldw	r2,-4(fp)
   12944:	00c00304 	movi	r3,12
   12948:	10c00005 	stb	r3,0(r2)
        return (0);
   1294c:	0005883a 	mov	r2,zero
   12950:	00002b06 	br	12a00 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12954:	d0a82603 	ldbu	r2,-24424(gp)
   12958:	10803fcc 	andi	r2,r2,255
   1295c:	10000526 	beq	r2,zero,12974 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   12960:	e0bfff17 	ldw	r2,-4(fp)
   12964:	00c00444 	movi	r3,17
   12968:	10c00005 	stb	r3,0(r2)
        return (0);
   1296c:	0005883a 	mov	r2,zero
   12970:	00002306 	br	12a00 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12974:	0005303a 	rdctl	r2,status
   12978:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1297c:	e0fffc17 	ldw	r3,-16(fp)
   12980:	00bfff84 	movi	r2,-2
   12984:	1884703a 	and	r2,r3,r2
   12988:	1001703a 	wrctl	status,r2
  
  return context;
   1298c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12990:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   12994:	e0bffd17 	ldw	r2,-12(fp)
   12998:	10800003 	ldbu	r2,0(r2)
   1299c:	10803fcc 	andi	r2,r2,255
   129a0:	10800160 	cmpeqi	r2,r2,5
   129a4:	1000091e 	bne	r2,zero,129cc <OSFlagNameGet+0xe0>
   129a8:	e0bff817 	ldw	r2,-32(fp)
   129ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   129b0:	e0bff917 	ldw	r2,-28(fp)
   129b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   129b8:	e0bfff17 	ldw	r2,-4(fp)
   129bc:	00c00044 	movi	r3,1
   129c0:	10c00005 	stb	r3,0(r2)
        return (0);
   129c4:	0005883a 	mov	r2,zero
   129c8:	00000d06 	br	12a00 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   129cc:	e0bffd17 	ldw	r2,-12(fp)
   129d0:	10800284 	addi	r2,r2,10
   129d4:	100b883a 	mov	r5,r2
   129d8:	e13ffe17 	ldw	r4,-8(fp)
   129dc:	0011b640 	call	11b64 <OS_StrCopy>
   129e0:	e0bffb05 	stb	r2,-20(fp)
   129e4:	e0bff817 	ldw	r2,-32(fp)
   129e8:	e0bffa15 	stw	r2,-24(fp)
   129ec:	e0bffa17 	ldw	r2,-24(fp)
   129f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   129f4:	e0bfff17 	ldw	r2,-4(fp)
   129f8:	10000005 	stb	zero,0(r2)
    return (len);
   129fc:	e0bffb03 	ldbu	r2,-20(fp)
}
   12a00:	e037883a 	mov	sp,fp
   12a04:	dfc00117 	ldw	ra,4(sp)
   12a08:	df000017 	ldw	fp,0(sp)
   12a0c:	dec00204 	addi	sp,sp,8
   12a10:	f800283a 	ret

00012a14 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   12a14:	defff504 	addi	sp,sp,-44
   12a18:	dfc00a15 	stw	ra,40(sp)
   12a1c:	df000915 	stw	fp,36(sp)
   12a20:	df000904 	addi	fp,sp,36
   12a24:	e13ffd15 	stw	r4,-12(fp)
   12a28:	e17ffe15 	stw	r5,-8(fp)
   12a2c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12a30:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12a34:	e0bfff17 	ldw	r2,-4(fp)
   12a38:	10004326 	beq	r2,zero,12b48 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   12a3c:	e0bffd17 	ldw	r2,-12(fp)
   12a40:	1000041e 	bne	r2,zero,12a54 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12a44:	e0bfff17 	ldw	r2,-4(fp)
   12a48:	00c01b84 	movi	r3,110
   12a4c:	10c00005 	stb	r3,0(r2)
        return;
   12a50:	00003e06 	br	12b4c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12a54:	e0bffe17 	ldw	r2,-8(fp)
   12a58:	1000041e 	bne	r2,zero,12a6c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   12a5c:	e0bfff17 	ldw	r2,-4(fp)
   12a60:	00c00304 	movi	r3,12
   12a64:	10c00005 	stb	r3,0(r2)
        return;
   12a68:	00003806 	br	12b4c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12a6c:	d0a82603 	ldbu	r2,-24424(gp)
   12a70:	10803fcc 	andi	r2,r2,255
   12a74:	10000426 	beq	r2,zero,12a88 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   12a78:	e0bfff17 	ldw	r2,-4(fp)
   12a7c:	00c00484 	movi	r3,18
   12a80:	10c00005 	stb	r3,0(r2)
        return;
   12a84:	00003106 	br	12b4c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a88:	0005303a 	rdctl	r2,status
   12a8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a90:	e0fffc17 	ldw	r3,-16(fp)
   12a94:	00bfff84 	movi	r2,-2
   12a98:	1884703a 	and	r2,r3,r2
   12a9c:	1001703a 	wrctl	status,r2
  
  return context;
   12aa0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12aa4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   12aa8:	e0bffd17 	ldw	r2,-12(fp)
   12aac:	10800003 	ldbu	r2,0(r2)
   12ab0:	10803fcc 	andi	r2,r2,255
   12ab4:	10800160 	cmpeqi	r2,r2,5
   12ab8:	1000081e 	bne	r2,zero,12adc <OSFlagNameSet+0xc8>
   12abc:	e0bff717 	ldw	r2,-36(fp)
   12ac0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ac4:	e0bff817 	ldw	r2,-32(fp)
   12ac8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   12acc:	e0bfff17 	ldw	r2,-4(fp)
   12ad0:	00c00044 	movi	r3,1
   12ad4:	10c00005 	stb	r3,0(r2)
        return;
   12ad8:	00001c06 	br	12b4c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   12adc:	e13ffe17 	ldw	r4,-8(fp)
   12ae0:	0011bd80 	call	11bd8 <OS_StrLen>
   12ae4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   12ae8:	e0bffa03 	ldbu	r2,-24(fp)
   12aec:	10800830 	cmpltui	r2,r2,32
   12af0:	1000081e 	bne	r2,zero,12b14 <OSFlagNameSet+0x100>
   12af4:	e0bff717 	ldw	r2,-36(fp)
   12af8:	e0bff915 	stw	r2,-28(fp)
   12afc:	e0bff917 	ldw	r2,-28(fp)
   12b00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   12b04:	e0bfff17 	ldw	r2,-4(fp)
   12b08:	00c01cc4 	movi	r3,115
   12b0c:	10c00005 	stb	r3,0(r2)
        return;
   12b10:	00000e06 	br	12b4c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   12b14:	e0bffd17 	ldw	r2,-12(fp)
   12b18:	10800284 	addi	r2,r2,10
   12b1c:	e17ffe17 	ldw	r5,-8(fp)
   12b20:	1009883a 	mov	r4,r2
   12b24:	0011b640 	call	11b64 <OS_StrCopy>
   12b28:	e0bff717 	ldw	r2,-36(fp)
   12b2c:	e0bffb15 	stw	r2,-20(fp)
   12b30:	e0bffb17 	ldw	r2,-20(fp)
   12b34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12b38:	e0bfff17 	ldw	r2,-4(fp)
   12b3c:	10000005 	stb	zero,0(r2)
    return;
   12b40:	0001883a 	nop
   12b44:	00000106 	br	12b4c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   12b48:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   12b4c:	e037883a 	mov	sp,fp
   12b50:	dfc00117 	ldw	ra,4(sp)
   12b54:	df000017 	ldw	fp,0(sp)
   12b58:	dec00204 	addi	sp,sp,8
   12b5c:	f800283a 	ret

00012b60 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   12b60:	deffe104 	addi	sp,sp,-124
   12b64:	dfc01e15 	stw	ra,120(sp)
   12b68:	df001d15 	stw	fp,116(sp)
   12b6c:	df001d04 	addi	fp,sp,116
   12b70:	e13ffc15 	stw	r4,-16(fp)
   12b74:	2809883a 	mov	r4,r5
   12b78:	3007883a 	mov	r3,r6
   12b7c:	3805883a 	mov	r2,r7
   12b80:	e13ffd0d 	sth	r4,-12(fp)
   12b84:	e0fffe05 	stb	r3,-8(fp)
   12b88:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   12b8c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12b90:	e0800217 	ldw	r2,8(fp)
   12b94:	1000021e 	bne	r2,zero,12ba0 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   12b98:	0005883a 	mov	r2,zero
   12b9c:	00015906 	br	13104 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   12ba0:	e0bffc17 	ldw	r2,-16(fp)
   12ba4:	1000051e 	bne	r2,zero,12bbc <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12ba8:	e0800217 	ldw	r2,8(fp)
   12bac:	00c01b84 	movi	r3,110
   12bb0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12bb4:	0005883a 	mov	r2,zero
   12bb8:	00015206 	br	13104 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12bbc:	d0a82603 	ldbu	r2,-24424(gp)
   12bc0:	10803fcc 	andi	r2,r2,255
   12bc4:	10000526 	beq	r2,zero,12bdc <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   12bc8:	e0800217 	ldw	r2,8(fp)
   12bcc:	00c00084 	movi	r3,2
   12bd0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12bd4:	0005883a 	mov	r2,zero
   12bd8:	00014a06 	br	13104 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   12bdc:	d0a81803 	ldbu	r2,-24480(gp)
   12be0:	10803fcc 	andi	r2,r2,255
   12be4:	10000526 	beq	r2,zero,12bfc <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   12be8:	e0800217 	ldw	r2,8(fp)
   12bec:	00c00344 	movi	r3,13
   12bf0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12bf4:	0005883a 	mov	r2,zero
   12bf8:	00014206 	br	13104 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   12bfc:	e0bffc17 	ldw	r2,-16(fp)
   12c00:	10800003 	ldbu	r2,0(r2)
   12c04:	10803fcc 	andi	r2,r2,255
   12c08:	10800160 	cmpeqi	r2,r2,5
   12c0c:	1000051e 	bne	r2,zero,12c24 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   12c10:	e0800217 	ldw	r2,8(fp)
   12c14:	00c00044 	movi	r3,1
   12c18:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12c1c:	0005883a 	mov	r2,zero
   12c20:	00013806 	br	13104 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   12c24:	e0fffe03 	ldbu	r3,-8(fp)
   12c28:	00bfe004 	movi	r2,-128
   12c2c:	1884703a 	and	r2,r3,r2
   12c30:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   12c34:	e0bfe603 	ldbu	r2,-104(fp)
   12c38:	10000626 	beq	r2,zero,12c54 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   12c3c:	e0bffe03 	ldbu	r2,-8(fp)
   12c40:	10801fcc 	andi	r2,r2,127
   12c44:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   12c48:	00800044 	movi	r2,1
   12c4c:	e0bfe405 	stb	r2,-112(fp)
   12c50:	00000106 	br	12c58 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   12c54:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c58:	0005303a 	rdctl	r2,status
   12c5c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c60:	e0fff617 	ldw	r3,-40(fp)
   12c64:	00bfff84 	movi	r2,-2
   12c68:	1884703a 	and	r2,r3,r2
   12c6c:	1001703a 	wrctl	status,r2
  
  return context;
   12c70:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   12c74:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   12c78:	e0bffe03 	ldbu	r2,-8(fp)
   12c7c:	10c00060 	cmpeqi	r3,r2,1
   12c80:	1800921e 	bne	r3,zero,12ecc <OSFlagPend+0x36c>
   12c84:	10c00088 	cmpgei	r3,r2,2
   12c88:	1800021e 	bne	r3,zero,12c94 <OSFlagPend+0x134>
   12c8c:	10006126 	beq	r2,zero,12e14 <OSFlagPend+0x2b4>
   12c90:	0000bb06 	br	12f80 <OSFlagPend+0x420>
   12c94:	10c000a0 	cmpeqi	r3,r2,2
   12c98:	1800031e 	bne	r3,zero,12ca8 <OSFlagPend+0x148>
   12c9c:	108000e0 	cmpeqi	r2,r2,3
   12ca0:	10002f1e 	bne	r2,zero,12d60 <OSFlagPend+0x200>
   12ca4:	0000b606 	br	12f80 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   12ca8:	e0bffc17 	ldw	r2,-16(fp)
   12cac:	10c0020b 	ldhu	r3,8(r2)
   12cb0:	e0bffd0b 	ldhu	r2,-12(fp)
   12cb4:	1884703a 	and	r2,r3,r2
   12cb8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12cbc:	e0ffe80b 	ldhu	r3,-96(fp)
   12cc0:	e0bffd0b 	ldhu	r2,-12(fp)
   12cc4:	1880171e 	bne	r3,r2,12d24 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12cc8:	e0bfe403 	ldbu	r2,-112(fp)
   12ccc:	10800058 	cmpnei	r2,r2,1
   12cd0:	1000091e 	bne	r2,zero,12cf8 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   12cd4:	e0bffc17 	ldw	r2,-16(fp)
   12cd8:	1080020b 	ldhu	r2,8(r2)
   12cdc:	1007883a 	mov	r3,r2
   12ce0:	e0bfe80b 	ldhu	r2,-96(fp)
   12ce4:	0084303a 	nor	r2,zero,r2
   12ce8:	1884703a 	and	r2,r3,r2
   12cec:	1007883a 	mov	r3,r2
   12cf0:	e0bffc17 	ldw	r2,-16(fp)
   12cf4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12cf8:	d0a82717 	ldw	r2,-24420(gp)
   12cfc:	e0ffe80b 	ldhu	r3,-96(fp)
   12d00:	10c00b0d 	sth	r3,44(r2)
   12d04:	e0bfe517 	ldw	r2,-108(fp)
   12d08:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d0c:	e0bfe717 	ldw	r2,-100(fp)
   12d10:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12d14:	e0800217 	ldw	r2,8(fp)
   12d18:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12d1c:	e0bfe80b 	ldhu	r2,-96(fp)
   12d20:	0000f806 	br	13104 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12d24:	e13ffd0b 	ldhu	r4,-12(fp)
   12d28:	e17ffe03 	ldbu	r5,-8(fp)
   12d2c:	e0bfff0b 	ldhu	r2,-4(fp)
   12d30:	e0fff704 	addi	r3,fp,-36
   12d34:	d8800015 	stw	r2,0(sp)
   12d38:	280f883a 	mov	r7,r5
   12d3c:	200d883a 	mov	r6,r4
   12d40:	180b883a 	mov	r5,r3
   12d44:	e13ffc17 	ldw	r4,-16(fp)
   12d48:	00135d00 	call	135d0 <OS_FlagBlock>
   12d4c:	e0bfe517 	ldw	r2,-108(fp)
   12d50:	e0bfe915 	stw	r2,-92(fp)
   12d54:	e0bfe917 	ldw	r2,-92(fp)
   12d58:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12d5c:	00009206 	br	12fa8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   12d60:	e0bffc17 	ldw	r2,-16(fp)
   12d64:	10c0020b 	ldhu	r3,8(r2)
   12d68:	e0bffd0b 	ldhu	r2,-12(fp)
   12d6c:	1884703a 	and	r2,r3,r2
   12d70:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   12d74:	e0bfe80b 	ldhu	r2,-96(fp)
   12d78:	10001726 	beq	r2,zero,12dd8 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12d7c:	e0bfe403 	ldbu	r2,-112(fp)
   12d80:	10800058 	cmpnei	r2,r2,1
   12d84:	1000091e 	bne	r2,zero,12dac <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   12d88:	e0bffc17 	ldw	r2,-16(fp)
   12d8c:	1080020b 	ldhu	r2,8(r2)
   12d90:	1007883a 	mov	r3,r2
   12d94:	e0bfe80b 	ldhu	r2,-96(fp)
   12d98:	0084303a 	nor	r2,zero,r2
   12d9c:	1884703a 	and	r2,r3,r2
   12da0:	1007883a 	mov	r3,r2
   12da4:	e0bffc17 	ldw	r2,-16(fp)
   12da8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12dac:	d0a82717 	ldw	r2,-24420(gp)
   12db0:	e0ffe80b 	ldhu	r3,-96(fp)
   12db4:	10c00b0d 	sth	r3,44(r2)
   12db8:	e0bfe517 	ldw	r2,-108(fp)
   12dbc:	e0bfea15 	stw	r2,-88(fp)
   12dc0:	e0bfea17 	ldw	r2,-88(fp)
   12dc4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12dc8:	e0800217 	ldw	r2,8(fp)
   12dcc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12dd0:	e0bfe80b 	ldhu	r2,-96(fp)
   12dd4:	0000cb06 	br	13104 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12dd8:	e13ffd0b 	ldhu	r4,-12(fp)
   12ddc:	e17ffe03 	ldbu	r5,-8(fp)
   12de0:	e0bfff0b 	ldhu	r2,-4(fp)
   12de4:	e0fff704 	addi	r3,fp,-36
   12de8:	d8800015 	stw	r2,0(sp)
   12dec:	280f883a 	mov	r7,r5
   12df0:	200d883a 	mov	r6,r4
   12df4:	180b883a 	mov	r5,r3
   12df8:	e13ffc17 	ldw	r4,-16(fp)
   12dfc:	00135d00 	call	135d0 <OS_FlagBlock>
   12e00:	e0bfe517 	ldw	r2,-108(fp)
   12e04:	e0bfeb15 	stw	r2,-84(fp)
   12e08:	e0bfeb17 	ldw	r2,-84(fp)
   12e0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12e10:	00006506 	br	12fa8 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   12e14:	e0bffc17 	ldw	r2,-16(fp)
   12e18:	1080020b 	ldhu	r2,8(r2)
   12e1c:	0084303a 	nor	r2,zero,r2
   12e20:	1007883a 	mov	r3,r2
   12e24:	e0bffd0b 	ldhu	r2,-12(fp)
   12e28:	1884703a 	and	r2,r3,r2
   12e2c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12e30:	e0ffe80b 	ldhu	r3,-96(fp)
   12e34:	e0bffd0b 	ldhu	r2,-12(fp)
   12e38:	1880151e 	bne	r3,r2,12e90 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12e3c:	e0bfe403 	ldbu	r2,-112(fp)
   12e40:	10800058 	cmpnei	r2,r2,1
   12e44:	1000071e 	bne	r2,zero,12e64 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   12e48:	e0bffc17 	ldw	r2,-16(fp)
   12e4c:	10c0020b 	ldhu	r3,8(r2)
   12e50:	e0bfe80b 	ldhu	r2,-96(fp)
   12e54:	1884b03a 	or	r2,r3,r2
   12e58:	1007883a 	mov	r3,r2
   12e5c:	e0bffc17 	ldw	r2,-16(fp)
   12e60:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12e64:	d0a82717 	ldw	r2,-24420(gp)
   12e68:	e0ffe80b 	ldhu	r3,-96(fp)
   12e6c:	10c00b0d 	sth	r3,44(r2)
   12e70:	e0bfe517 	ldw	r2,-108(fp)
   12e74:	e0bfec15 	stw	r2,-80(fp)
   12e78:	e0bfec17 	ldw	r2,-80(fp)
   12e7c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12e80:	e0800217 	ldw	r2,8(fp)
   12e84:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12e88:	e0bfe80b 	ldhu	r2,-96(fp)
   12e8c:	00009d06 	br	13104 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12e90:	e13ffd0b 	ldhu	r4,-12(fp)
   12e94:	e17ffe03 	ldbu	r5,-8(fp)
   12e98:	e0bfff0b 	ldhu	r2,-4(fp)
   12e9c:	e0fff704 	addi	r3,fp,-36
   12ea0:	d8800015 	stw	r2,0(sp)
   12ea4:	280f883a 	mov	r7,r5
   12ea8:	200d883a 	mov	r6,r4
   12eac:	180b883a 	mov	r5,r3
   12eb0:	e13ffc17 	ldw	r4,-16(fp)
   12eb4:	00135d00 	call	135d0 <OS_FlagBlock>
   12eb8:	e0bfe517 	ldw	r2,-108(fp)
   12ebc:	e0bfed15 	stw	r2,-76(fp)
   12ec0:	e0bfed17 	ldw	r2,-76(fp)
   12ec4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12ec8:	00003706 	br	12fa8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   12ecc:	e0bffc17 	ldw	r2,-16(fp)
   12ed0:	1080020b 	ldhu	r2,8(r2)
   12ed4:	0084303a 	nor	r2,zero,r2
   12ed8:	1007883a 	mov	r3,r2
   12edc:	e0bffd0b 	ldhu	r2,-12(fp)
   12ee0:	1884703a 	and	r2,r3,r2
   12ee4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   12ee8:	e0bfe80b 	ldhu	r2,-96(fp)
   12eec:	10001526 	beq	r2,zero,12f44 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12ef0:	e0bfe403 	ldbu	r2,-112(fp)
   12ef4:	10800058 	cmpnei	r2,r2,1
   12ef8:	1000071e 	bne	r2,zero,12f18 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   12efc:	e0bffc17 	ldw	r2,-16(fp)
   12f00:	10c0020b 	ldhu	r3,8(r2)
   12f04:	e0bfe80b 	ldhu	r2,-96(fp)
   12f08:	1884b03a 	or	r2,r3,r2
   12f0c:	1007883a 	mov	r3,r2
   12f10:	e0bffc17 	ldw	r2,-16(fp)
   12f14:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12f18:	d0a82717 	ldw	r2,-24420(gp)
   12f1c:	e0ffe80b 	ldhu	r3,-96(fp)
   12f20:	10c00b0d 	sth	r3,44(r2)
   12f24:	e0bfe517 	ldw	r2,-108(fp)
   12f28:	e0bfee15 	stw	r2,-72(fp)
   12f2c:	e0bfee17 	ldw	r2,-72(fp)
   12f30:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12f34:	e0800217 	ldw	r2,8(fp)
   12f38:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12f3c:	e0bfe80b 	ldhu	r2,-96(fp)
   12f40:	00007006 	br	13104 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12f44:	e13ffd0b 	ldhu	r4,-12(fp)
   12f48:	e17ffe03 	ldbu	r5,-8(fp)
   12f4c:	e0bfff0b 	ldhu	r2,-4(fp)
   12f50:	e0fff704 	addi	r3,fp,-36
   12f54:	d8800015 	stw	r2,0(sp)
   12f58:	280f883a 	mov	r7,r5
   12f5c:	200d883a 	mov	r6,r4
   12f60:	180b883a 	mov	r5,r3
   12f64:	e13ffc17 	ldw	r4,-16(fp)
   12f68:	00135d00 	call	135d0 <OS_FlagBlock>
   12f6c:	e0bfe517 	ldw	r2,-108(fp)
   12f70:	e0bfef15 	stw	r2,-68(fp)
   12f74:	e0bfef17 	ldw	r2,-68(fp)
   12f78:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12f7c:	00000a06 	br	12fa8 <OSFlagPend+0x448>
   12f80:	e0bfe517 	ldw	r2,-108(fp)
   12f84:	e0bff015 	stw	r2,-64(fp)
   12f88:	e0bff017 	ldw	r2,-64(fp)
   12f8c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   12f90:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   12f94:	e0800217 	ldw	r2,8(fp)
   12f98:	00c01bc4 	movi	r3,111
   12f9c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   12fa0:	e0bfe80b 	ldhu	r2,-96(fp)
   12fa4:	00005706 	br	13104 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   12fa8:	0011a200 	call	11a20 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fac:	0005303a 	rdctl	r2,status
   12fb0:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12fb4:	e0fff117 	ldw	r3,-60(fp)
   12fb8:	00bfff84 	movi	r2,-2
   12fbc:	1884703a 	and	r2,r3,r2
   12fc0:	1001703a 	wrctl	status,r2
  
  return context;
   12fc4:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   12fc8:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   12fcc:	d0a82717 	ldw	r2,-24420(gp)
   12fd0:	10800c43 	ldbu	r2,49(r2)
   12fd4:	10803fcc 	andi	r2,r2,255
   12fd8:	10001c26 	beq	r2,zero,1304c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   12fdc:	d0a82717 	ldw	r2,-24420(gp)
   12fe0:	10800c43 	ldbu	r2,49(r2)
   12fe4:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12fe8:	d0a82717 	ldw	r2,-24420(gp)
   12fec:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   12ff0:	e0bff704 	addi	r2,fp,-36
   12ff4:	1009883a 	mov	r4,r2
   12ff8:	00139040 	call	13904 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   12ffc:	d0a82717 	ldw	r2,-24420(gp)
   13000:	10000c05 	stb	zero,48(r2)
   13004:	e0bfe517 	ldw	r2,-108(fp)
   13008:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1300c:	e0bff217 	ldw	r2,-56(fp)
   13010:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   13014:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   13018:	e0bff303 	ldbu	r2,-52(fp)
   1301c:	108000a0 	cmpeqi	r2,r2,2
   13020:	10000426 	beq	r2,zero,13034 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   13024:	e0800217 	ldw	r2,8(fp)
   13028:	00c00384 	movi	r3,14
   1302c:	10c00005 	stb	r3,0(r2)
                 break;
   13030:	00000406 	br	13044 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   13034:	e0800217 	ldw	r2,8(fp)
   13038:	00c00284 	movi	r3,10
   1303c:	10c00005 	stb	r3,0(r2)
                 break;
   13040:	0001883a 	nop
        }
        return (flags_rdy);
   13044:	e0bfe80b 	ldhu	r2,-96(fp)
   13048:	00002e06 	br	13104 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   1304c:	d0a82717 	ldw	r2,-24420(gp)
   13050:	10800b0b 	ldhu	r2,44(r2)
   13054:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   13058:	e0bfe403 	ldbu	r2,-112(fp)
   1305c:	10800058 	cmpnei	r2,r2,1
   13060:	1000211e 	bne	r2,zero,130e8 <OSFlagPend+0x588>
        switch (wait_type) {
   13064:	e0bffe03 	ldbu	r2,-8(fp)
   13068:	10001616 	blt	r2,zero,130c4 <OSFlagPend+0x564>
   1306c:	10c00090 	cmplti	r3,r2,2
   13070:	18000c1e 	bne	r3,zero,130a4 <OSFlagPend+0x544>
   13074:	10800108 	cmpgei	r2,r2,4
   13078:	1000121e 	bne	r2,zero,130c4 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   1307c:	e0bffc17 	ldw	r2,-16(fp)
   13080:	1080020b 	ldhu	r2,8(r2)
   13084:	1007883a 	mov	r3,r2
   13088:	e0bfe80b 	ldhu	r2,-96(fp)
   1308c:	0084303a 	nor	r2,zero,r2
   13090:	1884703a 	and	r2,r3,r2
   13094:	1007883a 	mov	r3,r2
   13098:	e0bffc17 	ldw	r2,-16(fp)
   1309c:	10c0020d 	sth	r3,8(r2)
                 break;
   130a0:	00001106 	br	130e8 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   130a4:	e0bffc17 	ldw	r2,-16(fp)
   130a8:	10c0020b 	ldhu	r3,8(r2)
   130ac:	e0bfe80b 	ldhu	r2,-96(fp)
   130b0:	1884b03a 	or	r2,r3,r2
   130b4:	1007883a 	mov	r3,r2
   130b8:	e0bffc17 	ldw	r2,-16(fp)
   130bc:	10c0020d 	sth	r3,8(r2)
                 break;
   130c0:	00000906 	br	130e8 <OSFlagPend+0x588>
   130c4:	e0bfe517 	ldw	r2,-108(fp)
   130c8:	e0bff415 	stw	r2,-48(fp)
   130cc:	e0bff417 	ldw	r2,-48(fp)
   130d0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   130d4:	e0800217 	ldw	r2,8(fp)
   130d8:	00c01bc4 	movi	r3,111
   130dc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   130e0:	0005883a 	mov	r2,zero
   130e4:	00000706 	br	13104 <OSFlagPend+0x5a4>
   130e8:	e0bfe517 	ldw	r2,-108(fp)
   130ec:	e0bff515 	stw	r2,-44(fp)
   130f0:	e0bff517 	ldw	r2,-44(fp)
   130f4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   130f8:	e0800217 	ldw	r2,8(fp)
   130fc:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   13100:	e0bfe80b 	ldhu	r2,-96(fp)
}
   13104:	e037883a 	mov	sp,fp
   13108:	dfc00117 	ldw	ra,4(sp)
   1310c:	df000017 	ldw	fp,0(sp)
   13110:	dec00204 	addi	sp,sp,8
   13114:	f800283a 	ret

00013118 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   13118:	defffb04 	addi	sp,sp,-20
   1311c:	df000415 	stw	fp,16(sp)
   13120:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13124:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13128:	0005303a 	rdctl	r2,status
   1312c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13130:	e0fffe17 	ldw	r3,-8(fp)
   13134:	00bfff84 	movi	r2,-2
   13138:	1884703a 	and	r2,r3,r2
   1313c:	1001703a 	wrctl	status,r2
  
  return context;
   13140:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   13144:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   13148:	d0a82717 	ldw	r2,-24420(gp)
   1314c:	10800b0b 	ldhu	r2,44(r2)
   13150:	e0bffd0d 	sth	r2,-12(fp)
   13154:	e0bffc17 	ldw	r2,-16(fp)
   13158:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1315c:	e0bfff17 	ldw	r2,-4(fp)
   13160:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   13164:	e0bffd0b 	ldhu	r2,-12(fp)
}
   13168:	e037883a 	mov	sp,fp
   1316c:	df000017 	ldw	fp,0(sp)
   13170:	dec00104 	addi	sp,sp,4
   13174:	f800283a 	ret

00013178 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   13178:	deffef04 	addi	sp,sp,-68
   1317c:	dfc01015 	stw	ra,64(sp)
   13180:	df000f15 	stw	fp,60(sp)
   13184:	df000f04 	addi	fp,sp,60
   13188:	e13ffc15 	stw	r4,-16(fp)
   1318c:	2807883a 	mov	r3,r5
   13190:	3005883a 	mov	r2,r6
   13194:	e1ffff15 	stw	r7,-4(fp)
   13198:	e0fffd0d 	sth	r3,-12(fp)
   1319c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   131a0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   131a4:	e0bfff17 	ldw	r2,-4(fp)
   131a8:	1000021e 	bne	r2,zero,131b4 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   131ac:	0005883a 	mov	r2,zero
   131b0:	0000d106 	br	134f8 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   131b4:	e0bffc17 	ldw	r2,-16(fp)
   131b8:	1000051e 	bne	r2,zero,131d0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   131bc:	e0bfff17 	ldw	r2,-4(fp)
   131c0:	00c01b84 	movi	r3,110
   131c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   131c8:	0005883a 	mov	r2,zero
   131cc:	0000ca06 	br	134f8 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   131d0:	e0bffc17 	ldw	r2,-16(fp)
   131d4:	10800003 	ldbu	r2,0(r2)
   131d8:	10803fcc 	andi	r2,r2,255
   131dc:	10800160 	cmpeqi	r2,r2,5
   131e0:	1000051e 	bne	r2,zero,131f8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   131e4:	e0bfff17 	ldw	r2,-4(fp)
   131e8:	00c00044 	movi	r3,1
   131ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   131f0:	0005883a 	mov	r2,zero
   131f4:	0000c006 	br	134f8 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   131f8:	0005303a 	rdctl	r2,status
   131fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13200:	e0fffb17 	ldw	r3,-20(fp)
   13204:	00bfff84 	movi	r2,-2
   13208:	1884703a 	and	r2,r3,r2
   1320c:	1001703a 	wrctl	status,r2
  
  return context;
   13210:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   13214:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   13218:	e0bffe03 	ldbu	r2,-8(fp)
   1321c:	10000326 	beq	r2,zero,1322c <OSFlagPost+0xb4>
   13220:	10800060 	cmpeqi	r2,r2,1
   13224:	10000b1e 	bne	r2,zero,13254 <OSFlagPost+0xdc>
   13228:	00001206 	br	13274 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   1322c:	e0bffc17 	ldw	r2,-16(fp)
   13230:	1080020b 	ldhu	r2,8(r2)
   13234:	1007883a 	mov	r3,r2
   13238:	e0bffd0b 	ldhu	r2,-12(fp)
   1323c:	0084303a 	nor	r2,zero,r2
   13240:	1884703a 	and	r2,r3,r2
   13244:	1007883a 	mov	r3,r2
   13248:	e0bffc17 	ldw	r2,-16(fp)
   1324c:	10c0020d 	sth	r3,8(r2)
             break;
   13250:	00001106 	br	13298 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   13254:	e0bffc17 	ldw	r2,-16(fp)
   13258:	10c0020b 	ldhu	r3,8(r2)
   1325c:	e0bffd0b 	ldhu	r2,-12(fp)
   13260:	1884b03a 	or	r2,r3,r2
   13264:	1007883a 	mov	r3,r2
   13268:	e0bffc17 	ldw	r2,-16(fp)
   1326c:	10c0020d 	sth	r3,8(r2)
             break;
   13270:	00000906 	br	13298 <OSFlagPost+0x120>
   13274:	e0bff317 	ldw	r2,-52(fp)
   13278:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1327c:	e0bff417 	ldw	r2,-48(fp)
   13280:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   13284:	e0bfff17 	ldw	r2,-4(fp)
   13288:	00c01c44 	movi	r3,113
   1328c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   13290:	0005883a 	mov	r2,zero
   13294:	00009806 	br	134f8 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   13298:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1329c:	e0bffc17 	ldw	r2,-16(fp)
   132a0:	10800117 	ldw	r2,4(r2)
   132a4:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   132a8:	00007706 	br	13488 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   132ac:	e0bff117 	ldw	r2,-60(fp)
   132b0:	10800483 	ldbu	r2,18(r2)
   132b4:	10803fcc 	andi	r2,r2,255
   132b8:	10c00060 	cmpeqi	r3,r2,1
   132bc:	18004a1e 	bne	r3,zero,133e8 <OSFlagPost+0x270>
   132c0:	10c00088 	cmpgei	r3,r2,2
   132c4:	1800021e 	bne	r3,zero,132d0 <OSFlagPost+0x158>
   132c8:	10002f26 	beq	r2,zero,13388 <OSFlagPost+0x210>
   132cc:	00005b06 	br	1343c <OSFlagPost+0x2c4>
   132d0:	10c000a0 	cmpeqi	r3,r2,2
   132d4:	1800031e 	bne	r3,zero,132e4 <OSFlagPost+0x16c>
   132d8:	108000e0 	cmpeqi	r2,r2,3
   132dc:	1000171e 	bne	r2,zero,1333c <OSFlagPost+0x1c4>
   132e0:	00005606 	br	1343c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   132e4:	e0bffc17 	ldw	r2,-16(fp)
   132e8:	10c0020b 	ldhu	r3,8(r2)
   132ec:	e0bff117 	ldw	r2,-60(fp)
   132f0:	1080040b 	ldhu	r2,16(r2)
   132f4:	1884703a 	and	r2,r3,r2
   132f8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   132fc:	e0bff117 	ldw	r2,-60(fp)
   13300:	1080040b 	ldhu	r2,16(r2)
   13304:	10ffffcc 	andi	r3,r2,65535
   13308:	e0bff60b 	ldhu	r2,-40(fp)
   1330c:	1880541e 	bne	r3,r2,13460 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13310:	e0bff60b 	ldhu	r2,-40(fp)
   13314:	100b883a 	mov	r5,r2
   13318:	e13ff117 	ldw	r4,-60(fp)
   1331c:	00138100 	call	13810 <OS_FlagTaskRdy>
   13320:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   13324:	e0bff683 	ldbu	r2,-38(fp)
   13328:	10800058 	cmpnei	r2,r2,1
   1332c:	10004c1e 	bne	r2,zero,13460 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13330:	00800044 	movi	r2,1
   13334:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13338:	00004906 	br	13460 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1333c:	e0bffc17 	ldw	r2,-16(fp)
   13340:	10c0020b 	ldhu	r3,8(r2)
   13344:	e0bff117 	ldw	r2,-60(fp)
   13348:	1080040b 	ldhu	r2,16(r2)
   1334c:	1884703a 	and	r2,r3,r2
   13350:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   13354:	e0bff60b 	ldhu	r2,-40(fp)
   13358:	10004326 	beq	r2,zero,13468 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1335c:	e0bff60b 	ldhu	r2,-40(fp)
   13360:	100b883a 	mov	r5,r2
   13364:	e13ff117 	ldw	r4,-60(fp)
   13368:	00138100 	call	13810 <OS_FlagTaskRdy>
   1336c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   13370:	e0bff683 	ldbu	r2,-38(fp)
   13374:	10800058 	cmpnei	r2,r2,1
   13378:	10003b1e 	bne	r2,zero,13468 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1337c:	00800044 	movi	r2,1
   13380:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13384:	00003806 	br	13468 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13388:	e0bffc17 	ldw	r2,-16(fp)
   1338c:	1080020b 	ldhu	r2,8(r2)
   13390:	0084303a 	nor	r2,zero,r2
   13394:	1007883a 	mov	r3,r2
   13398:	e0bff117 	ldw	r2,-60(fp)
   1339c:	1080040b 	ldhu	r2,16(r2)
   133a0:	1884703a 	and	r2,r3,r2
   133a4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   133a8:	e0bff117 	ldw	r2,-60(fp)
   133ac:	1080040b 	ldhu	r2,16(r2)
   133b0:	10ffffcc 	andi	r3,r2,65535
   133b4:	e0bff60b 	ldhu	r2,-40(fp)
   133b8:	18802d1e 	bne	r3,r2,13470 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   133bc:	e0bff60b 	ldhu	r2,-40(fp)
   133c0:	100b883a 	mov	r5,r2
   133c4:	e13ff117 	ldw	r4,-60(fp)
   133c8:	00138100 	call	13810 <OS_FlagTaskRdy>
   133cc:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   133d0:	e0bff683 	ldbu	r2,-38(fp)
   133d4:	10800058 	cmpnei	r2,r2,1
   133d8:	1000251e 	bne	r2,zero,13470 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   133dc:	00800044 	movi	r2,1
   133e0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   133e4:	00002206 	br	13470 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   133e8:	e0bffc17 	ldw	r2,-16(fp)
   133ec:	1080020b 	ldhu	r2,8(r2)
   133f0:	0084303a 	nor	r2,zero,r2
   133f4:	1007883a 	mov	r3,r2
   133f8:	e0bff117 	ldw	r2,-60(fp)
   133fc:	1080040b 	ldhu	r2,16(r2)
   13400:	1884703a 	and	r2,r3,r2
   13404:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   13408:	e0bff60b 	ldhu	r2,-40(fp)
   1340c:	10001a26 	beq	r2,zero,13478 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13410:	e0bff60b 	ldhu	r2,-40(fp)
   13414:	100b883a 	mov	r5,r2
   13418:	e13ff117 	ldw	r4,-60(fp)
   1341c:	00138100 	call	13810 <OS_FlagTaskRdy>
   13420:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   13424:	e0bff683 	ldbu	r2,-38(fp)
   13428:	10800058 	cmpnei	r2,r2,1
   1342c:	1000121e 	bne	r2,zero,13478 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13430:	00800044 	movi	r2,1
   13434:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13438:	00000f06 	br	13478 <OSFlagPost+0x300>
   1343c:	e0bff317 	ldw	r2,-52(fp)
   13440:	e0bff515 	stw	r2,-44(fp)
   13444:	e0bff517 	ldw	r2,-44(fp)
   13448:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1344c:	e0bfff17 	ldw	r2,-4(fp)
   13450:	00c01bc4 	movi	r3,111
   13454:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   13458:	0005883a 	mov	r2,zero
   1345c:	00002606 	br	134f8 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   13460:	0001883a 	nop
   13464:	00000506 	br	1347c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   13468:	0001883a 	nop
   1346c:	00000306 	br	1347c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   13470:	0001883a 	nop
   13474:	00000106 	br	1347c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   13478:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   1347c:	e0bff117 	ldw	r2,-60(fp)
   13480:	10800017 	ldw	r2,0(r2)
   13484:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   13488:	e0bff117 	ldw	r2,-60(fp)
   1348c:	103f871e 	bne	r2,zero,132ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70132ac>
   13490:	e0bff317 	ldw	r2,-52(fp)
   13494:	e0bff715 	stw	r2,-36(fp)
   13498:	e0bff717 	ldw	r2,-36(fp)
   1349c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   134a0:	e0bff203 	ldbu	r2,-56(fp)
   134a4:	10800058 	cmpnei	r2,r2,1
   134a8:	1000011e 	bne	r2,zero,134b0 <OSFlagPost+0x338>
        OS_Sched();
   134ac:	0011a200 	call	11a20 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134b0:	0005303a 	rdctl	r2,status
   134b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134b8:	e0fffa17 	ldw	r3,-24(fp)
   134bc:	00bfff84 	movi	r2,-2
   134c0:	1884703a 	and	r2,r3,r2
   134c4:	1001703a 	wrctl	status,r2
  
  return context;
   134c8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   134cc:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   134d0:	e0bffc17 	ldw	r2,-16(fp)
   134d4:	1080020b 	ldhu	r2,8(r2)
   134d8:	e0bff90d 	sth	r2,-28(fp)
   134dc:	e0bff317 	ldw	r2,-52(fp)
   134e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   134e4:	e0bff817 	ldw	r2,-32(fp)
   134e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   134ec:	e0bfff17 	ldw	r2,-4(fp)
   134f0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   134f4:	e0bff90b 	ldhu	r2,-28(fp)
}
   134f8:	e037883a 	mov	sp,fp
   134fc:	dfc00117 	ldw	ra,4(sp)
   13500:	df000017 	ldw	fp,0(sp)
   13504:	dec00204 	addi	sp,sp,8
   13508:	f800283a 	ret

0001350c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   1350c:	defff904 	addi	sp,sp,-28
   13510:	df000615 	stw	fp,24(sp)
   13514:	df000604 	addi	fp,sp,24
   13518:	e13ffe15 	stw	r4,-8(fp)
   1351c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   13520:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   13524:	e0bfff17 	ldw	r2,-4(fp)
   13528:	1000021e 	bne	r2,zero,13534 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   1352c:	0005883a 	mov	r2,zero
   13530:	00002306 	br	135c0 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   13534:	e0bffe17 	ldw	r2,-8(fp)
   13538:	1000051e 	bne	r2,zero,13550 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1353c:	e0bfff17 	ldw	r2,-4(fp)
   13540:	00c01b84 	movi	r3,110
   13544:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13548:	0005883a 	mov	r2,zero
   1354c:	00001c06 	br	135c0 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   13550:	e0bffe17 	ldw	r2,-8(fp)
   13554:	10800003 	ldbu	r2,0(r2)
   13558:	10803fcc 	andi	r2,r2,255
   1355c:	10800160 	cmpeqi	r2,r2,5
   13560:	1000051e 	bne	r2,zero,13578 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   13564:	e0bfff17 	ldw	r2,-4(fp)
   13568:	00c00044 	movi	r3,1
   1356c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13570:	0005883a 	mov	r2,zero
   13574:	00001206 	br	135c0 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13578:	0005303a 	rdctl	r2,status
   1357c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13580:	e0fffc17 	ldw	r3,-16(fp)
   13584:	00bfff84 	movi	r2,-2
   13588:	1884703a 	and	r2,r3,r2
   1358c:	1001703a 	wrctl	status,r2
  
  return context;
   13590:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13594:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   13598:	e0bffe17 	ldw	r2,-8(fp)
   1359c:	1080020b 	ldhu	r2,8(r2)
   135a0:	e0bffb0d 	sth	r2,-20(fp)
   135a4:	e0bffa17 	ldw	r2,-24(fp)
   135a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   135ac:	e0bffd17 	ldw	r2,-12(fp)
   135b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   135b4:	e0bfff17 	ldw	r2,-4(fp)
   135b8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   135bc:	e0bffb0b 	ldhu	r2,-20(fp)
}
   135c0:	e037883a 	mov	sp,fp
   135c4:	df000017 	ldw	fp,0(sp)
   135c8:	dec00104 	addi	sp,sp,4
   135cc:	f800283a 	ret

000135d0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   135d0:	defff804 	addi	sp,sp,-32
   135d4:	df000715 	stw	fp,28(sp)
   135d8:	df000704 	addi	fp,sp,28
   135dc:	e13ffb15 	stw	r4,-20(fp)
   135e0:	e17ffc15 	stw	r5,-16(fp)
   135e4:	3009883a 	mov	r4,r6
   135e8:	3807883a 	mov	r3,r7
   135ec:	e0800117 	ldw	r2,4(fp)
   135f0:	e13ffd0d 	sth	r4,-12(fp)
   135f4:	e0fffe05 	stb	r3,-8(fp)
   135f8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   135fc:	d0a82717 	ldw	r2,-24420(gp)
   13600:	d0e82717 	ldw	r3,-24420(gp)
   13604:	18c00c03 	ldbu	r3,48(r3)
   13608:	18c00814 	ori	r3,r3,32
   1360c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   13610:	d0a82717 	ldw	r2,-24420(gp)
   13614:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   13618:	d0a82717 	ldw	r2,-24420(gp)
   1361c:	e0ffff0b 	ldhu	r3,-4(fp)
   13620:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   13624:	d0a82717 	ldw	r2,-24420(gp)
   13628:	e0fffc17 	ldw	r3,-16(fp)
   1362c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   13630:	e0bffc17 	ldw	r2,-16(fp)
   13634:	e0fffd0b 	ldhu	r3,-12(fp)
   13638:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   1363c:	e0bffc17 	ldw	r2,-16(fp)
   13640:	e0fffe03 	ldbu	r3,-8(fp)
   13644:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   13648:	d0e82717 	ldw	r3,-24420(gp)
   1364c:	e0bffc17 	ldw	r2,-16(fp)
   13650:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   13654:	e0bffb17 	ldw	r2,-20(fp)
   13658:	10c00117 	ldw	r3,4(r2)
   1365c:	e0bffc17 	ldw	r2,-16(fp)
   13660:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   13664:	e0bffc17 	ldw	r2,-16(fp)
   13668:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   1366c:	e0bffc17 	ldw	r2,-16(fp)
   13670:	e0fffb17 	ldw	r3,-20(fp)
   13674:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   13678:	e0bffb17 	ldw	r2,-20(fp)
   1367c:	10800117 	ldw	r2,4(r2)
   13680:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   13684:	e0bff917 	ldw	r2,-28(fp)
   13688:	10000326 	beq	r2,zero,13698 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   1368c:	e0bff917 	ldw	r2,-28(fp)
   13690:	e0fffc17 	ldw	r3,-16(fp)
   13694:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   13698:	e0bffb17 	ldw	r2,-20(fp)
   1369c:	e0fffc17 	ldw	r3,-16(fp)
   136a0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   136a4:	d0a82717 	ldw	r2,-24420(gp)
   136a8:	10800d03 	ldbu	r2,52(r2)
   136ac:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   136b0:	e0fffa03 	ldbu	r3,-24(fp)
   136b4:	e13ffa03 	ldbu	r4,-24(fp)
   136b8:	d0a82444 	addi	r2,gp,-24431
   136bc:	2085883a 	add	r2,r4,r2
   136c0:	10800003 	ldbu	r2,0(r2)
   136c4:	1009883a 	mov	r4,r2
   136c8:	d0a82717 	ldw	r2,-24420(gp)
   136cc:	10800d43 	ldbu	r2,53(r2)
   136d0:	0084303a 	nor	r2,zero,r2
   136d4:	2084703a 	and	r2,r4,r2
   136d8:	1009883a 	mov	r4,r2
   136dc:	d0a82444 	addi	r2,gp,-24431
   136e0:	1885883a 	add	r2,r3,r2
   136e4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   136e8:	e0fffa03 	ldbu	r3,-24(fp)
   136ec:	d0a82444 	addi	r2,gp,-24431
   136f0:	1885883a 	add	r2,r3,r2
   136f4:	10800003 	ldbu	r2,0(r2)
   136f8:	10803fcc 	andi	r2,r2,255
   136fc:	1000071e 	bne	r2,zero,1371c <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   13700:	d0a82717 	ldw	r2,-24420(gp)
   13704:	10800d83 	ldbu	r2,54(r2)
   13708:	0084303a 	nor	r2,zero,r2
   1370c:	1007883a 	mov	r3,r2
   13710:	d0a82403 	ldbu	r2,-24432(gp)
   13714:	1884703a 	and	r2,r3,r2
   13718:	d0a82405 	stb	r2,-24432(gp)
    }
}
   1371c:	0001883a 	nop
   13720:	e037883a 	mov	sp,fp
   13724:	df000017 	ldw	fp,0(sp)
   13728:	dec00104 	addi	sp,sp,4
   1372c:	f800283a 	ret

00013730 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   13730:	defffb04 	addi	sp,sp,-20
   13734:	dfc00415 	stw	ra,16(sp)
   13738:	df000315 	stw	fp,12(sp)
   1373c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   13740:	0140dc04 	movi	r5,880
   13744:	010000b4 	movhi	r4,2
   13748:	213f7104 	addi	r4,r4,-572
   1374c:	00119640 	call	11964 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   13750:	008000b4 	movhi	r2,2
   13754:	10bf7104 	addi	r2,r2,-572
   13758:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   1375c:	008000b4 	movhi	r2,2
   13760:	10bf7c04 	addi	r2,r2,-528
   13764:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   13768:	e03ffd0d 	sth	zero,-12(fp)
   1376c:	00001306 	br	137bc <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   13770:	e0bffe17 	ldw	r2,-8(fp)
   13774:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   13778:	e0bffe17 	ldw	r2,-8(fp)
   1377c:	e0ffff17 	ldw	r3,-4(fp)
   13780:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   13784:	e0bffe17 	ldw	r2,-8(fp)
   13788:	00c00fc4 	movi	r3,63
   1378c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   13790:	e0bffe17 	ldw	r2,-8(fp)
   13794:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   13798:	e0bffe17 	ldw	r2,-8(fp)
   1379c:	10800b04 	addi	r2,r2,44
   137a0:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   137a4:	e0bfff17 	ldw	r2,-4(fp)
   137a8:	10800b04 	addi	r2,r2,44
   137ac:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   137b0:	e0bffd0b 	ldhu	r2,-12(fp)
   137b4:	10800044 	addi	r2,r2,1
   137b8:	e0bffd0d 	sth	r2,-12(fp)
   137bc:	e0bffd0b 	ldhu	r2,-12(fp)
   137c0:	108004f0 	cmpltui	r2,r2,19
   137c4:	103fea1e 	bne	r2,zero,13770 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013770>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   137c8:	e0bffe17 	ldw	r2,-8(fp)
   137cc:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   137d0:	e0bffe17 	ldw	r2,-8(fp)
   137d4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   137d8:	e0bffe17 	ldw	r2,-8(fp)
   137dc:	00c00fc4 	movi	r3,63
   137e0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   137e4:	e0bffe17 	ldw	r2,-8(fp)
   137e8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   137ec:	008000b4 	movhi	r2,2
   137f0:	10bf7104 	addi	r2,r2,-572
   137f4:	d0a82915 	stw	r2,-24412(gp)
#endif
}
   137f8:	0001883a 	nop
   137fc:	e037883a 	mov	sp,fp
   13800:	dfc00117 	ldw	ra,4(sp)
   13804:	df000017 	ldw	fp,0(sp)
   13808:	dec00204 	addi	sp,sp,8
   1380c:	f800283a 	ret

00013810 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   13810:	defffa04 	addi	sp,sp,-24
   13814:	dfc00515 	stw	ra,20(sp)
   13818:	df000415 	stw	fp,16(sp)
   1381c:	df000404 	addi	fp,sp,16
   13820:	e13ffe15 	stw	r4,-8(fp)
   13824:	2805883a 	mov	r2,r5
   13828:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   1382c:	e0bffe17 	ldw	r2,-8(fp)
   13830:	10800217 	ldw	r2,8(r2)
   13834:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   13838:	e0bffd17 	ldw	r2,-12(fp)
   1383c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   13840:	e0bffd17 	ldw	r2,-12(fp)
   13844:	e0ffff0b 	ldhu	r3,-4(fp)
   13848:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   1384c:	e0bffd17 	ldw	r2,-12(fp)
   13850:	10c00c03 	ldbu	r3,48(r2)
   13854:	00bff7c4 	movi	r2,-33
   13858:	1884703a 	and	r2,r3,r2
   1385c:	1007883a 	mov	r3,r2
   13860:	e0bffd17 	ldw	r2,-12(fp)
   13864:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   13868:	e0bffd17 	ldw	r2,-12(fp)
   1386c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   13870:	e0bffd17 	ldw	r2,-12(fp)
   13874:	10800c03 	ldbu	r2,48(r2)
   13878:	10803fcc 	andi	r2,r2,255
   1387c:	1000181e 	bne	r2,zero,138e0 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   13880:	e0bffd17 	ldw	r2,-12(fp)
   13884:	10c00d83 	ldbu	r3,54(r2)
   13888:	d0a82403 	ldbu	r2,-24432(gp)
   1388c:	1884b03a 	or	r2,r3,r2
   13890:	d0a82405 	stb	r2,-24432(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   13894:	e0bffd17 	ldw	r2,-12(fp)
   13898:	10800d03 	ldbu	r2,52(r2)
   1389c:	10c03fcc 	andi	r3,r2,255
   138a0:	e0bffd17 	ldw	r2,-12(fp)
   138a4:	10800d03 	ldbu	r2,52(r2)
   138a8:	11003fcc 	andi	r4,r2,255
   138ac:	d0a82444 	addi	r2,gp,-24431
   138b0:	2085883a 	add	r2,r4,r2
   138b4:	11000003 	ldbu	r4,0(r2)
   138b8:	e0bffd17 	ldw	r2,-12(fp)
   138bc:	10800d43 	ldbu	r2,53(r2)
   138c0:	2084b03a 	or	r2,r4,r2
   138c4:	1009883a 	mov	r4,r2
   138c8:	d0a82444 	addi	r2,gp,-24431
   138cc:	1885883a 	add	r2,r3,r2
   138d0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   138d4:	00800044 	movi	r2,1
   138d8:	e0bffc05 	stb	r2,-16(fp)
   138dc:	00000106 	br	138e4 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   138e0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   138e4:	e13ffe17 	ldw	r4,-8(fp)
   138e8:	00139040 	call	13904 <OS_FlagUnlink>
    return (sched);
   138ec:	e0bffc03 	ldbu	r2,-16(fp)
}
   138f0:	e037883a 	mov	sp,fp
   138f4:	dfc00117 	ldw	ra,4(sp)
   138f8:	df000017 	ldw	fp,0(sp)
   138fc:	dec00204 	addi	sp,sp,8
   13900:	f800283a 	ret

00013904 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   13904:	defffa04 	addi	sp,sp,-24
   13908:	df000515 	stw	fp,20(sp)
   1390c:	df000504 	addi	fp,sp,20
   13910:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   13914:	e0bfff17 	ldw	r2,-4(fp)
   13918:	10800117 	ldw	r2,4(r2)
   1391c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   13920:	e0bfff17 	ldw	r2,-4(fp)
   13924:	10800017 	ldw	r2,0(r2)
   13928:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   1392c:	e0bffb17 	ldw	r2,-20(fp)
   13930:	10000b1e 	bne	r2,zero,13960 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   13934:	e0bfff17 	ldw	r2,-4(fp)
   13938:	10800317 	ldw	r2,12(r2)
   1393c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   13940:	e0bffd17 	ldw	r2,-12(fp)
   13944:	e0fffc17 	ldw	r3,-16(fp)
   13948:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   1394c:	e0bffc17 	ldw	r2,-16(fp)
   13950:	10000b26 	beq	r2,zero,13980 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   13954:	e0bffc17 	ldw	r2,-16(fp)
   13958:	10000115 	stw	zero,4(r2)
   1395c:	00000806 	br	13980 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   13960:	e0bffb17 	ldw	r2,-20(fp)
   13964:	e0fffc17 	ldw	r3,-16(fp)
   13968:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   1396c:	e0bffc17 	ldw	r2,-16(fp)
   13970:	10000326 	beq	r2,zero,13980 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   13974:	e0bffc17 	ldw	r2,-16(fp)
   13978:	e0fffb17 	ldw	r3,-20(fp)
   1397c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   13980:	e0bfff17 	ldw	r2,-4(fp)
   13984:	10800217 	ldw	r2,8(r2)
   13988:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   1398c:	e0bffe17 	ldw	r2,-8(fp)
   13990:	10000a15 	stw	zero,40(r2)
#endif
}
   13994:	0001883a 	nop
   13998:	e037883a 	mov	sp,fp
   1399c:	df000017 	ldw	fp,0(sp)
   139a0:	dec00104 	addi	sp,sp,4
   139a4:	f800283a 	ret

000139a8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   139a8:	defff404 	addi	sp,sp,-48
   139ac:	df000b15 	stw	fp,44(sp)
   139b0:	df000b04 	addi	fp,sp,44
   139b4:	e13ffc15 	stw	r4,-16(fp)
   139b8:	e17ffd15 	stw	r5,-12(fp)
   139bc:	e1bffe15 	stw	r6,-8(fp)
   139c0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   139c4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   139c8:	e0bfff17 	ldw	r2,-4(fp)
   139cc:	1000021e 	bne	r2,zero,139d8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   139d0:	0005883a 	mov	r2,zero
   139d4:	00006506 	br	13b6c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   139d8:	e0bffc17 	ldw	r2,-16(fp)
   139dc:	1000051e 	bne	r2,zero,139f4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   139e0:	e0bfff17 	ldw	r2,-4(fp)
   139e4:	00c01884 	movi	r3,98
   139e8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   139ec:	0005883a 	mov	r2,zero
   139f0:	00005e06 	br	13b6c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   139f4:	e0bffc17 	ldw	r2,-16(fp)
   139f8:	108000cc 	andi	r2,r2,3
   139fc:	10000526 	beq	r2,zero,13a14 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   13a00:	e0bfff17 	ldw	r2,-4(fp)
   13a04:	00c01884 	movi	r3,98
   13a08:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   13a0c:	0005883a 	mov	r2,zero
   13a10:	00005606 	br	13b6c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   13a14:	e0bffd17 	ldw	r2,-12(fp)
   13a18:	108000a8 	cmpgeui	r2,r2,2
   13a1c:	1000051e 	bne	r2,zero,13a34 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   13a20:	e0bfff17 	ldw	r2,-4(fp)
   13a24:	00c016c4 	movi	r3,91
   13a28:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   13a2c:	0005883a 	mov	r2,zero
   13a30:	00004e06 	br	13b6c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   13a34:	e0bffe17 	ldw	r2,-8(fp)
   13a38:	10800128 	cmpgeui	r2,r2,4
   13a3c:	1000051e 	bne	r2,zero,13a54 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   13a40:	e0bfff17 	ldw	r2,-4(fp)
   13a44:	00c01704 	movi	r3,92
   13a48:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   13a4c:	0005883a 	mov	r2,zero
   13a50:	00004606 	br	13b6c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a54:	0005303a 	rdctl	r2,status
   13a58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a5c:	e0fffb17 	ldw	r3,-20(fp)
   13a60:	00bfff84 	movi	r2,-2
   13a64:	1884703a 	and	r2,r3,r2
   13a68:	1001703a 	wrctl	status,r2
  
  return context;
   13a6c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13a70:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   13a74:	d0a82117 	ldw	r2,-24444(gp)
   13a78:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   13a7c:	d0a82117 	ldw	r2,-24444(gp)
   13a80:	10000326 	beq	r2,zero,13a90 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   13a84:	d0a82117 	ldw	r2,-24444(gp)
   13a88:	10800117 	ldw	r2,4(r2)
   13a8c:	d0a82115 	stw	r2,-24444(gp)
   13a90:	e0bff817 	ldw	r2,-32(fp)
   13a94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a98:	e0bff917 	ldw	r2,-28(fp)
   13a9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   13aa0:	e0bffa17 	ldw	r2,-24(fp)
   13aa4:	1000051e 	bne	r2,zero,13abc <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   13aa8:	e0bfff17 	ldw	r2,-4(fp)
   13aac:	00c01684 	movi	r3,90
   13ab0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   13ab4:	0005883a 	mov	r2,zero
   13ab8:	00002c06 	br	13b6c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   13abc:	e0bffc17 	ldw	r2,-16(fp)
   13ac0:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   13ac4:	e0fffc17 	ldw	r3,-16(fp)
   13ac8:	e0bffe17 	ldw	r2,-8(fp)
   13acc:	1885883a 	add	r2,r3,r2
   13ad0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   13ad4:	e03ff715 	stw	zero,-36(fp)
   13ad8:	00000c06 	br	13b0c <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   13adc:	e0bff617 	ldw	r2,-40(fp)
   13ae0:	e0fff517 	ldw	r3,-44(fp)
   13ae4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   13ae8:	e0bff517 	ldw	r2,-44(fp)
   13aec:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   13af0:	e0fff517 	ldw	r3,-44(fp)
   13af4:	e0bffe17 	ldw	r2,-8(fp)
   13af8:	1885883a 	add	r2,r3,r2
   13afc:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   13b00:	e0bff717 	ldw	r2,-36(fp)
   13b04:	10800044 	addi	r2,r2,1
   13b08:	e0bff715 	stw	r2,-36(fp)
   13b0c:	e0bffd17 	ldw	r2,-12(fp)
   13b10:	10bfffc4 	addi	r2,r2,-1
   13b14:	e0fff717 	ldw	r3,-36(fp)
   13b18:	18bff036 	bltu	r3,r2,13adc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013adc>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   13b1c:	e0bff617 	ldw	r2,-40(fp)
   13b20:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   13b24:	e0bffa17 	ldw	r2,-24(fp)
   13b28:	e0fffc17 	ldw	r3,-16(fp)
   13b2c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   13b30:	e0bffa17 	ldw	r2,-24(fp)
   13b34:	e0fffc17 	ldw	r3,-16(fp)
   13b38:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   13b3c:	e0bffa17 	ldw	r2,-24(fp)
   13b40:	e0fffd17 	ldw	r3,-12(fp)
   13b44:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   13b48:	e0bffa17 	ldw	r2,-24(fp)
   13b4c:	e0fffd17 	ldw	r3,-12(fp)
   13b50:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   13b54:	e0bffa17 	ldw	r2,-24(fp)
   13b58:	e0fffe17 	ldw	r3,-8(fp)
   13b5c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   13b60:	e0bfff17 	ldw	r2,-4(fp)
   13b64:	10000005 	stb	zero,0(r2)
    return (pmem);
   13b68:	e0bffa17 	ldw	r2,-24(fp)
}
   13b6c:	e037883a 	mov	sp,fp
   13b70:	df000017 	ldw	fp,0(sp)
   13b74:	dec00104 	addi	sp,sp,4
   13b78:	f800283a 	ret

00013b7c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   13b7c:	defff804 	addi	sp,sp,-32
   13b80:	df000715 	stw	fp,28(sp)
   13b84:	df000704 	addi	fp,sp,28
   13b88:	e13ffe15 	stw	r4,-8(fp)
   13b8c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13b90:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13b94:	e0bfff17 	ldw	r2,-4(fp)
   13b98:	1000021e 	bne	r2,zero,13ba4 <OSMemGet+0x28>
        return ((void *)0);
   13b9c:	0005883a 	mov	r2,zero
   13ba0:	00002e06 	br	13c5c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   13ba4:	e0bffe17 	ldw	r2,-8(fp)
   13ba8:	1000051e 	bne	r2,zero,13bc0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   13bac:	e0bfff17 	ldw	r2,-4(fp)
   13bb0:	00c01804 	movi	r3,96
   13bb4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13bb8:	0005883a 	mov	r2,zero
   13bbc:	00002706 	br	13c5c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13bc0:	0005303a 	rdctl	r2,status
   13bc4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13bc8:	e0fffd17 	ldw	r3,-12(fp)
   13bcc:	00bfff84 	movi	r2,-2
   13bd0:	1884703a 	and	r2,r3,r2
   13bd4:	1001703a 	wrctl	status,r2
  
  return context;
   13bd8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13bdc:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   13be0:	e0bffe17 	ldw	r2,-8(fp)
   13be4:	10800417 	ldw	r2,16(r2)
   13be8:	10001426 	beq	r2,zero,13c3c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   13bec:	e0bffe17 	ldw	r2,-8(fp)
   13bf0:	10800117 	ldw	r2,4(r2)
   13bf4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   13bf8:	e0bffb17 	ldw	r2,-20(fp)
   13bfc:	10c00017 	ldw	r3,0(r2)
   13c00:	e0bffe17 	ldw	r2,-8(fp)
   13c04:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   13c08:	e0bffe17 	ldw	r2,-8(fp)
   13c0c:	10800417 	ldw	r2,16(r2)
   13c10:	10ffffc4 	addi	r3,r2,-1
   13c14:	e0bffe17 	ldw	r2,-8(fp)
   13c18:	10c00415 	stw	r3,16(r2)
   13c1c:	e0bff917 	ldw	r2,-28(fp)
   13c20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c24:	e0bffa17 	ldw	r2,-24(fp)
   13c28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   13c2c:	e0bfff17 	ldw	r2,-4(fp)
   13c30:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   13c34:	e0bffb17 	ldw	r2,-20(fp)
   13c38:	00000806 	br	13c5c <OSMemGet+0xe0>
   13c3c:	e0bff917 	ldw	r2,-28(fp)
   13c40:	e0bffc15 	stw	r2,-16(fp)
   13c44:	e0bffc17 	ldw	r2,-16(fp)
   13c48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   13c4c:	e0bfff17 	ldw	r2,-4(fp)
   13c50:	00c01744 	movi	r3,93
   13c54:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   13c58:	0005883a 	mov	r2,zero
}
   13c5c:	e037883a 	mov	sp,fp
   13c60:	df000017 	ldw	fp,0(sp)
   13c64:	dec00104 	addi	sp,sp,4
   13c68:	f800283a 	ret

00013c6c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   13c6c:	defff704 	addi	sp,sp,-36
   13c70:	dfc00815 	stw	ra,32(sp)
   13c74:	df000715 	stw	fp,28(sp)
   13c78:	df000704 	addi	fp,sp,28
   13c7c:	e13ffd15 	stw	r4,-12(fp)
   13c80:	e17ffe15 	stw	r5,-8(fp)
   13c84:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13c88:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13c8c:	e0bfff17 	ldw	r2,-4(fp)
   13c90:	1000021e 	bne	r2,zero,13c9c <OSMemNameGet+0x30>
        return (0);
   13c94:	0005883a 	mov	r2,zero
   13c98:	00002b06 	br	13d48 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   13c9c:	e0bffd17 	ldw	r2,-12(fp)
   13ca0:	1000051e 	bne	r2,zero,13cb8 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   13ca4:	e0bfff17 	ldw	r2,-4(fp)
   13ca8:	00c01804 	movi	r3,96
   13cac:	10c00005 	stb	r3,0(r2)
        return (0);
   13cb0:	0005883a 	mov	r2,zero
   13cb4:	00002406 	br	13d48 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13cb8:	e0bffe17 	ldw	r2,-8(fp)
   13cbc:	1000051e 	bne	r2,zero,13cd4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   13cc0:	e0bfff17 	ldw	r2,-4(fp)
   13cc4:	00c00304 	movi	r3,12
   13cc8:	10c00005 	stb	r3,0(r2)
        return (0);
   13ccc:	0005883a 	mov	r2,zero
   13cd0:	00001d06 	br	13d48 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13cd4:	d0a82603 	ldbu	r2,-24424(gp)
   13cd8:	10803fcc 	andi	r2,r2,255
   13cdc:	10000526 	beq	r2,zero,13cf4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   13ce0:	e0bfff17 	ldw	r2,-4(fp)
   13ce4:	00c00444 	movi	r3,17
   13ce8:	10c00005 	stb	r3,0(r2)
        return (0);
   13cec:	0005883a 	mov	r2,zero
   13cf0:	00001506 	br	13d48 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13cf4:	0005303a 	rdctl	r2,status
   13cf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13cfc:	e0fffb17 	ldw	r3,-20(fp)
   13d00:	00bfff84 	movi	r2,-2
   13d04:	1884703a 	and	r2,r3,r2
   13d08:	1001703a 	wrctl	status,r2
  
  return context;
   13d0c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   13d10:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   13d14:	e0bffd17 	ldw	r2,-12(fp)
   13d18:	10800504 	addi	r2,r2,20
   13d1c:	100b883a 	mov	r5,r2
   13d20:	e13ffe17 	ldw	r4,-8(fp)
   13d24:	0011b640 	call	11b64 <OS_StrCopy>
   13d28:	e0bffa05 	stb	r2,-24(fp)
   13d2c:	e0bff917 	ldw	r2,-28(fp)
   13d30:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d34:	e0bffc17 	ldw	r2,-16(fp)
   13d38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13d3c:	e0bfff17 	ldw	r2,-4(fp)
   13d40:	10000005 	stb	zero,0(r2)
    return (len);
   13d44:	e0bffa03 	ldbu	r2,-24(fp)
}
   13d48:	e037883a 	mov	sp,fp
   13d4c:	dfc00117 	ldw	ra,4(sp)
   13d50:	df000017 	ldw	fp,0(sp)
   13d54:	dec00204 	addi	sp,sp,8
   13d58:	f800283a 	ret

00013d5c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   13d5c:	defff604 	addi	sp,sp,-40
   13d60:	dfc00915 	stw	ra,36(sp)
   13d64:	df000815 	stw	fp,32(sp)
   13d68:	df000804 	addi	fp,sp,32
   13d6c:	e13ffd15 	stw	r4,-12(fp)
   13d70:	e17ffe15 	stw	r5,-8(fp)
   13d74:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13d78:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13d7c:	e0bfff17 	ldw	r2,-4(fp)
   13d80:	10003526 	beq	r2,zero,13e58 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   13d84:	e0bffd17 	ldw	r2,-12(fp)
   13d88:	1000041e 	bne	r2,zero,13d9c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   13d8c:	e0bfff17 	ldw	r2,-4(fp)
   13d90:	00c01804 	movi	r3,96
   13d94:	10c00005 	stb	r3,0(r2)
        return;
   13d98:	00003006 	br	13e5c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13d9c:	e0bffe17 	ldw	r2,-8(fp)
   13da0:	1000041e 	bne	r2,zero,13db4 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   13da4:	e0bfff17 	ldw	r2,-4(fp)
   13da8:	00c00304 	movi	r3,12
   13dac:	10c00005 	stb	r3,0(r2)
        return;
   13db0:	00002a06 	br	13e5c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13db4:	d0a82603 	ldbu	r2,-24424(gp)
   13db8:	10803fcc 	andi	r2,r2,255
   13dbc:	10000426 	beq	r2,zero,13dd0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   13dc0:	e0bfff17 	ldw	r2,-4(fp)
   13dc4:	00c00484 	movi	r3,18
   13dc8:	10c00005 	stb	r3,0(r2)
        return;
   13dcc:	00002306 	br	13e5c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13dd0:	0005303a 	rdctl	r2,status
   13dd4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13dd8:	e0fffc17 	ldw	r3,-16(fp)
   13ddc:	00bfff84 	movi	r2,-2
   13de0:	1884703a 	and	r2,r3,r2
   13de4:	1001703a 	wrctl	status,r2
  
  return context;
   13de8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13dec:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   13df0:	e13ffe17 	ldw	r4,-8(fp)
   13df4:	0011bd80 	call	11bd8 <OS_StrLen>
   13df8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   13dfc:	e0bffa03 	ldbu	r2,-24(fp)
   13e00:	10800830 	cmpltui	r2,r2,32
   13e04:	1000081e 	bne	r2,zero,13e28 <OSMemNameSet+0xcc>
   13e08:	e0bff817 	ldw	r2,-32(fp)
   13e0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e10:	e0bff917 	ldw	r2,-28(fp)
   13e14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   13e18:	e0bfff17 	ldw	r2,-4(fp)
   13e1c:	00c018c4 	movi	r3,99
   13e20:	10c00005 	stb	r3,0(r2)
        return;
   13e24:	00000d06 	br	13e5c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   13e28:	e0bffd17 	ldw	r2,-12(fp)
   13e2c:	10800504 	addi	r2,r2,20
   13e30:	e17ffe17 	ldw	r5,-8(fp)
   13e34:	1009883a 	mov	r4,r2
   13e38:	0011b640 	call	11b64 <OS_StrCopy>
   13e3c:	e0bff817 	ldw	r2,-32(fp)
   13e40:	e0bffb15 	stw	r2,-20(fp)
   13e44:	e0bffb17 	ldw	r2,-20(fp)
   13e48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13e4c:	e0bfff17 	ldw	r2,-4(fp)
   13e50:	10000005 	stb	zero,0(r2)
   13e54:	00000106 	br	13e5c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   13e58:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   13e5c:	e037883a 	mov	sp,fp
   13e60:	dfc00117 	ldw	ra,4(sp)
   13e64:	df000017 	ldw	fp,0(sp)
   13e68:	dec00204 	addi	sp,sp,8
   13e6c:	f800283a 	ret

00013e70 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   13e70:	defff904 	addi	sp,sp,-28
   13e74:	df000615 	stw	fp,24(sp)
   13e78:	df000604 	addi	fp,sp,24
   13e7c:	e13ffe15 	stw	r4,-8(fp)
   13e80:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13e84:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   13e88:	e0bffe17 	ldw	r2,-8(fp)
   13e8c:	1000021e 	bne	r2,zero,13e98 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   13e90:	00801804 	movi	r2,96
   13e94:	00002806 	br	13f38 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   13e98:	e0bfff17 	ldw	r2,-4(fp)
   13e9c:	1000021e 	bne	r2,zero,13ea8 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   13ea0:	008017c4 	movi	r2,95
   13ea4:	00002406 	br	13f38 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ea8:	0005303a 	rdctl	r2,status
   13eac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13eb0:	e0fffd17 	ldw	r3,-12(fp)
   13eb4:	00bfff84 	movi	r2,-2
   13eb8:	1884703a 	and	r2,r3,r2
   13ebc:	1001703a 	wrctl	status,r2
  
  return context;
   13ec0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13ec4:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   13ec8:	e0bffe17 	ldw	r2,-8(fp)
   13ecc:	10c00417 	ldw	r3,16(r2)
   13ed0:	e0bffe17 	ldw	r2,-8(fp)
   13ed4:	10800317 	ldw	r2,12(r2)
   13ed8:	18800636 	bltu	r3,r2,13ef4 <OSMemPut+0x84>
   13edc:	e0bffa17 	ldw	r2,-24(fp)
   13ee0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ee4:	e0bffb17 	ldw	r2,-20(fp)
   13ee8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   13eec:	00801784 	movi	r2,94
   13ef0:	00001106 	br	13f38 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   13ef4:	e0bffe17 	ldw	r2,-8(fp)
   13ef8:	10c00117 	ldw	r3,4(r2)
   13efc:	e0bfff17 	ldw	r2,-4(fp)
   13f00:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   13f04:	e0bffe17 	ldw	r2,-8(fp)
   13f08:	e0ffff17 	ldw	r3,-4(fp)
   13f0c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   13f10:	e0bffe17 	ldw	r2,-8(fp)
   13f14:	10800417 	ldw	r2,16(r2)
   13f18:	10c00044 	addi	r3,r2,1
   13f1c:	e0bffe17 	ldw	r2,-8(fp)
   13f20:	10c00415 	stw	r3,16(r2)
   13f24:	e0bffa17 	ldw	r2,-24(fp)
   13f28:	e0bffc15 	stw	r2,-16(fp)
   13f2c:	e0bffc17 	ldw	r2,-16(fp)
   13f30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   13f34:	0005883a 	mov	r2,zero
}
   13f38:	e037883a 	mov	sp,fp
   13f3c:	df000017 	ldw	fp,0(sp)
   13f40:	dec00104 	addi	sp,sp,4
   13f44:	f800283a 	ret

00013f48 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   13f48:	defffa04 	addi	sp,sp,-24
   13f4c:	df000515 	stw	fp,20(sp)
   13f50:	df000504 	addi	fp,sp,20
   13f54:	e13ffe15 	stw	r4,-8(fp)
   13f58:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13f5c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   13f60:	e0bffe17 	ldw	r2,-8(fp)
   13f64:	1000021e 	bne	r2,zero,13f70 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   13f68:	00801804 	movi	r2,96
   13f6c:	00002c06 	br	14020 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   13f70:	e0bfff17 	ldw	r2,-4(fp)
   13f74:	1000021e 	bne	r2,zero,13f80 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   13f78:	00801844 	movi	r2,97
   13f7c:	00002806 	br	14020 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f80:	0005303a 	rdctl	r2,status
   13f84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f88:	e0fffc17 	ldw	r3,-16(fp)
   13f8c:	00bfff84 	movi	r2,-2
   13f90:	1884703a 	and	r2,r3,r2
   13f94:	1001703a 	wrctl	status,r2
  
  return context;
   13f98:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13f9c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   13fa0:	e0bffe17 	ldw	r2,-8(fp)
   13fa4:	10c00017 	ldw	r3,0(r2)
   13fa8:	e0bfff17 	ldw	r2,-4(fp)
   13fac:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   13fb0:	e0bffe17 	ldw	r2,-8(fp)
   13fb4:	10c00117 	ldw	r3,4(r2)
   13fb8:	e0bfff17 	ldw	r2,-4(fp)
   13fbc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   13fc0:	e0bffe17 	ldw	r2,-8(fp)
   13fc4:	10c00217 	ldw	r3,8(r2)
   13fc8:	e0bfff17 	ldw	r2,-4(fp)
   13fcc:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   13fd0:	e0bffe17 	ldw	r2,-8(fp)
   13fd4:	10c00317 	ldw	r3,12(r2)
   13fd8:	e0bfff17 	ldw	r2,-4(fp)
   13fdc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   13fe0:	e0bffe17 	ldw	r2,-8(fp)
   13fe4:	10c00417 	ldw	r3,16(r2)
   13fe8:	e0bfff17 	ldw	r2,-4(fp)
   13fec:	10c00415 	stw	r3,16(r2)
   13ff0:	e0bffb17 	ldw	r2,-20(fp)
   13ff4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ff8:	e0bffd17 	ldw	r2,-12(fp)
   13ffc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   14000:	e0bfff17 	ldw	r2,-4(fp)
   14004:	10c00317 	ldw	r3,12(r2)
   14008:	e0bfff17 	ldw	r2,-4(fp)
   1400c:	10800417 	ldw	r2,16(r2)
   14010:	1887c83a 	sub	r3,r3,r2
   14014:	e0bfff17 	ldw	r2,-4(fp)
   14018:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   1401c:	0005883a 	mov	r2,zero
}
   14020:	e037883a 	mov	sp,fp
   14024:	df000017 	ldw	fp,0(sp)
   14028:	dec00104 	addi	sp,sp,4
   1402c:	f800283a 	ret

00014030 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   14030:	defffc04 	addi	sp,sp,-16
   14034:	dfc00315 	stw	ra,12(sp)
   14038:	df000215 	stw	fp,8(sp)
   1403c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   14040:	01430c04 	movi	r5,3120
   14044:	010000b4 	movhi	r4,2
   14048:	21004d04 	addi	r4,r4,308
   1404c:	00119640 	call	11964 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   14050:	008000b4 	movhi	r2,2
   14054:	10804d04 	addi	r2,r2,308
   14058:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1405c:	e03fff0d 	sth	zero,-4(fp)
   14060:	00001306 	br	140b0 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   14064:	e0bfff0b 	ldhu	r2,-4(fp)
   14068:	10800044 	addi	r2,r2,1
   1406c:	10c00d24 	muli	r3,r2,52
   14070:	008000b4 	movhi	r2,2
   14074:	10804d04 	addi	r2,r2,308
   14078:	1887883a 	add	r3,r3,r2
   1407c:	e0bffe17 	ldw	r2,-8(fp)
   14080:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   14084:	e0bffe17 	ldw	r2,-8(fp)
   14088:	00c00fc4 	movi	r3,63
   1408c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   14090:	e0bffe17 	ldw	r2,-8(fp)
   14094:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   14098:	e0bffe17 	ldw	r2,-8(fp)
   1409c:	10800d04 	addi	r2,r2,52
   140a0:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   140a4:	e0bfff0b 	ldhu	r2,-4(fp)
   140a8:	10800044 	addi	r2,r2,1
   140ac:	e0bfff0d 	sth	r2,-4(fp)
   140b0:	e0bfff0b 	ldhu	r2,-4(fp)
   140b4:	10800ef0 	cmpltui	r2,r2,59
   140b8:	103fea1e 	bne	r2,zero,14064 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014064>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   140bc:	e0bffe17 	ldw	r2,-8(fp)
   140c0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   140c4:	e0bffe17 	ldw	r2,-8(fp)
   140c8:	00c00fc4 	movi	r3,63
   140cc:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   140d0:	e0bffe17 	ldw	r2,-8(fp)
   140d4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   140d8:	008000b4 	movhi	r2,2
   140dc:	10804d04 	addi	r2,r2,308
   140e0:	d0a82115 	stw	r2,-24444(gp)
#endif
}
   140e4:	0001883a 	nop
   140e8:	e037883a 	mov	sp,fp
   140ec:	dfc00117 	ldw	ra,4(sp)
   140f0:	df000017 	ldw	fp,0(sp)
   140f4:	dec00204 	addi	sp,sp,8
   140f8:	f800283a 	ret

000140fc <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   140fc:	defff804 	addi	sp,sp,-32
   14100:	df000715 	stw	fp,28(sp)
   14104:	df000704 	addi	fp,sp,28
   14108:	e13ffe15 	stw	r4,-8(fp)
   1410c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14110:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14114:	e0bfff17 	ldw	r2,-4(fp)
   14118:	1000021e 	bne	r2,zero,14124 <OSQAccept+0x28>
        return ((void *)0);
   1411c:	0005883a 	mov	r2,zero
   14120:	00004206 	br	1422c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   14124:	e0bffe17 	ldw	r2,-8(fp)
   14128:	1000051e 	bne	r2,zero,14140 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1412c:	e0bfff17 	ldw	r2,-4(fp)
   14130:	00c00104 	movi	r3,4
   14134:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14138:	0005883a 	mov	r2,zero
   1413c:	00003b06 	br	1422c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   14140:	e0bffe17 	ldw	r2,-8(fp)
   14144:	10800003 	ldbu	r2,0(r2)
   14148:	10803fcc 	andi	r2,r2,255
   1414c:	108000a0 	cmpeqi	r2,r2,2
   14150:	1000051e 	bne	r2,zero,14168 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   14154:	e0bfff17 	ldw	r2,-4(fp)
   14158:	00c00044 	movi	r3,1
   1415c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14160:	0005883a 	mov	r2,zero
   14164:	00003106 	br	1422c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14168:	0005303a 	rdctl	r2,status
   1416c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14170:	e0fffd17 	ldw	r3,-12(fp)
   14174:	00bfff84 	movi	r2,-2
   14178:	1884703a 	and	r2,r3,r2
   1417c:	1001703a 	wrctl	status,r2
  
  return context;
   14180:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14184:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   14188:	e0bffe17 	ldw	r2,-8(fp)
   1418c:	10800117 	ldw	r2,4(r2)
   14190:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   14194:	e0bffc17 	ldw	r2,-16(fp)
   14198:	1080058b 	ldhu	r2,22(r2)
   1419c:	10bfffcc 	andi	r2,r2,65535
   141a0:	10001926 	beq	r2,zero,14208 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   141a4:	e0bffc17 	ldw	r2,-16(fp)
   141a8:	10800417 	ldw	r2,16(r2)
   141ac:	11000104 	addi	r4,r2,4
   141b0:	e0fffc17 	ldw	r3,-16(fp)
   141b4:	19000415 	stw	r4,16(r3)
   141b8:	10800017 	ldw	r2,0(r2)
   141bc:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   141c0:	e0bffc17 	ldw	r2,-16(fp)
   141c4:	1080058b 	ldhu	r2,22(r2)
   141c8:	10bfffc4 	addi	r2,r2,-1
   141cc:	1007883a 	mov	r3,r2
   141d0:	e0bffc17 	ldw	r2,-16(fp)
   141d4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   141d8:	e0bffc17 	ldw	r2,-16(fp)
   141dc:	10c00417 	ldw	r3,16(r2)
   141e0:	e0bffc17 	ldw	r2,-16(fp)
   141e4:	10800217 	ldw	r2,8(r2)
   141e8:	1880041e 	bne	r3,r2,141fc <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   141ec:	e0bffc17 	ldw	r2,-16(fp)
   141f0:	10c00117 	ldw	r3,4(r2)
   141f4:	e0bffc17 	ldw	r2,-16(fp)
   141f8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   141fc:	e0bfff17 	ldw	r2,-4(fp)
   14200:	10000005 	stb	zero,0(r2)
   14204:	00000406 	br	14218 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   14208:	e0bfff17 	ldw	r2,-4(fp)
   1420c:	00c007c4 	movi	r3,31
   14210:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   14214:	e03ff915 	stw	zero,-28(fp)
   14218:	e0bffa17 	ldw	r2,-24(fp)
   1421c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14220:	e0bffb17 	ldw	r2,-20(fp)
   14224:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   14228:	e0bff917 	ldw	r2,-28(fp)
}
   1422c:	e037883a 	mov	sp,fp
   14230:	df000017 	ldw	fp,0(sp)
   14234:	dec00104 	addi	sp,sp,4
   14238:	f800283a 	ret

0001423c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   1423c:	defff404 	addi	sp,sp,-48
   14240:	dfc00b15 	stw	ra,44(sp)
   14244:	df000a15 	stw	fp,40(sp)
   14248:	df000a04 	addi	fp,sp,40
   1424c:	e13ffe15 	stw	r4,-8(fp)
   14250:	2805883a 	mov	r2,r5
   14254:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14258:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1425c:	d0a82603 	ldbu	r2,-24424(gp)
   14260:	10803fcc 	andi	r2,r2,255
   14264:	10000226 	beq	r2,zero,14270 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   14268:	0005883a 	mov	r2,zero
   1426c:	00005906 	br	143d4 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14270:	0005303a 	rdctl	r2,status
   14274:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14278:	e0fffd17 	ldw	r3,-12(fp)
   1427c:	00bfff84 	movi	r2,-2
   14280:	1884703a 	and	r2,r3,r2
   14284:	1001703a 	wrctl	status,r2
  
  return context;
   14288:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1428c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   14290:	d0a82517 	ldw	r2,-24428(gp)
   14294:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   14298:	d0a82517 	ldw	r2,-24428(gp)
   1429c:	10000326 	beq	r2,zero,142ac <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   142a0:	d0a82517 	ldw	r2,-24428(gp)
   142a4:	10800117 	ldw	r2,4(r2)
   142a8:	d0a82515 	stw	r2,-24428(gp)
   142ac:	e0bff717 	ldw	r2,-36(fp)
   142b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   142b4:	e0bff817 	ldw	r2,-32(fp)
   142b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   142bc:	e0bff617 	ldw	r2,-40(fp)
   142c0:	10004326 	beq	r2,zero,143d0 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142c4:	0005303a 	rdctl	r2,status
   142c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142cc:	e0fff917 	ldw	r3,-28(fp)
   142d0:	00bfff84 	movi	r2,-2
   142d4:	1884703a 	and	r2,r3,r2
   142d8:	1001703a 	wrctl	status,r2
  
  return context;
   142dc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   142e0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   142e4:	d0a82317 	ldw	r2,-24436(gp)
   142e8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   142ec:	e0bffb17 	ldw	r2,-20(fp)
   142f0:	10002d26 	beq	r2,zero,143a8 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   142f4:	d0a82317 	ldw	r2,-24436(gp)
   142f8:	10800017 	ldw	r2,0(r2)
   142fc:	d0a82315 	stw	r2,-24436(gp)
   14300:	e0bff717 	ldw	r2,-36(fp)
   14304:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14308:	e0bffa17 	ldw	r2,-24(fp)
   1430c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   14310:	e0bffb17 	ldw	r2,-20(fp)
   14314:	e0fffe17 	ldw	r3,-8(fp)
   14318:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   1431c:	e0bfff0b 	ldhu	r2,-4(fp)
   14320:	1085883a 	add	r2,r2,r2
   14324:	1085883a 	add	r2,r2,r2
   14328:	1007883a 	mov	r3,r2
   1432c:	e0bffe17 	ldw	r2,-8(fp)
   14330:	10c7883a 	add	r3,r2,r3
   14334:	e0bffb17 	ldw	r2,-20(fp)
   14338:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   1433c:	e0bffb17 	ldw	r2,-20(fp)
   14340:	e0fffe17 	ldw	r3,-8(fp)
   14344:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   14348:	e0bffb17 	ldw	r2,-20(fp)
   1434c:	e0fffe17 	ldw	r3,-8(fp)
   14350:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   14354:	e0bffb17 	ldw	r2,-20(fp)
   14358:	e0ffff0b 	ldhu	r3,-4(fp)
   1435c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   14360:	e0bffb17 	ldw	r2,-20(fp)
   14364:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   14368:	e0bff617 	ldw	r2,-40(fp)
   1436c:	00c00084 	movi	r3,2
   14370:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   14374:	e0bff617 	ldw	r2,-40(fp)
   14378:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   1437c:	e0bff617 	ldw	r2,-40(fp)
   14380:	e0fffb17 	ldw	r3,-20(fp)
   14384:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   14388:	e0bff617 	ldw	r2,-40(fp)
   1438c:	00c00fc4 	movi	r3,63
   14390:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   14394:	e0bff617 	ldw	r2,-40(fp)
   14398:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   1439c:	e13ff617 	ldw	r4,-40(fp)
   143a0:	00115840 	call	11584 <OS_EventWaitListInit>
   143a4:	00000a06 	br	143d0 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   143a8:	d0e82517 	ldw	r3,-24428(gp)
   143ac:	e0bff617 	ldw	r2,-40(fp)
   143b0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   143b4:	e0bff617 	ldw	r2,-40(fp)
   143b8:	d0a82515 	stw	r2,-24428(gp)
   143bc:	e0bff717 	ldw	r2,-36(fp)
   143c0:	e0bffc15 	stw	r2,-16(fp)
   143c4:	e0bffc17 	ldw	r2,-16(fp)
   143c8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   143cc:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   143d0:	e0bff617 	ldw	r2,-40(fp)
}
   143d4:	e037883a 	mov	sp,fp
   143d8:	dfc00117 	ldw	ra,4(sp)
   143dc:	df000017 	ldw	fp,0(sp)
   143e0:	dec00204 	addi	sp,sp,8
   143e4:	f800283a 	ret

000143e8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   143e8:	defff204 	addi	sp,sp,-56
   143ec:	dfc00d15 	stw	ra,52(sp)
   143f0:	df000c15 	stw	fp,48(sp)
   143f4:	df000c04 	addi	fp,sp,48
   143f8:	e13ffd15 	stw	r4,-12(fp)
   143fc:	2805883a 	mov	r2,r5
   14400:	e1bfff15 	stw	r6,-4(fp)
   14404:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14408:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1440c:	e0bfff17 	ldw	r2,-4(fp)
   14410:	1000021e 	bne	r2,zero,1441c <OSQDel+0x34>
        return (pevent);
   14414:	e0bffd17 	ldw	r2,-12(fp)
   14418:	00008e06 	br	14654 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1441c:	e0bffd17 	ldw	r2,-12(fp)
   14420:	1000051e 	bne	r2,zero,14438 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14424:	e0bfff17 	ldw	r2,-4(fp)
   14428:	00c00104 	movi	r3,4
   1442c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14430:	e0bffd17 	ldw	r2,-12(fp)
   14434:	00008706 	br	14654 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   14438:	e0bffd17 	ldw	r2,-12(fp)
   1443c:	10800003 	ldbu	r2,0(r2)
   14440:	10803fcc 	andi	r2,r2,255
   14444:	108000a0 	cmpeqi	r2,r2,2
   14448:	1000051e 	bne	r2,zero,14460 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1444c:	e0bfff17 	ldw	r2,-4(fp)
   14450:	00c00044 	movi	r3,1
   14454:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14458:	e0bffd17 	ldw	r2,-12(fp)
   1445c:	00007d06 	br	14654 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   14460:	d0a82603 	ldbu	r2,-24424(gp)
   14464:	10803fcc 	andi	r2,r2,255
   14468:	10000526 	beq	r2,zero,14480 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1446c:	e0bfff17 	ldw	r2,-4(fp)
   14470:	00c003c4 	movi	r3,15
   14474:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14478:	e0bffd17 	ldw	r2,-12(fp)
   1447c:	00007506 	br	14654 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14480:	0005303a 	rdctl	r2,status
   14484:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14488:	e0fffc17 	ldw	r3,-16(fp)
   1448c:	00bfff84 	movi	r2,-2
   14490:	1884703a 	and	r2,r3,r2
   14494:	1001703a 	wrctl	status,r2
  
  return context;
   14498:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1449c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   144a0:	e0bffd17 	ldw	r2,-12(fp)
   144a4:	10800283 	ldbu	r2,10(r2)
   144a8:	10803fcc 	andi	r2,r2,255
   144ac:	10000326 	beq	r2,zero,144bc <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   144b0:	00800044 	movi	r2,1
   144b4:	e0bff405 	stb	r2,-48(fp)
   144b8:	00000106 	br	144c0 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   144bc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   144c0:	e0bffe03 	ldbu	r2,-8(fp)
   144c4:	10000326 	beq	r2,zero,144d4 <OSQDel+0xec>
   144c8:	10800060 	cmpeqi	r2,r2,1
   144cc:	1000301e 	bne	r2,zero,14590 <OSQDel+0x1a8>
   144d0:	00005506 	br	14628 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   144d4:	e0bff403 	ldbu	r2,-48(fp)
   144d8:	10001e1e 	bne	r2,zero,14554 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   144dc:	e0bffd17 	ldw	r2,-12(fp)
   144e0:	00c00fc4 	movi	r3,63
   144e4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   144e8:	e0bffd17 	ldw	r2,-12(fp)
   144ec:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   144f0:	e0bffd17 	ldw	r2,-12(fp)
   144f4:	10800117 	ldw	r2,4(r2)
   144f8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   144fc:	d0e82317 	ldw	r3,-24436(gp)
   14500:	e0bff817 	ldw	r2,-32(fp)
   14504:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   14508:	e0bff817 	ldw	r2,-32(fp)
   1450c:	d0a82315 	stw	r2,-24436(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   14510:	e0bffd17 	ldw	r2,-12(fp)
   14514:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   14518:	d0e82517 	ldw	r3,-24428(gp)
   1451c:	e0bffd17 	ldw	r2,-12(fp)
   14520:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   14524:	e0bffd17 	ldw	r2,-12(fp)
   14528:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1452c:	e0bffd17 	ldw	r2,-12(fp)
   14530:	d0a82515 	stw	r2,-24428(gp)
   14534:	e0bff617 	ldw	r2,-40(fp)
   14538:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1453c:	e0bff717 	ldw	r2,-36(fp)
   14540:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   14544:	e0bfff17 	ldw	r2,-4(fp)
   14548:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   1454c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   14550:	00003f06 	br	14650 <OSQDel+0x268>
   14554:	e0bff617 	ldw	r2,-40(fp)
   14558:	e0bff915 	stw	r2,-28(fp)
   1455c:	e0bff917 	ldw	r2,-28(fp)
   14560:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   14564:	e0bfff17 	ldw	r2,-4(fp)
   14568:	00c01244 	movi	r3,73
   1456c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   14570:	e0bffd17 	ldw	r2,-12(fp)
   14574:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   14578:	00003506 	br	14650 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   1457c:	000f883a 	mov	r7,zero
   14580:	01800104 	movi	r6,4
   14584:	000b883a 	mov	r5,zero
   14588:	e13ffd17 	ldw	r4,-12(fp)
   1458c:	0010fd40 	call	10fd4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   14590:	e0bffd17 	ldw	r2,-12(fp)
   14594:	10800283 	ldbu	r2,10(r2)
   14598:	10803fcc 	andi	r2,r2,255
   1459c:	103ff71e 	bne	r2,zero,1457c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701457c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   145a0:	e0bffd17 	ldw	r2,-12(fp)
   145a4:	00c00fc4 	movi	r3,63
   145a8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   145ac:	e0bffd17 	ldw	r2,-12(fp)
   145b0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   145b4:	e0bffd17 	ldw	r2,-12(fp)
   145b8:	10800117 	ldw	r2,4(r2)
   145bc:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   145c0:	d0e82317 	ldw	r3,-24436(gp)
   145c4:	e0bff817 	ldw	r2,-32(fp)
   145c8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   145cc:	e0bff817 	ldw	r2,-32(fp)
   145d0:	d0a82315 	stw	r2,-24436(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   145d4:	e0bffd17 	ldw	r2,-12(fp)
   145d8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   145dc:	d0e82517 	ldw	r3,-24428(gp)
   145e0:	e0bffd17 	ldw	r2,-12(fp)
   145e4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   145e8:	e0bffd17 	ldw	r2,-12(fp)
   145ec:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   145f0:	e0bffd17 	ldw	r2,-12(fp)
   145f4:	d0a82515 	stw	r2,-24428(gp)
   145f8:	e0bff617 	ldw	r2,-40(fp)
   145fc:	e0bffa15 	stw	r2,-24(fp)
   14600:	e0bffa17 	ldw	r2,-24(fp)
   14604:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   14608:	e0bff403 	ldbu	r2,-48(fp)
   1460c:	10800058 	cmpnei	r2,r2,1
   14610:	1000011e 	bne	r2,zero,14618 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   14614:	0011a200 	call	11a20 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   14618:	e0bfff17 	ldw	r2,-4(fp)
   1461c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   14620:	e03ff515 	stw	zero,-44(fp)
             break;
   14624:	00000a06 	br	14650 <OSQDel+0x268>
   14628:	e0bff617 	ldw	r2,-40(fp)
   1462c:	e0bffb15 	stw	r2,-20(fp)
   14630:	e0bffb17 	ldw	r2,-20(fp)
   14634:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   14638:	e0bfff17 	ldw	r2,-4(fp)
   1463c:	00c001c4 	movi	r3,7
   14640:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   14644:	e0bffd17 	ldw	r2,-12(fp)
   14648:	e0bff515 	stw	r2,-44(fp)
             break;
   1464c:	0001883a 	nop
    }
    return (pevent_return);
   14650:	e0bff517 	ldw	r2,-44(fp)
}
   14654:	e037883a 	mov	sp,fp
   14658:	dfc00117 	ldw	ra,4(sp)
   1465c:	df000017 	ldw	fp,0(sp)
   14660:	dec00204 	addi	sp,sp,8
   14664:	f800283a 	ret

00014668 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   14668:	defffa04 	addi	sp,sp,-24
   1466c:	df000515 	stw	fp,20(sp)
   14670:	df000504 	addi	fp,sp,20
   14674:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14678:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1467c:	e0bfff17 	ldw	r2,-4(fp)
   14680:	1000021e 	bne	r2,zero,1468c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   14684:	00800104 	movi	r2,4
   14688:	00002106 	br	14710 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1468c:	e0bfff17 	ldw	r2,-4(fp)
   14690:	10800003 	ldbu	r2,0(r2)
   14694:	10803fcc 	andi	r2,r2,255
   14698:	108000a0 	cmpeqi	r2,r2,2
   1469c:	1000021e 	bne	r2,zero,146a8 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   146a0:	00800044 	movi	r2,1
   146a4:	00001a06 	br	14710 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146a8:	0005303a 	rdctl	r2,status
   146ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   146b0:	e0fffd17 	ldw	r3,-12(fp)
   146b4:	00bfff84 	movi	r2,-2
   146b8:	1884703a 	and	r2,r3,r2
   146bc:	1001703a 	wrctl	status,r2
  
  return context;
   146c0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   146c4:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   146c8:	e0bfff17 	ldw	r2,-4(fp)
   146cc:	10800117 	ldw	r2,4(r2)
   146d0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   146d4:	e0bffc17 	ldw	r2,-16(fp)
   146d8:	10c00117 	ldw	r3,4(r2)
   146dc:	e0bffc17 	ldw	r2,-16(fp)
   146e0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   146e4:	e0bffc17 	ldw	r2,-16(fp)
   146e8:	10c00117 	ldw	r3,4(r2)
   146ec:	e0bffc17 	ldw	r2,-16(fp)
   146f0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   146f4:	e0bffc17 	ldw	r2,-16(fp)
   146f8:	1000058d 	sth	zero,22(r2)
   146fc:	e0bffb17 	ldw	r2,-20(fp)
   14700:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14704:	e0bffe17 	ldw	r2,-8(fp)
   14708:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1470c:	0005883a 	mov	r2,zero
}
   14710:	e037883a 	mov	sp,fp
   14714:	df000017 	ldw	fp,0(sp)
   14718:	dec00104 	addi	sp,sp,4
   1471c:	f800283a 	ret

00014720 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   14720:	defff304 	addi	sp,sp,-52
   14724:	dfc00c15 	stw	ra,48(sp)
   14728:	df000b15 	stw	fp,44(sp)
   1472c:	df000b04 	addi	fp,sp,44
   14730:	e13ffd15 	stw	r4,-12(fp)
   14734:	2805883a 	mov	r2,r5
   14738:	e1bfff15 	stw	r6,-4(fp)
   1473c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14740:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14744:	e0bfff17 	ldw	r2,-4(fp)
   14748:	1000021e 	bne	r2,zero,14754 <OSQPend+0x34>
        return ((void *)0);
   1474c:	0005883a 	mov	r2,zero
   14750:	00009106 	br	14998 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   14754:	e0bffd17 	ldw	r2,-12(fp)
   14758:	1000051e 	bne	r2,zero,14770 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1475c:	e0bfff17 	ldw	r2,-4(fp)
   14760:	00c00104 	movi	r3,4
   14764:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14768:	0005883a 	mov	r2,zero
   1476c:	00008a06 	br	14998 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   14770:	e0bffd17 	ldw	r2,-12(fp)
   14774:	10800003 	ldbu	r2,0(r2)
   14778:	10803fcc 	andi	r2,r2,255
   1477c:	108000a0 	cmpeqi	r2,r2,2
   14780:	1000051e 	bne	r2,zero,14798 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   14784:	e0bfff17 	ldw	r2,-4(fp)
   14788:	00c00044 	movi	r3,1
   1478c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14790:	0005883a 	mov	r2,zero
   14794:	00008006 	br	14998 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   14798:	d0a82603 	ldbu	r2,-24424(gp)
   1479c:	10803fcc 	andi	r2,r2,255
   147a0:	10000526 	beq	r2,zero,147b8 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   147a4:	e0bfff17 	ldw	r2,-4(fp)
   147a8:	00c00084 	movi	r3,2
   147ac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   147b0:	0005883a 	mov	r2,zero
   147b4:	00007806 	br	14998 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   147b8:	d0a81803 	ldbu	r2,-24480(gp)
   147bc:	10803fcc 	andi	r2,r2,255
   147c0:	10000526 	beq	r2,zero,147d8 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   147c4:	e0bfff17 	ldw	r2,-4(fp)
   147c8:	00c00344 	movi	r3,13
   147cc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   147d0:	0005883a 	mov	r2,zero
   147d4:	00007006 	br	14998 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147d8:	0005303a 	rdctl	r2,status
   147dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147e0:	e0fffc17 	ldw	r3,-16(fp)
   147e4:	00bfff84 	movi	r2,-2
   147e8:	1884703a 	and	r2,r3,r2
   147ec:	1001703a 	wrctl	status,r2
  
  return context;
   147f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   147f4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   147f8:	e0bffd17 	ldw	r2,-12(fp)
   147fc:	10800117 	ldw	r2,4(r2)
   14800:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   14804:	e0bff817 	ldw	r2,-32(fp)
   14808:	1080058b 	ldhu	r2,22(r2)
   1480c:	10bfffcc 	andi	r2,r2,65535
   14810:	10001e26 	beq	r2,zero,1488c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   14814:	e0bff817 	ldw	r2,-32(fp)
   14818:	10800417 	ldw	r2,16(r2)
   1481c:	11000104 	addi	r4,r2,4
   14820:	e0fff817 	ldw	r3,-32(fp)
   14824:	19000415 	stw	r4,16(r3)
   14828:	10800017 	ldw	r2,0(r2)
   1482c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   14830:	e0bff817 	ldw	r2,-32(fp)
   14834:	1080058b 	ldhu	r2,22(r2)
   14838:	10bfffc4 	addi	r2,r2,-1
   1483c:	1007883a 	mov	r3,r2
   14840:	e0bff817 	ldw	r2,-32(fp)
   14844:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   14848:	e0bff817 	ldw	r2,-32(fp)
   1484c:	10c00417 	ldw	r3,16(r2)
   14850:	e0bff817 	ldw	r2,-32(fp)
   14854:	10800217 	ldw	r2,8(r2)
   14858:	1880041e 	bne	r3,r2,1486c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   1485c:	e0bff817 	ldw	r2,-32(fp)
   14860:	10c00117 	ldw	r3,4(r2)
   14864:	e0bff817 	ldw	r2,-32(fp)
   14868:	10c00415 	stw	r3,16(r2)
   1486c:	e0bff617 	ldw	r2,-40(fp)
   14870:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14874:	e0bff717 	ldw	r2,-36(fp)
   14878:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1487c:	e0bfff17 	ldw	r2,-4(fp)
   14880:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   14884:	e0bff517 	ldw	r2,-44(fp)
   14888:	00004306 	br	14998 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   1488c:	d0a82717 	ldw	r2,-24420(gp)
   14890:	d0e82717 	ldw	r3,-24420(gp)
   14894:	18c00c03 	ldbu	r3,48(r3)
   14898:	18c00114 	ori	r3,r3,4
   1489c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   148a0:	d0a82717 	ldw	r2,-24420(gp)
   148a4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   148a8:	d0a82717 	ldw	r2,-24420(gp)
   148ac:	e0fffe0b 	ldhu	r3,-8(fp)
   148b0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   148b4:	e13ffd17 	ldw	r4,-12(fp)
   148b8:	001116c0 	call	1116c <OS_EventTaskWait>
   148bc:	e0bff617 	ldw	r2,-40(fp)
   148c0:	e0bffb15 	stw	r2,-20(fp)
   148c4:	e0bffb17 	ldw	r2,-20(fp)
   148c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   148cc:	0011a200 	call	11a20 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   148d0:	0005303a 	rdctl	r2,status
   148d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   148d8:	e0fff917 	ldw	r3,-28(fp)
   148dc:	00bfff84 	movi	r2,-2
   148e0:	1884703a 	and	r2,r3,r2
   148e4:	1001703a 	wrctl	status,r2
  
  return context;
   148e8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   148ec:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   148f0:	d0a82717 	ldw	r2,-24420(gp)
   148f4:	10800c43 	ldbu	r2,49(r2)
   148f8:	10803fcc 	andi	r2,r2,255
   148fc:	10000326 	beq	r2,zero,1490c <OSQPend+0x1ec>
   14900:	108000a0 	cmpeqi	r2,r2,2
   14904:	1000071e 	bne	r2,zero,14924 <OSQPend+0x204>
   14908:	00000b06 	br	14938 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   1490c:	d0a82717 	ldw	r2,-24420(gp)
   14910:	10800917 	ldw	r2,36(r2)
   14914:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   14918:	e0bfff17 	ldw	r2,-4(fp)
   1491c:	10000005 	stb	zero,0(r2)
             break;
   14920:	00000e06 	br	1495c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   14924:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   14928:	e0bfff17 	ldw	r2,-4(fp)
   1492c:	00c00384 	movi	r3,14
   14930:	10c00005 	stb	r3,0(r2)
             break;
   14934:	00000906 	br	1495c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   14938:	d0a82717 	ldw	r2,-24420(gp)
   1493c:	e17ffd17 	ldw	r5,-12(fp)
   14940:	1009883a 	mov	r4,r2
   14944:	00113cc0 	call	113cc <OS_EventTaskRemove>
             pmsg = (void *)0;
   14948:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1494c:	e0bfff17 	ldw	r2,-4(fp)
   14950:	00c00284 	movi	r3,10
   14954:	10c00005 	stb	r3,0(r2)
             break;
   14958:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1495c:	d0a82717 	ldw	r2,-24420(gp)
   14960:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   14964:	d0a82717 	ldw	r2,-24420(gp)
   14968:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1496c:	d0a82717 	ldw	r2,-24420(gp)
   14970:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   14974:	d0a82717 	ldw	r2,-24420(gp)
   14978:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   1497c:	d0a82717 	ldw	r2,-24420(gp)
   14980:	10000915 	stw	zero,36(r2)
   14984:	e0bff617 	ldw	r2,-40(fp)
   14988:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1498c:	e0bffa17 	ldw	r2,-24(fp)
   14990:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   14994:	e0bff517 	ldw	r2,-44(fp)
}
   14998:	e037883a 	mov	sp,fp
   1499c:	dfc00117 	ldw	ra,4(sp)
   149a0:	df000017 	ldw	fp,0(sp)
   149a4:	dec00204 	addi	sp,sp,8
   149a8:	f800283a 	ret

000149ac <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   149ac:	defff604 	addi	sp,sp,-40
   149b0:	dfc00915 	stw	ra,36(sp)
   149b4:	df000815 	stw	fp,32(sp)
   149b8:	df000804 	addi	fp,sp,32
   149bc:	e13ffd15 	stw	r4,-12(fp)
   149c0:	2805883a 	mov	r2,r5
   149c4:	e1bfff15 	stw	r6,-4(fp)
   149c8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   149cc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   149d0:	e0bfff17 	ldw	r2,-4(fp)
   149d4:	1000021e 	bne	r2,zero,149e0 <OSQPendAbort+0x34>
        return (0);
   149d8:	0005883a 	mov	r2,zero
   149dc:	00004906 	br	14b04 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   149e0:	e0bffd17 	ldw	r2,-12(fp)
   149e4:	1000051e 	bne	r2,zero,149fc <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   149e8:	e0bfff17 	ldw	r2,-4(fp)
   149ec:	00c00104 	movi	r3,4
   149f0:	10c00005 	stb	r3,0(r2)
        return (0);
   149f4:	0005883a 	mov	r2,zero
   149f8:	00004206 	br	14b04 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   149fc:	e0bffd17 	ldw	r2,-12(fp)
   14a00:	10800003 	ldbu	r2,0(r2)
   14a04:	10803fcc 	andi	r2,r2,255
   14a08:	108000a0 	cmpeqi	r2,r2,2
   14a0c:	1000051e 	bne	r2,zero,14a24 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   14a10:	e0bfff17 	ldw	r2,-4(fp)
   14a14:	00c00044 	movi	r3,1
   14a18:	10c00005 	stb	r3,0(r2)
        return (0);
   14a1c:	0005883a 	mov	r2,zero
   14a20:	00003806 	br	14b04 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a24:	0005303a 	rdctl	r2,status
   14a28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a2c:	e0fffc17 	ldw	r3,-16(fp)
   14a30:	00bfff84 	movi	r2,-2
   14a34:	1884703a 	and	r2,r3,r2
   14a38:	1001703a 	wrctl	status,r2
  
  return context;
   14a3c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14a40:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   14a44:	e0bffd17 	ldw	r2,-12(fp)
   14a48:	10800283 	ldbu	r2,10(r2)
   14a4c:	10803fcc 	andi	r2,r2,255
   14a50:	10002526 	beq	r2,zero,14ae8 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   14a54:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   14a58:	e0bffe03 	ldbu	r2,-8(fp)
   14a5c:	10800060 	cmpeqi	r2,r2,1
   14a60:	10000e26 	beq	r2,zero,14a9c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   14a64:	00000806 	br	14a88 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   14a68:	01c00084 	movi	r7,2
   14a6c:	01800104 	movi	r6,4
   14a70:	000b883a 	mov	r5,zero
   14a74:	e13ffd17 	ldw	r4,-12(fp)
   14a78:	0010fd40 	call	10fd4 <OS_EventTaskRdy>
                     nbr_tasks++;
   14a7c:	e0bff803 	ldbu	r2,-32(fp)
   14a80:	10800044 	addi	r2,r2,1
   14a84:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   14a88:	e0bffd17 	ldw	r2,-12(fp)
   14a8c:	10800283 	ldbu	r2,10(r2)
   14a90:	10803fcc 	andi	r2,r2,255
   14a94:	103ff41e 	bne	r2,zero,14a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014a68>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   14a98:	00000906 	br	14ac0 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   14a9c:	01c00084 	movi	r7,2
   14aa0:	01800104 	movi	r6,4
   14aa4:	000b883a 	mov	r5,zero
   14aa8:	e13ffd17 	ldw	r4,-12(fp)
   14aac:	0010fd40 	call	10fd4 <OS_EventTaskRdy>
                 nbr_tasks++;
   14ab0:	e0bff803 	ldbu	r2,-32(fp)
   14ab4:	10800044 	addi	r2,r2,1
   14ab8:	e0bff805 	stb	r2,-32(fp)
                 break;
   14abc:	0001883a 	nop
   14ac0:	e0bff917 	ldw	r2,-28(fp)
   14ac4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ac8:	e0bffa17 	ldw	r2,-24(fp)
   14acc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   14ad0:	0011a200 	call	11a20 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   14ad4:	e0bfff17 	ldw	r2,-4(fp)
   14ad8:	00c00384 	movi	r3,14
   14adc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   14ae0:	e0bff803 	ldbu	r2,-32(fp)
   14ae4:	00000706 	br	14b04 <OSQPendAbort+0x158>
   14ae8:	e0bff917 	ldw	r2,-28(fp)
   14aec:	e0bffb15 	stw	r2,-20(fp)
   14af0:	e0bffb17 	ldw	r2,-20(fp)
   14af4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14af8:	e0bfff17 	ldw	r2,-4(fp)
   14afc:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   14b00:	0005883a 	mov	r2,zero
}
   14b04:	e037883a 	mov	sp,fp
   14b08:	dfc00117 	ldw	ra,4(sp)
   14b0c:	df000017 	ldw	fp,0(sp)
   14b10:	dec00204 	addi	sp,sp,8
   14b14:	f800283a 	ret

00014b18 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   14b18:	defff604 	addi	sp,sp,-40
   14b1c:	dfc00915 	stw	ra,36(sp)
   14b20:	df000815 	stw	fp,32(sp)
   14b24:	df000804 	addi	fp,sp,32
   14b28:	e13ffe15 	stw	r4,-8(fp)
   14b2c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14b30:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   14b34:	e0bffe17 	ldw	r2,-8(fp)
   14b38:	1000021e 	bne	r2,zero,14b44 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   14b3c:	00800104 	movi	r2,4
   14b40:	00004a06 	br	14c6c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   14b44:	e0bffe17 	ldw	r2,-8(fp)
   14b48:	10800003 	ldbu	r2,0(r2)
   14b4c:	10803fcc 	andi	r2,r2,255
   14b50:	108000a0 	cmpeqi	r2,r2,2
   14b54:	1000021e 	bne	r2,zero,14b60 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   14b58:	00800044 	movi	r2,1
   14b5c:	00004306 	br	14c6c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b60:	0005303a 	rdctl	r2,status
   14b64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b68:	e0fffd17 	ldw	r3,-12(fp)
   14b6c:	00bfff84 	movi	r2,-2
   14b70:	1884703a 	and	r2,r3,r2
   14b74:	1001703a 	wrctl	status,r2
  
  return context;
   14b78:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14b7c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   14b80:	e0bffe17 	ldw	r2,-8(fp)
   14b84:	10800283 	ldbu	r2,10(r2)
   14b88:	10803fcc 	andi	r2,r2,255
   14b8c:	10000c26 	beq	r2,zero,14bc0 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14b90:	000f883a 	mov	r7,zero
   14b94:	01800104 	movi	r6,4
   14b98:	e17fff17 	ldw	r5,-4(fp)
   14b9c:	e13ffe17 	ldw	r4,-8(fp)
   14ba0:	0010fd40 	call	10fd4 <OS_EventTaskRdy>
   14ba4:	e0bff817 	ldw	r2,-32(fp)
   14ba8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14bac:	e0bff917 	ldw	r2,-28(fp)
   14bb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   14bb4:	0011a200 	call	11a20 <OS_Sched>
        return (OS_ERR_NONE);
   14bb8:	0005883a 	mov	r2,zero
   14bbc:	00002b06 	br	14c6c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   14bc0:	e0bffe17 	ldw	r2,-8(fp)
   14bc4:	10800117 	ldw	r2,4(r2)
   14bc8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   14bcc:	e0bffb17 	ldw	r2,-20(fp)
   14bd0:	10c0058b 	ldhu	r3,22(r2)
   14bd4:	e0bffb17 	ldw	r2,-20(fp)
   14bd8:	1080050b 	ldhu	r2,20(r2)
   14bdc:	18ffffcc 	andi	r3,r3,65535
   14be0:	10bfffcc 	andi	r2,r2,65535
   14be4:	18800636 	bltu	r3,r2,14c00 <OSQPost+0xe8>
   14be8:	e0bff817 	ldw	r2,-32(fp)
   14bec:	e0bffa15 	stw	r2,-24(fp)
   14bf0:	e0bffa17 	ldw	r2,-24(fp)
   14bf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   14bf8:	00800784 	movi	r2,30
   14bfc:	00001b06 	br	14c6c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   14c00:	e0bffb17 	ldw	r2,-20(fp)
   14c04:	10800317 	ldw	r2,12(r2)
   14c08:	11000104 	addi	r4,r2,4
   14c0c:	e0fffb17 	ldw	r3,-20(fp)
   14c10:	19000315 	stw	r4,12(r3)
   14c14:	e0ffff17 	ldw	r3,-4(fp)
   14c18:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   14c1c:	e0bffb17 	ldw	r2,-20(fp)
   14c20:	1080058b 	ldhu	r2,22(r2)
   14c24:	10800044 	addi	r2,r2,1
   14c28:	1007883a 	mov	r3,r2
   14c2c:	e0bffb17 	ldw	r2,-20(fp)
   14c30:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   14c34:	e0bffb17 	ldw	r2,-20(fp)
   14c38:	10c00317 	ldw	r3,12(r2)
   14c3c:	e0bffb17 	ldw	r2,-20(fp)
   14c40:	10800217 	ldw	r2,8(r2)
   14c44:	1880041e 	bne	r3,r2,14c58 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   14c48:	e0bffb17 	ldw	r2,-20(fp)
   14c4c:	10c00117 	ldw	r3,4(r2)
   14c50:	e0bffb17 	ldw	r2,-20(fp)
   14c54:	10c00315 	stw	r3,12(r2)
   14c58:	e0bff817 	ldw	r2,-32(fp)
   14c5c:	e0bffc15 	stw	r2,-16(fp)
   14c60:	e0bffc17 	ldw	r2,-16(fp)
   14c64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14c68:	0005883a 	mov	r2,zero
}
   14c6c:	e037883a 	mov	sp,fp
   14c70:	dfc00117 	ldw	ra,4(sp)
   14c74:	df000017 	ldw	fp,0(sp)
   14c78:	dec00204 	addi	sp,sp,8
   14c7c:	f800283a 	ret

00014c80 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   14c80:	defff604 	addi	sp,sp,-40
   14c84:	dfc00915 	stw	ra,36(sp)
   14c88:	df000815 	stw	fp,32(sp)
   14c8c:	df000804 	addi	fp,sp,32
   14c90:	e13ffe15 	stw	r4,-8(fp)
   14c94:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14c98:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14c9c:	e0bffe17 	ldw	r2,-8(fp)
   14ca0:	1000021e 	bne	r2,zero,14cac <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   14ca4:	00800104 	movi	r2,4
   14ca8:	00004c06 	br	14ddc <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   14cac:	e0bffe17 	ldw	r2,-8(fp)
   14cb0:	10800003 	ldbu	r2,0(r2)
   14cb4:	10803fcc 	andi	r2,r2,255
   14cb8:	108000a0 	cmpeqi	r2,r2,2
   14cbc:	1000021e 	bne	r2,zero,14cc8 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   14cc0:	00800044 	movi	r2,1
   14cc4:	00004506 	br	14ddc <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cc8:	0005303a 	rdctl	r2,status
   14ccc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cd0:	e0fffd17 	ldw	r3,-12(fp)
   14cd4:	00bfff84 	movi	r2,-2
   14cd8:	1884703a 	and	r2,r3,r2
   14cdc:	1001703a 	wrctl	status,r2
  
  return context;
   14ce0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14ce4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   14ce8:	e0bffe17 	ldw	r2,-8(fp)
   14cec:	10800283 	ldbu	r2,10(r2)
   14cf0:	10803fcc 	andi	r2,r2,255
   14cf4:	10000c26 	beq	r2,zero,14d28 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14cf8:	000f883a 	mov	r7,zero
   14cfc:	01800104 	movi	r6,4
   14d00:	e17fff17 	ldw	r5,-4(fp)
   14d04:	e13ffe17 	ldw	r4,-8(fp)
   14d08:	0010fd40 	call	10fd4 <OS_EventTaskRdy>
   14d0c:	e0bff817 	ldw	r2,-32(fp)
   14d10:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d14:	e0bff917 	ldw	r2,-28(fp)
   14d18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   14d1c:	0011a200 	call	11a20 <OS_Sched>
        return (OS_ERR_NONE);
   14d20:	0005883a 	mov	r2,zero
   14d24:	00002d06 	br	14ddc <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   14d28:	e0bffe17 	ldw	r2,-8(fp)
   14d2c:	10800117 	ldw	r2,4(r2)
   14d30:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   14d34:	e0bffb17 	ldw	r2,-20(fp)
   14d38:	10c0058b 	ldhu	r3,22(r2)
   14d3c:	e0bffb17 	ldw	r2,-20(fp)
   14d40:	1080050b 	ldhu	r2,20(r2)
   14d44:	18ffffcc 	andi	r3,r3,65535
   14d48:	10bfffcc 	andi	r2,r2,65535
   14d4c:	18800636 	bltu	r3,r2,14d68 <OSQPostFront+0xe8>
   14d50:	e0bff817 	ldw	r2,-32(fp)
   14d54:	e0bffa15 	stw	r2,-24(fp)
   14d58:	e0bffa17 	ldw	r2,-24(fp)
   14d5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   14d60:	00800784 	movi	r2,30
   14d64:	00001d06 	br	14ddc <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   14d68:	e0bffb17 	ldw	r2,-20(fp)
   14d6c:	10c00417 	ldw	r3,16(r2)
   14d70:	e0bffb17 	ldw	r2,-20(fp)
   14d74:	10800117 	ldw	r2,4(r2)
   14d78:	1880041e 	bne	r3,r2,14d8c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   14d7c:	e0bffb17 	ldw	r2,-20(fp)
   14d80:	10c00217 	ldw	r3,8(r2)
   14d84:	e0bffb17 	ldw	r2,-20(fp)
   14d88:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   14d8c:	e0bffb17 	ldw	r2,-20(fp)
   14d90:	10800417 	ldw	r2,16(r2)
   14d94:	10ffff04 	addi	r3,r2,-4
   14d98:	e0bffb17 	ldw	r2,-20(fp)
   14d9c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   14da0:	e0bffb17 	ldw	r2,-20(fp)
   14da4:	10800417 	ldw	r2,16(r2)
   14da8:	e0ffff17 	ldw	r3,-4(fp)
   14dac:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   14db0:	e0bffb17 	ldw	r2,-20(fp)
   14db4:	1080058b 	ldhu	r2,22(r2)
   14db8:	10800044 	addi	r2,r2,1
   14dbc:	1007883a 	mov	r3,r2
   14dc0:	e0bffb17 	ldw	r2,-20(fp)
   14dc4:	10c0058d 	sth	r3,22(r2)
   14dc8:	e0bff817 	ldw	r2,-32(fp)
   14dcc:	e0bffc15 	stw	r2,-16(fp)
   14dd0:	e0bffc17 	ldw	r2,-16(fp)
   14dd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14dd8:	0005883a 	mov	r2,zero
}
   14ddc:	e037883a 	mov	sp,fp
   14de0:	dfc00117 	ldw	ra,4(sp)
   14de4:	df000017 	ldw	fp,0(sp)
   14de8:	dec00204 	addi	sp,sp,8
   14dec:	f800283a 	ret

00014df0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   14df0:	defff504 	addi	sp,sp,-44
   14df4:	dfc00a15 	stw	ra,40(sp)
   14df8:	df000915 	stw	fp,36(sp)
   14dfc:	df000904 	addi	fp,sp,36
   14e00:	e13ffd15 	stw	r4,-12(fp)
   14e04:	e17ffe15 	stw	r5,-8(fp)
   14e08:	3005883a 	mov	r2,r6
   14e0c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14e10:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14e14:	e0bffd17 	ldw	r2,-12(fp)
   14e18:	1000021e 	bne	r2,zero,14e24 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   14e1c:	00800104 	movi	r2,4
   14e20:	00007106 	br	14fe8 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   14e24:	e0bffd17 	ldw	r2,-12(fp)
   14e28:	10800003 	ldbu	r2,0(r2)
   14e2c:	10803fcc 	andi	r2,r2,255
   14e30:	108000a0 	cmpeqi	r2,r2,2
   14e34:	1000021e 	bne	r2,zero,14e40 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   14e38:	00800044 	movi	r2,1
   14e3c:	00006a06 	br	14fe8 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e40:	0005303a 	rdctl	r2,status
   14e44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e48:	e0fffc17 	ldw	r3,-16(fp)
   14e4c:	00bfff84 	movi	r2,-2
   14e50:	1884703a 	and	r2,r3,r2
   14e54:	1001703a 	wrctl	status,r2
  
  return context;
   14e58:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14e5c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   14e60:	e0bffd17 	ldw	r2,-12(fp)
   14e64:	10800283 	ldbu	r2,10(r2)
   14e68:	10803fcc 	andi	r2,r2,255
   14e6c:	10001d26 	beq	r2,zero,14ee4 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   14e70:	e0bfff03 	ldbu	r2,-4(fp)
   14e74:	1080004c 	andi	r2,r2,1
   14e78:	10000b26 	beq	r2,zero,14ea8 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   14e7c:	00000506 	br	14e94 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14e80:	000f883a 	mov	r7,zero
   14e84:	01800104 	movi	r6,4
   14e88:	e17ffe17 	ldw	r5,-8(fp)
   14e8c:	e13ffd17 	ldw	r4,-12(fp)
   14e90:	0010fd40 	call	10fd4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   14e94:	e0bffd17 	ldw	r2,-12(fp)
   14e98:	10800283 	ldbu	r2,10(r2)
   14e9c:	10803fcc 	andi	r2,r2,255
   14ea0:	103ff71e 	bne	r2,zero,14e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014e80>
   14ea4:	00000506 	br	14ebc <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14ea8:	000f883a 	mov	r7,zero
   14eac:	01800104 	movi	r6,4
   14eb0:	e17ffe17 	ldw	r5,-8(fp)
   14eb4:	e13ffd17 	ldw	r4,-12(fp)
   14eb8:	0010fd40 	call	10fd4 <OS_EventTaskRdy>
   14ebc:	e0bff717 	ldw	r2,-36(fp)
   14ec0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ec4:	e0bff817 	ldw	r2,-32(fp)
   14ec8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   14ecc:	e0bfff03 	ldbu	r2,-4(fp)
   14ed0:	1080010c 	andi	r2,r2,4
   14ed4:	1000011e 	bne	r2,zero,14edc <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   14ed8:	0011a200 	call	11a20 <OS_Sched>
        }
        return (OS_ERR_NONE);
   14edc:	0005883a 	mov	r2,zero
   14ee0:	00004106 	br	14fe8 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   14ee4:	e0bffd17 	ldw	r2,-12(fp)
   14ee8:	10800117 	ldw	r2,4(r2)
   14eec:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   14ef0:	e0bffa17 	ldw	r2,-24(fp)
   14ef4:	10c0058b 	ldhu	r3,22(r2)
   14ef8:	e0bffa17 	ldw	r2,-24(fp)
   14efc:	1080050b 	ldhu	r2,20(r2)
   14f00:	18ffffcc 	andi	r3,r3,65535
   14f04:	10bfffcc 	andi	r2,r2,65535
   14f08:	18800636 	bltu	r3,r2,14f24 <OSQPostOpt+0x134>
   14f0c:	e0bff717 	ldw	r2,-36(fp)
   14f10:	e0bff915 	stw	r2,-28(fp)
   14f14:	e0bff917 	ldw	r2,-28(fp)
   14f18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   14f1c:	00800784 	movi	r2,30
   14f20:	00003106 	br	14fe8 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   14f24:	e0bfff03 	ldbu	r2,-4(fp)
   14f28:	1080008c 	andi	r2,r2,2
   14f2c:	10001326 	beq	r2,zero,14f7c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   14f30:	e0bffa17 	ldw	r2,-24(fp)
   14f34:	10c00417 	ldw	r3,16(r2)
   14f38:	e0bffa17 	ldw	r2,-24(fp)
   14f3c:	10800117 	ldw	r2,4(r2)
   14f40:	1880041e 	bne	r3,r2,14f54 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   14f44:	e0bffa17 	ldw	r2,-24(fp)
   14f48:	10c00217 	ldw	r3,8(r2)
   14f4c:	e0bffa17 	ldw	r2,-24(fp)
   14f50:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   14f54:	e0bffa17 	ldw	r2,-24(fp)
   14f58:	10800417 	ldw	r2,16(r2)
   14f5c:	10ffff04 	addi	r3,r2,-4
   14f60:	e0bffa17 	ldw	r2,-24(fp)
   14f64:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   14f68:	e0bffa17 	ldw	r2,-24(fp)
   14f6c:	10800417 	ldw	r2,16(r2)
   14f70:	e0fffe17 	ldw	r3,-8(fp)
   14f74:	10c00015 	stw	r3,0(r2)
   14f78:	00001006 	br	14fbc <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   14f7c:	e0bffa17 	ldw	r2,-24(fp)
   14f80:	10800317 	ldw	r2,12(r2)
   14f84:	11000104 	addi	r4,r2,4
   14f88:	e0fffa17 	ldw	r3,-24(fp)
   14f8c:	19000315 	stw	r4,12(r3)
   14f90:	e0fffe17 	ldw	r3,-8(fp)
   14f94:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   14f98:	e0bffa17 	ldw	r2,-24(fp)
   14f9c:	10c00317 	ldw	r3,12(r2)
   14fa0:	e0bffa17 	ldw	r2,-24(fp)
   14fa4:	10800217 	ldw	r2,8(r2)
   14fa8:	1880041e 	bne	r3,r2,14fbc <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   14fac:	e0bffa17 	ldw	r2,-24(fp)
   14fb0:	10c00117 	ldw	r3,4(r2)
   14fb4:	e0bffa17 	ldw	r2,-24(fp)
   14fb8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   14fbc:	e0bffa17 	ldw	r2,-24(fp)
   14fc0:	1080058b 	ldhu	r2,22(r2)
   14fc4:	10800044 	addi	r2,r2,1
   14fc8:	1007883a 	mov	r3,r2
   14fcc:	e0bffa17 	ldw	r2,-24(fp)
   14fd0:	10c0058d 	sth	r3,22(r2)
   14fd4:	e0bff717 	ldw	r2,-36(fp)
   14fd8:	e0bffb15 	stw	r2,-20(fp)
   14fdc:	e0bffb17 	ldw	r2,-20(fp)
   14fe0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14fe4:	0005883a 	mov	r2,zero
}
   14fe8:	e037883a 	mov	sp,fp
   14fec:	dfc00117 	ldw	ra,4(sp)
   14ff0:	df000017 	ldw	fp,0(sp)
   14ff4:	dec00204 	addi	sp,sp,8
   14ff8:	f800283a 	ret

00014ffc <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   14ffc:	defff604 	addi	sp,sp,-40
   15000:	df000915 	stw	fp,36(sp)
   15004:	df000904 	addi	fp,sp,36
   15008:	e13ffe15 	stw	r4,-8(fp)
   1500c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15010:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   15014:	e0bffe17 	ldw	r2,-8(fp)
   15018:	1000021e 	bne	r2,zero,15024 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1501c:	00800104 	movi	r2,4
   15020:	00004906 	br	15148 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   15024:	e0bfff17 	ldw	r2,-4(fp)
   15028:	1000021e 	bne	r2,zero,15034 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1502c:	00800244 	movi	r2,9
   15030:	00004506 	br	15148 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   15034:	e0bffe17 	ldw	r2,-8(fp)
   15038:	10800003 	ldbu	r2,0(r2)
   1503c:	10803fcc 	andi	r2,r2,255
   15040:	108000a0 	cmpeqi	r2,r2,2
   15044:	1000021e 	bne	r2,zero,15050 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   15048:	00800044 	movi	r2,1
   1504c:	00003e06 	br	15148 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15050:	0005303a 	rdctl	r2,status
   15054:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15058:	e0fffd17 	ldw	r3,-12(fp)
   1505c:	00bfff84 	movi	r2,-2
   15060:	1884703a 	and	r2,r3,r2
   15064:	1001703a 	wrctl	status,r2
  
  return context;
   15068:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1506c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   15070:	e0bffe17 	ldw	r2,-8(fp)
   15074:	10c00283 	ldbu	r3,10(r2)
   15078:	e0bfff17 	ldw	r2,-4(fp)
   1507c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   15080:	e0bffe17 	ldw	r2,-8(fp)
   15084:	108002c4 	addi	r2,r2,11
   15088:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   1508c:	e0bfff17 	ldw	r2,-4(fp)
   15090:	10800204 	addi	r2,r2,8
   15094:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15098:	e03ff705 	stb	zero,-36(fp)
   1509c:	00000b06 	br	150cc <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   150a0:	e0bff917 	ldw	r2,-28(fp)
   150a4:	10c00044 	addi	r3,r2,1
   150a8:	e0fff915 	stw	r3,-28(fp)
   150ac:	e0fff817 	ldw	r3,-32(fp)
   150b0:	19000044 	addi	r4,r3,1
   150b4:	e13ff815 	stw	r4,-32(fp)
   150b8:	18c00003 	ldbu	r3,0(r3)
   150bc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   150c0:	e0bff703 	ldbu	r2,-36(fp)
   150c4:	10800044 	addi	r2,r2,1
   150c8:	e0bff705 	stb	r2,-36(fp)
   150cc:	e0bff703 	ldbu	r2,-36(fp)
   150d0:	108000f0 	cmpltui	r2,r2,3
   150d4:	103ff21e 	bne	r2,zero,150a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70150a0>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   150d8:	e0bffe17 	ldw	r2,-8(fp)
   150dc:	10800117 	ldw	r2,4(r2)
   150e0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   150e4:	e0bffc17 	ldw	r2,-16(fp)
   150e8:	1080058b 	ldhu	r2,22(r2)
   150ec:	10bfffcc 	andi	r2,r2,65535
   150f0:	10000626 	beq	r2,zero,1510c <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   150f4:	e0bffc17 	ldw	r2,-16(fp)
   150f8:	10800417 	ldw	r2,16(r2)
   150fc:	10c00017 	ldw	r3,0(r2)
   15100:	e0bfff17 	ldw	r2,-4(fp)
   15104:	10c00015 	stw	r3,0(r2)
   15108:	00000206 	br	15114 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   1510c:	e0bfff17 	ldw	r2,-4(fp)
   15110:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   15114:	e0bffc17 	ldw	r2,-16(fp)
   15118:	10c0058b 	ldhu	r3,22(r2)
   1511c:	e0bfff17 	ldw	r2,-4(fp)
   15120:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   15124:	e0bffc17 	ldw	r2,-16(fp)
   15128:	10c0050b 	ldhu	r3,20(r2)
   1512c:	e0bfff17 	ldw	r2,-4(fp)
   15130:	10c0018d 	sth	r3,6(r2)
   15134:	e0bffa17 	ldw	r2,-24(fp)
   15138:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1513c:	e0bffb17 	ldw	r2,-20(fp)
   15140:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15144:	0005883a 	mov	r2,zero
}
   15148:	e037883a 	mov	sp,fp
   1514c:	df000017 	ldw	fp,0(sp)
   15150:	dec00104 	addi	sp,sp,4
   15154:	f800283a 	ret

00015158 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   15158:	defffb04 	addi	sp,sp,-20
   1515c:	dfc00415 	stw	ra,16(sp)
   15160:	df000315 	stw	fp,12(sp)
   15164:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   15168:	01407804 	movi	r5,480
   1516c:	010000b4 	movhi	r4,2
   15170:	21055904 	addi	r4,r4,5476
   15174:	00119640 	call	11964 <OS_MemClr>
    pq1 = &OSQTbl[0];
   15178:	008000b4 	movhi	r2,2
   1517c:	10855904 	addi	r2,r2,5476
   15180:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   15184:	008000b4 	movhi	r2,2
   15188:	10855f04 	addi	r2,r2,5500
   1518c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   15190:	e03ffd0d 	sth	zero,-12(fp)
   15194:	00000c06 	br	151c8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   15198:	e0bffe17 	ldw	r2,-8(fp)
   1519c:	e0ffff17 	ldw	r3,-4(fp)
   151a0:	10c00015 	stw	r3,0(r2)
        pq1++;
   151a4:	e0bffe17 	ldw	r2,-8(fp)
   151a8:	10800604 	addi	r2,r2,24
   151ac:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   151b0:	e0bfff17 	ldw	r2,-4(fp)
   151b4:	10800604 	addi	r2,r2,24
   151b8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   151bc:	e0bffd0b 	ldhu	r2,-12(fp)
   151c0:	10800044 	addi	r2,r2,1
   151c4:	e0bffd0d 	sth	r2,-12(fp)
   151c8:	e0bffd0b 	ldhu	r2,-12(fp)
   151cc:	108004f0 	cmpltui	r2,r2,19
   151d0:	103ff11e 	bne	r2,zero,15198 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015198>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   151d4:	e0bffe17 	ldw	r2,-8(fp)
   151d8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   151dc:	008000b4 	movhi	r2,2
   151e0:	10855904 	addi	r2,r2,5476
   151e4:	d0a82315 	stw	r2,-24436(gp)
#endif
}
   151e8:	0001883a 	nop
   151ec:	e037883a 	mov	sp,fp
   151f0:	dfc00117 	ldw	ra,4(sp)
   151f4:	df000017 	ldw	fp,0(sp)
   151f8:	dec00204 	addi	sp,sp,8
   151fc:	f800283a 	ret

00015200 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   15200:	defffa04 	addi	sp,sp,-24
   15204:	df000515 	stw	fp,20(sp)
   15208:	df000504 	addi	fp,sp,20
   1520c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15210:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15214:	e0bfff17 	ldw	r2,-4(fp)
   15218:	1000021e 	bne	r2,zero,15224 <OSSemAccept+0x24>
        return (0);
   1521c:	0005883a 	mov	r2,zero
   15220:	00001f06 	br	152a0 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15224:	e0bfff17 	ldw	r2,-4(fp)
   15228:	10800003 	ldbu	r2,0(r2)
   1522c:	10803fcc 	andi	r2,r2,255
   15230:	108000e0 	cmpeqi	r2,r2,3
   15234:	1000021e 	bne	r2,zero,15240 <OSSemAccept+0x40>
        return (0);
   15238:	0005883a 	mov	r2,zero
   1523c:	00001806 	br	152a0 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15240:	0005303a 	rdctl	r2,status
   15244:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15248:	e0fffe17 	ldw	r3,-8(fp)
   1524c:	00bfff84 	movi	r2,-2
   15250:	1884703a 	and	r2,r3,r2
   15254:	1001703a 	wrctl	status,r2
  
  return context;
   15258:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1525c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   15260:	e0bfff17 	ldw	r2,-4(fp)
   15264:	1080020b 	ldhu	r2,8(r2)
   15268:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   1526c:	e0bffd0b 	ldhu	r2,-12(fp)
   15270:	10000626 	beq	r2,zero,1528c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   15274:	e0bfff17 	ldw	r2,-4(fp)
   15278:	1080020b 	ldhu	r2,8(r2)
   1527c:	10bfffc4 	addi	r2,r2,-1
   15280:	1007883a 	mov	r3,r2
   15284:	e0bfff17 	ldw	r2,-4(fp)
   15288:	10c0020d 	sth	r3,8(r2)
   1528c:	e0bffb17 	ldw	r2,-20(fp)
   15290:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15294:	e0bffc17 	ldw	r2,-16(fp)
   15298:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   1529c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   152a0:	e037883a 	mov	sp,fp
   152a4:	df000017 	ldw	fp,0(sp)
   152a8:	dec00104 	addi	sp,sp,4
   152ac:	f800283a 	ret

000152b0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   152b0:	defff904 	addi	sp,sp,-28
   152b4:	dfc00615 	stw	ra,24(sp)
   152b8:	df000515 	stw	fp,20(sp)
   152bc:	df000504 	addi	fp,sp,20
   152c0:	2005883a 	mov	r2,r4
   152c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   152c8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   152cc:	d0a82603 	ldbu	r2,-24424(gp)
   152d0:	10803fcc 	andi	r2,r2,255
   152d4:	10000226 	beq	r2,zero,152e0 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   152d8:	0005883a 	mov	r2,zero
   152dc:	00002506 	br	15374 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   152e0:	0005303a 	rdctl	r2,status
   152e4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   152e8:	e0fffe17 	ldw	r3,-8(fp)
   152ec:	00bfff84 	movi	r2,-2
   152f0:	1884703a 	and	r2,r3,r2
   152f4:	1001703a 	wrctl	status,r2
  
  return context;
   152f8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   152fc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   15300:	d0a82517 	ldw	r2,-24428(gp)
   15304:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   15308:	d0a82517 	ldw	r2,-24428(gp)
   1530c:	10000326 	beq	r2,zero,1531c <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   15310:	d0a82517 	ldw	r2,-24428(gp)
   15314:	10800117 	ldw	r2,4(r2)
   15318:	d0a82515 	stw	r2,-24428(gp)
   1531c:	e0bffb17 	ldw	r2,-20(fp)
   15320:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15324:	e0bffc17 	ldw	r2,-16(fp)
   15328:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   1532c:	e0bffd17 	ldw	r2,-12(fp)
   15330:	10000f26 	beq	r2,zero,15370 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   15334:	e0bffd17 	ldw	r2,-12(fp)
   15338:	00c000c4 	movi	r3,3
   1533c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   15340:	e0bffd17 	ldw	r2,-12(fp)
   15344:	e0ffff0b 	ldhu	r3,-4(fp)
   15348:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   1534c:	e0bffd17 	ldw	r2,-12(fp)
   15350:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   15354:	e0bffd17 	ldw	r2,-12(fp)
   15358:	00c00fc4 	movi	r3,63
   1535c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   15360:	e0bffd17 	ldw	r2,-12(fp)
   15364:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   15368:	e13ffd17 	ldw	r4,-12(fp)
   1536c:	00115840 	call	11584 <OS_EventWaitListInit>
    }
    return (pevent);
   15370:	e0bffd17 	ldw	r2,-12(fp)
}
   15374:	e037883a 	mov	sp,fp
   15378:	dfc00117 	ldw	ra,4(sp)
   1537c:	df000017 	ldw	fp,0(sp)
   15380:	dec00204 	addi	sp,sp,8
   15384:	f800283a 	ret

00015388 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   15388:	defff304 	addi	sp,sp,-52
   1538c:	dfc00c15 	stw	ra,48(sp)
   15390:	df000b15 	stw	fp,44(sp)
   15394:	df000b04 	addi	fp,sp,44
   15398:	e13ffd15 	stw	r4,-12(fp)
   1539c:	2805883a 	mov	r2,r5
   153a0:	e1bfff15 	stw	r6,-4(fp)
   153a4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   153a8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   153ac:	e0bfff17 	ldw	r2,-4(fp)
   153b0:	1000021e 	bne	r2,zero,153bc <OSSemDel+0x34>
        return (pevent);
   153b4:	e0bffd17 	ldw	r2,-12(fp)
   153b8:	00007e06 	br	155b4 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   153bc:	e0bffd17 	ldw	r2,-12(fp)
   153c0:	1000051e 	bne	r2,zero,153d8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   153c4:	e0bfff17 	ldw	r2,-4(fp)
   153c8:	00c00104 	movi	r3,4
   153cc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   153d0:	e0bffd17 	ldw	r2,-12(fp)
   153d4:	00007706 	br	155b4 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   153d8:	e0bffd17 	ldw	r2,-12(fp)
   153dc:	10800003 	ldbu	r2,0(r2)
   153e0:	10803fcc 	andi	r2,r2,255
   153e4:	108000e0 	cmpeqi	r2,r2,3
   153e8:	1000051e 	bne	r2,zero,15400 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   153ec:	e0bfff17 	ldw	r2,-4(fp)
   153f0:	00c00044 	movi	r3,1
   153f4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   153f8:	e0bffd17 	ldw	r2,-12(fp)
   153fc:	00006d06 	br	155b4 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15400:	d0a82603 	ldbu	r2,-24424(gp)
   15404:	10803fcc 	andi	r2,r2,255
   15408:	10000526 	beq	r2,zero,15420 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   1540c:	e0bfff17 	ldw	r2,-4(fp)
   15410:	00c003c4 	movi	r3,15
   15414:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15418:	e0bffd17 	ldw	r2,-12(fp)
   1541c:	00006506 	br	155b4 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15420:	0005303a 	rdctl	r2,status
   15424:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15428:	e0fffc17 	ldw	r3,-16(fp)
   1542c:	00bfff84 	movi	r2,-2
   15430:	1884703a 	and	r2,r3,r2
   15434:	1001703a 	wrctl	status,r2
  
  return context;
   15438:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1543c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   15440:	e0bffd17 	ldw	r2,-12(fp)
   15444:	10800283 	ldbu	r2,10(r2)
   15448:	10803fcc 	andi	r2,r2,255
   1544c:	10000326 	beq	r2,zero,1545c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   15450:	00800044 	movi	r2,1
   15454:	e0bff505 	stb	r2,-44(fp)
   15458:	00000106 	br	15460 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1545c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   15460:	e0bffe03 	ldbu	r2,-8(fp)
   15464:	10000326 	beq	r2,zero,15474 <OSSemDel+0xec>
   15468:	10800060 	cmpeqi	r2,r2,1
   1546c:	1000281e 	bne	r2,zero,15510 <OSSemDel+0x188>
   15470:	00004506 	br	15588 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   15474:	e0bff503 	ldbu	r2,-44(fp)
   15478:	1000161e 	bne	r2,zero,154d4 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1547c:	e0bffd17 	ldw	r2,-12(fp)
   15480:	00c00fc4 	movi	r3,63
   15484:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   15488:	e0bffd17 	ldw	r2,-12(fp)
   1548c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15490:	e0bffd17 	ldw	r2,-12(fp)
   15494:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   15498:	d0e82517 	ldw	r3,-24428(gp)
   1549c:	e0bffd17 	ldw	r2,-12(fp)
   154a0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   154a4:	e0bffd17 	ldw	r2,-12(fp)
   154a8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   154ac:	e0bffd17 	ldw	r2,-12(fp)
   154b0:	d0a82515 	stw	r2,-24428(gp)
   154b4:	e0bff717 	ldw	r2,-36(fp)
   154b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   154bc:	e0bff817 	ldw	r2,-32(fp)
   154c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   154c4:	e0bfff17 	ldw	r2,-4(fp)
   154c8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   154cc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   154d0:	00003706 	br	155b0 <OSSemDel+0x228>
   154d4:	e0bff717 	ldw	r2,-36(fp)
   154d8:	e0bff915 	stw	r2,-28(fp)
   154dc:	e0bff917 	ldw	r2,-28(fp)
   154e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   154e4:	e0bfff17 	ldw	r2,-4(fp)
   154e8:	00c01244 	movi	r3,73
   154ec:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   154f0:	e0bffd17 	ldw	r2,-12(fp)
   154f4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   154f8:	00002d06 	br	155b0 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   154fc:	000f883a 	mov	r7,zero
   15500:	01800044 	movi	r6,1
   15504:	000b883a 	mov	r5,zero
   15508:	e13ffd17 	ldw	r4,-12(fp)
   1550c:	0010fd40 	call	10fd4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   15510:	e0bffd17 	ldw	r2,-12(fp)
   15514:	10800283 	ldbu	r2,10(r2)
   15518:	10803fcc 	andi	r2,r2,255
   1551c:	103ff71e 	bne	r2,zero,154fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70154fc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   15520:	e0bffd17 	ldw	r2,-12(fp)
   15524:	00c00fc4 	movi	r3,63
   15528:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1552c:	e0bffd17 	ldw	r2,-12(fp)
   15530:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15534:	e0bffd17 	ldw	r2,-12(fp)
   15538:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1553c:	d0e82517 	ldw	r3,-24428(gp)
   15540:	e0bffd17 	ldw	r2,-12(fp)
   15544:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   15548:	e0bffd17 	ldw	r2,-12(fp)
   1554c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   15550:	e0bffd17 	ldw	r2,-12(fp)
   15554:	d0a82515 	stw	r2,-24428(gp)
   15558:	e0bff717 	ldw	r2,-36(fp)
   1555c:	e0bffa15 	stw	r2,-24(fp)
   15560:	e0bffa17 	ldw	r2,-24(fp)
   15564:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   15568:	e0bff503 	ldbu	r2,-44(fp)
   1556c:	10800058 	cmpnei	r2,r2,1
   15570:	1000011e 	bne	r2,zero,15578 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15574:	0011a200 	call	11a20 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   15578:	e0bfff17 	ldw	r2,-4(fp)
   1557c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   15580:	e03ff615 	stw	zero,-40(fp)
             break;
   15584:	00000a06 	br	155b0 <OSSemDel+0x228>
   15588:	e0bff717 	ldw	r2,-36(fp)
   1558c:	e0bffb15 	stw	r2,-20(fp)
   15590:	e0bffb17 	ldw	r2,-20(fp)
   15594:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   15598:	e0bfff17 	ldw	r2,-4(fp)
   1559c:	00c001c4 	movi	r3,7
   155a0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   155a4:	e0bffd17 	ldw	r2,-12(fp)
   155a8:	e0bff615 	stw	r2,-40(fp)
             break;
   155ac:	0001883a 	nop
    }
    return (pevent_return);
   155b0:	e0bff617 	ldw	r2,-40(fp)
}
   155b4:	e037883a 	mov	sp,fp
   155b8:	dfc00117 	ldw	ra,4(sp)
   155bc:	df000017 	ldw	fp,0(sp)
   155c0:	dec00204 	addi	sp,sp,8
   155c4:	f800283a 	ret

000155c8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   155c8:	defff504 	addi	sp,sp,-44
   155cc:	dfc00a15 	stw	ra,40(sp)
   155d0:	df000915 	stw	fp,36(sp)
   155d4:	df000904 	addi	fp,sp,36
   155d8:	e13ffd15 	stw	r4,-12(fp)
   155dc:	2805883a 	mov	r2,r5
   155e0:	e1bfff15 	stw	r6,-4(fp)
   155e4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   155e8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   155ec:	e0bfff17 	ldw	r2,-4(fp)
   155f0:	10007226 	beq	r2,zero,157bc <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   155f4:	e0bffd17 	ldw	r2,-12(fp)
   155f8:	1000041e 	bne	r2,zero,1560c <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   155fc:	e0bfff17 	ldw	r2,-4(fp)
   15600:	00c00104 	movi	r3,4
   15604:	10c00005 	stb	r3,0(r2)
        return;
   15608:	00006d06 	br	157c0 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1560c:	e0bffd17 	ldw	r2,-12(fp)
   15610:	10800003 	ldbu	r2,0(r2)
   15614:	10803fcc 	andi	r2,r2,255
   15618:	108000e0 	cmpeqi	r2,r2,3
   1561c:	1000041e 	bne	r2,zero,15630 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   15620:	e0bfff17 	ldw	r2,-4(fp)
   15624:	00c00044 	movi	r3,1
   15628:	10c00005 	stb	r3,0(r2)
        return;
   1562c:	00006406 	br	157c0 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   15630:	d0a82603 	ldbu	r2,-24424(gp)
   15634:	10803fcc 	andi	r2,r2,255
   15638:	10000426 	beq	r2,zero,1564c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   1563c:	e0bfff17 	ldw	r2,-4(fp)
   15640:	00c00084 	movi	r3,2
   15644:	10c00005 	stb	r3,0(r2)
        return;
   15648:	00005d06 	br	157c0 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   1564c:	d0a81803 	ldbu	r2,-24480(gp)
   15650:	10803fcc 	andi	r2,r2,255
   15654:	10000426 	beq	r2,zero,15668 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   15658:	e0bfff17 	ldw	r2,-4(fp)
   1565c:	00c00344 	movi	r3,13
   15660:	10c00005 	stb	r3,0(r2)
        return;
   15664:	00005606 	br	157c0 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15668:	0005303a 	rdctl	r2,status
   1566c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15670:	e0fffc17 	ldw	r3,-16(fp)
   15674:	00bfff84 	movi	r2,-2
   15678:	1884703a 	and	r2,r3,r2
   1567c:	1001703a 	wrctl	status,r2
  
  return context;
   15680:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15684:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   15688:	e0bffd17 	ldw	r2,-12(fp)
   1568c:	1080020b 	ldhu	r2,8(r2)
   15690:	10bfffcc 	andi	r2,r2,65535
   15694:	10000d26 	beq	r2,zero,156cc <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   15698:	e0bffd17 	ldw	r2,-12(fp)
   1569c:	1080020b 	ldhu	r2,8(r2)
   156a0:	10bfffc4 	addi	r2,r2,-1
   156a4:	1007883a 	mov	r3,r2
   156a8:	e0bffd17 	ldw	r2,-12(fp)
   156ac:	10c0020d 	sth	r3,8(r2)
   156b0:	e0bff717 	ldw	r2,-36(fp)
   156b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   156b8:	e0bff817 	ldw	r2,-32(fp)
   156bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   156c0:	e0bfff17 	ldw	r2,-4(fp)
   156c4:	10000005 	stb	zero,0(r2)
        return;
   156c8:	00003d06 	br	157c0 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   156cc:	d0a82717 	ldw	r2,-24420(gp)
   156d0:	d0e82717 	ldw	r3,-24420(gp)
   156d4:	18c00c03 	ldbu	r3,48(r3)
   156d8:	18c00054 	ori	r3,r3,1
   156dc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   156e0:	d0a82717 	ldw	r2,-24420(gp)
   156e4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   156e8:	d0a82717 	ldw	r2,-24420(gp)
   156ec:	e0fffe0b 	ldhu	r3,-8(fp)
   156f0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   156f4:	e13ffd17 	ldw	r4,-12(fp)
   156f8:	001116c0 	call	1116c <OS_EventTaskWait>
   156fc:	e0bff717 	ldw	r2,-36(fp)
   15700:	e0bffb15 	stw	r2,-20(fp)
   15704:	e0bffb17 	ldw	r2,-20(fp)
   15708:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   1570c:	0011a200 	call	11a20 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15710:	0005303a 	rdctl	r2,status
   15714:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15718:	e0fff917 	ldw	r3,-28(fp)
   1571c:	00bfff84 	movi	r2,-2
   15720:	1884703a 	and	r2,r3,r2
   15724:	1001703a 	wrctl	status,r2
  
  return context;
   15728:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1572c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   15730:	d0a82717 	ldw	r2,-24420(gp)
   15734:	10800c43 	ldbu	r2,49(r2)
   15738:	10803fcc 	andi	r2,r2,255
   1573c:	10000326 	beq	r2,zero,1574c <OSSemPend+0x184>
   15740:	108000a0 	cmpeqi	r2,r2,2
   15744:	1000041e 	bne	r2,zero,15758 <OSSemPend+0x190>
   15748:	00000706 	br	15768 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   1574c:	e0bfff17 	ldw	r2,-4(fp)
   15750:	10000005 	stb	zero,0(r2)
             break;
   15754:	00000c06 	br	15788 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   15758:	e0bfff17 	ldw	r2,-4(fp)
   1575c:	00c00384 	movi	r3,14
   15760:	10c00005 	stb	r3,0(r2)
             break;
   15764:	00000806 	br	15788 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   15768:	d0a82717 	ldw	r2,-24420(gp)
   1576c:	e17ffd17 	ldw	r5,-12(fp)
   15770:	1009883a 	mov	r4,r2
   15774:	00113cc0 	call	113cc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   15778:	e0bfff17 	ldw	r2,-4(fp)
   1577c:	00c00284 	movi	r3,10
   15780:	10c00005 	stb	r3,0(r2)
             break;
   15784:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   15788:	d0a82717 	ldw	r2,-24420(gp)
   1578c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   15790:	d0a82717 	ldw	r2,-24420(gp)
   15794:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   15798:	d0a82717 	ldw	r2,-24420(gp)
   1579c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   157a0:	d0a82717 	ldw	r2,-24420(gp)
   157a4:	10000815 	stw	zero,32(r2)
   157a8:	e0bff717 	ldw	r2,-36(fp)
   157ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157b0:	e0bffa17 	ldw	r2,-24(fp)
   157b4:	1001703a 	wrctl	status,r2
   157b8:	00000106 	br	157c0 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   157bc:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   157c0:	e037883a 	mov	sp,fp
   157c4:	dfc00117 	ldw	ra,4(sp)
   157c8:	df000017 	ldw	fp,0(sp)
   157cc:	dec00204 	addi	sp,sp,8
   157d0:	f800283a 	ret

000157d4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   157d4:	defff604 	addi	sp,sp,-40
   157d8:	dfc00915 	stw	ra,36(sp)
   157dc:	df000815 	stw	fp,32(sp)
   157e0:	df000804 	addi	fp,sp,32
   157e4:	e13ffd15 	stw	r4,-12(fp)
   157e8:	2805883a 	mov	r2,r5
   157ec:	e1bfff15 	stw	r6,-4(fp)
   157f0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   157f4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   157f8:	e0bfff17 	ldw	r2,-4(fp)
   157fc:	1000021e 	bne	r2,zero,15808 <OSSemPendAbort+0x34>
        return (0);
   15800:	0005883a 	mov	r2,zero
   15804:	00004906 	br	1592c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15808:	e0bffd17 	ldw	r2,-12(fp)
   1580c:	1000051e 	bne	r2,zero,15824 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15810:	e0bfff17 	ldw	r2,-4(fp)
   15814:	00c00104 	movi	r3,4
   15818:	10c00005 	stb	r3,0(r2)
        return (0);
   1581c:	0005883a 	mov	r2,zero
   15820:	00004206 	br	1592c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15824:	e0bffd17 	ldw	r2,-12(fp)
   15828:	10800003 	ldbu	r2,0(r2)
   1582c:	10803fcc 	andi	r2,r2,255
   15830:	108000e0 	cmpeqi	r2,r2,3
   15834:	1000051e 	bne	r2,zero,1584c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15838:	e0bfff17 	ldw	r2,-4(fp)
   1583c:	00c00044 	movi	r3,1
   15840:	10c00005 	stb	r3,0(r2)
        return (0);
   15844:	0005883a 	mov	r2,zero
   15848:	00003806 	br	1592c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1584c:	0005303a 	rdctl	r2,status
   15850:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15854:	e0fffc17 	ldw	r3,-16(fp)
   15858:	00bfff84 	movi	r2,-2
   1585c:	1884703a 	and	r2,r3,r2
   15860:	1001703a 	wrctl	status,r2
  
  return context;
   15864:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15868:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   1586c:	e0bffd17 	ldw	r2,-12(fp)
   15870:	10800283 	ldbu	r2,10(r2)
   15874:	10803fcc 	andi	r2,r2,255
   15878:	10002526 	beq	r2,zero,15910 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   1587c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   15880:	e0bffe03 	ldbu	r2,-8(fp)
   15884:	10800060 	cmpeqi	r2,r2,1
   15888:	10000e26 	beq	r2,zero,158c4 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1588c:	00000806 	br	158b0 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   15890:	01c00084 	movi	r7,2
   15894:	01800044 	movi	r6,1
   15898:	000b883a 	mov	r5,zero
   1589c:	e13ffd17 	ldw	r4,-12(fp)
   158a0:	0010fd40 	call	10fd4 <OS_EventTaskRdy>
                     nbr_tasks++;
   158a4:	e0bff803 	ldbu	r2,-32(fp)
   158a8:	10800044 	addi	r2,r2,1
   158ac:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   158b0:	e0bffd17 	ldw	r2,-12(fp)
   158b4:	10800283 	ldbu	r2,10(r2)
   158b8:	10803fcc 	andi	r2,r2,255
   158bc:	103ff41e 	bne	r2,zero,15890 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015890>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   158c0:	00000906 	br	158e8 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   158c4:	01c00084 	movi	r7,2
   158c8:	01800044 	movi	r6,1
   158cc:	000b883a 	mov	r5,zero
   158d0:	e13ffd17 	ldw	r4,-12(fp)
   158d4:	0010fd40 	call	10fd4 <OS_EventTaskRdy>
                 nbr_tasks++;
   158d8:	e0bff803 	ldbu	r2,-32(fp)
   158dc:	10800044 	addi	r2,r2,1
   158e0:	e0bff805 	stb	r2,-32(fp)
                 break;
   158e4:	0001883a 	nop
   158e8:	e0bff917 	ldw	r2,-28(fp)
   158ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   158f0:	e0bffa17 	ldw	r2,-24(fp)
   158f4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   158f8:	0011a200 	call	11a20 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   158fc:	e0bfff17 	ldw	r2,-4(fp)
   15900:	00c00384 	movi	r3,14
   15904:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   15908:	e0bff803 	ldbu	r2,-32(fp)
   1590c:	00000706 	br	1592c <OSSemPendAbort+0x158>
   15910:	e0bff917 	ldw	r2,-28(fp)
   15914:	e0bffb15 	stw	r2,-20(fp)
   15918:	e0bffb17 	ldw	r2,-20(fp)
   1591c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15920:	e0bfff17 	ldw	r2,-4(fp)
   15924:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   15928:	0005883a 	mov	r2,zero
}
   1592c:	e037883a 	mov	sp,fp
   15930:	dfc00117 	ldw	ra,4(sp)
   15934:	df000017 	ldw	fp,0(sp)
   15938:	dec00204 	addi	sp,sp,8
   1593c:	f800283a 	ret

00015940 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   15940:	defff804 	addi	sp,sp,-32
   15944:	dfc00715 	stw	ra,28(sp)
   15948:	df000615 	stw	fp,24(sp)
   1594c:	df000604 	addi	fp,sp,24
   15950:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15954:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15958:	e0bfff17 	ldw	r2,-4(fp)
   1595c:	1000021e 	bne	r2,zero,15968 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   15960:	00800104 	movi	r2,4
   15964:	00003506 	br	15a3c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15968:	e0bfff17 	ldw	r2,-4(fp)
   1596c:	10800003 	ldbu	r2,0(r2)
   15970:	10803fcc 	andi	r2,r2,255
   15974:	108000e0 	cmpeqi	r2,r2,3
   15978:	1000021e 	bne	r2,zero,15984 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   1597c:	00800044 	movi	r2,1
   15980:	00002e06 	br	15a3c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15984:	0005303a 	rdctl	r2,status
   15988:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1598c:	e0fffe17 	ldw	r3,-8(fp)
   15990:	00bfff84 	movi	r2,-2
   15994:	1884703a 	and	r2,r3,r2
   15998:	1001703a 	wrctl	status,r2
  
  return context;
   1599c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   159a0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   159a4:	e0bfff17 	ldw	r2,-4(fp)
   159a8:	10800283 	ldbu	r2,10(r2)
   159ac:	10803fcc 	andi	r2,r2,255
   159b0:	10000c26 	beq	r2,zero,159e4 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   159b4:	000f883a 	mov	r7,zero
   159b8:	01800044 	movi	r6,1
   159bc:	000b883a 	mov	r5,zero
   159c0:	e13fff17 	ldw	r4,-4(fp)
   159c4:	0010fd40 	call	10fd4 <OS_EventTaskRdy>
   159c8:	e0bffa17 	ldw	r2,-24(fp)
   159cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   159d0:	e0bffb17 	ldw	r2,-20(fp)
   159d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   159d8:	0011a200 	call	11a20 <OS_Sched>
        return (OS_ERR_NONE);
   159dc:	0005883a 	mov	r2,zero
   159e0:	00001606 	br	15a3c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   159e4:	e0bfff17 	ldw	r2,-4(fp)
   159e8:	1080020b 	ldhu	r2,8(r2)
   159ec:	10ffffcc 	andi	r3,r2,65535
   159f0:	00bfffd4 	movui	r2,65535
   159f4:	18800c26 	beq	r3,r2,15a28 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   159f8:	e0bfff17 	ldw	r2,-4(fp)
   159fc:	1080020b 	ldhu	r2,8(r2)
   15a00:	10800044 	addi	r2,r2,1
   15a04:	1007883a 	mov	r3,r2
   15a08:	e0bfff17 	ldw	r2,-4(fp)
   15a0c:	10c0020d 	sth	r3,8(r2)
   15a10:	e0bffa17 	ldw	r2,-24(fp)
   15a14:	e0bffc15 	stw	r2,-16(fp)
   15a18:	e0bffc17 	ldw	r2,-16(fp)
   15a1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   15a20:	0005883a 	mov	r2,zero
   15a24:	00000506 	br	15a3c <OSSemPost+0xfc>
   15a28:	e0bffa17 	ldw	r2,-24(fp)
   15a2c:	e0bffd15 	stw	r2,-12(fp)
   15a30:	e0bffd17 	ldw	r2,-12(fp)
   15a34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   15a38:	00800c84 	movi	r2,50
}
   15a3c:	e037883a 	mov	sp,fp
   15a40:	dfc00117 	ldw	ra,4(sp)
   15a44:	df000017 	ldw	fp,0(sp)
   15a48:	dec00204 	addi	sp,sp,8
   15a4c:	f800283a 	ret

00015a50 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   15a50:	defff704 	addi	sp,sp,-36
   15a54:	df000815 	stw	fp,32(sp)
   15a58:	df000804 	addi	fp,sp,32
   15a5c:	e13ffe15 	stw	r4,-8(fp)
   15a60:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15a64:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15a68:	e0bffe17 	ldw	r2,-8(fp)
   15a6c:	1000021e 	bne	r2,zero,15a78 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   15a70:	00800104 	movi	r2,4
   15a74:	00003606 	br	15b50 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   15a78:	e0bfff17 	ldw	r2,-4(fp)
   15a7c:	1000021e 	bne	r2,zero,15a88 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   15a80:	00800244 	movi	r2,9
   15a84:	00003206 	br	15b50 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   15a88:	e0bffe17 	ldw	r2,-8(fp)
   15a8c:	10800003 	ldbu	r2,0(r2)
   15a90:	10803fcc 	andi	r2,r2,255
   15a94:	108000e0 	cmpeqi	r2,r2,3
   15a98:	1000021e 	bne	r2,zero,15aa4 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   15a9c:	00800044 	movi	r2,1
   15aa0:	00002b06 	br	15b50 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15aa4:	0005303a 	rdctl	r2,status
   15aa8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15aac:	e0fffd17 	ldw	r3,-12(fp)
   15ab0:	00bfff84 	movi	r2,-2
   15ab4:	1884703a 	and	r2,r3,r2
   15ab8:	1001703a 	wrctl	status,r2
  
  return context;
   15abc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15ac0:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   15ac4:	e0bffe17 	ldw	r2,-8(fp)
   15ac8:	10c00283 	ldbu	r3,10(r2)
   15acc:	e0bfff17 	ldw	r2,-4(fp)
   15ad0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   15ad4:	e0bffe17 	ldw	r2,-8(fp)
   15ad8:	108002c4 	addi	r2,r2,11
   15adc:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   15ae0:	e0bfff17 	ldw	r2,-4(fp)
   15ae4:	10800084 	addi	r2,r2,2
   15ae8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15aec:	e03ffa05 	stb	zero,-24(fp)
   15af0:	00000b06 	br	15b20 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   15af4:	e0bff917 	ldw	r2,-28(fp)
   15af8:	10c00044 	addi	r3,r2,1
   15afc:	e0fff915 	stw	r3,-28(fp)
   15b00:	e0fff817 	ldw	r3,-32(fp)
   15b04:	19000044 	addi	r4,r3,1
   15b08:	e13ff815 	stw	r4,-32(fp)
   15b0c:	18c00003 	ldbu	r3,0(r3)
   15b10:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15b14:	e0bffa03 	ldbu	r2,-24(fp)
   15b18:	10800044 	addi	r2,r2,1
   15b1c:	e0bffa05 	stb	r2,-24(fp)
   15b20:	e0bffa03 	ldbu	r2,-24(fp)
   15b24:	108000f0 	cmpltui	r2,r2,3
   15b28:	103ff21e 	bne	r2,zero,15af4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015af4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   15b2c:	e0bffe17 	ldw	r2,-8(fp)
   15b30:	10c0020b 	ldhu	r3,8(r2)
   15b34:	e0bfff17 	ldw	r2,-4(fp)
   15b38:	10c0000d 	sth	r3,0(r2)
   15b3c:	e0bffb17 	ldw	r2,-20(fp)
   15b40:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b44:	e0bffc17 	ldw	r2,-16(fp)
   15b48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15b4c:	0005883a 	mov	r2,zero
}
   15b50:	e037883a 	mov	sp,fp
   15b54:	df000017 	ldw	fp,0(sp)
   15b58:	dec00104 	addi	sp,sp,4
   15b5c:	f800283a 	ret

00015b60 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   15b60:	defff904 	addi	sp,sp,-28
   15b64:	df000615 	stw	fp,24(sp)
   15b68:	df000604 	addi	fp,sp,24
   15b6c:	e13ffd15 	stw	r4,-12(fp)
   15b70:	2805883a 	mov	r2,r5
   15b74:	e1bfff15 	stw	r6,-4(fp)
   15b78:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15b7c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   15b80:	e0bfff17 	ldw	r2,-4(fp)
   15b84:	10003126 	beq	r2,zero,15c4c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15b88:	e0bffd17 	ldw	r2,-12(fp)
   15b8c:	1000041e 	bne	r2,zero,15ba0 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   15b90:	e0bfff17 	ldw	r2,-4(fp)
   15b94:	00c00104 	movi	r3,4
   15b98:	10c00005 	stb	r3,0(r2)
        return;
   15b9c:	00002c06 	br	15c50 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15ba0:	e0bffd17 	ldw	r2,-12(fp)
   15ba4:	10800003 	ldbu	r2,0(r2)
   15ba8:	10803fcc 	andi	r2,r2,255
   15bac:	108000e0 	cmpeqi	r2,r2,3
   15bb0:	1000041e 	bne	r2,zero,15bc4 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   15bb4:	e0bfff17 	ldw	r2,-4(fp)
   15bb8:	00c00044 	movi	r3,1
   15bbc:	10c00005 	stb	r3,0(r2)
        return;
   15bc0:	00002306 	br	15c50 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15bc4:	0005303a 	rdctl	r2,status
   15bc8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15bcc:	e0fffc17 	ldw	r3,-16(fp)
   15bd0:	00bfff84 	movi	r2,-2
   15bd4:	1884703a 	and	r2,r3,r2
   15bd8:	1001703a 	wrctl	status,r2
  
  return context;
   15bdc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15be0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   15be4:	e0bfff17 	ldw	r2,-4(fp)
   15be8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   15bec:	e0bffd17 	ldw	r2,-12(fp)
   15bf0:	1080020b 	ldhu	r2,8(r2)
   15bf4:	10bfffcc 	andi	r2,r2,65535
   15bf8:	10000426 	beq	r2,zero,15c0c <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   15bfc:	e0bffd17 	ldw	r2,-12(fp)
   15c00:	e0fffe0b 	ldhu	r3,-8(fp)
   15c04:	10c0020d 	sth	r3,8(r2)
   15c08:	00000b06 	br	15c38 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   15c0c:	e0bffd17 	ldw	r2,-12(fp)
   15c10:	10800283 	ldbu	r2,10(r2)
   15c14:	10803fcc 	andi	r2,r2,255
   15c18:	1000041e 	bne	r2,zero,15c2c <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   15c1c:	e0bffd17 	ldw	r2,-12(fp)
   15c20:	e0fffe0b 	ldhu	r3,-8(fp)
   15c24:	10c0020d 	sth	r3,8(r2)
   15c28:	00000306 	br	15c38 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   15c2c:	e0bfff17 	ldw	r2,-4(fp)
   15c30:	00c01244 	movi	r3,73
   15c34:	10c00005 	stb	r3,0(r2)
   15c38:	e0bffa17 	ldw	r2,-24(fp)
   15c3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15c40:	e0bffb17 	ldw	r2,-20(fp)
   15c44:	1001703a 	wrctl	status,r2
   15c48:	00000106 	br	15c50 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   15c4c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   15c50:	e037883a 	mov	sp,fp
   15c54:	df000017 	ldw	fp,0(sp)
   15c58:	dec00104 	addi	sp,sp,4
   15c5c:	f800283a 	ret

00015c60 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   15c60:	defff104 	addi	sp,sp,-60
   15c64:	dfc00e15 	stw	ra,56(sp)
   15c68:	df000d15 	stw	fp,52(sp)
   15c6c:	df000d04 	addi	fp,sp,52
   15c70:	2007883a 	mov	r3,r4
   15c74:	2805883a 	mov	r2,r5
   15c78:	e0fffe05 	stb	r3,-8(fp)
   15c7c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   15c80:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   15c84:	e0bffe03 	ldbu	r2,-8(fp)
   15c88:	10800530 	cmpltui	r2,r2,20
   15c8c:	1000051e 	bne	r2,zero,15ca4 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   15c90:	e0bffe03 	ldbu	r2,-8(fp)
   15c94:	10803fe0 	cmpeqi	r2,r2,255
   15c98:	1000021e 	bne	r2,zero,15ca4 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   15c9c:	00800a84 	movi	r2,42
   15ca0:	00012606 	br	1613c <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   15ca4:	e0bfff03 	ldbu	r2,-4(fp)
   15ca8:	10800530 	cmpltui	r2,r2,20
   15cac:	1000021e 	bne	r2,zero,15cb8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   15cb0:	00800a84 	movi	r2,42
   15cb4:	00012106 	br	1613c <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15cb8:	0005303a 	rdctl	r2,status
   15cbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15cc0:	e0fffd17 	ldw	r3,-12(fp)
   15cc4:	00bfff84 	movi	r2,-2
   15cc8:	1884703a 	and	r2,r3,r2
   15ccc:	1001703a 	wrctl	status,r2
  
  return context;
   15cd0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15cd4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   15cd8:	e0ffff03 	ldbu	r3,-4(fp)
   15cdc:	008000b4 	movhi	r2,2
   15ce0:	108be504 	addi	r2,r2,12180
   15ce4:	18c7883a 	add	r3,r3,r3
   15ce8:	18c7883a 	add	r3,r3,r3
   15cec:	10c5883a 	add	r2,r2,r3
   15cf0:	10800017 	ldw	r2,0(r2)
   15cf4:	10000626 	beq	r2,zero,15d10 <OSTaskChangePrio+0xb0>
   15cf8:	e0bff517 	ldw	r2,-44(fp)
   15cfc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d00:	e0bff617 	ldw	r2,-40(fp)
   15d04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   15d08:	00800a04 	movi	r2,40
   15d0c:	00010b06 	br	1613c <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   15d10:	e0bffe03 	ldbu	r2,-8(fp)
   15d14:	10803fd8 	cmpnei	r2,r2,255
   15d18:	1000031e 	bne	r2,zero,15d28 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   15d1c:	d0a82717 	ldw	r2,-24420(gp)
   15d20:	10800c83 	ldbu	r2,50(r2)
   15d24:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   15d28:	e0fffe03 	ldbu	r3,-8(fp)
   15d2c:	008000b4 	movhi	r2,2
   15d30:	108be504 	addi	r2,r2,12180
   15d34:	18c7883a 	add	r3,r3,r3
   15d38:	18c7883a 	add	r3,r3,r3
   15d3c:	10c5883a 	add	r2,r2,r3
   15d40:	10800017 	ldw	r2,0(r2)
   15d44:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   15d48:	e0bff817 	ldw	r2,-32(fp)
   15d4c:	1000061e 	bne	r2,zero,15d68 <OSTaskChangePrio+0x108>
   15d50:	e0bff517 	ldw	r2,-44(fp)
   15d54:	e0bff715 	stw	r2,-36(fp)
   15d58:	e0bff717 	ldw	r2,-36(fp)
   15d5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   15d60:	00800a44 	movi	r2,41
   15d64:	0000f506 	br	1613c <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   15d68:	e0bff817 	ldw	r2,-32(fp)
   15d6c:	10800058 	cmpnei	r2,r2,1
   15d70:	1000061e 	bne	r2,zero,15d8c <OSTaskChangePrio+0x12c>
   15d74:	e0bff517 	ldw	r2,-44(fp)
   15d78:	e0bff915 	stw	r2,-28(fp)
   15d7c:	e0bff917 	ldw	r2,-28(fp)
   15d80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   15d84:	008010c4 	movi	r2,67
   15d88:	0000ec06 	br	1613c <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   15d8c:	e0bfff03 	ldbu	r2,-4(fp)
   15d90:	1004d0fa 	srli	r2,r2,3
   15d94:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   15d98:	e0bfff03 	ldbu	r2,-4(fp)
   15d9c:	108001cc 	andi	r2,r2,7
   15da0:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   15da4:	e0bffb03 	ldbu	r2,-20(fp)
   15da8:	00c00044 	movi	r3,1
   15dac:	1884983a 	sll	r2,r3,r2
   15db0:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   15db4:	e0bffb43 	ldbu	r2,-19(fp)
   15db8:	00c00044 	movi	r3,1
   15dbc:	1884983a 	sll	r2,r3,r2
   15dc0:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   15dc4:	e0fffe03 	ldbu	r3,-8(fp)
   15dc8:	008000b4 	movhi	r2,2
   15dcc:	108be504 	addi	r2,r2,12180
   15dd0:	18c7883a 	add	r3,r3,r3
   15dd4:	18c7883a 	add	r3,r3,r3
   15dd8:	10c5883a 	add	r2,r2,r3
   15ddc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   15de0:	e0ffff03 	ldbu	r3,-4(fp)
   15de4:	008000b4 	movhi	r2,2
   15de8:	108be504 	addi	r2,r2,12180
   15dec:	18c7883a 	add	r3,r3,r3
   15df0:	18c7883a 	add	r3,r3,r3
   15df4:	10c5883a 	add	r2,r2,r3
   15df8:	e0fff817 	ldw	r3,-32(fp)
   15dfc:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   15e00:	e0bff817 	ldw	r2,-32(fp)
   15e04:	10800d03 	ldbu	r2,52(r2)
   15e08:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   15e0c:	e0bff817 	ldw	r2,-32(fp)
   15e10:	10800d83 	ldbu	r2,54(r2)
   15e14:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   15e18:	e0bff817 	ldw	r2,-32(fp)
   15e1c:	10800d43 	ldbu	r2,53(r2)
   15e20:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   15e24:	e0fffc03 	ldbu	r3,-16(fp)
   15e28:	d0a82444 	addi	r2,gp,-24431
   15e2c:	1885883a 	add	r2,r3,r2
   15e30:	10c00003 	ldbu	r3,0(r2)
   15e34:	e0bffc83 	ldbu	r2,-14(fp)
   15e38:	1884703a 	and	r2,r3,r2
   15e3c:	10803fcc 	andi	r2,r2,255
   15e40:	10002826 	beq	r2,zero,15ee4 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   15e44:	e0fffc03 	ldbu	r3,-16(fp)
   15e48:	e13ffc03 	ldbu	r4,-16(fp)
   15e4c:	d0a82444 	addi	r2,gp,-24431
   15e50:	2085883a 	add	r2,r4,r2
   15e54:	10800003 	ldbu	r2,0(r2)
   15e58:	1009883a 	mov	r4,r2
   15e5c:	e0bffc83 	ldbu	r2,-14(fp)
   15e60:	0084303a 	nor	r2,zero,r2
   15e64:	2084703a 	and	r2,r4,r2
   15e68:	1009883a 	mov	r4,r2
   15e6c:	d0a82444 	addi	r2,gp,-24431
   15e70:	1885883a 	add	r2,r3,r2
   15e74:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   15e78:	e0fffc03 	ldbu	r3,-16(fp)
   15e7c:	d0a82444 	addi	r2,gp,-24431
   15e80:	1885883a 	add	r2,r3,r2
   15e84:	10800003 	ldbu	r2,0(r2)
   15e88:	10803fcc 	andi	r2,r2,255
   15e8c:	1000061e 	bne	r2,zero,15ea8 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   15e90:	e0bffc43 	ldbu	r2,-15(fp)
   15e94:	0084303a 	nor	r2,zero,r2
   15e98:	1007883a 	mov	r3,r2
   15e9c:	d0a82403 	ldbu	r2,-24432(gp)
   15ea0:	1884703a 	and	r2,r3,r2
   15ea4:	d0a82405 	stb	r2,-24432(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   15ea8:	d0e82403 	ldbu	r3,-24432(gp)
   15eac:	e0bffb83 	ldbu	r2,-18(fp)
   15eb0:	1884b03a 	or	r2,r3,r2
   15eb4:	d0a82405 	stb	r2,-24432(gp)
         OSRdyTbl[y_new] |= bitx_new;
   15eb8:	e0fffb03 	ldbu	r3,-20(fp)
   15ebc:	e13ffb03 	ldbu	r4,-20(fp)
   15ec0:	d0a82444 	addi	r2,gp,-24431
   15ec4:	2085883a 	add	r2,r4,r2
   15ec8:	11000003 	ldbu	r4,0(r2)
   15ecc:	e0bffbc3 	ldbu	r2,-17(fp)
   15ed0:	2084b03a 	or	r2,r4,r2
   15ed4:	1009883a 	mov	r4,r2
   15ed8:	d0a82444 	addi	r2,gp,-24431
   15edc:	1885883a 	add	r2,r3,r2
   15ee0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   15ee4:	e0bff817 	ldw	r2,-32(fp)
   15ee8:	10800717 	ldw	r2,28(r2)
   15eec:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   15ef0:	e0bff317 	ldw	r2,-52(fp)
   15ef4:	10003326 	beq	r2,zero,15fc4 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   15ef8:	e0bffc03 	ldbu	r2,-16(fp)
   15efc:	e0fffc03 	ldbu	r3,-16(fp)
   15f00:	e13ff317 	ldw	r4,-52(fp)
   15f04:	20c7883a 	add	r3,r4,r3
   15f08:	18c002c4 	addi	r3,r3,11
   15f0c:	18c00003 	ldbu	r3,0(r3)
   15f10:	1809883a 	mov	r4,r3
   15f14:	e0fffc83 	ldbu	r3,-14(fp)
   15f18:	00c6303a 	nor	r3,zero,r3
   15f1c:	20c6703a 	and	r3,r4,r3
   15f20:	1809883a 	mov	r4,r3
   15f24:	e0fff317 	ldw	r3,-52(fp)
   15f28:	1885883a 	add	r2,r3,r2
   15f2c:	108002c4 	addi	r2,r2,11
   15f30:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   15f34:	e0bffc03 	ldbu	r2,-16(fp)
   15f38:	e0fff317 	ldw	r3,-52(fp)
   15f3c:	1885883a 	add	r2,r3,r2
   15f40:	108002c4 	addi	r2,r2,11
   15f44:	10800003 	ldbu	r2,0(r2)
   15f48:	10803fcc 	andi	r2,r2,255
   15f4c:	1000091e 	bne	r2,zero,15f74 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   15f50:	e0bff317 	ldw	r2,-52(fp)
   15f54:	10800283 	ldbu	r2,10(r2)
   15f58:	1007883a 	mov	r3,r2
   15f5c:	e0bffc43 	ldbu	r2,-15(fp)
   15f60:	0084303a 	nor	r2,zero,r2
   15f64:	1884703a 	and	r2,r3,r2
   15f68:	1007883a 	mov	r3,r2
   15f6c:	e0bff317 	ldw	r2,-52(fp)
   15f70:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   15f74:	e0bff317 	ldw	r2,-52(fp)
   15f78:	10c00283 	ldbu	r3,10(r2)
   15f7c:	e0bffb83 	ldbu	r2,-18(fp)
   15f80:	1884b03a 	or	r2,r3,r2
   15f84:	1007883a 	mov	r3,r2
   15f88:	e0bff317 	ldw	r2,-52(fp)
   15f8c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   15f90:	e0bffb03 	ldbu	r2,-20(fp)
   15f94:	e0fffb03 	ldbu	r3,-20(fp)
   15f98:	e13ff317 	ldw	r4,-52(fp)
   15f9c:	20c7883a 	add	r3,r4,r3
   15fa0:	18c002c4 	addi	r3,r3,11
   15fa4:	19000003 	ldbu	r4,0(r3)
   15fa8:	e0fffbc3 	ldbu	r3,-17(fp)
   15fac:	20c6b03a 	or	r3,r4,r3
   15fb0:	1809883a 	mov	r4,r3
   15fb4:	e0fff317 	ldw	r3,-52(fp)
   15fb8:	1885883a 	add	r2,r3,r2
   15fbc:	108002c4 	addi	r2,r2,11
   15fc0:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   15fc4:	e0bff817 	ldw	r2,-32(fp)
   15fc8:	10800817 	ldw	r2,32(r2)
   15fcc:	10004226 	beq	r2,zero,160d8 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   15fd0:	e0bff817 	ldw	r2,-32(fp)
   15fd4:	10800817 	ldw	r2,32(r2)
   15fd8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   15fdc:	e0bff417 	ldw	r2,-48(fp)
   15fe0:	10800017 	ldw	r2,0(r2)
   15fe4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   15fe8:	00003906 	br	160d0 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   15fec:	e0bffc03 	ldbu	r2,-16(fp)
   15ff0:	e0fffc03 	ldbu	r3,-16(fp)
   15ff4:	e13ff317 	ldw	r4,-52(fp)
   15ff8:	20c7883a 	add	r3,r4,r3
   15ffc:	18c002c4 	addi	r3,r3,11
   16000:	18c00003 	ldbu	r3,0(r3)
   16004:	1809883a 	mov	r4,r3
   16008:	e0fffc83 	ldbu	r3,-14(fp)
   1600c:	00c6303a 	nor	r3,zero,r3
   16010:	20c6703a 	and	r3,r4,r3
   16014:	1809883a 	mov	r4,r3
   16018:	e0fff317 	ldw	r3,-52(fp)
   1601c:	1885883a 	add	r2,r3,r2
   16020:	108002c4 	addi	r2,r2,11
   16024:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   16028:	e0bffc03 	ldbu	r2,-16(fp)
   1602c:	e0fff317 	ldw	r3,-52(fp)
   16030:	1885883a 	add	r2,r3,r2
   16034:	108002c4 	addi	r2,r2,11
   16038:	10800003 	ldbu	r2,0(r2)
   1603c:	10803fcc 	andi	r2,r2,255
   16040:	1000091e 	bne	r2,zero,16068 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   16044:	e0bff317 	ldw	r2,-52(fp)
   16048:	10800283 	ldbu	r2,10(r2)
   1604c:	1007883a 	mov	r3,r2
   16050:	e0bffc43 	ldbu	r2,-15(fp)
   16054:	0084303a 	nor	r2,zero,r2
   16058:	1884703a 	and	r2,r3,r2
   1605c:	1007883a 	mov	r3,r2
   16060:	e0bff317 	ldw	r2,-52(fp)
   16064:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   16068:	e0bff317 	ldw	r2,-52(fp)
   1606c:	10c00283 	ldbu	r3,10(r2)
   16070:	e0bffb83 	ldbu	r2,-18(fp)
   16074:	1884b03a 	or	r2,r3,r2
   16078:	1007883a 	mov	r3,r2
   1607c:	e0bff317 	ldw	r2,-52(fp)
   16080:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   16084:	e0bffb03 	ldbu	r2,-20(fp)
   16088:	e0fffb03 	ldbu	r3,-20(fp)
   1608c:	e13ff317 	ldw	r4,-52(fp)
   16090:	20c7883a 	add	r3,r4,r3
   16094:	18c002c4 	addi	r3,r3,11
   16098:	19000003 	ldbu	r4,0(r3)
   1609c:	e0fffbc3 	ldbu	r3,-17(fp)
   160a0:	20c6b03a 	or	r3,r4,r3
   160a4:	1809883a 	mov	r4,r3
   160a8:	e0fff317 	ldw	r3,-52(fp)
   160ac:	1885883a 	add	r2,r3,r2
   160b0:	108002c4 	addi	r2,r2,11
   160b4:	11000005 	stb	r4,0(r2)
            pevents++;
   160b8:	e0bff417 	ldw	r2,-48(fp)
   160bc:	10800104 	addi	r2,r2,4
   160c0:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   160c4:	e0bff417 	ldw	r2,-48(fp)
   160c8:	10800017 	ldw	r2,0(r2)
   160cc:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   160d0:	e0bff317 	ldw	r2,-52(fp)
   160d4:	103fc51e 	bne	r2,zero,15fec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015fec>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   160d8:	e0bff817 	ldw	r2,-32(fp)
   160dc:	e0ffff03 	ldbu	r3,-4(fp)
   160e0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   160e4:	e0bff817 	ldw	r2,-32(fp)
   160e8:	e0fffb03 	ldbu	r3,-20(fp)
   160ec:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   160f0:	e0bff817 	ldw	r2,-32(fp)
   160f4:	e0fffb43 	ldbu	r3,-19(fp)
   160f8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   160fc:	e0bff817 	ldw	r2,-32(fp)
   16100:	e0fffb83 	ldbu	r3,-18(fp)
   16104:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   16108:	e0bff817 	ldw	r2,-32(fp)
   1610c:	e0fffbc3 	ldbu	r3,-17(fp)
   16110:	10c00d45 	stb	r3,53(r2)
   16114:	e0bff517 	ldw	r2,-44(fp)
   16118:	e0bffa15 	stw	r2,-24(fp)
   1611c:	e0bffa17 	ldw	r2,-24(fp)
   16120:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   16124:	d0a81843 	ldbu	r2,-24479(gp)
   16128:	10803fcc 	andi	r2,r2,255
   1612c:	10800058 	cmpnei	r2,r2,1
   16130:	1000011e 	bne	r2,zero,16138 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   16134:	0011a200 	call	11a20 <OS_Sched>
    }
    return (OS_ERR_NONE);
   16138:	0005883a 	mov	r2,zero
}
   1613c:	e037883a 	mov	sp,fp
   16140:	dfc00117 	ldw	ra,4(sp)
   16144:	df000017 	ldw	fp,0(sp)
   16148:	dec00204 	addi	sp,sp,8
   1614c:	f800283a 	ret

00016150 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   16150:	deffee04 	addi	sp,sp,-72
   16154:	dfc01115 	stw	ra,68(sp)
   16158:	df001015 	stw	fp,64(sp)
   1615c:	df001004 	addi	fp,sp,64
   16160:	e13ffc15 	stw	r4,-16(fp)
   16164:	e17ffd15 	stw	r5,-12(fp)
   16168:	e1bffe15 	stw	r6,-8(fp)
   1616c:	3805883a 	mov	r2,r7
   16170:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   16174:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   16178:	e0bfff03 	ldbu	r2,-4(fp)
   1617c:	10800570 	cmpltui	r2,r2,21
   16180:	1000021e 	bne	r2,zero,1618c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   16184:	00800a84 	movi	r2,42
   16188:	00005706 	br	162e8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1618c:	0005303a 	rdctl	r2,status
   16190:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16194:	e0fffb17 	ldw	r3,-20(fp)
   16198:	00bfff84 	movi	r2,-2
   1619c:	1884703a 	and	r2,r3,r2
   161a0:	1001703a 	wrctl	status,r2
  
  return context;
   161a4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   161a8:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   161ac:	d0a82603 	ldbu	r2,-24424(gp)
   161b0:	10803fcc 	andi	r2,r2,255
   161b4:	10000626 	beq	r2,zero,161d0 <OSTaskCreate+0x80>
   161b8:	e0bff317 	ldw	r2,-52(fp)
   161bc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   161c0:	e0bff417 	ldw	r2,-48(fp)
   161c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   161c8:	00800f04 	movi	r2,60
   161cc:	00004606 	br	162e8 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   161d0:	e0ffff03 	ldbu	r3,-4(fp)
   161d4:	008000b4 	movhi	r2,2
   161d8:	108be504 	addi	r2,r2,12180
   161dc:	18c7883a 	add	r3,r3,r3
   161e0:	18c7883a 	add	r3,r3,r3
   161e4:	10c5883a 	add	r2,r2,r3
   161e8:	10800017 	ldw	r2,0(r2)
   161ec:	1000391e 	bne	r2,zero,162d4 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   161f0:	e0ffff03 	ldbu	r3,-4(fp)
   161f4:	008000b4 	movhi	r2,2
   161f8:	108be504 	addi	r2,r2,12180
   161fc:	18c7883a 	add	r3,r3,r3
   16200:	18c7883a 	add	r3,r3,r3
   16204:	10c5883a 	add	r2,r2,r3
   16208:	00c00044 	movi	r3,1
   1620c:	10c00015 	stw	r3,0(r2)
   16210:	e0bff317 	ldw	r2,-52(fp)
   16214:	e0bff515 	stw	r2,-44(fp)
   16218:	e0bff517 	ldw	r2,-44(fp)
   1621c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   16220:	000f883a 	mov	r7,zero
   16224:	e1bffe17 	ldw	r6,-8(fp)
   16228:	e17ffd17 	ldw	r5,-12(fp)
   1622c:	e13ffc17 	ldw	r4,-16(fp)
   16230:	001ad700 	call	1ad70 <OSTaskStkInit>
   16234:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   16238:	e0bfff03 	ldbu	r2,-4(fp)
   1623c:	d8000215 	stw	zero,8(sp)
   16240:	d8000115 	stw	zero,4(sp)
   16244:	d8000015 	stw	zero,0(sp)
   16248:	000f883a 	mov	r7,zero
   1624c:	000d883a 	mov	r6,zero
   16250:	e17ff717 	ldw	r5,-36(fp)
   16254:	1009883a 	mov	r4,r2
   16258:	0011e300 	call	11e30 <OS_TCBInit>
   1625c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   16260:	e0bff803 	ldbu	r2,-32(fp)
   16264:	1000061e 	bne	r2,zero,16280 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   16268:	d0a81843 	ldbu	r2,-24479(gp)
   1626c:	10803fcc 	andi	r2,r2,255
   16270:	10800058 	cmpnei	r2,r2,1
   16274:	1000151e 	bne	r2,zero,162cc <OSTaskCreate+0x17c>
                OS_Sched();
   16278:	0011a200 	call	11a20 <OS_Sched>
   1627c:	00001306 	br	162cc <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16280:	0005303a 	rdctl	r2,status
   16284:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16288:	e0fffa17 	ldw	r3,-24(fp)
   1628c:	00bfff84 	movi	r2,-2
   16290:	1884703a 	and	r2,r3,r2
   16294:	1001703a 	wrctl	status,r2
  
  return context;
   16298:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1629c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   162a0:	e0ffff03 	ldbu	r3,-4(fp)
   162a4:	008000b4 	movhi	r2,2
   162a8:	108be504 	addi	r2,r2,12180
   162ac:	18c7883a 	add	r3,r3,r3
   162b0:	18c7883a 	add	r3,r3,r3
   162b4:	10c5883a 	add	r2,r2,r3
   162b8:	10000015 	stw	zero,0(r2)
   162bc:	e0bff317 	ldw	r2,-52(fp)
   162c0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   162c4:	e0bff617 	ldw	r2,-40(fp)
   162c8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   162cc:	e0bff803 	ldbu	r2,-32(fp)
   162d0:	00000506 	br	162e8 <OSTaskCreate+0x198>
   162d4:	e0bff317 	ldw	r2,-52(fp)
   162d8:	e0bff915 	stw	r2,-28(fp)
   162dc:	e0bff917 	ldw	r2,-28(fp)
   162e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   162e4:	00800a04 	movi	r2,40
}
   162e8:	e037883a 	mov	sp,fp
   162ec:	dfc00117 	ldw	ra,4(sp)
   162f0:	df000017 	ldw	fp,0(sp)
   162f4:	dec00204 	addi	sp,sp,8
   162f8:	f800283a 	ret

000162fc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   162fc:	deffec04 	addi	sp,sp,-80
   16300:	dfc01315 	stw	ra,76(sp)
   16304:	df001215 	stw	fp,72(sp)
   16308:	df001204 	addi	fp,sp,72
   1630c:	e13ffa15 	stw	r4,-24(fp)
   16310:	e17ffb15 	stw	r5,-20(fp)
   16314:	e1bffc15 	stw	r6,-16(fp)
   16318:	3809883a 	mov	r4,r7
   1631c:	e0c00217 	ldw	r3,8(fp)
   16320:	e0800617 	ldw	r2,24(fp)
   16324:	e13ffd05 	stb	r4,-12(fp)
   16328:	e0fffe0d 	sth	r3,-8(fp)
   1632c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   16330:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   16334:	e0bffd03 	ldbu	r2,-12(fp)
   16338:	10800570 	cmpltui	r2,r2,21
   1633c:	1000021e 	bne	r2,zero,16348 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   16340:	00800a84 	movi	r2,42
   16344:	00006106 	br	164cc <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16348:	0005303a 	rdctl	r2,status
   1634c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16350:	e0fff917 	ldw	r3,-28(fp)
   16354:	00bfff84 	movi	r2,-2
   16358:	1884703a 	and	r2,r3,r2
   1635c:	1001703a 	wrctl	status,r2
  
  return context;
   16360:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16364:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   16368:	d0a82603 	ldbu	r2,-24424(gp)
   1636c:	10803fcc 	andi	r2,r2,255
   16370:	10000626 	beq	r2,zero,1638c <OSTaskCreateExt+0x90>
   16374:	e0bff117 	ldw	r2,-60(fp)
   16378:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1637c:	e0bff217 	ldw	r2,-56(fp)
   16380:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   16384:	00800f04 	movi	r2,60
   16388:	00005006 	br	164cc <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1638c:	e0fffd03 	ldbu	r3,-12(fp)
   16390:	008000b4 	movhi	r2,2
   16394:	108be504 	addi	r2,r2,12180
   16398:	18c7883a 	add	r3,r3,r3
   1639c:	18c7883a 	add	r3,r3,r3
   163a0:	10c5883a 	add	r2,r2,r3
   163a4:	10800017 	ldw	r2,0(r2)
   163a8:	1000431e 	bne	r2,zero,164b8 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   163ac:	e0fffd03 	ldbu	r3,-12(fp)
   163b0:	008000b4 	movhi	r2,2
   163b4:	108be504 	addi	r2,r2,12180
   163b8:	18c7883a 	add	r3,r3,r3
   163bc:	18c7883a 	add	r3,r3,r3
   163c0:	10c5883a 	add	r2,r2,r3
   163c4:	00c00044 	movi	r3,1
   163c8:	10c00015 	stw	r3,0(r2)
   163cc:	e0bff117 	ldw	r2,-60(fp)
   163d0:	e0bff315 	stw	r2,-52(fp)
   163d4:	e0bff317 	ldw	r2,-52(fp)
   163d8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   163dc:	e0bfff0b 	ldhu	r2,-4(fp)
   163e0:	100d883a 	mov	r6,r2
   163e4:	e1400417 	ldw	r5,16(fp)
   163e8:	e1000317 	ldw	r4,12(fp)
   163ec:	001735c0 	call	1735c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   163f0:	e0bfff0b 	ldhu	r2,-4(fp)
   163f4:	100f883a 	mov	r7,r2
   163f8:	e1bffc17 	ldw	r6,-16(fp)
   163fc:	e17ffb17 	ldw	r5,-20(fp)
   16400:	e13ffa17 	ldw	r4,-24(fp)
   16404:	001ad700 	call	1ad70 <OSTaskStkInit>
   16408:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1640c:	e0fffd03 	ldbu	r3,-12(fp)
   16410:	e13ffe0b 	ldhu	r4,-8(fp)
   16414:	e0bfff0b 	ldhu	r2,-4(fp)
   16418:	d8800215 	stw	r2,8(sp)
   1641c:	e0800517 	ldw	r2,20(fp)
   16420:	d8800115 	stw	r2,4(sp)
   16424:	e0800417 	ldw	r2,16(fp)
   16428:	d8800015 	stw	r2,0(sp)
   1642c:	200f883a 	mov	r7,r4
   16430:	e1800317 	ldw	r6,12(fp)
   16434:	e17ff517 	ldw	r5,-44(fp)
   16438:	1809883a 	mov	r4,r3
   1643c:	0011e300 	call	11e30 <OS_TCBInit>
   16440:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   16444:	e0bff603 	ldbu	r2,-40(fp)
   16448:	1000061e 	bne	r2,zero,16464 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   1644c:	d0a81843 	ldbu	r2,-24479(gp)
   16450:	10803fcc 	andi	r2,r2,255
   16454:	10800058 	cmpnei	r2,r2,1
   16458:	1000151e 	bne	r2,zero,164b0 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   1645c:	0011a200 	call	11a20 <OS_Sched>
   16460:	00001306 	br	164b0 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16464:	0005303a 	rdctl	r2,status
   16468:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1646c:	e0fff817 	ldw	r3,-32(fp)
   16470:	00bfff84 	movi	r2,-2
   16474:	1884703a 	and	r2,r3,r2
   16478:	1001703a 	wrctl	status,r2
  
  return context;
   1647c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   16480:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   16484:	e0fffd03 	ldbu	r3,-12(fp)
   16488:	008000b4 	movhi	r2,2
   1648c:	108be504 	addi	r2,r2,12180
   16490:	18c7883a 	add	r3,r3,r3
   16494:	18c7883a 	add	r3,r3,r3
   16498:	10c5883a 	add	r2,r2,r3
   1649c:	10000015 	stw	zero,0(r2)
   164a0:	e0bff117 	ldw	r2,-60(fp)
   164a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   164a8:	e0bff417 	ldw	r2,-48(fp)
   164ac:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   164b0:	e0bff603 	ldbu	r2,-40(fp)
   164b4:	00000506 	br	164cc <OSTaskCreateExt+0x1d0>
   164b8:	e0bff117 	ldw	r2,-60(fp)
   164bc:	e0bff715 	stw	r2,-36(fp)
   164c0:	e0bff717 	ldw	r2,-36(fp)
   164c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   164c8:	00800a04 	movi	r2,40
}
   164cc:	e037883a 	mov	sp,fp
   164d0:	dfc00117 	ldw	ra,4(sp)
   164d4:	df000017 	ldw	fp,0(sp)
   164d8:	dec00204 	addi	sp,sp,8
   164dc:	f800283a 	ret

000164e0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   164e0:	defff404 	addi	sp,sp,-48
   164e4:	dfc00b15 	stw	ra,44(sp)
   164e8:	df000a15 	stw	fp,40(sp)
   164ec:	df000a04 	addi	fp,sp,40
   164f0:	2005883a 	mov	r2,r4
   164f4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   164f8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   164fc:	d0a82603 	ldbu	r2,-24424(gp)
   16500:	10803fcc 	andi	r2,r2,255
   16504:	10000226 	beq	r2,zero,16510 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   16508:	00801004 	movi	r2,64
   1650c:	0000c006 	br	16810 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   16510:	e0bfff03 	ldbu	r2,-4(fp)
   16514:	10800518 	cmpnei	r2,r2,20
   16518:	1000021e 	bne	r2,zero,16524 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   1651c:	00800f84 	movi	r2,62
   16520:	0000bb06 	br	16810 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   16524:	e0bfff03 	ldbu	r2,-4(fp)
   16528:	10800530 	cmpltui	r2,r2,20
   1652c:	1000051e 	bne	r2,zero,16544 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   16530:	e0bfff03 	ldbu	r2,-4(fp)
   16534:	10803fe0 	cmpeqi	r2,r2,255
   16538:	1000021e 	bne	r2,zero,16544 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   1653c:	00800a84 	movi	r2,42
   16540:	0000b306 	br	16810 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16544:	0005303a 	rdctl	r2,status
   16548:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1654c:	e0fffe17 	ldw	r3,-8(fp)
   16550:	00bfff84 	movi	r2,-2
   16554:	1884703a 	and	r2,r3,r2
   16558:	1001703a 	wrctl	status,r2
  
  return context;
   1655c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   16560:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   16564:	e0bfff03 	ldbu	r2,-4(fp)
   16568:	10803fd8 	cmpnei	r2,r2,255
   1656c:	1000031e 	bne	r2,zero,1657c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   16570:	d0a82717 	ldw	r2,-24420(gp)
   16574:	10800c83 	ldbu	r2,50(r2)
   16578:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1657c:	e0ffff03 	ldbu	r3,-4(fp)
   16580:	008000b4 	movhi	r2,2
   16584:	108be504 	addi	r2,r2,12180
   16588:	18c7883a 	add	r3,r3,r3
   1658c:	18c7883a 	add	r3,r3,r3
   16590:	10c5883a 	add	r2,r2,r3
   16594:	10800017 	ldw	r2,0(r2)
   16598:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1659c:	e0bff817 	ldw	r2,-32(fp)
   165a0:	1000061e 	bne	r2,zero,165bc <OSTaskDel+0xdc>
   165a4:	e0bff617 	ldw	r2,-40(fp)
   165a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   165ac:	e0bff717 	ldw	r2,-36(fp)
   165b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   165b4:	008010c4 	movi	r2,67
   165b8:	00009506 	br	16810 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   165bc:	e0bff817 	ldw	r2,-32(fp)
   165c0:	10800058 	cmpnei	r2,r2,1
   165c4:	1000061e 	bne	r2,zero,165e0 <OSTaskDel+0x100>
   165c8:	e0bff617 	ldw	r2,-40(fp)
   165cc:	e0bff915 	stw	r2,-28(fp)
   165d0:	e0bff917 	ldw	r2,-28(fp)
   165d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   165d8:	00800f44 	movi	r2,61
   165dc:	00008c06 	br	16810 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   165e0:	e0bff817 	ldw	r2,-32(fp)
   165e4:	10800d03 	ldbu	r2,52(r2)
   165e8:	10c03fcc 	andi	r3,r2,255
   165ec:	e0bff817 	ldw	r2,-32(fp)
   165f0:	10800d03 	ldbu	r2,52(r2)
   165f4:	11003fcc 	andi	r4,r2,255
   165f8:	d0a82444 	addi	r2,gp,-24431
   165fc:	2085883a 	add	r2,r4,r2
   16600:	10800003 	ldbu	r2,0(r2)
   16604:	1009883a 	mov	r4,r2
   16608:	e0bff817 	ldw	r2,-32(fp)
   1660c:	10800d43 	ldbu	r2,53(r2)
   16610:	0084303a 	nor	r2,zero,r2
   16614:	2084703a 	and	r2,r4,r2
   16618:	1009883a 	mov	r4,r2
   1661c:	d0a82444 	addi	r2,gp,-24431
   16620:	1885883a 	add	r2,r3,r2
   16624:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   16628:	e0bff817 	ldw	r2,-32(fp)
   1662c:	10800d03 	ldbu	r2,52(r2)
   16630:	10c03fcc 	andi	r3,r2,255
   16634:	d0a82444 	addi	r2,gp,-24431
   16638:	1885883a 	add	r2,r3,r2
   1663c:	10800003 	ldbu	r2,0(r2)
   16640:	10803fcc 	andi	r2,r2,255
   16644:	1000071e 	bne	r2,zero,16664 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   16648:	e0bff817 	ldw	r2,-32(fp)
   1664c:	10800d83 	ldbu	r2,54(r2)
   16650:	0084303a 	nor	r2,zero,r2
   16654:	1007883a 	mov	r3,r2
   16658:	d0a82403 	ldbu	r2,-24432(gp)
   1665c:	1884703a 	and	r2,r3,r2
   16660:	d0a82405 	stb	r2,-24432(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   16664:	e0bff817 	ldw	r2,-32(fp)
   16668:	10800717 	ldw	r2,28(r2)
   1666c:	10000526 	beq	r2,zero,16684 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   16670:	e0bff817 	ldw	r2,-32(fp)
   16674:	10800717 	ldw	r2,28(r2)
   16678:	100b883a 	mov	r5,r2
   1667c:	e13ff817 	ldw	r4,-32(fp)
   16680:	00113cc0 	call	113cc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   16684:	e0bff817 	ldw	r2,-32(fp)
   16688:	10800817 	ldw	r2,32(r2)
   1668c:	10000526 	beq	r2,zero,166a4 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   16690:	e0bff817 	ldw	r2,-32(fp)
   16694:	10800817 	ldw	r2,32(r2)
   16698:	100b883a 	mov	r5,r2
   1669c:	e13ff817 	ldw	r4,-32(fp)
   166a0:	00114840 	call	11484 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   166a4:	e0bff817 	ldw	r2,-32(fp)
   166a8:	10800a17 	ldw	r2,40(r2)
   166ac:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   166b0:	e0bffb17 	ldw	r2,-20(fp)
   166b4:	10000226 	beq	r2,zero,166c0 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   166b8:	e13ffb17 	ldw	r4,-20(fp)
   166bc:	00139040 	call	13904 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   166c0:	e0bff817 	ldw	r2,-32(fp)
   166c4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   166c8:	e0bff817 	ldw	r2,-32(fp)
   166cc:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   166d0:	e0bff817 	ldw	r2,-32(fp)
   166d4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   166d8:	d0a81803 	ldbu	r2,-24480(gp)
   166dc:	10803fcc 	andi	r2,r2,255
   166e0:	10803fe0 	cmpeqi	r2,r2,255
   166e4:	1000031e 	bne	r2,zero,166f4 <OSTaskDel+0x214>
        OSLockNesting++;
   166e8:	d0a81803 	ldbu	r2,-24480(gp)
   166ec:	10800044 	addi	r2,r2,1
   166f0:	d0a81805 	stb	r2,-24480(gp)
   166f4:	e0bff617 	ldw	r2,-40(fp)
   166f8:	e0bffd15 	stw	r2,-12(fp)
   166fc:	e0bffd17 	ldw	r2,-12(fp)
   16700:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   16704:	0010fb40 	call	10fb4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16708:	0005303a 	rdctl	r2,status
   1670c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16710:	e0fffa17 	ldw	r3,-24(fp)
   16714:	00bfff84 	movi	r2,-2
   16718:	1884703a 	and	r2,r3,r2
   1671c:	1001703a 	wrctl	status,r2
  
  return context;
   16720:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   16724:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   16728:	d0a81803 	ldbu	r2,-24480(gp)
   1672c:	10803fcc 	andi	r2,r2,255
   16730:	10000326 	beq	r2,zero,16740 <OSTaskDel+0x260>
        OSLockNesting--;
   16734:	d0a81803 	ldbu	r2,-24480(gp)
   16738:	10bfffc4 	addi	r2,r2,-1
   1673c:	d0a81805 	stb	r2,-24480(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   16740:	e13ff817 	ldw	r4,-32(fp)
   16744:	001aef00 	call	1aef0 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   16748:	d0a82043 	ldbu	r2,-24447(gp)
   1674c:	10bfffc4 	addi	r2,r2,-1
   16750:	d0a82045 	stb	r2,-24447(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   16754:	e0ffff03 	ldbu	r3,-4(fp)
   16758:	008000b4 	movhi	r2,2
   1675c:	108be504 	addi	r2,r2,12180
   16760:	18c7883a 	add	r3,r3,r3
   16764:	18c7883a 	add	r3,r3,r3
   16768:	10c5883a 	add	r2,r2,r3
   1676c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   16770:	e0bff817 	ldw	r2,-32(fp)
   16774:	10800617 	ldw	r2,24(r2)
   16778:	1000071e 	bne	r2,zero,16798 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1677c:	e0bff817 	ldw	r2,-32(fp)
   16780:	10800517 	ldw	r2,20(r2)
   16784:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   16788:	e0bff817 	ldw	r2,-32(fp)
   1678c:	10800517 	ldw	r2,20(r2)
   16790:	d0a81b15 	stw	r2,-24468(gp)
   16794:	00000a06 	br	167c0 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   16798:	e0bff817 	ldw	r2,-32(fp)
   1679c:	10800617 	ldw	r2,24(r2)
   167a0:	e0fff817 	ldw	r3,-32(fp)
   167a4:	18c00517 	ldw	r3,20(r3)
   167a8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   167ac:	e0bff817 	ldw	r2,-32(fp)
   167b0:	10800517 	ldw	r2,20(r2)
   167b4:	e0fff817 	ldw	r3,-32(fp)
   167b8:	18c00617 	ldw	r3,24(r3)
   167bc:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   167c0:	d0e81f17 	ldw	r3,-24452(gp)
   167c4:	e0bff817 	ldw	r2,-32(fp)
   167c8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   167cc:	e0bff817 	ldw	r2,-32(fp)
   167d0:	d0a81f15 	stw	r2,-24452(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   167d4:	e0bff817 	ldw	r2,-32(fp)
   167d8:	00c00fc4 	movi	r3,63
   167dc:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   167e0:	e0bff817 	ldw	r2,-32(fp)
   167e4:	10001345 	stb	zero,77(r2)
   167e8:	e0bff617 	ldw	r2,-40(fp)
   167ec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   167f0:	e0bffc17 	ldw	r2,-16(fp)
   167f4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   167f8:	d0a81843 	ldbu	r2,-24479(gp)
   167fc:	10803fcc 	andi	r2,r2,255
   16800:	10800058 	cmpnei	r2,r2,1
   16804:	1000011e 	bne	r2,zero,1680c <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   16808:	0011a200 	call	11a20 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1680c:	0005883a 	mov	r2,zero
}
   16810:	e037883a 	mov	sp,fp
   16814:	dfc00117 	ldw	ra,4(sp)
   16818:	df000017 	ldw	fp,0(sp)
   1681c:	dec00204 	addi	sp,sp,8
   16820:	f800283a 	ret

00016824 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   16824:	defff504 	addi	sp,sp,-44
   16828:	df000a15 	stw	fp,40(sp)
   1682c:	df000a04 	addi	fp,sp,40
   16830:	2005883a 	mov	r2,r4
   16834:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16838:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   1683c:	e0bfff03 	ldbu	r2,-4(fp)
   16840:	10800518 	cmpnei	r2,r2,20
   16844:	1000021e 	bne	r2,zero,16850 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   16848:	00800f84 	movi	r2,62
   1684c:	00004506 	br	16964 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   16850:	e0bfff03 	ldbu	r2,-4(fp)
   16854:	10800530 	cmpltui	r2,r2,20
   16858:	1000051e 	bne	r2,zero,16870 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1685c:	e0bfff03 	ldbu	r2,-4(fp)
   16860:	10803fe0 	cmpeqi	r2,r2,255
   16864:	1000021e 	bne	r2,zero,16870 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   16868:	00800a84 	movi	r2,42
   1686c:	00003d06 	br	16964 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   16870:	e0bfff03 	ldbu	r2,-4(fp)
   16874:	10803fd8 	cmpnei	r2,r2,255
   16878:	1000111e 	bne	r2,zero,168c0 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1687c:	0005303a 	rdctl	r2,status
   16880:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16884:	e0fff917 	ldw	r3,-28(fp)
   16888:	00bfff84 	movi	r2,-2
   1688c:	1884703a 	and	r2,r3,r2
   16890:	1001703a 	wrctl	status,r2
  
  return context;
   16894:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   16898:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1689c:	d0a82717 	ldw	r2,-24420(gp)
   168a0:	10800dc3 	ldbu	r2,55(r2)
   168a4:	e0bff805 	stb	r2,-32(fp)
   168a8:	e0bff617 	ldw	r2,-40(fp)
   168ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   168b0:	e0bffe17 	ldw	r2,-8(fp)
   168b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   168b8:	e0bff803 	ldbu	r2,-32(fp)
   168bc:	00002906 	br	16964 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   168c0:	0005303a 	rdctl	r2,status
   168c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   168c8:	e0fff717 	ldw	r3,-36(fp)
   168cc:	00bfff84 	movi	r2,-2
   168d0:	1884703a 	and	r2,r3,r2
   168d4:	1001703a 	wrctl	status,r2
  
  return context;
   168d8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   168dc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   168e0:	e0ffff03 	ldbu	r3,-4(fp)
   168e4:	008000b4 	movhi	r2,2
   168e8:	108be504 	addi	r2,r2,12180
   168ec:	18c7883a 	add	r3,r3,r3
   168f0:	18c7883a 	add	r3,r3,r3
   168f4:	10c5883a 	add	r2,r2,r3
   168f8:	10800017 	ldw	r2,0(r2)
   168fc:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   16900:	e0bffb17 	ldw	r2,-20(fp)
   16904:	1000061e 	bne	r2,zero,16920 <OSTaskDelReq+0xfc>
   16908:	e0bff617 	ldw	r2,-40(fp)
   1690c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16910:	e0bffa17 	ldw	r2,-24(fp)
   16914:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   16918:	008010c4 	movi	r2,67
   1691c:	00001106 	br	16964 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   16920:	e0bffb17 	ldw	r2,-20(fp)
   16924:	10800058 	cmpnei	r2,r2,1
   16928:	1000061e 	bne	r2,zero,16944 <OSTaskDelReq+0x120>
   1692c:	e0bff617 	ldw	r2,-40(fp)
   16930:	e0bffc15 	stw	r2,-16(fp)
   16934:	e0bffc17 	ldw	r2,-16(fp)
   16938:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1693c:	00800f44 	movi	r2,61
   16940:	00000806 	br	16964 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   16944:	e0bffb17 	ldw	r2,-20(fp)
   16948:	00c00fc4 	movi	r3,63
   1694c:	10c00dc5 	stb	r3,55(r2)
   16950:	e0bff617 	ldw	r2,-40(fp)
   16954:	e0bffd15 	stw	r2,-12(fp)
   16958:	e0bffd17 	ldw	r2,-12(fp)
   1695c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16960:	0005883a 	mov	r2,zero
}
   16964:	e037883a 	mov	sp,fp
   16968:	df000017 	ldw	fp,0(sp)
   1696c:	dec00104 	addi	sp,sp,4
   16970:	f800283a 	ret

00016974 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   16974:	defff404 	addi	sp,sp,-48
   16978:	dfc00b15 	stw	ra,44(sp)
   1697c:	df000a15 	stw	fp,40(sp)
   16980:	df000a04 	addi	fp,sp,40
   16984:	2005883a 	mov	r2,r4
   16988:	e17ffe15 	stw	r5,-8(fp)
   1698c:	e1bfff15 	stw	r6,-4(fp)
   16990:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   16994:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   16998:	e0bfff17 	ldw	r2,-4(fp)
   1699c:	1000021e 	bne	r2,zero,169a8 <OSTaskNameGet+0x34>
        return (0);
   169a0:	0005883a 	mov	r2,zero
   169a4:	00005406 	br	16af8 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   169a8:	e0bffd03 	ldbu	r2,-12(fp)
   169ac:	10800570 	cmpltui	r2,r2,21
   169b0:	1000081e 	bne	r2,zero,169d4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   169b4:	e0bffd03 	ldbu	r2,-12(fp)
   169b8:	10803fe0 	cmpeqi	r2,r2,255
   169bc:	1000051e 	bne	r2,zero,169d4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   169c0:	e0bfff17 	ldw	r2,-4(fp)
   169c4:	00c00a84 	movi	r3,42
   169c8:	10c00005 	stb	r3,0(r2)
            return (0);
   169cc:	0005883a 	mov	r2,zero
   169d0:	00004906 	br	16af8 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   169d4:	e0bffe17 	ldw	r2,-8(fp)
   169d8:	1000051e 	bne	r2,zero,169f0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   169dc:	e0bfff17 	ldw	r2,-4(fp)
   169e0:	00c00304 	movi	r3,12
   169e4:	10c00005 	stb	r3,0(r2)
        return (0);
   169e8:	0005883a 	mov	r2,zero
   169ec:	00004206 	br	16af8 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   169f0:	d0a82603 	ldbu	r2,-24424(gp)
   169f4:	10803fcc 	andi	r2,r2,255
   169f8:	10000526 	beq	r2,zero,16a10 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   169fc:	e0bfff17 	ldw	r2,-4(fp)
   16a00:	00c00444 	movi	r3,17
   16a04:	10c00005 	stb	r3,0(r2)
        return (0);
   16a08:	0005883a 	mov	r2,zero
   16a0c:	00003a06 	br	16af8 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a10:	0005303a 	rdctl	r2,status
   16a14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a18:	e0fffc17 	ldw	r3,-16(fp)
   16a1c:	00bfff84 	movi	r2,-2
   16a20:	1884703a 	and	r2,r3,r2
   16a24:	1001703a 	wrctl	status,r2
  
  return context;
   16a28:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16a2c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   16a30:	e0bffd03 	ldbu	r2,-12(fp)
   16a34:	10803fd8 	cmpnei	r2,r2,255
   16a38:	1000031e 	bne	r2,zero,16a48 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   16a3c:	d0a82717 	ldw	r2,-24420(gp)
   16a40:	10800c83 	ldbu	r2,50(r2)
   16a44:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16a48:	e0fffd03 	ldbu	r3,-12(fp)
   16a4c:	008000b4 	movhi	r2,2
   16a50:	108be504 	addi	r2,r2,12180
   16a54:	18c7883a 	add	r3,r3,r3
   16a58:	18c7883a 	add	r3,r3,r3
   16a5c:	10c5883a 	add	r2,r2,r3
   16a60:	10800017 	ldw	r2,0(r2)
   16a64:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   16a68:	e0bff817 	ldw	r2,-32(fp)
   16a6c:	1000091e 	bne	r2,zero,16a94 <OSTaskNameGet+0x120>
   16a70:	e0bff617 	ldw	r2,-40(fp)
   16a74:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a78:	e0bff717 	ldw	r2,-36(fp)
   16a7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16a80:	e0bfff17 	ldw	r2,-4(fp)
   16a84:	00c010c4 	movi	r3,67
   16a88:	10c00005 	stb	r3,0(r2)
        return (0);
   16a8c:	0005883a 	mov	r2,zero
   16a90:	00001906 	br	16af8 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   16a94:	e0bff817 	ldw	r2,-32(fp)
   16a98:	10800058 	cmpnei	r2,r2,1
   16a9c:	1000091e 	bne	r2,zero,16ac4 <OSTaskNameGet+0x150>
   16aa0:	e0bff617 	ldw	r2,-40(fp)
   16aa4:	e0bff915 	stw	r2,-28(fp)
   16aa8:	e0bff917 	ldw	r2,-28(fp)
   16aac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16ab0:	e0bfff17 	ldw	r2,-4(fp)
   16ab4:	00c010c4 	movi	r3,67
   16ab8:	10c00005 	stb	r3,0(r2)
        return (0);
   16abc:	0005883a 	mov	r2,zero
   16ac0:	00000d06 	br	16af8 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   16ac4:	e0bff817 	ldw	r2,-32(fp)
   16ac8:	10801304 	addi	r2,r2,76
   16acc:	100b883a 	mov	r5,r2
   16ad0:	e13ffe17 	ldw	r4,-8(fp)
   16ad4:	0011b640 	call	11b64 <OS_StrCopy>
   16ad8:	e0bffb05 	stb	r2,-20(fp)
   16adc:	e0bff617 	ldw	r2,-40(fp)
   16ae0:	e0bffa15 	stw	r2,-24(fp)
   16ae4:	e0bffa17 	ldw	r2,-24(fp)
   16ae8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16aec:	e0bfff17 	ldw	r2,-4(fp)
   16af0:	10000005 	stb	zero,0(r2)
    return (len);
   16af4:	e0bffb03 	ldbu	r2,-20(fp)
}
   16af8:	e037883a 	mov	sp,fp
   16afc:	dfc00117 	ldw	ra,4(sp)
   16b00:	df000017 	ldw	fp,0(sp)
   16b04:	dec00204 	addi	sp,sp,8
   16b08:	f800283a 	ret

00016b0c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   16b0c:	defff304 	addi	sp,sp,-52
   16b10:	dfc00c15 	stw	ra,48(sp)
   16b14:	df000b15 	stw	fp,44(sp)
   16b18:	df000b04 	addi	fp,sp,44
   16b1c:	2005883a 	mov	r2,r4
   16b20:	e17ffe15 	stw	r5,-8(fp)
   16b24:	e1bfff15 	stw	r6,-4(fp)
   16b28:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   16b2c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   16b30:	e0bfff17 	ldw	r2,-4(fp)
   16b34:	10005c26 	beq	r2,zero,16ca8 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   16b38:	e0bffd03 	ldbu	r2,-12(fp)
   16b3c:	10800570 	cmpltui	r2,r2,21
   16b40:	1000071e 	bne	r2,zero,16b60 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   16b44:	e0bffd03 	ldbu	r2,-12(fp)
   16b48:	10803fe0 	cmpeqi	r2,r2,255
   16b4c:	1000041e 	bne	r2,zero,16b60 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   16b50:	e0bfff17 	ldw	r2,-4(fp)
   16b54:	00c00a84 	movi	r3,42
   16b58:	10c00005 	stb	r3,0(r2)
            return;
   16b5c:	00005306 	br	16cac <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   16b60:	e0bffe17 	ldw	r2,-8(fp)
   16b64:	1000041e 	bne	r2,zero,16b78 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   16b68:	e0bfff17 	ldw	r2,-4(fp)
   16b6c:	00c00304 	movi	r3,12
   16b70:	10c00005 	stb	r3,0(r2)
        return;
   16b74:	00004d06 	br	16cac <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   16b78:	d0a82603 	ldbu	r2,-24424(gp)
   16b7c:	10803fcc 	andi	r2,r2,255
   16b80:	10000426 	beq	r2,zero,16b94 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   16b84:	e0bfff17 	ldw	r2,-4(fp)
   16b88:	00c00484 	movi	r3,18
   16b8c:	10c00005 	stb	r3,0(r2)
        return;
   16b90:	00004606 	br	16cac <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16b94:	0005303a 	rdctl	r2,status
   16b98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b9c:	e0fffc17 	ldw	r3,-16(fp)
   16ba0:	00bfff84 	movi	r2,-2
   16ba4:	1884703a 	and	r2,r3,r2
   16ba8:	1001703a 	wrctl	status,r2
  
  return context;
   16bac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16bb0:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   16bb4:	e0bffd03 	ldbu	r2,-12(fp)
   16bb8:	10803fd8 	cmpnei	r2,r2,255
   16bbc:	1000031e 	bne	r2,zero,16bcc <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   16bc0:	d0a82717 	ldw	r2,-24420(gp)
   16bc4:	10800c83 	ldbu	r2,50(r2)
   16bc8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16bcc:	e0fffd03 	ldbu	r3,-12(fp)
   16bd0:	008000b4 	movhi	r2,2
   16bd4:	108be504 	addi	r2,r2,12180
   16bd8:	18c7883a 	add	r3,r3,r3
   16bdc:	18c7883a 	add	r3,r3,r3
   16be0:	10c5883a 	add	r2,r2,r3
   16be4:	10800017 	ldw	r2,0(r2)
   16be8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   16bec:	e0bff717 	ldw	r2,-36(fp)
   16bf0:	1000081e 	bne	r2,zero,16c14 <OSTaskNameSet+0x108>
   16bf4:	e0bff517 	ldw	r2,-44(fp)
   16bf8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16bfc:	e0bff617 	ldw	r2,-40(fp)
   16c00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16c04:	e0bfff17 	ldw	r2,-4(fp)
   16c08:	00c010c4 	movi	r3,67
   16c0c:	10c00005 	stb	r3,0(r2)
        return;
   16c10:	00002606 	br	16cac <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   16c14:	e0bff717 	ldw	r2,-36(fp)
   16c18:	10800058 	cmpnei	r2,r2,1
   16c1c:	1000081e 	bne	r2,zero,16c40 <OSTaskNameSet+0x134>
   16c20:	e0bff517 	ldw	r2,-44(fp)
   16c24:	e0bff815 	stw	r2,-32(fp)
   16c28:	e0bff817 	ldw	r2,-32(fp)
   16c2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16c30:	e0bfff17 	ldw	r2,-4(fp)
   16c34:	00c010c4 	movi	r3,67
   16c38:	10c00005 	stb	r3,0(r2)
        return;
   16c3c:	00001b06 	br	16cac <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   16c40:	e13ffe17 	ldw	r4,-8(fp)
   16c44:	0011bd80 	call	11bd8 <OS_StrLen>
   16c48:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   16c4c:	e0bffa03 	ldbu	r2,-24(fp)
   16c50:	10800830 	cmpltui	r2,r2,32
   16c54:	1000081e 	bne	r2,zero,16c78 <OSTaskNameSet+0x16c>
   16c58:	e0bff517 	ldw	r2,-44(fp)
   16c5c:	e0bff915 	stw	r2,-28(fp)
   16c60:	e0bff917 	ldw	r2,-28(fp)
   16c64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   16c68:	e0bfff17 	ldw	r2,-4(fp)
   16c6c:	00c01044 	movi	r3,65
   16c70:	10c00005 	stb	r3,0(r2)
        return;
   16c74:	00000d06 	br	16cac <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   16c78:	e0bff717 	ldw	r2,-36(fp)
   16c7c:	10801304 	addi	r2,r2,76
   16c80:	e17ffe17 	ldw	r5,-8(fp)
   16c84:	1009883a 	mov	r4,r2
   16c88:	0011b640 	call	11b64 <OS_StrCopy>
   16c8c:	e0bff517 	ldw	r2,-44(fp)
   16c90:	e0bffb15 	stw	r2,-20(fp)
   16c94:	e0bffb17 	ldw	r2,-20(fp)
   16c98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16c9c:	e0bfff17 	ldw	r2,-4(fp)
   16ca0:	10000005 	stb	zero,0(r2)
   16ca4:	00000106 	br	16cac <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   16ca8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   16cac:	e037883a 	mov	sp,fp
   16cb0:	dfc00117 	ldw	ra,4(sp)
   16cb4:	df000017 	ldw	fp,0(sp)
   16cb8:	dec00204 	addi	sp,sp,8
   16cbc:	f800283a 	ret

00016cc0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   16cc0:	defff404 	addi	sp,sp,-48
   16cc4:	dfc00b15 	stw	ra,44(sp)
   16cc8:	df000a15 	stw	fp,40(sp)
   16ccc:	df000a04 	addi	fp,sp,40
   16cd0:	2005883a 	mov	r2,r4
   16cd4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   16cd8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   16cdc:	e0bfff03 	ldbu	r2,-4(fp)
   16ce0:	10800530 	cmpltui	r2,r2,20
   16ce4:	1000021e 	bne	r2,zero,16cf0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   16ce8:	00800a84 	movi	r2,42
   16cec:	00006406 	br	16e80 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16cf0:	0005303a 	rdctl	r2,status
   16cf4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16cf8:	e0fffe17 	ldw	r3,-8(fp)
   16cfc:	00bfff84 	movi	r2,-2
   16d00:	1884703a 	and	r2,r3,r2
   16d04:	1001703a 	wrctl	status,r2
  
  return context;
   16d08:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16d0c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   16d10:	e0ffff03 	ldbu	r3,-4(fp)
   16d14:	008000b4 	movhi	r2,2
   16d18:	108be504 	addi	r2,r2,12180
   16d1c:	18c7883a 	add	r3,r3,r3
   16d20:	18c7883a 	add	r3,r3,r3
   16d24:	10c5883a 	add	r2,r2,r3
   16d28:	10800017 	ldw	r2,0(r2)
   16d2c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   16d30:	e0bff817 	ldw	r2,-32(fp)
   16d34:	1000061e 	bne	r2,zero,16d50 <OSTaskResume+0x90>
   16d38:	e0bff617 	ldw	r2,-40(fp)
   16d3c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16d40:	e0bff717 	ldw	r2,-36(fp)
   16d44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   16d48:	00801184 	movi	r2,70
   16d4c:	00004c06 	br	16e80 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   16d50:	e0bff817 	ldw	r2,-32(fp)
   16d54:	10800058 	cmpnei	r2,r2,1
   16d58:	1000061e 	bne	r2,zero,16d74 <OSTaskResume+0xb4>
   16d5c:	e0bff617 	ldw	r2,-40(fp)
   16d60:	e0bff915 	stw	r2,-28(fp)
   16d64:	e0bff917 	ldw	r2,-28(fp)
   16d68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16d6c:	008010c4 	movi	r2,67
   16d70:	00004306 	br	16e80 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   16d74:	e0bff817 	ldw	r2,-32(fp)
   16d78:	10800c03 	ldbu	r2,48(r2)
   16d7c:	10803fcc 	andi	r2,r2,255
   16d80:	1080020c 	andi	r2,r2,8
   16d84:	10003926 	beq	r2,zero,16e6c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   16d88:	e0bff817 	ldw	r2,-32(fp)
   16d8c:	10c00c03 	ldbu	r3,48(r2)
   16d90:	00bffdc4 	movi	r2,-9
   16d94:	1884703a 	and	r2,r3,r2
   16d98:	1007883a 	mov	r3,r2
   16d9c:	e0bff817 	ldw	r2,-32(fp)
   16da0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   16da4:	e0bff817 	ldw	r2,-32(fp)
   16da8:	10800c03 	ldbu	r2,48(r2)
   16dac:	10803fcc 	andi	r2,r2,255
   16db0:	1000281e 	bne	r2,zero,16e54 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   16db4:	e0bff817 	ldw	r2,-32(fp)
   16db8:	10800b8b 	ldhu	r2,46(r2)
   16dbc:	10bfffcc 	andi	r2,r2,65535
   16dc0:	10001f1e 	bne	r2,zero,16e40 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   16dc4:	e0bff817 	ldw	r2,-32(fp)
   16dc8:	10c00d83 	ldbu	r3,54(r2)
   16dcc:	d0a82403 	ldbu	r2,-24432(gp)
   16dd0:	1884b03a 	or	r2,r3,r2
   16dd4:	d0a82405 	stb	r2,-24432(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   16dd8:	e0bff817 	ldw	r2,-32(fp)
   16ddc:	10800d03 	ldbu	r2,52(r2)
   16de0:	10c03fcc 	andi	r3,r2,255
   16de4:	e0bff817 	ldw	r2,-32(fp)
   16de8:	10800d03 	ldbu	r2,52(r2)
   16dec:	11003fcc 	andi	r4,r2,255
   16df0:	d0a82444 	addi	r2,gp,-24431
   16df4:	2085883a 	add	r2,r4,r2
   16df8:	11000003 	ldbu	r4,0(r2)
   16dfc:	e0bff817 	ldw	r2,-32(fp)
   16e00:	10800d43 	ldbu	r2,53(r2)
   16e04:	2084b03a 	or	r2,r4,r2
   16e08:	1009883a 	mov	r4,r2
   16e0c:	d0a82444 	addi	r2,gp,-24431
   16e10:	1885883a 	add	r2,r3,r2
   16e14:	11000005 	stb	r4,0(r2)
   16e18:	e0bff617 	ldw	r2,-40(fp)
   16e1c:	e0bffa15 	stw	r2,-24(fp)
   16e20:	e0bffa17 	ldw	r2,-24(fp)
   16e24:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   16e28:	d0a81843 	ldbu	r2,-24479(gp)
   16e2c:	10803fcc 	andi	r2,r2,255
   16e30:	10800058 	cmpnei	r2,r2,1
   16e34:	10000b1e 	bne	r2,zero,16e64 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   16e38:	0011a200 	call	11a20 <OS_Sched>
   16e3c:	00000906 	br	16e64 <OSTaskResume+0x1a4>
   16e40:	e0bff617 	ldw	r2,-40(fp)
   16e44:	e0bffb15 	stw	r2,-20(fp)
   16e48:	e0bffb17 	ldw	r2,-20(fp)
   16e4c:	1001703a 	wrctl	status,r2
   16e50:	00000406 	br	16e64 <OSTaskResume+0x1a4>
   16e54:	e0bff617 	ldw	r2,-40(fp)
   16e58:	e0bffc15 	stw	r2,-16(fp)
   16e5c:	e0bffc17 	ldw	r2,-16(fp)
   16e60:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   16e64:	0005883a 	mov	r2,zero
   16e68:	00000506 	br	16e80 <OSTaskResume+0x1c0>
   16e6c:	e0bff617 	ldw	r2,-40(fp)
   16e70:	e0bffd15 	stw	r2,-12(fp)
   16e74:	e0bffd17 	ldw	r2,-12(fp)
   16e78:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   16e7c:	00801104 	movi	r2,68
}
   16e80:	e037883a 	mov	sp,fp
   16e84:	dfc00117 	ldw	ra,4(sp)
   16e88:	df000017 	ldw	fp,0(sp)
   16e8c:	dec00204 	addi	sp,sp,8
   16e90:	f800283a 	ret

00016e94 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   16e94:	defff304 	addi	sp,sp,-52
   16e98:	df000c15 	stw	fp,48(sp)
   16e9c:	df000c04 	addi	fp,sp,48
   16ea0:	2005883a 	mov	r2,r4
   16ea4:	e17fff15 	stw	r5,-4(fp)
   16ea8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   16eac:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   16eb0:	e0bffe03 	ldbu	r2,-8(fp)
   16eb4:	10800570 	cmpltui	r2,r2,21
   16eb8:	1000051e 	bne	r2,zero,16ed0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   16ebc:	e0bffe03 	ldbu	r2,-8(fp)
   16ec0:	10803fe0 	cmpeqi	r2,r2,255
   16ec4:	1000021e 	bne	r2,zero,16ed0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   16ec8:	00800a84 	movi	r2,42
   16ecc:	00005d06 	br	17044 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   16ed0:	e0bfff17 	ldw	r2,-4(fp)
   16ed4:	1000021e 	bne	r2,zero,16ee0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   16ed8:	00800244 	movi	r2,9
   16edc:	00005906 	br	17044 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   16ee0:	e0bfff17 	ldw	r2,-4(fp)
   16ee4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   16ee8:	e0bfff17 	ldw	r2,-4(fp)
   16eec:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ef0:	0005303a 	rdctl	r2,status
   16ef4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ef8:	e0fffd17 	ldw	r3,-12(fp)
   16efc:	00bfff84 	movi	r2,-2
   16f00:	1884703a 	and	r2,r3,r2
   16f04:	1001703a 	wrctl	status,r2
  
  return context;
   16f08:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   16f0c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   16f10:	e0bffe03 	ldbu	r2,-8(fp)
   16f14:	10803fd8 	cmpnei	r2,r2,255
   16f18:	1000031e 	bne	r2,zero,16f28 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   16f1c:	d0a82717 	ldw	r2,-24420(gp)
   16f20:	10800c83 	ldbu	r2,50(r2)
   16f24:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16f28:	e0fffe03 	ldbu	r3,-8(fp)
   16f2c:	008000b4 	movhi	r2,2
   16f30:	108be504 	addi	r2,r2,12180
   16f34:	18c7883a 	add	r3,r3,r3
   16f38:	18c7883a 	add	r3,r3,r3
   16f3c:	10c5883a 	add	r2,r2,r3
   16f40:	10800017 	ldw	r2,0(r2)
   16f44:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   16f48:	e0bff817 	ldw	r2,-32(fp)
   16f4c:	1000061e 	bne	r2,zero,16f68 <OSTaskStkChk+0xd4>
   16f50:	e0bff617 	ldw	r2,-40(fp)
   16f54:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16f58:	e0bff717 	ldw	r2,-36(fp)
   16f5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16f60:	008010c4 	movi	r2,67
   16f64:	00003706 	br	17044 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   16f68:	e0bff817 	ldw	r2,-32(fp)
   16f6c:	10800058 	cmpnei	r2,r2,1
   16f70:	1000061e 	bne	r2,zero,16f8c <OSTaskStkChk+0xf8>
   16f74:	e0bff617 	ldw	r2,-40(fp)
   16f78:	e0bff915 	stw	r2,-28(fp)
   16f7c:	e0bff917 	ldw	r2,-28(fp)
   16f80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16f84:	008010c4 	movi	r2,67
   16f88:	00002e06 	br	17044 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   16f8c:	e0bff817 	ldw	r2,-32(fp)
   16f90:	1080040b 	ldhu	r2,16(r2)
   16f94:	10bfffcc 	andi	r2,r2,65535
   16f98:	1080004c 	andi	r2,r2,1
   16f9c:	1000061e 	bne	r2,zero,16fb8 <OSTaskStkChk+0x124>
   16fa0:	e0bff617 	ldw	r2,-40(fp)
   16fa4:	e0bffa15 	stw	r2,-24(fp)
   16fa8:	e0bffa17 	ldw	r2,-24(fp)
   16fac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   16fb0:	00801144 	movi	r2,69
   16fb4:	00002306 	br	17044 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   16fb8:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   16fbc:	e0bff817 	ldw	r2,-32(fp)
   16fc0:	10800317 	ldw	r2,12(r2)
   16fc4:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   16fc8:	e0bff817 	ldw	r2,-32(fp)
   16fcc:	10800217 	ldw	r2,8(r2)
   16fd0:	e0bff415 	stw	r2,-48(fp)
   16fd4:	e0bff617 	ldw	r2,-40(fp)
   16fd8:	e0bffb15 	stw	r2,-20(fp)
   16fdc:	e0bffb17 	ldw	r2,-20(fp)
   16fe0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   16fe4:	00000306 	br	16ff4 <OSTaskStkChk+0x160>
        nfree++;
   16fe8:	e0bff517 	ldw	r2,-44(fp)
   16fec:	10800044 	addi	r2,r2,1
   16ff0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   16ff4:	e0bff417 	ldw	r2,-48(fp)
   16ff8:	10c00104 	addi	r3,r2,4
   16ffc:	e0fff415 	stw	r3,-48(fp)
   17000:	10800017 	ldw	r2,0(r2)
   17004:	103ff826 	beq	r2,zero,16fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016fe8>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   17008:	e0bff517 	ldw	r2,-44(fp)
   1700c:	1085883a 	add	r2,r2,r2
   17010:	1085883a 	add	r2,r2,r2
   17014:	1007883a 	mov	r3,r2
   17018:	e0bfff17 	ldw	r2,-4(fp)
   1701c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   17020:	e0fffc17 	ldw	r3,-16(fp)
   17024:	e0bff517 	ldw	r2,-44(fp)
   17028:	1885c83a 	sub	r2,r3,r2
   1702c:	1085883a 	add	r2,r2,r2
   17030:	1085883a 	add	r2,r2,r2
   17034:	1007883a 	mov	r3,r2
   17038:	e0bfff17 	ldw	r2,-4(fp)
   1703c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   17040:	0005883a 	mov	r2,zero
}
   17044:	e037883a 	mov	sp,fp
   17048:	df000017 	ldw	fp,0(sp)
   1704c:	dec00104 	addi	sp,sp,4
   17050:	f800283a 	ret

00017054 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   17054:	defff504 	addi	sp,sp,-44
   17058:	dfc00a15 	stw	ra,40(sp)
   1705c:	df000915 	stw	fp,36(sp)
   17060:	df000904 	addi	fp,sp,36
   17064:	2005883a 	mov	r2,r4
   17068:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1706c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   17070:	e0bfff03 	ldbu	r2,-4(fp)
   17074:	10800518 	cmpnei	r2,r2,20
   17078:	1000021e 	bne	r2,zero,17084 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1707c:	008011c4 	movi	r2,71
   17080:	00006806 	br	17224 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   17084:	e0bfff03 	ldbu	r2,-4(fp)
   17088:	10800530 	cmpltui	r2,r2,20
   1708c:	1000051e 	bne	r2,zero,170a4 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   17090:	e0bfff03 	ldbu	r2,-4(fp)
   17094:	10803fe0 	cmpeqi	r2,r2,255
   17098:	1000021e 	bne	r2,zero,170a4 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1709c:	00800a84 	movi	r2,42
   170a0:	00006006 	br	17224 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   170a4:	0005303a 	rdctl	r2,status
   170a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   170ac:	e0fffe17 	ldw	r3,-8(fp)
   170b0:	00bfff84 	movi	r2,-2
   170b4:	1884703a 	and	r2,r3,r2
   170b8:	1001703a 	wrctl	status,r2
  
  return context;
   170bc:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   170c0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   170c4:	e0bfff03 	ldbu	r2,-4(fp)
   170c8:	10803fd8 	cmpnei	r2,r2,255
   170cc:	1000061e 	bne	r2,zero,170e8 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   170d0:	d0a82717 	ldw	r2,-24420(gp)
   170d4:	10800c83 	ldbu	r2,50(r2)
   170d8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   170dc:	00800044 	movi	r2,1
   170e0:	e0bff705 	stb	r2,-36(fp)
   170e4:	00000906 	br	1710c <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   170e8:	d0a82717 	ldw	r2,-24420(gp)
   170ec:	10800c83 	ldbu	r2,50(r2)
   170f0:	10c03fcc 	andi	r3,r2,255
   170f4:	e0bfff03 	ldbu	r2,-4(fp)
   170f8:	1880031e 	bne	r3,r2,17108 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   170fc:	00800044 	movi	r2,1
   17100:	e0bff705 	stb	r2,-36(fp)
   17104:	00000106 	br	1710c <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   17108:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1710c:	e0ffff03 	ldbu	r3,-4(fp)
   17110:	008000b4 	movhi	r2,2
   17114:	108be504 	addi	r2,r2,12180
   17118:	18c7883a 	add	r3,r3,r3
   1711c:	18c7883a 	add	r3,r3,r3
   17120:	10c5883a 	add	r2,r2,r3
   17124:	10800017 	ldw	r2,0(r2)
   17128:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1712c:	e0bffa17 	ldw	r2,-24(fp)
   17130:	1000061e 	bne	r2,zero,1714c <OSTaskSuspend+0xf8>
   17134:	e0bff817 	ldw	r2,-32(fp)
   17138:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1713c:	e0bff917 	ldw	r2,-28(fp)
   17140:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   17144:	00801204 	movi	r2,72
   17148:	00003606 	br	17224 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1714c:	e0bffa17 	ldw	r2,-24(fp)
   17150:	10800058 	cmpnei	r2,r2,1
   17154:	1000061e 	bne	r2,zero,17170 <OSTaskSuspend+0x11c>
   17158:	e0bff817 	ldw	r2,-32(fp)
   1715c:	e0bffb15 	stw	r2,-20(fp)
   17160:	e0bffb17 	ldw	r2,-20(fp)
   17164:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17168:	008010c4 	movi	r2,67
   1716c:	00002d06 	br	17224 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   17170:	e0bffa17 	ldw	r2,-24(fp)
   17174:	10800d03 	ldbu	r2,52(r2)
   17178:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1717c:	e0fffd03 	ldbu	r3,-12(fp)
   17180:	e13ffd03 	ldbu	r4,-12(fp)
   17184:	d0a82444 	addi	r2,gp,-24431
   17188:	2085883a 	add	r2,r4,r2
   1718c:	10800003 	ldbu	r2,0(r2)
   17190:	1009883a 	mov	r4,r2
   17194:	e0bffa17 	ldw	r2,-24(fp)
   17198:	10800d43 	ldbu	r2,53(r2)
   1719c:	0084303a 	nor	r2,zero,r2
   171a0:	2084703a 	and	r2,r4,r2
   171a4:	1009883a 	mov	r4,r2
   171a8:	d0a82444 	addi	r2,gp,-24431
   171ac:	1885883a 	add	r2,r3,r2
   171b0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   171b4:	e0fffd03 	ldbu	r3,-12(fp)
   171b8:	d0a82444 	addi	r2,gp,-24431
   171bc:	1885883a 	add	r2,r3,r2
   171c0:	10800003 	ldbu	r2,0(r2)
   171c4:	10803fcc 	andi	r2,r2,255
   171c8:	1000071e 	bne	r2,zero,171e8 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   171cc:	e0bffa17 	ldw	r2,-24(fp)
   171d0:	10800d83 	ldbu	r2,54(r2)
   171d4:	0084303a 	nor	r2,zero,r2
   171d8:	1007883a 	mov	r3,r2
   171dc:	d0a82403 	ldbu	r2,-24432(gp)
   171e0:	1884703a 	and	r2,r3,r2
   171e4:	d0a82405 	stb	r2,-24432(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   171e8:	e0bffa17 	ldw	r2,-24(fp)
   171ec:	10800c03 	ldbu	r2,48(r2)
   171f0:	10800214 	ori	r2,r2,8
   171f4:	1007883a 	mov	r3,r2
   171f8:	e0bffa17 	ldw	r2,-24(fp)
   171fc:	10c00c05 	stb	r3,48(r2)
   17200:	e0bff817 	ldw	r2,-32(fp)
   17204:	e0bffc15 	stw	r2,-16(fp)
   17208:	e0bffc17 	ldw	r2,-16(fp)
   1720c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   17210:	e0bff703 	ldbu	r2,-36(fp)
   17214:	10800058 	cmpnei	r2,r2,1
   17218:	1000011e 	bne	r2,zero,17220 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   1721c:	0011a200 	call	11a20 <OS_Sched>
    }
    return (OS_ERR_NONE);
   17220:	0005883a 	mov	r2,zero
}
   17224:	e037883a 	mov	sp,fp
   17228:	dfc00117 	ldw	ra,4(sp)
   1722c:	df000017 	ldw	fp,0(sp)
   17230:	dec00204 	addi	sp,sp,8
   17234:	f800283a 	ret

00017238 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   17238:	defff604 	addi	sp,sp,-40
   1723c:	dfc00915 	stw	ra,36(sp)
   17240:	df000815 	stw	fp,32(sp)
   17244:	df000804 	addi	fp,sp,32
   17248:	2005883a 	mov	r2,r4
   1724c:	e17fff15 	stw	r5,-4(fp)
   17250:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17254:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   17258:	e0bffe03 	ldbu	r2,-8(fp)
   1725c:	10800570 	cmpltui	r2,r2,21
   17260:	1000051e 	bne	r2,zero,17278 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   17264:	e0bffe03 	ldbu	r2,-8(fp)
   17268:	10803fe0 	cmpeqi	r2,r2,255
   1726c:	1000021e 	bne	r2,zero,17278 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   17270:	00800a84 	movi	r2,42
   17274:	00003406 	br	17348 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   17278:	e0bfff17 	ldw	r2,-4(fp)
   1727c:	1000021e 	bne	r2,zero,17288 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   17280:	00800244 	movi	r2,9
   17284:	00003006 	br	17348 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17288:	0005303a 	rdctl	r2,status
   1728c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17290:	e0fffd17 	ldw	r3,-12(fp)
   17294:	00bfff84 	movi	r2,-2
   17298:	1884703a 	and	r2,r3,r2
   1729c:	1001703a 	wrctl	status,r2
  
  return context;
   172a0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   172a4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   172a8:	e0bffe03 	ldbu	r2,-8(fp)
   172ac:	10803fd8 	cmpnei	r2,r2,255
   172b0:	1000031e 	bne	r2,zero,172c0 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   172b4:	d0a82717 	ldw	r2,-24420(gp)
   172b8:	10800c83 	ldbu	r2,50(r2)
   172bc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   172c0:	e0fffe03 	ldbu	r3,-8(fp)
   172c4:	008000b4 	movhi	r2,2
   172c8:	108be504 	addi	r2,r2,12180
   172cc:	18c7883a 	add	r3,r3,r3
   172d0:	18c7883a 	add	r3,r3,r3
   172d4:	10c5883a 	add	r2,r2,r3
   172d8:	10800017 	ldw	r2,0(r2)
   172dc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   172e0:	e0bffa17 	ldw	r2,-24(fp)
   172e4:	1000061e 	bne	r2,zero,17300 <OSTaskQuery+0xc8>
   172e8:	e0bff817 	ldw	r2,-32(fp)
   172ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   172f0:	e0bff917 	ldw	r2,-28(fp)
   172f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   172f8:	00800a44 	movi	r2,41
   172fc:	00001206 	br	17348 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   17300:	e0bffa17 	ldw	r2,-24(fp)
   17304:	10800058 	cmpnei	r2,r2,1
   17308:	1000061e 	bne	r2,zero,17324 <OSTaskQuery+0xec>
   1730c:	e0bff817 	ldw	r2,-32(fp)
   17310:	e0bffb15 	stw	r2,-20(fp)
   17314:	e0bffb17 	ldw	r2,-20(fp)
   17318:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1731c:	008010c4 	movi	r2,67
   17320:	00000906 	br	17348 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   17324:	01801b04 	movi	r6,108
   17328:	e17ffa17 	ldw	r5,-24(fp)
   1732c:	e13fff17 	ldw	r4,-4(fp)
   17330:	00119b80 	call	119b8 <OS_MemCopy>
   17334:	e0bff817 	ldw	r2,-32(fp)
   17338:	e0bffc15 	stw	r2,-16(fp)
   1733c:	e0bffc17 	ldw	r2,-16(fp)
   17340:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17344:	0005883a 	mov	r2,zero
}
   17348:	e037883a 	mov	sp,fp
   1734c:	dfc00117 	ldw	ra,4(sp)
   17350:	df000017 	ldw	fp,0(sp)
   17354:	dec00204 	addi	sp,sp,8
   17358:	f800283a 	ret

0001735c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1735c:	defffc04 	addi	sp,sp,-16
   17360:	df000315 	stw	fp,12(sp)
   17364:	df000304 	addi	fp,sp,12
   17368:	e13ffd15 	stw	r4,-12(fp)
   1736c:	e17ffe15 	stw	r5,-8(fp)
   17370:	3005883a 	mov	r2,r6
   17374:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   17378:	e0bfff0b 	ldhu	r2,-4(fp)
   1737c:	1080004c 	andi	r2,r2,1
   17380:	10000d26 	beq	r2,zero,173b8 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   17384:	e0bfff0b 	ldhu	r2,-4(fp)
   17388:	1080008c 	andi	r2,r2,2
   1738c:	10000a26 	beq	r2,zero,173b8 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   17390:	00000706 	br	173b0 <OS_TaskStkClr+0x54>
                size--;
   17394:	e0bffe17 	ldw	r2,-8(fp)
   17398:	10bfffc4 	addi	r2,r2,-1
   1739c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   173a0:	e0bffd17 	ldw	r2,-12(fp)
   173a4:	10c00104 	addi	r3,r2,4
   173a8:	e0fffd15 	stw	r3,-12(fp)
   173ac:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   173b0:	e0bffe17 	ldw	r2,-8(fp)
   173b4:	103ff71e 	bne	r2,zero,17394 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017394>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   173b8:	0001883a 	nop
   173bc:	e037883a 	mov	sp,fp
   173c0:	df000017 	ldw	fp,0(sp)
   173c4:	dec00104 	addi	sp,sp,4
   173c8:	f800283a 	ret

000173cc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   173cc:	defff904 	addi	sp,sp,-28
   173d0:	dfc00615 	stw	ra,24(sp)
   173d4:	df000515 	stw	fp,20(sp)
   173d8:	df000504 	addi	fp,sp,20
   173dc:	2005883a 	mov	r2,r4
   173e0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   173e4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   173e8:	d0a82603 	ldbu	r2,-24424(gp)
   173ec:	10803fcc 	andi	r2,r2,255
   173f0:	1000311e 	bne	r2,zero,174b8 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   173f4:	e0bfff0b 	ldhu	r2,-4(fp)
   173f8:	10003026 	beq	r2,zero,174bc <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   173fc:	0005303a 	rdctl	r2,status
   17400:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17404:	e0fffe17 	ldw	r3,-8(fp)
   17408:	00bfff84 	movi	r2,-2
   1740c:	1884703a 	and	r2,r3,r2
   17410:	1001703a 	wrctl	status,r2
  
  return context;
   17414:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   17418:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1741c:	d0a82717 	ldw	r2,-24420(gp)
   17420:	10800d03 	ldbu	r2,52(r2)
   17424:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   17428:	e0fffd03 	ldbu	r3,-12(fp)
   1742c:	e13ffd03 	ldbu	r4,-12(fp)
   17430:	d0a82444 	addi	r2,gp,-24431
   17434:	2085883a 	add	r2,r4,r2
   17438:	10800003 	ldbu	r2,0(r2)
   1743c:	1009883a 	mov	r4,r2
   17440:	d0a82717 	ldw	r2,-24420(gp)
   17444:	10800d43 	ldbu	r2,53(r2)
   17448:	0084303a 	nor	r2,zero,r2
   1744c:	2084703a 	and	r2,r4,r2
   17450:	1009883a 	mov	r4,r2
   17454:	d0a82444 	addi	r2,gp,-24431
   17458:	1885883a 	add	r2,r3,r2
   1745c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   17460:	e0fffd03 	ldbu	r3,-12(fp)
   17464:	d0a82444 	addi	r2,gp,-24431
   17468:	1885883a 	add	r2,r3,r2
   1746c:	10800003 	ldbu	r2,0(r2)
   17470:	10803fcc 	andi	r2,r2,255
   17474:	1000071e 	bne	r2,zero,17494 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   17478:	d0a82717 	ldw	r2,-24420(gp)
   1747c:	10800d83 	ldbu	r2,54(r2)
   17480:	0084303a 	nor	r2,zero,r2
   17484:	1007883a 	mov	r3,r2
   17488:	d0a82403 	ldbu	r2,-24432(gp)
   1748c:	1884703a 	and	r2,r3,r2
   17490:	d0a82405 	stb	r2,-24432(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   17494:	d0a82717 	ldw	r2,-24420(gp)
   17498:	e0ffff0b 	ldhu	r3,-4(fp)
   1749c:	10c00b8d 	sth	r3,46(r2)
   174a0:	e0bffb17 	ldw	r2,-20(fp)
   174a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   174a8:	e0bffc17 	ldw	r2,-16(fp)
   174ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   174b0:	0011a200 	call	11a20 <OS_Sched>
   174b4:	00000106 	br	174bc <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   174b8:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   174bc:	e037883a 	mov	sp,fp
   174c0:	dfc00117 	ldw	ra,4(sp)
   174c4:	df000017 	ldw	fp,0(sp)
   174c8:	dec00204 	addi	sp,sp,8
   174cc:	f800283a 	ret

000174d0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   174d0:	defff804 	addi	sp,sp,-32
   174d4:	dfc00715 	stw	ra,28(sp)
   174d8:	df000615 	stw	fp,24(sp)
   174dc:	df000604 	addi	fp,sp,24
   174e0:	2015883a 	mov	r10,r4
   174e4:	2809883a 	mov	r4,r5
   174e8:	3007883a 	mov	r3,r6
   174ec:	3805883a 	mov	r2,r7
   174f0:	e2bffc05 	stb	r10,-16(fp)
   174f4:	e13ffd05 	stb	r4,-12(fp)
   174f8:	e0fffe05 	stb	r3,-8(fp)
   174fc:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17500:	d0a82603 	ldbu	r2,-24424(gp)
   17504:	10803fcc 	andi	r2,r2,255
   17508:	10000226 	beq	r2,zero,17514 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   1750c:	00801544 	movi	r2,85
   17510:	00004206 	br	1761c <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   17514:	e0bffc03 	ldbu	r2,-16(fp)
   17518:	1000081e 	bne	r2,zero,1753c <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   1751c:	e0bffd03 	ldbu	r2,-12(fp)
   17520:	1000061e 	bne	r2,zero,1753c <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   17524:	e0bffe03 	ldbu	r2,-8(fp)
   17528:	1000041e 	bne	r2,zero,1753c <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   1752c:	e0bfff0b 	ldhu	r2,-4(fp)
   17530:	1000021e 	bne	r2,zero,1753c <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   17534:	00801504 	movi	r2,84
   17538:	00003806 	br	1761c <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   1753c:	e0bffd03 	ldbu	r2,-12(fp)
   17540:	10800f30 	cmpltui	r2,r2,60
   17544:	1000021e 	bne	r2,zero,17550 <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   17548:	00801444 	movi	r2,81
   1754c:	00003306 	br	1761c <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   17550:	e0bffe03 	ldbu	r2,-8(fp)
   17554:	10800f30 	cmpltui	r2,r2,60
   17558:	1000021e 	bne	r2,zero,17564 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1755c:	00801484 	movi	r2,82
   17560:	00002e06 	br	1761c <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   17564:	e0bfff0b 	ldhu	r2,-4(fp)
   17568:	1080fa30 	cmpltui	r2,r2,1000
   1756c:	1000021e 	bne	r2,zero,17578 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   17570:	008014c4 	movi	r2,83
   17574:	00002906 	br	1761c <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   17578:	e0bffc03 	ldbu	r2,-16(fp)
   1757c:	10c38424 	muli	r3,r2,3600
   17580:	e0bffd03 	ldbu	r2,-12(fp)
   17584:	10800f24 	muli	r2,r2,60
   17588:	1887883a 	add	r3,r3,r2
   1758c:	e0bffe03 	ldbu	r2,-8(fp)
   17590:	1885883a 	add	r2,r3,r2
   17594:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   17598:	e0bfff0b 	ldhu	r2,-4(fp)
   1759c:	10800f84 	addi	r2,r2,62
   175a0:	100690fa 	slli	r3,r2,3
   175a4:	008418b4 	movhi	r2,4194
   175a8:	109374c4 	addi	r2,r2,19923
   175ac:	188a383a 	mulxuu	r5,r3,r2
   175b0:	1885383a 	mul	r2,r3,r2
   175b4:	1011883a 	mov	r8,r2
   175b8:	2813883a 	mov	r9,r5
   175bc:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   175c0:	2085883a 	add	r2,r4,r2
   175c4:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   175c8:	e0bffb17 	ldw	r2,-20(fp)
   175cc:	1004d43a 	srli	r2,r2,16
   175d0:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   175d4:	e0bffb17 	ldw	r2,-20(fp)
   175d8:	10bfffcc 	andi	r2,r2,65535
   175dc:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   175e0:	e0bffb17 	ldw	r2,-20(fp)
   175e4:	10bfffcc 	andi	r2,r2,65535
   175e8:	1009883a 	mov	r4,r2
   175ec:	00173cc0 	call	173cc <OSTimeDly>
    while (loops > 0) {
   175f0:	00000706 	br	17610 <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   175f4:	01200014 	movui	r4,32768
   175f8:	00173cc0 	call	173cc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   175fc:	01200014 	movui	r4,32768
   17600:	00173cc0 	call	173cc <OSTimeDly>
        loops--;
   17604:	e0bffa0b 	ldhu	r2,-24(fp)
   17608:	10bfffc4 	addi	r2,r2,-1
   1760c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   17610:	e0bffa0b 	ldhu	r2,-24(fp)
   17614:	103ff71e 	bne	r2,zero,175f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70175f4>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   17618:	0005883a 	mov	r2,zero
}
   1761c:	e037883a 	mov	sp,fp
   17620:	dfc00117 	ldw	ra,4(sp)
   17624:	df000017 	ldw	fp,0(sp)
   17628:	dec00204 	addi	sp,sp,8
   1762c:	f800283a 	ret

00017630 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   17630:	defff504 	addi	sp,sp,-44
   17634:	dfc00a15 	stw	ra,40(sp)
   17638:	df000915 	stw	fp,36(sp)
   1763c:	df000904 	addi	fp,sp,36
   17640:	2005883a 	mov	r2,r4
   17644:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17648:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1764c:	e0bfff03 	ldbu	r2,-4(fp)
   17650:	10800530 	cmpltui	r2,r2,20
   17654:	1000021e 	bne	r2,zero,17660 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   17658:	00800a84 	movi	r2,42
   1765c:	00006406 	br	177f0 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17660:	0005303a 	rdctl	r2,status
   17664:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17668:	e0fffe17 	ldw	r3,-8(fp)
   1766c:	00bfff84 	movi	r2,-2
   17670:	1884703a 	and	r2,r3,r2
   17674:	1001703a 	wrctl	status,r2
  
  return context;
   17678:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1767c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   17680:	e0ffff03 	ldbu	r3,-4(fp)
   17684:	008000b4 	movhi	r2,2
   17688:	108be504 	addi	r2,r2,12180
   1768c:	18c7883a 	add	r3,r3,r3
   17690:	18c7883a 	add	r3,r3,r3
   17694:	10c5883a 	add	r2,r2,r3
   17698:	10800017 	ldw	r2,0(r2)
   1769c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   176a0:	e0bff917 	ldw	r2,-28(fp)
   176a4:	1000061e 	bne	r2,zero,176c0 <OSTimeDlyResume+0x90>
   176a8:	e0bff717 	ldw	r2,-36(fp)
   176ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   176b0:	e0bff817 	ldw	r2,-32(fp)
   176b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   176b8:	008010c4 	movi	r2,67
   176bc:	00004c06 	br	177f0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   176c0:	e0bff917 	ldw	r2,-28(fp)
   176c4:	10800058 	cmpnei	r2,r2,1
   176c8:	1000061e 	bne	r2,zero,176e4 <OSTimeDlyResume+0xb4>
   176cc:	e0bff717 	ldw	r2,-36(fp)
   176d0:	e0bffa15 	stw	r2,-24(fp)
   176d4:	e0bffa17 	ldw	r2,-24(fp)
   176d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   176dc:	008010c4 	movi	r2,67
   176e0:	00004306 	br	177f0 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   176e4:	e0bff917 	ldw	r2,-28(fp)
   176e8:	10800b8b 	ldhu	r2,46(r2)
   176ec:	10bfffcc 	andi	r2,r2,65535
   176f0:	1000061e 	bne	r2,zero,1770c <OSTimeDlyResume+0xdc>
   176f4:	e0bff717 	ldw	r2,-36(fp)
   176f8:	e0bffb15 	stw	r2,-20(fp)
   176fc:	e0bffb17 	ldw	r2,-20(fp)
   17700:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   17704:	00801404 	movi	r2,80
   17708:	00003906 	br	177f0 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1770c:	e0bff917 	ldw	r2,-28(fp)
   17710:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   17714:	e0bff917 	ldw	r2,-28(fp)
   17718:	10800c03 	ldbu	r2,48(r2)
   1771c:	10803fcc 	andi	r2,r2,255
   17720:	10800dcc 	andi	r2,r2,55
   17724:	10000b26 	beq	r2,zero,17754 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   17728:	e0bff917 	ldw	r2,-28(fp)
   1772c:	10c00c03 	ldbu	r3,48(r2)
   17730:	00bff204 	movi	r2,-56
   17734:	1884703a 	and	r2,r3,r2
   17738:	1007883a 	mov	r3,r2
   1773c:	e0bff917 	ldw	r2,-28(fp)
   17740:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   17744:	e0bff917 	ldw	r2,-28(fp)
   17748:	00c00044 	movi	r3,1
   1774c:	10c00c45 	stb	r3,49(r2)
   17750:	00000206 	br	1775c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   17754:	e0bff917 	ldw	r2,-28(fp)
   17758:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1775c:	e0bff917 	ldw	r2,-28(fp)
   17760:	10800c03 	ldbu	r2,48(r2)
   17764:	10803fcc 	andi	r2,r2,255
   17768:	1080020c 	andi	r2,r2,8
   1776c:	10001b1e 	bne	r2,zero,177dc <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   17770:	e0bff917 	ldw	r2,-28(fp)
   17774:	10c00d83 	ldbu	r3,54(r2)
   17778:	d0a82403 	ldbu	r2,-24432(gp)
   1777c:	1884b03a 	or	r2,r3,r2
   17780:	d0a82405 	stb	r2,-24432(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   17784:	e0bff917 	ldw	r2,-28(fp)
   17788:	10800d03 	ldbu	r2,52(r2)
   1778c:	10c03fcc 	andi	r3,r2,255
   17790:	e0bff917 	ldw	r2,-28(fp)
   17794:	10800d03 	ldbu	r2,52(r2)
   17798:	11003fcc 	andi	r4,r2,255
   1779c:	d0a82444 	addi	r2,gp,-24431
   177a0:	2085883a 	add	r2,r4,r2
   177a4:	11000003 	ldbu	r4,0(r2)
   177a8:	e0bff917 	ldw	r2,-28(fp)
   177ac:	10800d43 	ldbu	r2,53(r2)
   177b0:	2084b03a 	or	r2,r4,r2
   177b4:	1009883a 	mov	r4,r2
   177b8:	d0a82444 	addi	r2,gp,-24431
   177bc:	1885883a 	add	r2,r3,r2
   177c0:	11000005 	stb	r4,0(r2)
   177c4:	e0bff717 	ldw	r2,-36(fp)
   177c8:	e0bffc15 	stw	r2,-16(fp)
   177cc:	e0bffc17 	ldw	r2,-16(fp)
   177d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   177d4:	0011a200 	call	11a20 <OS_Sched>
   177d8:	00000406 	br	177ec <OSTimeDlyResume+0x1bc>
   177dc:	e0bff717 	ldw	r2,-36(fp)
   177e0:	e0bffd15 	stw	r2,-12(fp)
   177e4:	e0bffd17 	ldw	r2,-12(fp)
   177e8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   177ec:	0005883a 	mov	r2,zero
}
   177f0:	e037883a 	mov	sp,fp
   177f4:	dfc00117 	ldw	ra,4(sp)
   177f8:	df000017 	ldw	fp,0(sp)
   177fc:	dec00204 	addi	sp,sp,8
   17800:	f800283a 	ret

00017804 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   17804:	defffb04 	addi	sp,sp,-20
   17808:	df000415 	stw	fp,16(sp)
   1780c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17810:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17814:	0005303a 	rdctl	r2,status
   17818:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1781c:	e0fffe17 	ldw	r3,-8(fp)
   17820:	00bfff84 	movi	r2,-2
   17824:	1884703a 	and	r2,r3,r2
   17828:	1001703a 	wrctl	status,r2
  
  return context;
   1782c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   17830:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   17834:	d0a82817 	ldw	r2,-24416(gp)
   17838:	e0bffd15 	stw	r2,-12(fp)
   1783c:	e0bffc17 	ldw	r2,-16(fp)
   17840:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17844:	e0bfff17 	ldw	r2,-4(fp)
   17848:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1784c:	e0bffd17 	ldw	r2,-12(fp)
}
   17850:	e037883a 	mov	sp,fp
   17854:	df000017 	ldw	fp,0(sp)
   17858:	dec00104 	addi	sp,sp,4
   1785c:	f800283a 	ret

00017860 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   17860:	defffb04 	addi	sp,sp,-20
   17864:	df000415 	stw	fp,16(sp)
   17868:	df000404 	addi	fp,sp,16
   1786c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17870:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17874:	0005303a 	rdctl	r2,status
   17878:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1787c:	e0fffd17 	ldw	r3,-12(fp)
   17880:	00bfff84 	movi	r2,-2
   17884:	1884703a 	and	r2,r3,r2
   17888:	1001703a 	wrctl	status,r2
  
  return context;
   1788c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   17890:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   17894:	e0bfff17 	ldw	r2,-4(fp)
   17898:	d0a82815 	stw	r2,-24416(gp)
   1789c:	e0bffc17 	ldw	r2,-16(fp)
   178a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   178a4:	e0bffe17 	ldw	r2,-8(fp)
   178a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   178ac:	0001883a 	nop
   178b0:	e037883a 	mov	sp,fp
   178b4:	df000017 	ldw	fp,0(sp)
   178b8:	dec00104 	addi	sp,sp,4
   178bc:	f800283a 	ret

000178c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   178c0:	defffd04 	addi	sp,sp,-12
   178c4:	dfc00215 	stw	ra,8(sp)
   178c8:	df000115 	stw	fp,4(sp)
   178cc:	df000104 	addi	fp,sp,4
   178d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   178d4:	d1600804 	addi	r5,gp,-32736
   178d8:	e13fff17 	ldw	r4,-4(fp)
   178dc:	001a39c0 	call	1a39c <alt_dev_llist_insert>
}
   178e0:	e037883a 	mov	sp,fp
   178e4:	dfc00117 	ldw	ra,4(sp)
   178e8:	df000017 	ldw	fp,0(sp)
   178ec:	dec00204 	addi	sp,sp,8
   178f0:	f800283a 	ret

000178f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   178f4:	defffd04 	addi	sp,sp,-12
   178f8:	dfc00215 	stw	ra,8(sp)
   178fc:	df000115 	stw	fp,4(sp)
   17900:	df000104 	addi	fp,sp,4
   17904:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   17908:	001ac7c0 	call	1ac7c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1790c:	00800044 	movi	r2,1
   17910:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   17914:	0001883a 	nop
   17918:	e037883a 	mov	sp,fp
   1791c:	dfc00117 	ldw	ra,4(sp)
   17920:	df000017 	ldw	fp,0(sp)
   17924:	dec00204 	addi	sp,sp,8
   17928:	f800283a 	ret

0001792c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1792c:	defffc04 	addi	sp,sp,-16
   17930:	dfc00315 	stw	ra,12(sp)
   17934:	df000215 	stw	fp,8(sp)
   17938:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1793c:	01c00204 	movi	r7,8
   17940:	000d883a 	mov	r6,zero
   17944:	000b883a 	mov	r5,zero
   17948:	01040034 	movhi	r4,4096
   1794c:	21080004 	addi	r4,r4,8192
   17950:	0018ee00 	call	18ee0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   17954:	01800204 	movi	r6,8
   17958:	000b883a 	mov	r5,zero
   1795c:	010000b4 	movhi	r4,2
   17960:	21322904 	addi	r4,r4,-14172
   17964:	00182a40 	call	182a4 <altera_avalon_jtag_uart_init>
   17968:	010000b4 	movhi	r4,2
   1796c:	21321f04 	addi	r4,r4,-14212
   17970:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   17974:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   17978:	010000b4 	movhi	r4,2
   1797c:	21363a04 	addi	r4,r4,-10008
   17980:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   17984:	010000b4 	movhi	r4,2
   17988:	21364604 	addi	r4,r4,-9960
   1798c:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   17990:	010000b4 	movhi	r4,2
   17994:	21365204 	addi	r4,r4,-9912
   17998:	00190080 	call	19008 <alt_up_character_lcd_init>
   1799c:	010000b4 	movhi	r4,2
   179a0:	21365204 	addi	r4,r4,-9912
   179a4:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   179a8:	010000b4 	movhi	r4,2
   179ac:	21365d04 	addi	r4,r4,-9868
   179b0:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   179b4:	010000b4 	movhi	r4,2
   179b8:	21366804 	addi	r4,r4,-9824
   179bc:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   179c0:	010000b4 	movhi	r4,2
   179c4:	21367304 	addi	r4,r4,-9780
   179c8:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   179cc:	010000b4 	movhi	r4,2
   179d0:	21367e04 	addi	r4,r4,-9736
   179d4:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   179d8:	010000b4 	movhi	r4,2
   179dc:	21368904 	addi	r4,r4,-9692
   179e0:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   179e4:	010000b4 	movhi	r4,2
   179e8:	21369404 	addi	r4,r4,-9648
   179ec:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   179f0:	010000b4 	movhi	r4,2
   179f4:	21369f04 	addi	r4,r4,-9604
   179f8:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   179fc:	010000b4 	movhi	r4,2
   17a00:	2136aa04 	addi	r4,r4,-9560
   17a04:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   17a08:	010000b4 	movhi	r4,2
   17a0c:	2136b504 	addi	r4,r4,-9516
   17a10:	00198fc0 	call	198fc <alt_up_ps2_init>
   17a14:	010000b4 	movhi	r4,2
   17a18:	2136b504 	addi	r4,r4,-9516
   17a1c:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   17a20:	010000b4 	movhi	r4,2
   17a24:	2136c304 	addi	r4,r4,-9460
   17a28:	00198fc0 	call	198fc <alt_up_ps2_init>
   17a2c:	010000b4 	movhi	r4,2
   17a30:	2136c304 	addi	r4,r4,-9460
   17a34:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   17a38:	010000b4 	movhi	r4,2
   17a3c:	2136d104 	addi	r4,r4,-9404
   17a40:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   17a44:	010000b4 	movhi	r4,2
   17a48:	2136dc04 	addi	r4,r4,-9360
   17a4c:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   17a50:	008000b4 	movhi	r2,2
   17a54:	10b6e904 	addi	r2,r2,-9308
   17a58:	10800a17 	ldw	r2,40(r2)
   17a5c:	10800017 	ldw	r2,0(r2)
   17a60:	1007883a 	mov	r3,r2
   17a64:	008000b4 	movhi	r2,2
   17a68:	10b6e904 	addi	r2,r2,-9308
   17a6c:	10c00b15 	stw	r3,44(r2)
   17a70:	008000b4 	movhi	r2,2
   17a74:	10b6e904 	addi	r2,r2,-9308
   17a78:	10800a17 	ldw	r2,40(r2)
   17a7c:	10800104 	addi	r2,r2,4
   17a80:	10800017 	ldw	r2,0(r2)
   17a84:	1007883a 	mov	r3,r2
   17a88:	008000b4 	movhi	r2,2
   17a8c:	10b6e904 	addi	r2,r2,-9308
   17a90:	10c00c15 	stw	r3,48(r2)
   17a94:	008000b4 	movhi	r2,2
   17a98:	10b6e904 	addi	r2,r2,-9308
   17a9c:	10800a17 	ldw	r2,40(r2)
   17aa0:	10800204 	addi	r2,r2,8
   17aa4:	10800017 	ldw	r2,0(r2)
   17aa8:	10ffffcc 	andi	r3,r2,65535
   17aac:	008000b4 	movhi	r2,2
   17ab0:	10b6e904 	addi	r2,r2,-9308
   17ab4:	10c01115 	stw	r3,68(r2)
   17ab8:	008000b4 	movhi	r2,2
   17abc:	10b6e904 	addi	r2,r2,-9308
   17ac0:	10800a17 	ldw	r2,40(r2)
   17ac4:	10800204 	addi	r2,r2,8
   17ac8:	10800017 	ldw	r2,0(r2)
   17acc:	1006d43a 	srli	r3,r2,16
   17ad0:	008000b4 	movhi	r2,2
   17ad4:	10b6e904 	addi	r2,r2,-9308
   17ad8:	10c01215 	stw	r3,72(r2)
   17adc:	008000b4 	movhi	r2,2
   17ae0:	10b6e904 	addi	r2,r2,-9308
   17ae4:	10800a17 	ldw	r2,40(r2)
   17ae8:	10800304 	addi	r2,r2,12
   17aec:	10800017 	ldw	r2,0(r2)
   17af0:	1005d07a 	srai	r2,r2,1
   17af4:	10c0004c 	andi	r3,r2,1
   17af8:	008000b4 	movhi	r2,2
   17afc:	10b6e904 	addi	r2,r2,-9308
   17b00:	10c00d15 	stw	r3,52(r2)
   17b04:	008000b4 	movhi	r2,2
   17b08:	10b6e904 	addi	r2,r2,-9308
   17b0c:	10800a17 	ldw	r2,40(r2)
   17b10:	10800304 	addi	r2,r2,12
   17b14:	10800017 	ldw	r2,0(r2)
   17b18:	1005d23a 	srai	r2,r2,8
   17b1c:	10c003cc 	andi	r3,r2,15
   17b20:	008000b4 	movhi	r2,2
   17b24:	10b6e904 	addi	r2,r2,-9308
   17b28:	10c00e15 	stw	r3,56(r2)
   17b2c:	008000b4 	movhi	r2,2
   17b30:	10b6e904 	addi	r2,r2,-9308
   17b34:	10800a17 	ldw	r2,40(r2)
   17b38:	10800304 	addi	r2,r2,12
   17b3c:	10800017 	ldw	r2,0(r2)
   17b40:	1005d1ba 	srai	r2,r2,6
   17b44:	10c000cc 	andi	r3,r2,3
   17b48:	008000b4 	movhi	r2,2
   17b4c:	10b6e904 	addi	r2,r2,-9308
   17b50:	10c00f15 	stw	r3,60(r2)
   17b54:	008000b4 	movhi	r2,2
   17b58:	10b6e904 	addi	r2,r2,-9308
   17b5c:	10800e17 	ldw	r2,56(r2)
   17b60:	1007883a 	mov	r3,r2
   17b64:	008000b4 	movhi	r2,2
   17b68:	10b6e904 	addi	r2,r2,-9308
   17b6c:	10800f17 	ldw	r2,60(r2)
   17b70:	1885383a 	mul	r2,r3,r2
   17b74:	e0bffe05 	stb	r2,-8(fp)
   17b78:	e0bffe03 	ldbu	r2,-8(fp)
   17b7c:	10800268 	cmpgeui	r2,r2,9
   17b80:	1000051e 	bne	r2,zero,17b98 <alt_sys_init+0x26c>
   17b84:	008000b4 	movhi	r2,2
   17b88:	10b6e904 	addi	r2,r2,-9308
   17b8c:	00c00044 	movi	r3,1
   17b90:	10c01015 	stw	r3,64(r2)
   17b94:	00000c06 	br	17bc8 <alt_sys_init+0x29c>
   17b98:	e0bffe03 	ldbu	r2,-8(fp)
   17b9c:	10800468 	cmpgeui	r2,r2,17
   17ba0:	1000051e 	bne	r2,zero,17bb8 <alt_sys_init+0x28c>
   17ba4:	008000b4 	movhi	r2,2
   17ba8:	10b6e904 	addi	r2,r2,-9308
   17bac:	00c00084 	movi	r3,2
   17bb0:	10c01015 	stw	r3,64(r2)
   17bb4:	00000406 	br	17bc8 <alt_sys_init+0x29c>
   17bb8:	008000b4 	movhi	r2,2
   17bbc:	10b6e904 	addi	r2,r2,-9308
   17bc0:	00c00104 	movi	r3,4
   17bc4:	10c01015 	stw	r3,64(r2)
   17bc8:	008000b4 	movhi	r2,2
   17bcc:	10b6e904 	addi	r2,r2,-9308
   17bd0:	10800a17 	ldw	r2,40(r2)
   17bd4:	10800304 	addi	r2,r2,12
   17bd8:	10800017 	ldw	r2,0(r2)
   17bdc:	1005d43a 	srai	r2,r2,16
   17be0:	e0bffe45 	stb	r2,-7(fp)
   17be4:	008000b4 	movhi	r2,2
   17be8:	10b6e904 	addi	r2,r2,-9308
   17bec:	10800a17 	ldw	r2,40(r2)
   17bf0:	10800304 	addi	r2,r2,12
   17bf4:	10800017 	ldw	r2,0(r2)
   17bf8:	1004d63a 	srli	r2,r2,24
   17bfc:	e0bffe85 	stb	r2,-6(fp)
   17c00:	008000b4 	movhi	r2,2
   17c04:	10b6e904 	addi	r2,r2,-9308
   17c08:	10801017 	ldw	r2,64(r2)
   17c0c:	10800058 	cmpnei	r2,r2,1
   17c10:	1000041e 	bne	r2,zero,17c24 <alt_sys_init+0x2f8>
   17c14:	008000b4 	movhi	r2,2
   17c18:	10b6e904 	addi	r2,r2,-9308
   17c1c:	10001315 	stw	zero,76(r2)
   17c20:	00000e06 	br	17c5c <alt_sys_init+0x330>
   17c24:	008000b4 	movhi	r2,2
   17c28:	10b6e904 	addi	r2,r2,-9308
   17c2c:	10801017 	ldw	r2,64(r2)
   17c30:	10800098 	cmpnei	r2,r2,2
   17c34:	1000051e 	bne	r2,zero,17c4c <alt_sys_init+0x320>
   17c38:	008000b4 	movhi	r2,2
   17c3c:	10b6e904 	addi	r2,r2,-9308
   17c40:	00c00044 	movi	r3,1
   17c44:	10c01315 	stw	r3,76(r2)
   17c48:	00000406 	br	17c5c <alt_sys_init+0x330>
   17c4c:	008000b4 	movhi	r2,2
   17c50:	10b6e904 	addi	r2,r2,-9308
   17c54:	00c00084 	movi	r3,2
   17c58:	10c01315 	stw	r3,76(r2)
   17c5c:	e0bffe43 	ldbu	r2,-7(fp)
   17c60:	00c00804 	movi	r3,32
   17c64:	1885c83a 	sub	r2,r3,r2
   17c68:	00ffffc4 	movi	r3,-1
   17c6c:	1886d83a 	srl	r3,r3,r2
   17c70:	008000b4 	movhi	r2,2
   17c74:	10b6e904 	addi	r2,r2,-9308
   17c78:	10c01415 	stw	r3,80(r2)
   17c7c:	e0fffe43 	ldbu	r3,-7(fp)
   17c80:	008000b4 	movhi	r2,2
   17c84:	10b6e904 	addi	r2,r2,-9308
   17c88:	10801317 	ldw	r2,76(r2)
   17c8c:	1887883a 	add	r3,r3,r2
   17c90:	008000b4 	movhi	r2,2
   17c94:	10b6e904 	addi	r2,r2,-9308
   17c98:	10c01515 	stw	r3,84(r2)
   17c9c:	e0bffe83 	ldbu	r2,-6(fp)
   17ca0:	00c00804 	movi	r3,32
   17ca4:	1885c83a 	sub	r2,r3,r2
   17ca8:	00ffffc4 	movi	r3,-1
   17cac:	1886d83a 	srl	r3,r3,r2
   17cb0:	008000b4 	movhi	r2,2
   17cb4:	10b6e904 	addi	r2,r2,-9308
   17cb8:	10c01615 	stw	r3,88(r2)
   17cbc:	010000b4 	movhi	r4,2
   17cc0:	2136e904 	addi	r4,r4,-9308
   17cc4:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   17cc8:	008000b4 	movhi	r2,2
   17ccc:	10b70004 	addi	r2,r2,-9216
   17cd0:	10800a17 	ldw	r2,40(r2)
   17cd4:	10800017 	ldw	r2,0(r2)
   17cd8:	1007883a 	mov	r3,r2
   17cdc:	008000b4 	movhi	r2,2
   17ce0:	10b70004 	addi	r2,r2,-9216
   17ce4:	10c00b15 	stw	r3,44(r2)
   17ce8:	008000b4 	movhi	r2,2
   17cec:	10b70004 	addi	r2,r2,-9216
   17cf0:	10800a17 	ldw	r2,40(r2)
   17cf4:	10800104 	addi	r2,r2,4
   17cf8:	10800017 	ldw	r2,0(r2)
   17cfc:	1007883a 	mov	r3,r2
   17d00:	008000b4 	movhi	r2,2
   17d04:	10b70004 	addi	r2,r2,-9216
   17d08:	10c00c15 	stw	r3,48(r2)
   17d0c:	008000b4 	movhi	r2,2
   17d10:	10b70004 	addi	r2,r2,-9216
   17d14:	10800a17 	ldw	r2,40(r2)
   17d18:	10800204 	addi	r2,r2,8
   17d1c:	10800017 	ldw	r2,0(r2)
   17d20:	10ffffcc 	andi	r3,r2,65535
   17d24:	008000b4 	movhi	r2,2
   17d28:	10b70004 	addi	r2,r2,-9216
   17d2c:	10c01115 	stw	r3,68(r2)
   17d30:	008000b4 	movhi	r2,2
   17d34:	10b70004 	addi	r2,r2,-9216
   17d38:	10800a17 	ldw	r2,40(r2)
   17d3c:	10800204 	addi	r2,r2,8
   17d40:	10800017 	ldw	r2,0(r2)
   17d44:	1006d43a 	srli	r3,r2,16
   17d48:	008000b4 	movhi	r2,2
   17d4c:	10b70004 	addi	r2,r2,-9216
   17d50:	10c01215 	stw	r3,72(r2)
   17d54:	008000b4 	movhi	r2,2
   17d58:	10b70004 	addi	r2,r2,-9216
   17d5c:	10800a17 	ldw	r2,40(r2)
   17d60:	10800304 	addi	r2,r2,12
   17d64:	10800017 	ldw	r2,0(r2)
   17d68:	1005d07a 	srai	r2,r2,1
   17d6c:	10c0004c 	andi	r3,r2,1
   17d70:	008000b4 	movhi	r2,2
   17d74:	10b70004 	addi	r2,r2,-9216
   17d78:	10c00d15 	stw	r3,52(r2)
   17d7c:	008000b4 	movhi	r2,2
   17d80:	10b70004 	addi	r2,r2,-9216
   17d84:	10800a17 	ldw	r2,40(r2)
   17d88:	10800304 	addi	r2,r2,12
   17d8c:	10800017 	ldw	r2,0(r2)
   17d90:	1005d23a 	srai	r2,r2,8
   17d94:	10c003cc 	andi	r3,r2,15
   17d98:	008000b4 	movhi	r2,2
   17d9c:	10b70004 	addi	r2,r2,-9216
   17da0:	10c00e15 	stw	r3,56(r2)
   17da4:	008000b4 	movhi	r2,2
   17da8:	10b70004 	addi	r2,r2,-9216
   17dac:	10800a17 	ldw	r2,40(r2)
   17db0:	10800304 	addi	r2,r2,12
   17db4:	10800017 	ldw	r2,0(r2)
   17db8:	1005d1ba 	srai	r2,r2,6
   17dbc:	10c000cc 	andi	r3,r2,3
   17dc0:	008000b4 	movhi	r2,2
   17dc4:	10b70004 	addi	r2,r2,-9216
   17dc8:	10c00f15 	stw	r3,60(r2)
   17dcc:	008000b4 	movhi	r2,2
   17dd0:	10b70004 	addi	r2,r2,-9216
   17dd4:	10800e17 	ldw	r2,56(r2)
   17dd8:	1007883a 	mov	r3,r2
   17ddc:	008000b4 	movhi	r2,2
   17de0:	10b70004 	addi	r2,r2,-9216
   17de4:	10800f17 	ldw	r2,60(r2)
   17de8:	1885383a 	mul	r2,r3,r2
   17dec:	e0bffec5 	stb	r2,-5(fp)
   17df0:	e0bffec3 	ldbu	r2,-5(fp)
   17df4:	10800268 	cmpgeui	r2,r2,9
   17df8:	1000051e 	bne	r2,zero,17e10 <alt_sys_init+0x4e4>
   17dfc:	008000b4 	movhi	r2,2
   17e00:	10b70004 	addi	r2,r2,-9216
   17e04:	00c00044 	movi	r3,1
   17e08:	10c01015 	stw	r3,64(r2)
   17e0c:	00000c06 	br	17e40 <alt_sys_init+0x514>
   17e10:	e0bffec3 	ldbu	r2,-5(fp)
   17e14:	10800468 	cmpgeui	r2,r2,17
   17e18:	1000051e 	bne	r2,zero,17e30 <alt_sys_init+0x504>
   17e1c:	008000b4 	movhi	r2,2
   17e20:	10b70004 	addi	r2,r2,-9216
   17e24:	00c00084 	movi	r3,2
   17e28:	10c01015 	stw	r3,64(r2)
   17e2c:	00000406 	br	17e40 <alt_sys_init+0x514>
   17e30:	008000b4 	movhi	r2,2
   17e34:	10b70004 	addi	r2,r2,-9216
   17e38:	00c00104 	movi	r3,4
   17e3c:	10c01015 	stw	r3,64(r2)
   17e40:	008000b4 	movhi	r2,2
   17e44:	10b70004 	addi	r2,r2,-9216
   17e48:	10800a17 	ldw	r2,40(r2)
   17e4c:	10800304 	addi	r2,r2,12
   17e50:	10800017 	ldw	r2,0(r2)
   17e54:	1005d43a 	srai	r2,r2,16
   17e58:	e0bfff05 	stb	r2,-4(fp)
   17e5c:	008000b4 	movhi	r2,2
   17e60:	10b70004 	addi	r2,r2,-9216
   17e64:	10800a17 	ldw	r2,40(r2)
   17e68:	10800304 	addi	r2,r2,12
   17e6c:	10800017 	ldw	r2,0(r2)
   17e70:	1004d63a 	srli	r2,r2,24
   17e74:	e0bfff45 	stb	r2,-3(fp)
   17e78:	008000b4 	movhi	r2,2
   17e7c:	10b70004 	addi	r2,r2,-9216
   17e80:	10801017 	ldw	r2,64(r2)
   17e84:	10800058 	cmpnei	r2,r2,1
   17e88:	1000041e 	bne	r2,zero,17e9c <alt_sys_init+0x570>
   17e8c:	008000b4 	movhi	r2,2
   17e90:	10b70004 	addi	r2,r2,-9216
   17e94:	10001315 	stw	zero,76(r2)
   17e98:	00000e06 	br	17ed4 <alt_sys_init+0x5a8>
   17e9c:	008000b4 	movhi	r2,2
   17ea0:	10b70004 	addi	r2,r2,-9216
   17ea4:	10801017 	ldw	r2,64(r2)
   17ea8:	10800098 	cmpnei	r2,r2,2
   17eac:	1000051e 	bne	r2,zero,17ec4 <alt_sys_init+0x598>
   17eb0:	008000b4 	movhi	r2,2
   17eb4:	10b70004 	addi	r2,r2,-9216
   17eb8:	00c00044 	movi	r3,1
   17ebc:	10c01315 	stw	r3,76(r2)
   17ec0:	00000406 	br	17ed4 <alt_sys_init+0x5a8>
   17ec4:	008000b4 	movhi	r2,2
   17ec8:	10b70004 	addi	r2,r2,-9216
   17ecc:	00c00084 	movi	r3,2
   17ed0:	10c01315 	stw	r3,76(r2)
   17ed4:	e0bfff03 	ldbu	r2,-4(fp)
   17ed8:	00c00804 	movi	r3,32
   17edc:	1885c83a 	sub	r2,r3,r2
   17ee0:	00ffffc4 	movi	r3,-1
   17ee4:	1886d83a 	srl	r3,r3,r2
   17ee8:	008000b4 	movhi	r2,2
   17eec:	10b70004 	addi	r2,r2,-9216
   17ef0:	10c01415 	stw	r3,80(r2)
   17ef4:	e0ffff03 	ldbu	r3,-4(fp)
   17ef8:	008000b4 	movhi	r2,2
   17efc:	10b70004 	addi	r2,r2,-9216
   17f00:	10801317 	ldw	r2,76(r2)
   17f04:	1887883a 	add	r3,r3,r2
   17f08:	008000b4 	movhi	r2,2
   17f0c:	10b70004 	addi	r2,r2,-9216
   17f10:	10c01515 	stw	r3,84(r2)
   17f14:	e0bfff43 	ldbu	r2,-3(fp)
   17f18:	00c00804 	movi	r3,32
   17f1c:	1885c83a 	sub	r2,r3,r2
   17f20:	00ffffc4 	movi	r3,-1
   17f24:	1886d83a 	srl	r3,r3,r2
   17f28:	008000b4 	movhi	r2,2
   17f2c:	10b70004 	addi	r2,r2,-9216
   17f30:	10c01615 	stw	r3,88(r2)
   17f34:	010000b4 	movhi	r4,2
   17f38:	21370004 	addi	r4,r4,-9216
   17f3c:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   17f40:	008000b4 	movhi	r2,2
   17f44:	10b71704 	addi	r2,r2,-9124
   17f48:	10800a17 	ldw	r2,40(r2)
   17f4c:	10800017 	ldw	r2,0(r2)
   17f50:	1007883a 	mov	r3,r2
   17f54:	008000b4 	movhi	r2,2
   17f58:	10b71704 	addi	r2,r2,-9124
   17f5c:	10c00b15 	stw	r3,44(r2)
   17f60:	008000b4 	movhi	r2,2
   17f64:	10b71704 	addi	r2,r2,-9124
   17f68:	10800a17 	ldw	r2,40(r2)
   17f6c:	10800104 	addi	r2,r2,4
   17f70:	10800017 	ldw	r2,0(r2)
   17f74:	1007883a 	mov	r3,r2
   17f78:	008000b4 	movhi	r2,2
   17f7c:	10b71704 	addi	r2,r2,-9124
   17f80:	10c00c15 	stw	r3,48(r2)
   17f84:	008000b4 	movhi	r2,2
   17f88:	10b71704 	addi	r2,r2,-9124
   17f8c:	10800a17 	ldw	r2,40(r2)
   17f90:	10800204 	addi	r2,r2,8
   17f94:	10800017 	ldw	r2,0(r2)
   17f98:	10ffffcc 	andi	r3,r2,65535
   17f9c:	008000b4 	movhi	r2,2
   17fa0:	10b71704 	addi	r2,r2,-9124
   17fa4:	10c00f15 	stw	r3,60(r2)
   17fa8:	008000b4 	movhi	r2,2
   17fac:	10b71704 	addi	r2,r2,-9124
   17fb0:	10800a17 	ldw	r2,40(r2)
   17fb4:	10800204 	addi	r2,r2,8
   17fb8:	10800017 	ldw	r2,0(r2)
   17fbc:	1006d43a 	srli	r3,r2,16
   17fc0:	008000b4 	movhi	r2,2
   17fc4:	10b71704 	addi	r2,r2,-9124
   17fc8:	10c01015 	stw	r3,64(r2)
   17fcc:	008000b4 	movhi	r2,2
   17fd0:	10b71704 	addi	r2,r2,-9124
   17fd4:	10800a17 	ldw	r2,40(r2)
   17fd8:	10800304 	addi	r2,r2,12
   17fdc:	10800017 	ldw	r2,0(r2)
   17fe0:	1005d07a 	srai	r2,r2,1
   17fe4:	10c0004c 	andi	r3,r2,1
   17fe8:	008000b4 	movhi	r2,2
   17fec:	10b71704 	addi	r2,r2,-9124
   17ff0:	10c00d15 	stw	r3,52(r2)
   17ff4:	008000b4 	movhi	r2,2
   17ff8:	10b71704 	addi	r2,r2,-9124
   17ffc:	10800a17 	ldw	r2,40(r2)
   18000:	10800304 	addi	r2,r2,12
   18004:	10800017 	ldw	r2,0(r2)
   18008:	1005d13a 	srai	r2,r2,4
   1800c:	10c003cc 	andi	r3,r2,15
   18010:	008000b4 	movhi	r2,2
   18014:	10b71704 	addi	r2,r2,-9124
   18018:	10c00e15 	stw	r3,56(r2)
   1801c:	008000b4 	movhi	r2,2
   18020:	10b71704 	addi	r2,r2,-9124
   18024:	10800a17 	ldw	r2,40(r2)
   18028:	10800304 	addi	r2,r2,12
   1802c:	10800017 	ldw	r2,0(r2)
   18030:	1005d43a 	srai	r2,r2,16
   18034:	e0bfff85 	stb	r2,-2(fp)
   18038:	008000b4 	movhi	r2,2
   1803c:	10b71704 	addi	r2,r2,-9124
   18040:	10800a17 	ldw	r2,40(r2)
   18044:	10800304 	addi	r2,r2,12
   18048:	10800017 	ldw	r2,0(r2)
   1804c:	1004d63a 	srli	r2,r2,24
   18050:	e0bfffc5 	stb	r2,-1(fp)
   18054:	008000b4 	movhi	r2,2
   18058:	10b71704 	addi	r2,r2,-9124
   1805c:	10800e17 	ldw	r2,56(r2)
   18060:	10800058 	cmpnei	r2,r2,1
   18064:	1000041e 	bne	r2,zero,18078 <alt_sys_init+0x74c>
   18068:	008000b4 	movhi	r2,2
   1806c:	10b71704 	addi	r2,r2,-9124
   18070:	10001115 	stw	zero,68(r2)
   18074:	00000e06 	br	180b0 <alt_sys_init+0x784>
   18078:	008000b4 	movhi	r2,2
   1807c:	10b71704 	addi	r2,r2,-9124
   18080:	10800e17 	ldw	r2,56(r2)
   18084:	10800098 	cmpnei	r2,r2,2
   18088:	1000051e 	bne	r2,zero,180a0 <alt_sys_init+0x774>
   1808c:	008000b4 	movhi	r2,2
   18090:	10b71704 	addi	r2,r2,-9124
   18094:	00c00044 	movi	r3,1
   18098:	10c01115 	stw	r3,68(r2)
   1809c:	00000406 	br	180b0 <alt_sys_init+0x784>
   180a0:	008000b4 	movhi	r2,2
   180a4:	10b71704 	addi	r2,r2,-9124
   180a8:	00c00084 	movi	r3,2
   180ac:	10c01115 	stw	r3,68(r2)
   180b0:	e0bfff83 	ldbu	r2,-2(fp)
   180b4:	00c00804 	movi	r3,32
   180b8:	1885c83a 	sub	r2,r3,r2
   180bc:	00ffffc4 	movi	r3,-1
   180c0:	1886d83a 	srl	r3,r3,r2
   180c4:	008000b4 	movhi	r2,2
   180c8:	10b71704 	addi	r2,r2,-9124
   180cc:	10c01215 	stw	r3,72(r2)
   180d0:	e0ffff83 	ldbu	r3,-2(fp)
   180d4:	008000b4 	movhi	r2,2
   180d8:	10b71704 	addi	r2,r2,-9124
   180dc:	10801117 	ldw	r2,68(r2)
   180e0:	1887883a 	add	r3,r3,r2
   180e4:	008000b4 	movhi	r2,2
   180e8:	10b71704 	addi	r2,r2,-9124
   180ec:	10c01315 	stw	r3,76(r2)
   180f0:	e0bfffc3 	ldbu	r2,-1(fp)
   180f4:	00c00804 	movi	r3,32
   180f8:	1885c83a 	sub	r2,r3,r2
   180fc:	00ffffc4 	movi	r3,-1
   18100:	1886d83a 	srl	r3,r3,r2
   18104:	008000b4 	movhi	r2,2
   18108:	10b71704 	addi	r2,r2,-9124
   1810c:	10c01415 	stw	r3,80(r2)
   18110:	010000b4 	movhi	r4,2
   18114:	21371704 	addi	r4,r4,-9124
   18118:	00178c00 	call	178c0 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1811c:	010000b4 	movhi	r4,2
   18120:	21372c04 	addi	r4,r4,-9040
   18124:	00178c00 	call	178c0 <alt_dev_reg>
}
   18128:	0001883a 	nop
   1812c:	e037883a 	mov	sp,fp
   18130:	dfc00117 	ldw	ra,4(sp)
   18134:	df000017 	ldw	fp,0(sp)
   18138:	dec00204 	addi	sp,sp,8
   1813c:	f800283a 	ret

00018140 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   18140:	defffa04 	addi	sp,sp,-24
   18144:	dfc00515 	stw	ra,20(sp)
   18148:	df000415 	stw	fp,16(sp)
   1814c:	df000404 	addi	fp,sp,16
   18150:	e13ffd15 	stw	r4,-12(fp)
   18154:	e17ffe15 	stw	r5,-8(fp)
   18158:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1815c:	e0bffd17 	ldw	r2,-12(fp)
   18160:	10800017 	ldw	r2,0(r2)
   18164:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   18168:	e0bffc17 	ldw	r2,-16(fp)
   1816c:	10c00a04 	addi	r3,r2,40
   18170:	e0bffd17 	ldw	r2,-12(fp)
   18174:	10800217 	ldw	r2,8(r2)
   18178:	100f883a 	mov	r7,r2
   1817c:	e1bfff17 	ldw	r6,-4(fp)
   18180:	e17ffe17 	ldw	r5,-8(fp)
   18184:	1809883a 	mov	r4,r3
   18188:	00188e40 	call	188e4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1818c:	e037883a 	mov	sp,fp
   18190:	dfc00117 	ldw	ra,4(sp)
   18194:	df000017 	ldw	fp,0(sp)
   18198:	dec00204 	addi	sp,sp,8
   1819c:	f800283a 	ret

000181a0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   181a0:	defffa04 	addi	sp,sp,-24
   181a4:	dfc00515 	stw	ra,20(sp)
   181a8:	df000415 	stw	fp,16(sp)
   181ac:	df000404 	addi	fp,sp,16
   181b0:	e13ffd15 	stw	r4,-12(fp)
   181b4:	e17ffe15 	stw	r5,-8(fp)
   181b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   181bc:	e0bffd17 	ldw	r2,-12(fp)
   181c0:	10800017 	ldw	r2,0(r2)
   181c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   181c8:	e0bffc17 	ldw	r2,-16(fp)
   181cc:	10c00a04 	addi	r3,r2,40
   181d0:	e0bffd17 	ldw	r2,-12(fp)
   181d4:	10800217 	ldw	r2,8(r2)
   181d8:	100f883a 	mov	r7,r2
   181dc:	e1bfff17 	ldw	r6,-4(fp)
   181e0:	e17ffe17 	ldw	r5,-8(fp)
   181e4:	1809883a 	mov	r4,r3
   181e8:	0018ba00 	call	18ba0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   181ec:	e037883a 	mov	sp,fp
   181f0:	dfc00117 	ldw	ra,4(sp)
   181f4:	df000017 	ldw	fp,0(sp)
   181f8:	dec00204 	addi	sp,sp,8
   181fc:	f800283a 	ret

00018200 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   18200:	defffc04 	addi	sp,sp,-16
   18204:	dfc00315 	stw	ra,12(sp)
   18208:	df000215 	stw	fp,8(sp)
   1820c:	df000204 	addi	fp,sp,8
   18210:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18214:	e0bfff17 	ldw	r2,-4(fp)
   18218:	10800017 	ldw	r2,0(r2)
   1821c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   18220:	e0bffe17 	ldw	r2,-8(fp)
   18224:	10c00a04 	addi	r3,r2,40
   18228:	e0bfff17 	ldw	r2,-4(fp)
   1822c:	10800217 	ldw	r2,8(r2)
   18230:	100b883a 	mov	r5,r2
   18234:	1809883a 	mov	r4,r3
   18238:	001878c0 	call	1878c <altera_avalon_jtag_uart_close>
}
   1823c:	e037883a 	mov	sp,fp
   18240:	dfc00117 	ldw	ra,4(sp)
   18244:	df000017 	ldw	fp,0(sp)
   18248:	dec00204 	addi	sp,sp,8
   1824c:	f800283a 	ret

00018250 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   18250:	defffa04 	addi	sp,sp,-24
   18254:	dfc00515 	stw	ra,20(sp)
   18258:	df000415 	stw	fp,16(sp)
   1825c:	df000404 	addi	fp,sp,16
   18260:	e13ffd15 	stw	r4,-12(fp)
   18264:	e17ffe15 	stw	r5,-8(fp)
   18268:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1826c:	e0bffd17 	ldw	r2,-12(fp)
   18270:	10800017 	ldw	r2,0(r2)
   18274:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   18278:	e0bffc17 	ldw	r2,-16(fp)
   1827c:	10800a04 	addi	r2,r2,40
   18280:	e1bfff17 	ldw	r6,-4(fp)
   18284:	e17ffe17 	ldw	r5,-8(fp)
   18288:	1009883a 	mov	r4,r2
   1828c:	00187f40 	call	187f4 <altera_avalon_jtag_uart_ioctl>
}
   18290:	e037883a 	mov	sp,fp
   18294:	dfc00117 	ldw	ra,4(sp)
   18298:	df000017 	ldw	fp,0(sp)
   1829c:	dec00204 	addi	sp,sp,8
   182a0:	f800283a 	ret

000182a4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   182a4:	defff204 	addi	sp,sp,-56
   182a8:	dfc00d15 	stw	ra,52(sp)
   182ac:	df000c15 	stw	fp,48(sp)
   182b0:	df000c04 	addi	fp,sp,48
   182b4:	e13ff915 	stw	r4,-28(fp)
   182b8:	e17ffa15 	stw	r5,-24(fp)
   182bc:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   182c0:	e0bff917 	ldw	r2,-28(fp)
   182c4:	10800c04 	addi	r2,r2,48
   182c8:	e0bff415 	stw	r2,-48(fp)
   182cc:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   182d0:	e0bff80b 	ldhu	r2,-32(fp)
   182d4:	e0fff884 	addi	r3,fp,-30
   182d8:	180b883a 	mov	r5,r3
   182dc:	1009883a 	mov	r4,r2
   182e0:	001259c0 	call	1259c <OSFlagCreate>
   182e4:	1007883a 	mov	r3,r2
   182e8:	e0bff417 	ldw	r2,-48(fp)
   182ec:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   182f0:	e0bff917 	ldw	r2,-28(fp)
   182f4:	10800a04 	addi	r2,r2,40
   182f8:	e0bff515 	stw	r2,-44(fp)
   182fc:	00800044 	movi	r2,1
   18300:	e0bff78d 	sth	r2,-34(fp)
   18304:	e0bff78b 	ldhu	r2,-34(fp)
   18308:	1009883a 	mov	r4,r2
   1830c:	00152b00 	call	152b0 <OSSemCreate>
   18310:	1007883a 	mov	r3,r2
   18314:	e0bff517 	ldw	r2,-44(fp)
   18318:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1831c:	e0bff917 	ldw	r2,-28(fp)
   18320:	10800b04 	addi	r2,r2,44
   18324:	e0bff615 	stw	r2,-40(fp)
   18328:	00800044 	movi	r2,1
   1832c:	e0bff70d 	sth	r2,-36(fp)
   18330:	e0bff70b 	ldhu	r2,-36(fp)
   18334:	1009883a 	mov	r4,r2
   18338:	00152b00 	call	152b0 <OSSemCreate>
   1833c:	1007883a 	mov	r3,r2
   18340:	e0bff617 	ldw	r2,-40(fp)
   18344:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   18348:	e0bff917 	ldw	r2,-28(fp)
   1834c:	00c00044 	movi	r3,1
   18350:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   18354:	e0bff917 	ldw	r2,-28(fp)
   18358:	10800017 	ldw	r2,0(r2)
   1835c:	10800104 	addi	r2,r2,4
   18360:	1007883a 	mov	r3,r2
   18364:	e0bff917 	ldw	r2,-28(fp)
   18368:	10800817 	ldw	r2,32(r2)
   1836c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   18370:	e0bffb17 	ldw	r2,-20(fp)
   18374:	018000b4 	movhi	r6,2
   18378:	31a0f804 	addi	r6,r6,-31776
   1837c:	e17ff917 	ldw	r5,-28(fp)
   18380:	1009883a 	mov	r4,r2
   18384:	001a7040 	call	1a704 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   18388:	e0bff917 	ldw	r2,-28(fp)
   1838c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   18390:	e0bff917 	ldw	r2,-28(fp)
   18394:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   18398:	d0e82d17 	ldw	r3,-24396(gp)
   1839c:	e1fff917 	ldw	r7,-28(fp)
   183a0:	018000b4 	movhi	r6,2
   183a4:	31a1a204 	addi	r6,r6,-31096
   183a8:	180b883a 	mov	r5,r3
   183ac:	1009883a 	mov	r4,r2
   183b0:	001a2140 	call	1a214 <alt_alarm_start>
   183b4:	1000040e 	bge	r2,zero,183c8 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   183b8:	e0fff917 	ldw	r3,-28(fp)
   183bc:	00a00034 	movhi	r2,32768
   183c0:	10bfffc4 	addi	r2,r2,-1
   183c4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   183c8:	0001883a 	nop
   183cc:	e037883a 	mov	sp,fp
   183d0:	dfc00117 	ldw	ra,4(sp)
   183d4:	df000017 	ldw	fp,0(sp)
   183d8:	dec00204 	addi	sp,sp,8
   183dc:	f800283a 	ret

000183e0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   183e0:	defff104 	addi	sp,sp,-60
   183e4:	dfc00e15 	stw	ra,56(sp)
   183e8:	df000d15 	stw	fp,52(sp)
   183ec:	df000d04 	addi	fp,sp,52
   183f0:	e13ffe15 	stw	r4,-8(fp)
   183f4:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   183f8:	e0bffe17 	ldw	r2,-8(fp)
   183fc:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   18400:	e0bff517 	ldw	r2,-44(fp)
   18404:	10800017 	ldw	r2,0(r2)
   18408:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1840c:	e0bff617 	ldw	r2,-40(fp)
   18410:	10800104 	addi	r2,r2,4
   18414:	10800037 	ldwio	r2,0(r2)
   18418:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1841c:	e0bff717 	ldw	r2,-36(fp)
   18420:	1080c00c 	andi	r2,r2,768
   18424:	10009126 	beq	r2,zero,1866c <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   18428:	e0bff717 	ldw	r2,-36(fp)
   1842c:	1080400c 	andi	r2,r2,256
   18430:	10004726 	beq	r2,zero,18550 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   18434:	00800074 	movhi	r2,1
   18438:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1843c:	e0bff517 	ldw	r2,-44(fp)
   18440:	10800d17 	ldw	r2,52(r2)
   18444:	10800044 	addi	r2,r2,1
   18448:	1081ffcc 	andi	r2,r2,2047
   1844c:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   18450:	e0bff517 	ldw	r2,-44(fp)
   18454:	10c00e17 	ldw	r3,56(r2)
   18458:	e0bff817 	ldw	r2,-32(fp)
   1845c:	18802726 	beq	r3,r2,184fc <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   18460:	e0bff617 	ldw	r2,-40(fp)
   18464:	10800037 	ldwio	r2,0(r2)
   18468:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1846c:	e0bff317 	ldw	r2,-52(fp)
   18470:	10a0000c 	andi	r2,r2,32768
   18474:	10002326 	beq	r2,zero,18504 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   18478:	e0bff517 	ldw	r2,-44(fp)
   1847c:	10800d17 	ldw	r2,52(r2)
   18480:	e0fff317 	ldw	r3,-52(fp)
   18484:	1809883a 	mov	r4,r3
   18488:	e0fff517 	ldw	r3,-44(fp)
   1848c:	1885883a 	add	r2,r3,r2
   18490:	10801104 	addi	r2,r2,68
   18494:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   18498:	e0bff517 	ldw	r2,-44(fp)
   1849c:	10800d17 	ldw	r2,52(r2)
   184a0:	10800044 	addi	r2,r2,1
   184a4:	10c1ffcc 	andi	r3,r2,2047
   184a8:	e0bff517 	ldw	r2,-44(fp)
   184ac:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   184b0:	e0bff517 	ldw	r2,-44(fp)
   184b4:	10800c17 	ldw	r2,48(r2)
   184b8:	e0bffa15 	stw	r2,-24(fp)
   184bc:	00800044 	movi	r2,1
   184c0:	e0bffb0d 	sth	r2,-20(fp)
   184c4:	00800044 	movi	r2,1
   184c8:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   184cc:	d0a81843 	ldbu	r2,-24479(gp)
   184d0:	10803fcc 	andi	r2,r2,255
   184d4:	103fd926 	beq	r2,zero,1843c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701843c>
  {
    OSFlagPost (group, flags, opt, &err);
   184d8:	e0bffb0b 	ldhu	r2,-20(fp)
   184dc:	e0fffb83 	ldbu	r3,-18(fp)
   184e0:	e13ffcc4 	addi	r4,fp,-13
   184e4:	200f883a 	mov	r7,r4
   184e8:	180d883a 	mov	r6,r3
   184ec:	100b883a 	mov	r5,r2
   184f0:	e13ffa17 	ldw	r4,-24(fp)
   184f4:	00131780 	call	13178 <OSFlagPost>
      }
   184f8:	003fd006 	br	1843c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701843c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   184fc:	0001883a 	nop
   18500:	00000106 	br	18508 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   18504:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   18508:	e0bff317 	ldw	r2,-52(fp)
   1850c:	10bfffec 	andhi	r2,r2,65535
   18510:	10000f26 	beq	r2,zero,18550 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   18514:	e0bff517 	ldw	r2,-44(fp)
   18518:	10c00817 	ldw	r3,32(r2)
   1851c:	00bfff84 	movi	r2,-2
   18520:	1886703a 	and	r3,r3,r2
   18524:	e0bff517 	ldw	r2,-44(fp)
   18528:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1852c:	e0bff617 	ldw	r2,-40(fp)
   18530:	10800104 	addi	r2,r2,4
   18534:	1007883a 	mov	r3,r2
   18538:	e0bff517 	ldw	r2,-44(fp)
   1853c:	10800817 	ldw	r2,32(r2)
   18540:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   18544:	e0bff617 	ldw	r2,-40(fp)
   18548:	10800104 	addi	r2,r2,4
   1854c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   18550:	e0bff717 	ldw	r2,-36(fp)
   18554:	1080800c 	andi	r2,r2,512
   18558:	103fac26 	beq	r2,zero,1840c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701840c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1855c:	e0bff717 	ldw	r2,-36(fp)
   18560:	1004d43a 	srli	r2,r2,16
   18564:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   18568:	00002606 	br	18604 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1856c:	e0bff617 	ldw	r2,-40(fp)
   18570:	e0fff517 	ldw	r3,-44(fp)
   18574:	18c01017 	ldw	r3,64(r3)
   18578:	e13ff517 	ldw	r4,-44(fp)
   1857c:	20c7883a 	add	r3,r4,r3
   18580:	18c21104 	addi	r3,r3,2116
   18584:	18c00003 	ldbu	r3,0(r3)
   18588:	18c03fcc 	andi	r3,r3,255
   1858c:	18c0201c 	xori	r3,r3,128
   18590:	18ffe004 	addi	r3,r3,-128
   18594:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   18598:	e0bff517 	ldw	r2,-44(fp)
   1859c:	10801017 	ldw	r2,64(r2)
   185a0:	10800044 	addi	r2,r2,1
   185a4:	10c1ffcc 	andi	r3,r2,2047
   185a8:	e0bff517 	ldw	r2,-44(fp)
   185ac:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   185b0:	e0bff517 	ldw	r2,-44(fp)
   185b4:	10800c17 	ldw	r2,48(r2)
   185b8:	e0bff915 	stw	r2,-28(fp)
   185bc:	00800084 	movi	r2,2
   185c0:	e0bffc0d 	sth	r2,-16(fp)
   185c4:	00800044 	movi	r2,1
   185c8:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   185cc:	d0a81843 	ldbu	r2,-24479(gp)
   185d0:	10803fcc 	andi	r2,r2,255
   185d4:	10000826 	beq	r2,zero,185f8 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   185d8:	e0bffc0b 	ldhu	r2,-16(fp)
   185dc:	e0fffc83 	ldbu	r3,-14(fp)
   185e0:	e13ffd04 	addi	r4,fp,-12
   185e4:	200f883a 	mov	r7,r4
   185e8:	180d883a 	mov	r6,r3
   185ec:	100b883a 	mov	r5,r2
   185f0:	e13ff917 	ldw	r4,-28(fp)
   185f4:	00131780 	call	13178 <OSFlagPost>

        space--;
   185f8:	e0bff417 	ldw	r2,-48(fp)
   185fc:	10bfffc4 	addi	r2,r2,-1
   18600:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   18604:	e0bff417 	ldw	r2,-48(fp)
   18608:	10000526 	beq	r2,zero,18620 <altera_avalon_jtag_uart_irq+0x240>
   1860c:	e0bff517 	ldw	r2,-44(fp)
   18610:	10c01017 	ldw	r3,64(r2)
   18614:	e0bff517 	ldw	r2,-44(fp)
   18618:	10800f17 	ldw	r2,60(r2)
   1861c:	18bfd31e 	bne	r3,r2,1856c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701856c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   18620:	e0bff417 	ldw	r2,-48(fp)
   18624:	103f7926 	beq	r2,zero,1840c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701840c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   18628:	e0bff517 	ldw	r2,-44(fp)
   1862c:	10c00817 	ldw	r3,32(r2)
   18630:	00bfff44 	movi	r2,-3
   18634:	1886703a 	and	r3,r3,r2
   18638:	e0bff517 	ldw	r2,-44(fp)
   1863c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   18640:	e0bff517 	ldw	r2,-44(fp)
   18644:	10800017 	ldw	r2,0(r2)
   18648:	10800104 	addi	r2,r2,4
   1864c:	1007883a 	mov	r3,r2
   18650:	e0bff517 	ldw	r2,-44(fp)
   18654:	10800817 	ldw	r2,32(r2)
   18658:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1865c:	e0bff617 	ldw	r2,-40(fp)
   18660:	10800104 	addi	r2,r2,4
   18664:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   18668:	003f6806 	br	1840c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701840c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1866c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   18670:	0001883a 	nop
   18674:	e037883a 	mov	sp,fp
   18678:	dfc00117 	ldw	ra,4(sp)
   1867c:	df000017 	ldw	fp,0(sp)
   18680:	dec00204 	addi	sp,sp,8
   18684:	f800283a 	ret

00018688 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   18688:	defff904 	addi	sp,sp,-28
   1868c:	dfc00615 	stw	ra,24(sp)
   18690:	df000515 	stw	fp,20(sp)
   18694:	df000504 	addi	fp,sp,20
   18698:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1869c:	e0bfff17 	ldw	r2,-4(fp)
   186a0:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   186a4:	e0bffb17 	ldw	r2,-20(fp)
   186a8:	10800017 	ldw	r2,0(r2)
   186ac:	10800104 	addi	r2,r2,4
   186b0:	10800037 	ldwio	r2,0(r2)
   186b4:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   186b8:	e0bffc17 	ldw	r2,-16(fp)
   186bc:	1081000c 	andi	r2,r2,1024
   186c0:	10000b26 	beq	r2,zero,186f0 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   186c4:	e0bffb17 	ldw	r2,-20(fp)
   186c8:	10800017 	ldw	r2,0(r2)
   186cc:	10800104 	addi	r2,r2,4
   186d0:	1007883a 	mov	r3,r2
   186d4:	e0bffb17 	ldw	r2,-20(fp)
   186d8:	10800817 	ldw	r2,32(r2)
   186dc:	10810014 	ori	r2,r2,1024
   186e0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   186e4:	e0bffb17 	ldw	r2,-20(fp)
   186e8:	10000915 	stw	zero,36(r2)
   186ec:	00002106 	br	18774 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   186f0:	e0bffb17 	ldw	r2,-20(fp)
   186f4:	10c00917 	ldw	r3,36(r2)
   186f8:	00a00034 	movhi	r2,32768
   186fc:	10bfff04 	addi	r2,r2,-4
   18700:	10c01c36 	bltu	r2,r3,18774 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   18704:	e0bffb17 	ldw	r2,-20(fp)
   18708:	10800917 	ldw	r2,36(r2)
   1870c:	10c00044 	addi	r3,r2,1
   18710:	e0bffb17 	ldw	r2,-20(fp)
   18714:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   18718:	e0bffb17 	ldw	r2,-20(fp)
   1871c:	10c00917 	ldw	r3,36(r2)
   18720:	e0bffb17 	ldw	r2,-20(fp)
   18724:	10800117 	ldw	r2,4(r2)
   18728:	18801236 	bltu	r3,r2,18774 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1872c:	e0bffb17 	ldw	r2,-20(fp)
   18730:	10800c17 	ldw	r2,48(r2)
   18734:	e0bffd15 	stw	r2,-12(fp)
   18738:	00800104 	movi	r2,4
   1873c:	e0bffe0d 	sth	r2,-8(fp)
   18740:	00800044 	movi	r2,1
   18744:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   18748:	d0a81843 	ldbu	r2,-24479(gp)
   1874c:	10803fcc 	andi	r2,r2,255
   18750:	10000826 	beq	r2,zero,18774 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   18754:	e0bffe0b 	ldhu	r2,-8(fp)
   18758:	e0fffe83 	ldbu	r3,-6(fp)
   1875c:	e13ffec4 	addi	r4,fp,-5
   18760:	200f883a 	mov	r7,r4
   18764:	180d883a 	mov	r6,r3
   18768:	100b883a 	mov	r5,r2
   1876c:	e13ffd17 	ldw	r4,-12(fp)
   18770:	00131780 	call	13178 <OSFlagPost>
   18774:	d0a82d17 	ldw	r2,-24396(gp)
    }
  }

  return alt_ticks_per_second();
}
   18778:	e037883a 	mov	sp,fp
   1877c:	dfc00117 	ldw	ra,4(sp)
   18780:	df000017 	ldw	fp,0(sp)
   18784:	dec00204 	addi	sp,sp,8
   18788:	f800283a 	ret

0001878c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1878c:	defffd04 	addi	sp,sp,-12
   18790:	df000215 	stw	fp,8(sp)
   18794:	df000204 	addi	fp,sp,8
   18798:	e13ffe15 	stw	r4,-8(fp)
   1879c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   187a0:	00000506 	br	187b8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   187a4:	e0bfff17 	ldw	r2,-4(fp)
   187a8:	1090000c 	andi	r2,r2,16384
   187ac:	10000226 	beq	r2,zero,187b8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   187b0:	00bffd44 	movi	r2,-11
   187b4:	00000b06 	br	187e4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   187b8:	e0bffe17 	ldw	r2,-8(fp)
   187bc:	10c01017 	ldw	r3,64(r2)
   187c0:	e0bffe17 	ldw	r2,-8(fp)
   187c4:	10800f17 	ldw	r2,60(r2)
   187c8:	18800526 	beq	r3,r2,187e0 <altera_avalon_jtag_uart_close+0x54>
   187cc:	e0bffe17 	ldw	r2,-8(fp)
   187d0:	10c00917 	ldw	r3,36(r2)
   187d4:	e0bffe17 	ldw	r2,-8(fp)
   187d8:	10800117 	ldw	r2,4(r2)
   187dc:	18bff136 	bltu	r3,r2,187a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70187a4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   187e0:	0005883a 	mov	r2,zero
}
   187e4:	e037883a 	mov	sp,fp
   187e8:	df000017 	ldw	fp,0(sp)
   187ec:	dec00104 	addi	sp,sp,4
   187f0:	f800283a 	ret

000187f4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   187f4:	defffa04 	addi	sp,sp,-24
   187f8:	df000515 	stw	fp,20(sp)
   187fc:	df000504 	addi	fp,sp,20
   18800:	e13ffd15 	stw	r4,-12(fp)
   18804:	e17ffe15 	stw	r5,-8(fp)
   18808:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1880c:	00bff9c4 	movi	r2,-25
   18810:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   18814:	e0bffe17 	ldw	r2,-8(fp)
   18818:	10da8060 	cmpeqi	r3,r2,27137
   1881c:	1800031e 	bne	r3,zero,1882c <altera_avalon_jtag_uart_ioctl+0x38>
   18820:	109a80a0 	cmpeqi	r2,r2,27138
   18824:	1000181e 	bne	r2,zero,18888 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   18828:	00002906 	br	188d0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1882c:	e0bffd17 	ldw	r2,-12(fp)
   18830:	10c00117 	ldw	r3,4(r2)
   18834:	00a00034 	movhi	r2,32768
   18838:	10bfffc4 	addi	r2,r2,-1
   1883c:	18802126 	beq	r3,r2,188c4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   18840:	e0bfff17 	ldw	r2,-4(fp)
   18844:	10800017 	ldw	r2,0(r2)
   18848:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1884c:	e0bffc17 	ldw	r2,-16(fp)
   18850:	10800090 	cmplti	r2,r2,2
   18854:	1000061e 	bne	r2,zero,18870 <altera_avalon_jtag_uart_ioctl+0x7c>
   18858:	e0fffc17 	ldw	r3,-16(fp)
   1885c:	00a00034 	movhi	r2,32768
   18860:	10bfffc4 	addi	r2,r2,-1
   18864:	18800226 	beq	r3,r2,18870 <altera_avalon_jtag_uart_ioctl+0x7c>
   18868:	e0bffc17 	ldw	r2,-16(fp)
   1886c:	00000206 	br	18878 <altera_avalon_jtag_uart_ioctl+0x84>
   18870:	00a00034 	movhi	r2,32768
   18874:	10bfff84 	addi	r2,r2,-2
   18878:	e0fffd17 	ldw	r3,-12(fp)
   1887c:	18800115 	stw	r2,4(r3)
      rc = 0;
   18880:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   18884:	00000f06 	br	188c4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   18888:	e0bffd17 	ldw	r2,-12(fp)
   1888c:	10c00117 	ldw	r3,4(r2)
   18890:	00a00034 	movhi	r2,32768
   18894:	10bfffc4 	addi	r2,r2,-1
   18898:	18800c26 	beq	r3,r2,188cc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1889c:	e0bffd17 	ldw	r2,-12(fp)
   188a0:	10c00917 	ldw	r3,36(r2)
   188a4:	e0bffd17 	ldw	r2,-12(fp)
   188a8:	10800117 	ldw	r2,4(r2)
   188ac:	1885803a 	cmpltu	r2,r3,r2
   188b0:	10c03fcc 	andi	r3,r2,255
   188b4:	e0bfff17 	ldw	r2,-4(fp)
   188b8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   188bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   188c0:	00000206 	br	188cc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   188c4:	0001883a 	nop
   188c8:	00000106 	br	188d0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   188cc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   188d0:	e0bffb17 	ldw	r2,-20(fp)
}
   188d4:	e037883a 	mov	sp,fp
   188d8:	df000017 	ldw	fp,0(sp)
   188dc:	dec00104 	addi	sp,sp,4
   188e0:	f800283a 	ret

000188e4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   188e4:	deffed04 	addi	sp,sp,-76
   188e8:	dfc01215 	stw	ra,72(sp)
   188ec:	df001115 	stw	fp,68(sp)
   188f0:	df001104 	addi	fp,sp,68
   188f4:	e13ffc15 	stw	r4,-16(fp)
   188f8:	e17ffd15 	stw	r5,-12(fp)
   188fc:	e1bffe15 	stw	r6,-8(fp)
   18900:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   18904:	e0bffd17 	ldw	r2,-12(fp)
   18908:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1890c:	e0bffc17 	ldw	r2,-16(fp)
   18910:	10800a17 	ldw	r2,40(r2)
   18914:	e0bff815 	stw	r2,-32(fp)
   18918:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1891c:	e0bff90b 	ldhu	r2,-28(fp)
   18920:	e0fffb04 	addi	r3,fp,-20
   18924:	180d883a 	mov	r6,r3
   18928:	100b883a 	mov	r5,r2
   1892c:	e13ff817 	ldw	r4,-32(fp)
   18930:	00155c80 	call	155c8 <OSSemPend>

  while (space > 0)
   18934:	00006106 	br	18abc <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   18938:	e0bffc17 	ldw	r2,-16(fp)
   1893c:	10800d17 	ldw	r2,52(r2)
   18940:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   18944:	e0bffc17 	ldw	r2,-16(fp)
   18948:	10800e17 	ldw	r2,56(r2)
   1894c:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   18950:	e0fff317 	ldw	r3,-52(fp)
   18954:	e0bff417 	ldw	r2,-48(fp)
   18958:	18800536 	bltu	r3,r2,18970 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1895c:	e0fff317 	ldw	r3,-52(fp)
   18960:	e0bff417 	ldw	r2,-48(fp)
   18964:	1885c83a 	sub	r2,r3,r2
   18968:	e0bff115 	stw	r2,-60(fp)
   1896c:	00000406 	br	18980 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   18970:	00c20004 	movi	r3,2048
   18974:	e0bff417 	ldw	r2,-48(fp)
   18978:	1885c83a 	sub	r2,r3,r2
   1897c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   18980:	e0bff117 	ldw	r2,-60(fp)
   18984:	10001e26 	beq	r2,zero,18a00 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   18988:	e0fffe17 	ldw	r3,-8(fp)
   1898c:	e0bff117 	ldw	r2,-60(fp)
   18990:	1880022e 	bgeu	r3,r2,1899c <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   18994:	e0bffe17 	ldw	r2,-8(fp)
   18998:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1899c:	e0bffc17 	ldw	r2,-16(fp)
   189a0:	10c01104 	addi	r3,r2,68
   189a4:	e0bff417 	ldw	r2,-48(fp)
   189a8:	1885883a 	add	r2,r3,r2
   189ac:	e1bff117 	ldw	r6,-60(fp)
   189b0:	100b883a 	mov	r5,r2
   189b4:	e13ff017 	ldw	r4,-64(fp)
   189b8:	000a76c0 	call	a76c <memcpy>
      ptr   += n;
   189bc:	e0fff017 	ldw	r3,-64(fp)
   189c0:	e0bff117 	ldw	r2,-60(fp)
   189c4:	1885883a 	add	r2,r3,r2
   189c8:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   189cc:	e0fffe17 	ldw	r3,-8(fp)
   189d0:	e0bff117 	ldw	r2,-60(fp)
   189d4:	1885c83a 	sub	r2,r3,r2
   189d8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   189dc:	e0fff417 	ldw	r3,-48(fp)
   189e0:	e0bff117 	ldw	r2,-60(fp)
   189e4:	1885883a 	add	r2,r3,r2
   189e8:	10c1ffcc 	andi	r3,r2,2047
   189ec:	e0bffc17 	ldw	r2,-16(fp)
   189f0:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   189f4:	e0bffe17 	ldw	r2,-8(fp)
   189f8:	00bfcf16 	blt	zero,r2,18938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018938>
   189fc:	00000106 	br	18a04 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   18a00:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   18a04:	e0fff017 	ldw	r3,-64(fp)
   18a08:	e0bffd17 	ldw	r2,-12(fp)
   18a0c:	18802e1e 	bne	r3,r2,18ac8 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   18a10:	e0bfff17 	ldw	r2,-4(fp)
   18a14:	1090000c 	andi	r2,r2,16384
   18a18:	10002d1e 	bne	r2,zero,18ad0 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   18a1c:	d0a81843 	ldbu	r2,-24479(gp)
   18a20:	10803fcc 	andi	r2,r2,255
   18a24:	10800058 	cmpnei	r2,r2,1
   18a28:	1000161e 	bne	r2,zero,18a84 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   18a2c:	e0bffc17 	ldw	r2,-16(fp)
   18a30:	10800c17 	ldw	r2,48(r2)
   18a34:	e0bff215 	stw	r2,-56(fp)
   18a38:	00800144 	movi	r2,5
   18a3c:	e0bff98d 	sth	r2,-26(fp)
   18a40:	00bfe0c4 	movi	r2,-125
   18a44:	e0bffa05 	stb	r2,-24(fp)
   18a48:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   18a4c:	d0a81843 	ldbu	r2,-24479(gp)
   18a50:	10803fcc 	andi	r2,r2,255
   18a54:	10001526 	beq	r2,zero,18aac <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   18a58:	e0fff98b 	ldhu	r3,-26(fp)
   18a5c:	e13ffa03 	ldbu	r4,-24(fp)
   18a60:	e17ffa8b 	ldhu	r5,-22(fp)
   18a64:	e0bffb44 	addi	r2,fp,-19
   18a68:	d8800015 	stw	r2,0(sp)
   18a6c:	280f883a 	mov	r7,r5
   18a70:	200d883a 	mov	r6,r4
   18a74:	180b883a 	mov	r5,r3
   18a78:	e13ff217 	ldw	r4,-56(fp)
   18a7c:	0012b600 	call	12b60 <OSFlagPend>
   18a80:	00000a06 	br	18aac <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   18a84:	0001883a 	nop
   18a88:	e0bffc17 	ldw	r2,-16(fp)
   18a8c:	10c00d17 	ldw	r3,52(r2)
   18a90:	e0bff317 	ldw	r2,-52(fp)
   18a94:	1880051e 	bne	r3,r2,18aac <altera_avalon_jtag_uart_read+0x1c8>
   18a98:	e0bffc17 	ldw	r2,-16(fp)
   18a9c:	10c00917 	ldw	r3,36(r2)
   18aa0:	e0bffc17 	ldw	r2,-16(fp)
   18aa4:	10800117 	ldw	r2,4(r2)
   18aa8:	18bff736 	bltu	r3,r2,18a88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018a88>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   18aac:	e0bffc17 	ldw	r2,-16(fp)
   18ab0:	10c00d17 	ldw	r3,52(r2)
   18ab4:	e0bff317 	ldw	r2,-52(fp)
   18ab8:	18800726 	beq	r3,r2,18ad8 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   18abc:	e0bffe17 	ldw	r2,-8(fp)
   18ac0:	00bf9d16 	blt	zero,r2,18938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018938>
   18ac4:	00000506 	br	18adc <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   18ac8:	0001883a 	nop
   18acc:	00000306 	br	18adc <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   18ad0:	0001883a 	nop
   18ad4:	00000106 	br	18adc <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   18ad8:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   18adc:	e0bffc17 	ldw	r2,-16(fp)
   18ae0:	10800a17 	ldw	r2,40(r2)
   18ae4:	1009883a 	mov	r4,r2
   18ae8:	00159400 	call	15940 <OSSemPost>

  if (ptr != buffer)
   18aec:	e0fff017 	ldw	r3,-64(fp)
   18af0:	e0bffd17 	ldw	r2,-12(fp)
   18af4:	18801826 	beq	r3,r2,18b58 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18af8:	0005303a 	rdctl	r2,status
   18afc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b00:	e0fff717 	ldw	r3,-36(fp)
   18b04:	00bfff84 	movi	r2,-2
   18b08:	1884703a 	and	r2,r3,r2
   18b0c:	1001703a 	wrctl	status,r2
  
  return context;
   18b10:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   18b14:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   18b18:	e0bffc17 	ldw	r2,-16(fp)
   18b1c:	10800817 	ldw	r2,32(r2)
   18b20:	10c00054 	ori	r3,r2,1
   18b24:	e0bffc17 	ldw	r2,-16(fp)
   18b28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   18b2c:	e0bffc17 	ldw	r2,-16(fp)
   18b30:	10800017 	ldw	r2,0(r2)
   18b34:	10800104 	addi	r2,r2,4
   18b38:	1007883a 	mov	r3,r2
   18b3c:	e0bffc17 	ldw	r2,-16(fp)
   18b40:	10800817 	ldw	r2,32(r2)
   18b44:	18800035 	stwio	r2,0(r3)
   18b48:	e0bff617 	ldw	r2,-40(fp)
   18b4c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18b50:	e0bff517 	ldw	r2,-44(fp)
   18b54:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   18b58:	e0fff017 	ldw	r3,-64(fp)
   18b5c:	e0bffd17 	ldw	r2,-12(fp)
   18b60:	18800426 	beq	r3,r2,18b74 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   18b64:	e0fff017 	ldw	r3,-64(fp)
   18b68:	e0bffd17 	ldw	r2,-12(fp)
   18b6c:	1885c83a 	sub	r2,r3,r2
   18b70:	00000606 	br	18b8c <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   18b74:	e0bfff17 	ldw	r2,-4(fp)
   18b78:	1090000c 	andi	r2,r2,16384
   18b7c:	10000226 	beq	r2,zero,18b88 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   18b80:	00bffd44 	movi	r2,-11
   18b84:	00000106 	br	18b8c <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   18b88:	00bffec4 	movi	r2,-5
}
   18b8c:	e037883a 	mov	sp,fp
   18b90:	dfc00117 	ldw	ra,4(sp)
   18b94:	df000017 	ldw	fp,0(sp)
   18b98:	dec00204 	addi	sp,sp,8
   18b9c:	f800283a 	ret

00018ba0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   18ba0:	deffed04 	addi	sp,sp,-76
   18ba4:	dfc01215 	stw	ra,72(sp)
   18ba8:	df001115 	stw	fp,68(sp)
   18bac:	df001104 	addi	fp,sp,68
   18bb0:	e13ffc15 	stw	r4,-16(fp)
   18bb4:	e17ffd15 	stw	r5,-12(fp)
   18bb8:	e1bffe15 	stw	r6,-8(fp)
   18bbc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   18bc0:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   18bc4:	e0bffd17 	ldw	r2,-12(fp)
   18bc8:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   18bcc:	e0bffc17 	ldw	r2,-16(fp)
   18bd0:	10800b17 	ldw	r2,44(r2)
   18bd4:	e0bff815 	stw	r2,-32(fp)
   18bd8:	e03ff90d 	sth	zero,-28(fp)
   18bdc:	e0bff90b 	ldhu	r2,-28(fp)
   18be0:	e0fffb44 	addi	r3,fp,-19
   18be4:	180d883a 	mov	r6,r3
   18be8:	100b883a 	mov	r5,r2
   18bec:	e13ff817 	ldw	r4,-32(fp)
   18bf0:	00155c80 	call	155c8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   18bf4:	00003706 	br	18cd4 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   18bf8:	e0bffc17 	ldw	r2,-16(fp)
   18bfc:	10800f17 	ldw	r2,60(r2)
   18c00:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   18c04:	e0bffc17 	ldw	r2,-16(fp)
   18c08:	10801017 	ldw	r2,64(r2)
   18c0c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   18c10:	e0fff417 	ldw	r3,-48(fp)
   18c14:	e0bff017 	ldw	r2,-64(fp)
   18c18:	1880062e 	bgeu	r3,r2,18c34 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   18c1c:	e0fff017 	ldw	r3,-64(fp)
   18c20:	e0bff417 	ldw	r2,-48(fp)
   18c24:	1885c83a 	sub	r2,r3,r2
   18c28:	10bfffc4 	addi	r2,r2,-1
   18c2c:	e0bff115 	stw	r2,-60(fp)
   18c30:	00000b06 	br	18c60 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   18c34:	e0bff017 	ldw	r2,-64(fp)
   18c38:	10000526 	beq	r2,zero,18c50 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   18c3c:	00c20004 	movi	r3,2048
   18c40:	e0bff417 	ldw	r2,-48(fp)
   18c44:	1885c83a 	sub	r2,r3,r2
   18c48:	e0bff115 	stw	r2,-60(fp)
   18c4c:	00000406 	br	18c60 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   18c50:	00c1ffc4 	movi	r3,2047
   18c54:	e0bff417 	ldw	r2,-48(fp)
   18c58:	1885c83a 	sub	r2,r3,r2
   18c5c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   18c60:	e0bff117 	ldw	r2,-60(fp)
   18c64:	10001e26 	beq	r2,zero,18ce0 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   18c68:	e0fffe17 	ldw	r3,-8(fp)
   18c6c:	e0bff117 	ldw	r2,-60(fp)
   18c70:	1880022e 	bgeu	r3,r2,18c7c <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   18c74:	e0bffe17 	ldw	r2,-8(fp)
   18c78:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   18c7c:	e0bffc17 	ldw	r2,-16(fp)
   18c80:	10c21104 	addi	r3,r2,2116
   18c84:	e0bff417 	ldw	r2,-48(fp)
   18c88:	1885883a 	add	r2,r3,r2
   18c8c:	e1bff117 	ldw	r6,-60(fp)
   18c90:	e17ffd17 	ldw	r5,-12(fp)
   18c94:	1009883a 	mov	r4,r2
   18c98:	000a76c0 	call	a76c <memcpy>
      ptr   += n;
   18c9c:	e0fffd17 	ldw	r3,-12(fp)
   18ca0:	e0bff117 	ldw	r2,-60(fp)
   18ca4:	1885883a 	add	r2,r3,r2
   18ca8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   18cac:	e0fffe17 	ldw	r3,-8(fp)
   18cb0:	e0bff117 	ldw	r2,-60(fp)
   18cb4:	1885c83a 	sub	r2,r3,r2
   18cb8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   18cbc:	e0fff417 	ldw	r3,-48(fp)
   18cc0:	e0bff117 	ldw	r2,-60(fp)
   18cc4:	1885883a 	add	r2,r3,r2
   18cc8:	10c1ffcc 	andi	r3,r2,2047
   18ccc:	e0bffc17 	ldw	r2,-16(fp)
   18cd0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   18cd4:	e0bffe17 	ldw	r2,-8(fp)
   18cd8:	00bfc716 	blt	zero,r2,18bf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018bf8>
   18cdc:	00000106 	br	18ce4 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   18ce0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18ce4:	0005303a 	rdctl	r2,status
   18ce8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18cec:	e0fff717 	ldw	r3,-36(fp)
   18cf0:	00bfff84 	movi	r2,-2
   18cf4:	1884703a 	and	r2,r3,r2
   18cf8:	1001703a 	wrctl	status,r2
  
  return context;
   18cfc:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   18d00:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   18d04:	e0bffc17 	ldw	r2,-16(fp)
   18d08:	10800817 	ldw	r2,32(r2)
   18d0c:	10c00094 	ori	r3,r2,2
   18d10:	e0bffc17 	ldw	r2,-16(fp)
   18d14:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   18d18:	e0bffc17 	ldw	r2,-16(fp)
   18d1c:	10800017 	ldw	r2,0(r2)
   18d20:	10800104 	addi	r2,r2,4
   18d24:	1007883a 	mov	r3,r2
   18d28:	e0bffc17 	ldw	r2,-16(fp)
   18d2c:	10800817 	ldw	r2,32(r2)
   18d30:	18800035 	stwio	r2,0(r3)
   18d34:	e0bff617 	ldw	r2,-40(fp)
   18d38:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18d3c:	e0bff317 	ldw	r2,-52(fp)
   18d40:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   18d44:	e0bffe17 	ldw	r2,-8(fp)
   18d48:	00802a0e 	bge	zero,r2,18df4 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   18d4c:	e0bfff17 	ldw	r2,-4(fp)
   18d50:	1090000c 	andi	r2,r2,16384
   18d54:	10002a1e 	bne	r2,zero,18e00 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   18d58:	d0a81843 	ldbu	r2,-24479(gp)
   18d5c:	10803fcc 	andi	r2,r2,255
   18d60:	10800058 	cmpnei	r2,r2,1
   18d64:	1000161e 	bne	r2,zero,18dc0 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   18d68:	e0bffc17 	ldw	r2,-16(fp)
   18d6c:	10800c17 	ldw	r2,48(r2)
   18d70:	e0bff515 	stw	r2,-44(fp)
   18d74:	00800184 	movi	r2,6
   18d78:	e0bff98d 	sth	r2,-26(fp)
   18d7c:	00bfe0c4 	movi	r2,-125
   18d80:	e0bffa05 	stb	r2,-24(fp)
   18d84:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   18d88:	d0a81843 	ldbu	r2,-24479(gp)
   18d8c:	10803fcc 	andi	r2,r2,255
   18d90:	10001526 	beq	r2,zero,18de8 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   18d94:	e0fff98b 	ldhu	r3,-26(fp)
   18d98:	e13ffa03 	ldbu	r4,-24(fp)
   18d9c:	e17ffa8b 	ldhu	r5,-22(fp)
   18da0:	e0bffb04 	addi	r2,fp,-20
   18da4:	d8800015 	stw	r2,0(sp)
   18da8:	280f883a 	mov	r7,r5
   18dac:	200d883a 	mov	r6,r4
   18db0:	180b883a 	mov	r5,r3
   18db4:	e13ff517 	ldw	r4,-44(fp)
   18db8:	0012b600 	call	12b60 <OSFlagPend>
   18dbc:	00000a06 	br	18de8 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   18dc0:	0001883a 	nop
   18dc4:	e0bffc17 	ldw	r2,-16(fp)
   18dc8:	10c01017 	ldw	r3,64(r2)
   18dcc:	e0bff017 	ldw	r2,-64(fp)
   18dd0:	1880051e 	bne	r3,r2,18de8 <altera_avalon_jtag_uart_write+0x248>
   18dd4:	e0bffc17 	ldw	r2,-16(fp)
   18dd8:	10c00917 	ldw	r3,36(r2)
   18ddc:	e0bffc17 	ldw	r2,-16(fp)
   18de0:	10800117 	ldw	r2,4(r2)
   18de4:	18bff736 	bltu	r3,r2,18dc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018dc4>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   18de8:	e0bffc17 	ldw	r2,-16(fp)
   18dec:	10800917 	ldw	r2,36(r2)
   18df0:	1000051e 	bne	r2,zero,18e08 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   18df4:	e0bffe17 	ldw	r2,-8(fp)
   18df8:	00bfb616 	blt	zero,r2,18cd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018cd4>
   18dfc:	00000306 	br	18e0c <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   18e00:	0001883a 	nop
   18e04:	00000106 	br	18e0c <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   18e08:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   18e0c:	e0bffc17 	ldw	r2,-16(fp)
   18e10:	10800b17 	ldw	r2,44(r2)
   18e14:	1009883a 	mov	r4,r2
   18e18:	00159400 	call	15940 <OSSemPost>

  if (ptr != start)
   18e1c:	e0fffd17 	ldw	r3,-12(fp)
   18e20:	e0bff217 	ldw	r2,-56(fp)
   18e24:	18800426 	beq	r3,r2,18e38 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   18e28:	e0fffd17 	ldw	r3,-12(fp)
   18e2c:	e0bff217 	ldw	r2,-56(fp)
   18e30:	1885c83a 	sub	r2,r3,r2
   18e34:	00000606 	br	18e50 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   18e38:	e0bfff17 	ldw	r2,-4(fp)
   18e3c:	1090000c 	andi	r2,r2,16384
   18e40:	10000226 	beq	r2,zero,18e4c <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   18e44:	00bffd44 	movi	r2,-11
   18e48:	00000106 	br	18e50 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   18e4c:	00bffec4 	movi	r2,-5
}
   18e50:	e037883a 	mov	sp,fp
   18e54:	dfc00117 	ldw	ra,4(sp)
   18e58:	df000017 	ldw	fp,0(sp)
   18e5c:	dec00204 	addi	sp,sp,8
   18e60:	f800283a 	ret

00018e64 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   18e64:	defff904 	addi	sp,sp,-28
   18e68:	dfc00615 	stw	ra,24(sp)
   18e6c:	df000515 	stw	fp,20(sp)
   18e70:	df000504 	addi	fp,sp,20
   18e74:	e13ffe15 	stw	r4,-8(fp)
   18e78:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   18e7c:	0007883a 	mov	r3,zero
   18e80:	e0bffe17 	ldw	r2,-8(fp)
   18e84:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   18e88:	e0bffe17 	ldw	r2,-8(fp)
   18e8c:	10800104 	addi	r2,r2,4
   18e90:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18e94:	0005303a 	rdctl	r2,status
   18e98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18e9c:	e0fffc17 	ldw	r3,-16(fp)
   18ea0:	00bfff84 	movi	r2,-2
   18ea4:	1884703a 	and	r2,r3,r2
   18ea8:	1001703a 	wrctl	status,r2
  
  return context;
   18eac:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   18eb0:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   18eb4:	001ab740 	call	1ab74 <alt_tick>
   18eb8:	e0bffb17 	ldw	r2,-20(fp)
   18ebc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18ec0:	e0bffd17 	ldw	r2,-12(fp)
   18ec4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   18ec8:	0001883a 	nop
   18ecc:	e037883a 	mov	sp,fp
   18ed0:	dfc00117 	ldw	ra,4(sp)
   18ed4:	df000017 	ldw	fp,0(sp)
   18ed8:	dec00204 	addi	sp,sp,8
   18edc:	f800283a 	ret

00018ee0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   18ee0:	defff904 	addi	sp,sp,-28
   18ee4:	dfc00615 	stw	ra,24(sp)
   18ee8:	df000515 	stw	fp,20(sp)
   18eec:	df000504 	addi	fp,sp,20
   18ef0:	e13ffc15 	stw	r4,-16(fp)
   18ef4:	e17ffd15 	stw	r5,-12(fp)
   18ef8:	e1bffe15 	stw	r6,-8(fp)
   18efc:	e1ffff15 	stw	r7,-4(fp)
   18f00:	e0bfff17 	ldw	r2,-4(fp)
   18f04:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   18f08:	d0a82d17 	ldw	r2,-24396(gp)
   18f0c:	1000021e 	bne	r2,zero,18f18 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   18f10:	e0bffb17 	ldw	r2,-20(fp)
   18f14:	d0a82d15 	stw	r2,-24396(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   18f18:	e0bffc17 	ldw	r2,-16(fp)
   18f1c:	10800104 	addi	r2,r2,4
   18f20:	00c001c4 	movi	r3,7
   18f24:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   18f28:	018000b4 	movhi	r6,2
   18f2c:	31a39904 	addi	r6,r6,-29084
   18f30:	e17ffc17 	ldw	r5,-16(fp)
   18f34:	e13ffe17 	ldw	r4,-8(fp)
   18f38:	001a7040 	call	1a704 <alt_irq_register>
#endif  
}
   18f3c:	0001883a 	nop
   18f40:	e037883a 	mov	sp,fp
   18f44:	dfc00117 	ldw	ra,4(sp)
   18f48:	df000017 	ldw	fp,0(sp)
   18f4c:	dec00204 	addi	sp,sp,8
   18f50:	f800283a 	ret

00018f54 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   18f54:	defffc04 	addi	sp,sp,-16
   18f58:	df000315 	stw	fp,12(sp)
   18f5c:	df000304 	addi	fp,sp,12
   18f60:	e13ffe15 	stw	r4,-8(fp)
   18f64:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   18f68:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   18f6c:	e0bfff17 	ldw	r2,-4(fp)
   18f70:	1000061e 	bne	r2,zero,18f8c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   18f74:	e0bffe17 	ldw	r2,-8(fp)
   18f78:	1007883a 	mov	r3,r2
   18f7c:	e0bffd03 	ldbu	r2,-12(fp)
   18f80:	1884b03a 	or	r2,r3,r2
   18f84:	e0bffd05 	stb	r2,-12(fp)
   18f88:	00000806 	br	18fac <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   18f8c:	e0bffe17 	ldw	r2,-8(fp)
   18f90:	1007883a 	mov	r3,r2
   18f94:	e0bffd03 	ldbu	r2,-12(fp)
   18f98:	1884b03a 	or	r2,r3,r2
   18f9c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   18fa0:	e0bffd03 	ldbu	r2,-12(fp)
   18fa4:	10801014 	ori	r2,r2,64
   18fa8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   18fac:	e0fffd03 	ldbu	r3,-12(fp)
   18fb0:	00bfe004 	movi	r2,-128
   18fb4:	1884b03a 	or	r2,r3,r2
}
   18fb8:	e037883a 	mov	sp,fp
   18fbc:	df000017 	ldw	fp,0(sp)
   18fc0:	dec00104 	addi	sp,sp,4
   18fc4:	f800283a 	ret

00018fc8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   18fc8:	defffd04 	addi	sp,sp,-12
   18fcc:	df000215 	stw	fp,8(sp)
   18fd0:	df000204 	addi	fp,sp,8
   18fd4:	e13ffe15 	stw	r4,-8(fp)
   18fd8:	2805883a 	mov	r2,r5
   18fdc:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   18fe0:	e0bffe17 	ldw	r2,-8(fp)
   18fe4:	10800a17 	ldw	r2,40(r2)
   18fe8:	1007883a 	mov	r3,r2
   18fec:	e0bfff03 	ldbu	r2,-4(fp)
   18ff0:	18800025 	stbio	r2,0(r3)
}
   18ff4:	0001883a 	nop
   18ff8:	e037883a 	mov	sp,fp
   18ffc:	df000017 	ldw	fp,0(sp)
   19000:	dec00104 	addi	sp,sp,4
   19004:	f800283a 	ret

00019008 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   19008:	defffe04 	addi	sp,sp,-8
   1900c:	df000115 	stw	fp,4(sp)
   19010:	df000104 	addi	fp,sp,4
   19014:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   19018:	e0bfff17 	ldw	r2,-4(fp)
   1901c:	10800a17 	ldw	r2,40(r2)
   19020:	1007883a 	mov	r3,r2
   19024:	00800044 	movi	r2,1
   19028:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1902c:	0001883a 	nop
   19030:	e037883a 	mov	sp,fp
   19034:	df000017 	ldw	fp,0(sp)
   19038:	dec00104 	addi	sp,sp,4
   1903c:	f800283a 	ret

00019040 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   19040:	defffc04 	addi	sp,sp,-16
   19044:	dfc00315 	stw	ra,12(sp)
   19048:	df000215 	stw	fp,8(sp)
   1904c:	df000204 	addi	fp,sp,8
   19050:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   19054:	d1600804 	addi	r5,gp,-32736
   19058:	e13fff17 	ldw	r4,-4(fp)
   1905c:	001a5000 	call	1a500 <alt_find_dev>
   19060:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   19064:	e0bffe17 	ldw	r2,-8(fp)
}
   19068:	e037883a 	mov	sp,fp
   1906c:	dfc00117 	ldw	ra,4(sp)
   19070:	df000017 	ldw	fp,0(sp)
   19074:	dec00204 	addi	sp,sp,8
   19078:	f800283a 	ret

0001907c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1907c:	defffb04 	addi	sp,sp,-20
   19080:	df000415 	stw	fp,16(sp)
   19084:	df000404 	addi	fp,sp,16
   19088:	e13ffd15 	stw	r4,-12(fp)
   1908c:	e17ffe15 	stw	r5,-8(fp)
   19090:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   19094:	e03ffc15 	stw	zero,-16(fp)
   19098:	00000f06 	br	190d8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1909c:	e0bffd17 	ldw	r2,-12(fp)
   190a0:	10800a17 	ldw	r2,40(r2)
   190a4:	10800044 	addi	r2,r2,1
   190a8:	1009883a 	mov	r4,r2
   190ac:	e0fffe17 	ldw	r3,-8(fp)
   190b0:	e0bffc17 	ldw	r2,-16(fp)
   190b4:	1885883a 	add	r2,r3,r2
   190b8:	10800003 	ldbu	r2,0(r2)
   190bc:	10803fcc 	andi	r2,r2,255
   190c0:	1080201c 	xori	r2,r2,128
   190c4:	10bfe004 	addi	r2,r2,-128
   190c8:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   190cc:	e0bffc17 	ldw	r2,-16(fp)
   190d0:	10800044 	addi	r2,r2,1
   190d4:	e0bffc15 	stw	r2,-16(fp)
   190d8:	e0fffc17 	ldw	r3,-16(fp)
   190dc:	e0bfff17 	ldw	r2,-4(fp)
   190e0:	18bfee36 	bltu	r3,r2,1909c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701909c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   190e4:	0001883a 	nop
   190e8:	e037883a 	mov	sp,fp
   190ec:	df000017 	ldw	fp,0(sp)
   190f0:	dec00104 	addi	sp,sp,4
   190f4:	f800283a 	ret

000190f8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   190f8:	defffd04 	addi	sp,sp,-12
   190fc:	df000215 	stw	fp,8(sp)
   19100:	df000204 	addi	fp,sp,8
   19104:	e13ffe15 	stw	r4,-8(fp)
   19108:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1910c:	00000d06 	br	19144 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   19110:	e0bffe17 	ldw	r2,-8(fp)
   19114:	10800a17 	ldw	r2,40(r2)
   19118:	10800044 	addi	r2,r2,1
   1911c:	1007883a 	mov	r3,r2
   19120:	e0bfff17 	ldw	r2,-4(fp)
   19124:	10800003 	ldbu	r2,0(r2)
   19128:	10803fcc 	andi	r2,r2,255
   1912c:	1080201c 	xori	r2,r2,128
   19130:	10bfe004 	addi	r2,r2,-128
   19134:	18800025 	stbio	r2,0(r3)
		++ptr;
   19138:	e0bfff17 	ldw	r2,-4(fp)
   1913c:	10800044 	addi	r2,r2,1
   19140:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   19144:	e0bfff17 	ldw	r2,-4(fp)
   19148:	10800003 	ldbu	r2,0(r2)
   1914c:	10803fcc 	andi	r2,r2,255
   19150:	1080201c 	xori	r2,r2,128
   19154:	10bfe004 	addi	r2,r2,-128
   19158:	103fed1e 	bne	r2,zero,19110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019110>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1915c:	0001883a 	nop
   19160:	e037883a 	mov	sp,fp
   19164:	df000017 	ldw	fp,0(sp)
   19168:	dec00104 	addi	sp,sp,4
   1916c:	f800283a 	ret

00019170 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   19170:	defffb04 	addi	sp,sp,-20
   19174:	dfc00415 	stw	ra,16(sp)
   19178:	df000315 	stw	fp,12(sp)
   1917c:	df000304 	addi	fp,sp,12
   19180:	e13ffd15 	stw	r4,-12(fp)
   19184:	e17ffe15 	stw	r5,-8(fp)
   19188:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1918c:	e0bffd17 	ldw	r2,-12(fp)
   19190:	10800017 	ldw	r2,0(r2)
   19194:	e0ffff17 	ldw	r3,-4(fp)
   19198:	180d883a 	mov	r6,r3
   1919c:	e17ffe17 	ldw	r5,-8(fp)
   191a0:	1009883a 	mov	r4,r2
   191a4:	001907c0 	call	1907c <alt_up_character_lcd_write>
	return 0;
   191a8:	0005883a 	mov	r2,zero
}
   191ac:	e037883a 	mov	sp,fp
   191b0:	dfc00117 	ldw	ra,4(sp)
   191b4:	df000017 	ldw	fp,0(sp)
   191b8:	dec00204 	addi	sp,sp,8
   191bc:	f800283a 	ret

000191c0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   191c0:	defffa04 	addi	sp,sp,-24
   191c4:	dfc00515 	stw	ra,20(sp)
   191c8:	df000415 	stw	fp,16(sp)
   191cc:	df000404 	addi	fp,sp,16
   191d0:	e13ffd15 	stw	r4,-12(fp)
   191d4:	e17ffe15 	stw	r5,-8(fp)
   191d8:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   191dc:	e0bffe17 	ldw	r2,-8(fp)
   191e0:	10800a28 	cmpgeui	r2,r2,40
   191e4:	1000031e 	bne	r2,zero,191f4 <alt_up_character_lcd_set_cursor_pos+0x34>
   191e8:	e0bfff17 	ldw	r2,-4(fp)
   191ec:	108000b0 	cmpltui	r2,r2,2
   191f0:	1000021e 	bne	r2,zero,191fc <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   191f4:	00bfffc4 	movi	r2,-1
   191f8:	00000906 	br	19220 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   191fc:	e17fff17 	ldw	r5,-4(fp)
   19200:	e13ffe17 	ldw	r4,-8(fp)
   19204:	0018f540 	call	18f54 <get_DDRAM_addr>
   19208:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1920c:	e0bffc03 	ldbu	r2,-16(fp)
   19210:	100b883a 	mov	r5,r2
   19214:	e13ffd17 	ldw	r4,-12(fp)
   19218:	0018fc80 	call	18fc8 <alt_up_character_lcd_send_cmd>
	return 0;
   1921c:	0005883a 	mov	r2,zero
}
   19220:	e037883a 	mov	sp,fp
   19224:	dfc00117 	ldw	ra,4(sp)
   19228:	df000017 	ldw	fp,0(sp)
   1922c:	dec00204 	addi	sp,sp,8
   19230:	f800283a 	ret

00019234 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   19234:	defffb04 	addi	sp,sp,-20
   19238:	dfc00415 	stw	ra,16(sp)
   1923c:	df000315 	stw	fp,12(sp)
   19240:	df000304 	addi	fp,sp,12
   19244:	e13ffe15 	stw	r4,-8(fp)
   19248:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1924c:	e0bfff17 	ldw	r2,-4(fp)
   19250:	10001526 	beq	r2,zero,192a8 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   19254:	e0bfff17 	ldw	r2,-4(fp)
   19258:	0080020e 	bge	zero,r2,19264 <alt_up_character_lcd_shift_cursor+0x30>
   1925c:	00800504 	movi	r2,20
   19260:	00000106 	br	19268 <alt_up_character_lcd_shift_cursor+0x34>
   19264:	00800404 	movi	r2,16
   19268:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1926c:	e0bfff17 	ldw	r2,-4(fp)
   19270:	1000010e 	bge	r2,zero,19278 <alt_up_character_lcd_shift_cursor+0x44>
   19274:	0085c83a 	sub	r2,zero,r2
   19278:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1927c:	00000406 	br	19290 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   19280:	e0bffd43 	ldbu	r2,-11(fp)
   19284:	100b883a 	mov	r5,r2
   19288:	e13ffe17 	ldw	r4,-8(fp)
   1928c:	0018fc80 	call	18fc8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19290:	e0bffd03 	ldbu	r2,-12(fp)
   19294:	10ffffc4 	addi	r3,r2,-1
   19298:	e0fffd05 	stb	r3,-12(fp)
   1929c:	10803fcc 	andi	r2,r2,255
   192a0:	103ff71e 	bne	r2,zero,19280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019280>
   192a4:	00000106 	br	192ac <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   192a8:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   192ac:	e037883a 	mov	sp,fp
   192b0:	dfc00117 	ldw	ra,4(sp)
   192b4:	df000017 	ldw	fp,0(sp)
   192b8:	dec00204 	addi	sp,sp,8
   192bc:	f800283a 	ret

000192c0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   192c0:	defffb04 	addi	sp,sp,-20
   192c4:	dfc00415 	stw	ra,16(sp)
   192c8:	df000315 	stw	fp,12(sp)
   192cc:	df000304 	addi	fp,sp,12
   192d0:	e13ffe15 	stw	r4,-8(fp)
   192d4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   192d8:	e0bfff17 	ldw	r2,-4(fp)
   192dc:	10001526 	beq	r2,zero,19334 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   192e0:	e0bfff17 	ldw	r2,-4(fp)
   192e4:	0080020e 	bge	zero,r2,192f0 <alt_up_character_lcd_shift_display+0x30>
   192e8:	00800704 	movi	r2,28
   192ec:	00000106 	br	192f4 <alt_up_character_lcd_shift_display+0x34>
   192f0:	00800604 	movi	r2,24
   192f4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   192f8:	e0bfff17 	ldw	r2,-4(fp)
   192fc:	1000010e 	bge	r2,zero,19304 <alt_up_character_lcd_shift_display+0x44>
   19300:	0085c83a 	sub	r2,zero,r2
   19304:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19308:	00000406 	br	1931c <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1930c:	e0bffd43 	ldbu	r2,-11(fp)
   19310:	100b883a 	mov	r5,r2
   19314:	e13ffe17 	ldw	r4,-8(fp)
   19318:	0018fc80 	call	18fc8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1931c:	e0bffd03 	ldbu	r2,-12(fp)
   19320:	10ffffc4 	addi	r3,r2,-1
   19324:	e0fffd05 	stb	r3,-12(fp)
   19328:	10803fcc 	andi	r2,r2,255
   1932c:	103ff71e 	bne	r2,zero,1930c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701930c>
   19330:	00000106 	br	19338 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   19334:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   19338:	e037883a 	mov	sp,fp
   1933c:	dfc00117 	ldw	ra,4(sp)
   19340:	df000017 	ldw	fp,0(sp)
   19344:	dec00204 	addi	sp,sp,8
   19348:	f800283a 	ret

0001934c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1934c:	defffa04 	addi	sp,sp,-24
   19350:	dfc00515 	stw	ra,20(sp)
   19354:	df000415 	stw	fp,16(sp)
   19358:	df000404 	addi	fp,sp,16
   1935c:	e13ffd15 	stw	r4,-12(fp)
   19360:	e17ffe15 	stw	r5,-8(fp)
   19364:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   19368:	e0bffe17 	ldw	r2,-8(fp)
   1936c:	10800a28 	cmpgeui	r2,r2,40
   19370:	1000031e 	bne	r2,zero,19380 <alt_up_character_lcd_erase_pos+0x34>
   19374:	e0bfff17 	ldw	r2,-4(fp)
   19378:	108000b0 	cmpltui	r2,r2,2
   1937c:	1000021e 	bne	r2,zero,19388 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   19380:	00bfffc4 	movi	r2,-1
   19384:	00000f06 	br	193c4 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   19388:	e17fff17 	ldw	r5,-4(fp)
   1938c:	e13ffe17 	ldw	r4,-8(fp)
   19390:	0018f540 	call	18f54 <get_DDRAM_addr>
   19394:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   19398:	e0bffc03 	ldbu	r2,-16(fp)
   1939c:	100b883a 	mov	r5,r2
   193a0:	e13ffd17 	ldw	r4,-12(fp)
   193a4:	0018fc80 	call	18fc8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   193a8:	e0bffd17 	ldw	r2,-12(fp)
   193ac:	10800a17 	ldw	r2,40(r2)
   193b0:	10800044 	addi	r2,r2,1
   193b4:	1007883a 	mov	r3,r2
   193b8:	00800084 	movi	r2,2
   193bc:	18800025 	stbio	r2,0(r3)
	return 0;
   193c0:	0005883a 	mov	r2,zero
}
   193c4:	e037883a 	mov	sp,fp
   193c8:	dfc00117 	ldw	ra,4(sp)
   193cc:	df000017 	ldw	fp,0(sp)
   193d0:	dec00204 	addi	sp,sp,8
   193d4:	f800283a 	ret

000193d8 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   193d8:	defffd04 	addi	sp,sp,-12
   193dc:	dfc00215 	stw	ra,8(sp)
   193e0:	df000115 	stw	fp,4(sp)
   193e4:	df000104 	addi	fp,sp,4
   193e8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   193ec:	01400304 	movi	r5,12
   193f0:	e13fff17 	ldw	r4,-4(fp)
   193f4:	0018fc80 	call	18fc8 <alt_up_character_lcd_send_cmd>
}
   193f8:	0001883a 	nop
   193fc:	e037883a 	mov	sp,fp
   19400:	dfc00117 	ldw	ra,4(sp)
   19404:	df000017 	ldw	fp,0(sp)
   19408:	dec00204 	addi	sp,sp,8
   1940c:	f800283a 	ret

00019410 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   19410:	defffd04 	addi	sp,sp,-12
   19414:	dfc00215 	stw	ra,8(sp)
   19418:	df000115 	stw	fp,4(sp)
   1941c:	df000104 	addi	fp,sp,4
   19420:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   19424:	014003c4 	movi	r5,15
   19428:	e13fff17 	ldw	r4,-4(fp)
   1942c:	0018fc80 	call	18fc8 <alt_up_character_lcd_send_cmd>
}
   19430:	0001883a 	nop
   19434:	e037883a 	mov	sp,fp
   19438:	dfc00117 	ldw	ra,4(sp)
   1943c:	df000017 	ldw	fp,0(sp)
   19440:	dec00204 	addi	sp,sp,8
   19444:	f800283a 	ret

00019448 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   19448:	defffd04 	addi	sp,sp,-12
   1944c:	df000215 	stw	fp,8(sp)
   19450:	df000204 	addi	fp,sp,8
   19454:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   19458:	e0bfff17 	ldw	r2,-4(fp)
   1945c:	10800a17 	ldw	r2,40(r2)
   19460:	10800104 	addi	r2,r2,4
   19464:	10800037 	ldwio	r2,0(r2)
   19468:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1946c:	e0bffe17 	ldw	r2,-8(fp)
   19470:	10800054 	ori	r2,r2,1
   19474:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   19478:	e0bfff17 	ldw	r2,-4(fp)
   1947c:	10800a17 	ldw	r2,40(r2)
   19480:	10800104 	addi	r2,r2,4
   19484:	1007883a 	mov	r3,r2
   19488:	e0bffe17 	ldw	r2,-8(fp)
   1948c:	18800035 	stwio	r2,0(r3)
}
   19490:	0001883a 	nop
   19494:	e037883a 	mov	sp,fp
   19498:	df000017 	ldw	fp,0(sp)
   1949c:	dec00104 	addi	sp,sp,4
   194a0:	f800283a 	ret

000194a4 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   194a4:	defffd04 	addi	sp,sp,-12
   194a8:	df000215 	stw	fp,8(sp)
   194ac:	df000204 	addi	fp,sp,8
   194b0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   194b4:	e0bfff17 	ldw	r2,-4(fp)
   194b8:	10800a17 	ldw	r2,40(r2)
   194bc:	10800104 	addi	r2,r2,4
   194c0:	10800037 	ldwio	r2,0(r2)
   194c4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   194c8:	e0fffe17 	ldw	r3,-8(fp)
   194cc:	00bfff84 	movi	r2,-2
   194d0:	1884703a 	and	r2,r3,r2
   194d4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   194d8:	e0bfff17 	ldw	r2,-4(fp)
   194dc:	10800a17 	ldw	r2,40(r2)
   194e0:	10800104 	addi	r2,r2,4
   194e4:	1007883a 	mov	r3,r2
   194e8:	e0bffe17 	ldw	r2,-8(fp)
   194ec:	18800035 	stwio	r2,0(r3)
}
   194f0:	0001883a 	nop
   194f4:	e037883a 	mov	sp,fp
   194f8:	df000017 	ldw	fp,0(sp)
   194fc:	dec00104 	addi	sp,sp,4
   19500:	f800283a 	ret

00019504 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   19504:	defffd04 	addi	sp,sp,-12
   19508:	df000215 	stw	fp,8(sp)
   1950c:	df000204 	addi	fp,sp,8
   19510:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   19514:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   19518:	e0bfff17 	ldw	r2,-4(fp)
   1951c:	10800a17 	ldw	r2,40(r2)
   19520:	10800084 	addi	r2,r2,2
   19524:	1080002b 	ldhuio	r2,0(r2)
   19528:	10bfffcc 	andi	r2,r2,65535
   1952c:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   19530:	e0bffe0b 	ldhu	r2,-8(fp)
}
   19534:	e037883a 	mov	sp,fp
   19538:	df000017 	ldw	fp,0(sp)
   1953c:	dec00104 	addi	sp,sp,4
   19540:	f800283a 	ret

00019544 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   19544:	defffd04 	addi	sp,sp,-12
   19548:	df000215 	stw	fp,8(sp)
   1954c:	df000204 	addi	fp,sp,8
   19550:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   19554:	e0bfff17 	ldw	r2,-4(fp)
   19558:	10800a17 	ldw	r2,40(r2)
   1955c:	10800104 	addi	r2,r2,4
   19560:	10800037 	ldwio	r2,0(r2)
   19564:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   19568:	e0bffe17 	ldw	r2,-8(fp)
   1956c:	1004d43a 	srli	r2,r2,16
}
   19570:	e037883a 	mov	sp,fp
   19574:	df000017 	ldw	fp,0(sp)
   19578:	dec00104 	addi	sp,sp,4
   1957c:	f800283a 	ret

00019580 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   19580:	defffd04 	addi	sp,sp,-12
   19584:	df000215 	stw	fp,8(sp)
   19588:	df000204 	addi	fp,sp,8
   1958c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   19590:	e0bfff17 	ldw	r2,-4(fp)
   19594:	1080800c 	andi	r2,r2,512
   19598:	1004d27a 	srli	r2,r2,9
   1959c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   195a0:	e0bffe17 	ldw	r2,-8(fp)
   195a4:	10000226 	beq	r2,zero,195b0 <alt_up_irda_check_parity+0x30>
   195a8:	00bfffc4 	movi	r2,-1
   195ac:	00000106 	br	195b4 <alt_up_irda_check_parity+0x34>
   195b0:	0005883a 	mov	r2,zero
}
   195b4:	e037883a 	mov	sp,fp
   195b8:	df000017 	ldw	fp,0(sp)
   195bc:	dec00104 	addi	sp,sp,4
   195c0:	f800283a 	ret

000195c4 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   195c4:	defffd04 	addi	sp,sp,-12
   195c8:	df000215 	stw	fp,8(sp)
   195cc:	df000204 	addi	fp,sp,8
   195d0:	e13ffe15 	stw	r4,-8(fp)
   195d4:	2805883a 	mov	r2,r5
   195d8:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   195dc:	e0bffe17 	ldw	r2,-8(fp)
   195e0:	10800a17 	ldw	r2,40(r2)
   195e4:	1007883a 	mov	r3,r2
   195e8:	e0bfff03 	ldbu	r2,-4(fp)
   195ec:	18800035 	stwio	r2,0(r3)
	return 0;
   195f0:	0005883a 	mov	r2,zero
}
   195f4:	e037883a 	mov	sp,fp
   195f8:	df000017 	ldw	fp,0(sp)
   195fc:	dec00104 	addi	sp,sp,4
   19600:	f800283a 	ret

00019604 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   19604:	defffa04 	addi	sp,sp,-24
   19608:	dfc00515 	stw	ra,20(sp)
   1960c:	df000415 	stw	fp,16(sp)
   19610:	df000404 	addi	fp,sp,16
   19614:	e13ffd15 	stw	r4,-12(fp)
   19618:	e17ffe15 	stw	r5,-8(fp)
   1961c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   19620:	e0bffd17 	ldw	r2,-12(fp)
   19624:	10800a17 	ldw	r2,40(r2)
   19628:	10800037 	ldwio	r2,0(r2)
   1962c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   19630:	e0bffc17 	ldw	r2,-16(fp)
   19634:	1007883a 	mov	r3,r2
   19638:	e0bffe17 	ldw	r2,-8(fp)
   1963c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   19640:	e13ffc17 	ldw	r4,-16(fp)
   19644:	00195800 	call	19580 <alt_up_irda_check_parity>
   19648:	1007883a 	mov	r3,r2
   1964c:	e0bfff17 	ldw	r2,-4(fp)
   19650:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   19654:	e0bffc17 	ldw	r2,-16(fp)
   19658:	10a0000c 	andi	r2,r2,32768
   1965c:	1004d3fa 	srli	r2,r2,15
   19660:	10bfffc4 	addi	r2,r2,-1
}
   19664:	e037883a 	mov	sp,fp
   19668:	dfc00117 	ldw	ra,4(sp)
   1966c:	df000017 	ldw	fp,0(sp)
   19670:	dec00204 	addi	sp,sp,8
   19674:	f800283a 	ret

00019678 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   19678:	defff804 	addi	sp,sp,-32
   1967c:	dfc00715 	stw	ra,28(sp)
   19680:	df000615 	stw	fp,24(sp)
   19684:	df000604 	addi	fp,sp,24
   19688:	e13ffd15 	stw	r4,-12(fp)
   1968c:	e17ffe15 	stw	r5,-8(fp)
   19690:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   19694:	e0bffd17 	ldw	r2,-12(fp)
   19698:	10800017 	ldw	r2,0(r2)
   1969c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   196a0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   196a4:	00000c06 	br	196d8 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   196a8:	e0bffe17 	ldw	r2,-8(fp)
   196ac:	10c00044 	addi	r3,r2,1
   196b0:	e0fffe15 	stw	r3,-8(fp)
   196b4:	e0fffc04 	addi	r3,fp,-16
   196b8:	180d883a 	mov	r6,r3
   196bc:	100b883a 	mov	r5,r2
   196c0:	e13ffb17 	ldw	r4,-20(fp)
   196c4:	00196040 	call	19604 <alt_up_irda_read_data>
   196c8:	1000081e 	bne	r2,zero,196ec <alt_up_irda_read_fd+0x74>
			count++;
   196cc:	e0bffa17 	ldw	r2,-24(fp)
   196d0:	10800044 	addi	r2,r2,1
   196d4:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   196d8:	e0bfff17 	ldw	r2,-4(fp)
   196dc:	10ffffc4 	addi	r3,r2,-1
   196e0:	e0ffff15 	stw	r3,-4(fp)
   196e4:	103ff01e 	bne	r2,zero,196a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70196a8>
   196e8:	00000106 	br	196f0 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   196ec:	0001883a 	nop
	}
	return count;
   196f0:	e0bffa17 	ldw	r2,-24(fp)
}
   196f4:	e037883a 	mov	sp,fp
   196f8:	dfc00117 	ldw	ra,4(sp)
   196fc:	df000017 	ldw	fp,0(sp)
   19700:	dec00204 	addi	sp,sp,8
   19704:	f800283a 	ret

00019708 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   19708:	defff904 	addi	sp,sp,-28
   1970c:	dfc00615 	stw	ra,24(sp)
   19710:	df000515 	stw	fp,20(sp)
   19714:	df000504 	addi	fp,sp,20
   19718:	e13ffd15 	stw	r4,-12(fp)
   1971c:	e17ffe15 	stw	r5,-8(fp)
   19720:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   19724:	e0bffd17 	ldw	r2,-12(fp)
   19728:	10800017 	ldw	r2,0(r2)
   1972c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   19730:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   19734:	00000c06 	br	19768 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   19738:	e0bffe17 	ldw	r2,-8(fp)
   1973c:	10c00044 	addi	r3,r2,1
   19740:	e0fffe15 	stw	r3,-8(fp)
   19744:	10800003 	ldbu	r2,0(r2)
   19748:	10803fcc 	andi	r2,r2,255
   1974c:	100b883a 	mov	r5,r2
   19750:	e13ffc17 	ldw	r4,-16(fp)
   19754:	00195c40 	call	195c4 <alt_up_irda_write_data>
   19758:	1000081e 	bne	r2,zero,1977c <alt_up_irda_write_fd+0x74>
			count++;
   1975c:	e0bffb17 	ldw	r2,-20(fp)
   19760:	10800044 	addi	r2,r2,1
   19764:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   19768:	e0bfff17 	ldw	r2,-4(fp)
   1976c:	10ffffc4 	addi	r3,r2,-1
   19770:	e0ffff15 	stw	r3,-4(fp)
   19774:	103ff01e 	bne	r2,zero,19738 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019738>
   19778:	00000106 	br	19780 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   1977c:	0001883a 	nop
	}
	return count;
   19780:	e0bffb17 	ldw	r2,-20(fp)
}
   19784:	e037883a 	mov	sp,fp
   19788:	dfc00117 	ldw	ra,4(sp)
   1978c:	df000017 	ldw	fp,0(sp)
   19790:	dec00204 	addi	sp,sp,8
   19794:	f800283a 	ret

00019798 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   19798:	defffc04 	addi	sp,sp,-16
   1979c:	dfc00315 	stw	ra,12(sp)
   197a0:	df000215 	stw	fp,8(sp)
   197a4:	df000204 	addi	fp,sp,8
   197a8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   197ac:	d1600804 	addi	r5,gp,-32736
   197b0:	e13fff17 	ldw	r4,-4(fp)
   197b4:	001a5000 	call	1a500 <alt_find_dev>
   197b8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   197bc:	e0bffe17 	ldw	r2,-8(fp)
}
   197c0:	e037883a 	mov	sp,fp
   197c4:	dfc00117 	ldw	ra,4(sp)
   197c8:	df000017 	ldw	fp,0(sp)
   197cc:	dec00204 	addi	sp,sp,8
   197d0:	f800283a 	ret

000197d4 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   197d4:	defffd04 	addi	sp,sp,-12
   197d8:	df000215 	stw	fp,8(sp)
   197dc:	df000204 	addi	fp,sp,8
   197e0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   197e4:	e0bfff17 	ldw	r2,-4(fp)
   197e8:	1080400c 	andi	r2,r2,256
   197ec:	1004d23a 	srli	r2,r2,8
   197f0:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   197f4:	e0bffe03 	ldbu	r2,-8(fp)
}
   197f8:	e037883a 	mov	sp,fp
   197fc:	df000017 	ldw	fp,0(sp)
   19800:	dec00104 	addi	sp,sp,4
   19804:	f800283a 	ret

00019808 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   19808:	defffd04 	addi	sp,sp,-12
   1980c:	df000215 	stw	fp,8(sp)
   19810:	df000204 	addi	fp,sp,8
   19814:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   19818:	e0bfff17 	ldw	r2,-4(fp)
   1981c:	1080004c 	andi	r2,r2,1
   19820:	e0bffe05 	stb	r2,-8(fp)
	return re;
   19824:	e0bffe03 	ldbu	r2,-8(fp)
}
   19828:	e037883a 	mov	sp,fp
   1982c:	df000017 	ldw	fp,0(sp)
   19830:	dec00104 	addi	sp,sp,4
   19834:	f800283a 	ret

00019838 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   19838:	defffd04 	addi	sp,sp,-12
   1983c:	df000215 	stw	fp,8(sp)
   19840:	df000204 	addi	fp,sp,8
   19844:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   19848:	e0bfff17 	ldw	r2,-4(fp)
   1984c:	1081000c 	andi	r2,r2,1024
   19850:	1004d2ba 	srli	r2,r2,10
   19854:	e0bffe05 	stb	r2,-8(fp)
	return re;
   19858:	e0bffe03 	ldbu	r2,-8(fp)
}
   1985c:	e037883a 	mov	sp,fp
   19860:	df000017 	ldw	fp,0(sp)
   19864:	dec00104 	addi	sp,sp,4
   19868:	f800283a 	ret

0001986c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1986c:	defffd04 	addi	sp,sp,-12
   19870:	df000215 	stw	fp,8(sp)
   19874:	df000204 	addi	fp,sp,8
   19878:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1987c:	e0bfff17 	ldw	r2,-4(fp)
   19880:	1004d43a 	srli	r2,r2,16
   19884:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   19888:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1988c:	e037883a 	mov	sp,fp
   19890:	df000017 	ldw	fp,0(sp)
   19894:	dec00104 	addi	sp,sp,4
   19898:	f800283a 	ret

0001989c <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1989c:	defffd04 	addi	sp,sp,-12
   198a0:	df000215 	stw	fp,8(sp)
   198a4:	df000204 	addi	fp,sp,8
   198a8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   198ac:	e0bfff17 	ldw	r2,-4(fp)
   198b0:	10a0000c 	andi	r2,r2,32768
   198b4:	1004d3fa 	srli	r2,r2,15
   198b8:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   198bc:	e0bffe03 	ldbu	r2,-8(fp)
}
   198c0:	e037883a 	mov	sp,fp
   198c4:	df000017 	ldw	fp,0(sp)
   198c8:	dec00104 	addi	sp,sp,4
   198cc:	f800283a 	ret

000198d0 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   198d0:	defffd04 	addi	sp,sp,-12
   198d4:	df000215 	stw	fp,8(sp)
   198d8:	df000204 	addi	fp,sp,8
   198dc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   198e0:	e0bfff17 	ldw	r2,-4(fp)
   198e4:	e0bffe05 	stb	r2,-8(fp)
	return data;
   198e8:	e0bffe03 	ldbu	r2,-8(fp)
}
   198ec:	e037883a 	mov	sp,fp
   198f0:	df000017 	ldw	fp,0(sp)
   198f4:	dec00104 	addi	sp,sp,4
   198f8:	f800283a 	ret

000198fc <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   198fc:	defffb04 	addi	sp,sp,-20
   19900:	dfc00415 	stw	ra,16(sp)
   19904:	df000315 	stw	fp,12(sp)
   19908:	df000304 	addi	fp,sp,12
   1990c:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   19910:	01403fc4 	movi	r5,255
   19914:	e13fff17 	ldw	r4,-4(fp)
   19918:	0019b5c0 	call	19b5c <alt_up_ps2_write_data_byte_with_ack>
   1991c:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   19920:	e0bffd17 	ldw	r2,-12(fp)
   19924:	1000211e 	bne	r2,zero,199ac <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   19928:	e0bffe04 	addi	r2,fp,-8
   1992c:	100b883a 	mov	r5,r2
   19930:	e13fff17 	ldw	r4,-4(fp)
   19934:	0019bc00 	call	19bc0 <alt_up_ps2_read_data_byte_timeout>
   19938:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1993c:	e0bffd17 	ldw	r2,-12(fp)
   19940:	10001a1e 	bne	r2,zero,199ac <alt_up_ps2_init+0xb0>
   19944:	e0bffe03 	ldbu	r2,-8(fp)
   19948:	10803fcc 	andi	r2,r2,255
   1994c:	10802a98 	cmpnei	r2,r2,170
   19950:	1000161e 	bne	r2,zero,199ac <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   19954:	e0bffe04 	addi	r2,fp,-8
   19958:	100b883a 	mov	r5,r2
   1995c:	e13fff17 	ldw	r4,-4(fp)
   19960:	0019bc00 	call	19bc0 <alt_up_ps2_read_data_byte_timeout>
   19964:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   19968:	e0bffd17 	ldw	r2,-12(fp)
   1996c:	10bfe318 	cmpnei	r2,r2,-116
   19970:	1000041e 	bne	r2,zero,19984 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   19974:	e0bfff17 	ldw	r2,-4(fp)
   19978:	00c00044 	movi	r3,1
   1997c:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   19980:	00000a06 	br	199ac <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   19984:	e0bffd17 	ldw	r2,-12(fp)
   19988:	1000081e 	bne	r2,zero,199ac <alt_up_ps2_init+0xb0>
   1998c:	e0bffe03 	ldbu	r2,-8(fp)
   19990:	10803fcc 	andi	r2,r2,255
   19994:	1000051e 	bne	r2,zero,199ac <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   19998:	e0bfff17 	ldw	r2,-4(fp)
   1999c:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   199a0:	01403d04 	movi	r5,244
   199a4:	e13fff17 	ldw	r4,-4(fp)
   199a8:	0019a800 	call	19a80 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   199ac:	0001883a 	nop
   199b0:	e037883a 	mov	sp,fp
   199b4:	dfc00117 	ldw	ra,4(sp)
   199b8:	df000017 	ldw	fp,0(sp)
   199bc:	dec00204 	addi	sp,sp,8
   199c0:	f800283a 	ret

000199c4 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   199c4:	defffd04 	addi	sp,sp,-12
   199c8:	df000215 	stw	fp,8(sp)
   199cc:	df000204 	addi	fp,sp,8
   199d0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   199d4:	e0bfff17 	ldw	r2,-4(fp)
   199d8:	10800a17 	ldw	r2,40(r2)
   199dc:	10800104 	addi	r2,r2,4
   199e0:	10800037 	ldwio	r2,0(r2)
   199e4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   199e8:	e0bffe17 	ldw	r2,-8(fp)
   199ec:	10800054 	ori	r2,r2,1
   199f0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   199f4:	e0bfff17 	ldw	r2,-4(fp)
   199f8:	10800a17 	ldw	r2,40(r2)
   199fc:	10800104 	addi	r2,r2,4
   19a00:	1007883a 	mov	r3,r2
   19a04:	e0bffe17 	ldw	r2,-8(fp)
   19a08:	18800035 	stwio	r2,0(r3)
}
   19a0c:	0001883a 	nop
   19a10:	e037883a 	mov	sp,fp
   19a14:	df000017 	ldw	fp,0(sp)
   19a18:	dec00104 	addi	sp,sp,4
   19a1c:	f800283a 	ret

00019a20 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   19a20:	defffd04 	addi	sp,sp,-12
   19a24:	df000215 	stw	fp,8(sp)
   19a28:	df000204 	addi	fp,sp,8
   19a2c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   19a30:	e0bfff17 	ldw	r2,-4(fp)
   19a34:	10800a17 	ldw	r2,40(r2)
   19a38:	10800104 	addi	r2,r2,4
   19a3c:	10800037 	ldwio	r2,0(r2)
   19a40:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   19a44:	e0fffe17 	ldw	r3,-8(fp)
   19a48:	00bfff84 	movi	r2,-2
   19a4c:	1884703a 	and	r2,r3,r2
   19a50:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   19a54:	e0bfff17 	ldw	r2,-4(fp)
   19a58:	10800a17 	ldw	r2,40(r2)
   19a5c:	10800104 	addi	r2,r2,4
   19a60:	1007883a 	mov	r3,r2
   19a64:	e0bffe17 	ldw	r2,-8(fp)
   19a68:	18800035 	stwio	r2,0(r3)
}
   19a6c:	0001883a 	nop
   19a70:	e037883a 	mov	sp,fp
   19a74:	df000017 	ldw	fp,0(sp)
   19a78:	dec00104 	addi	sp,sp,4
   19a7c:	f800283a 	ret

00019a80 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   19a80:	defffb04 	addi	sp,sp,-20
   19a84:	dfc00415 	stw	ra,16(sp)
   19a88:	df000315 	stw	fp,12(sp)
   19a8c:	df000304 	addi	fp,sp,12
   19a90:	e13ffe15 	stw	r4,-8(fp)
   19a94:	2805883a 	mov	r2,r5
   19a98:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   19a9c:	e0bffe17 	ldw	r2,-8(fp)
   19aa0:	10800a17 	ldw	r2,40(r2)
   19aa4:	1007883a 	mov	r3,r2
   19aa8:	e0bfff03 	ldbu	r2,-4(fp)
   19aac:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   19ab0:	e0bffe17 	ldw	r2,-8(fp)
   19ab4:	10800a17 	ldw	r2,40(r2)
   19ab8:	10800104 	addi	r2,r2,4
   19abc:	10800037 	ldwio	r2,0(r2)
   19ac0:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   19ac4:	e13ffd17 	ldw	r4,-12(fp)
   19ac8:	00198380 	call	19838 <read_CE_bit>
   19acc:	10803fcc 	andi	r2,r2,255
   19ad0:	10000226 	beq	r2,zero,19adc <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   19ad4:	00bffec4 	movi	r2,-5
   19ad8:	00000106 	br	19ae0 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   19adc:	0005883a 	mov	r2,zero
}
   19ae0:	e037883a 	mov	sp,fp
   19ae4:	dfc00117 	ldw	ra,4(sp)
   19ae8:	df000017 	ldw	fp,0(sp)
   19aec:	dec00204 	addi	sp,sp,8
   19af0:	f800283a 	ret

00019af4 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   19af4:	defffc04 	addi	sp,sp,-16
   19af8:	dfc00315 	stw	ra,12(sp)
   19afc:	df000215 	stw	fp,8(sp)
   19b00:	df000204 	addi	fp,sp,8
   19b04:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   19b08:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   19b0c:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   19b10:	e0bffe44 	addi	r2,fp,-7
   19b14:	100b883a 	mov	r5,r2
   19b18:	e13fff17 	ldw	r4,-4(fp)
   19b1c:	0019bc00 	call	19bc0 <alt_up_ps2_read_data_byte_timeout>
   19b20:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   19b24:	e0bffe03 	ldbu	r2,-8(fp)
   19b28:	1000061e 	bne	r2,zero,19b44 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   19b2c:	e0bffe43 	ldbu	r2,-7(fp)
   19b30:	10803fcc 	andi	r2,r2,255
   19b34:	10803e98 	cmpnei	r2,r2,250
   19b38:	103ff51e 	bne	r2,zero,19b10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019b10>
				return 0;
   19b3c:	0005883a 	mov	r2,zero
   19b40:	00000106 	br	19b48 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   19b44:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   19b48:	e037883a 	mov	sp,fp
   19b4c:	dfc00117 	ldw	ra,4(sp)
   19b50:	df000017 	ldw	fp,0(sp)
   19b54:	dec00204 	addi	sp,sp,8
   19b58:	f800283a 	ret

00019b5c <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   19b5c:	defffa04 	addi	sp,sp,-24
   19b60:	dfc00515 	stw	ra,20(sp)
   19b64:	df000415 	stw	fp,16(sp)
   19b68:	df000404 	addi	fp,sp,16
   19b6c:	e13ffe15 	stw	r4,-8(fp)
   19b70:	2805883a 	mov	r2,r5
   19b74:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   19b78:	e0bfff03 	ldbu	r2,-4(fp)
   19b7c:	100b883a 	mov	r5,r2
   19b80:	e13ffe17 	ldw	r4,-8(fp)
   19b84:	0019a800 	call	19a80 <alt_up_ps2_write_data_byte>
   19b88:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   19b8c:	e0bffc17 	ldw	r2,-16(fp)
   19b90:	10000226 	beq	r2,zero,19b9c <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   19b94:	e0bffc17 	ldw	r2,-16(fp)
   19b98:	00000406 	br	19bac <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   19b9c:	e13ffe17 	ldw	r4,-8(fp)
   19ba0:	0019af40 	call	19af4 <alt_up_ps2_wait_for_ack>
   19ba4:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   19ba8:	e0bffd17 	ldw	r2,-12(fp)
}
   19bac:	e037883a 	mov	sp,fp
   19bb0:	dfc00117 	ldw	ra,4(sp)
   19bb4:	df000017 	ldw	fp,0(sp)
   19bb8:	dec00204 	addi	sp,sp,8
   19bbc:	f800283a 	ret

00019bc0 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   19bc0:	defffa04 	addi	sp,sp,-24
   19bc4:	dfc00515 	stw	ra,20(sp)
   19bc8:	df000415 	stw	fp,16(sp)
   19bcc:	df000404 	addi	fp,sp,16
   19bd0:	e13ffe15 	stw	r4,-8(fp)
   19bd4:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   19bd8:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   19bdc:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   19be0:	e0bffc17 	ldw	r2,-16(fp)
   19be4:	10800044 	addi	r2,r2,1
   19be8:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   19bec:	e0bffe17 	ldw	r2,-8(fp)
   19bf0:	10800a17 	ldw	r2,40(r2)
   19bf4:	10800037 	ldwio	r2,0(r2)
   19bf8:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   19bfc:	e13ffd17 	ldw	r4,-12(fp)
   19c00:	001989c0 	call	1989c <read_data_valid>
   19c04:	10803fcc 	andi	r2,r2,255
   19c08:	10000726 	beq	r2,zero,19c28 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   19c0c:	e13ffd17 	ldw	r4,-12(fp)
   19c10:	00198d00 	call	198d0 <read_data_byte>
   19c14:	1007883a 	mov	r3,r2
   19c18:	e0bfff17 	ldw	r2,-4(fp)
   19c1c:	10c00005 	stb	r3,0(r2)
			return 0;
   19c20:	0005883a 	mov	r2,zero
   19c24:	00000806 	br	19c48 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   19c28:	e0bffe17 	ldw	r2,-8(fp)
   19c2c:	10800c17 	ldw	r2,48(r2)
   19c30:	103feb26 	beq	r2,zero,19be0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019be0>
   19c34:	e0bffe17 	ldw	r2,-8(fp)
   19c38:	10c00c17 	ldw	r3,48(r2)
   19c3c:	e0bffc17 	ldw	r2,-16(fp)
   19c40:	18bfe72e 	bgeu	r3,r2,19be0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019be0>
		{
			return -ETIMEDOUT;
   19c44:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   19c48:	e037883a 	mov	sp,fp
   19c4c:	dfc00117 	ldw	ra,4(sp)
   19c50:	df000017 	ldw	fp,0(sp)
   19c54:	dec00204 	addi	sp,sp,8
   19c58:	f800283a 	ret

00019c5c <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   19c5c:	defffb04 	addi	sp,sp,-20
   19c60:	dfc00415 	stw	ra,16(sp)
   19c64:	df000315 	stw	fp,12(sp)
   19c68:	df000304 	addi	fp,sp,12
   19c6c:	e13ffe15 	stw	r4,-8(fp)
   19c70:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   19c74:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   19c78:	e0bffe17 	ldw	r2,-8(fp)
   19c7c:	10800a17 	ldw	r2,40(r2)
   19c80:	10800037 	ldwio	r2,0(r2)
   19c84:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   19c88:	e13ffd17 	ldw	r4,-12(fp)
   19c8c:	001989c0 	call	1989c <read_data_valid>
   19c90:	10803fcc 	andi	r2,r2,255
   19c94:	10000726 	beq	r2,zero,19cb4 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   19c98:	e13ffd17 	ldw	r4,-12(fp)
   19c9c:	00198d00 	call	198d0 <read_data_byte>
   19ca0:	1007883a 	mov	r3,r2
   19ca4:	e0bfff17 	ldw	r2,-4(fp)
   19ca8:	10c00005 	stb	r3,0(r2)
		return 0;
   19cac:	0005883a 	mov	r2,zero
   19cb0:	00000106 	br	19cb8 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   19cb4:	00bfffc4 	movi	r2,-1
}
   19cb8:	e037883a 	mov	sp,fp
   19cbc:	dfc00117 	ldw	ra,4(sp)
   19cc0:	df000017 	ldw	fp,0(sp)
   19cc4:	dec00204 	addi	sp,sp,8
   19cc8:	f800283a 	ret

00019ccc <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   19ccc:	defffb04 	addi	sp,sp,-20
   19cd0:	dfc00415 	stw	ra,16(sp)
   19cd4:	df000315 	stw	fp,12(sp)
   19cd8:	df000304 	addi	fp,sp,12
   19cdc:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   19ce0:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   19ce4:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   19ce8:	e0bfff17 	ldw	r2,-4(fp)
   19cec:	10800a17 	ldw	r2,40(r2)
   19cf0:	10800037 	ldwio	r2,0(r2)
   19cf4:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   19cf8:	e13ffe17 	ldw	r4,-8(fp)
   19cfc:	001986c0 	call	1986c <read_num_bytes_available>
   19d00:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   19d04:	e0bffd0b 	ldhu	r2,-12(fp)
   19d08:	103ff71e 	bne	r2,zero,19ce8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019ce8>
}
   19d0c:	0001883a 	nop
   19d10:	e037883a 	mov	sp,fp
   19d14:	dfc00117 	ldw	ra,4(sp)
   19d18:	df000017 	ldw	fp,0(sp)
   19d1c:	dec00204 	addi	sp,sp,8
   19d20:	f800283a 	ret

00019d24 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   19d24:	defff804 	addi	sp,sp,-32
   19d28:	dfc00715 	stw	ra,28(sp)
   19d2c:	df000615 	stw	fp,24(sp)
   19d30:	df000604 	addi	fp,sp,24
   19d34:	e13ffd15 	stw	r4,-12(fp)
   19d38:	e17ffe15 	stw	r5,-8(fp)
   19d3c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   19d40:	e0bffd17 	ldw	r2,-12(fp)
   19d44:	10800017 	ldw	r2,0(r2)
   19d48:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   19d4c:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   19d50:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   19d54:	e0fffc17 	ldw	r3,-16(fp)
   19d58:	e0bfff17 	ldw	r2,-4(fp)
   19d5c:	18bffd16 	blt	r3,r2,19d54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019d54>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   19d60:	e0bffe17 	ldw	r2,-8(fp)
   19d64:	10c00044 	addi	r3,r2,1
   19d68:	e0fffe15 	stw	r3,-8(fp)
   19d6c:	100b883a 	mov	r5,r2
   19d70:	e13ffa17 	ldw	r4,-24(fp)
   19d74:	0019bc00 	call	19bc0 <alt_up_ps2_read_data_byte_timeout>
   19d78:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   19d7c:	e0bffb17 	ldw	r2,-20(fp)
   19d80:	10000226 	beq	r2,zero,19d8c <alt_up_ps2_read_fd+0x68>
			return count;
   19d84:	e0bffc17 	ldw	r2,-16(fp)
   19d88:	00000406 	br	19d9c <alt_up_ps2_read_fd+0x78>
		count++;
   19d8c:	e0bffc17 	ldw	r2,-16(fp)
   19d90:	10800044 	addi	r2,r2,1
   19d94:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   19d98:	e0bffc17 	ldw	r2,-16(fp)
}
   19d9c:	e037883a 	mov	sp,fp
   19da0:	dfc00117 	ldw	ra,4(sp)
   19da4:	df000017 	ldw	fp,0(sp)
   19da8:	dec00204 	addi	sp,sp,8
   19dac:	f800283a 	ret

00019db0 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   19db0:	defff804 	addi	sp,sp,-32
   19db4:	dfc00715 	stw	ra,28(sp)
   19db8:	df000615 	stw	fp,24(sp)
   19dbc:	df000604 	addi	fp,sp,24
   19dc0:	e13ffd15 	stw	r4,-12(fp)
   19dc4:	e17ffe15 	stw	r5,-8(fp)
   19dc8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   19dcc:	e0bffd17 	ldw	r2,-12(fp)
   19dd0:	10800017 	ldw	r2,0(r2)
   19dd4:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   19dd8:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   19ddc:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   19de0:	00001006 	br	19e24 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   19de4:	e0bffe17 	ldw	r2,-8(fp)
   19de8:	10c00044 	addi	r3,r2,1
   19dec:	e0fffe15 	stw	r3,-8(fp)
   19df0:	10800003 	ldbu	r2,0(r2)
   19df4:	10803fcc 	andi	r2,r2,255
   19df8:	100b883a 	mov	r5,r2
   19dfc:	e13ffb17 	ldw	r4,-20(fp)
   19e00:	0019a800 	call	19a80 <alt_up_ps2_write_data_byte>
   19e04:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   19e08:	e0bffc17 	ldw	r2,-16(fp)
   19e0c:	10000226 	beq	r2,zero,19e18 <alt_up_ps2_write_fd+0x68>
			return count;
   19e10:	e0bffa17 	ldw	r2,-24(fp)
   19e14:	00000706 	br	19e34 <alt_up_ps2_write_fd+0x84>
		count++;
   19e18:	e0bffa17 	ldw	r2,-24(fp)
   19e1c:	10800044 	addi	r2,r2,1
   19e20:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   19e24:	e0fffa17 	ldw	r3,-24(fp)
   19e28:	e0bfff17 	ldw	r2,-4(fp)
   19e2c:	18bfed16 	blt	r3,r2,19de4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019de4>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   19e30:	e0bffa17 	ldw	r2,-24(fp)
}
   19e34:	e037883a 	mov	sp,fp
   19e38:	dfc00117 	ldw	ra,4(sp)
   19e3c:	df000017 	ldw	fp,0(sp)
   19e40:	dec00204 	addi	sp,sp,8
   19e44:	f800283a 	ret

00019e48 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   19e48:	defffc04 	addi	sp,sp,-16
   19e4c:	dfc00315 	stw	ra,12(sp)
   19e50:	df000215 	stw	fp,8(sp)
   19e54:	df000204 	addi	fp,sp,8
   19e58:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   19e5c:	d1600804 	addi	r5,gp,-32736
   19e60:	e13fff17 	ldw	r4,-4(fp)
   19e64:	001a5000 	call	1a500 <alt_find_dev>
   19e68:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   19e6c:	e0bffe17 	ldw	r2,-8(fp)
}
   19e70:	e037883a 	mov	sp,fp
   19e74:	dfc00117 	ldw	ra,4(sp)
   19e78:	df000017 	ldw	fp,0(sp)
   19e7c:	dec00204 	addi	sp,sp,8
   19e80:	f800283a 	ret

00019e84 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   19e84:	defffd04 	addi	sp,sp,-12
   19e88:	df000215 	stw	fp,8(sp)
   19e8c:	df000204 	addi	fp,sp,8
   19e90:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   19e94:	e0bfff17 	ldw	r2,-4(fp)
   19e98:	10800a17 	ldw	r2,40(r2)
   19e9c:	10800104 	addi	r2,r2,4
   19ea0:	10800037 	ldwio	r2,0(r2)
   19ea4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   19ea8:	e0bffe17 	ldw	r2,-8(fp)
   19eac:	10800054 	ori	r2,r2,1
   19eb0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   19eb4:	e0bfff17 	ldw	r2,-4(fp)
   19eb8:	10800a17 	ldw	r2,40(r2)
   19ebc:	10800104 	addi	r2,r2,4
   19ec0:	1007883a 	mov	r3,r2
   19ec4:	e0bffe17 	ldw	r2,-8(fp)
   19ec8:	18800035 	stwio	r2,0(r3)
}
   19ecc:	0001883a 	nop
   19ed0:	e037883a 	mov	sp,fp
   19ed4:	df000017 	ldw	fp,0(sp)
   19ed8:	dec00104 	addi	sp,sp,4
   19edc:	f800283a 	ret

00019ee0 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   19ee0:	defffd04 	addi	sp,sp,-12
   19ee4:	df000215 	stw	fp,8(sp)
   19ee8:	df000204 	addi	fp,sp,8
   19eec:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   19ef0:	e0bfff17 	ldw	r2,-4(fp)
   19ef4:	10800a17 	ldw	r2,40(r2)
   19ef8:	10800104 	addi	r2,r2,4
   19efc:	10800037 	ldwio	r2,0(r2)
   19f00:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   19f04:	e0fffe17 	ldw	r3,-8(fp)
   19f08:	00bfff84 	movi	r2,-2
   19f0c:	1884703a 	and	r2,r3,r2
   19f10:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   19f14:	e0bfff17 	ldw	r2,-4(fp)
   19f18:	10800a17 	ldw	r2,40(r2)
   19f1c:	10800104 	addi	r2,r2,4
   19f20:	1007883a 	mov	r3,r2
   19f24:	e0bffe17 	ldw	r2,-8(fp)
   19f28:	18800035 	stwio	r2,0(r3)
}
   19f2c:	0001883a 	nop
   19f30:	e037883a 	mov	sp,fp
   19f34:	df000017 	ldw	fp,0(sp)
   19f38:	dec00104 	addi	sp,sp,4
   19f3c:	f800283a 	ret

00019f40 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   19f40:	defffd04 	addi	sp,sp,-12
   19f44:	df000215 	stw	fp,8(sp)
   19f48:	df000204 	addi	fp,sp,8
   19f4c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   19f50:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   19f54:	e0bfff17 	ldw	r2,-4(fp)
   19f58:	10800a17 	ldw	r2,40(r2)
   19f5c:	10800084 	addi	r2,r2,2
   19f60:	1080002b 	ldhuio	r2,0(r2)
   19f64:	10bfffcc 	andi	r2,r2,65535
   19f68:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   19f6c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   19f70:	e037883a 	mov	sp,fp
   19f74:	df000017 	ldw	fp,0(sp)
   19f78:	dec00104 	addi	sp,sp,4
   19f7c:	f800283a 	ret

00019f80 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   19f80:	defffd04 	addi	sp,sp,-12
   19f84:	df000215 	stw	fp,8(sp)
   19f88:	df000204 	addi	fp,sp,8
   19f8c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   19f90:	e0bfff17 	ldw	r2,-4(fp)
   19f94:	10800a17 	ldw	r2,40(r2)
   19f98:	10800104 	addi	r2,r2,4
   19f9c:	10800037 	ldwio	r2,0(r2)
   19fa0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   19fa4:	e0bffe17 	ldw	r2,-8(fp)
   19fa8:	1004d43a 	srli	r2,r2,16
}
   19fac:	e037883a 	mov	sp,fp
   19fb0:	df000017 	ldw	fp,0(sp)
   19fb4:	dec00104 	addi	sp,sp,4
   19fb8:	f800283a 	ret

00019fbc <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   19fbc:	defffd04 	addi	sp,sp,-12
   19fc0:	df000215 	stw	fp,8(sp)
   19fc4:	df000204 	addi	fp,sp,8
   19fc8:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   19fcc:	e0bfff17 	ldw	r2,-4(fp)
   19fd0:	1080800c 	andi	r2,r2,512
   19fd4:	1004d27a 	srli	r2,r2,9
   19fd8:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   19fdc:	e0bffe17 	ldw	r2,-8(fp)
   19fe0:	10000226 	beq	r2,zero,19fec <alt_up_rs232_check_parity+0x30>
   19fe4:	00bfffc4 	movi	r2,-1
   19fe8:	00000106 	br	19ff0 <alt_up_rs232_check_parity+0x34>
   19fec:	0005883a 	mov	r2,zero
}
   19ff0:	e037883a 	mov	sp,fp
   19ff4:	df000017 	ldw	fp,0(sp)
   19ff8:	dec00104 	addi	sp,sp,4
   19ffc:	f800283a 	ret

0001a000 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1a000:	defffd04 	addi	sp,sp,-12
   1a004:	df000215 	stw	fp,8(sp)
   1a008:	df000204 	addi	fp,sp,8
   1a00c:	e13ffe15 	stw	r4,-8(fp)
   1a010:	2805883a 	mov	r2,r5
   1a014:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1a018:	e0bffe17 	ldw	r2,-8(fp)
   1a01c:	10800a17 	ldw	r2,40(r2)
   1a020:	1007883a 	mov	r3,r2
   1a024:	e0bfff03 	ldbu	r2,-4(fp)
   1a028:	18800035 	stwio	r2,0(r3)
	return 0;
   1a02c:	0005883a 	mov	r2,zero
}
   1a030:	e037883a 	mov	sp,fp
   1a034:	df000017 	ldw	fp,0(sp)
   1a038:	dec00104 	addi	sp,sp,4
   1a03c:	f800283a 	ret

0001a040 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1a040:	defffa04 	addi	sp,sp,-24
   1a044:	dfc00515 	stw	ra,20(sp)
   1a048:	df000415 	stw	fp,16(sp)
   1a04c:	df000404 	addi	fp,sp,16
   1a050:	e13ffd15 	stw	r4,-12(fp)
   1a054:	e17ffe15 	stw	r5,-8(fp)
   1a058:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1a05c:	e0bffd17 	ldw	r2,-12(fp)
   1a060:	10800a17 	ldw	r2,40(r2)
   1a064:	10800037 	ldwio	r2,0(r2)
   1a068:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1a06c:	e0bffc17 	ldw	r2,-16(fp)
   1a070:	1007883a 	mov	r3,r2
   1a074:	e0bffe17 	ldw	r2,-8(fp)
   1a078:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1a07c:	e13ffc17 	ldw	r4,-16(fp)
   1a080:	0019fbc0 	call	19fbc <alt_up_rs232_check_parity>
   1a084:	1007883a 	mov	r3,r2
   1a088:	e0bfff17 	ldw	r2,-4(fp)
   1a08c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1a090:	e0bffc17 	ldw	r2,-16(fp)
   1a094:	10a0000c 	andi	r2,r2,32768
   1a098:	1004d3fa 	srli	r2,r2,15
   1a09c:	10bfffc4 	addi	r2,r2,-1
}
   1a0a0:	e037883a 	mov	sp,fp
   1a0a4:	dfc00117 	ldw	ra,4(sp)
   1a0a8:	df000017 	ldw	fp,0(sp)
   1a0ac:	dec00204 	addi	sp,sp,8
   1a0b0:	f800283a 	ret

0001a0b4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1a0b4:	defff804 	addi	sp,sp,-32
   1a0b8:	dfc00715 	stw	ra,28(sp)
   1a0bc:	df000615 	stw	fp,24(sp)
   1a0c0:	df000604 	addi	fp,sp,24
   1a0c4:	e13ffd15 	stw	r4,-12(fp)
   1a0c8:	e17ffe15 	stw	r5,-8(fp)
   1a0cc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1a0d0:	e0bffd17 	ldw	r2,-12(fp)
   1a0d4:	10800017 	ldw	r2,0(r2)
   1a0d8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1a0dc:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1a0e0:	00000c06 	br	1a114 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1a0e4:	e0bffe17 	ldw	r2,-8(fp)
   1a0e8:	10c00044 	addi	r3,r2,1
   1a0ec:	e0fffe15 	stw	r3,-8(fp)
   1a0f0:	e0fffc04 	addi	r3,fp,-16
   1a0f4:	180d883a 	mov	r6,r3
   1a0f8:	100b883a 	mov	r5,r2
   1a0fc:	e13ffb17 	ldw	r4,-20(fp)
   1a100:	001a0400 	call	1a040 <alt_up_rs232_read_data>
   1a104:	1000081e 	bne	r2,zero,1a128 <alt_up_rs232_read_fd+0x74>
			count++;
   1a108:	e0bffa17 	ldw	r2,-24(fp)
   1a10c:	10800044 	addi	r2,r2,1
   1a110:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1a114:	e0bfff17 	ldw	r2,-4(fp)
   1a118:	10ffffc4 	addi	r3,r2,-1
   1a11c:	e0ffff15 	stw	r3,-4(fp)
   1a120:	103ff01e 	bne	r2,zero,1a0e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a0e4>
   1a124:	00000106 	br	1a12c <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   1a128:	0001883a 	nop
	}
	return count;
   1a12c:	e0bffa17 	ldw	r2,-24(fp)
}
   1a130:	e037883a 	mov	sp,fp
   1a134:	dfc00117 	ldw	ra,4(sp)
   1a138:	df000017 	ldw	fp,0(sp)
   1a13c:	dec00204 	addi	sp,sp,8
   1a140:	f800283a 	ret

0001a144 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1a144:	defff904 	addi	sp,sp,-28
   1a148:	dfc00615 	stw	ra,24(sp)
   1a14c:	df000515 	stw	fp,20(sp)
   1a150:	df000504 	addi	fp,sp,20
   1a154:	e13ffd15 	stw	r4,-12(fp)
   1a158:	e17ffe15 	stw	r5,-8(fp)
   1a15c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1a160:	e0bffd17 	ldw	r2,-12(fp)
   1a164:	10800017 	ldw	r2,0(r2)
   1a168:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1a16c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1a170:	00000d06 	br	1a1a8 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1a174:	e0bffe17 	ldw	r2,-8(fp)
   1a178:	10800003 	ldbu	r2,0(r2)
   1a17c:	10803fcc 	andi	r2,r2,255
   1a180:	100b883a 	mov	r5,r2
   1a184:	e13ffc17 	ldw	r4,-16(fp)
   1a188:	001a0000 	call	1a000 <alt_up_rs232_write_data>
   1a18c:	10000b1e 	bne	r2,zero,1a1bc <alt_up_rs232_write_fd+0x78>
		{
			count++;
   1a190:	e0bffb17 	ldw	r2,-20(fp)
   1a194:	10800044 	addi	r2,r2,1
   1a198:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1a19c:	e0bffe17 	ldw	r2,-8(fp)
   1a1a0:	10800044 	addi	r2,r2,1
   1a1a4:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1a1a8:	e0bfff17 	ldw	r2,-4(fp)
   1a1ac:	10ffffc4 	addi	r3,r2,-1
   1a1b0:	e0ffff15 	stw	r3,-4(fp)
   1a1b4:	103fef1e 	bne	r2,zero,1a174 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a174>
   1a1b8:	00000106 	br	1a1c0 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   1a1bc:	0001883a 	nop
	}
	return count;
   1a1c0:	e0bffb17 	ldw	r2,-20(fp)
}
   1a1c4:	e037883a 	mov	sp,fp
   1a1c8:	dfc00117 	ldw	ra,4(sp)
   1a1cc:	df000017 	ldw	fp,0(sp)
   1a1d0:	dec00204 	addi	sp,sp,8
   1a1d4:	f800283a 	ret

0001a1d8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1a1d8:	defffc04 	addi	sp,sp,-16
   1a1dc:	dfc00315 	stw	ra,12(sp)
   1a1e0:	df000215 	stw	fp,8(sp)
   1a1e4:	df000204 	addi	fp,sp,8
   1a1e8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1a1ec:	d1600804 	addi	r5,gp,-32736
   1a1f0:	e13fff17 	ldw	r4,-4(fp)
   1a1f4:	001a5000 	call	1a500 <alt_find_dev>
   1a1f8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1a1fc:	e0bffe17 	ldw	r2,-8(fp)
}
   1a200:	e037883a 	mov	sp,fp
   1a204:	dfc00117 	ldw	ra,4(sp)
   1a208:	df000017 	ldw	fp,0(sp)
   1a20c:	dec00204 	addi	sp,sp,8
   1a210:	f800283a 	ret

0001a214 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1a214:	defff504 	addi	sp,sp,-44
   1a218:	df000a15 	stw	fp,40(sp)
   1a21c:	df000a04 	addi	fp,sp,40
   1a220:	e13ffc15 	stw	r4,-16(fp)
   1a224:	e17ffd15 	stw	r5,-12(fp)
   1a228:	e1bffe15 	stw	r6,-8(fp)
   1a22c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1a230:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1a234:	d0a82d17 	ldw	r2,-24396(gp)
  
  if (alt_ticks_per_second ())
   1a238:	10003c26 	beq	r2,zero,1a32c <alt_alarm_start+0x118>
  {
    if (alarm)
   1a23c:	e0bffc17 	ldw	r2,-16(fp)
   1a240:	10003826 	beq	r2,zero,1a324 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1a244:	e0bffc17 	ldw	r2,-16(fp)
   1a248:	e0fffe17 	ldw	r3,-8(fp)
   1a24c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1a250:	e0bffc17 	ldw	r2,-16(fp)
   1a254:	e0ffff17 	ldw	r3,-4(fp)
   1a258:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a25c:	0005303a 	rdctl	r2,status
   1a260:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a264:	e0fff917 	ldw	r3,-28(fp)
   1a268:	00bfff84 	movi	r2,-2
   1a26c:	1884703a 	and	r2,r3,r2
   1a270:	1001703a 	wrctl	status,r2
  
  return context;
   1a274:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1a278:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1a27c:	d0a82e17 	ldw	r2,-24392(gp)
      
      current_nticks = alt_nticks();
   1a280:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1a284:	e0fffd17 	ldw	r3,-12(fp)
   1a288:	e0bff617 	ldw	r2,-40(fp)
   1a28c:	1885883a 	add	r2,r3,r2
   1a290:	10c00044 	addi	r3,r2,1
   1a294:	e0bffc17 	ldw	r2,-16(fp)
   1a298:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1a29c:	e0bffc17 	ldw	r2,-16(fp)
   1a2a0:	10c00217 	ldw	r3,8(r2)
   1a2a4:	e0bff617 	ldw	r2,-40(fp)
   1a2a8:	1880042e 	bgeu	r3,r2,1a2bc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1a2ac:	e0bffc17 	ldw	r2,-16(fp)
   1a2b0:	00c00044 	movi	r3,1
   1a2b4:	10c00405 	stb	r3,16(r2)
   1a2b8:	00000206 	br	1a2c4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1a2bc:	e0bffc17 	ldw	r2,-16(fp)
   1a2c0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1a2c4:	e0bffc17 	ldw	r2,-16(fp)
   1a2c8:	d0e02d04 	addi	r3,gp,-32588
   1a2cc:	e0fffa15 	stw	r3,-24(fp)
   1a2d0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1a2d4:	e0bffb17 	ldw	r2,-20(fp)
   1a2d8:	e0fffa17 	ldw	r3,-24(fp)
   1a2dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1a2e0:	e0bffa17 	ldw	r2,-24(fp)
   1a2e4:	10c00017 	ldw	r3,0(r2)
   1a2e8:	e0bffb17 	ldw	r2,-20(fp)
   1a2ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1a2f0:	e0bffa17 	ldw	r2,-24(fp)
   1a2f4:	10800017 	ldw	r2,0(r2)
   1a2f8:	e0fffb17 	ldw	r3,-20(fp)
   1a2fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1a300:	e0bffa17 	ldw	r2,-24(fp)
   1a304:	e0fffb17 	ldw	r3,-20(fp)
   1a308:	10c00015 	stw	r3,0(r2)
   1a30c:	e0bff817 	ldw	r2,-32(fp)
   1a310:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a314:	e0bff717 	ldw	r2,-36(fp)
   1a318:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1a31c:	0005883a 	mov	r2,zero
   1a320:	00000306 	br	1a330 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1a324:	00bffa84 	movi	r2,-22
   1a328:	00000106 	br	1a330 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1a32c:	00bfde84 	movi	r2,-134
  }
}
   1a330:	e037883a 	mov	sp,fp
   1a334:	df000017 	ldw	fp,0(sp)
   1a338:	dec00104 	addi	sp,sp,4
   1a33c:	f800283a 	ret

0001a340 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1a340:	deffff04 	addi	sp,sp,-4
   1a344:	df000015 	stw	fp,0(sp)
   1a348:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1a34c:	0001883a 	nop
   1a350:	e037883a 	mov	sp,fp
   1a354:	df000017 	ldw	fp,0(sp)
   1a358:	dec00104 	addi	sp,sp,4
   1a35c:	f800283a 	ret

0001a360 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a360:	defffe04 	addi	sp,sp,-8
   1a364:	dfc00115 	stw	ra,4(sp)
   1a368:	df000015 	stw	fp,0(sp)
   1a36c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a370:	d0a00b17 	ldw	r2,-32724(gp)
   1a374:	10000326 	beq	r2,zero,1a384 <alt_get_errno+0x24>
   1a378:	d0a00b17 	ldw	r2,-32724(gp)
   1a37c:	103ee83a 	callr	r2
   1a380:	00000106 	br	1a388 <alt_get_errno+0x28>
   1a384:	d0a80f04 	addi	r2,gp,-24516
}
   1a388:	e037883a 	mov	sp,fp
   1a38c:	dfc00117 	ldw	ra,4(sp)
   1a390:	df000017 	ldw	fp,0(sp)
   1a394:	dec00204 	addi	sp,sp,8
   1a398:	f800283a 	ret

0001a39c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1a39c:	defffa04 	addi	sp,sp,-24
   1a3a0:	dfc00515 	stw	ra,20(sp)
   1a3a4:	df000415 	stw	fp,16(sp)
   1a3a8:	df000404 	addi	fp,sp,16
   1a3ac:	e13ffe15 	stw	r4,-8(fp)
   1a3b0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1a3b4:	e0bffe17 	ldw	r2,-8(fp)
   1a3b8:	10000326 	beq	r2,zero,1a3c8 <alt_dev_llist_insert+0x2c>
   1a3bc:	e0bffe17 	ldw	r2,-8(fp)
   1a3c0:	10800217 	ldw	r2,8(r2)
   1a3c4:	1000061e 	bne	r2,zero,1a3e0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1a3c8:	001a3600 	call	1a360 <alt_get_errno>
   1a3cc:	1007883a 	mov	r3,r2
   1a3d0:	00800584 	movi	r2,22
   1a3d4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1a3d8:	00bffa84 	movi	r2,-22
   1a3dc:	00001306 	br	1a42c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1a3e0:	e0bffe17 	ldw	r2,-8(fp)
   1a3e4:	e0ffff17 	ldw	r3,-4(fp)
   1a3e8:	e0fffc15 	stw	r3,-16(fp)
   1a3ec:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1a3f0:	e0bffd17 	ldw	r2,-12(fp)
   1a3f4:	e0fffc17 	ldw	r3,-16(fp)
   1a3f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1a3fc:	e0bffc17 	ldw	r2,-16(fp)
   1a400:	10c00017 	ldw	r3,0(r2)
   1a404:	e0bffd17 	ldw	r2,-12(fp)
   1a408:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1a40c:	e0bffc17 	ldw	r2,-16(fp)
   1a410:	10800017 	ldw	r2,0(r2)
   1a414:	e0fffd17 	ldw	r3,-12(fp)
   1a418:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1a41c:	e0bffc17 	ldw	r2,-16(fp)
   1a420:	e0fffd17 	ldw	r3,-12(fp)
   1a424:	10c00015 	stw	r3,0(r2)

  return 0;  
   1a428:	0005883a 	mov	r2,zero
}
   1a42c:	e037883a 	mov	sp,fp
   1a430:	dfc00117 	ldw	ra,4(sp)
   1a434:	df000017 	ldw	fp,0(sp)
   1a438:	dec00204 	addi	sp,sp,8
   1a43c:	f800283a 	ret

0001a440 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1a440:	defffd04 	addi	sp,sp,-12
   1a444:	dfc00215 	stw	ra,8(sp)
   1a448:	df000115 	stw	fp,4(sp)
   1a44c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1a450:	008000b4 	movhi	r2,2
   1a454:	10ada604 	addi	r2,r2,-18792
   1a458:	e0bfff15 	stw	r2,-4(fp)
   1a45c:	00000606 	br	1a478 <_do_ctors+0x38>
        (*ctor) (); 
   1a460:	e0bfff17 	ldw	r2,-4(fp)
   1a464:	10800017 	ldw	r2,0(r2)
   1a468:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1a46c:	e0bfff17 	ldw	r2,-4(fp)
   1a470:	10bfff04 	addi	r2,r2,-4
   1a474:	e0bfff15 	stw	r2,-4(fp)
   1a478:	e0ffff17 	ldw	r3,-4(fp)
   1a47c:	008000b4 	movhi	r2,2
   1a480:	10ada704 	addi	r2,r2,-18788
   1a484:	18bff62e 	bgeu	r3,r2,1a460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a460>
        (*ctor) (); 
}
   1a488:	0001883a 	nop
   1a48c:	e037883a 	mov	sp,fp
   1a490:	dfc00117 	ldw	ra,4(sp)
   1a494:	df000017 	ldw	fp,0(sp)
   1a498:	dec00204 	addi	sp,sp,8
   1a49c:	f800283a 	ret

0001a4a0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1a4a0:	defffd04 	addi	sp,sp,-12
   1a4a4:	dfc00215 	stw	ra,8(sp)
   1a4a8:	df000115 	stw	fp,4(sp)
   1a4ac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1a4b0:	008000b4 	movhi	r2,2
   1a4b4:	10ada604 	addi	r2,r2,-18792
   1a4b8:	e0bfff15 	stw	r2,-4(fp)
   1a4bc:	00000606 	br	1a4d8 <_do_dtors+0x38>
        (*dtor) (); 
   1a4c0:	e0bfff17 	ldw	r2,-4(fp)
   1a4c4:	10800017 	ldw	r2,0(r2)
   1a4c8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1a4cc:	e0bfff17 	ldw	r2,-4(fp)
   1a4d0:	10bfff04 	addi	r2,r2,-4
   1a4d4:	e0bfff15 	stw	r2,-4(fp)
   1a4d8:	e0ffff17 	ldw	r3,-4(fp)
   1a4dc:	008000b4 	movhi	r2,2
   1a4e0:	10ada704 	addi	r2,r2,-18788
   1a4e4:	18bff62e 	bgeu	r3,r2,1a4c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a4c0>
        (*dtor) (); 
}
   1a4e8:	0001883a 	nop
   1a4ec:	e037883a 	mov	sp,fp
   1a4f0:	dfc00117 	ldw	ra,4(sp)
   1a4f4:	df000017 	ldw	fp,0(sp)
   1a4f8:	dec00204 	addi	sp,sp,8
   1a4fc:	f800283a 	ret

0001a500 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1a500:	defffa04 	addi	sp,sp,-24
   1a504:	dfc00515 	stw	ra,20(sp)
   1a508:	df000415 	stw	fp,16(sp)
   1a50c:	df000404 	addi	fp,sp,16
   1a510:	e13ffe15 	stw	r4,-8(fp)
   1a514:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1a518:	e0bfff17 	ldw	r2,-4(fp)
   1a51c:	10800017 	ldw	r2,0(r2)
   1a520:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1a524:	e13ffe17 	ldw	r4,-8(fp)
   1a528:	000bcb80 	call	bcb8 <strlen>
   1a52c:	10800044 	addi	r2,r2,1
   1a530:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1a534:	00000d06 	br	1a56c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1a538:	e0bffc17 	ldw	r2,-16(fp)
   1a53c:	10800217 	ldw	r2,8(r2)
   1a540:	e0fffd17 	ldw	r3,-12(fp)
   1a544:	180d883a 	mov	r6,r3
   1a548:	e17ffe17 	ldw	r5,-8(fp)
   1a54c:	1009883a 	mov	r4,r2
   1a550:	001b3540 	call	1b354 <memcmp>
   1a554:	1000021e 	bne	r2,zero,1a560 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1a558:	e0bffc17 	ldw	r2,-16(fp)
   1a55c:	00000706 	br	1a57c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1a560:	e0bffc17 	ldw	r2,-16(fp)
   1a564:	10800017 	ldw	r2,0(r2)
   1a568:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1a56c:	e0fffc17 	ldw	r3,-16(fp)
   1a570:	e0bfff17 	ldw	r2,-4(fp)
   1a574:	18bff01e 	bne	r3,r2,1a538 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a538>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1a578:	0005883a 	mov	r2,zero
}
   1a57c:	e037883a 	mov	sp,fp
   1a580:	dfc00117 	ldw	ra,4(sp)
   1a584:	df000017 	ldw	fp,0(sp)
   1a588:	dec00204 	addi	sp,sp,8
   1a58c:	f800283a 	ret

0001a590 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1a590:	defffe04 	addi	sp,sp,-8
   1a594:	dfc00115 	stw	ra,4(sp)
   1a598:	df000015 	stw	fp,0(sp)
   1a59c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1a5a0:	01440004 	movi	r5,4096
   1a5a4:	0009883a 	mov	r4,zero
   1a5a8:	001b1dc0 	call	1b1dc <alt_icache_flush>
#endif
}
   1a5ac:	0001883a 	nop
   1a5b0:	e037883a 	mov	sp,fp
   1a5b4:	dfc00117 	ldw	ra,4(sp)
   1a5b8:	df000017 	ldw	fp,0(sp)
   1a5bc:	dec00204 	addi	sp,sp,8
   1a5c0:	f800283a 	ret

0001a5c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1a5c4:	defff904 	addi	sp,sp,-28
   1a5c8:	dfc00615 	stw	ra,24(sp)
   1a5cc:	df000515 	stw	fp,20(sp)
   1a5d0:	df000504 	addi	fp,sp,20
   1a5d4:	e13ffc15 	stw	r4,-16(fp)
   1a5d8:	e17ffd15 	stw	r5,-12(fp)
   1a5dc:	e1bffe15 	stw	r6,-8(fp)
   1a5e0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1a5e4:	e1bfff17 	ldw	r6,-4(fp)
   1a5e8:	e17ffe17 	ldw	r5,-8(fp)
   1a5ec:	e13ffd17 	ldw	r4,-12(fp)
   1a5f0:	001a9840 	call	1a984 <open>
   1a5f4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1a5f8:	e0bffb17 	ldw	r2,-20(fp)
   1a5fc:	10001c16 	blt	r2,zero,1a670 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1a600:	008000b4 	movhi	r2,2
   1a604:	10b1bf04 	addi	r2,r2,-14596
   1a608:	e0fffb17 	ldw	r3,-20(fp)
   1a60c:	18c00324 	muli	r3,r3,12
   1a610:	10c5883a 	add	r2,r2,r3
   1a614:	10c00017 	ldw	r3,0(r2)
   1a618:	e0bffc17 	ldw	r2,-16(fp)
   1a61c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1a620:	008000b4 	movhi	r2,2
   1a624:	10b1bf04 	addi	r2,r2,-14596
   1a628:	e0fffb17 	ldw	r3,-20(fp)
   1a62c:	18c00324 	muli	r3,r3,12
   1a630:	10c5883a 	add	r2,r2,r3
   1a634:	10800104 	addi	r2,r2,4
   1a638:	10c00017 	ldw	r3,0(r2)
   1a63c:	e0bffc17 	ldw	r2,-16(fp)
   1a640:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1a644:	008000b4 	movhi	r2,2
   1a648:	10b1bf04 	addi	r2,r2,-14596
   1a64c:	e0fffb17 	ldw	r3,-20(fp)
   1a650:	18c00324 	muli	r3,r3,12
   1a654:	10c5883a 	add	r2,r2,r3
   1a658:	10800204 	addi	r2,r2,8
   1a65c:	10c00017 	ldw	r3,0(r2)
   1a660:	e0bffc17 	ldw	r2,-16(fp)
   1a664:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1a668:	e13ffb17 	ldw	r4,-20(fp)
   1a66c:	000fb880 	call	fb88 <alt_release_fd>
  }
} 
   1a670:	0001883a 	nop
   1a674:	e037883a 	mov	sp,fp
   1a678:	dfc00117 	ldw	ra,4(sp)
   1a67c:	df000017 	ldw	fp,0(sp)
   1a680:	dec00204 	addi	sp,sp,8
   1a684:	f800283a 	ret

0001a688 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1a688:	defffb04 	addi	sp,sp,-20
   1a68c:	dfc00415 	stw	ra,16(sp)
   1a690:	df000315 	stw	fp,12(sp)
   1a694:	df000304 	addi	fp,sp,12
   1a698:	e13ffd15 	stw	r4,-12(fp)
   1a69c:	e17ffe15 	stw	r5,-8(fp)
   1a6a0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1a6a4:	01c07fc4 	movi	r7,511
   1a6a8:	01800044 	movi	r6,1
   1a6ac:	e17ffd17 	ldw	r5,-12(fp)
   1a6b0:	010000b4 	movhi	r4,2
   1a6b4:	2131c204 	addi	r4,r4,-14584
   1a6b8:	001a5c40 	call	1a5c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1a6bc:	01c07fc4 	movi	r7,511
   1a6c0:	000d883a 	mov	r6,zero
   1a6c4:	e17ffe17 	ldw	r5,-8(fp)
   1a6c8:	010000b4 	movhi	r4,2
   1a6cc:	2131bf04 	addi	r4,r4,-14596
   1a6d0:	001a5c40 	call	1a5c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1a6d4:	01c07fc4 	movi	r7,511
   1a6d8:	01800044 	movi	r6,1
   1a6dc:	e17fff17 	ldw	r5,-4(fp)
   1a6e0:	010000b4 	movhi	r4,2
   1a6e4:	2131c504 	addi	r4,r4,-14572
   1a6e8:	001a5c40 	call	1a5c4 <alt_open_fd>
}  
   1a6ec:	0001883a 	nop
   1a6f0:	e037883a 	mov	sp,fp
   1a6f4:	dfc00117 	ldw	ra,4(sp)
   1a6f8:	df000017 	ldw	fp,0(sp)
   1a6fc:	dec00204 	addi	sp,sp,8
   1a700:	f800283a 	ret

0001a704 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1a704:	defff004 	addi	sp,sp,-64
   1a708:	df000f15 	stw	fp,60(sp)
   1a70c:	df000f04 	addi	fp,sp,60
   1a710:	e13ffd15 	stw	r4,-12(fp)
   1a714:	e17ffe15 	stw	r5,-8(fp)
   1a718:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1a71c:	00bffa84 	movi	r2,-22
   1a720:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1a724:	e0bffd17 	ldw	r2,-12(fp)
   1a728:	10800828 	cmpgeui	r2,r2,32
   1a72c:	1000501e 	bne	r2,zero,1a870 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a730:	0005303a 	rdctl	r2,status
   1a734:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a738:	e0fff617 	ldw	r3,-40(fp)
   1a73c:	00bfff84 	movi	r2,-2
   1a740:	1884703a 	and	r2,r3,r2
   1a744:	1001703a 	wrctl	status,r2
  
  return context;
   1a748:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1a74c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   1a750:	008000b4 	movhi	r2,2
   1a754:	108bfa04 	addi	r2,r2,12264
   1a758:	e0fffd17 	ldw	r3,-12(fp)
   1a75c:	180690fa 	slli	r3,r3,3
   1a760:	10c5883a 	add	r2,r2,r3
   1a764:	e0ffff17 	ldw	r3,-4(fp)
   1a768:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1a76c:	008000b4 	movhi	r2,2
   1a770:	108bfa04 	addi	r2,r2,12264
   1a774:	e0fffd17 	ldw	r3,-12(fp)
   1a778:	180690fa 	slli	r3,r3,3
   1a77c:	10c5883a 	add	r2,r2,r3
   1a780:	10800104 	addi	r2,r2,4
   1a784:	e0fffe17 	ldw	r3,-8(fp)
   1a788:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1a78c:	e0bfff17 	ldw	r2,-4(fp)
   1a790:	10001926 	beq	r2,zero,1a7f8 <alt_irq_register+0xf4>
   1a794:	e0bffd17 	ldw	r2,-12(fp)
   1a798:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a79c:	0005303a 	rdctl	r2,status
   1a7a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a7a4:	e0fff717 	ldw	r3,-36(fp)
   1a7a8:	00bfff84 	movi	r2,-2
   1a7ac:	1884703a 	and	r2,r3,r2
   1a7b0:	1001703a 	wrctl	status,r2
  
  return context;
   1a7b4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1a7b8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   1a7bc:	00c00044 	movi	r3,1
   1a7c0:	e0bff217 	ldw	r2,-56(fp)
   1a7c4:	1884983a 	sll	r2,r3,r2
   1a7c8:	1007883a 	mov	r3,r2
   1a7cc:	d0a82c17 	ldw	r2,-24400(gp)
   1a7d0:	1884b03a 	or	r2,r3,r2
   1a7d4:	d0a82c15 	stw	r2,-24400(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1a7d8:	d0a82c17 	ldw	r2,-24400(gp)
   1a7dc:	100170fa 	wrctl	ienable,r2
   1a7e0:	e0bff817 	ldw	r2,-32(fp)
   1a7e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a7e8:	e0bff917 	ldw	r2,-28(fp)
   1a7ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1a7f0:	0005883a 	mov	r2,zero
   1a7f4:	00001906 	br	1a85c <alt_irq_register+0x158>
   1a7f8:	e0bffd17 	ldw	r2,-12(fp)
   1a7fc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a800:	0005303a 	rdctl	r2,status
   1a804:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a808:	e0fffa17 	ldw	r3,-24(fp)
   1a80c:	00bfff84 	movi	r2,-2
   1a810:	1884703a 	and	r2,r3,r2
   1a814:	1001703a 	wrctl	status,r2
  
  return context;
   1a818:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1a81c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   1a820:	00c00044 	movi	r3,1
   1a824:	e0bff417 	ldw	r2,-48(fp)
   1a828:	1884983a 	sll	r2,r3,r2
   1a82c:	0084303a 	nor	r2,zero,r2
   1a830:	1007883a 	mov	r3,r2
   1a834:	d0a82c17 	ldw	r2,-24400(gp)
   1a838:	1884703a 	and	r2,r3,r2
   1a83c:	d0a82c15 	stw	r2,-24400(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1a840:	d0a82c17 	ldw	r2,-24400(gp)
   1a844:	100170fa 	wrctl	ienable,r2
   1a848:	e0bffb17 	ldw	r2,-20(fp)
   1a84c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a850:	e0bffc17 	ldw	r2,-16(fp)
   1a854:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1a858:	0005883a 	mov	r2,zero
   1a85c:	e0bff115 	stw	r2,-60(fp)
   1a860:	e0bff317 	ldw	r2,-52(fp)
   1a864:	e0bff515 	stw	r2,-44(fp)
   1a868:	e0bff517 	ldw	r2,-44(fp)
   1a86c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1a870:	e0bff117 	ldw	r2,-60(fp)
}
   1a874:	e037883a 	mov	sp,fp
   1a878:	df000017 	ldw	fp,0(sp)
   1a87c:	dec00104 	addi	sp,sp,4
   1a880:	f800283a 	ret

0001a884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a884:	defffe04 	addi	sp,sp,-8
   1a888:	dfc00115 	stw	ra,4(sp)
   1a88c:	df000015 	stw	fp,0(sp)
   1a890:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a894:	d0a00b17 	ldw	r2,-32724(gp)
   1a898:	10000326 	beq	r2,zero,1a8a8 <alt_get_errno+0x24>
   1a89c:	d0a00b17 	ldw	r2,-32724(gp)
   1a8a0:	103ee83a 	callr	r2
   1a8a4:	00000106 	br	1a8ac <alt_get_errno+0x28>
   1a8a8:	d0a80f04 	addi	r2,gp,-24516
}
   1a8ac:	e037883a 	mov	sp,fp
   1a8b0:	dfc00117 	ldw	ra,4(sp)
   1a8b4:	df000017 	ldw	fp,0(sp)
   1a8b8:	dec00204 	addi	sp,sp,8
   1a8bc:	f800283a 	ret

0001a8c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1a8c0:	defffd04 	addi	sp,sp,-12
   1a8c4:	df000215 	stw	fp,8(sp)
   1a8c8:	df000204 	addi	fp,sp,8
   1a8cc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1a8d0:	e0bfff17 	ldw	r2,-4(fp)
   1a8d4:	10800217 	ldw	r2,8(r2)
   1a8d8:	10d00034 	orhi	r3,r2,16384
   1a8dc:	e0bfff17 	ldw	r2,-4(fp)
   1a8e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1a8e4:	e03ffe15 	stw	zero,-8(fp)
   1a8e8:	00001d06 	br	1a960 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1a8ec:	008000b4 	movhi	r2,2
   1a8f0:	10b1bf04 	addi	r2,r2,-14596
   1a8f4:	e0fffe17 	ldw	r3,-8(fp)
   1a8f8:	18c00324 	muli	r3,r3,12
   1a8fc:	10c5883a 	add	r2,r2,r3
   1a900:	10c00017 	ldw	r3,0(r2)
   1a904:	e0bfff17 	ldw	r2,-4(fp)
   1a908:	10800017 	ldw	r2,0(r2)
   1a90c:	1880111e 	bne	r3,r2,1a954 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1a910:	008000b4 	movhi	r2,2
   1a914:	10b1bf04 	addi	r2,r2,-14596
   1a918:	e0fffe17 	ldw	r3,-8(fp)
   1a91c:	18c00324 	muli	r3,r3,12
   1a920:	10c5883a 	add	r2,r2,r3
   1a924:	10800204 	addi	r2,r2,8
   1a928:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1a92c:	1000090e 	bge	r2,zero,1a954 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1a930:	e0bffe17 	ldw	r2,-8(fp)
   1a934:	10c00324 	muli	r3,r2,12
   1a938:	008000b4 	movhi	r2,2
   1a93c:	10b1bf04 	addi	r2,r2,-14596
   1a940:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1a944:	e0bfff17 	ldw	r2,-4(fp)
   1a948:	18800226 	beq	r3,r2,1a954 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1a94c:	00bffcc4 	movi	r2,-13
   1a950:	00000806 	br	1a974 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1a954:	e0bffe17 	ldw	r2,-8(fp)
   1a958:	10800044 	addi	r2,r2,1
   1a95c:	e0bffe15 	stw	r2,-8(fp)
   1a960:	d0a00a17 	ldw	r2,-32728(gp)
   1a964:	1007883a 	mov	r3,r2
   1a968:	e0bffe17 	ldw	r2,-8(fp)
   1a96c:	18bfdf2e 	bgeu	r3,r2,1a8ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a8ec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1a970:	0005883a 	mov	r2,zero
}
   1a974:	e037883a 	mov	sp,fp
   1a978:	df000017 	ldw	fp,0(sp)
   1a97c:	dec00104 	addi	sp,sp,4
   1a980:	f800283a 	ret

0001a984 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1a984:	defff604 	addi	sp,sp,-40
   1a988:	dfc00915 	stw	ra,36(sp)
   1a98c:	df000815 	stw	fp,32(sp)
   1a990:	df000804 	addi	fp,sp,32
   1a994:	e13ffd15 	stw	r4,-12(fp)
   1a998:	e17ffe15 	stw	r5,-8(fp)
   1a99c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1a9a0:	00bfffc4 	movi	r2,-1
   1a9a4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1a9a8:	00bffb44 	movi	r2,-19
   1a9ac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1a9b0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1a9b4:	d1600804 	addi	r5,gp,-32736
   1a9b8:	e13ffd17 	ldw	r4,-12(fp)
   1a9bc:	001a5000 	call	1a500 <alt_find_dev>
   1a9c0:	e0bff815 	stw	r2,-32(fp)
   1a9c4:	e0bff817 	ldw	r2,-32(fp)
   1a9c8:	1000051e 	bne	r2,zero,1a9e0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1a9cc:	e13ffd17 	ldw	r4,-12(fp)
   1a9d0:	001aff80 	call	1aff8 <alt_find_file>
   1a9d4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1a9d8:	00800044 	movi	r2,1
   1a9dc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1a9e0:	e0bff817 	ldw	r2,-32(fp)
   1a9e4:	10002926 	beq	r2,zero,1aa8c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1a9e8:	e13ff817 	ldw	r4,-32(fp)
   1a9ec:	001b1000 	call	1b100 <alt_get_fd>
   1a9f0:	e0bff915 	stw	r2,-28(fp)
   1a9f4:	e0bff917 	ldw	r2,-28(fp)
   1a9f8:	1000030e 	bge	r2,zero,1aa08 <open+0x84>
    {
      status = index;
   1a9fc:	e0bff917 	ldw	r2,-28(fp)
   1aa00:	e0bffa15 	stw	r2,-24(fp)
   1aa04:	00002306 	br	1aa94 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1aa08:	e0bff917 	ldw	r2,-28(fp)
   1aa0c:	10c00324 	muli	r3,r2,12
   1aa10:	008000b4 	movhi	r2,2
   1aa14:	10b1bf04 	addi	r2,r2,-14596
   1aa18:	1885883a 	add	r2,r3,r2
   1aa1c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1aa20:	e0fffe17 	ldw	r3,-8(fp)
   1aa24:	00900034 	movhi	r2,16384
   1aa28:	10bfffc4 	addi	r2,r2,-1
   1aa2c:	1886703a 	and	r3,r3,r2
   1aa30:	e0bffc17 	ldw	r2,-16(fp)
   1aa34:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1aa38:	e0bffb17 	ldw	r2,-20(fp)
   1aa3c:	1000051e 	bne	r2,zero,1aa54 <open+0xd0>
   1aa40:	e13ffc17 	ldw	r4,-16(fp)
   1aa44:	001a8c00 	call	1a8c0 <alt_file_locked>
   1aa48:	e0bffa15 	stw	r2,-24(fp)
   1aa4c:	e0bffa17 	ldw	r2,-24(fp)
   1aa50:	10001016 	blt	r2,zero,1aa94 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1aa54:	e0bff817 	ldw	r2,-32(fp)
   1aa58:	10800317 	ldw	r2,12(r2)
   1aa5c:	10000826 	beq	r2,zero,1aa80 <open+0xfc>
   1aa60:	e0bff817 	ldw	r2,-32(fp)
   1aa64:	10800317 	ldw	r2,12(r2)
   1aa68:	e1ffff17 	ldw	r7,-4(fp)
   1aa6c:	e1bffe17 	ldw	r6,-8(fp)
   1aa70:	e17ffd17 	ldw	r5,-12(fp)
   1aa74:	e13ffc17 	ldw	r4,-16(fp)
   1aa78:	103ee83a 	callr	r2
   1aa7c:	00000106 	br	1aa84 <open+0x100>
   1aa80:	0005883a 	mov	r2,zero
   1aa84:	e0bffa15 	stw	r2,-24(fp)
   1aa88:	00000206 	br	1aa94 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1aa8c:	00bffb44 	movi	r2,-19
   1aa90:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1aa94:	e0bffa17 	ldw	r2,-24(fp)
   1aa98:	1000090e 	bge	r2,zero,1aac0 <open+0x13c>
  {
    alt_release_fd (index);  
   1aa9c:	e13ff917 	ldw	r4,-28(fp)
   1aaa0:	000fb880 	call	fb88 <alt_release_fd>
    ALT_ERRNO = -status;
   1aaa4:	001a8840 	call	1a884 <alt_get_errno>
   1aaa8:	1007883a 	mov	r3,r2
   1aaac:	e0bffa17 	ldw	r2,-24(fp)
   1aab0:	0085c83a 	sub	r2,zero,r2
   1aab4:	18800015 	stw	r2,0(r3)
    return -1;
   1aab8:	00bfffc4 	movi	r2,-1
   1aabc:	00000106 	br	1aac4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1aac0:	e0bff917 	ldw	r2,-28(fp)
}
   1aac4:	e037883a 	mov	sp,fp
   1aac8:	dfc00117 	ldw	ra,4(sp)
   1aacc:	df000017 	ldw	fp,0(sp)
   1aad0:	dec00204 	addi	sp,sp,8
   1aad4:	f800283a 	ret

0001aad8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1aad8:	defffa04 	addi	sp,sp,-24
   1aadc:	df000515 	stw	fp,20(sp)
   1aae0:	df000504 	addi	fp,sp,20
   1aae4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aae8:	0005303a 	rdctl	r2,status
   1aaec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aaf0:	e0fffc17 	ldw	r3,-16(fp)
   1aaf4:	00bfff84 	movi	r2,-2
   1aaf8:	1884703a 	and	r2,r3,r2
   1aafc:	1001703a 	wrctl	status,r2
  
  return context;
   1ab00:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1ab04:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1ab08:	e0bfff17 	ldw	r2,-4(fp)
   1ab0c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1ab10:	e0bffd17 	ldw	r2,-12(fp)
   1ab14:	10800017 	ldw	r2,0(r2)
   1ab18:	e0fffd17 	ldw	r3,-12(fp)
   1ab1c:	18c00117 	ldw	r3,4(r3)
   1ab20:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1ab24:	e0bffd17 	ldw	r2,-12(fp)
   1ab28:	10800117 	ldw	r2,4(r2)
   1ab2c:	e0fffd17 	ldw	r3,-12(fp)
   1ab30:	18c00017 	ldw	r3,0(r3)
   1ab34:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1ab38:	e0bffd17 	ldw	r2,-12(fp)
   1ab3c:	e0fffd17 	ldw	r3,-12(fp)
   1ab40:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1ab44:	e0bffd17 	ldw	r2,-12(fp)
   1ab48:	e0fffd17 	ldw	r3,-12(fp)
   1ab4c:	10c00015 	stw	r3,0(r2)
   1ab50:	e0bffb17 	ldw	r2,-20(fp)
   1ab54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ab58:	e0bffe17 	ldw	r2,-8(fp)
   1ab5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1ab60:	0001883a 	nop
   1ab64:	e037883a 	mov	sp,fp
   1ab68:	df000017 	ldw	fp,0(sp)
   1ab6c:	dec00104 	addi	sp,sp,4
   1ab70:	f800283a 	ret

0001ab74 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1ab74:	defffb04 	addi	sp,sp,-20
   1ab78:	dfc00415 	stw	ra,16(sp)
   1ab7c:	df000315 	stw	fp,12(sp)
   1ab80:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1ab84:	d0a02d17 	ldw	r2,-32588(gp)
   1ab88:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1ab8c:	d0a82e17 	ldw	r2,-24392(gp)
   1ab90:	10800044 	addi	r2,r2,1
   1ab94:	d0a82e15 	stw	r2,-24392(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1ab98:	00002e06 	br	1ac54 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1ab9c:	e0bffd17 	ldw	r2,-12(fp)
   1aba0:	10800017 	ldw	r2,0(r2)
   1aba4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1aba8:	e0bffd17 	ldw	r2,-12(fp)
   1abac:	10800403 	ldbu	r2,16(r2)
   1abb0:	10803fcc 	andi	r2,r2,255
   1abb4:	10000426 	beq	r2,zero,1abc8 <alt_tick+0x54>
   1abb8:	d0a82e17 	ldw	r2,-24392(gp)
   1abbc:	1000021e 	bne	r2,zero,1abc8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1abc0:	e0bffd17 	ldw	r2,-12(fp)
   1abc4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1abc8:	e0bffd17 	ldw	r2,-12(fp)
   1abcc:	10800217 	ldw	r2,8(r2)
   1abd0:	d0e82e17 	ldw	r3,-24392(gp)
   1abd4:	18801d36 	bltu	r3,r2,1ac4c <alt_tick+0xd8>
   1abd8:	e0bffd17 	ldw	r2,-12(fp)
   1abdc:	10800403 	ldbu	r2,16(r2)
   1abe0:	10803fcc 	andi	r2,r2,255
   1abe4:	1000191e 	bne	r2,zero,1ac4c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1abe8:	e0bffd17 	ldw	r2,-12(fp)
   1abec:	10800317 	ldw	r2,12(r2)
   1abf0:	e0fffd17 	ldw	r3,-12(fp)
   1abf4:	18c00517 	ldw	r3,20(r3)
   1abf8:	1809883a 	mov	r4,r3
   1abfc:	103ee83a 	callr	r2
   1ac00:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1ac04:	e0bfff17 	ldw	r2,-4(fp)
   1ac08:	1000031e 	bne	r2,zero,1ac18 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1ac0c:	e13ffd17 	ldw	r4,-12(fp)
   1ac10:	001aad80 	call	1aad8 <alt_alarm_stop>
   1ac14:	00000d06 	br	1ac4c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1ac18:	e0bffd17 	ldw	r2,-12(fp)
   1ac1c:	10c00217 	ldw	r3,8(r2)
   1ac20:	e0bfff17 	ldw	r2,-4(fp)
   1ac24:	1887883a 	add	r3,r3,r2
   1ac28:	e0bffd17 	ldw	r2,-12(fp)
   1ac2c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1ac30:	e0bffd17 	ldw	r2,-12(fp)
   1ac34:	10c00217 	ldw	r3,8(r2)
   1ac38:	d0a82e17 	ldw	r2,-24392(gp)
   1ac3c:	1880032e 	bgeu	r3,r2,1ac4c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1ac40:	e0bffd17 	ldw	r2,-12(fp)
   1ac44:	00c00044 	movi	r3,1
   1ac48:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1ac4c:	e0bffe17 	ldw	r2,-8(fp)
   1ac50:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1ac54:	e0fffd17 	ldw	r3,-12(fp)
   1ac58:	d0a02d04 	addi	r2,gp,-32588
   1ac5c:	18bfcf1e 	bne	r3,r2,1ab9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ab9c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1ac60:	0010d740 	call	10d74 <OSTimeTick>
}
   1ac64:	0001883a 	nop
   1ac68:	e037883a 	mov	sp,fp
   1ac6c:	dfc00117 	ldw	ra,4(sp)
   1ac70:	df000017 	ldw	fp,0(sp)
   1ac74:	dec00204 	addi	sp,sp,8
   1ac78:	f800283a 	ret

0001ac7c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1ac7c:	deffff04 	addi	sp,sp,-4
   1ac80:	df000015 	stw	fp,0(sp)
   1ac84:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1ac88:	000170fa 	wrctl	ienable,zero
}
   1ac8c:	0001883a 	nop
   1ac90:	e037883a 	mov	sp,fp
   1ac94:	df000017 	ldw	fp,0(sp)
   1ac98:	dec00104 	addi	sp,sp,4
   1ac9c:	f800283a 	ret

0001aca0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1aca0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1aca4:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1aca8:	d1282717 	ldw	r4,-24420(gp)

      stw ra,  0(sp)
   1acac:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1acb0:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1acb4:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1acb8:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1acbc:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1acc0:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1acc4:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1acc8:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1accc:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1acd0:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1acd4:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1acd8:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1acdc:	001af140 	call	1af14 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1ace0:	d1282217 	ldw	r4,-24440(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1ace4:	d1681a07 	ldb	r5,-24472(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1ace8:	d1282715 	stw	r4,-24420(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1acec:	d1681a45 	stb	r5,-24471(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1acf0:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1acf4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1acf8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1acfc:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1ad00:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1ad04:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1ad08:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1ad0c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1ad10:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1ad14:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1ad18:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1ad1c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1ad20:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1ad24:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1ad28:	f800283a 	ret

0001ad2c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1ad2c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1ad30:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1ad34:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1ad38:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1ad3c:	001af140 	call	1af14 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1ad40:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1ad44:	d4a81845 	stb	r18,-24479(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1ad48:	003fe506 	br	1ace0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ace0>

0001ad4c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1ad4c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1ad50:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1ad54:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1ad58:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1ad5c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1ad60:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1ad64:	dec00204 	addi	sp,sp,8

      callr r2
   1ad68:	103ee83a 	callr	r2

      nop
   1ad6c:	0001883a 	nop

0001ad70 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1ad70:	defff704 	addi	sp,sp,-36
   1ad74:	dfc00815 	stw	ra,32(sp)
   1ad78:	df000715 	stw	fp,28(sp)
   1ad7c:	df000704 	addi	fp,sp,28
   1ad80:	e13ffc15 	stw	r4,-16(fp)
   1ad84:	e17ffd15 	stw	r5,-12(fp)
   1ad88:	e1bffe15 	stw	r6,-8(fp)
   1ad8c:	3805883a 	mov	r2,r7
   1ad90:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1ad94:	e0fffe17 	ldw	r3,-8(fp)
   1ad98:	00bfff04 	movi	r2,-4
   1ad9c:	1884703a 	and	r2,r3,r2
   1ada0:	10bef704 	addi	r2,r2,-1060
   1ada4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1ada8:	01810904 	movi	r6,1060
   1adac:	000b883a 	mov	r5,zero
   1adb0:	e13ff917 	ldw	r4,-28(fp)
   1adb4:	000a8b40 	call	a8b4 <memset>
   1adb8:	e0bff917 	ldw	r2,-28(fp)
   1adbc:	10c0bb04 	addi	r3,r2,748
   1adc0:	e0bff917 	ldw	r2,-28(fp)
   1adc4:	10c00115 	stw	r3,4(r2)
   1adc8:	e0bff917 	ldw	r2,-28(fp)
   1adcc:	10c0d504 	addi	r3,r2,852
   1add0:	e0bff917 	ldw	r2,-28(fp)
   1add4:	10c00215 	stw	r3,8(r2)
   1add8:	e0bff917 	ldw	r2,-28(fp)
   1addc:	10c0ef04 	addi	r3,r2,956
   1ade0:	e0bff917 	ldw	r2,-28(fp)
   1ade4:	10c00315 	stw	r3,12(r2)
   1ade8:	e0fff917 	ldw	r3,-28(fp)
   1adec:	008000b4 	movhi	r2,2
   1adf0:	10af8b04 	addi	r2,r2,-16852
   1adf4:	18800d15 	stw	r2,52(r3)
   1adf8:	e0bff917 	ldw	r2,-28(fp)
   1adfc:	00c00044 	movi	r3,1
   1ae00:	10c02915 	stw	r3,164(r2)
   1ae04:	10002a15 	stw	zero,168(r2)
   1ae08:	e0bff917 	ldw	r2,-28(fp)
   1ae0c:	00ccc384 	movi	r3,13070
   1ae10:	10c02b0d 	sth	r3,172(r2)
   1ae14:	e0bff917 	ldw	r2,-28(fp)
   1ae18:	00eaf344 	movi	r3,-21555
   1ae1c:	10c02b8d 	sth	r3,174(r2)
   1ae20:	e0bff917 	ldw	r2,-28(fp)
   1ae24:	00c48d04 	movi	r3,4660
   1ae28:	10c02c0d 	sth	r3,176(r2)
   1ae2c:	e0bff917 	ldw	r2,-28(fp)
   1ae30:	00f99b44 	movi	r3,-6547
   1ae34:	10c02c8d 	sth	r3,178(r2)
   1ae38:	e0bff917 	ldw	r2,-28(fp)
   1ae3c:	00f7bb04 	movi	r3,-8468
   1ae40:	10c02d0d 	sth	r3,180(r2)
   1ae44:	e0bff917 	ldw	r2,-28(fp)
   1ae48:	00c00144 	movi	r3,5
   1ae4c:	10c02d8d 	sth	r3,182(r2)
   1ae50:	e0bff917 	ldw	r2,-28(fp)
   1ae54:	00c002c4 	movi	r3,11
   1ae58:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1ae5c:	e0bff917 	ldw	r2,-28(fp)
   1ae60:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1ae64:	e0bffa17 	ldw	r2,-24(fp)
   1ae68:	10bff304 	addi	r2,r2,-52
   1ae6c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1ae70:	e0bffb17 	ldw	r2,-20(fp)
   1ae74:	10800c04 	addi	r2,r2,48
   1ae78:	e0fffc17 	ldw	r3,-16(fp)
   1ae7c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1ae80:	e0bffb17 	ldw	r2,-20(fp)
   1ae84:	10800b04 	addi	r2,r2,44
   1ae88:	e0fffd17 	ldw	r3,-12(fp)
   1ae8c:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1ae90:	e0bffb17 	ldw	r2,-20(fp)
   1ae94:	10800a04 	addi	r2,r2,40
   1ae98:	e0fff917 	ldw	r3,-28(fp)
   1ae9c:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1aea0:	008000b4 	movhi	r2,2
   1aea4:	10ab5304 	addi	r2,r2,-21172
   1aea8:	10c00104 	addi	r3,r2,4
   1aeac:	e0bffb17 	ldw	r2,-20(fp)
   1aeb0:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1aeb4:	e0bffb17 	ldw	r2,-20(fp)
}
   1aeb8:	e037883a 	mov	sp,fp
   1aebc:	dfc00117 	ldw	ra,4(sp)
   1aec0:	df000017 	ldw	fp,0(sp)
   1aec4:	dec00204 	addi	sp,sp,8
   1aec8:	f800283a 	ret

0001aecc <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1aecc:	defffe04 	addi	sp,sp,-8
   1aed0:	df000115 	stw	fp,4(sp)
   1aed4:	df000104 	addi	fp,sp,4
   1aed8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1aedc:	0001883a 	nop
   1aee0:	e037883a 	mov	sp,fp
   1aee4:	df000017 	ldw	fp,0(sp)
   1aee8:	dec00104 	addi	sp,sp,4
   1aeec:	f800283a 	ret

0001aef0 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1aef0:	defffe04 	addi	sp,sp,-8
   1aef4:	df000115 	stw	fp,4(sp)
   1aef8:	df000104 	addi	fp,sp,4
   1aefc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1af00:	0001883a 	nop
   1af04:	e037883a 	mov	sp,fp
   1af08:	df000017 	ldw	fp,0(sp)
   1af0c:	dec00104 	addi	sp,sp,4
   1af10:	f800283a 	ret

0001af14 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1af14:	deffff04 	addi	sp,sp,-4
   1af18:	df000015 	stw	fp,0(sp)
   1af1c:	d839883a 	mov	fp,sp
}
   1af20:	0001883a 	nop
   1af24:	e037883a 	mov	sp,fp
   1af28:	df000017 	ldw	fp,0(sp)
   1af2c:	dec00104 	addi	sp,sp,4
   1af30:	f800283a 	ret

0001af34 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1af34:	deffff04 	addi	sp,sp,-4
   1af38:	df000015 	stw	fp,0(sp)
   1af3c:	d839883a 	mov	fp,sp
}
   1af40:	0001883a 	nop
   1af44:	e037883a 	mov	sp,fp
   1af48:	df000017 	ldw	fp,0(sp)
   1af4c:	dec00104 	addi	sp,sp,4
   1af50:	f800283a 	ret

0001af54 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1af54:	deffff04 	addi	sp,sp,-4
   1af58:	df000015 	stw	fp,0(sp)
   1af5c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1af60:	0001883a 	nop
   1af64:	e037883a 	mov	sp,fp
   1af68:	df000017 	ldw	fp,0(sp)
   1af6c:	dec00104 	addi	sp,sp,4
   1af70:	f800283a 	ret

0001af74 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1af74:	deffff04 	addi	sp,sp,-4
   1af78:	df000015 	stw	fp,0(sp)
   1af7c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1af80:	0001883a 	nop
   1af84:	e037883a 	mov	sp,fp
   1af88:	df000017 	ldw	fp,0(sp)
   1af8c:	dec00104 	addi	sp,sp,4
   1af90:	f800283a 	ret

0001af94 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1af94:	deffff04 	addi	sp,sp,-4
   1af98:	df000015 	stw	fp,0(sp)
   1af9c:	d839883a 	mov	fp,sp
}
   1afa0:	0001883a 	nop
   1afa4:	e037883a 	mov	sp,fp
   1afa8:	df000017 	ldw	fp,0(sp)
   1afac:	dec00104 	addi	sp,sp,4
   1afb0:	f800283a 	ret

0001afb4 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1afb4:	deffff04 	addi	sp,sp,-4
   1afb8:	df000015 	stw	fp,0(sp)
   1afbc:	d839883a 	mov	fp,sp
}
   1afc0:	0001883a 	nop
   1afc4:	e037883a 	mov	sp,fp
   1afc8:	df000017 	ldw	fp,0(sp)
   1afcc:	dec00104 	addi	sp,sp,4
   1afd0:	f800283a 	ret

0001afd4 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1afd4:	defffe04 	addi	sp,sp,-8
   1afd8:	df000115 	stw	fp,4(sp)
   1afdc:	df000104 	addi	fp,sp,4
   1afe0:	e13fff15 	stw	r4,-4(fp)
}
   1afe4:	0001883a 	nop
   1afe8:	e037883a 	mov	sp,fp
   1afec:	df000017 	ldw	fp,0(sp)
   1aff0:	dec00104 	addi	sp,sp,4
   1aff4:	f800283a 	ret

0001aff8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1aff8:	defffb04 	addi	sp,sp,-20
   1affc:	dfc00415 	stw	ra,16(sp)
   1b000:	df000315 	stw	fp,12(sp)
   1b004:	df000304 	addi	fp,sp,12
   1b008:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1b00c:	d0a00617 	ldw	r2,-32744(gp)
   1b010:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1b014:	00003106 	br	1b0dc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1b018:	e0bffd17 	ldw	r2,-12(fp)
   1b01c:	10800217 	ldw	r2,8(r2)
   1b020:	1009883a 	mov	r4,r2
   1b024:	000bcb80 	call	bcb8 <strlen>
   1b028:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1b02c:	e0bffd17 	ldw	r2,-12(fp)
   1b030:	10c00217 	ldw	r3,8(r2)
   1b034:	e0bffe17 	ldw	r2,-8(fp)
   1b038:	10bfffc4 	addi	r2,r2,-1
   1b03c:	1885883a 	add	r2,r3,r2
   1b040:	10800003 	ldbu	r2,0(r2)
   1b044:	10803fcc 	andi	r2,r2,255
   1b048:	1080201c 	xori	r2,r2,128
   1b04c:	10bfe004 	addi	r2,r2,-128
   1b050:	10800bd8 	cmpnei	r2,r2,47
   1b054:	1000031e 	bne	r2,zero,1b064 <alt_find_file+0x6c>
    {
      len -= 1;
   1b058:	e0bffe17 	ldw	r2,-8(fp)
   1b05c:	10bfffc4 	addi	r2,r2,-1
   1b060:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1b064:	e0bffe17 	ldw	r2,-8(fp)
   1b068:	e0ffff17 	ldw	r3,-4(fp)
   1b06c:	1885883a 	add	r2,r3,r2
   1b070:	10800003 	ldbu	r2,0(r2)
   1b074:	10803fcc 	andi	r2,r2,255
   1b078:	1080201c 	xori	r2,r2,128
   1b07c:	10bfe004 	addi	r2,r2,-128
   1b080:	10800be0 	cmpeqi	r2,r2,47
   1b084:	1000081e 	bne	r2,zero,1b0a8 <alt_find_file+0xb0>
   1b088:	e0bffe17 	ldw	r2,-8(fp)
   1b08c:	e0ffff17 	ldw	r3,-4(fp)
   1b090:	1885883a 	add	r2,r3,r2
   1b094:	10800003 	ldbu	r2,0(r2)
   1b098:	10803fcc 	andi	r2,r2,255
   1b09c:	1080201c 	xori	r2,r2,128
   1b0a0:	10bfe004 	addi	r2,r2,-128
   1b0a4:	10000a1e 	bne	r2,zero,1b0d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1b0a8:	e0bffd17 	ldw	r2,-12(fp)
   1b0ac:	10800217 	ldw	r2,8(r2)
   1b0b0:	e0fffe17 	ldw	r3,-8(fp)
   1b0b4:	180d883a 	mov	r6,r3
   1b0b8:	e17fff17 	ldw	r5,-4(fp)
   1b0bc:	1009883a 	mov	r4,r2
   1b0c0:	001b3540 	call	1b354 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1b0c4:	1000021e 	bne	r2,zero,1b0d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1b0c8:	e0bffd17 	ldw	r2,-12(fp)
   1b0cc:	00000706 	br	1b0ec <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1b0d0:	e0bffd17 	ldw	r2,-12(fp)
   1b0d4:	10800017 	ldw	r2,0(r2)
   1b0d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1b0dc:	e0fffd17 	ldw	r3,-12(fp)
   1b0e0:	d0a00604 	addi	r2,gp,-32744
   1b0e4:	18bfcc1e 	bne	r3,r2,1b018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b018>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1b0e8:	0005883a 	mov	r2,zero
}
   1b0ec:	e037883a 	mov	sp,fp
   1b0f0:	dfc00117 	ldw	ra,4(sp)
   1b0f4:	df000017 	ldw	fp,0(sp)
   1b0f8:	dec00204 	addi	sp,sp,8
   1b0fc:	f800283a 	ret

0001b100 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1b100:	defff904 	addi	sp,sp,-28
   1b104:	dfc00615 	stw	ra,24(sp)
   1b108:	df000515 	stw	fp,20(sp)
   1b10c:	df000504 	addi	fp,sp,20
   1b110:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1b114:	00bffa04 	movi	r2,-24
   1b118:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1b11c:	d0a81017 	ldw	r2,-24512(gp)
   1b120:	e0bffd15 	stw	r2,-12(fp)
   1b124:	e03ffe0d 	sth	zero,-8(fp)
   1b128:	e0bffe0b 	ldhu	r2,-8(fp)
   1b12c:	e0fffe84 	addi	r3,fp,-6
   1b130:	180d883a 	mov	r6,r3
   1b134:	100b883a 	mov	r5,r2
   1b138:	e13ffd17 	ldw	r4,-12(fp)
   1b13c:	00155c80 	call	155c8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1b140:	e03ffb15 	stw	zero,-20(fp)
   1b144:	00001906 	br	1b1ac <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1b148:	008000b4 	movhi	r2,2
   1b14c:	10b1bf04 	addi	r2,r2,-14596
   1b150:	e0fffb17 	ldw	r3,-20(fp)
   1b154:	18c00324 	muli	r3,r3,12
   1b158:	10c5883a 	add	r2,r2,r3
   1b15c:	10800017 	ldw	r2,0(r2)
   1b160:	10000f1e 	bne	r2,zero,1b1a0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1b164:	008000b4 	movhi	r2,2
   1b168:	10b1bf04 	addi	r2,r2,-14596
   1b16c:	e0fffb17 	ldw	r3,-20(fp)
   1b170:	18c00324 	muli	r3,r3,12
   1b174:	10c5883a 	add	r2,r2,r3
   1b178:	e0ffff17 	ldw	r3,-4(fp)
   1b17c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1b180:	d0e00a17 	ldw	r3,-32728(gp)
   1b184:	e0bffb17 	ldw	r2,-20(fp)
   1b188:	1880020e 	bge	r3,r2,1b194 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1b18c:	e0bffb17 	ldw	r2,-20(fp)
   1b190:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   1b194:	e0bffb17 	ldw	r2,-20(fp)
   1b198:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1b19c:	00000606 	br	1b1b8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1b1a0:	e0bffb17 	ldw	r2,-20(fp)
   1b1a4:	10800044 	addi	r2,r2,1
   1b1a8:	e0bffb15 	stw	r2,-20(fp)
   1b1ac:	e0bffb17 	ldw	r2,-20(fp)
   1b1b0:	10800810 	cmplti	r2,r2,32
   1b1b4:	103fe41e 	bne	r2,zero,1b148 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b148>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1b1b8:	d0a81017 	ldw	r2,-24512(gp)
   1b1bc:	1009883a 	mov	r4,r2
   1b1c0:	00159400 	call	15940 <OSSemPost>

  return rc;
   1b1c4:	e0bffc17 	ldw	r2,-16(fp)
}
   1b1c8:	e037883a 	mov	sp,fp
   1b1cc:	dfc00117 	ldw	ra,4(sp)
   1b1d0:	df000017 	ldw	fp,0(sp)
   1b1d4:	dec00204 	addi	sp,sp,8
   1b1d8:	f800283a 	ret

0001b1dc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1b1dc:	defffb04 	addi	sp,sp,-20
   1b1e0:	df000415 	stw	fp,16(sp)
   1b1e4:	df000404 	addi	fp,sp,16
   1b1e8:	e13ffe15 	stw	r4,-8(fp)
   1b1ec:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1b1f0:	e0bfff17 	ldw	r2,-4(fp)
   1b1f4:	10840070 	cmpltui	r2,r2,4097
   1b1f8:	1000021e 	bne	r2,zero,1b204 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1b1fc:	00840004 	movi	r2,4096
   1b200:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1b204:	e0fffe17 	ldw	r3,-8(fp)
   1b208:	e0bfff17 	ldw	r2,-4(fp)
   1b20c:	1885883a 	add	r2,r3,r2
   1b210:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1b214:	e0bffe17 	ldw	r2,-8(fp)
   1b218:	e0bffc15 	stw	r2,-16(fp)
   1b21c:	00000506 	br	1b234 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1b220:	e0bffc17 	ldw	r2,-16(fp)
   1b224:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1b228:	e0bffc17 	ldw	r2,-16(fp)
   1b22c:	10800804 	addi	r2,r2,32
   1b230:	e0bffc15 	stw	r2,-16(fp)
   1b234:	e0fffc17 	ldw	r3,-16(fp)
   1b238:	e0bffd17 	ldw	r2,-12(fp)
   1b23c:	18bff836 	bltu	r3,r2,1b220 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b220>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1b240:	e0bffe17 	ldw	r2,-8(fp)
   1b244:	108007cc 	andi	r2,r2,31
   1b248:	10000226 	beq	r2,zero,1b254 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1b24c:	e0bffc17 	ldw	r2,-16(fp)
   1b250:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1b254:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1b258:	0001883a 	nop
   1b25c:	e037883a 	mov	sp,fp
   1b260:	df000017 	ldw	fp,0(sp)
   1b264:	dec00104 	addi	sp,sp,4
   1b268:	f800283a 	ret

0001b26c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1b26c:	defffe04 	addi	sp,sp,-8
   1b270:	df000115 	stw	fp,4(sp)
   1b274:	df000104 	addi	fp,sp,4
   1b278:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1b27c:	e0bfff17 	ldw	r2,-4(fp)
   1b280:	10bffe84 	addi	r2,r2,-6
   1b284:	10c00428 	cmpgeui	r3,r2,16
   1b288:	18001a1e 	bne	r3,zero,1b2f4 <alt_exception_cause_generated_bad_addr+0x88>
   1b28c:	100690ba 	slli	r3,r2,2
   1b290:	008000b4 	movhi	r2,2
   1b294:	10aca904 	addi	r2,r2,-19804
   1b298:	1885883a 	add	r2,r3,r2
   1b29c:	10800017 	ldw	r2,0(r2)
   1b2a0:	1000683a 	jmp	r2
   1b2a4:	0001b2e4 	muli	zero,zero,1739
   1b2a8:	0001b2e4 	muli	zero,zero,1739
   1b2ac:	0001b2f4 	movhi	zero,1739
   1b2b0:	0001b2f4 	movhi	zero,1739
   1b2b4:	0001b2f4 	movhi	zero,1739
   1b2b8:	0001b2e4 	muli	zero,zero,1739
   1b2bc:	0001b2ec 	andhi	zero,zero,1739
   1b2c0:	0001b2f4 	movhi	zero,1739
   1b2c4:	0001b2e4 	muli	zero,zero,1739
   1b2c8:	0001b2e4 	muli	zero,zero,1739
   1b2cc:	0001b2f4 	movhi	zero,1739
   1b2d0:	0001b2e4 	muli	zero,zero,1739
   1b2d4:	0001b2ec 	andhi	zero,zero,1739
   1b2d8:	0001b2f4 	movhi	zero,1739
   1b2dc:	0001b2f4 	movhi	zero,1739
   1b2e0:	0001b2e4 	muli	zero,zero,1739
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1b2e4:	00800044 	movi	r2,1
   1b2e8:	00000306 	br	1b2f8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1b2ec:	0005883a 	mov	r2,zero
   1b2f0:	00000106 	br	1b2f8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1b2f4:	0005883a 	mov	r2,zero
  }
}
   1b2f8:	e037883a 	mov	sp,fp
   1b2fc:	df000017 	ldw	fp,0(sp)
   1b300:	dec00104 	addi	sp,sp,4
   1b304:	f800283a 	ret

0001b308 <atexit>:
   1b308:	200b883a 	mov	r5,r4
   1b30c:	000f883a 	mov	r7,zero
   1b310:	000d883a 	mov	r6,zero
   1b314:	0009883a 	mov	r4,zero
   1b318:	001b3d01 	jmpi	1b3d0 <__register_exitproc>

0001b31c <exit>:
   1b31c:	defffe04 	addi	sp,sp,-8
   1b320:	000b883a 	mov	r5,zero
   1b324:	dc000015 	stw	r16,0(sp)
   1b328:	dfc00115 	stw	ra,4(sp)
   1b32c:	2021883a 	mov	r16,r4
   1b330:	001b4e80 	call	1b4e8 <__call_exitprocs>
   1b334:	008000b4 	movhi	r2,2
   1b338:	10b73704 	addi	r2,r2,-8996
   1b33c:	11000017 	ldw	r4,0(r2)
   1b340:	20800f17 	ldw	r2,60(r4)
   1b344:	10000126 	beq	r2,zero,1b34c <exit+0x30>
   1b348:	103ee83a 	callr	r2
   1b34c:	8009883a 	mov	r4,r16
   1b350:	001b6680 	call	1b668 <_exit>

0001b354 <memcmp>:
   1b354:	01c000c4 	movi	r7,3
   1b358:	3980192e 	bgeu	r7,r6,1b3c0 <memcmp+0x6c>
   1b35c:	2144b03a 	or	r2,r4,r5
   1b360:	11c4703a 	and	r2,r2,r7
   1b364:	10000f26 	beq	r2,zero,1b3a4 <memcmp+0x50>
   1b368:	20800003 	ldbu	r2,0(r4)
   1b36c:	28c00003 	ldbu	r3,0(r5)
   1b370:	10c0151e 	bne	r2,r3,1b3c8 <memcmp+0x74>
   1b374:	31bfff84 	addi	r6,r6,-2
   1b378:	01ffffc4 	movi	r7,-1
   1b37c:	00000406 	br	1b390 <memcmp+0x3c>
   1b380:	20800003 	ldbu	r2,0(r4)
   1b384:	28c00003 	ldbu	r3,0(r5)
   1b388:	31bfffc4 	addi	r6,r6,-1
   1b38c:	10c00e1e 	bne	r2,r3,1b3c8 <memcmp+0x74>
   1b390:	21000044 	addi	r4,r4,1
   1b394:	29400044 	addi	r5,r5,1
   1b398:	31fff91e 	bne	r6,r7,1b380 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b380>
   1b39c:	0005883a 	mov	r2,zero
   1b3a0:	f800283a 	ret
   1b3a4:	20c00017 	ldw	r3,0(r4)
   1b3a8:	28800017 	ldw	r2,0(r5)
   1b3ac:	18bfee1e 	bne	r3,r2,1b368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b368>
   1b3b0:	31bfff04 	addi	r6,r6,-4
   1b3b4:	21000104 	addi	r4,r4,4
   1b3b8:	29400104 	addi	r5,r5,4
   1b3bc:	39bff936 	bltu	r7,r6,1b3a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b3a4>
   1b3c0:	303fe91e 	bne	r6,zero,1b368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b368>
   1b3c4:	003ff506 	br	1b39c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b39c>
   1b3c8:	10c5c83a 	sub	r2,r2,r3
   1b3cc:	f800283a 	ret

0001b3d0 <__register_exitproc>:
   1b3d0:	defffa04 	addi	sp,sp,-24
   1b3d4:	dc000315 	stw	r16,12(sp)
   1b3d8:	040000b4 	movhi	r16,2
   1b3dc:	84373704 	addi	r16,r16,-8996
   1b3e0:	80c00017 	ldw	r3,0(r16)
   1b3e4:	dc400415 	stw	r17,16(sp)
   1b3e8:	dfc00515 	stw	ra,20(sp)
   1b3ec:	18805217 	ldw	r2,328(r3)
   1b3f0:	2023883a 	mov	r17,r4
   1b3f4:	10003726 	beq	r2,zero,1b4d4 <__register_exitproc+0x104>
   1b3f8:	10c00117 	ldw	r3,4(r2)
   1b3fc:	010007c4 	movi	r4,31
   1b400:	20c00e16 	blt	r4,r3,1b43c <__register_exitproc+0x6c>
   1b404:	1a000044 	addi	r8,r3,1
   1b408:	8800221e 	bne	r17,zero,1b494 <__register_exitproc+0xc4>
   1b40c:	18c00084 	addi	r3,r3,2
   1b410:	18c7883a 	add	r3,r3,r3
   1b414:	18c7883a 	add	r3,r3,r3
   1b418:	12000115 	stw	r8,4(r2)
   1b41c:	10c7883a 	add	r3,r2,r3
   1b420:	19400015 	stw	r5,0(r3)
   1b424:	0005883a 	mov	r2,zero
   1b428:	dfc00517 	ldw	ra,20(sp)
   1b42c:	dc400417 	ldw	r17,16(sp)
   1b430:	dc000317 	ldw	r16,12(sp)
   1b434:	dec00604 	addi	sp,sp,24
   1b438:	f800283a 	ret
   1b43c:	00800034 	movhi	r2,0
   1b440:	10800004 	addi	r2,r2,0
   1b444:	10002626 	beq	r2,zero,1b4e0 <__register_exitproc+0x110>
   1b448:	01006404 	movi	r4,400
   1b44c:	d9400015 	stw	r5,0(sp)
   1b450:	d9800115 	stw	r6,4(sp)
   1b454:	d9c00215 	stw	r7,8(sp)
   1b458:	00000000 	call	0 <__reset>
   1b45c:	d9400017 	ldw	r5,0(sp)
   1b460:	d9800117 	ldw	r6,4(sp)
   1b464:	d9c00217 	ldw	r7,8(sp)
   1b468:	10001d26 	beq	r2,zero,1b4e0 <__register_exitproc+0x110>
   1b46c:	81000017 	ldw	r4,0(r16)
   1b470:	10000115 	stw	zero,4(r2)
   1b474:	02000044 	movi	r8,1
   1b478:	22405217 	ldw	r9,328(r4)
   1b47c:	0007883a 	mov	r3,zero
   1b480:	12400015 	stw	r9,0(r2)
   1b484:	20805215 	stw	r2,328(r4)
   1b488:	10006215 	stw	zero,392(r2)
   1b48c:	10006315 	stw	zero,396(r2)
   1b490:	883fde26 	beq	r17,zero,1b40c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b40c>
   1b494:	18c9883a 	add	r4,r3,r3
   1b498:	2109883a 	add	r4,r4,r4
   1b49c:	1109883a 	add	r4,r2,r4
   1b4a0:	21802215 	stw	r6,136(r4)
   1b4a4:	01800044 	movi	r6,1
   1b4a8:	12406217 	ldw	r9,392(r2)
   1b4ac:	30cc983a 	sll	r6,r6,r3
   1b4b0:	4992b03a 	or	r9,r9,r6
   1b4b4:	12406215 	stw	r9,392(r2)
   1b4b8:	21c04215 	stw	r7,264(r4)
   1b4bc:	01000084 	movi	r4,2
   1b4c0:	893fd21e 	bne	r17,r4,1b40c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b40c>
   1b4c4:	11006317 	ldw	r4,396(r2)
   1b4c8:	218cb03a 	or	r6,r4,r6
   1b4cc:	11806315 	stw	r6,396(r2)
   1b4d0:	003fce06 	br	1b40c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b40c>
   1b4d4:	18805304 	addi	r2,r3,332
   1b4d8:	18805215 	stw	r2,328(r3)
   1b4dc:	003fc606 	br	1b3f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b3f8>
   1b4e0:	00bfffc4 	movi	r2,-1
   1b4e4:	003fd006 	br	1b428 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b428>

0001b4e8 <__call_exitprocs>:
   1b4e8:	defff504 	addi	sp,sp,-44
   1b4ec:	df000915 	stw	fp,36(sp)
   1b4f0:	dd400615 	stw	r21,24(sp)
   1b4f4:	dc800315 	stw	r18,12(sp)
   1b4f8:	dfc00a15 	stw	ra,40(sp)
   1b4fc:	ddc00815 	stw	r23,32(sp)
   1b500:	dd800715 	stw	r22,28(sp)
   1b504:	dd000515 	stw	r20,20(sp)
   1b508:	dcc00415 	stw	r19,16(sp)
   1b50c:	dc400215 	stw	r17,8(sp)
   1b510:	dc000115 	stw	r16,4(sp)
   1b514:	d9000015 	stw	r4,0(sp)
   1b518:	2839883a 	mov	fp,r5
   1b51c:	04800044 	movi	r18,1
   1b520:	057fffc4 	movi	r21,-1
   1b524:	008000b4 	movhi	r2,2
   1b528:	10b73704 	addi	r2,r2,-8996
   1b52c:	12000017 	ldw	r8,0(r2)
   1b530:	45005217 	ldw	r20,328(r8)
   1b534:	44c05204 	addi	r19,r8,328
   1b538:	a0001c26 	beq	r20,zero,1b5ac <__call_exitprocs+0xc4>
   1b53c:	a0800117 	ldw	r2,4(r20)
   1b540:	15ffffc4 	addi	r23,r2,-1
   1b544:	b8000d16 	blt	r23,zero,1b57c <__call_exitprocs+0x94>
   1b548:	14000044 	addi	r16,r2,1
   1b54c:	8421883a 	add	r16,r16,r16
   1b550:	8421883a 	add	r16,r16,r16
   1b554:	84402004 	addi	r17,r16,128
   1b558:	a463883a 	add	r17,r20,r17
   1b55c:	a421883a 	add	r16,r20,r16
   1b560:	e0001e26 	beq	fp,zero,1b5dc <__call_exitprocs+0xf4>
   1b564:	80804017 	ldw	r2,256(r16)
   1b568:	e0801c26 	beq	fp,r2,1b5dc <__call_exitprocs+0xf4>
   1b56c:	bdffffc4 	addi	r23,r23,-1
   1b570:	843fff04 	addi	r16,r16,-4
   1b574:	8c7fff04 	addi	r17,r17,-4
   1b578:	bd7ff91e 	bne	r23,r21,1b560 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b560>
   1b57c:	00800034 	movhi	r2,0
   1b580:	10800004 	addi	r2,r2,0
   1b584:	10000926 	beq	r2,zero,1b5ac <__call_exitprocs+0xc4>
   1b588:	a0800117 	ldw	r2,4(r20)
   1b58c:	1000301e 	bne	r2,zero,1b650 <__call_exitprocs+0x168>
   1b590:	a0800017 	ldw	r2,0(r20)
   1b594:	10003226 	beq	r2,zero,1b660 <__call_exitprocs+0x178>
   1b598:	a009883a 	mov	r4,r20
   1b59c:	98800015 	stw	r2,0(r19)
   1b5a0:	00000000 	call	0 <__reset>
   1b5a4:	9d000017 	ldw	r20,0(r19)
   1b5a8:	a03fe41e 	bne	r20,zero,1b53c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b53c>
   1b5ac:	dfc00a17 	ldw	ra,40(sp)
   1b5b0:	df000917 	ldw	fp,36(sp)
   1b5b4:	ddc00817 	ldw	r23,32(sp)
   1b5b8:	dd800717 	ldw	r22,28(sp)
   1b5bc:	dd400617 	ldw	r21,24(sp)
   1b5c0:	dd000517 	ldw	r20,20(sp)
   1b5c4:	dcc00417 	ldw	r19,16(sp)
   1b5c8:	dc800317 	ldw	r18,12(sp)
   1b5cc:	dc400217 	ldw	r17,8(sp)
   1b5d0:	dc000117 	ldw	r16,4(sp)
   1b5d4:	dec00b04 	addi	sp,sp,44
   1b5d8:	f800283a 	ret
   1b5dc:	a0800117 	ldw	r2,4(r20)
   1b5e0:	80c00017 	ldw	r3,0(r16)
   1b5e4:	10bfffc4 	addi	r2,r2,-1
   1b5e8:	15c01426 	beq	r2,r23,1b63c <__call_exitprocs+0x154>
   1b5ec:	80000015 	stw	zero,0(r16)
   1b5f0:	183fde26 	beq	r3,zero,1b56c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b56c>
   1b5f4:	95c8983a 	sll	r4,r18,r23
   1b5f8:	a0806217 	ldw	r2,392(r20)
   1b5fc:	a5800117 	ldw	r22,4(r20)
   1b600:	2084703a 	and	r2,r4,r2
   1b604:	10000b26 	beq	r2,zero,1b634 <__call_exitprocs+0x14c>
   1b608:	a0806317 	ldw	r2,396(r20)
   1b60c:	2088703a 	and	r4,r4,r2
   1b610:	20000c1e 	bne	r4,zero,1b644 <__call_exitprocs+0x15c>
   1b614:	89400017 	ldw	r5,0(r17)
   1b618:	d9000017 	ldw	r4,0(sp)
   1b61c:	183ee83a 	callr	r3
   1b620:	a0800117 	ldw	r2,4(r20)
   1b624:	15bfbf1e 	bne	r2,r22,1b524 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b524>
   1b628:	98800017 	ldw	r2,0(r19)
   1b62c:	153fcf26 	beq	r2,r20,1b56c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b56c>
   1b630:	003fbc06 	br	1b524 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b524>
   1b634:	183ee83a 	callr	r3
   1b638:	003ff906 	br	1b620 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b620>
   1b63c:	a5c00115 	stw	r23,4(r20)
   1b640:	003feb06 	br	1b5f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b5f0>
   1b644:	89000017 	ldw	r4,0(r17)
   1b648:	183ee83a 	callr	r3
   1b64c:	003ff406 	br	1b620 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b620>
   1b650:	a0800017 	ldw	r2,0(r20)
   1b654:	a027883a 	mov	r19,r20
   1b658:	1029883a 	mov	r20,r2
   1b65c:	003fb606 	br	1b538 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b538>
   1b660:	0005883a 	mov	r2,zero
   1b664:	003ffb06 	br	1b654 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b654>

0001b668 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1b668:	defffd04 	addi	sp,sp,-12
   1b66c:	df000215 	stw	fp,8(sp)
   1b670:	df000204 	addi	fp,sp,8
   1b674:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1b678:	d0281845 	stb	zero,-24479(gp)
   1b67c:	e0bfff17 	ldw	r2,-4(fp)
   1b680:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1b684:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1b688:	10000226 	beq	r2,zero,1b694 <_exit+0x2c>
    ALT_SIM_FAIL();
   1b68c:	002af070 	cmpltui	zero,zero,43969
   1b690:	00000106 	br	1b698 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1b694:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1b698:	003fff06 	br	1b698 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b698>
