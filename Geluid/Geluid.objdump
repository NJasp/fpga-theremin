
Geluid.elf:     file format elf32-littlenios2
Geluid.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001bd7c memsz 0x0001bd7c flags r-x
    LOAD off    0x0001cd9c vaddr 0x0001bd9c paddr 0x0001dd04 align 2**12
         filesz 0x00001f68 memsz 0x00001f68 flags rw-
    LOAD off    0x0001fc6c vaddr 0x0001fc6c paddr 0x0001fc6c align 2**12
         filesz 0x00000000 memsz 0x000033e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b3c0  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000794  0001b608  0001b608  0001c608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f68  0001bd9c  0001dd04  0001cd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000033e8  0001fc6c  0001fc6c  0001fc6c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00023054  00023054  0001ed04  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  0001ed04  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001ed04  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011f0  00000000  00000000  0001ed28  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002fb89  00000000  00000000  0001ff18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b9a0  00000000  00000000  0004faa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f71d  00000000  00000000  0005b441  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003abc  00000000  00000000  0006ab60  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005848  00000000  00000000  0006e61c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00019e53  00000000  00000000  00073e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0008dcb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a28  00000000  00000000  0008dcd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00094e62  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00094e68  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00094e6d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00094e6e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00094e6f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00094e73  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00094e77  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00094e7b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00094e84  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00094e8d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00094e96  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000061  00000000  00000000  00094ea1  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abe3  00000000  00000000  00094f02  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001ae257  00000000  00000000  0009fae5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0001b608 l    d  .rodata	00000000 .rodata
0001bd9c l    d  .rwdata	00000000 .rwdata
0001fc6c l    d  .bss	00000000 .bss
00023054 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/Geluid_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0001b68c l     O .rodata	00000108 two_over_pi
0001b60c l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0001b7d4 l     O .rodata	00000010 init_jk
0001b794 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001b926 l     O .rodata	00000010 zeroes.4404
000074b4 l     F .text	000000bc __sbprintf
0001b936 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000076c4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000091f4 l     F .text	00000008 __fp_unlock
00009208 l     F .text	0000019c __sinit.part.1
000093a4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001bd9c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001c1e0 l     O .rwdata	00000020 lc_ctype_charset
0001c1c0 l     O .rwdata	00000020 lc_message_charset
0001c200 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001b968 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000bcbc l     F .text	000000fc __sprint_r.part.0
0001ba9c l     O .rodata	00000010 blanks.4348
0001ba8c l     O .rodata	00000010 zeroes.4349
0000d248 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f400 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f50c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f538 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f624 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f704 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f7f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f9bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001dc78 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000fc08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001dc7c l     O .rwdata	00000004 lockid
0001fc98 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001dc80 l     O .rwdata	00000004 lockid
0001fca0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00011638 l     F .text	00000048 OS_InitMisc
00011680 l     F .text	0000006c OS_InitRdyList
000117ec l     F .text	000000e4 OS_InitTCBList
00011558 l     F .text	000000e0 OS_InitEventList
000116ec l     F .text	00000080 OS_InitTaskIdle
0001176c l     F .text	00000080 OS_InitTaskStat
00011a5c l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0001377c l     F .text	000000f4 OS_FlagTaskRdy
0001353c l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001782c l     F .text	00000034 alt_dev_reg
0001c7e8 l     O .rwdata	0000106c JTAG_UART
0001d854 l     O .rwdata	00000030 AV_Config
0001d884 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001d8b4 l     O .rwdata	0000002c Char_LCD_16x2
0001d8e0 l     O .rwdata	0000002c IrDA
0001d90c l     O .rwdata	0000002c Expansion_JP5
0001d938 l     O .rwdata	0000002c Green_LEDs
0001d964 l     O .rwdata	0000002c HEX3_HEX0
0001d990 l     O .rwdata	0000002c HEX7_HEX4
0001d9bc l     O .rwdata	0000002c Pushbuttons
0001d9e8 l     O .rwdata	0000002c Red_LEDs
0001da14 l     O .rwdata	0000002c Slider_Switches
0001da40 l     O .rwdata	00000038 PS2_Port
0001da78 l     O .rwdata	00000038 PS2_Port_Dual
0001dab0 l     O .rwdata	0000002c Serial_Port
0001dadc l     O .rwdata	00000034 USB
0001db10 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
0001db6c l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
0001dbc8 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0001dc1c l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001834c l     F .text	000002a8 altera_avalon_jtag_uart_irq
000185f4 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00018dd0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001a2cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001a530 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001a7f0 l     F .text	0000003c alt_get_errno
0001a82c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001fd04 g     O .bss	00000004 alt_instruction_exception_handler
0000b7cc g     F .text	00000074 _mprec_log10
0001dcce g     O .rwdata	00000002 OSTaskNameSize
0000b8b8 g     F .text	0000008c __any_on
0000dca0 g     F .text	00000054 _isatty_r
0001b974 g     O .rodata	00000028 __mprec_tinytens
0000f900 g     F .text	000000bc alt_main
00022f54 g     O .bss	00000100 alt_irq
0001998c g     F .text	00000060 alt_up_ps2_disable_read_interrupt
000023b0 g     F .text	00000014 fabs
0000dcf4 g     F .text	00000060 _lseek_r
00013f9c g     F .text	000000cc OS_MemInit
0001dd04 g       *ABS*	00000000 __flash_rwdata_start
000177cc g     F .text	00000060 OSTimeSet
00018f34 g     F .text	00000040 alt_up_character_lcd_send_cmd
00003c44 g     F .text	00000088 .hidden __eqdf2
000102ac g     F .text	00000610 OSEventPendMulti
00023054 g       *ABS*	00000000 __alt_heap_start
0001ae38 g     F .text	00000024 OSTaskCreateHook
00005264 g     F .text	0000003c printf
0001dca6 g     O .rwdata	00000002 OSMboxEn
00010914 g     F .text	0000004c OSIntEnter
0000e5cc g     F .text	0000009c _wcrtomb_r
0000bae4 g     F .text	0000005c __sseek
00009544 g     F .text	00000010 __sinit
0000e474 g     F .text	00000140 __swbuf_r
000197a4 g     F .text	00000034 read_CE_bit
0001dcb6 g     O .rwdata	00000002 OSQEn
00009b50 g     F .text	0000007c _setlocale_r
000093ac g     F .text	00000068 __sfmoreglue
0000ff80 g     F .text	000000cc __malloc_unlock
0001aea0 g     F .text	00000020 OSTaskStatHook
00019b2c g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0001a020 g     F .text	00000090 alt_up_rs232_read_fd
0001fca8 g     O .bss	00000001 OSLockNesting
0001dcf4 g     O .rwdata	00000002 OSDataSize
0001fca9 g     O .bss	00000001 OSRunning
0000dd54 g     F .text	0000015c memmove
0001aee0 g     F .text	00000020 OSInitHookBegin
0001dcec g     O .rwdata	00000002 OSTmrSize
0000952c g     F .text	00000018 _cleanup
0000a948 g     F .text	000000a8 _Balloc
0000291c g     F .text	00000070 .hidden __fixsfsi
0001fcac g     O .bss	00000004 OSIdleCtr
00003ccc g     F .text	000000dc .hidden __gtdf2
0001abe8 g     F .text	00000024 altera_nios2_gen2_irq_init
0001acb8 g       .text	00000000 OSStartTsk
00018ec0 g     F .text	00000074 get_DDRAM_addr
00011d9c g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0001dcf2 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001dc92 g     O .rwdata	00000002 OSEventSize
0001fcb0 g     O .bss	00000001 OSPrioHighRdy
0000d788 g     F .text	0000005c _fstat_r
0001ae5c g     F .text	00000024 OSTaskDelHook
0001fc84 g     O .bss	00000004 errno
000023c4 g     F .text	000001ec floor
0000ba60 g     F .text	00000008 __seofread
0001ac98 g       .text	00000000 OSStartHighRdy
00016268 g     F .text	000001e4 OSTaskCreateExt
00013084 g     F .text	00000060 OSFlagPendGetFlagsRdy
0001dcd2 g     O .rwdata	00000002 OSTaskStatStkSize
00012200 g     F .text	00000308 OSFlagAccept
000145d4 g     F .text	000000b8 OSQFlush
00014068 g     F .text	00000140 OSQAccept
0001fc90 g     O .bss	00000004 alt_argv
00025c48 g       *ABS*	00000000 _gp
000160bc g     F .text	000001ac OSTaskCreate
00015bcc g     F .text	000004f0 OSTaskChangePrio
0001fca4 g     O .bss	00000004 alt_heapsem
00012070 g     F .text	00000190 OSDebugInit
0001644c g     F .text	00000344 OSTaskDel
0001c668 g     O .rwdata	00000180 alt_fd_list
0001fd30 g     O .bss	00000370 OSFlagTbl
00000744 g     F .text	0000076c __ieee754_rem_pio2
00011338 g     F .text	000000b8 OS_EventTaskRemove
0001a46c g     F .text	00000090 alt_find_dev
0000a6d8 g     F .text	00000148 memcpy
0001dcbc g     O .rwdata	00000002 OSRdyTblSize
000190dc g     F .text	00000050 alt_up_character_lcd_write_fd
000091fc g     F .text	0000000c _cleanup_r
00004e3c g     F .text	000000dc .hidden __floatsidf
0001a5f4 g     F .text	0000007c alt_io_redirect
0000f264 g     F .text	000000f4 .hidden __ltdf2
0001b608 g       *ABS*	00000000 __DTOR_END__
00019674 g     F .text	00000090 alt_up_irda_write_fd
00019fac g     F .text	00000074 alt_up_rs232_read_data
0001b1d8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0001004c g     F .text	00000120 OSEventNameGet
0001dca0 g     O .rwdata	00000002 OSFlagMax
0000b944 g     F .text	00000074 __fpclassifyd
0000b728 g     F .text	000000a4 __ratio
00010960 g     F .text	000000f8 OSIntExit
0000d22c g     F .text	0000001c __vfiprintf_internal
0001dcda g     O .rwdata	00000002 OSTCBSize
0001fcb1 g     O .bss	00000001 OSPrioCur
00019470 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00018850 g     F .text	000002bc altera_avalon_jtag_uart_read
00005234 g     F .text	00000030 _printf_r
00002860 g     F .text	00000064 .hidden __udivsi3
0000f660 g     F .text	000000a4 isatty
0001dcc0 g     O .rwdata	00000002 OSStkWidth
0001b9c4 g     O .rodata	000000c8 __mprec_tens
0001dcb4 g     O .rwdata	00000002 OSPtrSize
00009bcc g     F .text	0000000c __locale_charset
00000eb0 g     F .text	000004a4 __kernel_cos
0001dc94 g     O .rwdata	00000002 OSEventTblSize
00019410 g     F .text	00000060 alt_up_irda_disable_read_interrupt
0001ac0c g       .text	00000000 OSCtxSw
0001b148 g     F .text	00000090 alt_icache_flush
0001fc80 g     O .bss	00000004 __malloc_top_pad
0001fcb4 g     O .bss	00000004 OSTCBList
0001fc88 g     O .bss	00000004 alt_fd_list_lock
0001dc50 g     O .rwdata	00000004 __mb_cur_max
00009bfc g     F .text	0000000c _localeconv_r
0000d7e4 g     F .text	000004bc __sfvwrite_r
0000ad54 g     F .text	0000003c __i2b
000200a0 g     O .bss	00000c30 OSMemTbl
0001fcb8 g     O .bss	00000001 OSTickStepState
0000b9b8 g     F .text	00000054 _sbrk_r
0001dcb8 g     O .rwdata	00000002 OSQMax
00020cd0 g     O .bss	00000800 OSTaskStatStk
00013bd8 g     F .text	000000f0 OSMemNameGet
0001dc98 g     O .rwdata	00000002 OSFlagEn
0000deb0 g     F .text	00000060 _read_r
0001dcde g     O .rwdata	00000002 OSTimeTickHookEn
00014a84 g     F .text	00000168 OSQPost
00013870 g     F .text	000000a4 OS_FlagUnlink
0001dc70 g     O .rwdata	00000004 alt_max_fd
00019f28 g     F .text	00000044 alt_up_rs232_check_parity
00011924 g     F .text	00000068 OS_MemCopy
0001198c g     F .text	000000d0 OS_Sched
0000d47c g     F .text	000000f0 _fclose_r
00013ae8 g     F .text	000000f0 OSMemGet
00016a78 g     F .text	000001b4 OSTaskNameSet
000197d8 g     F .text	00000030 read_num_bytes_available
000091c4 g     F .text	00000030 fflush
0001fc7c g     O .bss	00000004 __malloc_max_sbrked_mem
0001fcbc g     O .bss	00000004 OSCtxSwCtr
0001aec0 g     F .text	00000020 OSTimeTickHook
0001a670 g     F .text	00000180 alt_irq_register
0001dca2 g     O .rwdata	00000002 OSFlagNameSize
00019740 g     F .text	00000034 read_RI_bit
000020e4 g     F .text	000002cc __kernel_sin
00004f18 g     F .text	00000110 .hidden __extendsfdf2
000113f0 g     F .text	00000100 OS_EventTaskRemoveMulti
00002ab0 g     F .text	000008ac .hidden __adddf3
000111e8 g     F .text	00000150 OS_EventTaskWaitMulti
0000b4d0 g     F .text	0000010c __b2d
0001dcba g     O .rwdata	00000002 OSQSize
0000ed2c g     F .text	00000538 .hidden __umoddi3
0000f82c g     F .text	000000d4 lseek
00015534 g     F .text	0000020c OSSemPend
0001dc48 g     O .rwdata	00000004 _global_impure_ptr
0000df10 g     F .text	00000564 _realloc_r
0001dca4 g     O .rwdata	00000002 OSLowestPrio
00023054 g       *ABS*	00000000 __bss_end
0001af40 g     F .text	00000024 OSTCBInitHook
0001dcea g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001aae0 g     F .text	00000108 alt_tick
0000e7b4 g     F .text	00000578 .hidden __udivdi3
0000d6e4 g     F .text	00000024 _fputwc_r
0001dc8c g     O .rwdata	00000002 OSEventEn
0001b99c g     O .rodata	00000028 __mprec_bigtens
0000ab38 g     F .text	00000104 __s2b
0001dce6 g     O .rwdata	00000002 OSTmrCfgNameSize
0000f358 g     F .text	000000a8 .hidden __floatunsidf
0000b210 g     F .text	00000060 __mcmp
0001983c g     F .text	0000002c read_data_byte
00009564 g     F .text	00000018 __fp_lock_all
00000588 g     F .text	000000cc check_KEYs
0001369c g     F .text	000000e0 OS_FlagInit
0001aa44 g     F .text	0000009c alt_alarm_stop
00019774 g     F .text	00000030 read_RE_bit
0001dcc8 g     O .rwdata	00000002 OSTaskIdleStkSize
0001fcf8 g     O .bss	00000004 alt_irq_active
0001516c g     F .text	000000b0 OSSemAccept
00013ddc g     F .text	000000d8 OSMemPut
00013914 g     F .text	000001d4 OSMemCreate
0001fcc0 g     O .bss	00000004 OSIdleCtrMax
000194b0 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
0001c640 g     O .rwdata	00000028 alt_dev_null
0001dcdc g     O .rwdata	00000002 OSTicksPerSec
00001354 g     F .text	00000d90 __kernel_rem_pio2
0001937c g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0001ac0c g       .text	00000000 OSIntCtxSw
000199ec g     F .text	00000074 alt_up_ps2_write_data_byte
0001a2ac g     F .text	00000020 alt_dcache_flush_all
0000ac3c g     F .text	00000068 __hi0bits
00004dbc g     F .text	00000080 .hidden __fixdfsi
0001fcc4 g     O .bss	00000004 OSTCBFreeList
0001dd04 g       *ABS*	00000000 __ram_rwdata_end
00015740 g     F .text	0000016c OSSemPendAbort
0001dc68 g     O .rwdata	00000008 alt_dev_list
0000fc44 g     F .text	000000f8 write
0001dce0 g     O .rwdata	00000002 OSVersionNbr
0001bd9c g       *ABS*	00000000 __ram_rodata_end
0000f574 g     F .text	000000b0 fstat
0001a0b0 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000f264 g     F .text	000000f4 .hidden __ledf2
0001dc88 g     O .rwdata	00000004 OSEndiannessTest
0000af88 g     F .text	00000140 __pow5mult
0000bdd0 g     F .text	0000145c ___vfiprintf_internal_r
0001fc74 g     O .bss	00000004 __nlocale_changed
000028c4 g     F .text	00000058 .hidden __umodsi3
0001dc9a g     O .rwdata	00000002 OSFlagGrpSize
00023054 g       *ABS*	00000000 end
00019d1c g     F .text	00000098 alt_up_ps2_write_fd
000194ec g     F .text	00000044 alt_up_irda_check_parity
00018210 g     F .text	0000013c altera_avalon_jtag_uart_init
00011bf4 g     F .text	000000dc OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0001b608 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00018e4c g     F .text	00000074 alt_avalon_timer_sc_init
000051d0 g     F .text	00000064 .hidden __clzsi2
00018b0c g     F .text	000002c4 altera_avalon_jtag_uart_write
00009554 g     F .text	00000004 __sfp_lock_acquire
0000a5f4 g     F .text	000000e4 memchr
000118d0 g     F .text	00000054 OS_MemClr
00018fe8 g     F .text	0000007c alt_up_character_lcd_write
000052a0 g     F .text	000021f8 ___vfprintf_internal_r
0001acdc g     F .text	0000015c OSTaskStkInit
000096b8 g     F .text	00000310 _free_r
00009bd8 g     F .text	00000010 __locale_mb_cur_max
00010f40 g     F .text	00000198 OS_EventTaskRdy
0001b454 g     F .text	00000180 __call_exitprocs
0001fcc8 g     O .bss	00000001 OSCPUUsage
0001fc70 g     O .bss	00000004 __mlocale_changed
0001dc54 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
0001fcfc g     O .bss	00000004 _alt_tick_rate
0001468c g     F .text	0000028c OSQPend
00000654 g     F .text	000000f0 sin
00017338 g     F .text	00000104 OSTimeDly
0000b0c8 g     F .text	00000148 __lshift
0001fd00 g     O .bss	00000004 _alt_nticks
0000f9f8 g     F .text	000000fc read
00017898 g     F .text	00000814 alt_sys_init
0001922c g     F .text	0000008c alt_up_character_lcd_shift_display
0000298c g     F .text	00000124 .hidden __floatsisf
0001b33c g     F .text	00000118 __register_exitproc
0001fcc9 g     O .bss	00000001 OSTaskCtr
00019c38 g     F .text	00000058 alt_up_ps2_clear_fifo
00019eec g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0001743c g     F .text	00000160 OSTimeDlyHMSM
0000ad90 g     F .text	000001f8 __multiply
000192b8 g     F .text	0000008c alt_up_character_lcd_erase_pos
000186f8 g     F .text	00000068 altera_avalon_jtag_uart_close
0001bd9c g       *ABS*	00000000 __ram_rwdata_start
0001b608 g       *ABS*	00000000 __ram_rodata_start
0001fd08 g     O .bss	00000028 __malloc_current_mallinfo
0001dc8e g     O .rwdata	00000002 OSEventMax
0000b5dc g     F .text	0000014c __d2b
000158ac g     F .text	00000110 OSSemPost
00010ae4 g     F .text	000000dc OSSchedUnlock
000180ac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001b06c g     F .text	000000dc alt_get_fd
0001fccc g     O .bss	00000004 OSMemFreeList
00010c30 g     F .text	000000b0 OSStatInit
00013478 g     F .text	000000c4 OSFlagQuery
0001dcc4 g     O .rwdata	00000002 OSTaskCreateExtEn
0000d364 g     F .text	00000054 _close_r
0001b2c0 g     F .text	0000007c memcmp
00010f20 g     F .text	00000020 OS_Dummy
0001816c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00023054 g       *ABS*	00000000 __alt_stack_base
000181bc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000193b4 g     F .text	0000005c alt_up_irda_enable_read_interrupt
00007570 g     F .text	00000154 __swsetup_r
000214d0 g     O .bss	000001e0 OSQTbl
0000335c g     F .text	000008e8 .hidden __divdf3
00009414 g     F .text	00000118 __sfp
0000b840 g     F .text	00000078 __copybits
0001c238 g     O .rwdata	00000408 __malloc_av_
00009560 g     F .text	00000004 __sinit_lock_release
0001fcd0 g     O .bss	00000004 OSTCBHighRdy
00003da8 g     F .text	00000718 .hidden __muldf3
0000ba0c g     F .text	00000054 __sread
0001fcd4 g     O .bss	00000004 OSQFreeList
00019e4c g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0001af64 g     F .text	00000108 alt_find_file
0001a308 g     F .text	000000a4 alt_dev_llist_insert
0000fe60 g     F .text	00000120 __malloc_lock
0000fb58 g     F .text	000000b0 sbrk
0001016c g     F .text	00000140 OSEventNameSet
00009168 g     F .text	0000005c _fflush_r
0000d3b8 g     F .text	000000c4 _calloc_r
0001fcd8 g     O .bss	00000001 OSRdyGrp
0001fc6c g       *ABS*	00000000 __bss_start
0000a820 g     F .text	00000128 memset
00000284 g     F .text	00000304 main
0001fc94 g     O .bss	00000004 alt_envp
0001fc78 g     O .bss	00000004 __malloc_max_total_mem
0001810c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e5b4 g     F .text	00000018 __swbuf
0001bac8 g     O .rodata	00000100 OSUnMapTbl
0001dcbe g     O .rwdata	00000002 OSSemEn
000191a0 g     F .text	0000008c alt_up_character_lcd_shift_cursor
000130e4 g     F .text	00000394 OSFlagPost
0000bb40 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000d56c g     F .text	00000014 fclose
000110d8 g     F .text	00000110 OS_EventTaskWait
00019bc8 g     F .text	00000070 alt_up_ps2_read_data_byte
00005028 g     F .text	000001a8 .hidden __truncdfsf2
00011cd0 g     F .text	000000cc OS_TaskStatStkChk
00016790 g     F .text	00000150 OSTaskDelReq
000078c4 g     F .text	00001688 _dtoa_r
00009de8 g     F .text	0000080c _malloc_r
0000e728 g     F .text	00000030 __ascii_wctomb
0001dc74 g     O .rwdata	00000004 alt_errno
00010bc0 g     F .text	00000070 OSStart
0000fe00 g     F .text	00000060 __env_unlock
000099c8 g     F .text	000000c4 _fwalk
00016c2c g     F .text	000001d4 OSTaskResume
00013eb4 g     F .text	000000e8 OSMemQuery
0001dcd0 g     O .rwdata	00000002 OSTaskStatEn
00019530 g     F .text	00000040 alt_up_irda_write_data
0001dcaa g     O .rwdata	00000002 OSMemMax
00014bec g     F .text	00000170 OSQPostFront
00019db4 g     F .text	0000003c alt_up_ps2_open_dev
00002768 g     F .text	00000084 .hidden __divsi3
0001fcd9 g     O .bss	00000003 OSRdyTbl
0001dc84 g     O .rwdata	00000002 OSDebugEn
00018fac g     F .text	0000003c alt_up_character_lcd_open_dev
00009594 g     F .text	00000124 _malloc_trim_r
00019930 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0001b608 g       *ABS*	00000000 __CTOR_END__
0001dc9c g     O .rwdata	00000002 OSFlagNodeSize
0001dce4 g     O .rwdata	00000002 OSTmrCfgMax
00018f74 g     F .text	00000038 alt_up_character_lcd_init
0000bb48 g     F .text	000000dc strcmp
000141a8 g     F .text	000001ac OSQCreate
000168e0 g     F .text	00000198 OSTaskNameGet
0001b608 g       *ABS*	00000000 __flash_rodata_start
00014d5c g     F .text	0000020c OSQPostOpt
00010ce0 g     F .text	00000220 OSTimeTick
0001dccc g     O .rwdata	00000002 OSTaskMax
0001b608 g       *ABS*	00000000 __DTOR_LIST__
0001521c g     F .text	000000d8 OSSemCreate
0001dcf0 g     O .rwdata	00000002 OSTmrWheelSize
0001a144 g     F .text	0000003c alt_up_rs232_open_dev
0000274c g     F .text	0000001c copysign
00003c44 g     F .text	00000088 .hidden __nedf2
0001dcc6 g     O .rwdata	00000002 OSTaskDelEn
000159bc g     F .text	00000110 OSSemQuery
00014354 g     F .text	00000280 OSQDel
00014918 g     F .text	0000016c OSQPendAbort
00017860 g     F .text	00000038 alt_irq_init
0000faf4 g     F .text	00000064 alt_release_fd
00019808 g     F .text	00000034 read_data_valid
00019344 g     F .text	00000038 alt_up_character_lcd_cursor_off
0001b7e4 g     O .rodata	00000100 .hidden __clz_tab
0001fc6c g     O .bss	00000004 _PathLocale
00019ac8 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001b274 g     F .text	00000014 atexit
0000d304 g     F .text	00000060 _write_r
00010a58 g     F .text	0000008c OSSchedLock
00009c08 g     F .text	00000018 setlocale
00012508 g     F .text	00000108 OSFlagCreate
0001dc4c g     O .rwdata	00000004 _impure_ptr
0001fc8c g     O .bss	00000004 alt_argc
00008f4c g     F .text	0000021c __sflush_r
000025b0 g     F .text	0000019c scalbn
0001a40c g     F .text	00000060 _do_dtors
00009bf4 g     F .text	00000008 __locale_cjk_lang
0001dc96 g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00012610 g     F .text	00000248 OSFlagDel
0001fcdc g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000b46c g     F .text	00000064 __ulp
00012acc g     F .text	000005b8 OSFlagPend
0001dce2 g     O .rwdata	00000002 OSTmrEn
0000957c g     F .text	00000018 __fp_unlock_all
0001dc60 g     O .rwdata	00000008 alt_fs_list
00011ad0 g     F .text	00000074 OS_StrCopy
00019df0 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
00019f6c g     F .text	00000040 alt_up_rs232_write_data
0001dcac g     O .rwdata	00000002 OSMemNameSize
0001af00 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001dcd8 g     O .rwdata	00000002 OSTCBPrioTblMax
00009c20 g     F .text	0000000c localeconv
0001dcd4 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001dca8 g     O .rwdata	00000002 OSMemEn
0001dcb2 g     O .rwdata	00000002 OSMutexEn
0001dd04 g       *ABS*	00000000 _edata
00023054 g       *ABS*	00000000 _end
0001fce0 g     O .bss	00000001 OSIntNesting
0000d580 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
00018760 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001759c g     F .text	000001d4 OSTimeDlyResume
00012980 g     F .text	0000014c OSFlagNameSet
00016e00 g     F .text	000001c0 OSTaskStkChk
0001dcae g     O .rwdata	00000002 OSMemSize
0000ba68 g     F .text	0000007c __swrite
0001dc58 g     O .rwdata	00000004 __malloc_trim_threshold
00009be8 g     F .text	0000000c __locale_msgcharset
0001fce4 g     O .bss	00000004 OSTCBCur
0001b288 g     F .text	00000038 exit
00019570 g     F .text	00000074 alt_up_irda_read_data
0001dcb0 g     O .rwdata	00000002 OSMemTblSize
00009a8c g     F .text	000000c4 _fwalk_reent
00019868 g     F .text	000000c8 alt_up_ps2_init
0000b270 g     F .text	000001fc __mdiff
000027ec g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00009558 g     F .text	00000004 __sfp_lock_release
000108bc g     F .text	00000058 OSInit
000171a4 g     F .text	00000124 OSTaskQuery
00019064 g     F .text	00000078 alt_up_character_lcd_string
000150c4 g     F .text	000000a8 OS_QInit
00011b44 g     F .text	00000054 OS_StrLen
00019704 g     F .text	0000003c alt_up_irda_open_dev
00013cc8 g     F .text	00000114 OSMemNameSet
0001dcca g     O .rwdata	00000002 OSTaskProfileEn
0001fce8 g     O .bss	00000004 OSTime
000216b0 g     O .bss	00000800 OSTaskIdleStk
0001b5d4 g     F .text	00000034 _exit
0001a180 g     F .text	0000012c alt_alarm_start
00012858 g     F .text	00000128 OSFlagNameGet
00017770 g     F .text	0000005c OSTimeGet
00009c2c g     F .text	000001bc __smakebuf_r
00019a60 g     F .text	00000068 alt_up_ps2_wait_for_ack
0000bc24 g     F .text	00000098 strlen
0001ae80 g     F .text	00000020 OSTaskSwHook
0001a8f0 g     F .text	00000154 open
00021eb0 g     O .bss	00000b40 OSEventTbl
00003ccc g     F .text	000000dc .hidden __gedf2
000229f0 g     O .bss	00000510 OSTCBTbl
00015acc g     F .text	00000100 OSSemSet
0001dc5c g     O .rwdata	00000004 __wctomb
0000bdb8 g     F .text	00000018 __sprint_r
0001a4fc g     F .text	00000034 alt_icache_flush_all
0001912c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001dcf8 g     O .rwdata	00000004 alt_priority_mask
000152f4 g     F .text	00000240 OSSemDel
0001fcec g     O .bss	00000004 OSFlagFreeList
0001dc90 g     O .rwdata	00000002 OSEventNameSize
00007498 g     F .text	0000001c __vfprintf_internal
0001fcf0 g     O .bss	00000001 OSStatRdy
00022f00 g     O .bss	00000054 OSTCBPrioTbl
0000e758 g     F .text	0000005c _wctomb_r
0000fd3c g     F .text	000000c4 __env_lock
00019c90 g     F .text	0000008c alt_up_ps2_read_fd
0001dcd6 g     O .rwdata	00000002 OSTaskSwHookEn
000044c0 g     F .text	000008fc .hidden __subdf3
000195e4 g     F .text	00000090 alt_up_irda_read_fd
0000aca4 g     F .text	000000b0 __lo0bits
0001dcfc g     O .rwdata	00000008 alt_alarm_list
0001dc9e g     O .rwdata	00000002 OSFlagWidth
0001a3ac g     F .text	00000060 _do_ctors
00019eac g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000e668 g     F .text	000000c0 wcrtomb
0000f43c g     F .text	000000d0 close
0001fc9c g     O .bss	00000004 alt_envsem
0001fcf4 g     O .bss	00000004 OSIdleCtrRun
00010f00 g     F .text	00000020 OSVersion
0001dce8 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000f76c g     F .text	00000084 alt_load
000172c8 g     F .text	00000070 OS_TaskStkClr
0001dcc2 g     O .rwdata	00000002 OSTaskCreateEn
000114f0 g     F .text	00000068 OS_EventWaitListInit
0000d708 g     F .text	00000080 fputwc
0001af20 g     F .text	00000020 OSTaskIdleHook
0000955c g     F .text	00000004 __sinit_lock_acquire
0000aa18 g     F .text	00000120 __multadd
00016fc0 g     F .text	000001e4 OSTaskSuspend
0000a9f0 g     F .text	00000028 _Bfree
00011b98 g     F .text	0000005c OS_TaskIdle
0001dcee g     O .rwdata	00000002 OSTmrTblSize
00014f68 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00109140 	call	10914 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	108bd504 	addi	r2,r2,12116
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	108bd504 	addi	r2,r2,12116
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00109600 	call	10960 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a82f17 	ldw	r2,-24388(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a82f17 	ldw	r2,-24388(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d6971214 	ori	gp,gp,23624
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     25c:	10bf1b14 	ori	r2,r2,64620

    movhi r3, %hi(__bss_end)
     260:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     264:	18cc1514 	ori	r3,r3,12372

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	000f76c0 	call	f76c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	000f9000 	call	f900 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000280>

00000284 <main>:
 * 	4. Shows a text message on the LCD display
 * 	5. Displays the last three bytes of data received from the PS/2 port
 * 	   on the HEX displays on the DE2 board
********************************************************************************/
int main(void)
{
     284:	def05204 	addi	sp,sp,-16056
     288:	dfcfad15 	stw	ra,16052(sp)
     28c:	df0fac15 	stw	fp,16048(sp)
     290:	dc0fab15 	stw	r16,16044(sp)
     294:	df0fac04 	addi	fp,sp,16048
	/* Declare volatile pointers to I/O registers (volatile means that IO load
	   and store instructions will be used to access these pointer locations,
	   instead of regular memory loads and stores) */
  	volatile int * green_LED_ptr = (int *) 0x10000010;		// green LED address
     298:	00840034 	movhi	r2,4096
     29c:	10800404 	addi	r2,r2,16
     2a0:	e0b05715 	stw	r2,-16036(fp)
	volatile int * audio_ptr = (int *) 0x10003040;			// audio port address
     2a4:	00840034 	movhi	r2,4096
     2a8:	108c1004 	addi	r2,r2,12352
     2ac:	e0b05815 	stw	r2,-16032(fp)

	/* used for audio record/playback */
	int fifospace, leftdata, rightdata;
	int record = 0, play = 0;
     2b0:	e0305915 	stw	zero,-16028(fp)
     2b4:	e0305a15 	stw	zero,-16024(fp)
	int buffer_index = 0;
     2b8:	e0305415 	stw	zero,-16048(fp)
	int FREQUENCY = 2000;
     2bc:	0081f404 	movi	r2,2000
     2c0:	e0b05b15 	stw	r2,-16020(fp)
	float left_buffer[BUF_SIZE];
	float right_buffer[BUF_SIZE];

	/* read and echo audio data */
	record = 0;
     2c4:	e0305915 	stw	zero,-16028(fp)
	play = 0;
     2c8:	e0305a15 	stw	zero,-16024(fp)

	double t;

	while(1)
	{
		*(green_LED_ptr) = 0x1;					// turn on LEDG[0]
     2cc:	e0b05717 	ldw	r2,-16036(fp)
     2d0:	00c00044 	movi	r3,1
     2d4:	10c00015 	stw	r3,0(r2)
			fifospace = *(audio_ptr + 1);	 		// read the audio port fifospace register
     2d8:	e0b05817 	ldw	r2,-16032(fp)
     2dc:	10800117 	ldw	r2,4(r2)
     2e0:	e0b05c15 	stw	r2,-16016(fp)
			if ( (fifospace & 0x000000FF) > BUF_THRESHOLD ) 	// check RARC
     2e4:	e0b05c17 	ldw	r2,-16016(fp)
     2e8:	10803fcc 	andi	r2,r2,255
     2ec:	10801850 	cmplti	r2,r2,97
     2f0:	103ff61e 	bne	r2,zero,2cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70002cc>
			{
				// store data until the the audio-in FIFO is empty or the buffer is full
				while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE) || (fifospace & 0x00FF0000) && (buffer_index < BUF_SIZE))
     2f4:	00007706 	br	4d4 <main+0x250>
					//right_buffer[buffer_index] = *(audio_ptr + 3);
					//++buffer_index;

						//for (int i = 0; i < 2; i++) {

					    t = (double)buffer_index/(double)SAMPLE_RATE;
     2f8:	e1305417 	ldw	r4,-16048(fp)
     2fc:	0004e3c0 	call	4e3c <__floatsidf>
     300:	1011883a 	mov	r8,r2
     304:	1813883a 	mov	r9,r3
     308:	000d883a 	mov	r6,zero
     30c:	01d04234 	movhi	r7,16648
     310:	39da8004 	addi	r7,r7,27136
     314:	4009883a 	mov	r4,r8
     318:	480b883a 	mov	r5,r9
     31c:	000335c0 	call	335c <__divdf3>
     320:	1009883a 	mov	r4,r2
     324:	180b883a 	mov	r5,r3
     328:	e1305d15 	stw	r4,-16012(fp)
     32c:	e1705e15 	stw	r5,-16008(fp)
					    	for (int x = 0; x < 15; x++) {
     330:	e0305515 	stw	zero,-16044(fp)
     334:	00006006 	br	4b8 <main+0x234>
					    		left_buffer[buffer_index] = (sin(2 * PI * FREQUENCY * t)) * VOLUME;
     338:	e1305b17 	ldw	r4,-16020(fp)
     33c:	000298c0 	call	298c <__floatsisf>
     340:	1007883a 	mov	r3,r2
     344:	00903274 	movhi	r2,16585
     348:	1083f6c4 	addi	r2,r2,4059
     34c:	1885ff32 	custom	252,r2,r3,r2
     350:	1009883a 	mov	r4,r2
     354:	0004f180 	call	4f18 <__extendsfdf2>
     358:	1011883a 	mov	r8,r2
     35c:	1813883a 	mov	r9,r3
     360:	e1b05d17 	ldw	r6,-16012(fp)
     364:	e1f05e17 	ldw	r7,-16008(fp)
     368:	4009883a 	mov	r4,r8
     36c:	480b883a 	mov	r5,r9
     370:	0003da80 	call	3da8 <__muldf3>
     374:	1009883a 	mov	r4,r2
     378:	180b883a 	mov	r5,r3
     37c:	2005883a 	mov	r2,r4
     380:	2807883a 	mov	r3,r5
     384:	1009883a 	mov	r4,r2
     388:	180b883a 	mov	r5,r3
     38c:	00006540 	call	654 <sin>
     390:	1011883a 	mov	r8,r2
     394:	1813883a 	mov	r9,r3
     398:	000d883a 	mov	r6,zero
     39c:	01d06574 	movhi	r7,16789
     3a0:	39dd4a84 	addi	r7,r7,29994
     3a4:	4009883a 	mov	r4,r8
     3a8:	480b883a 	mov	r5,r9
     3ac:	0003da80 	call	3da8 <__muldf3>
     3b0:	1009883a 	mov	r4,r2
     3b4:	180b883a 	mov	r5,r3
     3b8:	2005883a 	mov	r2,r4
     3bc:	2807883a 	mov	r3,r5
     3c0:	1009883a 	mov	r4,r2
     3c4:	180b883a 	mov	r5,r3
     3c8:	00050280 	call	5028 <__truncdfsf2>
     3cc:	1007883a 	mov	r3,r2
     3d0:	e0b05417 	ldw	r2,-16048(fp)
     3d4:	1085883a 	add	r2,r2,r2
     3d8:	1085883a 	add	r2,r2,r2
     3dc:	e1305404 	addi	r4,fp,-16048
     3e0:	2085883a 	add	r2,r4,r2
     3e4:	10800b04 	addi	r2,r2,44
     3e8:	10c00015 	stw	r3,0(r2)
					    		right_buffer[buffer_index] = (sin(2 * PI * FREQUENCY * t)) * VOLUME;
     3ec:	e1305b17 	ldw	r4,-16020(fp)
     3f0:	000298c0 	call	298c <__floatsisf>
     3f4:	1007883a 	mov	r3,r2
     3f8:	00903274 	movhi	r2,16585
     3fc:	1083f6c4 	addi	r2,r2,4059
     400:	1885ff32 	custom	252,r2,r3,r2
     404:	1009883a 	mov	r4,r2
     408:	0004f180 	call	4f18 <__extendsfdf2>
     40c:	1011883a 	mov	r8,r2
     410:	1813883a 	mov	r9,r3
     414:	e1b05d17 	ldw	r6,-16012(fp)
     418:	e1f05e17 	ldw	r7,-16008(fp)
     41c:	4009883a 	mov	r4,r8
     420:	480b883a 	mov	r5,r9
     424:	0003da80 	call	3da8 <__muldf3>
     428:	1009883a 	mov	r4,r2
     42c:	180b883a 	mov	r5,r3
     430:	2005883a 	mov	r2,r4
     434:	2807883a 	mov	r3,r5
     438:	1009883a 	mov	r4,r2
     43c:	180b883a 	mov	r5,r3
     440:	00006540 	call	654 <sin>
     444:	1011883a 	mov	r8,r2
     448:	1813883a 	mov	r9,r3
     44c:	000d883a 	mov	r6,zero
     450:	01d06574 	movhi	r7,16789
     454:	39dd4a84 	addi	r7,r7,29994
     458:	4009883a 	mov	r4,r8
     45c:	480b883a 	mov	r5,r9
     460:	0003da80 	call	3da8 <__muldf3>
     464:	1009883a 	mov	r4,r2
     468:	180b883a 	mov	r5,r3
     46c:	2005883a 	mov	r2,r4
     470:	2807883a 	mov	r3,r5
     474:	1009883a 	mov	r4,r2
     478:	180b883a 	mov	r5,r3
     47c:	00050280 	call	5028 <__truncdfsf2>
     480:	1007883a 	mov	r3,r2
     484:	e0b05417 	ldw	r2,-16048(fp)
     488:	1085883a 	add	r2,r2,r2
     48c:	1085883a 	add	r2,r2,r2
     490:	e1305404 	addi	r4,fp,-16048
     494:	2085883a 	add	r2,r4,r2
     498:	1087db04 	addi	r2,r2,8044
     49c:	10c00015 	stw	r3,0(r2)

					    		buffer_index++;
     4a0:	e0b05417 	ldw	r2,-16048(fp)
     4a4:	10800044 	addi	r2,r2,1
     4a8:	e0b05415 	stw	r2,-16048(fp)
					//++buffer_index;

						//for (int i = 0; i < 2; i++) {

					    t = (double)buffer_index/(double)SAMPLE_RATE;
					    	for (int x = 0; x < 15; x++) {
     4ac:	e0b05517 	ldw	r2,-16044(fp)
     4b0:	10800044 	addi	r2,r2,1
     4b4:	e0b05515 	stw	r2,-16044(fp)
     4b8:	e0b05517 	ldw	r2,-16044(fp)
     4bc:	108003d0 	cmplti	r2,r2,15
     4c0:	103f9d1e 	bne	r2,zero,338 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000338>

					  //left_buffer[buffer_index] = 1000000000 * sin(2 * M_PI * frequency * );
					  //right_buffer[buffer_index] = sin((((2 * M_PI) * (frequency / sampling_frequency))) * buffer_index) * 10000000000;
					  //++buffer_index;

					  printf("%d\n",buffer_index);
     4c4:	e1705417 	ldw	r5,-16048(fp)
     4c8:	010000b4 	movhi	r4,2
     4cc:	212d8204 	addi	r4,r4,-18936
     4d0:	00052640 	call	5264 <printf>
		*(green_LED_ptr) = 0x1;					// turn on LEDG[0]
			fifospace = *(audio_ptr + 1);	 		// read the audio port fifospace register
			if ( (fifospace & 0x000000FF) > BUF_THRESHOLD ) 	// check RARC
			{
				// store data until the the audio-in FIFO is empty or the buffer is full
				while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE) || (fifospace & 0x00FF0000) && (buffer_index < BUF_SIZE))
     4d4:	e0b05c17 	ldw	r2,-16016(fp)
     4d8:	10803fcc 	andi	r2,r2,255
     4dc:	10000326 	beq	r2,zero,4ec <main+0x268>
     4e0:	e0b05417 	ldw	r2,-16048(fp)
     4e4:	1081f410 	cmplti	r2,r2,2000
     4e8:	103f831e 	bne	r2,zero,2f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70002f8>
     4ec:	e0b05c17 	ldw	r2,-16016(fp)
     4f0:	10803fec 	andhi	r2,r2,255
     4f4:	10000326 	beq	r2,zero,504 <main+0x280>
     4f8:	e0b05417 	ldw	r2,-16048(fp)
     4fc:	1081f410 	cmplti	r2,r2,2000
     500:	103f7d1e 	bne	r2,zero,2f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70002f8>

					//fifospace = *(audio_ptr + 1);	// read the audio port fifospace register
				}
				//buffer_index = 0; //hier kom ik nooit
				while(1) {
					for (int y = 0; y < buffer_index; y++) {
     504:	e0305615 	stw	zero,-16040(fp)
     508:	00001b06 	br	578 <main+0x2f4>
						*(audio_ptr + 2) = left_buffer[y];
     50c:	e0b05817 	ldw	r2,-16032(fp)
     510:	14000204 	addi	r16,r2,8
     514:	e0b05617 	ldw	r2,-16040(fp)
     518:	1085883a 	add	r2,r2,r2
     51c:	1085883a 	add	r2,r2,r2
     520:	e0f05404 	addi	r3,fp,-16048
     524:	1885883a 	add	r2,r3,r2
     528:	10800b04 	addi	r2,r2,44
     52c:	10c00017 	ldw	r3,0(r2)
     530:	1809883a 	mov	r4,r3
     534:	000291c0 	call	291c <__fixsfsi>
     538:	80800015 	stw	r2,0(r16)
						*(audio_ptr + 3) = right_buffer[y];
     53c:	e0b05817 	ldw	r2,-16032(fp)
     540:	14000304 	addi	r16,r2,12
     544:	e0b05617 	ldw	r2,-16040(fp)
     548:	1085883a 	add	r2,r2,r2
     54c:	1085883a 	add	r2,r2,r2
     550:	e1305404 	addi	r4,fp,-16048
     554:	2085883a 	add	r2,r4,r2
     558:	1087db04 	addi	r2,r2,8044
     55c:	10c00017 	ldw	r3,0(r2)
     560:	1809883a 	mov	r4,r3
     564:	000291c0 	call	291c <__fixsfsi>
     568:	80800015 	stw	r2,0(r16)

					//fifospace = *(audio_ptr + 1);	// read the audio port fifospace register
				}
				//buffer_index = 0; //hier kom ik nooit
				while(1) {
					for (int y = 0; y < buffer_index; y++) {
     56c:	e0b05617 	ldw	r2,-16040(fp)
     570:	10800044 	addi	r2,r2,1
     574:	e0b05615 	stw	r2,-16040(fp)
     578:	e0f05617 	ldw	r3,-16040(fp)
     57c:	e0b05417 	ldw	r2,-16048(fp)
     580:	18bfe216 	blt	r3,r2,50c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700050c>
						*(audio_ptr + 2) = left_buffer[y];
						*(audio_ptr + 3) = right_buffer[y];
					}
				}
     584:	003fdf06 	br	504 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000504>

00000588 <check_KEYs>:

/****************************************************************************************
 * Subroutine to read KEYs
****************************************************************************************/
void check_KEYs(int * KEY1, int * KEY2, int * counter)
{
     588:	defff904 	addi	sp,sp,-28
     58c:	df000615 	stw	fp,24(sp)
     590:	df000604 	addi	fp,sp,24
     594:	e13ffd15 	stw	r4,-12(fp)
     598:	e17ffe15 	stw	r5,-8(fp)
     59c:	e1bfff15 	stw	r6,-4(fp)
	volatile int * KEY_ptr = (int *) 0x10000050;		// pushbutton KEY address
     5a0:	00840034 	movhi	r2,4096
     5a4:	10801404 	addi	r2,r2,80
     5a8:	e0bffa15 	stw	r2,-24(fp)
	volatile int * audio_ptr = (int *) 0x10003040;	// audio port address
     5ac:	00840034 	movhi	r2,4096
     5b0:	108c1004 	addi	r2,r2,12352
     5b4:	e0bffb15 	stw	r2,-20(fp)
	int KEY_value;

	KEY_value = *(KEY_ptr); 				// read the pushbutton KEY values
     5b8:	e0bffa17 	ldw	r2,-24(fp)
     5bc:	10800017 	ldw	r2,0(r2)
     5c0:	e0bffc15 	stw	r2,-16(fp)
	while (*KEY_ptr);							// wait for pushbutton KEY release
     5c4:	0001883a 	nop
     5c8:	e0bffa17 	ldw	r2,-24(fp)
     5cc:	10800017 	ldw	r2,0(r2)
     5d0:	103ffd1e 	bne	r2,zero,5c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70005c8>

	if (KEY_value == 0x2)					// check KEY1
     5d4:	e0bffc17 	ldw	r2,-16(fp)
     5d8:	10800098 	cmpnei	r2,r2,2
     5dc:	10000b1e 	bne	r2,zero,60c <check_KEYs+0x84>
	{
		// reset counter to start recording
		*counter = 0;
     5e0:	e0bfff17 	ldw	r2,-4(fp)
     5e4:	10000015 	stw	zero,0(r2)
		// clear audio-in FIFO
		*(audio_ptr) = 0x4;
     5e8:	e0bffb17 	ldw	r2,-20(fp)
     5ec:	00c00104 	movi	r3,4
     5f0:	10c00015 	stw	r3,0(r2)
		*(audio_ptr) = 0x0;
     5f4:	e0bffb17 	ldw	r2,-20(fp)
     5f8:	10000015 	stw	zero,0(r2)

		*KEY1 = 1;
     5fc:	e0bffd17 	ldw	r2,-12(fp)
     600:	00c00044 	movi	r3,1
     604:	10c00015 	stw	r3,0(r2)
		*(audio_ptr) = 0x8;
		*(audio_ptr) = 0x0;

		*KEY2 = 1;
	}
}
     608:	00000d06 	br	640 <check_KEYs+0xb8>
		*(audio_ptr) = 0x4;
		*(audio_ptr) = 0x0;

		*KEY1 = 1;
	}
	else if (KEY_value == 0x4)				// check KEY2
     60c:	e0bffc17 	ldw	r2,-16(fp)
     610:	10800118 	cmpnei	r2,r2,4
     614:	10000a1e 	bne	r2,zero,640 <check_KEYs+0xb8>
	{
		// reset counter to start playback
		*counter = 0;
     618:	e0bfff17 	ldw	r2,-4(fp)
     61c:	10000015 	stw	zero,0(r2)
		// clear audio-out FIFO
		*(audio_ptr) = 0x8;
     620:	e0bffb17 	ldw	r2,-20(fp)
     624:	00c00204 	movi	r3,8
     628:	10c00015 	stw	r3,0(r2)
		*(audio_ptr) = 0x0;
     62c:	e0bffb17 	ldw	r2,-20(fp)
     630:	10000015 	stw	zero,0(r2)

		*KEY2 = 1;
     634:	e0bffe17 	ldw	r2,-8(fp)
     638:	00c00044 	movi	r3,1
     63c:	10c00015 	stw	r3,0(r2)
	}
}
     640:	0001883a 	nop
     644:	e037883a 	mov	sp,fp
     648:	df000017 	ldw	fp,0(sp)
     64c:	dec00104 	addi	sp,sp,4
     650:	f800283a 	ret

00000654 <sin>:
     654:	00a00034 	movhi	r2,32768
     658:	defffa04 	addi	sp,sp,-24
     65c:	10bfffc4 	addi	r2,r2,-1
     660:	00cffa74 	movhi	r3,16361
     664:	dfc00515 	stw	ra,20(sp)
     668:	2884703a 	and	r2,r5,r2
     66c:	18c87ec4 	addi	r3,r3,8699
     670:	1880180e 	bge	r3,r2,6d4 <sin+0x80>
     674:	00dffc34 	movhi	r3,32752
     678:	18ffffc4 	addi	r3,r3,-1
     67c:	1880060e 	bge	r3,r2,698 <sin+0x44>
     680:	280f883a 	mov	r7,r5
     684:	200d883a 	mov	r6,r4
     688:	00044c00 	call	44c0 <__subdf3>
     68c:	dfc00517 	ldw	ra,20(sp)
     690:	dec00604 	addi	sp,sp,24
     694:	f800283a 	ret
     698:	d9800104 	addi	r6,sp,4
     69c:	00007440 	call	744 <__ieee754_rem_pio2>
     6a0:	108000cc 	andi	r2,r2,3
     6a4:	00c00044 	movi	r3,1
     6a8:	10c01926 	beq	r2,r3,710 <sin+0xbc>
     6ac:	01000084 	movi	r4,2
     6b0:	11000f26 	beq	r2,r4,6f0 <sin+0x9c>
     6b4:	10001c26 	beq	r2,zero,728 <sin+0xd4>
     6b8:	d9800317 	ldw	r6,12(sp)
     6bc:	d9c00417 	ldw	r7,16(sp)
     6c0:	d9000117 	ldw	r4,4(sp)
     6c4:	d9400217 	ldw	r5,8(sp)
     6c8:	0000eb00 	call	eb0 <__kernel_cos>
     6cc:	18e0003c 	xorhi	r3,r3,32768
     6d0:	003fee06 	br	68c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700068c>
     6d4:	d8000015 	stw	zero,0(sp)
     6d8:	000d883a 	mov	r6,zero
     6dc:	000f883a 	mov	r7,zero
     6e0:	00020e40 	call	20e4 <__kernel_sin>
     6e4:	dfc00517 	ldw	ra,20(sp)
     6e8:	dec00604 	addi	sp,sp,24
     6ec:	f800283a 	ret
     6f0:	d9800317 	ldw	r6,12(sp)
     6f4:	d9c00417 	ldw	r7,16(sp)
     6f8:	d9000117 	ldw	r4,4(sp)
     6fc:	d9400217 	ldw	r5,8(sp)
     700:	d8c00015 	stw	r3,0(sp)
     704:	00020e40 	call	20e4 <__kernel_sin>
     708:	18e0003c 	xorhi	r3,r3,32768
     70c:	003fdf06 	br	68c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700068c>
     710:	d9800317 	ldw	r6,12(sp)
     714:	d9c00417 	ldw	r7,16(sp)
     718:	d9000117 	ldw	r4,4(sp)
     71c:	d9400217 	ldw	r5,8(sp)
     720:	0000eb00 	call	eb0 <__kernel_cos>
     724:	003fd906 	br	68c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700068c>
     728:	d9800317 	ldw	r6,12(sp)
     72c:	d9c00417 	ldw	r7,16(sp)
     730:	d9000117 	ldw	r4,4(sp)
     734:	d9400217 	ldw	r5,8(sp)
     738:	d8c00015 	stw	r3,0(sp)
     73c:	00020e40 	call	20e4 <__kernel_sin>
     740:	003fd206 	br	68c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700068c>

00000744 <__ieee754_rem_pio2>:
     744:	02200034 	movhi	r8,32768
     748:	deffea04 	addi	sp,sp,-88
     74c:	423fffc4 	addi	r8,r8,-1
     750:	00cffa74 	movhi	r3,16361
     754:	ddc01315 	stw	r23,76(sp)
     758:	dc400d15 	stw	r17,52(sp)
     75c:	dfc01515 	stw	ra,84(sp)
     760:	df001415 	stw	fp,80(sp)
     764:	dd801215 	stw	r22,72(sp)
     768:	dd401115 	stw	r21,68(sp)
     76c:	dd001015 	stw	r20,64(sp)
     770:	dcc00f15 	stw	r19,60(sp)
     774:	dc800e15 	stw	r18,56(sp)
     778:	dc000c15 	stw	r16,48(sp)
     77c:	2a2e703a 	and	r23,r5,r8
     780:	18c87ec4 	addi	r3,r3,8699
     784:	2823883a 	mov	r17,r5
     788:	1dc0790e 	bge	r3,r23,970 <__ieee754_rem_pio2+0x22c>
     78c:	009000f4 	movhi	r2,16387
     790:	10b65ec4 	addi	r2,r2,-9861
     794:	3021883a 	mov	r16,r6
     798:	2027883a 	mov	r19,r4
     79c:	15c02316 	blt	r2,r23,82c <__ieee754_rem_pio2+0xe8>
     7a0:	01cffe74 	movhi	r7,16377
     7a4:	39c87ec4 	addi	r7,r7,8699
     7a8:	01951034 	movhi	r6,21568
     7ac:	01417a0e 	bge	zero,r5,d98 <__ieee754_rem_pio2+0x654>
     7b0:	00044c00 	call	44c0 <__subdf3>
     7b4:	1025883a 	mov	r18,r2
     7b8:	008ffe74 	movhi	r2,16377
     7bc:	10887ec4 	addi	r2,r2,8699
     7c0:	1823883a 	mov	r17,r3
     7c4:	b8808426 	beq	r23,r2,9d8 <__ieee754_rem_pio2+0x294>
     7c8:	018698b4 	movhi	r6,6754
     7cc:	01cf7474 	movhi	r7,15825
     7d0:	3198cc44 	addi	r6,r6,25393
     7d4:	39ed1844 	addi	r7,r7,-19359
     7d8:	9009883a 	mov	r4,r18
     7dc:	180b883a 	mov	r5,r3
     7e0:	00044c00 	call	44c0 <__subdf3>
     7e4:	100d883a 	mov	r6,r2
     7e8:	180f883a 	mov	r7,r3
     7ec:	9009883a 	mov	r4,r18
     7f0:	880b883a 	mov	r5,r17
     7f4:	80800015 	stw	r2,0(r16)
     7f8:	80c00115 	stw	r3,4(r16)
     7fc:	00044c00 	call	44c0 <__subdf3>
     800:	018698b4 	movhi	r6,6754
     804:	01cf7474 	movhi	r7,15825
     808:	3198cc44 	addi	r6,r6,25393
     80c:	39ed1844 	addi	r7,r7,-19359
     810:	1009883a 	mov	r4,r2
     814:	180b883a 	mov	r5,r3
     818:	00044c00 	call	44c0 <__subdf3>
     81c:	80800215 	stw	r2,8(r16)
     820:	80c00315 	stw	r3,12(r16)
     824:	00800044 	movi	r2,1
     828:	00005606 	br	984 <__ieee754_rem_pio2+0x240>
     82c:	00904e74 	movhi	r2,16697
     830:	10887ec4 	addi	r2,r2,8699
     834:	15c0830e 	bge	r2,r23,a44 <__ieee754_rem_pio2+0x300>
     838:	009ffc34 	movhi	r2,32752
     83c:	10bfffc4 	addi	r2,r2,-1
     840:	15c05c16 	blt	r2,r23,9b4 <__ieee754_rem_pio2+0x270>
     844:	b829d53a 	srai	r20,r23,20
     848:	a53efa84 	addi	r20,r20,-1046
     84c:	a024953a 	slli	r18,r20,20
     850:	bca5c83a 	sub	r18,r23,r18
     854:	900b883a 	mov	r5,r18
     858:	0004dbc0 	call	4dbc <__fixdfsi>
     85c:	1009883a 	mov	r4,r2
     860:	0004e3c0 	call	4e3c <__floatsidf>
     864:	9809883a 	mov	r4,r19
     868:	900b883a 	mov	r5,r18
     86c:	100d883a 	mov	r6,r2
     870:	180f883a 	mov	r7,r3
     874:	d8800215 	stw	r2,8(sp)
     878:	d8c00315 	stw	r3,12(sp)
     87c:	00044c00 	call	44c0 <__subdf3>
     880:	000d883a 	mov	r6,zero
     884:	01d05c34 	movhi	r7,16752
     888:	1009883a 	mov	r4,r2
     88c:	180b883a 	mov	r5,r3
     890:	0003da80 	call	3da8 <__muldf3>
     894:	180b883a 	mov	r5,r3
     898:	1009883a 	mov	r4,r2
     89c:	182b883a 	mov	r21,r3
     8a0:	102d883a 	mov	r22,r2
     8a4:	0004dbc0 	call	4dbc <__fixdfsi>
     8a8:	1009883a 	mov	r4,r2
     8ac:	0004e3c0 	call	4e3c <__floatsidf>
     8b0:	100d883a 	mov	r6,r2
     8b4:	180f883a 	mov	r7,r3
     8b8:	b009883a 	mov	r4,r22
     8bc:	a80b883a 	mov	r5,r21
     8c0:	1027883a 	mov	r19,r2
     8c4:	1825883a 	mov	r18,r3
     8c8:	d8800415 	stw	r2,16(sp)
     8cc:	d8c00515 	stw	r3,20(sp)
     8d0:	00044c00 	call	44c0 <__subdf3>
     8d4:	000d883a 	mov	r6,zero
     8d8:	01d05c34 	movhi	r7,16752
     8dc:	1009883a 	mov	r4,r2
     8e0:	180b883a 	mov	r5,r3
     8e4:	0003da80 	call	3da8 <__muldf3>
     8e8:	000d883a 	mov	r6,zero
     8ec:	000f883a 	mov	r7,zero
     8f0:	1009883a 	mov	r4,r2
     8f4:	180b883a 	mov	r5,r3
     8f8:	d8800615 	stw	r2,24(sp)
     8fc:	d8c00715 	stw	r3,28(sp)
     900:	0003c440 	call	3c44 <__eqdf2>
     904:	1001431e 	bne	r2,zero,e14 <__ieee754_rem_pio2+0x6d0>
     908:	000f883a 	mov	r7,zero
     90c:	000d883a 	mov	r6,zero
     910:	9809883a 	mov	r4,r19
     914:	900b883a 	mov	r5,r18
     918:	0003c440 	call	3c44 <__eqdf2>
     91c:	100f003a 	cmpeq	r7,r2,zero
     920:	00800084 	movi	r2,2
     924:	11cfc83a 	sub	r7,r2,r7
     928:	00800084 	movi	r2,2
     92c:	d8800015 	stw	r2,0(sp)
     930:	008000b4 	movhi	r2,2
     934:	10ada304 	addi	r2,r2,-18804
     938:	d8800115 	stw	r2,4(sp)
     93c:	a00d883a 	mov	r6,r20
     940:	800b883a 	mov	r5,r16
     944:	d9000204 	addi	r4,sp,8
     948:	00013540 	call	1354 <__kernel_rem_pio2>
     94c:	88000d0e 	bge	r17,zero,984 <__ieee754_rem_pio2+0x240>
     950:	81000117 	ldw	r4,4(r16)
     954:	80c00317 	ldw	r3,12(r16)
     958:	0085c83a 	sub	r2,zero,r2
     95c:	2120003c 	xorhi	r4,r4,32768
     960:	18e0003c 	xorhi	r3,r3,32768
     964:	81000115 	stw	r4,4(r16)
     968:	80c00315 	stw	r3,12(r16)
     96c:	00000506 	br	984 <__ieee754_rem_pio2+0x240>
     970:	31000015 	stw	r4,0(r6)
     974:	31400115 	stw	r5,4(r6)
     978:	30000215 	stw	zero,8(r6)
     97c:	30000315 	stw	zero,12(r6)
     980:	0005883a 	mov	r2,zero
     984:	dfc01517 	ldw	ra,84(sp)
     988:	df001417 	ldw	fp,80(sp)
     98c:	ddc01317 	ldw	r23,76(sp)
     990:	dd801217 	ldw	r22,72(sp)
     994:	dd401117 	ldw	r21,68(sp)
     998:	dd001017 	ldw	r20,64(sp)
     99c:	dcc00f17 	ldw	r19,60(sp)
     9a0:	dc800e17 	ldw	r18,56(sp)
     9a4:	dc400d17 	ldw	r17,52(sp)
     9a8:	dc000c17 	ldw	r16,48(sp)
     9ac:	dec01604 	addi	sp,sp,88
     9b0:	f800283a 	ret
     9b4:	200d883a 	mov	r6,r4
     9b8:	280f883a 	mov	r7,r5
     9bc:	00044c00 	call	44c0 <__subdf3>
     9c0:	80800215 	stw	r2,8(r16)
     9c4:	80800015 	stw	r2,0(r16)
     9c8:	80c00315 	stw	r3,12(r16)
     9cc:	80c00115 	stw	r3,4(r16)
     9d0:	0005883a 	mov	r2,zero
     9d4:	003feb06 	br	984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000984>
     9d8:	01cf7474 	movhi	r7,15825
     9dc:	9009883a 	mov	r4,r18
     9e0:	39ed1844 	addi	r7,r7,-19359
     9e4:	01869834 	movhi	r6,6752
     9e8:	180b883a 	mov	r5,r3
     9ec:	00044c00 	call	44c0 <__subdf3>
     9f0:	018b80f4 	movhi	r6,11779
     9f4:	01cee8f4 	movhi	r7,15267
     9f8:	319c1cc4 	addi	r6,r6,28787
     9fc:	39c66284 	addi	r7,r7,6538
     a00:	1009883a 	mov	r4,r2
     a04:	180b883a 	mov	r5,r3
     a08:	1025883a 	mov	r18,r2
     a0c:	1823883a 	mov	r17,r3
     a10:	00044c00 	call	44c0 <__subdf3>
     a14:	100d883a 	mov	r6,r2
     a18:	180f883a 	mov	r7,r3
     a1c:	9009883a 	mov	r4,r18
     a20:	880b883a 	mov	r5,r17
     a24:	80800015 	stw	r2,0(r16)
     a28:	80c00115 	stw	r3,4(r16)
     a2c:	00044c00 	call	44c0 <__subdf3>
     a30:	018b80f4 	movhi	r6,11779
     a34:	01cee8f4 	movhi	r7,15267
     a38:	319c1cc4 	addi	r6,r6,28787
     a3c:	39c66284 	addi	r7,r7,6538
     a40:	003f7306 	br	810 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000810>
     a44:	00023b00 	call	23b0 <fabs>
     a48:	019b72b4 	movhi	r6,28106
     a4c:	01cff934 	movhi	r7,16356
     a50:	31b220c4 	addi	r6,r6,-14205
     a54:	39d7cc04 	addi	r7,r7,24368
     a58:	1009883a 	mov	r4,r2
     a5c:	180b883a 	mov	r5,r3
     a60:	102d883a 	mov	r22,r2
     a64:	182b883a 	mov	r21,r3
     a68:	0003da80 	call	3da8 <__muldf3>
     a6c:	000d883a 	mov	r6,zero
     a70:	01cff834 	movhi	r7,16352
     a74:	1009883a 	mov	r4,r2
     a78:	180b883a 	mov	r5,r3
     a7c:	0002ab00 	call	2ab0 <__adddf3>
     a80:	180b883a 	mov	r5,r3
     a84:	1009883a 	mov	r4,r2
     a88:	0004dbc0 	call	4dbc <__fixdfsi>
     a8c:	1009883a 	mov	r4,r2
     a90:	1025883a 	mov	r18,r2
     a94:	0004e3c0 	call	4e3c <__floatsidf>
     a98:	01cffe74 	movhi	r7,16377
     a9c:	39c87ec4 	addi	r7,r7,8699
     aa0:	01951034 	movhi	r6,21568
     aa4:	1009883a 	mov	r4,r2
     aa8:	180b883a 	mov	r5,r3
     aac:	1029883a 	mov	r20,r2
     ab0:	1827883a 	mov	r19,r3
     ab4:	0003da80 	call	3da8 <__muldf3>
     ab8:	b009883a 	mov	r4,r22
     abc:	a80b883a 	mov	r5,r21
     ac0:	100d883a 	mov	r6,r2
     ac4:	180f883a 	mov	r7,r3
     ac8:	00044c00 	call	44c0 <__subdf3>
     acc:	018698b4 	movhi	r6,6754
     ad0:	01cf7474 	movhi	r7,15825
     ad4:	a009883a 	mov	r4,r20
     ad8:	3198cc44 	addi	r6,r6,25393
     adc:	39ed1844 	addi	r7,r7,-19359
     ae0:	980b883a 	mov	r5,r19
     ae4:	1039883a 	mov	fp,r2
     ae8:	d8c00815 	stw	r3,32(sp)
     aec:	0003da80 	call	3da8 <__muldf3>
     af0:	010007c4 	movi	r4,31
     af4:	e017883a 	mov	r11,fp
     af8:	da800817 	ldw	r10,32(sp)
     afc:	102d883a 	mov	r22,r2
     b00:	182b883a 	mov	r21,r3
     b04:	24802816 	blt	r4,r18,ba8 <__ieee754_rem_pio2+0x464>
     b08:	913fffc4 	addi	r4,r18,-1
     b0c:	2109883a 	add	r4,r4,r4
     b10:	014000b4 	movhi	r5,2
     b14:	2109883a 	add	r4,r4,r4
     b18:	296d8304 	addi	r5,r5,-18932
     b1c:	2909883a 	add	r4,r5,r4
     b20:	21000017 	ldw	r4,0(r4)
     b24:	b9002026 	beq	r23,r4,ba8 <__ieee754_rem_pio2+0x464>
     b28:	100d883a 	mov	r6,r2
     b2c:	180f883a 	mov	r7,r3
     b30:	e009883a 	mov	r4,fp
     b34:	500b883a 	mov	r5,r10
     b38:	da800b15 	stw	r10,44(sp)
     b3c:	df000a15 	stw	fp,40(sp)
     b40:	00044c00 	call	44c0 <__subdf3>
     b44:	da800b17 	ldw	r10,44(sp)
     b48:	dac00a17 	ldw	r11,40(sp)
     b4c:	1019883a 	mov	r12,r2
     b50:	1813883a 	mov	r9,r3
     b54:	80800015 	stw	r2,0(r16)
     b58:	80c00115 	stw	r3,4(r16)
     b5c:	600d883a 	mov	r6,r12
     b60:	480f883a 	mov	r7,r9
     b64:	5809883a 	mov	r4,r11
     b68:	500b883a 	mov	r5,r10
     b6c:	da400b15 	stw	r9,44(sp)
     b70:	db000a15 	stw	r12,40(sp)
     b74:	00044c00 	call	44c0 <__subdf3>
     b78:	b00d883a 	mov	r6,r22
     b7c:	a80f883a 	mov	r7,r21
     b80:	1009883a 	mov	r4,r2
     b84:	180b883a 	mov	r5,r3
     b88:	00044c00 	call	44c0 <__subdf3>
     b8c:	80800215 	stw	r2,8(r16)
     b90:	80c00315 	stw	r3,12(r16)
     b94:	da400b17 	ldw	r9,44(sp)
     b98:	db000a17 	ldw	r12,40(sp)
     b9c:	88009f16 	blt	r17,zero,e1c <__ieee754_rem_pio2+0x6d8>
     ba0:	9005883a 	mov	r2,r18
     ba4:	003f7706 	br	984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000984>
     ba8:	d9400817 	ldw	r5,32(sp)
     bac:	100d883a 	mov	r6,r2
     bb0:	180f883a 	mov	r7,r3
     bb4:	e009883a 	mov	r4,fp
     bb8:	da800b15 	stw	r10,44(sp)
     bbc:	dac00a15 	stw	r11,40(sp)
     bc0:	00044c00 	call	44c0 <__subdf3>
     bc4:	1019883a 	mov	r12,r2
     bc8:	1804d53a 	srli	r2,r3,20
     bcc:	b811d53a 	srai	r8,r23,20
     bd0:	1813883a 	mov	r9,r3
     bd4:	1081ffcc 	andi	r2,r2,2047
     bd8:	80c00115 	stw	r3,4(r16)
     bdc:	83000015 	stw	r12,0(r16)
     be0:	4085c83a 	sub	r2,r8,r2
     be4:	00c00404 	movi	r3,16
     be8:	da800b17 	ldw	r10,44(sp)
     bec:	dac00a17 	ldw	r11,40(sp)
     bf0:	18bfda0e 	bge	r3,r2,b5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000b5c>
     bf4:	01cf7474 	movhi	r7,15825
     bf8:	39ed1844 	addi	r7,r7,-19359
     bfc:	01869834 	movhi	r6,6752
     c00:	a009883a 	mov	r4,r20
     c04:	980b883a 	mov	r5,r19
     c08:	da000a15 	stw	r8,40(sp)
     c0c:	0003da80 	call	3da8 <__muldf3>
     c10:	d9400817 	ldw	r5,32(sp)
     c14:	100d883a 	mov	r6,r2
     c18:	180f883a 	mov	r7,r3
     c1c:	e009883a 	mov	r4,fp
     c20:	102d883a 	mov	r22,r2
     c24:	182b883a 	mov	r21,r3
     c28:	00044c00 	call	44c0 <__subdf3>
     c2c:	d9400817 	ldw	r5,32(sp)
     c30:	100d883a 	mov	r6,r2
     c34:	180f883a 	mov	r7,r3
     c38:	e009883a 	mov	r4,fp
     c3c:	182f883a 	mov	r23,r3
     c40:	d8800915 	stw	r2,36(sp)
     c44:	00044c00 	call	44c0 <__subdf3>
     c48:	b00d883a 	mov	r6,r22
     c4c:	a80f883a 	mov	r7,r21
     c50:	1009883a 	mov	r4,r2
     c54:	180b883a 	mov	r5,r3
     c58:	00044c00 	call	44c0 <__subdf3>
     c5c:	018b80f4 	movhi	r6,11779
     c60:	01cee8f4 	movhi	r7,15267
     c64:	319c1cc4 	addi	r6,r6,28787
     c68:	39c66284 	addi	r7,r7,6538
     c6c:	a009883a 	mov	r4,r20
     c70:	980b883a 	mov	r5,r19
     c74:	102d883a 	mov	r22,r2
     c78:	182b883a 	mov	r21,r3
     c7c:	0003da80 	call	3da8 <__muldf3>
     c80:	b00d883a 	mov	r6,r22
     c84:	a80f883a 	mov	r7,r21
     c88:	1009883a 	mov	r4,r2
     c8c:	180b883a 	mov	r5,r3
     c90:	00044c00 	call	44c0 <__subdf3>
     c94:	d9000917 	ldw	r4,36(sp)
     c98:	100d883a 	mov	r6,r2
     c9c:	180f883a 	mov	r7,r3
     ca0:	b80b883a 	mov	r5,r23
     ca4:	102d883a 	mov	r22,r2
     ca8:	182b883a 	mov	r21,r3
     cac:	00044c00 	call	44c0 <__subdf3>
     cb0:	1019883a 	mov	r12,r2
     cb4:	1804d53a 	srli	r2,r3,20
     cb8:	da000a17 	ldw	r8,40(sp)
     cbc:	83000015 	stw	r12,0(r16)
     cc0:	1081ffcc 	andi	r2,r2,2047
     cc4:	4091c83a 	sub	r8,r8,r2
     cc8:	80c00115 	stw	r3,4(r16)
     ccc:	00800c44 	movi	r2,49
     cd0:	1813883a 	mov	r9,r3
     cd4:	1200730e 	bge	r2,r8,ea4 <__ieee754_rem_pio2+0x760>
     cd8:	01cee8f4 	movhi	r7,15267
     cdc:	39c66284 	addi	r7,r7,6538
     ce0:	018b8034 	movhi	r6,11776
     ce4:	a009883a 	mov	r4,r20
     ce8:	980b883a 	mov	r5,r19
     cec:	0003da80 	call	3da8 <__muldf3>
     cf0:	d9000917 	ldw	r4,36(sp)
     cf4:	100d883a 	mov	r6,r2
     cf8:	180f883a 	mov	r7,r3
     cfc:	b80b883a 	mov	r5,r23
     d00:	102d883a 	mov	r22,r2
     d04:	182b883a 	mov	r21,r3
     d08:	00044c00 	call	44c0 <__subdf3>
     d0c:	d9000917 	ldw	r4,36(sp)
     d10:	100d883a 	mov	r6,r2
     d14:	180f883a 	mov	r7,r3
     d18:	b80b883a 	mov	r5,r23
     d1c:	d8c00b15 	stw	r3,44(sp)
     d20:	d8800a15 	stw	r2,40(sp)
     d24:	00044c00 	call	44c0 <__subdf3>
     d28:	b00d883a 	mov	r6,r22
     d2c:	a80f883a 	mov	r7,r21
     d30:	1009883a 	mov	r4,r2
     d34:	180b883a 	mov	r5,r3
     d38:	00044c00 	call	44c0 <__subdf3>
     d3c:	01894834 	movhi	r6,9504
     d40:	01ce5f34 	movhi	r7,14716
     d44:	31927044 	addi	r6,r6,18881
     d48:	39e0e684 	addi	r7,r7,-31846
     d4c:	a009883a 	mov	r4,r20
     d50:	980b883a 	mov	r5,r19
     d54:	102d883a 	mov	r22,r2
     d58:	182b883a 	mov	r21,r3
     d5c:	0003da80 	call	3da8 <__muldf3>
     d60:	b00d883a 	mov	r6,r22
     d64:	a80f883a 	mov	r7,r21
     d68:	1009883a 	mov	r4,r2
     d6c:	180b883a 	mov	r5,r3
     d70:	00044c00 	call	44c0 <__subdf3>
     d74:	dac00a17 	ldw	r11,40(sp)
     d78:	da800b17 	ldw	r10,44(sp)
     d7c:	102d883a 	mov	r22,r2
     d80:	182b883a 	mov	r21,r3
     d84:	100d883a 	mov	r6,r2
     d88:	180f883a 	mov	r7,r3
     d8c:	5809883a 	mov	r4,r11
     d90:	500b883a 	mov	r5,r10
     d94:	003f6a06 	br	b40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000b40>
     d98:	0002ab00 	call	2ab0 <__adddf3>
     d9c:	1025883a 	mov	r18,r2
     da0:	008ffe74 	movhi	r2,16377
     da4:	10887ec4 	addi	r2,r2,8699
     da8:	1823883a 	mov	r17,r3
     dac:	b8802226 	beq	r23,r2,e38 <__ieee754_rem_pio2+0x6f4>
     db0:	018698b4 	movhi	r6,6754
     db4:	01cf7474 	movhi	r7,15825
     db8:	3198cc44 	addi	r6,r6,25393
     dbc:	39ed1844 	addi	r7,r7,-19359
     dc0:	9009883a 	mov	r4,r18
     dc4:	180b883a 	mov	r5,r3
     dc8:	0002ab00 	call	2ab0 <__adddf3>
     dcc:	100d883a 	mov	r6,r2
     dd0:	180f883a 	mov	r7,r3
     dd4:	9009883a 	mov	r4,r18
     dd8:	880b883a 	mov	r5,r17
     ddc:	80800015 	stw	r2,0(r16)
     de0:	80c00115 	stw	r3,4(r16)
     de4:	00044c00 	call	44c0 <__subdf3>
     de8:	018698b4 	movhi	r6,6754
     dec:	01cf7474 	movhi	r7,15825
     df0:	3198cc44 	addi	r6,r6,25393
     df4:	39ed1844 	addi	r7,r7,-19359
     df8:	1009883a 	mov	r4,r2
     dfc:	180b883a 	mov	r5,r3
     e00:	0002ab00 	call	2ab0 <__adddf3>
     e04:	80800215 	stw	r2,8(r16)
     e08:	80c00315 	stw	r3,12(r16)
     e0c:	00bfffc4 	movi	r2,-1
     e10:	003edc06 	br	984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000984>
     e14:	01c000c4 	movi	r7,3
     e18:	003ec306 	br	928 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000928>
     e1c:	4a60003c 	xorhi	r9,r9,32768
     e20:	18e0003c 	xorhi	r3,r3,32768
     e24:	83000015 	stw	r12,0(r16)
     e28:	82400115 	stw	r9,4(r16)
     e2c:	80c00315 	stw	r3,12(r16)
     e30:	0485c83a 	sub	r2,zero,r18
     e34:	003ed306 	br	984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000984>
     e38:	01cf7474 	movhi	r7,15825
     e3c:	9009883a 	mov	r4,r18
     e40:	39ed1844 	addi	r7,r7,-19359
     e44:	01869834 	movhi	r6,6752
     e48:	180b883a 	mov	r5,r3
     e4c:	0002ab00 	call	2ab0 <__adddf3>
     e50:	018b80f4 	movhi	r6,11779
     e54:	01cee8f4 	movhi	r7,15267
     e58:	319c1cc4 	addi	r6,r6,28787
     e5c:	39c66284 	addi	r7,r7,6538
     e60:	1009883a 	mov	r4,r2
     e64:	180b883a 	mov	r5,r3
     e68:	1025883a 	mov	r18,r2
     e6c:	1823883a 	mov	r17,r3
     e70:	0002ab00 	call	2ab0 <__adddf3>
     e74:	100d883a 	mov	r6,r2
     e78:	180f883a 	mov	r7,r3
     e7c:	9009883a 	mov	r4,r18
     e80:	880b883a 	mov	r5,r17
     e84:	80800015 	stw	r2,0(r16)
     e88:	80c00115 	stw	r3,4(r16)
     e8c:	00044c00 	call	44c0 <__subdf3>
     e90:	018b80f4 	movhi	r6,11779
     e94:	01cee8f4 	movhi	r7,15267
     e98:	319c1cc4 	addi	r6,r6,28787
     e9c:	39c66284 	addi	r7,r7,6538
     ea0:	003fd506 	br	df8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000df8>
     ea4:	dac00917 	ldw	r11,36(sp)
     ea8:	b815883a 	mov	r10,r23
     eac:	003f2b06 	br	b5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000b5c>

00000eb0 <__kernel_cos>:
     eb0:	defff304 	addi	sp,sp,-52
     eb4:	dc000315 	stw	r16,12(sp)
     eb8:	04200034 	movhi	r16,32768
     ebc:	843fffc4 	addi	r16,r16,-1
     ec0:	008f9034 	movhi	r2,15936
     ec4:	df000b15 	stw	fp,44(sp)
     ec8:	ddc00a15 	stw	r23,40(sp)
     ecc:	dd800915 	stw	r22,36(sp)
     ed0:	dcc00615 	stw	r19,24(sp)
     ed4:	dfc00c15 	stw	ra,48(sp)
     ed8:	dd400815 	stw	r21,32(sp)
     edc:	dd000715 	stw	r20,28(sp)
     ee0:	dc800515 	stw	r18,20(sp)
     ee4:	dc400415 	stw	r17,16(sp)
     ee8:	2c20703a 	and	r16,r5,r16
     eec:	10bfffc4 	addi	r2,r2,-1
     ef0:	2827883a 	mov	r19,r5
     ef4:	202d883a 	mov	r22,r4
     ef8:	302f883a 	mov	r23,r6
     efc:	3839883a 	mov	fp,r7
     f00:	14007516 	blt	r2,r16,10d8 <__kernel_cos+0x228>
     f04:	0004dbc0 	call	4dbc <__fixdfsi>
     f08:	10010f26 	beq	r2,zero,1348 <__kernel_cos+0x498>
     f0c:	b00d883a 	mov	r6,r22
     f10:	980f883a 	mov	r7,r19
     f14:	b009883a 	mov	r4,r22
     f18:	980b883a 	mov	r5,r19
     f1c:	0003da80 	call	3da8 <__muldf3>
     f20:	01afa234 	movhi	r6,48776
     f24:	01ef6a74 	movhi	r7,48553
     f28:	318e3504 	addi	r6,r6,14548
     f2c:	39feba44 	addi	r7,r7,-1303
     f30:	1009883a 	mov	r4,r2
     f34:	180b883a 	mov	r5,r3
     f38:	102b883a 	mov	r21,r2
     f3c:	1829883a 	mov	r20,r3
     f40:	0003da80 	call	3da8 <__muldf3>
     f44:	01af6d74 	movhi	r6,48565
     f48:	01cf88b4 	movhi	r7,15906
     f4c:	31ac7104 	addi	r6,r6,-20028
     f50:	39fba784 	addi	r7,r7,-4450
     f54:	1009883a 	mov	r4,r2
     f58:	180b883a 	mov	r5,r3
     f5c:	0002ab00 	call	2ab0 <__adddf3>
     f60:	a80d883a 	mov	r6,r21
     f64:	a00f883a 	mov	r7,r20
     f68:	1009883a 	mov	r4,r2
     f6c:	180b883a 	mov	r5,r3
     f70:	0003da80 	call	3da8 <__muldf3>
     f74:	01a02734 	movhi	r6,32924
     f78:	01cfa4b4 	movhi	r7,16018
     f7c:	3194ab44 	addi	r6,r6,21165
     f80:	39df93c4 	addi	r7,r7,32335
     f84:	1009883a 	mov	r4,r2
     f88:	180b883a 	mov	r5,r3
     f8c:	00044c00 	call	44c0 <__subdf3>
     f90:	a80d883a 	mov	r6,r21
     f94:	a00f883a 	mov	r7,r20
     f98:	1009883a 	mov	r4,r2
     f9c:	180b883a 	mov	r5,r3
     fa0:	0003da80 	call	3da8 <__muldf3>
     fa4:	018672f4 	movhi	r6,6603
     fa8:	01cfbeb4 	movhi	r7,16122
     fac:	31856404 	addi	r6,r6,5520
     fb0:	39c06804 	addi	r7,r7,416
     fb4:	1009883a 	mov	r4,r2
     fb8:	180b883a 	mov	r5,r3
     fbc:	0002ab00 	call	2ab0 <__adddf3>
     fc0:	a80d883a 	mov	r6,r21
     fc4:	a00f883a 	mov	r7,r20
     fc8:	1009883a 	mov	r4,r2
     fcc:	180b883a 	mov	r5,r3
     fd0:	0003da80 	call	3da8 <__muldf3>
     fd4:	0185b074 	movhi	r6,5825
     fd8:	01cfd5f4 	movhi	r7,16215
     fdc:	31945dc4 	addi	r6,r6,20855
     fe0:	39f05b04 	addi	r7,r7,-16020
     fe4:	1009883a 	mov	r4,r2
     fe8:	180b883a 	mov	r5,r3
     fec:	00044c00 	call	44c0 <__subdf3>
     ff0:	a80d883a 	mov	r6,r21
     ff4:	a00f883a 	mov	r7,r20
     ff8:	1009883a 	mov	r4,r2
     ffc:	180b883a 	mov	r5,r3
    1000:	0003da80 	call	3da8 <__muldf3>
    1004:	01955574 	movhi	r6,21845
    1008:	01cfe974 	movhi	r7,16293
    100c:	31955304 	addi	r6,r6,21836
    1010:	39d55544 	addi	r7,r7,21845
    1014:	1009883a 	mov	r4,r2
    1018:	180b883a 	mov	r5,r3
    101c:	0002ab00 	call	2ab0 <__adddf3>
    1020:	a80d883a 	mov	r6,r21
    1024:	a00f883a 	mov	r7,r20
    1028:	1009883a 	mov	r4,r2
    102c:	180b883a 	mov	r5,r3
    1030:	0003da80 	call	3da8 <__muldf3>
    1034:	1017883a 	mov	r11,r2
    1038:	1815883a 	mov	r10,r3
    103c:	a809883a 	mov	r4,r21
    1040:	a00b883a 	mov	r5,r20
    1044:	000d883a 	mov	r6,zero
    1048:	01cff834 	movhi	r7,16352
    104c:	da800215 	stw	r10,8(sp)
    1050:	dac00115 	stw	r11,4(sp)
    1054:	0003da80 	call	3da8 <__muldf3>
    1058:	dac00117 	ldw	r11,4(sp)
    105c:	da800217 	ldw	r10,8(sp)
    1060:	a809883a 	mov	r4,r21
    1064:	580d883a 	mov	r6,r11
    1068:	500f883a 	mov	r7,r10
    106c:	a00b883a 	mov	r5,r20
    1070:	1023883a 	mov	r17,r2
    1074:	1821883a 	mov	r16,r3
    1078:	0003da80 	call	3da8 <__muldf3>
    107c:	b80d883a 	mov	r6,r23
    1080:	e00f883a 	mov	r7,fp
    1084:	b009883a 	mov	r4,r22
    1088:	980b883a 	mov	r5,r19
    108c:	1029883a 	mov	r20,r2
    1090:	1825883a 	mov	r18,r3
    1094:	0003da80 	call	3da8 <__muldf3>
    1098:	a009883a 	mov	r4,r20
    109c:	900b883a 	mov	r5,r18
    10a0:	100d883a 	mov	r6,r2
    10a4:	180f883a 	mov	r7,r3
    10a8:	00044c00 	call	44c0 <__subdf3>
    10ac:	8809883a 	mov	r4,r17
    10b0:	800b883a 	mov	r5,r16
    10b4:	100d883a 	mov	r6,r2
    10b8:	180f883a 	mov	r7,r3
    10bc:	00044c00 	call	44c0 <__subdf3>
    10c0:	100d883a 	mov	r6,r2
    10c4:	180f883a 	mov	r7,r3
    10c8:	0009883a 	mov	r4,zero
    10cc:	014ffc34 	movhi	r5,16368
    10d0:	00044c00 	call	44c0 <__subdf3>
    10d4:	00008b06 	br	1304 <__kernel_cos+0x454>
    10d8:	200d883a 	mov	r6,r4
    10dc:	280f883a 	mov	r7,r5
    10e0:	0003da80 	call	3da8 <__muldf3>
    10e4:	01afa234 	movhi	r6,48776
    10e8:	01ef6a74 	movhi	r7,48553
    10ec:	318e3504 	addi	r6,r6,14548
    10f0:	39feba44 	addi	r7,r7,-1303
    10f4:	1009883a 	mov	r4,r2
    10f8:	180b883a 	mov	r5,r3
    10fc:	1025883a 	mov	r18,r2
    1100:	1823883a 	mov	r17,r3
    1104:	0003da80 	call	3da8 <__muldf3>
    1108:	01af6d74 	movhi	r6,48565
    110c:	01cf88b4 	movhi	r7,15906
    1110:	31ac7104 	addi	r6,r6,-20028
    1114:	39fba784 	addi	r7,r7,-4450
    1118:	1009883a 	mov	r4,r2
    111c:	180b883a 	mov	r5,r3
    1120:	0002ab00 	call	2ab0 <__adddf3>
    1124:	900d883a 	mov	r6,r18
    1128:	880f883a 	mov	r7,r17
    112c:	1009883a 	mov	r4,r2
    1130:	180b883a 	mov	r5,r3
    1134:	0003da80 	call	3da8 <__muldf3>
    1138:	01a02734 	movhi	r6,32924
    113c:	01cfa4b4 	movhi	r7,16018
    1140:	3194ab44 	addi	r6,r6,21165
    1144:	39df93c4 	addi	r7,r7,32335
    1148:	1009883a 	mov	r4,r2
    114c:	180b883a 	mov	r5,r3
    1150:	00044c00 	call	44c0 <__subdf3>
    1154:	900d883a 	mov	r6,r18
    1158:	880f883a 	mov	r7,r17
    115c:	1009883a 	mov	r4,r2
    1160:	180b883a 	mov	r5,r3
    1164:	0003da80 	call	3da8 <__muldf3>
    1168:	018672f4 	movhi	r6,6603
    116c:	01cfbeb4 	movhi	r7,16122
    1170:	31856404 	addi	r6,r6,5520
    1174:	39c06804 	addi	r7,r7,416
    1178:	1009883a 	mov	r4,r2
    117c:	180b883a 	mov	r5,r3
    1180:	0002ab00 	call	2ab0 <__adddf3>
    1184:	900d883a 	mov	r6,r18
    1188:	880f883a 	mov	r7,r17
    118c:	1009883a 	mov	r4,r2
    1190:	180b883a 	mov	r5,r3
    1194:	0003da80 	call	3da8 <__muldf3>
    1198:	0185b074 	movhi	r6,5825
    119c:	01cfd5f4 	movhi	r7,16215
    11a0:	31945dc4 	addi	r6,r6,20855
    11a4:	39f05b04 	addi	r7,r7,-16020
    11a8:	1009883a 	mov	r4,r2
    11ac:	180b883a 	mov	r5,r3
    11b0:	00044c00 	call	44c0 <__subdf3>
    11b4:	900d883a 	mov	r6,r18
    11b8:	880f883a 	mov	r7,r17
    11bc:	1009883a 	mov	r4,r2
    11c0:	180b883a 	mov	r5,r3
    11c4:	0003da80 	call	3da8 <__muldf3>
    11c8:	01955574 	movhi	r6,21845
    11cc:	01cfe974 	movhi	r7,16293
    11d0:	31955304 	addi	r6,r6,21836
    11d4:	39d55544 	addi	r7,r7,21845
    11d8:	1009883a 	mov	r4,r2
    11dc:	180b883a 	mov	r5,r3
    11e0:	0002ab00 	call	2ab0 <__adddf3>
    11e4:	900d883a 	mov	r6,r18
    11e8:	880f883a 	mov	r7,r17
    11ec:	1009883a 	mov	r4,r2
    11f0:	180b883a 	mov	r5,r3
    11f4:	0003da80 	call	3da8 <__muldf3>
    11f8:	1013883a 	mov	r9,r2
    11fc:	1017883a 	mov	r11,r2
    1200:	008ff4f4 	movhi	r2,16339
    1204:	108ccc84 	addi	r2,r2,13106
    1208:	1811883a 	mov	r8,r3
    120c:	902b883a 	mov	r21,r18
    1210:	8829883a 	mov	r20,r17
    1214:	1815883a 	mov	r10,r3
    1218:	143f880e 	bge	r2,r16,103c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700103c>
    121c:	008ffa74 	movhi	r2,16361
    1220:	14004416 	blt	r2,r16,1334 <__kernel_cos+0x484>
    1224:	00bff834 	movhi	r2,65504
    1228:	80a1883a 	add	r16,r16,r2
    122c:	000d883a 	mov	r6,zero
    1230:	800f883a 	mov	r7,r16
    1234:	0009883a 	mov	r4,zero
    1238:	014ffc34 	movhi	r5,16368
    123c:	da400115 	stw	r9,4(sp)
    1240:	d8c00215 	stw	r3,8(sp)
    1244:	00044c00 	call	44c0 <__subdf3>
    1248:	da000217 	ldw	r8,8(sp)
    124c:	da400117 	ldw	r9,4(sp)
    1250:	102b883a 	mov	r21,r2
    1254:	d8c00015 	stw	r3,0(sp)
    1258:	9009883a 	mov	r4,r18
    125c:	880b883a 	mov	r5,r17
    1260:	000d883a 	mov	r6,zero
    1264:	01cff834 	movhi	r7,16352
    1268:	da000215 	stw	r8,8(sp)
    126c:	da400115 	stw	r9,4(sp)
    1270:	0003da80 	call	3da8 <__muldf3>
    1274:	800f883a 	mov	r7,r16
    1278:	000d883a 	mov	r6,zero
    127c:	1009883a 	mov	r4,r2
    1280:	180b883a 	mov	r5,r3
    1284:	00044c00 	call	44c0 <__subdf3>
    1288:	da400117 	ldw	r9,4(sp)
    128c:	da000217 	ldw	r8,8(sp)
    1290:	9009883a 	mov	r4,r18
    1294:	480d883a 	mov	r6,r9
    1298:	400f883a 	mov	r7,r8
    129c:	880b883a 	mov	r5,r17
    12a0:	1029883a 	mov	r20,r2
    12a4:	1821883a 	mov	r16,r3
    12a8:	0003da80 	call	3da8 <__muldf3>
    12ac:	b80d883a 	mov	r6,r23
    12b0:	e00f883a 	mov	r7,fp
    12b4:	b009883a 	mov	r4,r22
    12b8:	980b883a 	mov	r5,r19
    12bc:	1025883a 	mov	r18,r2
    12c0:	1823883a 	mov	r17,r3
    12c4:	0003da80 	call	3da8 <__muldf3>
    12c8:	100d883a 	mov	r6,r2
    12cc:	180f883a 	mov	r7,r3
    12d0:	9009883a 	mov	r4,r18
    12d4:	880b883a 	mov	r5,r17
    12d8:	00044c00 	call	44c0 <__subdf3>
    12dc:	100d883a 	mov	r6,r2
    12e0:	180f883a 	mov	r7,r3
    12e4:	a009883a 	mov	r4,r20
    12e8:	800b883a 	mov	r5,r16
    12ec:	00044c00 	call	44c0 <__subdf3>
    12f0:	d9400017 	ldw	r5,0(sp)
    12f4:	100d883a 	mov	r6,r2
    12f8:	180f883a 	mov	r7,r3
    12fc:	a809883a 	mov	r4,r21
    1300:	00044c00 	call	44c0 <__subdf3>
    1304:	dfc00c17 	ldw	ra,48(sp)
    1308:	df000b17 	ldw	fp,44(sp)
    130c:	ddc00a17 	ldw	r23,40(sp)
    1310:	dd800917 	ldw	r22,36(sp)
    1314:	dd400817 	ldw	r21,32(sp)
    1318:	dd000717 	ldw	r20,28(sp)
    131c:	dcc00617 	ldw	r19,24(sp)
    1320:	dc800517 	ldw	r18,20(sp)
    1324:	dc400417 	ldw	r17,16(sp)
    1328:	dc000317 	ldw	r16,12(sp)
    132c:	dec00d04 	addi	sp,sp,52
    1330:	f800283a 	ret
    1334:	008ff9f4 	movhi	r2,16359
    1338:	002b883a 	mov	r21,zero
    133c:	d8800015 	stw	r2,0(sp)
    1340:	040ff4b4 	movhi	r16,16338
    1344:	003fc406 	br	1258 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001258>
    1348:	0005883a 	mov	r2,zero
    134c:	00cffc34 	movhi	r3,16368
    1350:	003fec06 	br	1304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001304>

00001354 <__kernel_rem_pio2>:
    1354:	deff5a04 	addi	sp,sp,-664
    1358:	da00a617 	ldw	r8,664(sp)
    135c:	00c000b4 	movhi	r3,2
    1360:	18edf504 	addi	r3,r3,-18476
    1364:	4205883a 	add	r2,r8,r8
    1368:	1085883a 	add	r2,r2,r2
    136c:	1885883a 	add	r2,r3,r2
    1370:	d9008e15 	stw	r4,568(sp)
    1374:	d9408f15 	stw	r5,572(sp)
    1378:	313fff44 	addi	r4,r6,-3
    137c:	01400604 	movi	r5,24
    1380:	dd80a215 	stw	r22,648(sp)
    1384:	dc009c15 	stw	r16,624(sp)
    1388:	dfc0a515 	stw	ra,660(sp)
    138c:	df00a415 	stw	fp,656(sp)
    1390:	ddc0a315 	stw	r23,652(sp)
    1394:	dd40a115 	stw	r21,644(sp)
    1398:	dd00a015 	stw	r20,640(sp)
    139c:	dcc09f15 	stw	r19,636(sp)
    13a0:	dc809e15 	stw	r18,632(sp)
    13a4:	dc409d15 	stw	r17,628(sp)
    13a8:	3021883a 	mov	r16,r6
    13ac:	d9c09315 	stw	r7,588(sp)
    13b0:	15800017 	ldw	r22,0(r2)
    13b4:	00027680 	call	2768 <__divsi3>
    13b8:	da009317 	ldw	r8,588(sp)
    13bc:	d8809215 	stw	r2,584(sp)
    13c0:	423fffc4 	addi	r8,r8,-1
    13c4:	da008d15 	stw	r8,564(sp)
    13c8:	10033b16 	blt	r2,zero,20b8 <__kernel_rem_pio2+0xd64>
    13cc:	da009217 	ldw	r8,584(sp)
    13d0:	d9009217 	ldw	r4,584(sp)
    13d4:	42000044 	addi	r8,r8,1
    13d8:	40fffa24 	muli	r3,r8,-24
    13dc:	da009515 	stw	r8,596(sp)
    13e0:	da008d17 	ldw	r8,564(sp)
    13e4:	1c07883a 	add	r3,r3,r16
    13e8:	d8c09015 	stw	r3,576(sp)
    13ec:	b205883a 	add	r2,r22,r8
    13f0:	2223c83a 	sub	r17,r4,r8
    13f4:	10001016 	blt	r2,zero,1438 <__kernel_rem_pio2+0xe4>
    13f8:	da00a717 	ldw	r8,668(sp)
    13fc:	8c65883a 	add	r18,r17,r17
    1400:	94a5883a 	add	r18,r18,r18
    1404:	1445883a 	add	r2,r2,r17
    1408:	dcc05004 	addi	r19,sp,320
    140c:	44a5883a 	add	r18,r8,r18
    1410:	14000044 	addi	r16,r2,1
    1414:	88015316 	blt	r17,zero,1964 <__kernel_rem_pio2+0x610>
    1418:	91000017 	ldw	r4,0(r18)
    141c:	0004e3c0 	call	4e3c <__floatsidf>
    1420:	98800015 	stw	r2,0(r19)
    1424:	98c00115 	stw	r3,4(r19)
    1428:	8c400044 	addi	r17,r17,1
    142c:	9cc00204 	addi	r19,r19,8
    1430:	94800104 	addi	r18,r18,4
    1434:	8c3ff71e 	bne	r17,r16,1414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001414>
    1438:	b0002816 	blt	r22,zero,14dc <__kernel_rem_pio2+0x188>
    143c:	da008d17 	ldw	r8,564(sp)
    1440:	b4c00044 	addi	r19,r22,1
    1444:	982690fa 	slli	r19,r19,3
    1448:	402490fa 	slli	r18,r8,3
    144c:	da008e17 	ldw	r8,568(sp)
    1450:	d8805004 	addi	r2,sp,320
    1454:	94000204 	addi	r16,r18,8
    1458:	d823883a 	mov	r17,sp
    145c:	14a5883a 	add	r18,r2,r18
    1460:	dcef883a 	add	r23,sp,r19
    1464:	4421883a 	add	r16,r8,r16
    1468:	dd809115 	stw	r22,580(sp)
    146c:	4039883a 	mov	fp,r8
    1470:	da008d17 	ldw	r8,564(sp)
    1474:	40016016 	blt	r8,zero,19f8 <__kernel_rem_pio2+0x6a4>
    1478:	e027883a 	mov	r19,fp
    147c:	9029883a 	mov	r20,r18
    1480:	002d883a 	mov	r22,zero
    1484:	002b883a 	mov	r21,zero
    1488:	a1800017 	ldw	r6,0(r20)
    148c:	a1c00117 	ldw	r7,4(r20)
    1490:	99000017 	ldw	r4,0(r19)
    1494:	99400117 	ldw	r5,4(r19)
    1498:	9cc00204 	addi	r19,r19,8
    149c:	a53ffe04 	addi	r20,r20,-8
    14a0:	0003da80 	call	3da8 <__muldf3>
    14a4:	b009883a 	mov	r4,r22
    14a8:	a80b883a 	mov	r5,r21
    14ac:	100d883a 	mov	r6,r2
    14b0:	180f883a 	mov	r7,r3
    14b4:	0002ab00 	call	2ab0 <__adddf3>
    14b8:	102d883a 	mov	r22,r2
    14bc:	182b883a 	mov	r21,r3
    14c0:	9c3ff11e 	bne	r19,r16,1488 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001488>
    14c4:	8d800015 	stw	r22,0(r17)
    14c8:	8d400115 	stw	r21,4(r17)
    14cc:	8c400204 	addi	r17,r17,8
    14d0:	94800204 	addi	r18,r18,8
    14d4:	8dffe61e 	bne	r17,r23,1470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001470>
    14d8:	dd809117 	ldw	r22,580(sp)
    14dc:	00d00034 	movhi	r3,16384
    14e0:	da009317 	ldw	r8,588(sp)
    14e4:	18ffff84 	addi	r3,r3,-2
    14e8:	b0c7883a 	add	r3,r22,r3
    14ec:	18c7883a 	add	r3,r3,r3
    14f0:	402090fa 	slli	r16,r8,3
    14f4:	18c7883a 	add	r3,r3,r3
    14f8:	da007804 	addi	r8,sp,480
    14fc:	40d1883a 	add	r8,r8,r3
    1500:	b0bfffc4 	addi	r2,r22,-1
    1504:	da009615 	stw	r8,600(sp)
    1508:	da008e17 	ldw	r8,568(sp)
    150c:	1085883a 	add	r2,r2,r2
    1510:	1085883a 	add	r2,r2,r2
    1514:	19000104 	addi	r4,r3,4
    1518:	d885883a 	add	r2,sp,r2
    151c:	4421883a 	add	r16,r8,r16
    1520:	da007804 	addi	r8,sp,480
    1524:	4111883a 	add	r8,r8,r4
    1528:	10807804 	addi	r2,r2,480
    152c:	da009715 	stw	r8,604(sp)
    1530:	b025883a 	mov	r18,r22
    1534:	d8809815 	stw	r2,608(sp)
    1538:	dd809415 	stw	r22,592(sp)
    153c:	900490fa 	slli	r2,r18,3
    1540:	d885883a 	add	r2,sp,r2
    1544:	17000017 	ldw	fp,0(r2)
    1548:	15400117 	ldw	r21,4(r2)
    154c:	04802b0e 	bge	zero,r18,15fc <__kernel_rem_pio2+0x2a8>
    1550:	00880034 	movhi	r2,8192
    1554:	10bfffc4 	addi	r2,r2,-1
    1558:	90a9883a 	add	r20,r18,r2
    155c:	a02890fa 	slli	r20,r20,3
    1560:	dc407804 	addi	r17,sp,480
    1564:	dcfffe04 	addi	r19,sp,-8
    1568:	dd29883a 	add	r20,sp,r20
    156c:	000d883a 	mov	r6,zero
    1570:	01cf9c34 	movhi	r7,15984
    1574:	e009883a 	mov	r4,fp
    1578:	a80b883a 	mov	r5,r21
    157c:	0003da80 	call	3da8 <__muldf3>
    1580:	180b883a 	mov	r5,r3
    1584:	1009883a 	mov	r4,r2
    1588:	0004dbc0 	call	4dbc <__fixdfsi>
    158c:	1009883a 	mov	r4,r2
    1590:	0004e3c0 	call	4e3c <__floatsidf>
    1594:	000d883a 	mov	r6,zero
    1598:	01d05c34 	movhi	r7,16752
    159c:	1009883a 	mov	r4,r2
    15a0:	180b883a 	mov	r5,r3
    15a4:	102f883a 	mov	r23,r2
    15a8:	182d883a 	mov	r22,r3
    15ac:	0003da80 	call	3da8 <__muldf3>
    15b0:	100d883a 	mov	r6,r2
    15b4:	180f883a 	mov	r7,r3
    15b8:	e009883a 	mov	r4,fp
    15bc:	a80b883a 	mov	r5,r21
    15c0:	00044c00 	call	44c0 <__subdf3>
    15c4:	180b883a 	mov	r5,r3
    15c8:	1009883a 	mov	r4,r2
    15cc:	0004dbc0 	call	4dbc <__fixdfsi>
    15d0:	a1800017 	ldw	r6,0(r20)
    15d4:	a1c00117 	ldw	r7,4(r20)
    15d8:	88800015 	stw	r2,0(r17)
    15dc:	b809883a 	mov	r4,r23
    15e0:	b00b883a 	mov	r5,r22
    15e4:	0002ab00 	call	2ab0 <__adddf3>
    15e8:	a53ffe04 	addi	r20,r20,-8
    15ec:	1039883a 	mov	fp,r2
    15f0:	182b883a 	mov	r21,r3
    15f4:	8c400104 	addi	r17,r17,4
    15f8:	a4ffdc1e 	bne	r20,r19,156c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700156c>
    15fc:	d9809017 	ldw	r6,576(sp)
    1600:	a80b883a 	mov	r5,r21
    1604:	e009883a 	mov	r4,fp
    1608:	00025b00 	call	25b0 <scalbn>
    160c:	000d883a 	mov	r6,zero
    1610:	01cff034 	movhi	r7,16320
    1614:	1009883a 	mov	r4,r2
    1618:	180b883a 	mov	r5,r3
    161c:	1027883a 	mov	r19,r2
    1620:	1823883a 	mov	r17,r3
    1624:	0003da80 	call	3da8 <__muldf3>
    1628:	1009883a 	mov	r4,r2
    162c:	180b883a 	mov	r5,r3
    1630:	00023c40 	call	23c4 <floor>
    1634:	000d883a 	mov	r6,zero
    1638:	01d00834 	movhi	r7,16416
    163c:	1009883a 	mov	r4,r2
    1640:	180b883a 	mov	r5,r3
    1644:	0003da80 	call	3da8 <__muldf3>
    1648:	100d883a 	mov	r6,r2
    164c:	180f883a 	mov	r7,r3
    1650:	9809883a 	mov	r4,r19
    1654:	880b883a 	mov	r5,r17
    1658:	00044c00 	call	44c0 <__subdf3>
    165c:	180b883a 	mov	r5,r3
    1660:	1009883a 	mov	r4,r2
    1664:	1827883a 	mov	r19,r3
    1668:	1029883a 	mov	r20,r2
    166c:	0004dbc0 	call	4dbc <__fixdfsi>
    1670:	1009883a 	mov	r4,r2
    1674:	1023883a 	mov	r17,r2
    1678:	0004e3c0 	call	4e3c <__floatsidf>
    167c:	a009883a 	mov	r4,r20
    1680:	100d883a 	mov	r6,r2
    1684:	180f883a 	mov	r7,r3
    1688:	980b883a 	mov	r5,r19
    168c:	00044c00 	call	44c0 <__subdf3>
    1690:	d9009017 	ldw	r4,576(sp)
    1694:	1013883a 	mov	r9,r2
    1698:	102b883a 	mov	r21,r2
    169c:	1811883a 	mov	r8,r3
    16a0:	0100b30e 	bge	zero,r4,1970 <__kernel_rem_pio2+0x61c>
    16a4:	90bfffc4 	addi	r2,r18,-1
    16a8:	1085883a 	add	r2,r2,r2
    16ac:	1085883a 	add	r2,r2,r2
    16b0:	d885883a 	add	r2,sp,r2
    16b4:	10807804 	addi	r2,r2,480
    16b8:	d9809017 	ldw	r6,576(sp)
    16bc:	11400017 	ldw	r5,0(r2)
    16c0:	01000604 	movi	r4,24
    16c4:	2189c83a 	sub	r4,r4,r6
    16c8:	290dd83a 	sra	r6,r5,r4
    16cc:	d9c09017 	ldw	r7,576(sp)
    16d0:	04c005c4 	movi	r19,23
    16d4:	3108983a 	sll	r4,r6,r4
    16d8:	99e7c83a 	sub	r19,r19,r7
    16dc:	89a3883a 	add	r17,r17,r6
    16e0:	2909c83a 	sub	r4,r5,r4
    16e4:	24e7d83a 	sra	r19,r4,r19
    16e8:	11000015 	stw	r4,0(r2)
    16ec:	04c02a0e 	bge	zero,r19,1798 <__kernel_rem_pio2+0x444>
    16f0:	8c400044 	addi	r17,r17,1
    16f4:	0481570e 	bge	zero,r18,1c54 <__kernel_rem_pio2+0x900>
    16f8:	02804034 	movhi	r10,256
    16fc:	52bfffc4 	addi	r10,r10,-1
    1700:	d8807804 	addi	r2,sp,480
    1704:	000b883a 	mov	r5,zero
    1708:	0029883a 	mov	r20,zero
    170c:	01c04034 	movhi	r7,256
    1710:	00000706 	br	1730 <__kernel_rem_pio2+0x3dc>
    1714:	390dc83a 	sub	r6,r7,r4
    1718:	20000226 	beq	r4,zero,1724 <__kernel_rem_pio2+0x3d0>
    171c:	11800015 	stw	r6,0(r2)
    1720:	05000044 	movi	r20,1
    1724:	29400044 	addi	r5,r5,1
    1728:	10800104 	addi	r2,r2,4
    172c:	2c80080e 	bge	r5,r18,1750 <__kernel_rem_pio2+0x3fc>
    1730:	11000017 	ldw	r4,0(r2)
    1734:	a03ff726 	beq	r20,zero,1714 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001714>
    1738:	5109c83a 	sub	r4,r10,r4
    173c:	11000015 	stw	r4,0(r2)
    1740:	29400044 	addi	r5,r5,1
    1744:	05000044 	movi	r20,1
    1748:	10800104 	addi	r2,r2,4
    174c:	2cbff816 	blt	r5,r18,1730 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001730>
    1750:	d9009017 	ldw	r4,576(sp)
    1754:	01000e0e 	bge	zero,r4,1790 <__kernel_rem_pio2+0x43c>
    1758:	00800044 	movi	r2,1
    175c:	20808d26 	beq	r4,r2,1994 <__kernel_rem_pio2+0x640>
    1760:	00800084 	movi	r2,2
    1764:	20800a1e 	bne	r4,r2,1790 <__kernel_rem_pio2+0x43c>
    1768:	90bfffc4 	addi	r2,r18,-1
    176c:	1085883a 	add	r2,r2,r2
    1770:	1085883a 	add	r2,r2,r2
    1774:	d885883a 	add	r2,sp,r2
    1778:	10807804 	addi	r2,r2,480
    177c:	11400017 	ldw	r5,0(r2)
    1780:	01001034 	movhi	r4,64
    1784:	213fffc4 	addi	r4,r4,-1
    1788:	2908703a 	and	r4,r5,r4
    178c:	11000015 	stw	r4,0(r2)
    1790:	00800084 	movi	r2,2
    1794:	98805d26 	beq	r19,r2,190c <__kernel_rem_pio2+0x5b8>
    1798:	400b883a 	mov	r5,r8
    179c:	000d883a 	mov	r6,zero
    17a0:	000f883a 	mov	r7,zero
    17a4:	a809883a 	mov	r4,r21
    17a8:	da009b15 	stw	r8,620(sp)
    17ac:	0003c440 	call	3c44 <__eqdf2>
    17b0:	da009b17 	ldw	r8,620(sp)
    17b4:	10012b1e 	bne	r2,zero,1c64 <__kernel_rem_pio2+0x910>
    17b8:	da009417 	ldw	r8,592(sp)
    17bc:	917fffc4 	addi	r5,r18,-1
    17c0:	2a000e16 	blt	r5,r8,17fc <__kernel_rem_pio2+0x4a8>
    17c4:	00900034 	movhi	r2,16384
    17c8:	10bfffc4 	addi	r2,r2,-1
    17cc:	9085883a 	add	r2,r18,r2
    17d0:	1085883a 	add	r2,r2,r2
    17d4:	d9809717 	ldw	r6,604(sp)
    17d8:	1085883a 	add	r2,r2,r2
    17dc:	d9007804 	addi	r4,sp,480
    17e0:	0007883a 	mov	r3,zero
    17e4:	2085883a 	add	r2,r4,r2
    17e8:	11000017 	ldw	r4,0(r2)
    17ec:	10bfff04 	addi	r2,r2,-4
    17f0:	1906b03a 	or	r3,r3,r4
    17f4:	11bffc1e 	bne	r2,r6,17e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017e8>
    17f8:	1800821e 	bne	r3,zero,1a04 <__kernel_rem_pio2+0x6b0>
    17fc:	da009817 	ldw	r8,608(sp)
    1800:	40800017 	ldw	r2,0(r8)
    1804:	1001151e 	bne	r2,zero,1c5c <__kernel_rem_pio2+0x908>
    1808:	d8809617 	ldw	r2,600(sp)
    180c:	05000044 	movi	r20,1
    1810:	10bfff04 	addi	r2,r2,-4
    1814:	10c00117 	ldw	r3,4(r2)
    1818:	a5000044 	addi	r20,r20,1
    181c:	183ffc26 	beq	r3,zero,1810 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001810>
    1820:	9529883a 	add	r20,r18,r20
    1824:	90800044 	addi	r2,r18,1
    1828:	dd009115 	stw	r20,580(sp)
    182c:	a0803216 	blt	r20,r2,18f8 <__kernel_rem_pio2+0x5a4>
    1830:	da009317 	ldw	r8,588(sp)
    1834:	d8c09117 	ldw	r3,580(sp)
    1838:	44a3883a 	add	r17,r8,r18
    183c:	da009217 	ldw	r8,584(sp)
    1840:	882290fa 	slli	r17,r17,3
    1844:	40a5883a 	add	r18,r8,r2
    1848:	da009517 	ldw	r8,596(sp)
    184c:	100490fa 	slli	r2,r2,3
    1850:	94a5883a 	add	r18,r18,r18
    1854:	40eb883a 	add	r21,r8,r3
    1858:	da00a717 	ldw	r8,668(sp)
    185c:	ad6b883a 	add	r21,r21,r21
    1860:	94a5883a 	add	r18,r18,r18
    1864:	ad6b883a 	add	r21,r21,r21
    1868:	d8c05004 	addi	r3,sp,320
    186c:	44a5883a 	add	r18,r8,r18
    1870:	1c63883a 	add	r17,r3,r17
    1874:	d8a7883a 	add	r19,sp,r2
    1878:	456b883a 	add	r21,r8,r21
    187c:	91000017 	ldw	r4,0(r18)
    1880:	0004e3c0 	call	4e3c <__floatsidf>
    1884:	da008d17 	ldw	r8,564(sp)
    1888:	88800015 	stw	r2,0(r17)
    188c:	88c00115 	stw	r3,4(r17)
    1890:	40001b16 	blt	r8,zero,1900 <__kernel_rem_pio2+0x5ac>
    1894:	dd008e17 	ldw	r20,568(sp)
    1898:	882d883a 	mov	r22,r17
    189c:	002f883a 	mov	r23,zero
    18a0:	0039883a 	mov	fp,zero
    18a4:	b1800017 	ldw	r6,0(r22)
    18a8:	b1c00117 	ldw	r7,4(r22)
    18ac:	a1000017 	ldw	r4,0(r20)
    18b0:	a1400117 	ldw	r5,4(r20)
    18b4:	a5000204 	addi	r20,r20,8
    18b8:	b5bffe04 	addi	r22,r22,-8
    18bc:	0003da80 	call	3da8 <__muldf3>
    18c0:	b809883a 	mov	r4,r23
    18c4:	e00b883a 	mov	r5,fp
    18c8:	100d883a 	mov	r6,r2
    18cc:	180f883a 	mov	r7,r3
    18d0:	0002ab00 	call	2ab0 <__adddf3>
    18d4:	102f883a 	mov	r23,r2
    18d8:	1839883a 	mov	fp,r3
    18dc:	a43ff11e 	bne	r20,r16,18a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70018a4>
    18e0:	9dc00015 	stw	r23,0(r19)
    18e4:	9f000115 	stw	fp,4(r19)
    18e8:	94800104 	addi	r18,r18,4
    18ec:	8c400204 	addi	r17,r17,8
    18f0:	9cc00204 	addi	r19,r19,8
    18f4:	957fe11e 	bne	r18,r21,187c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700187c>
    18f8:	dc809117 	ldw	r18,580(sp)
    18fc:	003f0f06 	br	153c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700153c>
    1900:	002f883a 	mov	r23,zero
    1904:	0039883a 	mov	fp,zero
    1908:	003ff506 	br	18e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70018e0>
    190c:	480d883a 	mov	r6,r9
    1910:	180f883a 	mov	r7,r3
    1914:	0009883a 	mov	r4,zero
    1918:	014ffc34 	movhi	r5,16368
    191c:	00044c00 	call	44c0 <__subdf3>
    1920:	102b883a 	mov	r21,r2
    1924:	1811883a 	mov	r8,r3
    1928:	a03f9b26 	beq	r20,zero,1798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001798>
    192c:	d9809017 	ldw	r6,576(sp)
    1930:	0009883a 	mov	r4,zero
    1934:	014ffc34 	movhi	r5,16368
    1938:	d8c09b15 	stw	r3,620(sp)
    193c:	00025b00 	call	25b0 <scalbn>
    1940:	da009b17 	ldw	r8,620(sp)
    1944:	a809883a 	mov	r4,r21
    1948:	100d883a 	mov	r6,r2
    194c:	400b883a 	mov	r5,r8
    1950:	180f883a 	mov	r7,r3
    1954:	00044c00 	call	44c0 <__subdf3>
    1958:	102b883a 	mov	r21,r2
    195c:	1811883a 	mov	r8,r3
    1960:	003f8d06 	br	1798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001798>
    1964:	0005883a 	mov	r2,zero
    1968:	0007883a 	mov	r3,zero
    196c:	003eac06 	br	1420 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001420>
    1970:	d8809017 	ldw	r2,576(sp)
    1974:	1000121e 	bne	r2,zero,19c0 <__kernel_rem_pio2+0x66c>
    1978:	90bfffc4 	addi	r2,r18,-1
    197c:	1085883a 	add	r2,r2,r2
    1980:	1085883a 	add	r2,r2,r2
    1984:	d885883a 	add	r2,sp,r2
    1988:	14c07817 	ldw	r19,480(r2)
    198c:	9827d5fa 	srai	r19,r19,23
    1990:	003f5606 	br	16ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016ec>
    1994:	90bfffc4 	addi	r2,r18,-1
    1998:	1085883a 	add	r2,r2,r2
    199c:	1085883a 	add	r2,r2,r2
    19a0:	d885883a 	add	r2,sp,r2
    19a4:	10807804 	addi	r2,r2,480
    19a8:	11000017 	ldw	r4,0(r2)
    19ac:	01402034 	movhi	r5,128
    19b0:	297fffc4 	addi	r5,r5,-1
    19b4:	2148703a 	and	r4,r4,r5
    19b8:	11000015 	stw	r4,0(r2)
    19bc:	003f7406 	br	1790 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001790>
    19c0:	4809883a 	mov	r4,r9
    19c4:	180b883a 	mov	r5,r3
    19c8:	000d883a 	mov	r6,zero
    19cc:	01cff834 	movhi	r7,16352
    19d0:	d8c09a15 	stw	r3,616(sp)
    19d4:	d8c09b15 	stw	r3,620(sp)
    19d8:	da409915 	stw	r9,612(sp)
    19dc:	0003ccc0 	call	3ccc <__gedf2>
    19e0:	d8c09a17 	ldw	r3,616(sp)
    19e4:	da009b17 	ldw	r8,620(sp)
    19e8:	da409917 	ldw	r9,612(sp)
    19ec:	1000920e 	bge	r2,zero,1c38 <__kernel_rem_pio2+0x8e4>
    19f0:	0027883a 	mov	r19,zero
    19f4:	003f6806 	br	1798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001798>
    19f8:	002d883a 	mov	r22,zero
    19fc:	002b883a 	mov	r21,zero
    1a00:	003eb006 	br	14c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70014c4>
    1a04:	2945883a 	add	r2,r5,r5
    1a08:	da009017 	ldw	r8,576(sp)
    1a0c:	1085883a 	add	r2,r2,r2
    1a10:	d885883a 	add	r2,sp,r2
    1a14:	10807817 	ldw	r2,480(r2)
    1a18:	423ffa04 	addi	r8,r8,-24
    1a1c:	dc409115 	stw	r17,580(sp)
    1a20:	dcc08d15 	stw	r19,564(sp)
    1a24:	da009015 	stw	r8,576(sp)
    1a28:	dd809417 	ldw	r22,592(sp)
    1a2c:	2823883a 	mov	r17,r5
    1a30:	10000e1e 	bne	r2,zero,1a6c <__kernel_rem_pio2+0x718>
    1a34:	00900034 	movhi	r2,16384
    1a38:	10bfffc4 	addi	r2,r2,-1
    1a3c:	2885883a 	add	r2,r5,r2
    1a40:	1085883a 	add	r2,r2,r2
    1a44:	d8c07804 	addi	r3,sp,480
    1a48:	1085883a 	add	r2,r2,r2
    1a4c:	1885883a 	add	r2,r3,r2
    1a50:	4007883a 	mov	r3,r8
    1a54:	10bfff04 	addi	r2,r2,-4
    1a58:	11000117 	ldw	r4,4(r2)
    1a5c:	8c7fffc4 	addi	r17,r17,-1
    1a60:	18fffa04 	addi	r3,r3,-24
    1a64:	203ffb26 	beq	r4,zero,1a54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a54>
    1a68:	d8c09015 	stw	r3,576(sp)
    1a6c:	d9809017 	ldw	r6,576(sp)
    1a70:	0009883a 	mov	r4,zero
    1a74:	014ffc34 	movhi	r5,16368
    1a78:	00025b00 	call	25b0 <scalbn>
    1a7c:	1029883a 	mov	r20,r2
    1a80:	182b883a 	mov	r21,r3
    1a84:	88018416 	blt	r17,zero,2098 <__kernel_rem_pio2+0xd44>
    1a88:	881090fa 	slli	r8,r17,3
    1a8c:	d8c07804 	addi	r3,sp,480
    1a90:	da008e15 	stw	r8,568(sp)
    1a94:	d8808e17 	ldw	r2,568(sp)
    1a98:	8c51883a 	add	r8,r17,r17
    1a9c:	4211883a 	add	r8,r8,r8
    1aa0:	d8a1883a 	add	r16,sp,r2
    1aa4:	1a25883a 	add	r18,r3,r8
    1aa8:	da3ffe04 	addi	r8,sp,-8
    1aac:	da008c15 	stw	r8,560(sp)
    1ab0:	8039883a 	mov	fp,r16
    1ab4:	91000017 	ldw	r4,0(r18)
    1ab8:	e73ffe04 	addi	fp,fp,-8
    1abc:	94bfff04 	addi	r18,r18,-4
    1ac0:	0004e3c0 	call	4e3c <__floatsidf>
    1ac4:	a00d883a 	mov	r6,r20
    1ac8:	a80f883a 	mov	r7,r21
    1acc:	1009883a 	mov	r4,r2
    1ad0:	180b883a 	mov	r5,r3
    1ad4:	0003da80 	call	3da8 <__muldf3>
    1ad8:	a009883a 	mov	r4,r20
    1adc:	a80b883a 	mov	r5,r21
    1ae0:	e0800215 	stw	r2,8(fp)
    1ae4:	e0c00315 	stw	r3,12(fp)
    1ae8:	000d883a 	mov	r6,zero
    1aec:	01cf9c34 	movhi	r7,15984
    1af0:	0003da80 	call	3da8 <__muldf3>
    1af4:	da008c17 	ldw	r8,560(sp)
    1af8:	1029883a 	mov	r20,r2
    1afc:	182b883a 	mov	r21,r3
    1b00:	e23fec1e 	bne	fp,r8,1ab4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ab4>
    1b04:	0029883a 	mov	r20,zero
    1b08:	b0004f16 	blt	r22,zero,1c48 <__kernel_rem_pio2+0x8f4>
    1b0c:	054000b4 	movhi	r21,2
    1b10:	014ffe74 	movhi	r5,16377
    1b14:	ad6de704 	addi	r21,r21,-18532
    1b18:	8027883a 	mov	r19,r16
    1b1c:	01100034 	movhi	r4,16384
    1b20:	29487ec4 	addi	r5,r5,8699
    1b24:	0039883a 	mov	fp,zero
    1b28:	002f883a 	mov	r23,zero
    1b2c:	0025883a 	mov	r18,zero
    1b30:	00000506 	br	1b48 <__kernel_rem_pio2+0x7f4>
    1b34:	9cc00204 	addi	r19,r19,8
    1b38:	a4800f16 	blt	r20,r18,1b78 <__kernel_rem_pio2+0x824>
    1b3c:	a9000017 	ldw	r4,0(r21)
    1b40:	a9400117 	ldw	r5,4(r21)
    1b44:	ad400204 	addi	r21,r21,8
    1b48:	99800017 	ldw	r6,0(r19)
    1b4c:	99c00117 	ldw	r7,4(r19)
    1b50:	94800044 	addi	r18,r18,1
    1b54:	0003da80 	call	3da8 <__muldf3>
    1b58:	e009883a 	mov	r4,fp
    1b5c:	b80b883a 	mov	r5,r23
    1b60:	100d883a 	mov	r6,r2
    1b64:	180f883a 	mov	r7,r3
    1b68:	0002ab00 	call	2ab0 <__adddf3>
    1b6c:	1039883a 	mov	fp,r2
    1b70:	182f883a 	mov	r23,r3
    1b74:	b4bfef0e 	bge	r22,r18,1b34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b34>
    1b78:	a00490fa 	slli	r2,r20,3
    1b7c:	da008c17 	ldw	r8,560(sp)
    1b80:	843ffe04 	addi	r16,r16,-8
    1b84:	d885883a 	add	r2,sp,r2
    1b88:	10802804 	addi	r2,r2,160
    1b8c:	17000015 	stw	fp,0(r2)
    1b90:	15c00115 	stw	r23,4(r2)
    1b94:	a5000044 	addi	r20,r20,1
    1b98:	823fdb1e 	bne	r16,r8,1b08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b08>
    1b9c:	da00a617 	ldw	r8,664(sp)
    1ba0:	00800084 	movi	r2,2
    1ba4:	12006616 	blt	r2,r8,1d40 <__kernel_rem_pio2+0x9ec>
    1ba8:	0200de16 	blt	zero,r8,1f24 <__kernel_rem_pio2+0xbd0>
    1bac:	4000141e 	bne	r8,zero,1c00 <__kernel_rem_pio2+0x8ac>
    1bb0:	da008e17 	ldw	r8,568(sp)
    1bb4:	d8802804 	addi	r2,sp,160
    1bb8:	0007883a 	mov	r3,zero
    1bbc:	1225883a 	add	r18,r2,r8
    1bc0:	043fffc4 	movi	r16,-1
    1bc4:	0005883a 	mov	r2,zero
    1bc8:	91800017 	ldw	r6,0(r18)
    1bcc:	91c00117 	ldw	r7,4(r18)
    1bd0:	1009883a 	mov	r4,r2
    1bd4:	180b883a 	mov	r5,r3
    1bd8:	8c7fffc4 	addi	r17,r17,-1
    1bdc:	0002ab00 	call	2ab0 <__adddf3>
    1be0:	94bffe04 	addi	r18,r18,-8
    1be4:	8c3ff81e 	bne	r17,r16,1bc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bc8>
    1be8:	da008d17 	ldw	r8,564(sp)
    1bec:	40000126 	beq	r8,zero,1bf4 <__kernel_rem_pio2+0x8a0>
    1bf0:	18e0003c 	xorhi	r3,r3,32768
    1bf4:	da008f17 	ldw	r8,572(sp)
    1bf8:	40800015 	stw	r2,0(r8)
    1bfc:	40c00115 	stw	r3,4(r8)
    1c00:	da009117 	ldw	r8,580(sp)
    1c04:	408001cc 	andi	r2,r8,7
    1c08:	dfc0a517 	ldw	ra,660(sp)
    1c0c:	df00a417 	ldw	fp,656(sp)
    1c10:	ddc0a317 	ldw	r23,652(sp)
    1c14:	dd80a217 	ldw	r22,648(sp)
    1c18:	dd40a117 	ldw	r21,644(sp)
    1c1c:	dd00a017 	ldw	r20,640(sp)
    1c20:	dcc09f17 	ldw	r19,636(sp)
    1c24:	dc809e17 	ldw	r18,632(sp)
    1c28:	dc409d17 	ldw	r17,628(sp)
    1c2c:	dc009c17 	ldw	r16,624(sp)
    1c30:	dec0a604 	addi	sp,sp,664
    1c34:	f800283a 	ret
    1c38:	8c400044 	addi	r17,r17,1
    1c3c:	04810d0e 	bge	zero,r18,2074 <__kernel_rem_pio2+0xd20>
    1c40:	04c00084 	movi	r19,2
    1c44:	003eac06 	br	16f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f8>
    1c48:	0039883a 	mov	fp,zero
    1c4c:	002f883a 	mov	r23,zero
    1c50:	003fc906 	br	1b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b78>
    1c54:	0029883a 	mov	r20,zero
    1c58:	003ebd06 	br	1750 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001750>
    1c5c:	05000044 	movi	r20,1
    1c60:	003eef06 	br	1820 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001820>
    1c64:	4029883a 	mov	r20,r8
    1c68:	da009017 	ldw	r8,576(sp)
    1c6c:	a809883a 	mov	r4,r21
    1c70:	a00b883a 	mov	r5,r20
    1c74:	020dc83a 	sub	r6,zero,r8
    1c78:	dc409115 	stw	r17,580(sp)
    1c7c:	dd809417 	ldw	r22,592(sp)
    1c80:	dcc08d15 	stw	r19,564(sp)
    1c84:	00025b00 	call	25b0 <scalbn>
    1c88:	000d883a 	mov	r6,zero
    1c8c:	01d05c34 	movhi	r7,16752
    1c90:	1009883a 	mov	r4,r2
    1c94:	180b883a 	mov	r5,r3
    1c98:	102b883a 	mov	r21,r2
    1c9c:	1823883a 	mov	r17,r3
    1ca0:	0003ccc0 	call	3ccc <__gedf2>
    1ca4:	1000e916 	blt	r2,zero,204c <__kernel_rem_pio2+0xcf8>
    1ca8:	000d883a 	mov	r6,zero
    1cac:	01cf9c34 	movhi	r7,15984
    1cb0:	880b883a 	mov	r5,r17
    1cb4:	a809883a 	mov	r4,r21
    1cb8:	0003da80 	call	3da8 <__muldf3>
    1cbc:	180b883a 	mov	r5,r3
    1cc0:	1009883a 	mov	r4,r2
    1cc4:	0004dbc0 	call	4dbc <__fixdfsi>
    1cc8:	1029883a 	mov	r20,r2
    1ccc:	9485883a 	add	r2,r18,r18
    1cd0:	1085883a 	add	r2,r2,r2
    1cd4:	a009883a 	mov	r4,r20
    1cd8:	d8a1883a 	add	r16,sp,r2
    1cdc:	0004e3c0 	call	4e3c <__floatsidf>
    1ce0:	000d883a 	mov	r6,zero
    1ce4:	01d05c34 	movhi	r7,16752
    1ce8:	1009883a 	mov	r4,r2
    1cec:	180b883a 	mov	r5,r3
    1cf0:	0003da80 	call	3da8 <__muldf3>
    1cf4:	880b883a 	mov	r5,r17
    1cf8:	100d883a 	mov	r6,r2
    1cfc:	180f883a 	mov	r7,r3
    1d00:	a809883a 	mov	r4,r21
    1d04:	00044c00 	call	44c0 <__subdf3>
    1d08:	180b883a 	mov	r5,r3
    1d0c:	1009883a 	mov	r4,r2
    1d10:	0004dbc0 	call	4dbc <__fixdfsi>
    1d14:	da009017 	ldw	r8,576(sp)
    1d18:	94400044 	addi	r17,r18,1
    1d1c:	8c47883a 	add	r3,r17,r17
    1d20:	84007804 	addi	r16,r16,480
    1d24:	18c7883a 	add	r3,r3,r3
    1d28:	80800015 	stw	r2,0(r16)
    1d2c:	d8c7883a 	add	r3,sp,r3
    1d30:	42000604 	addi	r8,r8,24
    1d34:	da009015 	stw	r8,576(sp)
    1d38:	1d007815 	stw	r20,480(r3)
    1d3c:	003f4b06 	br	1a6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a6c>
    1d40:	da00a617 	ldw	r8,664(sp)
    1d44:	008000c4 	movi	r2,3
    1d48:	40bfad1e 	bne	r8,r2,1c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c00>
    1d4c:	0440bc0e 	bge	zero,r17,2040 <__kernel_rem_pio2+0xcec>
    1d50:	da008e17 	ldw	r8,568(sp)
    1d54:	882090fa 	slli	r16,r17,3
    1d58:	dd402804 	addi	r21,sp,160
    1d5c:	da05883a 	add	r2,sp,r8
    1d60:	10802804 	addi	r2,r2,160
    1d64:	15c00017 	ldw	r23,0(r2)
    1d68:	15800117 	ldw	r22,4(r2)
    1d6c:	8029883a 	mov	r20,r16
    1d70:	843ffe04 	addi	r16,r16,-8
    1d74:	ac21883a 	add	r16,r21,r16
    1d78:	ad29883a 	add	r20,r21,r20
    1d7c:	dac02604 	addi	r11,sp,152
    1d80:	8811883a 	mov	r8,r17
    1d84:	84400017 	ldw	r17,0(r16)
    1d88:	87000117 	ldw	fp,4(r16)
    1d8c:	b80d883a 	mov	r6,r23
    1d90:	b00f883a 	mov	r7,r22
    1d94:	8809883a 	mov	r4,r17
    1d98:	e00b883a 	mov	r5,fp
    1d9c:	da009b15 	stw	r8,620(sp)
    1da0:	dac09915 	stw	r11,612(sp)
    1da4:	0002ab00 	call	2ab0 <__adddf3>
    1da8:	100d883a 	mov	r6,r2
    1dac:	180f883a 	mov	r7,r3
    1db0:	8809883a 	mov	r4,r17
    1db4:	e00b883a 	mov	r5,fp
    1db8:	1027883a 	mov	r19,r2
    1dbc:	1825883a 	mov	r18,r3
    1dc0:	00044c00 	call	44c0 <__subdf3>
    1dc4:	b80d883a 	mov	r6,r23
    1dc8:	b00f883a 	mov	r7,r22
    1dcc:	1009883a 	mov	r4,r2
    1dd0:	180b883a 	mov	r5,r3
    1dd4:	0002ab00 	call	2ab0 <__adddf3>
    1dd8:	dac09917 	ldw	r11,612(sp)
    1ddc:	a0800015 	stw	r2,0(r20)
    1de0:	a0c00115 	stw	r3,4(r20)
    1de4:	84c00015 	stw	r19,0(r16)
    1de8:	84800115 	stw	r18,4(r16)
    1dec:	843ffe04 	addi	r16,r16,-8
    1df0:	a53ffe04 	addi	r20,r20,-8
    1df4:	982f883a 	mov	r23,r19
    1df8:	902d883a 	mov	r22,r18
    1dfc:	da009b17 	ldw	r8,620(sp)
    1e00:	5c3fe01e 	bne	r11,r16,1d84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d84>
    1e04:	00800044 	movi	r2,1
    1e08:	12008d0e 	bge	r2,r8,2040 <__kernel_rem_pio2+0xcec>
    1e0c:	402090fa 	slli	r16,r8,3
    1e10:	da008e17 	ldw	r8,568(sp)
    1e14:	8023883a 	mov	r17,r16
    1e18:	da05883a 	add	r2,sp,r8
    1e1c:	10802804 	addi	r2,r2,160
    1e20:	15800017 	ldw	r22,0(r2)
    1e24:	15000117 	ldw	r20,4(r2)
    1e28:	ac63883a 	add	r17,r21,r17
    1e2c:	843ffe04 	addi	r16,r16,-8
    1e30:	ac21883a 	add	r16,r21,r16
    1e34:	8825883a 	mov	r18,r17
    1e38:	8811883a 	mov	r8,r17
    1e3c:	84400017 	ldw	r17,0(r16)
    1e40:	87000117 	ldw	fp,4(r16)
    1e44:	b009883a 	mov	r4,r22
    1e48:	a00b883a 	mov	r5,r20
    1e4c:	880d883a 	mov	r6,r17
    1e50:	e00f883a 	mov	r7,fp
    1e54:	da009b15 	stw	r8,620(sp)
    1e58:	0002ab00 	call	2ab0 <__adddf3>
    1e5c:	100d883a 	mov	r6,r2
    1e60:	180f883a 	mov	r7,r3
    1e64:	8809883a 	mov	r4,r17
    1e68:	e00b883a 	mov	r5,fp
    1e6c:	102f883a 	mov	r23,r2
    1e70:	1827883a 	mov	r19,r3
    1e74:	00044c00 	call	44c0 <__subdf3>
    1e78:	b00d883a 	mov	r6,r22
    1e7c:	a00f883a 	mov	r7,r20
    1e80:	1009883a 	mov	r4,r2
    1e84:	180b883a 	mov	r5,r3
    1e88:	0002ab00 	call	2ab0 <__adddf3>
    1e8c:	90800015 	stw	r2,0(r18)
    1e90:	90c00115 	stw	r3,4(r18)
    1e94:	85c00015 	stw	r23,0(r16)
    1e98:	84c00115 	stw	r19,4(r16)
    1e9c:	843ffe04 	addi	r16,r16,-8
    1ea0:	94bffe04 	addi	r18,r18,-8
    1ea4:	b82d883a 	mov	r22,r23
    1ea8:	9829883a 	mov	r20,r19
    1eac:	da009b17 	ldw	r8,620(sp)
    1eb0:	ac3fe21e 	bne	r21,r16,1e3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e3c>
    1eb4:	4023883a 	mov	r17,r8
    1eb8:	dc002a04 	addi	r16,sp,168
    1ebc:	0005883a 	mov	r2,zero
    1ec0:	0007883a 	mov	r3,zero
    1ec4:	89800017 	ldw	r6,0(r17)
    1ec8:	89c00117 	ldw	r7,4(r17)
    1ecc:	1009883a 	mov	r4,r2
    1ed0:	8c7ffe04 	addi	r17,r17,-8
    1ed4:	180b883a 	mov	r5,r3
    1ed8:	0002ab00 	call	2ab0 <__adddf3>
    1edc:	847ff91e 	bne	r16,r17,1ec4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ec4>
    1ee0:	da008d17 	ldw	r8,564(sp)
    1ee4:	40004726 	beq	r8,zero,2004 <__kernel_rem_pio2+0xcb0>
    1ee8:	d9002b17 	ldw	r4,172(sp)
    1eec:	d9402917 	ldw	r5,164(sp)
    1ef0:	d9802a17 	ldw	r6,168(sp)
    1ef4:	da008f17 	ldw	r8,572(sp)
    1ef8:	d9c02817 	ldw	r7,160(sp)
    1efc:	2960003c 	xorhi	r5,r5,32768
    1f00:	2120003c 	xorhi	r4,r4,32768
    1f04:	18e0003c 	xorhi	r3,r3,32768
    1f08:	41c00015 	stw	r7,0(r8)
    1f0c:	41400115 	stw	r5,4(r8)
    1f10:	41800215 	stw	r6,8(r8)
    1f14:	41000315 	stw	r4,12(r8)
    1f18:	40800415 	stw	r2,16(r8)
    1f1c:	40c00515 	stw	r3,20(r8)
    1f20:	003f3706 	br	1c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c00>
    1f24:	da008e17 	ldw	r8,568(sp)
    1f28:	d8802804 	addi	r2,sp,160
    1f2c:	dc002604 	addi	r16,sp,152
    1f30:	1225883a 	add	r18,r2,r8
    1f34:	0007883a 	mov	r3,zero
    1f38:	0005883a 	mov	r2,zero
    1f3c:	91800017 	ldw	r6,0(r18)
    1f40:	91c00117 	ldw	r7,4(r18)
    1f44:	1009883a 	mov	r4,r2
    1f48:	94bffe04 	addi	r18,r18,-8
    1f4c:	180b883a 	mov	r5,r3
    1f50:	0002ab00 	call	2ab0 <__adddf3>
    1f54:	943ff91e 	bne	r18,r16,1f3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f3c>
    1f58:	da008d17 	ldw	r8,564(sp)
    1f5c:	d9002817 	ldw	r4,160(sp)
    1f60:	d9402917 	ldw	r5,164(sp)
    1f64:	40001a26 	beq	r8,zero,1fd0 <__kernel_rem_pio2+0xc7c>
    1f68:	da008f17 	ldw	r8,572(sp)
    1f6c:	19a0003c 	xorhi	r6,r3,32768
    1f70:	180f883a 	mov	r7,r3
    1f74:	41800115 	stw	r6,4(r8)
    1f78:	40800015 	stw	r2,0(r8)
    1f7c:	100d883a 	mov	r6,r2
    1f80:	00044c00 	call	44c0 <__subdf3>
    1f84:	04400c0e 	bge	zero,r17,1fb8 <__kernel_rem_pio2+0xc64>
    1f88:	dc002a04 	addi	r16,sp,168
    1f8c:	04800044 	movi	r18,1
    1f90:	81800017 	ldw	r6,0(r16)
    1f94:	81c00117 	ldw	r7,4(r16)
    1f98:	1009883a 	mov	r4,r2
    1f9c:	180b883a 	mov	r5,r3
    1fa0:	94800044 	addi	r18,r18,1
    1fa4:	0002ab00 	call	2ab0 <__adddf3>
    1fa8:	84000204 	addi	r16,r16,8
    1fac:	8cbff80e 	bge	r17,r18,1f90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f90>
    1fb0:	da008d17 	ldw	r8,564(sp)
    1fb4:	40004226 	beq	r8,zero,20c0 <__kernel_rem_pio2+0xd6c>
    1fb8:	da008f17 	ldw	r8,572(sp)
    1fbc:	1009883a 	mov	r4,r2
    1fc0:	18a0003c 	xorhi	r2,r3,32768
    1fc4:	41000215 	stw	r4,8(r8)
    1fc8:	40800315 	stw	r2,12(r8)
    1fcc:	003f0c06 	br	1c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c00>
    1fd0:	da008f17 	ldw	r8,572(sp)
    1fd4:	100d883a 	mov	r6,r2
    1fd8:	180f883a 	mov	r7,r3
    1fdc:	40800015 	stw	r2,0(r8)
    1fe0:	40c00115 	stw	r3,4(r8)
    1fe4:	00044c00 	call	44c0 <__subdf3>
    1fe8:	047fe716 	blt	zero,r17,1f88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f88>
    1fec:	da008f17 	ldw	r8,572(sp)
    1ff0:	1009883a 	mov	r4,r2
    1ff4:	1805883a 	mov	r2,r3
    1ff8:	41000215 	stw	r4,8(r8)
    1ffc:	40800315 	stw	r2,12(r8)
    2000:	003eff06 	br	1c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c00>
    2004:	da008f17 	ldw	r8,572(sp)
    2008:	d9802817 	ldw	r6,160(sp)
    200c:	d9402a17 	ldw	r5,168(sp)
    2010:	d9002b17 	ldw	r4,172(sp)
    2014:	41800015 	stw	r6,0(r8)
    2018:	d9802917 	ldw	r6,164(sp)
    201c:	41400215 	stw	r5,8(r8)
    2020:	41000315 	stw	r4,12(r8)
    2024:	41800115 	stw	r6,4(r8)
    2028:	40800415 	stw	r2,16(r8)
    202c:	40c00515 	stw	r3,20(r8)
    2030:	003ef306 	br	1c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c00>
    2034:	da00a617 	ldw	r8,664(sp)
    2038:	008000c4 	movi	r2,3
    203c:	40bef01e 	bne	r8,r2,1c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c00>
    2040:	0005883a 	mov	r2,zero
    2044:	0007883a 	mov	r3,zero
    2048:	003fa506 	br	1ee0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ee0>
    204c:	9485883a 	add	r2,r18,r18
    2050:	1085883a 	add	r2,r2,r2
    2054:	d8a1883a 	add	r16,sp,r2
    2058:	880b883a 	mov	r5,r17
    205c:	a809883a 	mov	r4,r21
    2060:	84007804 	addi	r16,r16,480
    2064:	0004dbc0 	call	4dbc <__fixdfsi>
    2068:	80800015 	stw	r2,0(r16)
    206c:	9023883a 	mov	r17,r18
    2070:	003e7e06 	br	1a6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a6c>
    2074:	a80d883a 	mov	r6,r21
    2078:	400f883a 	mov	r7,r8
    207c:	0009883a 	mov	r4,zero
    2080:	014ffc34 	movhi	r5,16368
    2084:	00044c00 	call	44c0 <__subdf3>
    2088:	102b883a 	mov	r21,r2
    208c:	1811883a 	mov	r8,r3
    2090:	04c00084 	movi	r19,2
    2094:	003dc006 	br	1798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001798>
    2098:	da00a617 	ldw	r8,664(sp)
    209c:	00800084 	movi	r2,2
    20a0:	123fe416 	blt	r2,r8,2034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002034>
    20a4:	02000c16 	blt	zero,r8,20d8 <__kernel_rem_pio2+0xd84>
    20a8:	403ed51e 	bne	r8,zero,1c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c00>
    20ac:	0005883a 	mov	r2,zero
    20b0:	0007883a 	mov	r3,zero
    20b4:	003ecc06 	br	1be8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001be8>
    20b8:	d8009215 	stw	zero,584(sp)
    20bc:	003cc306 	br	13cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70013cc>
    20c0:	da008f17 	ldw	r8,572(sp)
    20c4:	1009883a 	mov	r4,r2
    20c8:	1805883a 	mov	r2,r3
    20cc:	41000215 	stw	r4,8(r8)
    20d0:	40800315 	stw	r2,12(r8)
    20d4:	003eca06 	br	1c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c00>
    20d8:	0005883a 	mov	r2,zero
    20dc:	0007883a 	mov	r3,zero
    20e0:	003f9d06 	br	1f58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f58>

000020e4 <__kernel_sin>:
    20e4:	00a00034 	movhi	r2,32768
    20e8:	defff404 	addi	sp,sp,-48
    20ec:	10bfffc4 	addi	r2,r2,-1
    20f0:	00cf9034 	movhi	r3,15936
    20f4:	ddc00915 	stw	r23,36(sp)
    20f8:	dd800815 	stw	r22,32(sp)
    20fc:	dc400315 	stw	r17,12(sp)
    2100:	dc000215 	stw	r16,8(sp)
    2104:	dfc00b15 	stw	ra,44(sp)
    2108:	df000a15 	stw	fp,40(sp)
    210c:	dd400715 	stw	r21,28(sp)
    2110:	dd000615 	stw	r20,24(sp)
    2114:	dcc00515 	stw	r19,20(sp)
    2118:	dc800415 	stw	r18,16(sp)
    211c:	2884703a 	and	r2,r5,r2
    2120:	18ffffc4 	addi	r3,r3,-1
    2124:	2821883a 	mov	r16,r5
    2128:	2023883a 	mov	r17,r4
    212c:	302f883a 	mov	r23,r6
    2130:	382d883a 	mov	r22,r7
    2134:	18800216 	blt	r3,r2,2140 <__kernel_sin+0x5c>
    2138:	0004dbc0 	call	4dbc <__fixdfsi>
    213c:	10009926 	beq	r2,zero,23a4 <__kernel_sin+0x2c0>
    2140:	880d883a 	mov	r6,r17
    2144:	800f883a 	mov	r7,r16
    2148:	8809883a 	mov	r4,r17
    214c:	800b883a 	mov	r5,r16
    2150:	0003da80 	call	3da8 <__muldf3>
    2154:	100d883a 	mov	r6,r2
    2158:	180f883a 	mov	r7,r3
    215c:	8809883a 	mov	r4,r17
    2160:	800b883a 	mov	r5,r16
    2164:	1027883a 	mov	r19,r2
    2168:	1825883a 	mov	r18,r3
    216c:	0003da80 	call	3da8 <__muldf3>
    2170:	0196b434 	movhi	r6,23248
    2174:	01cf79b4 	movhi	r7,15846
    2178:	31b55f04 	addi	r6,r6,-10884
    217c:	39f64e84 	addi	r7,r7,-9926
    2180:	9809883a 	mov	r4,r19
    2184:	900b883a 	mov	r5,r18
    2188:	102b883a 	mov	r21,r2
    218c:	1829883a 	mov	r20,r3
    2190:	0003da80 	call	3da8 <__muldf3>
    2194:	01a28b34 	movhi	r6,35372
    2198:	01cf96f4 	movhi	r7,15963
    219c:	31a73ac4 	addi	r6,r6,-25365
    21a0:	39f97984 	addi	r7,r7,-6682
    21a4:	1009883a 	mov	r4,r2
    21a8:	180b883a 	mov	r5,r3
    21ac:	00044c00 	call	44c0 <__subdf3>
    21b0:	980d883a 	mov	r6,r19
    21b4:	900f883a 	mov	r7,r18
    21b8:	1009883a 	mov	r4,r2
    21bc:	180b883a 	mov	r5,r3
    21c0:	0003da80 	call	3da8 <__muldf3>
    21c4:	0195ecb4 	movhi	r6,22450
    21c8:	01cfb1f4 	movhi	r7,16071
    21cc:	31bf9f44 	addi	r6,r6,-387
    21d0:	39c778c4 	addi	r7,r7,7651
    21d4:	1009883a 	mov	r4,r2
    21d8:	180b883a 	mov	r5,r3
    21dc:	0002ab00 	call	2ab0 <__adddf3>
    21e0:	980d883a 	mov	r6,r19
    21e4:	900f883a 	mov	r7,r18
    21e8:	1009883a 	mov	r4,r2
    21ec:	180b883a 	mov	r5,r3
    21f0:	0003da80 	call	3da8 <__muldf3>
    21f4:	01867074 	movhi	r6,6593
    21f8:	01cfcab4 	movhi	r7,16170
    21fc:	31987544 	addi	r6,r6,25045
    2200:	39c06804 	addi	r7,r7,416
    2204:	1009883a 	mov	r4,r2
    2208:	180b883a 	mov	r5,r3
    220c:	00044c00 	call	44c0 <__subdf3>
    2210:	980d883a 	mov	r6,r19
    2214:	900f883a 	mov	r7,r18
    2218:	1009883a 	mov	r4,r2
    221c:	180b883a 	mov	r5,r3
    2220:	0003da80 	call	3da8 <__muldf3>
    2224:	01844474 	movhi	r6,4369
    2228:	01cfe074 	movhi	r7,16257
    222c:	31be2984 	addi	r6,r6,-1882
    2230:	39c44444 	addi	r7,r7,4369
    2234:	1009883a 	mov	r4,r2
    2238:	180b883a 	mov	r5,r3
    223c:	0002ab00 	call	2ab0 <__adddf3>
    2240:	1011883a 	mov	r8,r2
    2244:	d8800c17 	ldw	r2,48(sp)
    2248:	1839883a 	mov	fp,r3
    224c:	10003e26 	beq	r2,zero,2348 <__kernel_sin+0x264>
    2250:	000d883a 	mov	r6,zero
    2254:	01cff834 	movhi	r7,16352
    2258:	b809883a 	mov	r4,r23
    225c:	b00b883a 	mov	r5,r22
    2260:	da000015 	stw	r8,0(sp)
    2264:	0003da80 	call	3da8 <__muldf3>
    2268:	da000017 	ldw	r8,0(sp)
    226c:	e00f883a 	mov	r7,fp
    2270:	a809883a 	mov	r4,r21
    2274:	400d883a 	mov	r6,r8
    2278:	a00b883a 	mov	r5,r20
    227c:	d8c00115 	stw	r3,4(sp)
    2280:	d8800015 	stw	r2,0(sp)
    2284:	0003da80 	call	3da8 <__muldf3>
    2288:	da800017 	ldw	r10,0(sp)
    228c:	da400117 	ldw	r9,4(sp)
    2290:	100d883a 	mov	r6,r2
    2294:	5009883a 	mov	r4,r10
    2298:	480b883a 	mov	r5,r9
    229c:	180f883a 	mov	r7,r3
    22a0:	00044c00 	call	44c0 <__subdf3>
    22a4:	980d883a 	mov	r6,r19
    22a8:	900f883a 	mov	r7,r18
    22ac:	1009883a 	mov	r4,r2
    22b0:	180b883a 	mov	r5,r3
    22b4:	0003da80 	call	3da8 <__muldf3>
    22b8:	b80d883a 	mov	r6,r23
    22bc:	b00f883a 	mov	r7,r22
    22c0:	1009883a 	mov	r4,r2
    22c4:	180b883a 	mov	r5,r3
    22c8:	00044c00 	call	44c0 <__subdf3>
    22cc:	01955574 	movhi	r6,21845
    22d0:	01cff174 	movhi	r7,16325
    22d4:	31955244 	addi	r6,r6,21833
    22d8:	39d55544 	addi	r7,r7,21845
    22dc:	a809883a 	mov	r4,r21
    22e0:	a00b883a 	mov	r5,r20
    22e4:	1027883a 	mov	r19,r2
    22e8:	1825883a 	mov	r18,r3
    22ec:	0003da80 	call	3da8 <__muldf3>
    22f0:	100d883a 	mov	r6,r2
    22f4:	180f883a 	mov	r7,r3
    22f8:	9809883a 	mov	r4,r19
    22fc:	900b883a 	mov	r5,r18
    2300:	0002ab00 	call	2ab0 <__adddf3>
    2304:	100d883a 	mov	r6,r2
    2308:	180f883a 	mov	r7,r3
    230c:	8809883a 	mov	r4,r17
    2310:	800b883a 	mov	r5,r16
    2314:	00044c00 	call	44c0 <__subdf3>
    2318:	dfc00b17 	ldw	ra,44(sp)
    231c:	df000a17 	ldw	fp,40(sp)
    2320:	ddc00917 	ldw	r23,36(sp)
    2324:	dd800817 	ldw	r22,32(sp)
    2328:	dd400717 	ldw	r21,28(sp)
    232c:	dd000617 	ldw	r20,24(sp)
    2330:	dcc00517 	ldw	r19,20(sp)
    2334:	dc800417 	ldw	r18,16(sp)
    2338:	dc400317 	ldw	r17,12(sp)
    233c:	dc000217 	ldw	r16,8(sp)
    2340:	dec00c04 	addi	sp,sp,48
    2344:	f800283a 	ret
    2348:	400d883a 	mov	r6,r8
    234c:	9809883a 	mov	r4,r19
    2350:	900b883a 	mov	r5,r18
    2354:	180f883a 	mov	r7,r3
    2358:	0003da80 	call	3da8 <__muldf3>
    235c:	01955574 	movhi	r6,21845
    2360:	01cff174 	movhi	r7,16325
    2364:	31955244 	addi	r6,r6,21833
    2368:	39d55544 	addi	r7,r7,21845
    236c:	1009883a 	mov	r4,r2
    2370:	180b883a 	mov	r5,r3
    2374:	00044c00 	call	44c0 <__subdf3>
    2378:	a80d883a 	mov	r6,r21
    237c:	a00f883a 	mov	r7,r20
    2380:	1009883a 	mov	r4,r2
    2384:	180b883a 	mov	r5,r3
    2388:	0003da80 	call	3da8 <__muldf3>
    238c:	880d883a 	mov	r6,r17
    2390:	800f883a 	mov	r7,r16
    2394:	1009883a 	mov	r4,r2
    2398:	180b883a 	mov	r5,r3
    239c:	0002ab00 	call	2ab0 <__adddf3>
    23a0:	003fdd06 	br	2318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002318>
    23a4:	8805883a 	mov	r2,r17
    23a8:	8007883a 	mov	r3,r16
    23ac:	003fda06 	br	2318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002318>

000023b0 <fabs>:
    23b0:	00e00034 	movhi	r3,32768
    23b4:	18ffffc4 	addi	r3,r3,-1
    23b8:	2005883a 	mov	r2,r4
    23bc:	28c6703a 	and	r3,r5,r3
    23c0:	f800283a 	ret

000023c4 <floor>:
    23c4:	2811d53a 	srai	r8,r5,20
    23c8:	defffa04 	addi	sp,sp,-24
    23cc:	dcc00315 	stw	r19,12(sp)
    23d0:	4201ffcc 	andi	r8,r8,2047
    23d4:	dc800215 	stw	r18,8(sp)
    23d8:	dc400115 	stw	r17,4(sp)
    23dc:	dc000015 	stw	r16,0(sp)
    23e0:	dfc00515 	stw	ra,20(sp)
    23e4:	dd000415 	stw	r20,16(sp)
    23e8:	44bf0044 	addi	r18,r8,-1023
    23ec:	018004c4 	movi	r6,19
    23f0:	2821883a 	mov	r16,r5
    23f4:	2005883a 	mov	r2,r4
    23f8:	280f883a 	mov	r7,r5
    23fc:	2827883a 	mov	r19,r5
    2400:	2023883a 	mov	r17,r4
    2404:	34801916 	blt	r6,r18,246c <floor+0xa8>
    2408:	90003c16 	blt	r18,zero,24fc <floor+0x138>
    240c:	05000434 	movhi	r20,16
    2410:	a53fffc4 	addi	r20,r20,-1
    2414:	a4a9d83a 	sra	r20,r20,r18
    2418:	2d0c703a 	and	r6,r5,r20
    241c:	310cb03a 	or	r6,r6,r4
    2420:	30001626 	beq	r6,zero,247c <floor+0xb8>
    2424:	01a20034 	movhi	r6,34816
    2428:	01df8e34 	movhi	r7,32312
    242c:	319d6704 	addi	r6,r6,30108
    2430:	39f90f04 	addi	r7,r7,-7108
    2434:	0002ab00 	call	2ab0 <__adddf3>
    2438:	000d883a 	mov	r6,zero
    243c:	000f883a 	mov	r7,zero
    2440:	1009883a 	mov	r4,r2
    2444:	180b883a 	mov	r5,r3
    2448:	0003ccc0 	call	3ccc <__gedf2>
    244c:	0080040e 	bge	zero,r2,2460 <floor+0x9c>
    2450:	80003c16 	blt	r16,zero,2544 <floor+0x180>
    2454:	0520303a 	nor	r16,zero,r20
    2458:	84e0703a 	and	r16,r16,r19
    245c:	0023883a 	mov	r17,zero
    2460:	8805883a 	mov	r2,r17
    2464:	8007883a 	mov	r3,r16
    2468:	00000506 	br	2480 <floor+0xbc>
    246c:	01800cc4 	movi	r6,51
    2470:	34800b0e 	bge	r6,r18,24a0 <floor+0xdc>
    2474:	01810004 	movi	r6,1024
    2478:	91802f26 	beq	r18,r6,2538 <floor+0x174>
    247c:	3807883a 	mov	r3,r7
    2480:	dfc00517 	ldw	ra,20(sp)
    2484:	dd000417 	ldw	r20,16(sp)
    2488:	dcc00317 	ldw	r19,12(sp)
    248c:	dc800217 	ldw	r18,8(sp)
    2490:	dc400117 	ldw	r17,4(sp)
    2494:	dc000017 	ldw	r16,0(sp)
    2498:	dec00604 	addi	sp,sp,24
    249c:	f800283a 	ret
    24a0:	423efb44 	addi	r8,r8,-1043
    24a4:	053fffc4 	movi	r20,-1
    24a8:	a228d83a 	srl	r20,r20,r8
    24ac:	250c703a 	and	r6,r4,r20
    24b0:	303ff226 	beq	r6,zero,247c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700247c>
    24b4:	01a20034 	movhi	r6,34816
    24b8:	01df8e34 	movhi	r7,32312
    24bc:	319d6704 	addi	r6,r6,30108
    24c0:	39f90f04 	addi	r7,r7,-7108
    24c4:	0002ab00 	call	2ab0 <__adddf3>
    24c8:	000d883a 	mov	r6,zero
    24cc:	000f883a 	mov	r7,zero
    24d0:	1009883a 	mov	r4,r2
    24d4:	180b883a 	mov	r5,r3
    24d8:	0003ccc0 	call	3ccc <__gedf2>
    24dc:	00bfe00e 	bge	zero,r2,2460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002460>
    24e0:	80001c16 	blt	r16,zero,2554 <floor+0x190>
    24e4:	0510303a 	nor	r8,zero,r20
    24e8:	9821883a 	mov	r16,r19
    24ec:	8a22703a 	and	r17,r17,r8
    24f0:	8805883a 	mov	r2,r17
    24f4:	8007883a 	mov	r3,r16
    24f8:	003fe106 	br	2480 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002480>
    24fc:	01a20034 	movhi	r6,34816
    2500:	01df8e34 	movhi	r7,32312
    2504:	319d6704 	addi	r6,r6,30108
    2508:	39f90f04 	addi	r7,r7,-7108
    250c:	0002ab00 	call	2ab0 <__adddf3>
    2510:	000d883a 	mov	r6,zero
    2514:	000f883a 	mov	r7,zero
    2518:	1009883a 	mov	r4,r2
    251c:	180b883a 	mov	r5,r3
    2520:	0003ccc0 	call	3ccc <__gedf2>
    2524:	00bfce0e 	bge	zero,r2,2460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002460>
    2528:	80001516 	blt	r16,zero,2580 <floor+0x1bc>
    252c:	0023883a 	mov	r17,zero
    2530:	0021883a 	mov	r16,zero
    2534:	003fca06 	br	2460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002460>
    2538:	200d883a 	mov	r6,r4
    253c:	0002ab00 	call	2ab0 <__adddf3>
    2540:	003fcf06 	br	2480 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002480>
    2544:	00800434 	movhi	r2,16
    2548:	14a5d83a 	sra	r18,r2,r18
    254c:	84a7883a 	add	r19,r16,r18
    2550:	003fc006 	br	2454 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002454>
    2554:	00800504 	movi	r2,20
    2558:	90801326 	beq	r18,r2,25a8 <floor+0x1e4>
    255c:	00800d04 	movi	r2,52
    2560:	14a5c83a 	sub	r18,r2,r18
    2564:	00800044 	movi	r2,1
    2568:	1484983a 	sll	r2,r2,r18
    256c:	1445883a 	add	r2,r2,r17
    2570:	14400b2e 	bgeu	r2,r17,25a0 <floor+0x1dc>
    2574:	84c00044 	addi	r19,r16,1
    2578:	1023883a 	mov	r17,r2
    257c:	003fd906 	br	24e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024e4>
    2580:	00a00034 	movhi	r2,32768
    2584:	10bfffc4 	addi	r2,r2,-1
    2588:	8084703a 	and	r2,r16,r2
    258c:	1462b03a 	or	r17,r2,r17
    2590:	883fb326 	beq	r17,zero,2460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002460>
    2594:	0023883a 	mov	r17,zero
    2598:	042ffc34 	movhi	r16,49136
    259c:	003fb006 	br	2460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002460>
    25a0:	1023883a 	mov	r17,r2
    25a4:	003fcf06 	br	24e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024e4>
    25a8:	84c00044 	addi	r19,r16,1
    25ac:	003fcd06 	br	24e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024e4>

000025b0 <scalbn>:
    25b0:	2a1ffc2c 	andhi	r8,r5,32752
    25b4:	4011d53a 	srai	r8,r8,20
    25b8:	defffe04 	addi	sp,sp,-8
    25bc:	dc000015 	stw	r16,0(sp)
    25c0:	dfc00115 	stw	ra,4(sp)
    25c4:	280f883a 	mov	r7,r5
    25c8:	2015883a 	mov	r10,r4
    25cc:	3021883a 	mov	r16,r6
    25d0:	40001e1e 	bne	r8,zero,264c <scalbn+0x9c>
    25d4:	00a00034 	movhi	r2,32768
    25d8:	10bfffc4 	addi	r2,r2,-1
    25dc:	2884703a 	and	r2,r5,r2
    25e0:	1104b03a 	or	r2,r2,r4
    25e4:	10002226 	beq	r2,zero,2670 <scalbn+0xc0>
    25e8:	01d0d434 	movhi	r7,17232
    25ec:	000d883a 	mov	r6,zero
    25f0:	0003da80 	call	3da8 <__muldf3>
    25f4:	013ffff4 	movhi	r4,65535
    25f8:	210f2c04 	addi	r4,r4,15536
    25fc:	1015883a 	mov	r10,r2
    2600:	180f883a 	mov	r7,r3
    2604:	81002a16 	blt	r16,r4,26b0 <scalbn+0x100>
    2608:	191ffc2c 	andhi	r4,r3,32752
    260c:	2009d53a 	srai	r4,r4,20
    2610:	223ff284 	addi	r8,r4,-54
    2614:	8211883a 	add	r8,r16,r8
    2618:	0081ff84 	movi	r2,2046
    261c:	12002f16 	blt	r2,r8,26dc <scalbn+0x12c>
    2620:	0200190e 	bge	zero,r8,2688 <scalbn+0xd8>
    2624:	4010953a 	slli	r8,r8,20
    2628:	01600434 	movhi	r5,32784
    262c:	297fffc4 	addi	r5,r5,-1
    2630:	194e703a 	and	r7,r3,r5
    2634:	5005883a 	mov	r2,r10
    2638:	3a06b03a 	or	r3,r7,r8
    263c:	dfc00117 	ldw	ra,4(sp)
    2640:	dc000017 	ldw	r16,0(sp)
    2644:	dec00204 	addi	sp,sp,8
    2648:	f800283a 	ret
    264c:	0081ffc4 	movi	r2,2047
    2650:	2807883a 	mov	r3,r5
    2654:	40bfef1e 	bne	r8,r2,2614 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002614>
    2658:	200d883a 	mov	r6,r4
    265c:	0002ab00 	call	2ab0 <__adddf3>
    2660:	dfc00117 	ldw	ra,4(sp)
    2664:	dc000017 	ldw	r16,0(sp)
    2668:	dec00204 	addi	sp,sp,8
    266c:	f800283a 	ret
    2670:	2005883a 	mov	r2,r4
    2674:	2807883a 	mov	r3,r5
    2678:	dfc00117 	ldw	ra,4(sp)
    267c:	dc000017 	ldw	r16,0(sp)
    2680:	dec00204 	addi	sp,sp,8
    2684:	f800283a 	ret
    2688:	00bff2c4 	movi	r2,-53
    268c:	4080240e 	bge	r8,r2,2720 <scalbn+0x170>
    2690:	00b0d414 	movui	r2,50000
    2694:	14001116 	blt	r2,r16,26dc <scalbn+0x12c>
    2698:	0130be74 	movhi	r4,49913
    269c:	01406974 	movhi	r5,421
    26a0:	213cd644 	addi	r4,r4,-3239
    26a4:	295b87c4 	addi	r5,r5,28191
    26a8:	500d883a 	mov	r6,r10
    26ac:	000274c0 	call	274c <copysign>
    26b0:	01b0be74 	movhi	r6,49913
    26b4:	01c06974 	movhi	r7,421
    26b8:	31bcd644 	addi	r6,r6,-3239
    26bc:	39db87c4 	addi	r7,r7,28191
    26c0:	1009883a 	mov	r4,r2
    26c4:	180b883a 	mov	r5,r3
    26c8:	0003da80 	call	3da8 <__muldf3>
    26cc:	dfc00117 	ldw	ra,4(sp)
    26d0:	dc000017 	ldw	r16,0(sp)
    26d4:	dec00204 	addi	sp,sp,8
    26d8:	f800283a 	ret
    26dc:	01220034 	movhi	r4,34816
    26e0:	015f8e34 	movhi	r5,32312
    26e4:	500d883a 	mov	r6,r10
    26e8:	211d6704 	addi	r4,r4,30108
    26ec:	29790f04 	addi	r5,r5,-7108
    26f0:	000274c0 	call	274c <copysign>
    26f4:	01a20034 	movhi	r6,34816
    26f8:	01df8e34 	movhi	r7,32312
    26fc:	319d6704 	addi	r6,r6,30108
    2700:	39f90f04 	addi	r7,r7,-7108
    2704:	1009883a 	mov	r4,r2
    2708:	180b883a 	mov	r5,r3
    270c:	0003da80 	call	3da8 <__muldf3>
    2710:	dfc00117 	ldw	ra,4(sp)
    2714:	dc000017 	ldw	r16,0(sp)
    2718:	dec00204 	addi	sp,sp,8
    271c:	f800283a 	ret
    2720:	42000d84 	addi	r8,r8,54
    2724:	4012953a 	slli	r9,r8,20
    2728:	01e00434 	movhi	r7,32784
    272c:	39ffffc4 	addi	r7,r7,-1
    2730:	19ca703a 	and	r5,r3,r7
    2734:	000d883a 	mov	r6,zero
    2738:	01cf2434 	movhi	r7,15504
    273c:	5009883a 	mov	r4,r10
    2740:	494ab03a 	or	r5,r9,r5
    2744:	0003da80 	call	3da8 <__muldf3>
    2748:	003fbc06 	br	263c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700263c>

0000274c <copysign>:
    274c:	2005883a 	mov	r2,r4
    2750:	01200034 	movhi	r4,32768
    2754:	213fffc4 	addi	r4,r4,-1
    2758:	38e0002c 	andhi	r3,r7,32768
    275c:	290a703a 	and	r5,r5,r4
    2760:	28c6b03a 	or	r3,r5,r3
    2764:	f800283a 	ret

00002768 <__divsi3>:
    2768:	20001b16 	blt	r4,zero,27d8 <__divsi3+0x70>
    276c:	000f883a 	mov	r7,zero
    2770:	28001616 	blt	r5,zero,27cc <__divsi3+0x64>
    2774:	200d883a 	mov	r6,r4
    2778:	29001a2e 	bgeu	r5,r4,27e4 <__divsi3+0x7c>
    277c:	00800804 	movi	r2,32
    2780:	00c00044 	movi	r3,1
    2784:	00000106 	br	278c <__divsi3+0x24>
    2788:	10000d26 	beq	r2,zero,27c0 <__divsi3+0x58>
    278c:	294b883a 	add	r5,r5,r5
    2790:	10bfffc4 	addi	r2,r2,-1
    2794:	18c7883a 	add	r3,r3,r3
    2798:	293ffb36 	bltu	r5,r4,2788 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002788>
    279c:	0005883a 	mov	r2,zero
    27a0:	18000726 	beq	r3,zero,27c0 <__divsi3+0x58>
    27a4:	0005883a 	mov	r2,zero
    27a8:	31400236 	bltu	r6,r5,27b4 <__divsi3+0x4c>
    27ac:	314dc83a 	sub	r6,r6,r5
    27b0:	10c4b03a 	or	r2,r2,r3
    27b4:	1806d07a 	srli	r3,r3,1
    27b8:	280ad07a 	srli	r5,r5,1
    27bc:	183ffa1e 	bne	r3,zero,27a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027a8>
    27c0:	38000126 	beq	r7,zero,27c8 <__divsi3+0x60>
    27c4:	0085c83a 	sub	r2,zero,r2
    27c8:	f800283a 	ret
    27cc:	014bc83a 	sub	r5,zero,r5
    27d0:	39c0005c 	xori	r7,r7,1
    27d4:	003fe706 	br	2774 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002774>
    27d8:	0109c83a 	sub	r4,zero,r4
    27dc:	01c00044 	movi	r7,1
    27e0:	003fe306 	br	2770 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002770>
    27e4:	00c00044 	movi	r3,1
    27e8:	003fee06 	br	27a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027a4>

000027ec <__modsi3>:
    27ec:	20001716 	blt	r4,zero,284c <__modsi3+0x60>
    27f0:	000f883a 	mov	r7,zero
    27f4:	2005883a 	mov	r2,r4
    27f8:	28001216 	blt	r5,zero,2844 <__modsi3+0x58>
    27fc:	2900162e 	bgeu	r5,r4,2858 <__modsi3+0x6c>
    2800:	01800804 	movi	r6,32
    2804:	00c00044 	movi	r3,1
    2808:	00000106 	br	2810 <__modsi3+0x24>
    280c:	30000a26 	beq	r6,zero,2838 <__modsi3+0x4c>
    2810:	294b883a 	add	r5,r5,r5
    2814:	31bfffc4 	addi	r6,r6,-1
    2818:	18c7883a 	add	r3,r3,r3
    281c:	293ffb36 	bltu	r5,r4,280c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700280c>
    2820:	18000526 	beq	r3,zero,2838 <__modsi3+0x4c>
    2824:	1806d07a 	srli	r3,r3,1
    2828:	11400136 	bltu	r2,r5,2830 <__modsi3+0x44>
    282c:	1145c83a 	sub	r2,r2,r5
    2830:	280ad07a 	srli	r5,r5,1
    2834:	183ffb1e 	bne	r3,zero,2824 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002824>
    2838:	38000126 	beq	r7,zero,2840 <__modsi3+0x54>
    283c:	0085c83a 	sub	r2,zero,r2
    2840:	f800283a 	ret
    2844:	014bc83a 	sub	r5,zero,r5
    2848:	003fec06 	br	27fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027fc>
    284c:	0109c83a 	sub	r4,zero,r4
    2850:	01c00044 	movi	r7,1
    2854:	003fe706 	br	27f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027f4>
    2858:	00c00044 	movi	r3,1
    285c:	003ff106 	br	2824 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002824>

00002860 <__udivsi3>:
    2860:	200d883a 	mov	r6,r4
    2864:	2900152e 	bgeu	r5,r4,28bc <__udivsi3+0x5c>
    2868:	28001416 	blt	r5,zero,28bc <__udivsi3+0x5c>
    286c:	00800804 	movi	r2,32
    2870:	00c00044 	movi	r3,1
    2874:	00000206 	br	2880 <__udivsi3+0x20>
    2878:	10000e26 	beq	r2,zero,28b4 <__udivsi3+0x54>
    287c:	28000516 	blt	r5,zero,2894 <__udivsi3+0x34>
    2880:	294b883a 	add	r5,r5,r5
    2884:	10bfffc4 	addi	r2,r2,-1
    2888:	18c7883a 	add	r3,r3,r3
    288c:	293ffa36 	bltu	r5,r4,2878 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002878>
    2890:	18000826 	beq	r3,zero,28b4 <__udivsi3+0x54>
    2894:	0005883a 	mov	r2,zero
    2898:	31400236 	bltu	r6,r5,28a4 <__udivsi3+0x44>
    289c:	314dc83a 	sub	r6,r6,r5
    28a0:	10c4b03a 	or	r2,r2,r3
    28a4:	1806d07a 	srli	r3,r3,1
    28a8:	280ad07a 	srli	r5,r5,1
    28ac:	183ffa1e 	bne	r3,zero,2898 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002898>
    28b0:	f800283a 	ret
    28b4:	0005883a 	mov	r2,zero
    28b8:	f800283a 	ret
    28bc:	00c00044 	movi	r3,1
    28c0:	003ff406 	br	2894 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002894>

000028c4 <__umodsi3>:
    28c4:	2005883a 	mov	r2,r4
    28c8:	2900122e 	bgeu	r5,r4,2914 <__umodsi3+0x50>
    28cc:	28001116 	blt	r5,zero,2914 <__umodsi3+0x50>
    28d0:	01800804 	movi	r6,32
    28d4:	00c00044 	movi	r3,1
    28d8:	00000206 	br	28e4 <__umodsi3+0x20>
    28dc:	30000c26 	beq	r6,zero,2910 <__umodsi3+0x4c>
    28e0:	28000516 	blt	r5,zero,28f8 <__umodsi3+0x34>
    28e4:	294b883a 	add	r5,r5,r5
    28e8:	31bfffc4 	addi	r6,r6,-1
    28ec:	18c7883a 	add	r3,r3,r3
    28f0:	293ffa36 	bltu	r5,r4,28dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70028dc>
    28f4:	18000626 	beq	r3,zero,2910 <__umodsi3+0x4c>
    28f8:	1806d07a 	srli	r3,r3,1
    28fc:	11400136 	bltu	r2,r5,2904 <__umodsi3+0x40>
    2900:	1145c83a 	sub	r2,r2,r5
    2904:	280ad07a 	srli	r5,r5,1
    2908:	183ffb1e 	bne	r3,zero,28f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70028f8>
    290c:	f800283a 	ret
    2910:	f800283a 	ret
    2914:	00c00044 	movi	r3,1
    2918:	003ff706 	br	28f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70028f8>

0000291c <__fixsfsi>:
    291c:	200ad5fa 	srli	r5,r4,23
    2920:	00c02034 	movhi	r3,128
    2924:	18ffffc4 	addi	r3,r3,-1
    2928:	29403fcc 	andi	r5,r5,255
    292c:	00801f84 	movi	r2,126
    2930:	1906703a 	and	r3,r3,r4
    2934:	2008d7fa 	srli	r4,r4,31
    2938:	11400e0e 	bge	r2,r5,2974 <__fixsfsi+0x58>
    293c:	00802744 	movi	r2,157
    2940:	11400816 	blt	r2,r5,2964 <__fixsfsi+0x48>
    2944:	00802544 	movi	r2,149
    2948:	18c02034 	orhi	r3,r3,128
    294c:	11400b0e 	bge	r2,r5,297c <__fixsfsi+0x60>
    2950:	28bfda84 	addi	r2,r5,-150
    2954:	1884983a 	sll	r2,r3,r2
    2958:	20000726 	beq	r4,zero,2978 <__fixsfsi+0x5c>
    295c:	0085c83a 	sub	r2,zero,r2
    2960:	f800283a 	ret
    2964:	00a00034 	movhi	r2,32768
    2968:	10bfffc4 	addi	r2,r2,-1
    296c:	2085883a 	add	r2,r4,r2
    2970:	f800283a 	ret
    2974:	0005883a 	mov	r2,zero
    2978:	f800283a 	ret
    297c:	00802584 	movi	r2,150
    2980:	1145c83a 	sub	r2,r2,r5
    2984:	1884d83a 	srl	r2,r3,r2
    2988:	003ff306 	br	2958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002958>

0000298c <__floatsisf>:
    298c:	defffd04 	addi	sp,sp,-12
    2990:	dfc00215 	stw	ra,8(sp)
    2994:	dc400115 	stw	r17,4(sp)
    2998:	dc000015 	stw	r16,0(sp)
    299c:	20003526 	beq	r4,zero,2a74 <__floatsisf+0xe8>
    29a0:	2021883a 	mov	r16,r4
    29a4:	2022d7fa 	srli	r17,r4,31
    29a8:	20003616 	blt	r4,zero,2a84 <__floatsisf+0xf8>
    29ac:	8009883a 	mov	r4,r16
    29b0:	00051d00 	call	51d0 <__clzsi2>
    29b4:	00c02784 	movi	r3,158
    29b8:	1887c83a 	sub	r3,r3,r2
    29bc:	01002584 	movi	r4,150
    29c0:	20c01416 	blt	r4,r3,2a14 <__floatsisf+0x88>
    29c4:	20c9c83a 	sub	r4,r4,r3
    29c8:	8120983a 	sll	r16,r16,r4
    29cc:	00802034 	movhi	r2,128
    29d0:	10bfffc4 	addi	r2,r2,-1
    29d4:	8809883a 	mov	r4,r17
    29d8:	80a0703a 	and	r16,r16,r2
    29dc:	18803fcc 	andi	r2,r3,255
    29e0:	100695fa 	slli	r3,r2,23
    29e4:	20803fcc 	andi	r2,r4,255
    29e8:	100897fa 	slli	r4,r2,31
    29ec:	00802034 	movhi	r2,128
    29f0:	10bfffc4 	addi	r2,r2,-1
    29f4:	8084703a 	and	r2,r16,r2
    29f8:	10c4b03a 	or	r2,r2,r3
    29fc:	1104b03a 	or	r2,r2,r4
    2a00:	dfc00217 	ldw	ra,8(sp)
    2a04:	dc400117 	ldw	r17,4(sp)
    2a08:	dc000017 	ldw	r16,0(sp)
    2a0c:	dec00304 	addi	sp,sp,12
    2a10:	f800283a 	ret
    2a14:	01002644 	movi	r4,153
    2a18:	20c01c16 	blt	r4,r3,2a8c <__floatsisf+0x100>
    2a1c:	20c9c83a 	sub	r4,r4,r3
    2a20:	8120983a 	sll	r16,r16,r4
    2a24:	013f0034 	movhi	r4,64512
    2a28:	213fffc4 	addi	r4,r4,-1
    2a2c:	814001cc 	andi	r5,r16,7
    2a30:	8108703a 	and	r4,r16,r4
    2a34:	28000426 	beq	r5,zero,2a48 <__floatsisf+0xbc>
    2a38:	840003cc 	andi	r16,r16,15
    2a3c:	01400104 	movi	r5,4
    2a40:	81400126 	beq	r16,r5,2a48 <__floatsisf+0xbc>
    2a44:	2149883a 	add	r4,r4,r5
    2a48:	2141002c 	andhi	r5,r4,1024
    2a4c:	28000526 	beq	r5,zero,2a64 <__floatsisf+0xd8>
    2a50:	00c027c4 	movi	r3,159
    2a54:	1887c83a 	sub	r3,r3,r2
    2a58:	00bf0034 	movhi	r2,64512
    2a5c:	10bfffc4 	addi	r2,r2,-1
    2a60:	2088703a 	and	r4,r4,r2
    2a64:	202091ba 	slli	r16,r4,6
    2a68:	8809883a 	mov	r4,r17
    2a6c:	8020d27a 	srli	r16,r16,9
    2a70:	003fda06 	br	29dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029dc>
    2a74:	0009883a 	mov	r4,zero
    2a78:	0007883a 	mov	r3,zero
    2a7c:	0021883a 	mov	r16,zero
    2a80:	003fd606 	br	29dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029dc>
    2a84:	0121c83a 	sub	r16,zero,r4
    2a88:	003fc806 	br	29ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029ac>
    2a8c:	01002e44 	movi	r4,185
    2a90:	20c9c83a 	sub	r4,r4,r3
    2a94:	01400144 	movi	r5,5
    2a98:	8108983a 	sll	r4,r16,r4
    2a9c:	288bc83a 	sub	r5,r5,r2
    2aa0:	8160d83a 	srl	r16,r16,r5
    2aa4:	2008c03a 	cmpne	r4,r4,zero
    2aa8:	8120b03a 	or	r16,r16,r4
    2aac:	003fdd06 	br	2a24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a24>

00002ab0 <__adddf3>:
    2ab0:	02c00434 	movhi	r11,16
    2ab4:	5affffc4 	addi	r11,r11,-1
    2ab8:	2806d7fa 	srli	r3,r5,31
    2abc:	2ad4703a 	and	r10,r5,r11
    2ac0:	3ad2703a 	and	r9,r7,r11
    2ac4:	3804d53a 	srli	r2,r7,20
    2ac8:	3018d77a 	srli	r12,r6,29
    2acc:	280ad53a 	srli	r5,r5,20
    2ad0:	501490fa 	slli	r10,r10,3
    2ad4:	2010d77a 	srli	r8,r4,29
    2ad8:	481290fa 	slli	r9,r9,3
    2adc:	380ed7fa 	srli	r7,r7,31
    2ae0:	defffb04 	addi	sp,sp,-20
    2ae4:	dc800215 	stw	r18,8(sp)
    2ae8:	dc400115 	stw	r17,4(sp)
    2aec:	dc000015 	stw	r16,0(sp)
    2af0:	dfc00415 	stw	ra,16(sp)
    2af4:	dcc00315 	stw	r19,12(sp)
    2af8:	1c803fcc 	andi	r18,r3,255
    2afc:	2c01ffcc 	andi	r16,r5,2047
    2b00:	5210b03a 	or	r8,r10,r8
    2b04:	202290fa 	slli	r17,r4,3
    2b08:	1081ffcc 	andi	r2,r2,2047
    2b0c:	4b12b03a 	or	r9,r9,r12
    2b10:	300c90fa 	slli	r6,r6,3
    2b14:	91c07526 	beq	r18,r7,2cec <__adddf3+0x23c>
    2b18:	8087c83a 	sub	r3,r16,r2
    2b1c:	00c0ab0e 	bge	zero,r3,2dcc <__adddf3+0x31c>
    2b20:	10002a1e 	bne	r2,zero,2bcc <__adddf3+0x11c>
    2b24:	4984b03a 	or	r2,r9,r6
    2b28:	1000961e 	bne	r2,zero,2d84 <__adddf3+0x2d4>
    2b2c:	888001cc 	andi	r2,r17,7
    2b30:	10000726 	beq	r2,zero,2b50 <__adddf3+0xa0>
    2b34:	888003cc 	andi	r2,r17,15
    2b38:	00c00104 	movi	r3,4
    2b3c:	10c00426 	beq	r2,r3,2b50 <__adddf3+0xa0>
    2b40:	88c7883a 	add	r3,r17,r3
    2b44:	1c63803a 	cmpltu	r17,r3,r17
    2b48:	4451883a 	add	r8,r8,r17
    2b4c:	1823883a 	mov	r17,r3
    2b50:	4080202c 	andhi	r2,r8,128
    2b54:	10005926 	beq	r2,zero,2cbc <__adddf3+0x20c>
    2b58:	84000044 	addi	r16,r16,1
    2b5c:	0081ffc4 	movi	r2,2047
    2b60:	8080ba26 	beq	r16,r2,2e4c <__adddf3+0x39c>
    2b64:	00bfe034 	movhi	r2,65408
    2b68:	10bfffc4 	addi	r2,r2,-1
    2b6c:	4090703a 	and	r8,r8,r2
    2b70:	4004977a 	slli	r2,r8,29
    2b74:	4010927a 	slli	r8,r8,9
    2b78:	8822d0fa 	srli	r17,r17,3
    2b7c:	8401ffcc 	andi	r16,r16,2047
    2b80:	4010d33a 	srli	r8,r8,12
    2b84:	9007883a 	mov	r3,r18
    2b88:	1444b03a 	or	r2,r2,r17
    2b8c:	8401ffcc 	andi	r16,r16,2047
    2b90:	8020953a 	slli	r16,r16,20
    2b94:	18c03fcc 	andi	r3,r3,255
    2b98:	01000434 	movhi	r4,16
    2b9c:	213fffc4 	addi	r4,r4,-1
    2ba0:	180697fa 	slli	r3,r3,31
    2ba4:	4110703a 	and	r8,r8,r4
    2ba8:	4410b03a 	or	r8,r8,r16
    2bac:	40c6b03a 	or	r3,r8,r3
    2bb0:	dfc00417 	ldw	ra,16(sp)
    2bb4:	dcc00317 	ldw	r19,12(sp)
    2bb8:	dc800217 	ldw	r18,8(sp)
    2bbc:	dc400117 	ldw	r17,4(sp)
    2bc0:	dc000017 	ldw	r16,0(sp)
    2bc4:	dec00504 	addi	sp,sp,20
    2bc8:	f800283a 	ret
    2bcc:	0081ffc4 	movi	r2,2047
    2bd0:	80bfd626 	beq	r16,r2,2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    2bd4:	4a402034 	orhi	r9,r9,128
    2bd8:	00800e04 	movi	r2,56
    2bdc:	10c09f16 	blt	r2,r3,2e5c <__adddf3+0x3ac>
    2be0:	008007c4 	movi	r2,31
    2be4:	10c0c216 	blt	r2,r3,2ef0 <__adddf3+0x440>
    2be8:	00800804 	movi	r2,32
    2bec:	10c5c83a 	sub	r2,r2,r3
    2bf0:	488a983a 	sll	r5,r9,r2
    2bf4:	30c8d83a 	srl	r4,r6,r3
    2bf8:	3084983a 	sll	r2,r6,r2
    2bfc:	48c6d83a 	srl	r3,r9,r3
    2c00:	290cb03a 	or	r6,r5,r4
    2c04:	1004c03a 	cmpne	r2,r2,zero
    2c08:	308cb03a 	or	r6,r6,r2
    2c0c:	898dc83a 	sub	r6,r17,r6
    2c10:	89a3803a 	cmpltu	r17,r17,r6
    2c14:	40d1c83a 	sub	r8,r8,r3
    2c18:	4451c83a 	sub	r8,r8,r17
    2c1c:	3023883a 	mov	r17,r6
    2c20:	4080202c 	andhi	r2,r8,128
    2c24:	10002326 	beq	r2,zero,2cb4 <__adddf3+0x204>
    2c28:	04c02034 	movhi	r19,128
    2c2c:	9cffffc4 	addi	r19,r19,-1
    2c30:	44e6703a 	and	r19,r8,r19
    2c34:	98007626 	beq	r19,zero,2e10 <__adddf3+0x360>
    2c38:	9809883a 	mov	r4,r19
    2c3c:	00051d00 	call	51d0 <__clzsi2>
    2c40:	10fffe04 	addi	r3,r2,-8
    2c44:	010007c4 	movi	r4,31
    2c48:	20c07716 	blt	r4,r3,2e28 <__adddf3+0x378>
    2c4c:	00800804 	movi	r2,32
    2c50:	10c5c83a 	sub	r2,r2,r3
    2c54:	8884d83a 	srl	r2,r17,r2
    2c58:	98d0983a 	sll	r8,r19,r3
    2c5c:	88e2983a 	sll	r17,r17,r3
    2c60:	1204b03a 	or	r2,r2,r8
    2c64:	1c007416 	blt	r3,r16,2e38 <__adddf3+0x388>
    2c68:	1c21c83a 	sub	r16,r3,r16
    2c6c:	82000044 	addi	r8,r16,1
    2c70:	00c007c4 	movi	r3,31
    2c74:	1a009116 	blt	r3,r8,2ebc <__adddf3+0x40c>
    2c78:	00c00804 	movi	r3,32
    2c7c:	1a07c83a 	sub	r3,r3,r8
    2c80:	8a08d83a 	srl	r4,r17,r8
    2c84:	88e2983a 	sll	r17,r17,r3
    2c88:	10c6983a 	sll	r3,r2,r3
    2c8c:	1210d83a 	srl	r8,r2,r8
    2c90:	8804c03a 	cmpne	r2,r17,zero
    2c94:	1906b03a 	or	r3,r3,r4
    2c98:	18a2b03a 	or	r17,r3,r2
    2c9c:	0021883a 	mov	r16,zero
    2ca0:	003fa206 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    2ca4:	1890b03a 	or	r8,r3,r2
    2ca8:	40017d26 	beq	r8,zero,32a0 <__adddf3+0x7f0>
    2cac:	1011883a 	mov	r8,r2
    2cb0:	1823883a 	mov	r17,r3
    2cb4:	888001cc 	andi	r2,r17,7
    2cb8:	103f9e1e 	bne	r2,zero,2b34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b34>
    2cbc:	4004977a 	slli	r2,r8,29
    2cc0:	8822d0fa 	srli	r17,r17,3
    2cc4:	4010d0fa 	srli	r8,r8,3
    2cc8:	9007883a 	mov	r3,r18
    2ccc:	1444b03a 	or	r2,r2,r17
    2cd0:	0101ffc4 	movi	r4,2047
    2cd4:	81002426 	beq	r16,r4,2d68 <__adddf3+0x2b8>
    2cd8:	8120703a 	and	r16,r16,r4
    2cdc:	01000434 	movhi	r4,16
    2ce0:	213fffc4 	addi	r4,r4,-1
    2ce4:	4110703a 	and	r8,r8,r4
    2ce8:	003fa806 	br	2b8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b8c>
    2cec:	8089c83a 	sub	r4,r16,r2
    2cf0:	01005e0e 	bge	zero,r4,2e6c <__adddf3+0x3bc>
    2cf4:	10002b26 	beq	r2,zero,2da4 <__adddf3+0x2f4>
    2cf8:	0081ffc4 	movi	r2,2047
    2cfc:	80bf8b26 	beq	r16,r2,2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    2d00:	4a402034 	orhi	r9,r9,128
    2d04:	00800e04 	movi	r2,56
    2d08:	1100a40e 	bge	r2,r4,2f9c <__adddf3+0x4ec>
    2d0c:	498cb03a 	or	r6,r9,r6
    2d10:	300ac03a 	cmpne	r5,r6,zero
    2d14:	0013883a 	mov	r9,zero
    2d18:	2c4b883a 	add	r5,r5,r17
    2d1c:	2c63803a 	cmpltu	r17,r5,r17
    2d20:	4a11883a 	add	r8,r9,r8
    2d24:	8a11883a 	add	r8,r17,r8
    2d28:	2823883a 	mov	r17,r5
    2d2c:	4080202c 	andhi	r2,r8,128
    2d30:	103fe026 	beq	r2,zero,2cb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cb4>
    2d34:	84000044 	addi	r16,r16,1
    2d38:	0081ffc4 	movi	r2,2047
    2d3c:	8080d226 	beq	r16,r2,3088 <__adddf3+0x5d8>
    2d40:	00bfe034 	movhi	r2,65408
    2d44:	10bfffc4 	addi	r2,r2,-1
    2d48:	4090703a 	and	r8,r8,r2
    2d4c:	880ad07a 	srli	r5,r17,1
    2d50:	400897fa 	slli	r4,r8,31
    2d54:	88c0004c 	andi	r3,r17,1
    2d58:	28e2b03a 	or	r17,r5,r3
    2d5c:	4010d07a 	srli	r8,r8,1
    2d60:	2462b03a 	or	r17,r4,r17
    2d64:	003f7106 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    2d68:	4088b03a 	or	r4,r8,r2
    2d6c:	20014526 	beq	r4,zero,3284 <__adddf3+0x7d4>
    2d70:	01000434 	movhi	r4,16
    2d74:	42000234 	orhi	r8,r8,8
    2d78:	213fffc4 	addi	r4,r4,-1
    2d7c:	4110703a 	and	r8,r8,r4
    2d80:	003f8206 	br	2b8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b8c>
    2d84:	18ffffc4 	addi	r3,r3,-1
    2d88:	1800491e 	bne	r3,zero,2eb0 <__adddf3+0x400>
    2d8c:	898bc83a 	sub	r5,r17,r6
    2d90:	8963803a 	cmpltu	r17,r17,r5
    2d94:	4251c83a 	sub	r8,r8,r9
    2d98:	4451c83a 	sub	r8,r8,r17
    2d9c:	2823883a 	mov	r17,r5
    2da0:	003f9f06 	br	2c20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c20>
    2da4:	4984b03a 	or	r2,r9,r6
    2da8:	103f6026 	beq	r2,zero,2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    2dac:	213fffc4 	addi	r4,r4,-1
    2db0:	2000931e 	bne	r4,zero,3000 <__adddf3+0x550>
    2db4:	898d883a 	add	r6,r17,r6
    2db8:	3463803a 	cmpltu	r17,r6,r17
    2dbc:	4251883a 	add	r8,r8,r9
    2dc0:	8a11883a 	add	r8,r17,r8
    2dc4:	3023883a 	mov	r17,r6
    2dc8:	003fd806 	br	2d2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d2c>
    2dcc:	1800541e 	bne	r3,zero,2f20 <__adddf3+0x470>
    2dd0:	80800044 	addi	r2,r16,1
    2dd4:	1081ffcc 	andi	r2,r2,2047
    2dd8:	00c00044 	movi	r3,1
    2ddc:	1880a00e 	bge	r3,r2,3060 <__adddf3+0x5b0>
    2de0:	8989c83a 	sub	r4,r17,r6
    2de4:	8905803a 	cmpltu	r2,r17,r4
    2de8:	4267c83a 	sub	r19,r8,r9
    2dec:	98a7c83a 	sub	r19,r19,r2
    2df0:	9880202c 	andhi	r2,r19,128
    2df4:	10006326 	beq	r2,zero,2f84 <__adddf3+0x4d4>
    2df8:	3463c83a 	sub	r17,r6,r17
    2dfc:	4a07c83a 	sub	r3,r9,r8
    2e00:	344d803a 	cmpltu	r6,r6,r17
    2e04:	19a7c83a 	sub	r19,r3,r6
    2e08:	3825883a 	mov	r18,r7
    2e0c:	983f8a1e 	bne	r19,zero,2c38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c38>
    2e10:	8809883a 	mov	r4,r17
    2e14:	00051d00 	call	51d0 <__clzsi2>
    2e18:	10800804 	addi	r2,r2,32
    2e1c:	10fffe04 	addi	r3,r2,-8
    2e20:	010007c4 	movi	r4,31
    2e24:	20ff890e 	bge	r4,r3,2c4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c4c>
    2e28:	10bff604 	addi	r2,r2,-40
    2e2c:	8884983a 	sll	r2,r17,r2
    2e30:	0023883a 	mov	r17,zero
    2e34:	1c3f8c0e 	bge	r3,r16,2c68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c68>
    2e38:	023fe034 	movhi	r8,65408
    2e3c:	423fffc4 	addi	r8,r8,-1
    2e40:	80e1c83a 	sub	r16,r16,r3
    2e44:	1210703a 	and	r8,r2,r8
    2e48:	003f3806 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    2e4c:	9007883a 	mov	r3,r18
    2e50:	0011883a 	mov	r8,zero
    2e54:	0005883a 	mov	r2,zero
    2e58:	003f4c06 	br	2b8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b8c>
    2e5c:	498cb03a 	or	r6,r9,r6
    2e60:	300cc03a 	cmpne	r6,r6,zero
    2e64:	0007883a 	mov	r3,zero
    2e68:	003f6806 	br	2c0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c0c>
    2e6c:	20009c1e 	bne	r4,zero,30e0 <__adddf3+0x630>
    2e70:	80800044 	addi	r2,r16,1
    2e74:	1141ffcc 	andi	r5,r2,2047
    2e78:	01000044 	movi	r4,1
    2e7c:	2140670e 	bge	r4,r5,301c <__adddf3+0x56c>
    2e80:	0101ffc4 	movi	r4,2047
    2e84:	11007f26 	beq	r2,r4,3084 <__adddf3+0x5d4>
    2e88:	898d883a 	add	r6,r17,r6
    2e8c:	4247883a 	add	r3,r8,r9
    2e90:	3451803a 	cmpltu	r8,r6,r17
    2e94:	40d1883a 	add	r8,r8,r3
    2e98:	402297fa 	slli	r17,r8,31
    2e9c:	300cd07a 	srli	r6,r6,1
    2ea0:	4010d07a 	srli	r8,r8,1
    2ea4:	1021883a 	mov	r16,r2
    2ea8:	89a2b03a 	or	r17,r17,r6
    2eac:	003f1f06 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    2eb0:	0081ffc4 	movi	r2,2047
    2eb4:	80bf481e 	bne	r16,r2,2bd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002bd8>
    2eb8:	003f1c06 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    2ebc:	843ff844 	addi	r16,r16,-31
    2ec0:	01000804 	movi	r4,32
    2ec4:	1406d83a 	srl	r3,r2,r16
    2ec8:	41005026 	beq	r8,r4,300c <__adddf3+0x55c>
    2ecc:	01001004 	movi	r4,64
    2ed0:	2211c83a 	sub	r8,r4,r8
    2ed4:	1204983a 	sll	r2,r2,r8
    2ed8:	88a2b03a 	or	r17,r17,r2
    2edc:	8822c03a 	cmpne	r17,r17,zero
    2ee0:	1c62b03a 	or	r17,r3,r17
    2ee4:	0011883a 	mov	r8,zero
    2ee8:	0021883a 	mov	r16,zero
    2eec:	003f7106 	br	2cb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cb4>
    2ef0:	193ff804 	addi	r4,r3,-32
    2ef4:	00800804 	movi	r2,32
    2ef8:	4908d83a 	srl	r4,r9,r4
    2efc:	18804526 	beq	r3,r2,3014 <__adddf3+0x564>
    2f00:	00801004 	movi	r2,64
    2f04:	10c5c83a 	sub	r2,r2,r3
    2f08:	4886983a 	sll	r3,r9,r2
    2f0c:	198cb03a 	or	r6,r3,r6
    2f10:	300cc03a 	cmpne	r6,r6,zero
    2f14:	218cb03a 	or	r6,r4,r6
    2f18:	0007883a 	mov	r3,zero
    2f1c:	003f3b06 	br	2c0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c0c>
    2f20:	80002a26 	beq	r16,zero,2fcc <__adddf3+0x51c>
    2f24:	0101ffc4 	movi	r4,2047
    2f28:	11006826 	beq	r2,r4,30cc <__adddf3+0x61c>
    2f2c:	00c7c83a 	sub	r3,zero,r3
    2f30:	42002034 	orhi	r8,r8,128
    2f34:	01000e04 	movi	r4,56
    2f38:	20c07c16 	blt	r4,r3,312c <__adddf3+0x67c>
    2f3c:	010007c4 	movi	r4,31
    2f40:	20c0da16 	blt	r4,r3,32ac <__adddf3+0x7fc>
    2f44:	01000804 	movi	r4,32
    2f48:	20c9c83a 	sub	r4,r4,r3
    2f4c:	4114983a 	sll	r10,r8,r4
    2f50:	88cad83a 	srl	r5,r17,r3
    2f54:	8908983a 	sll	r4,r17,r4
    2f58:	40c6d83a 	srl	r3,r8,r3
    2f5c:	5162b03a 	or	r17,r10,r5
    2f60:	2008c03a 	cmpne	r4,r4,zero
    2f64:	8922b03a 	or	r17,r17,r4
    2f68:	3463c83a 	sub	r17,r6,r17
    2f6c:	48c7c83a 	sub	r3,r9,r3
    2f70:	344d803a 	cmpltu	r6,r6,r17
    2f74:	1991c83a 	sub	r8,r3,r6
    2f78:	1021883a 	mov	r16,r2
    2f7c:	3825883a 	mov	r18,r7
    2f80:	003f2706 	br	2c20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c20>
    2f84:	24d0b03a 	or	r8,r4,r19
    2f88:	40001b1e 	bne	r8,zero,2ff8 <__adddf3+0x548>
    2f8c:	0005883a 	mov	r2,zero
    2f90:	0007883a 	mov	r3,zero
    2f94:	0021883a 	mov	r16,zero
    2f98:	003f4d06 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    2f9c:	008007c4 	movi	r2,31
    2fa0:	11003c16 	blt	r2,r4,3094 <__adddf3+0x5e4>
    2fa4:	00800804 	movi	r2,32
    2fa8:	1105c83a 	sub	r2,r2,r4
    2fac:	488e983a 	sll	r7,r9,r2
    2fb0:	310ad83a 	srl	r5,r6,r4
    2fb4:	3084983a 	sll	r2,r6,r2
    2fb8:	4912d83a 	srl	r9,r9,r4
    2fbc:	394ab03a 	or	r5,r7,r5
    2fc0:	1004c03a 	cmpne	r2,r2,zero
    2fc4:	288ab03a 	or	r5,r5,r2
    2fc8:	003f5306 	br	2d18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d18>
    2fcc:	4448b03a 	or	r4,r8,r17
    2fd0:	20003e26 	beq	r4,zero,30cc <__adddf3+0x61c>
    2fd4:	00c6303a 	nor	r3,zero,r3
    2fd8:	18003a1e 	bne	r3,zero,30c4 <__adddf3+0x614>
    2fdc:	3463c83a 	sub	r17,r6,r17
    2fe0:	4a07c83a 	sub	r3,r9,r8
    2fe4:	344d803a 	cmpltu	r6,r6,r17
    2fe8:	1991c83a 	sub	r8,r3,r6
    2fec:	1021883a 	mov	r16,r2
    2ff0:	3825883a 	mov	r18,r7
    2ff4:	003f0a06 	br	2c20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c20>
    2ff8:	2023883a 	mov	r17,r4
    2ffc:	003f0d06 	br	2c34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c34>
    3000:	0081ffc4 	movi	r2,2047
    3004:	80bf3f1e 	bne	r16,r2,2d04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d04>
    3008:	003ec806 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    300c:	0005883a 	mov	r2,zero
    3010:	003fb106 	br	2ed8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ed8>
    3014:	0007883a 	mov	r3,zero
    3018:	003fbc06 	br	2f0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f0c>
    301c:	4444b03a 	or	r2,r8,r17
    3020:	8000871e 	bne	r16,zero,3240 <__adddf3+0x790>
    3024:	1000ba26 	beq	r2,zero,3310 <__adddf3+0x860>
    3028:	4984b03a 	or	r2,r9,r6
    302c:	103ebf26 	beq	r2,zero,2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    3030:	8985883a 	add	r2,r17,r6
    3034:	4247883a 	add	r3,r8,r9
    3038:	1451803a 	cmpltu	r8,r2,r17
    303c:	40d1883a 	add	r8,r8,r3
    3040:	40c0202c 	andhi	r3,r8,128
    3044:	1023883a 	mov	r17,r2
    3048:	183f1a26 	beq	r3,zero,2cb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cb4>
    304c:	00bfe034 	movhi	r2,65408
    3050:	10bfffc4 	addi	r2,r2,-1
    3054:	2021883a 	mov	r16,r4
    3058:	4090703a 	and	r8,r8,r2
    305c:	003eb306 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    3060:	4444b03a 	or	r2,r8,r17
    3064:	8000291e 	bne	r16,zero,310c <__adddf3+0x65c>
    3068:	10004b1e 	bne	r2,zero,3198 <__adddf3+0x6e8>
    306c:	4990b03a 	or	r8,r9,r6
    3070:	40008b26 	beq	r8,zero,32a0 <__adddf3+0x7f0>
    3074:	4811883a 	mov	r8,r9
    3078:	3023883a 	mov	r17,r6
    307c:	3825883a 	mov	r18,r7
    3080:	003eaa06 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    3084:	1021883a 	mov	r16,r2
    3088:	0011883a 	mov	r8,zero
    308c:	0005883a 	mov	r2,zero
    3090:	003f0f06 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    3094:	217ff804 	addi	r5,r4,-32
    3098:	00800804 	movi	r2,32
    309c:	494ad83a 	srl	r5,r9,r5
    30a0:	20807d26 	beq	r4,r2,3298 <__adddf3+0x7e8>
    30a4:	00801004 	movi	r2,64
    30a8:	1109c83a 	sub	r4,r2,r4
    30ac:	4912983a 	sll	r9,r9,r4
    30b0:	498cb03a 	or	r6,r9,r6
    30b4:	300cc03a 	cmpne	r6,r6,zero
    30b8:	298ab03a 	or	r5,r5,r6
    30bc:	0013883a 	mov	r9,zero
    30c0:	003f1506 	br	2d18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d18>
    30c4:	0101ffc4 	movi	r4,2047
    30c8:	113f9a1e 	bne	r2,r4,2f34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f34>
    30cc:	4811883a 	mov	r8,r9
    30d0:	3023883a 	mov	r17,r6
    30d4:	1021883a 	mov	r16,r2
    30d8:	3825883a 	mov	r18,r7
    30dc:	003e9306 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    30e0:	8000161e 	bne	r16,zero,313c <__adddf3+0x68c>
    30e4:	444ab03a 	or	r5,r8,r17
    30e8:	28005126 	beq	r5,zero,3230 <__adddf3+0x780>
    30ec:	0108303a 	nor	r4,zero,r4
    30f0:	20004d1e 	bne	r4,zero,3228 <__adddf3+0x778>
    30f4:	89a3883a 	add	r17,r17,r6
    30f8:	4253883a 	add	r9,r8,r9
    30fc:	898d803a 	cmpltu	r6,r17,r6
    3100:	3251883a 	add	r8,r6,r9
    3104:	1021883a 	mov	r16,r2
    3108:	003f0806 	br	2d2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d2c>
    310c:	1000301e 	bne	r2,zero,31d0 <__adddf3+0x720>
    3110:	4984b03a 	or	r2,r9,r6
    3114:	10007126 	beq	r2,zero,32dc <__adddf3+0x82c>
    3118:	4811883a 	mov	r8,r9
    311c:	3023883a 	mov	r17,r6
    3120:	3825883a 	mov	r18,r7
    3124:	0401ffc4 	movi	r16,2047
    3128:	003e8006 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    312c:	4462b03a 	or	r17,r8,r17
    3130:	8822c03a 	cmpne	r17,r17,zero
    3134:	0007883a 	mov	r3,zero
    3138:	003f8b06 	br	2f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f68>
    313c:	0141ffc4 	movi	r5,2047
    3140:	11403b26 	beq	r2,r5,3230 <__adddf3+0x780>
    3144:	0109c83a 	sub	r4,zero,r4
    3148:	42002034 	orhi	r8,r8,128
    314c:	01400e04 	movi	r5,56
    3150:	29006716 	blt	r5,r4,32f0 <__adddf3+0x840>
    3154:	014007c4 	movi	r5,31
    3158:	29007016 	blt	r5,r4,331c <__adddf3+0x86c>
    315c:	01400804 	movi	r5,32
    3160:	290bc83a 	sub	r5,r5,r4
    3164:	4154983a 	sll	r10,r8,r5
    3168:	890ed83a 	srl	r7,r17,r4
    316c:	894a983a 	sll	r5,r17,r5
    3170:	4108d83a 	srl	r4,r8,r4
    3174:	51e2b03a 	or	r17,r10,r7
    3178:	280ac03a 	cmpne	r5,r5,zero
    317c:	8962b03a 	or	r17,r17,r5
    3180:	89a3883a 	add	r17,r17,r6
    3184:	2253883a 	add	r9,r4,r9
    3188:	898d803a 	cmpltu	r6,r17,r6
    318c:	3251883a 	add	r8,r6,r9
    3190:	1021883a 	mov	r16,r2
    3194:	003ee506 	br	2d2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d2c>
    3198:	4984b03a 	or	r2,r9,r6
    319c:	103e6326 	beq	r2,zero,2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    31a0:	8987c83a 	sub	r3,r17,r6
    31a4:	88c9803a 	cmpltu	r4,r17,r3
    31a8:	4245c83a 	sub	r2,r8,r9
    31ac:	1105c83a 	sub	r2,r2,r4
    31b0:	1100202c 	andhi	r4,r2,128
    31b4:	203ebb26 	beq	r4,zero,2ca4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ca4>
    31b8:	3463c83a 	sub	r17,r6,r17
    31bc:	4a07c83a 	sub	r3,r9,r8
    31c0:	344d803a 	cmpltu	r6,r6,r17
    31c4:	1991c83a 	sub	r8,r3,r6
    31c8:	3825883a 	mov	r18,r7
    31cc:	003e5706 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    31d0:	4984b03a 	or	r2,r9,r6
    31d4:	10002e26 	beq	r2,zero,3290 <__adddf3+0x7e0>
    31d8:	4004d0fa 	srli	r2,r8,3
    31dc:	8822d0fa 	srli	r17,r17,3
    31e0:	4010977a 	slli	r8,r8,29
    31e4:	10c0022c 	andhi	r3,r2,8
    31e8:	4462b03a 	or	r17,r8,r17
    31ec:	18000826 	beq	r3,zero,3210 <__adddf3+0x760>
    31f0:	4808d0fa 	srli	r4,r9,3
    31f4:	20c0022c 	andhi	r3,r4,8
    31f8:	1800051e 	bne	r3,zero,3210 <__adddf3+0x760>
    31fc:	300cd0fa 	srli	r6,r6,3
    3200:	4806977a 	slli	r3,r9,29
    3204:	2005883a 	mov	r2,r4
    3208:	3825883a 	mov	r18,r7
    320c:	19a2b03a 	or	r17,r3,r6
    3210:	8810d77a 	srli	r8,r17,29
    3214:	100490fa 	slli	r2,r2,3
    3218:	882290fa 	slli	r17,r17,3
    321c:	0401ffc4 	movi	r16,2047
    3220:	4090b03a 	or	r8,r8,r2
    3224:	003e4106 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    3228:	0141ffc4 	movi	r5,2047
    322c:	117fc71e 	bne	r2,r5,314c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700314c>
    3230:	4811883a 	mov	r8,r9
    3234:	3023883a 	mov	r17,r6
    3238:	1021883a 	mov	r16,r2
    323c:	003e3b06 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    3240:	10002f26 	beq	r2,zero,3300 <__adddf3+0x850>
    3244:	4984b03a 	or	r2,r9,r6
    3248:	10001126 	beq	r2,zero,3290 <__adddf3+0x7e0>
    324c:	4004d0fa 	srli	r2,r8,3
    3250:	8822d0fa 	srli	r17,r17,3
    3254:	4010977a 	slli	r8,r8,29
    3258:	10c0022c 	andhi	r3,r2,8
    325c:	4462b03a 	or	r17,r8,r17
    3260:	183feb26 	beq	r3,zero,3210 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003210>
    3264:	4808d0fa 	srli	r4,r9,3
    3268:	20c0022c 	andhi	r3,r4,8
    326c:	183fe81e 	bne	r3,zero,3210 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003210>
    3270:	300cd0fa 	srli	r6,r6,3
    3274:	4806977a 	slli	r3,r9,29
    3278:	2005883a 	mov	r2,r4
    327c:	19a2b03a 	or	r17,r3,r6
    3280:	003fe306 	br	3210 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003210>
    3284:	0011883a 	mov	r8,zero
    3288:	0005883a 	mov	r2,zero
    328c:	003e3f06 	br	2b8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b8c>
    3290:	0401ffc4 	movi	r16,2047
    3294:	003e2506 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    3298:	0013883a 	mov	r9,zero
    329c:	003f8406 	br	30b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030b0>
    32a0:	0005883a 	mov	r2,zero
    32a4:	0007883a 	mov	r3,zero
    32a8:	003e8906 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    32ac:	197ff804 	addi	r5,r3,-32
    32b0:	01000804 	movi	r4,32
    32b4:	414ad83a 	srl	r5,r8,r5
    32b8:	19002426 	beq	r3,r4,334c <__adddf3+0x89c>
    32bc:	01001004 	movi	r4,64
    32c0:	20c7c83a 	sub	r3,r4,r3
    32c4:	40c6983a 	sll	r3,r8,r3
    32c8:	1c46b03a 	or	r3,r3,r17
    32cc:	1806c03a 	cmpne	r3,r3,zero
    32d0:	28e2b03a 	or	r17,r5,r3
    32d4:	0007883a 	mov	r3,zero
    32d8:	003f2306 	br	2f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f68>
    32dc:	0007883a 	mov	r3,zero
    32e0:	5811883a 	mov	r8,r11
    32e4:	00bfffc4 	movi	r2,-1
    32e8:	0401ffc4 	movi	r16,2047
    32ec:	003e7806 	br	2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
    32f0:	4462b03a 	or	r17,r8,r17
    32f4:	8822c03a 	cmpne	r17,r17,zero
    32f8:	0009883a 	mov	r4,zero
    32fc:	003fa006 	br	3180 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003180>
    3300:	4811883a 	mov	r8,r9
    3304:	3023883a 	mov	r17,r6
    3308:	0401ffc4 	movi	r16,2047
    330c:	003e0706 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    3310:	4811883a 	mov	r8,r9
    3314:	3023883a 	mov	r17,r6
    3318:	003e0406 	br	2b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b2c>
    331c:	21fff804 	addi	r7,r4,-32
    3320:	01400804 	movi	r5,32
    3324:	41ced83a 	srl	r7,r8,r7
    3328:	21400a26 	beq	r4,r5,3354 <__adddf3+0x8a4>
    332c:	01401004 	movi	r5,64
    3330:	2909c83a 	sub	r4,r5,r4
    3334:	4108983a 	sll	r4,r8,r4
    3338:	2448b03a 	or	r4,r4,r17
    333c:	2008c03a 	cmpne	r4,r4,zero
    3340:	3922b03a 	or	r17,r7,r4
    3344:	0009883a 	mov	r4,zero
    3348:	003f8d06 	br	3180 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003180>
    334c:	0007883a 	mov	r3,zero
    3350:	003fdd06 	br	32c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70032c8>
    3354:	0009883a 	mov	r4,zero
    3358:	003ff706 	br	3338 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003338>

0000335c <__divdf3>:
    335c:	defff204 	addi	sp,sp,-56
    3360:	dd400915 	stw	r21,36(sp)
    3364:	282ad53a 	srli	r21,r5,20
    3368:	dd000815 	stw	r20,32(sp)
    336c:	2828d7fa 	srli	r20,r5,31
    3370:	dc000415 	stw	r16,16(sp)
    3374:	04000434 	movhi	r16,16
    3378:	df000c15 	stw	fp,48(sp)
    337c:	843fffc4 	addi	r16,r16,-1
    3380:	dfc00d15 	stw	ra,52(sp)
    3384:	ddc00b15 	stw	r23,44(sp)
    3388:	dd800a15 	stw	r22,40(sp)
    338c:	dcc00715 	stw	r19,28(sp)
    3390:	dc800615 	stw	r18,24(sp)
    3394:	dc400515 	stw	r17,20(sp)
    3398:	ad41ffcc 	andi	r21,r21,2047
    339c:	2c20703a 	and	r16,r5,r16
    33a0:	a7003fcc 	andi	fp,r20,255
    33a4:	a8006126 	beq	r21,zero,352c <__divdf3+0x1d0>
    33a8:	0081ffc4 	movi	r2,2047
    33ac:	2025883a 	mov	r18,r4
    33b0:	a8803726 	beq	r21,r2,3490 <__divdf3+0x134>
    33b4:	80800434 	orhi	r2,r16,16
    33b8:	100490fa 	slli	r2,r2,3
    33bc:	2020d77a 	srli	r16,r4,29
    33c0:	202490fa 	slli	r18,r4,3
    33c4:	ad7f0044 	addi	r21,r21,-1023
    33c8:	80a0b03a 	or	r16,r16,r2
    33cc:	0027883a 	mov	r19,zero
    33d0:	0013883a 	mov	r9,zero
    33d4:	3804d53a 	srli	r2,r7,20
    33d8:	382cd7fa 	srli	r22,r7,31
    33dc:	04400434 	movhi	r17,16
    33e0:	8c7fffc4 	addi	r17,r17,-1
    33e4:	1081ffcc 	andi	r2,r2,2047
    33e8:	3011883a 	mov	r8,r6
    33ec:	3c62703a 	and	r17,r7,r17
    33f0:	b5c03fcc 	andi	r23,r22,255
    33f4:	10006c26 	beq	r2,zero,35a8 <__divdf3+0x24c>
    33f8:	00c1ffc4 	movi	r3,2047
    33fc:	10c06426 	beq	r2,r3,3590 <__divdf3+0x234>
    3400:	88c00434 	orhi	r3,r17,16
    3404:	180690fa 	slli	r3,r3,3
    3408:	3022d77a 	srli	r17,r6,29
    340c:	301090fa 	slli	r8,r6,3
    3410:	10bf0044 	addi	r2,r2,-1023
    3414:	88e2b03a 	or	r17,r17,r3
    3418:	000f883a 	mov	r7,zero
    341c:	a58cf03a 	xor	r6,r20,r22
    3420:	3cc8b03a 	or	r4,r7,r19
    3424:	a8abc83a 	sub	r21,r21,r2
    3428:	008003c4 	movi	r2,15
    342c:	3007883a 	mov	r3,r6
    3430:	34c03fcc 	andi	r19,r6,255
    3434:	11009036 	bltu	r2,r4,3678 <__divdf3+0x31c>
    3438:	200890ba 	slli	r4,r4,2
    343c:	00800034 	movhi	r2,0
    3440:	108d1404 	addi	r2,r2,13392
    3444:	2089883a 	add	r4,r4,r2
    3448:	20800017 	ldw	r2,0(r4)
    344c:	1000683a 	jmp	r2
    3450:	00003678 	rdprs	zero,zero,217
    3454:	000034c8 	cmpgei	zero,zero,211
    3458:	00003668 	cmpgeui	zero,zero,217
    345c:	000034bc 	xorhi	zero,zero,210
    3460:	00003668 	cmpgeui	zero,zero,217
    3464:	0000363c 	xorhi	zero,zero,216
    3468:	00003668 	cmpgeui	zero,zero,217
    346c:	000034bc 	xorhi	zero,zero,210
    3470:	000034c8 	cmpgei	zero,zero,211
    3474:	000034c8 	cmpgei	zero,zero,211
    3478:	0000363c 	xorhi	zero,zero,216
    347c:	000034bc 	xorhi	zero,zero,210
    3480:	000034ac 	andhi	zero,zero,210
    3484:	000034ac 	andhi	zero,zero,210
    3488:	000034ac 	andhi	zero,zero,210
    348c:	0000395c 	xori	zero,zero,229
    3490:	2404b03a 	or	r2,r4,r16
    3494:	1000661e 	bne	r2,zero,3630 <__divdf3+0x2d4>
    3498:	04c00204 	movi	r19,8
    349c:	0021883a 	mov	r16,zero
    34a0:	0025883a 	mov	r18,zero
    34a4:	02400084 	movi	r9,2
    34a8:	003fca06 	br	33d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033d4>
    34ac:	8023883a 	mov	r17,r16
    34b0:	9011883a 	mov	r8,r18
    34b4:	e02f883a 	mov	r23,fp
    34b8:	480f883a 	mov	r7,r9
    34bc:	00800084 	movi	r2,2
    34c0:	3881311e 	bne	r7,r2,3988 <__divdf3+0x62c>
    34c4:	b827883a 	mov	r19,r23
    34c8:	98c0004c 	andi	r3,r19,1
    34cc:	0081ffc4 	movi	r2,2047
    34d0:	000b883a 	mov	r5,zero
    34d4:	0025883a 	mov	r18,zero
    34d8:	1004953a 	slli	r2,r2,20
    34dc:	18c03fcc 	andi	r3,r3,255
    34e0:	04400434 	movhi	r17,16
    34e4:	8c7fffc4 	addi	r17,r17,-1
    34e8:	180697fa 	slli	r3,r3,31
    34ec:	2c4a703a 	and	r5,r5,r17
    34f0:	288ab03a 	or	r5,r5,r2
    34f4:	28c6b03a 	or	r3,r5,r3
    34f8:	9005883a 	mov	r2,r18
    34fc:	dfc00d17 	ldw	ra,52(sp)
    3500:	df000c17 	ldw	fp,48(sp)
    3504:	ddc00b17 	ldw	r23,44(sp)
    3508:	dd800a17 	ldw	r22,40(sp)
    350c:	dd400917 	ldw	r21,36(sp)
    3510:	dd000817 	ldw	r20,32(sp)
    3514:	dcc00717 	ldw	r19,28(sp)
    3518:	dc800617 	ldw	r18,24(sp)
    351c:	dc400517 	ldw	r17,20(sp)
    3520:	dc000417 	ldw	r16,16(sp)
    3524:	dec00e04 	addi	sp,sp,56
    3528:	f800283a 	ret
    352c:	2404b03a 	or	r2,r4,r16
    3530:	2027883a 	mov	r19,r4
    3534:	10003926 	beq	r2,zero,361c <__divdf3+0x2c0>
    3538:	80012e26 	beq	r16,zero,39f4 <__divdf3+0x698>
    353c:	8009883a 	mov	r4,r16
    3540:	d9800315 	stw	r6,12(sp)
    3544:	d9c00215 	stw	r7,8(sp)
    3548:	00051d00 	call	51d0 <__clzsi2>
    354c:	d9800317 	ldw	r6,12(sp)
    3550:	d9c00217 	ldw	r7,8(sp)
    3554:	113ffd44 	addi	r4,r2,-11
    3558:	00c00704 	movi	r3,28
    355c:	19012116 	blt	r3,r4,39e4 <__divdf3+0x688>
    3560:	00c00744 	movi	r3,29
    3564:	147ffe04 	addi	r17,r2,-8
    3568:	1907c83a 	sub	r3,r3,r4
    356c:	8460983a 	sll	r16,r16,r17
    3570:	98c6d83a 	srl	r3,r19,r3
    3574:	9c64983a 	sll	r18,r19,r17
    3578:	1c20b03a 	or	r16,r3,r16
    357c:	1080fcc4 	addi	r2,r2,1011
    3580:	00abc83a 	sub	r21,zero,r2
    3584:	0027883a 	mov	r19,zero
    3588:	0013883a 	mov	r9,zero
    358c:	003f9106 	br	33d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033d4>
    3590:	3446b03a 	or	r3,r6,r17
    3594:	18001f1e 	bne	r3,zero,3614 <__divdf3+0x2b8>
    3598:	0023883a 	mov	r17,zero
    359c:	0011883a 	mov	r8,zero
    35a0:	01c00084 	movi	r7,2
    35a4:	003f9d06 	br	341c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700341c>
    35a8:	3446b03a 	or	r3,r6,r17
    35ac:	18001526 	beq	r3,zero,3604 <__divdf3+0x2a8>
    35b0:	88011b26 	beq	r17,zero,3a20 <__divdf3+0x6c4>
    35b4:	8809883a 	mov	r4,r17
    35b8:	d9800315 	stw	r6,12(sp)
    35bc:	da400115 	stw	r9,4(sp)
    35c0:	00051d00 	call	51d0 <__clzsi2>
    35c4:	d9800317 	ldw	r6,12(sp)
    35c8:	da400117 	ldw	r9,4(sp)
    35cc:	113ffd44 	addi	r4,r2,-11
    35d0:	00c00704 	movi	r3,28
    35d4:	19010e16 	blt	r3,r4,3a10 <__divdf3+0x6b4>
    35d8:	00c00744 	movi	r3,29
    35dc:	123ffe04 	addi	r8,r2,-8
    35e0:	1907c83a 	sub	r3,r3,r4
    35e4:	8a22983a 	sll	r17,r17,r8
    35e8:	30c6d83a 	srl	r3,r6,r3
    35ec:	3210983a 	sll	r8,r6,r8
    35f0:	1c62b03a 	or	r17,r3,r17
    35f4:	1080fcc4 	addi	r2,r2,1011
    35f8:	0085c83a 	sub	r2,zero,r2
    35fc:	000f883a 	mov	r7,zero
    3600:	003f8606 	br	341c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700341c>
    3604:	0023883a 	mov	r17,zero
    3608:	0011883a 	mov	r8,zero
    360c:	01c00044 	movi	r7,1
    3610:	003f8206 	br	341c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700341c>
    3614:	01c000c4 	movi	r7,3
    3618:	003f8006 	br	341c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700341c>
    361c:	04c00104 	movi	r19,4
    3620:	0021883a 	mov	r16,zero
    3624:	0025883a 	mov	r18,zero
    3628:	02400044 	movi	r9,1
    362c:	003f6906 	br	33d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033d4>
    3630:	04c00304 	movi	r19,12
    3634:	024000c4 	movi	r9,3
    3638:	003f6606 	br	33d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033d4>
    363c:	01400434 	movhi	r5,16
    3640:	0007883a 	mov	r3,zero
    3644:	297fffc4 	addi	r5,r5,-1
    3648:	04bfffc4 	movi	r18,-1
    364c:	0081ffc4 	movi	r2,2047
    3650:	003fa106 	br	34d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70034d8>
    3654:	00c00044 	movi	r3,1
    3658:	1887c83a 	sub	r3,r3,r2
    365c:	01000e04 	movi	r4,56
    3660:	20c1210e 	bge	r4,r3,3ae8 <__divdf3+0x78c>
    3664:	98c0004c 	andi	r3,r19,1
    3668:	0005883a 	mov	r2,zero
    366c:	000b883a 	mov	r5,zero
    3670:	0025883a 	mov	r18,zero
    3674:	003f9806 	br	34d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70034d8>
    3678:	8c00fd36 	bltu	r17,r16,3a70 <__divdf3+0x714>
    367c:	8440fb26 	beq	r16,r17,3a6c <__divdf3+0x710>
    3680:	8007883a 	mov	r3,r16
    3684:	ad7fffc4 	addi	r21,r21,-1
    3688:	0021883a 	mov	r16,zero
    368c:	4004d63a 	srli	r2,r8,24
    3690:	8822923a 	slli	r17,r17,8
    3694:	1809883a 	mov	r4,r3
    3698:	402c923a 	slli	r22,r8,8
    369c:	88b8b03a 	or	fp,r17,r2
    36a0:	e028d43a 	srli	r20,fp,16
    36a4:	d8c00015 	stw	r3,0(sp)
    36a8:	e5ffffcc 	andi	r23,fp,65535
    36ac:	a00b883a 	mov	r5,r20
    36b0:	00028600 	call	2860 <__udivsi3>
    36b4:	d8c00017 	ldw	r3,0(sp)
    36b8:	a00b883a 	mov	r5,r20
    36bc:	d8800315 	stw	r2,12(sp)
    36c0:	1809883a 	mov	r4,r3
    36c4:	00028c40 	call	28c4 <__umodsi3>
    36c8:	d9800317 	ldw	r6,12(sp)
    36cc:	1006943a 	slli	r3,r2,16
    36d0:	9004d43a 	srli	r2,r18,16
    36d4:	b9a3383a 	mul	r17,r23,r6
    36d8:	10c4b03a 	or	r2,r2,r3
    36dc:	1440062e 	bgeu	r2,r17,36f8 <__divdf3+0x39c>
    36e0:	1705883a 	add	r2,r2,fp
    36e4:	30ffffc4 	addi	r3,r6,-1
    36e8:	1700ee36 	bltu	r2,fp,3aa4 <__divdf3+0x748>
    36ec:	1440ed2e 	bgeu	r2,r17,3aa4 <__divdf3+0x748>
    36f0:	31bfff84 	addi	r6,r6,-2
    36f4:	1705883a 	add	r2,r2,fp
    36f8:	1463c83a 	sub	r17,r2,r17
    36fc:	a00b883a 	mov	r5,r20
    3700:	8809883a 	mov	r4,r17
    3704:	d9800315 	stw	r6,12(sp)
    3708:	00028600 	call	2860 <__udivsi3>
    370c:	a00b883a 	mov	r5,r20
    3710:	8809883a 	mov	r4,r17
    3714:	d8800215 	stw	r2,8(sp)
    3718:	00028c40 	call	28c4 <__umodsi3>
    371c:	d9c00217 	ldw	r7,8(sp)
    3720:	1004943a 	slli	r2,r2,16
    3724:	94bfffcc 	andi	r18,r18,65535
    3728:	b9d1383a 	mul	r8,r23,r7
    372c:	90a4b03a 	or	r18,r18,r2
    3730:	d9800317 	ldw	r6,12(sp)
    3734:	9200062e 	bgeu	r18,r8,3750 <__divdf3+0x3f4>
    3738:	9725883a 	add	r18,r18,fp
    373c:	38bfffc4 	addi	r2,r7,-1
    3740:	9700d636 	bltu	r18,fp,3a9c <__divdf3+0x740>
    3744:	9200d52e 	bgeu	r18,r8,3a9c <__divdf3+0x740>
    3748:	39ffff84 	addi	r7,r7,-2
    374c:	9725883a 	add	r18,r18,fp
    3750:	3004943a 	slli	r2,r6,16
    3754:	b012d43a 	srli	r9,r22,16
    3758:	b1bfffcc 	andi	r6,r22,65535
    375c:	11e2b03a 	or	r17,r2,r7
    3760:	8806d43a 	srli	r3,r17,16
    3764:	893fffcc 	andi	r4,r17,65535
    3768:	218b383a 	mul	r5,r4,r6
    376c:	30c5383a 	mul	r2,r6,r3
    3770:	2249383a 	mul	r4,r4,r9
    3774:	280ed43a 	srli	r7,r5,16
    3778:	9225c83a 	sub	r18,r18,r8
    377c:	2089883a 	add	r4,r4,r2
    3780:	3909883a 	add	r4,r7,r4
    3784:	1a47383a 	mul	r3,r3,r9
    3788:	2080022e 	bgeu	r4,r2,3794 <__divdf3+0x438>
    378c:	00800074 	movhi	r2,1
    3790:	1887883a 	add	r3,r3,r2
    3794:	2004d43a 	srli	r2,r4,16
    3798:	2008943a 	slli	r4,r4,16
    379c:	297fffcc 	andi	r5,r5,65535
    37a0:	10c7883a 	add	r3,r2,r3
    37a4:	2149883a 	add	r4,r4,r5
    37a8:	90c0a536 	bltu	r18,r3,3a40 <__divdf3+0x6e4>
    37ac:	90c0bf26 	beq	r18,r3,3aac <__divdf3+0x750>
    37b0:	90c7c83a 	sub	r3,r18,r3
    37b4:	810fc83a 	sub	r7,r16,r4
    37b8:	81e5803a 	cmpltu	r18,r16,r7
    37bc:	1ca5c83a 	sub	r18,r3,r18
    37c0:	e480c126 	beq	fp,r18,3ac8 <__divdf3+0x76c>
    37c4:	a00b883a 	mov	r5,r20
    37c8:	9009883a 	mov	r4,r18
    37cc:	d9800315 	stw	r6,12(sp)
    37d0:	d9c00215 	stw	r7,8(sp)
    37d4:	da400115 	stw	r9,4(sp)
    37d8:	00028600 	call	2860 <__udivsi3>
    37dc:	a00b883a 	mov	r5,r20
    37e0:	9009883a 	mov	r4,r18
    37e4:	d8800015 	stw	r2,0(sp)
    37e8:	00028c40 	call	28c4 <__umodsi3>
    37ec:	d9c00217 	ldw	r7,8(sp)
    37f0:	da000017 	ldw	r8,0(sp)
    37f4:	1006943a 	slli	r3,r2,16
    37f8:	3804d43a 	srli	r2,r7,16
    37fc:	ba21383a 	mul	r16,r23,r8
    3800:	d9800317 	ldw	r6,12(sp)
    3804:	10c4b03a 	or	r2,r2,r3
    3808:	da400117 	ldw	r9,4(sp)
    380c:	1400062e 	bgeu	r2,r16,3828 <__divdf3+0x4cc>
    3810:	1705883a 	add	r2,r2,fp
    3814:	40ffffc4 	addi	r3,r8,-1
    3818:	1700ad36 	bltu	r2,fp,3ad0 <__divdf3+0x774>
    381c:	1400ac2e 	bgeu	r2,r16,3ad0 <__divdf3+0x774>
    3820:	423fff84 	addi	r8,r8,-2
    3824:	1705883a 	add	r2,r2,fp
    3828:	1421c83a 	sub	r16,r2,r16
    382c:	a00b883a 	mov	r5,r20
    3830:	8009883a 	mov	r4,r16
    3834:	d9800315 	stw	r6,12(sp)
    3838:	d9c00215 	stw	r7,8(sp)
    383c:	da000015 	stw	r8,0(sp)
    3840:	da400115 	stw	r9,4(sp)
    3844:	00028600 	call	2860 <__udivsi3>
    3848:	8009883a 	mov	r4,r16
    384c:	a00b883a 	mov	r5,r20
    3850:	1025883a 	mov	r18,r2
    3854:	00028c40 	call	28c4 <__umodsi3>
    3858:	d9c00217 	ldw	r7,8(sp)
    385c:	1004943a 	slli	r2,r2,16
    3860:	bcaf383a 	mul	r23,r23,r18
    3864:	393fffcc 	andi	r4,r7,65535
    3868:	2088b03a 	or	r4,r4,r2
    386c:	d9800317 	ldw	r6,12(sp)
    3870:	da000017 	ldw	r8,0(sp)
    3874:	da400117 	ldw	r9,4(sp)
    3878:	25c0062e 	bgeu	r4,r23,3894 <__divdf3+0x538>
    387c:	2709883a 	add	r4,r4,fp
    3880:	90bfffc4 	addi	r2,r18,-1
    3884:	27009436 	bltu	r4,fp,3ad8 <__divdf3+0x77c>
    3888:	25c0932e 	bgeu	r4,r23,3ad8 <__divdf3+0x77c>
    388c:	94bfff84 	addi	r18,r18,-2
    3890:	2709883a 	add	r4,r4,fp
    3894:	4004943a 	slli	r2,r8,16
    3898:	25efc83a 	sub	r23,r4,r23
    389c:	1490b03a 	or	r8,r2,r18
    38a0:	4008d43a 	srli	r4,r8,16
    38a4:	40ffffcc 	andi	r3,r8,65535
    38a8:	30c5383a 	mul	r2,r6,r3
    38ac:	1a47383a 	mul	r3,r3,r9
    38b0:	310d383a 	mul	r6,r6,r4
    38b4:	100ad43a 	srli	r5,r2,16
    38b8:	4913383a 	mul	r9,r9,r4
    38bc:	1987883a 	add	r3,r3,r6
    38c0:	28c7883a 	add	r3,r5,r3
    38c4:	1980022e 	bgeu	r3,r6,38d0 <__divdf3+0x574>
    38c8:	01000074 	movhi	r4,1
    38cc:	4913883a 	add	r9,r9,r4
    38d0:	1808d43a 	srli	r4,r3,16
    38d4:	1806943a 	slli	r3,r3,16
    38d8:	10bfffcc 	andi	r2,r2,65535
    38dc:	2253883a 	add	r9,r4,r9
    38e0:	1887883a 	add	r3,r3,r2
    38e4:	ba403836 	bltu	r23,r9,39c8 <__divdf3+0x66c>
    38e8:	ba403626 	beq	r23,r9,39c4 <__divdf3+0x668>
    38ec:	42000054 	ori	r8,r8,1
    38f0:	a880ffc4 	addi	r2,r21,1023
    38f4:	00bf570e 	bge	zero,r2,3654 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003654>
    38f8:	40c001cc 	andi	r3,r8,7
    38fc:	18000726 	beq	r3,zero,391c <__divdf3+0x5c0>
    3900:	40c003cc 	andi	r3,r8,15
    3904:	01000104 	movi	r4,4
    3908:	19000426 	beq	r3,r4,391c <__divdf3+0x5c0>
    390c:	4107883a 	add	r3,r8,r4
    3910:	1a11803a 	cmpltu	r8,r3,r8
    3914:	8a23883a 	add	r17,r17,r8
    3918:	1811883a 	mov	r8,r3
    391c:	88c0402c 	andhi	r3,r17,256
    3920:	18000426 	beq	r3,zero,3934 <__divdf3+0x5d8>
    3924:	00ffc034 	movhi	r3,65280
    3928:	18ffffc4 	addi	r3,r3,-1
    392c:	a8810004 	addi	r2,r21,1024
    3930:	88e2703a 	and	r17,r17,r3
    3934:	00c1ff84 	movi	r3,2046
    3938:	18bee316 	blt	r3,r2,34c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70034c8>
    393c:	8824977a 	slli	r18,r17,29
    3940:	4010d0fa 	srli	r8,r8,3
    3944:	8822927a 	slli	r17,r17,9
    3948:	1081ffcc 	andi	r2,r2,2047
    394c:	9224b03a 	or	r18,r18,r8
    3950:	880ad33a 	srli	r5,r17,12
    3954:	98c0004c 	andi	r3,r19,1
    3958:	003edf06 	br	34d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70034d8>
    395c:	8080022c 	andhi	r2,r16,8
    3960:	10001226 	beq	r2,zero,39ac <__divdf3+0x650>
    3964:	8880022c 	andhi	r2,r17,8
    3968:	1000101e 	bne	r2,zero,39ac <__divdf3+0x650>
    396c:	00800434 	movhi	r2,16
    3970:	89400234 	orhi	r5,r17,8
    3974:	10bfffc4 	addi	r2,r2,-1
    3978:	b007883a 	mov	r3,r22
    397c:	288a703a 	and	r5,r5,r2
    3980:	4025883a 	mov	r18,r8
    3984:	003f3106 	br	364c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700364c>
    3988:	008000c4 	movi	r2,3
    398c:	3880a626 	beq	r7,r2,3c28 <__divdf3+0x8cc>
    3990:	00800044 	movi	r2,1
    3994:	3880521e 	bne	r7,r2,3ae0 <__divdf3+0x784>
    3998:	b807883a 	mov	r3,r23
    399c:	0005883a 	mov	r2,zero
    39a0:	000b883a 	mov	r5,zero
    39a4:	0025883a 	mov	r18,zero
    39a8:	003ecb06 	br	34d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70034d8>
    39ac:	00800434 	movhi	r2,16
    39b0:	81400234 	orhi	r5,r16,8
    39b4:	10bfffc4 	addi	r2,r2,-1
    39b8:	a007883a 	mov	r3,r20
    39bc:	288a703a 	and	r5,r5,r2
    39c0:	003f2206 	br	364c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700364c>
    39c4:	183fca26 	beq	r3,zero,38f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70038f0>
    39c8:	e5ef883a 	add	r23,fp,r23
    39cc:	40bfffc4 	addi	r2,r8,-1
    39d0:	bf00392e 	bgeu	r23,fp,3ab8 <__divdf3+0x75c>
    39d4:	1011883a 	mov	r8,r2
    39d8:	ba7fc41e 	bne	r23,r9,38ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70038ec>
    39dc:	b0ffc31e 	bne	r22,r3,38ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70038ec>
    39e0:	003fc306 	br	38f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70038f0>
    39e4:	143ff604 	addi	r16,r2,-40
    39e8:	9c20983a 	sll	r16,r19,r16
    39ec:	0025883a 	mov	r18,zero
    39f0:	003ee206 	br	357c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700357c>
    39f4:	d9800315 	stw	r6,12(sp)
    39f8:	d9c00215 	stw	r7,8(sp)
    39fc:	00051d00 	call	51d0 <__clzsi2>
    3a00:	10800804 	addi	r2,r2,32
    3a04:	d9c00217 	ldw	r7,8(sp)
    3a08:	d9800317 	ldw	r6,12(sp)
    3a0c:	003ed106 	br	3554 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003554>
    3a10:	147ff604 	addi	r17,r2,-40
    3a14:	3462983a 	sll	r17,r6,r17
    3a18:	0011883a 	mov	r8,zero
    3a1c:	003ef506 	br	35f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70035f4>
    3a20:	3009883a 	mov	r4,r6
    3a24:	d9800315 	stw	r6,12(sp)
    3a28:	da400115 	stw	r9,4(sp)
    3a2c:	00051d00 	call	51d0 <__clzsi2>
    3a30:	10800804 	addi	r2,r2,32
    3a34:	da400117 	ldw	r9,4(sp)
    3a38:	d9800317 	ldw	r6,12(sp)
    3a3c:	003ee306 	br	35cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70035cc>
    3a40:	85a1883a 	add	r16,r16,r22
    3a44:	8585803a 	cmpltu	r2,r16,r22
    3a48:	1705883a 	add	r2,r2,fp
    3a4c:	14a5883a 	add	r18,r2,r18
    3a50:	88bfffc4 	addi	r2,r17,-1
    3a54:	e4800c2e 	bgeu	fp,r18,3a88 <__divdf3+0x72c>
    3a58:	90c03e36 	bltu	r18,r3,3b54 <__divdf3+0x7f8>
    3a5c:	1c806926 	beq	r3,r18,3c04 <__divdf3+0x8a8>
    3a60:	90c7c83a 	sub	r3,r18,r3
    3a64:	1023883a 	mov	r17,r2
    3a68:	003f5206 	br	37b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037b4>
    3a6c:	923f0436 	bltu	r18,r8,3680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003680>
    3a70:	800897fa 	slli	r4,r16,31
    3a74:	9004d07a 	srli	r2,r18,1
    3a78:	8006d07a 	srli	r3,r16,1
    3a7c:	902097fa 	slli	r16,r18,31
    3a80:	20a4b03a 	or	r18,r4,r2
    3a84:	003f0106 	br	368c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700368c>
    3a88:	e4bff51e 	bne	fp,r18,3a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a60>
    3a8c:	85bff22e 	bgeu	r16,r22,3a58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a58>
    3a90:	e0c7c83a 	sub	r3,fp,r3
    3a94:	1023883a 	mov	r17,r2
    3a98:	003f4606 	br	37b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037b4>
    3a9c:	100f883a 	mov	r7,r2
    3aa0:	003f2b06 	br	3750 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003750>
    3aa4:	180d883a 	mov	r6,r3
    3aa8:	003f1306 	br	36f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70036f8>
    3aac:	813fe436 	bltu	r16,r4,3a40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a40>
    3ab0:	0007883a 	mov	r3,zero
    3ab4:	003f3f06 	br	37b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037b4>
    3ab8:	ba402c36 	bltu	r23,r9,3b6c <__divdf3+0x810>
    3abc:	4dc05426 	beq	r9,r23,3c10 <__divdf3+0x8b4>
    3ac0:	1011883a 	mov	r8,r2
    3ac4:	003f8906 	br	38ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70038ec>
    3ac8:	023fffc4 	movi	r8,-1
    3acc:	003f8806 	br	38f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70038f0>
    3ad0:	1811883a 	mov	r8,r3
    3ad4:	003f5406 	br	3828 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003828>
    3ad8:	1025883a 	mov	r18,r2
    3adc:	003f6d06 	br	3894 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003894>
    3ae0:	b827883a 	mov	r19,r23
    3ae4:	003f8206 	br	38f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70038f0>
    3ae8:	010007c4 	movi	r4,31
    3aec:	20c02616 	blt	r4,r3,3b88 <__divdf3+0x82c>
    3af0:	00800804 	movi	r2,32
    3af4:	10c5c83a 	sub	r2,r2,r3
    3af8:	888a983a 	sll	r5,r17,r2
    3afc:	40c8d83a 	srl	r4,r8,r3
    3b00:	4084983a 	sll	r2,r8,r2
    3b04:	88e2d83a 	srl	r17,r17,r3
    3b08:	2906b03a 	or	r3,r5,r4
    3b0c:	1004c03a 	cmpne	r2,r2,zero
    3b10:	1886b03a 	or	r3,r3,r2
    3b14:	188001cc 	andi	r2,r3,7
    3b18:	10000726 	beq	r2,zero,3b38 <__divdf3+0x7dc>
    3b1c:	188003cc 	andi	r2,r3,15
    3b20:	01000104 	movi	r4,4
    3b24:	11000426 	beq	r2,r4,3b38 <__divdf3+0x7dc>
    3b28:	1805883a 	mov	r2,r3
    3b2c:	10c00104 	addi	r3,r2,4
    3b30:	1885803a 	cmpltu	r2,r3,r2
    3b34:	88a3883a 	add	r17,r17,r2
    3b38:	8880202c 	andhi	r2,r17,128
    3b3c:	10002726 	beq	r2,zero,3bdc <__divdf3+0x880>
    3b40:	98c0004c 	andi	r3,r19,1
    3b44:	00800044 	movi	r2,1
    3b48:	000b883a 	mov	r5,zero
    3b4c:	0025883a 	mov	r18,zero
    3b50:	003e6106 	br	34d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70034d8>
    3b54:	85a1883a 	add	r16,r16,r22
    3b58:	8585803a 	cmpltu	r2,r16,r22
    3b5c:	1705883a 	add	r2,r2,fp
    3b60:	14a5883a 	add	r18,r2,r18
    3b64:	8c7fff84 	addi	r17,r17,-2
    3b68:	003f1106 	br	37b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037b0>
    3b6c:	b589883a 	add	r4,r22,r22
    3b70:	25ad803a 	cmpltu	r22,r4,r22
    3b74:	b739883a 	add	fp,r22,fp
    3b78:	40bfff84 	addi	r2,r8,-2
    3b7c:	bf2f883a 	add	r23,r23,fp
    3b80:	202d883a 	mov	r22,r4
    3b84:	003f9306 	br	39d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70039d4>
    3b88:	013ff844 	movi	r4,-31
    3b8c:	2085c83a 	sub	r2,r4,r2
    3b90:	8888d83a 	srl	r4,r17,r2
    3b94:	00800804 	movi	r2,32
    3b98:	18802126 	beq	r3,r2,3c20 <__divdf3+0x8c4>
    3b9c:	00801004 	movi	r2,64
    3ba0:	10c5c83a 	sub	r2,r2,r3
    3ba4:	8884983a 	sll	r2,r17,r2
    3ba8:	1204b03a 	or	r2,r2,r8
    3bac:	1004c03a 	cmpne	r2,r2,zero
    3bb0:	2084b03a 	or	r2,r4,r2
    3bb4:	144001cc 	andi	r17,r2,7
    3bb8:	88000d1e 	bne	r17,zero,3bf0 <__divdf3+0x894>
    3bbc:	000b883a 	mov	r5,zero
    3bc0:	1024d0fa 	srli	r18,r2,3
    3bc4:	98c0004c 	andi	r3,r19,1
    3bc8:	0005883a 	mov	r2,zero
    3bcc:	9464b03a 	or	r18,r18,r17
    3bd0:	003e4106 	br	34d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70034d8>
    3bd4:	1007883a 	mov	r3,r2
    3bd8:	0023883a 	mov	r17,zero
    3bdc:	880a927a 	slli	r5,r17,9
    3be0:	1805883a 	mov	r2,r3
    3be4:	8822977a 	slli	r17,r17,29
    3be8:	280ad33a 	srli	r5,r5,12
    3bec:	003ff406 	br	3bc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003bc0>
    3bf0:	10c003cc 	andi	r3,r2,15
    3bf4:	01000104 	movi	r4,4
    3bf8:	193ff626 	beq	r3,r4,3bd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003bd4>
    3bfc:	0023883a 	mov	r17,zero
    3c00:	003fca06 	br	3b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b2c>
    3c04:	813fd336 	bltu	r16,r4,3b54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b54>
    3c08:	1023883a 	mov	r17,r2
    3c0c:	003fa806 	br	3ab0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ab0>
    3c10:	b0ffd636 	bltu	r22,r3,3b6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b6c>
    3c14:	1011883a 	mov	r8,r2
    3c18:	b0ff341e 	bne	r22,r3,38ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70038ec>
    3c1c:	003f3406 	br	38f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70038f0>
    3c20:	0005883a 	mov	r2,zero
    3c24:	003fe006 	br	3ba8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ba8>
    3c28:	00800434 	movhi	r2,16
    3c2c:	89400234 	orhi	r5,r17,8
    3c30:	10bfffc4 	addi	r2,r2,-1
    3c34:	b807883a 	mov	r3,r23
    3c38:	288a703a 	and	r5,r5,r2
    3c3c:	4025883a 	mov	r18,r8
    3c40:	003e8206 	br	364c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700364c>

00003c44 <__eqdf2>:
    3c44:	2804d53a 	srli	r2,r5,20
    3c48:	3806d53a 	srli	r3,r7,20
    3c4c:	02000434 	movhi	r8,16
    3c50:	423fffc4 	addi	r8,r8,-1
    3c54:	1081ffcc 	andi	r2,r2,2047
    3c58:	0281ffc4 	movi	r10,2047
    3c5c:	2a12703a 	and	r9,r5,r8
    3c60:	18c1ffcc 	andi	r3,r3,2047
    3c64:	3a10703a 	and	r8,r7,r8
    3c68:	280ad7fa 	srli	r5,r5,31
    3c6c:	380ed7fa 	srli	r7,r7,31
    3c70:	12801026 	beq	r2,r10,3cb4 <__eqdf2+0x70>
    3c74:	0281ffc4 	movi	r10,2047
    3c78:	1a800a26 	beq	r3,r10,3ca4 <__eqdf2+0x60>
    3c7c:	10c00226 	beq	r2,r3,3c88 <__eqdf2+0x44>
    3c80:	00800044 	movi	r2,1
    3c84:	f800283a 	ret
    3c88:	4a3ffd1e 	bne	r9,r8,3c80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c80>
    3c8c:	21bffc1e 	bne	r4,r6,3c80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c80>
    3c90:	29c00c26 	beq	r5,r7,3cc4 <__eqdf2+0x80>
    3c94:	103ffa1e 	bne	r2,zero,3c80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c80>
    3c98:	2244b03a 	or	r2,r4,r9
    3c9c:	1004c03a 	cmpne	r2,r2,zero
    3ca0:	f800283a 	ret
    3ca4:	3214b03a 	or	r10,r6,r8
    3ca8:	503ff426 	beq	r10,zero,3c7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c7c>
    3cac:	00800044 	movi	r2,1
    3cb0:	f800283a 	ret
    3cb4:	2254b03a 	or	r10,r4,r9
    3cb8:	503fee26 	beq	r10,zero,3c74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c74>
    3cbc:	00800044 	movi	r2,1
    3cc0:	f800283a 	ret
    3cc4:	0005883a 	mov	r2,zero
    3cc8:	f800283a 	ret

00003ccc <__gedf2>:
    3ccc:	2804d53a 	srli	r2,r5,20
    3cd0:	3806d53a 	srli	r3,r7,20
    3cd4:	02000434 	movhi	r8,16
    3cd8:	423fffc4 	addi	r8,r8,-1
    3cdc:	1081ffcc 	andi	r2,r2,2047
    3ce0:	0241ffc4 	movi	r9,2047
    3ce4:	2a14703a 	and	r10,r5,r8
    3ce8:	18c1ffcc 	andi	r3,r3,2047
    3cec:	3a10703a 	and	r8,r7,r8
    3cf0:	280ad7fa 	srli	r5,r5,31
    3cf4:	380ed7fa 	srli	r7,r7,31
    3cf8:	12401d26 	beq	r2,r9,3d70 <__gedf2+0xa4>
    3cfc:	0241ffc4 	movi	r9,2047
    3d00:	1a401226 	beq	r3,r9,3d4c <__gedf2+0x80>
    3d04:	1000081e 	bne	r2,zero,3d28 <__gedf2+0x5c>
    3d08:	2296b03a 	or	r11,r4,r10
    3d0c:	5813003a 	cmpeq	r9,r11,zero
    3d10:	1800091e 	bne	r3,zero,3d38 <__gedf2+0x6c>
    3d14:	3218b03a 	or	r12,r6,r8
    3d18:	6000071e 	bne	r12,zero,3d38 <__gedf2+0x6c>
    3d1c:	0005883a 	mov	r2,zero
    3d20:	5800101e 	bne	r11,zero,3d64 <__gedf2+0x98>
    3d24:	f800283a 	ret
    3d28:	18000c1e 	bne	r3,zero,3d5c <__gedf2+0x90>
    3d2c:	3212b03a 	or	r9,r6,r8
    3d30:	48000c26 	beq	r9,zero,3d64 <__gedf2+0x98>
    3d34:	0013883a 	mov	r9,zero
    3d38:	39c03fcc 	andi	r7,r7,255
    3d3c:	48000826 	beq	r9,zero,3d60 <__gedf2+0x94>
    3d40:	38000926 	beq	r7,zero,3d68 <__gedf2+0x9c>
    3d44:	00800044 	movi	r2,1
    3d48:	f800283a 	ret
    3d4c:	3212b03a 	or	r9,r6,r8
    3d50:	483fec26 	beq	r9,zero,3d04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d04>
    3d54:	00bfff84 	movi	r2,-2
    3d58:	f800283a 	ret
    3d5c:	39c03fcc 	andi	r7,r7,255
    3d60:	29c00626 	beq	r5,r7,3d7c <__gedf2+0xb0>
    3d64:	283ff726 	beq	r5,zero,3d44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d44>
    3d68:	00bfffc4 	movi	r2,-1
    3d6c:	f800283a 	ret
    3d70:	2292b03a 	or	r9,r4,r10
    3d74:	483fe126 	beq	r9,zero,3cfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003cfc>
    3d78:	003ff606 	br	3d54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d54>
    3d7c:	18bff916 	blt	r3,r2,3d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d64>
    3d80:	10c00316 	blt	r2,r3,3d90 <__gedf2+0xc4>
    3d84:	42bff736 	bltu	r8,r10,3d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d64>
    3d88:	52000326 	beq	r10,r8,3d98 <__gedf2+0xcc>
    3d8c:	5200042e 	bgeu	r10,r8,3da0 <__gedf2+0xd4>
    3d90:	283fec1e 	bne	r5,zero,3d44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d44>
    3d94:	003ff406 	br	3d68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d68>
    3d98:	313ff236 	bltu	r6,r4,3d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d64>
    3d9c:	21bffc36 	bltu	r4,r6,3d90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d90>
    3da0:	0005883a 	mov	r2,zero
    3da4:	f800283a 	ret

00003da8 <__muldf3>:
    3da8:	defff304 	addi	sp,sp,-52
    3dac:	2804d53a 	srli	r2,r5,20
    3db0:	dd800915 	stw	r22,36(sp)
    3db4:	282cd7fa 	srli	r22,r5,31
    3db8:	dc000315 	stw	r16,12(sp)
    3dbc:	04000434 	movhi	r16,16
    3dc0:	dd400815 	stw	r21,32(sp)
    3dc4:	dc800515 	stw	r18,20(sp)
    3dc8:	843fffc4 	addi	r16,r16,-1
    3dcc:	dfc00c15 	stw	ra,48(sp)
    3dd0:	df000b15 	stw	fp,44(sp)
    3dd4:	ddc00a15 	stw	r23,40(sp)
    3dd8:	dd000715 	stw	r20,28(sp)
    3ddc:	dcc00615 	stw	r19,24(sp)
    3de0:	dc400415 	stw	r17,16(sp)
    3de4:	1481ffcc 	andi	r18,r2,2047
    3de8:	2c20703a 	and	r16,r5,r16
    3dec:	b02b883a 	mov	r21,r22
    3df0:	b2403fcc 	andi	r9,r22,255
    3df4:	90006026 	beq	r18,zero,3f78 <__muldf3+0x1d0>
    3df8:	0081ffc4 	movi	r2,2047
    3dfc:	2029883a 	mov	r20,r4
    3e00:	90803626 	beq	r18,r2,3edc <__muldf3+0x134>
    3e04:	80800434 	orhi	r2,r16,16
    3e08:	100490fa 	slli	r2,r2,3
    3e0c:	2020d77a 	srli	r16,r4,29
    3e10:	202890fa 	slli	r20,r4,3
    3e14:	94bf0044 	addi	r18,r18,-1023
    3e18:	80a0b03a 	or	r16,r16,r2
    3e1c:	0027883a 	mov	r19,zero
    3e20:	0039883a 	mov	fp,zero
    3e24:	3804d53a 	srli	r2,r7,20
    3e28:	382ed7fa 	srli	r23,r7,31
    3e2c:	04400434 	movhi	r17,16
    3e30:	8c7fffc4 	addi	r17,r17,-1
    3e34:	1081ffcc 	andi	r2,r2,2047
    3e38:	3011883a 	mov	r8,r6
    3e3c:	3c62703a 	and	r17,r7,r17
    3e40:	ba803fcc 	andi	r10,r23,255
    3e44:	10006d26 	beq	r2,zero,3ffc <__muldf3+0x254>
    3e48:	00c1ffc4 	movi	r3,2047
    3e4c:	10c06526 	beq	r2,r3,3fe4 <__muldf3+0x23c>
    3e50:	88c00434 	orhi	r3,r17,16
    3e54:	180690fa 	slli	r3,r3,3
    3e58:	3022d77a 	srli	r17,r6,29
    3e5c:	301090fa 	slli	r8,r6,3
    3e60:	10bf0044 	addi	r2,r2,-1023
    3e64:	88e2b03a 	or	r17,r17,r3
    3e68:	000b883a 	mov	r5,zero
    3e6c:	9085883a 	add	r2,r18,r2
    3e70:	2cc8b03a 	or	r4,r5,r19
    3e74:	00c003c4 	movi	r3,15
    3e78:	bdacf03a 	xor	r22,r23,r22
    3e7c:	12c00044 	addi	r11,r2,1
    3e80:	19009936 	bltu	r3,r4,40e8 <__muldf3+0x340>
    3e84:	200890ba 	slli	r4,r4,2
    3e88:	00c00034 	movhi	r3,0
    3e8c:	18cfa704 	addi	r3,r3,16028
    3e90:	20c9883a 	add	r4,r4,r3
    3e94:	20c00017 	ldw	r3,0(r4)
    3e98:	1800683a 	jmp	r3
    3e9c:	000040e8 	cmpgeui	zero,zero,259
    3ea0:	00003efc 	xorhi	zero,zero,251
    3ea4:	00003efc 	xorhi	zero,zero,251
    3ea8:	00003ef8 	rdprs	zero,zero,251
    3eac:	000040c4 	movi	zero,259
    3eb0:	000040c4 	movi	zero,259
    3eb4:	000040ac 	andhi	zero,zero,258
    3eb8:	00003ef8 	rdprs	zero,zero,251
    3ebc:	000040c4 	movi	zero,259
    3ec0:	000040ac 	andhi	zero,zero,258
    3ec4:	000040c4 	movi	zero,259
    3ec8:	00003ef8 	rdprs	zero,zero,251
    3ecc:	000040d4 	movui	zero,259
    3ed0:	000040d4 	movui	zero,259
    3ed4:	000040d4 	movui	zero,259
    3ed8:	000042f0 	cmpltui	zero,zero,267
    3edc:	2404b03a 	or	r2,r4,r16
    3ee0:	10006f1e 	bne	r2,zero,40a0 <__muldf3+0x2f8>
    3ee4:	04c00204 	movi	r19,8
    3ee8:	0021883a 	mov	r16,zero
    3eec:	0029883a 	mov	r20,zero
    3ef0:	07000084 	movi	fp,2
    3ef4:	003fcb06 	br	3e24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e24>
    3ef8:	502d883a 	mov	r22,r10
    3efc:	00800084 	movi	r2,2
    3f00:	28805726 	beq	r5,r2,4060 <__muldf3+0x2b8>
    3f04:	008000c4 	movi	r2,3
    3f08:	28816626 	beq	r5,r2,44a4 <__muldf3+0x6fc>
    3f0c:	00800044 	movi	r2,1
    3f10:	2881411e 	bne	r5,r2,4418 <__muldf3+0x670>
    3f14:	b02b883a 	mov	r21,r22
    3f18:	0005883a 	mov	r2,zero
    3f1c:	000b883a 	mov	r5,zero
    3f20:	0029883a 	mov	r20,zero
    3f24:	1004953a 	slli	r2,r2,20
    3f28:	a8c03fcc 	andi	r3,r21,255
    3f2c:	04400434 	movhi	r17,16
    3f30:	8c7fffc4 	addi	r17,r17,-1
    3f34:	180697fa 	slli	r3,r3,31
    3f38:	2c4a703a 	and	r5,r5,r17
    3f3c:	288ab03a 	or	r5,r5,r2
    3f40:	28c6b03a 	or	r3,r5,r3
    3f44:	a005883a 	mov	r2,r20
    3f48:	dfc00c17 	ldw	ra,48(sp)
    3f4c:	df000b17 	ldw	fp,44(sp)
    3f50:	ddc00a17 	ldw	r23,40(sp)
    3f54:	dd800917 	ldw	r22,36(sp)
    3f58:	dd400817 	ldw	r21,32(sp)
    3f5c:	dd000717 	ldw	r20,28(sp)
    3f60:	dcc00617 	ldw	r19,24(sp)
    3f64:	dc800517 	ldw	r18,20(sp)
    3f68:	dc400417 	ldw	r17,16(sp)
    3f6c:	dc000317 	ldw	r16,12(sp)
    3f70:	dec00d04 	addi	sp,sp,52
    3f74:	f800283a 	ret
    3f78:	2404b03a 	or	r2,r4,r16
    3f7c:	2027883a 	mov	r19,r4
    3f80:	10004226 	beq	r2,zero,408c <__muldf3+0x2e4>
    3f84:	8000fc26 	beq	r16,zero,4378 <__muldf3+0x5d0>
    3f88:	8009883a 	mov	r4,r16
    3f8c:	d9800215 	stw	r6,8(sp)
    3f90:	d9c00015 	stw	r7,0(sp)
    3f94:	da400115 	stw	r9,4(sp)
    3f98:	00051d00 	call	51d0 <__clzsi2>
    3f9c:	d9800217 	ldw	r6,8(sp)
    3fa0:	d9c00017 	ldw	r7,0(sp)
    3fa4:	da400117 	ldw	r9,4(sp)
    3fa8:	113ffd44 	addi	r4,r2,-11
    3fac:	00c00704 	movi	r3,28
    3fb0:	1900ed16 	blt	r3,r4,4368 <__muldf3+0x5c0>
    3fb4:	00c00744 	movi	r3,29
    3fb8:	147ffe04 	addi	r17,r2,-8
    3fbc:	1907c83a 	sub	r3,r3,r4
    3fc0:	8460983a 	sll	r16,r16,r17
    3fc4:	98c6d83a 	srl	r3,r19,r3
    3fc8:	9c68983a 	sll	r20,r19,r17
    3fcc:	1c20b03a 	or	r16,r3,r16
    3fd0:	1080fcc4 	addi	r2,r2,1011
    3fd4:	00a5c83a 	sub	r18,zero,r2
    3fd8:	0027883a 	mov	r19,zero
    3fdc:	0039883a 	mov	fp,zero
    3fe0:	003f9006 	br	3e24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e24>
    3fe4:	3446b03a 	or	r3,r6,r17
    3fe8:	1800261e 	bne	r3,zero,4084 <__muldf3+0x2dc>
    3fec:	0023883a 	mov	r17,zero
    3ff0:	0011883a 	mov	r8,zero
    3ff4:	01400084 	movi	r5,2
    3ff8:	003f9c06 	br	3e6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e6c>
    3ffc:	3446b03a 	or	r3,r6,r17
    4000:	18001c26 	beq	r3,zero,4074 <__muldf3+0x2cc>
    4004:	8800ce26 	beq	r17,zero,4340 <__muldf3+0x598>
    4008:	8809883a 	mov	r4,r17
    400c:	d9800215 	stw	r6,8(sp)
    4010:	da400115 	stw	r9,4(sp)
    4014:	da800015 	stw	r10,0(sp)
    4018:	00051d00 	call	51d0 <__clzsi2>
    401c:	d9800217 	ldw	r6,8(sp)
    4020:	da400117 	ldw	r9,4(sp)
    4024:	da800017 	ldw	r10,0(sp)
    4028:	113ffd44 	addi	r4,r2,-11
    402c:	00c00704 	movi	r3,28
    4030:	1900bf16 	blt	r3,r4,4330 <__muldf3+0x588>
    4034:	00c00744 	movi	r3,29
    4038:	123ffe04 	addi	r8,r2,-8
    403c:	1907c83a 	sub	r3,r3,r4
    4040:	8a22983a 	sll	r17,r17,r8
    4044:	30c6d83a 	srl	r3,r6,r3
    4048:	3210983a 	sll	r8,r6,r8
    404c:	1c62b03a 	or	r17,r3,r17
    4050:	1080fcc4 	addi	r2,r2,1011
    4054:	0085c83a 	sub	r2,zero,r2
    4058:	000b883a 	mov	r5,zero
    405c:	003f8306 	br	3e6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e6c>
    4060:	b02b883a 	mov	r21,r22
    4064:	0081ffc4 	movi	r2,2047
    4068:	000b883a 	mov	r5,zero
    406c:	0029883a 	mov	r20,zero
    4070:	003fac06 	br	3f24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f24>
    4074:	0023883a 	mov	r17,zero
    4078:	0011883a 	mov	r8,zero
    407c:	01400044 	movi	r5,1
    4080:	003f7a06 	br	3e6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e6c>
    4084:	014000c4 	movi	r5,3
    4088:	003f7806 	br	3e6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e6c>
    408c:	04c00104 	movi	r19,4
    4090:	0021883a 	mov	r16,zero
    4094:	0029883a 	mov	r20,zero
    4098:	07000044 	movi	fp,1
    409c:	003f6106 	br	3e24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e24>
    40a0:	04c00304 	movi	r19,12
    40a4:	070000c4 	movi	fp,3
    40a8:	003f5e06 	br	3e24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e24>
    40ac:	01400434 	movhi	r5,16
    40b0:	002b883a 	mov	r21,zero
    40b4:	297fffc4 	addi	r5,r5,-1
    40b8:	053fffc4 	movi	r20,-1
    40bc:	0081ffc4 	movi	r2,2047
    40c0:	003f9806 	br	3f24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f24>
    40c4:	8023883a 	mov	r17,r16
    40c8:	a011883a 	mov	r8,r20
    40cc:	e00b883a 	mov	r5,fp
    40d0:	003f8a06 	br	3efc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003efc>
    40d4:	8023883a 	mov	r17,r16
    40d8:	a011883a 	mov	r8,r20
    40dc:	482d883a 	mov	r22,r9
    40e0:	e00b883a 	mov	r5,fp
    40e4:	003f8506 	br	3efc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003efc>
    40e8:	a00ad43a 	srli	r5,r20,16
    40ec:	401ad43a 	srli	r13,r8,16
    40f0:	a53fffcc 	andi	r20,r20,65535
    40f4:	423fffcc 	andi	r8,r8,65535
    40f8:	4519383a 	mul	r12,r8,r20
    40fc:	4147383a 	mul	r3,r8,r5
    4100:	6d09383a 	mul	r4,r13,r20
    4104:	600cd43a 	srli	r6,r12,16
    4108:	2b5d383a 	mul	r14,r5,r13
    410c:	20c9883a 	add	r4,r4,r3
    4110:	310d883a 	add	r6,r6,r4
    4114:	30c0022e 	bgeu	r6,r3,4120 <__muldf3+0x378>
    4118:	00c00074 	movhi	r3,1
    411c:	70dd883a 	add	r14,r14,r3
    4120:	8826d43a 	srli	r19,r17,16
    4124:	8bffffcc 	andi	r15,r17,65535
    4128:	7d23383a 	mul	r17,r15,r20
    412c:	7949383a 	mul	r4,r15,r5
    4130:	9d29383a 	mul	r20,r19,r20
    4134:	8814d43a 	srli	r10,r17,16
    4138:	3012943a 	slli	r9,r6,16
    413c:	a129883a 	add	r20,r20,r4
    4140:	633fffcc 	andi	r12,r12,65535
    4144:	5515883a 	add	r10,r10,r20
    4148:	3006d43a 	srli	r3,r6,16
    414c:	4b13883a 	add	r9,r9,r12
    4150:	2ccb383a 	mul	r5,r5,r19
    4154:	5100022e 	bgeu	r10,r4,4160 <__muldf3+0x3b8>
    4158:	01000074 	movhi	r4,1
    415c:	290b883a 	add	r5,r5,r4
    4160:	802ad43a 	srli	r21,r16,16
    4164:	843fffcc 	andi	r16,r16,65535
    4168:	440d383a 	mul	r6,r8,r16
    416c:	4565383a 	mul	r18,r8,r21
    4170:	8349383a 	mul	r4,r16,r13
    4174:	500e943a 	slli	r7,r10,16
    4178:	3010d43a 	srli	r8,r6,16
    417c:	5028d43a 	srli	r20,r10,16
    4180:	2489883a 	add	r4,r4,r18
    4184:	8abfffcc 	andi	r10,r17,65535
    4188:	3a95883a 	add	r10,r7,r10
    418c:	4119883a 	add	r12,r8,r4
    4190:	a169883a 	add	r20,r20,r5
    4194:	1a87883a 	add	r3,r3,r10
    4198:	6d5b383a 	mul	r13,r13,r21
    419c:	6480022e 	bgeu	r12,r18,41a8 <__muldf3+0x400>
    41a0:	01000074 	movhi	r4,1
    41a4:	691b883a 	add	r13,r13,r4
    41a8:	7c25383a 	mul	r18,r15,r16
    41ac:	7d4b383a 	mul	r5,r15,r21
    41b0:	84cf383a 	mul	r7,r16,r19
    41b4:	901ed43a 	srli	r15,r18,16
    41b8:	6008d43a 	srli	r4,r12,16
    41bc:	6010943a 	slli	r8,r12,16
    41c0:	394f883a 	add	r7,r7,r5
    41c4:	333fffcc 	andi	r12,r6,65535
    41c8:	79df883a 	add	r15,r15,r7
    41cc:	235b883a 	add	r13,r4,r13
    41d0:	9d63383a 	mul	r17,r19,r21
    41d4:	4309883a 	add	r4,r8,r12
    41d8:	7940022e 	bgeu	r15,r5,41e4 <__muldf3+0x43c>
    41dc:	01400074 	movhi	r5,1
    41e0:	8963883a 	add	r17,r17,r5
    41e4:	780a943a 	slli	r5,r15,16
    41e8:	91bfffcc 	andi	r6,r18,65535
    41ec:	70c7883a 	add	r3,r14,r3
    41f0:	298d883a 	add	r6,r5,r6
    41f4:	1a8f803a 	cmpltu	r7,r3,r10
    41f8:	350b883a 	add	r5,r6,r20
    41fc:	20c7883a 	add	r3,r4,r3
    4200:	3955883a 	add	r10,r7,r5
    4204:	1909803a 	cmpltu	r4,r3,r4
    4208:	6a91883a 	add	r8,r13,r10
    420c:	780cd43a 	srli	r6,r15,16
    4210:	2219883a 	add	r12,r4,r8
    4214:	2d0b803a 	cmpltu	r5,r5,r20
    4218:	51cf803a 	cmpltu	r7,r10,r7
    421c:	29ceb03a 	or	r7,r5,r7
    4220:	4351803a 	cmpltu	r8,r8,r13
    4224:	610b803a 	cmpltu	r5,r12,r4
    4228:	4148b03a 	or	r4,r8,r5
    422c:	398f883a 	add	r7,r7,r6
    4230:	3909883a 	add	r4,r7,r4
    4234:	1810927a 	slli	r8,r3,9
    4238:	2449883a 	add	r4,r4,r17
    423c:	2008927a 	slli	r4,r4,9
    4240:	6022d5fa 	srli	r17,r12,23
    4244:	1806d5fa 	srli	r3,r3,23
    4248:	4252b03a 	or	r9,r8,r9
    424c:	600a927a 	slli	r5,r12,9
    4250:	4810c03a 	cmpne	r8,r9,zero
    4254:	2462b03a 	or	r17,r4,r17
    4258:	40c6b03a 	or	r3,r8,r3
    425c:	8900402c 	andhi	r4,r17,256
    4260:	1950b03a 	or	r8,r3,r5
    4264:	20000726 	beq	r4,zero,4284 <__muldf3+0x4dc>
    4268:	4006d07a 	srli	r3,r8,1
    426c:	880497fa 	slli	r2,r17,31
    4270:	4200004c 	andi	r8,r8,1
    4274:	8822d07a 	srli	r17,r17,1
    4278:	1a10b03a 	or	r8,r3,r8
    427c:	1210b03a 	or	r8,r2,r8
    4280:	5805883a 	mov	r2,r11
    4284:	1140ffc4 	addi	r5,r2,1023
    4288:	0140440e 	bge	zero,r5,439c <__muldf3+0x5f4>
    428c:	40c001cc 	andi	r3,r8,7
    4290:	18000726 	beq	r3,zero,42b0 <__muldf3+0x508>
    4294:	40c003cc 	andi	r3,r8,15
    4298:	01000104 	movi	r4,4
    429c:	19000426 	beq	r3,r4,42b0 <__muldf3+0x508>
    42a0:	4107883a 	add	r3,r8,r4
    42a4:	1a11803a 	cmpltu	r8,r3,r8
    42a8:	8a23883a 	add	r17,r17,r8
    42ac:	1811883a 	mov	r8,r3
    42b0:	88c0402c 	andhi	r3,r17,256
    42b4:	18000426 	beq	r3,zero,42c8 <__muldf3+0x520>
    42b8:	11410004 	addi	r5,r2,1024
    42bc:	00bfc034 	movhi	r2,65280
    42c0:	10bfffc4 	addi	r2,r2,-1
    42c4:	88a2703a 	and	r17,r17,r2
    42c8:	0081ff84 	movi	r2,2046
    42cc:	117f6416 	blt	r2,r5,4060 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004060>
    42d0:	8828977a 	slli	r20,r17,29
    42d4:	4010d0fa 	srli	r8,r8,3
    42d8:	8822927a 	slli	r17,r17,9
    42dc:	2881ffcc 	andi	r2,r5,2047
    42e0:	a228b03a 	or	r20,r20,r8
    42e4:	880ad33a 	srli	r5,r17,12
    42e8:	b02b883a 	mov	r21,r22
    42ec:	003f0d06 	br	3f24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f24>
    42f0:	8080022c 	andhi	r2,r16,8
    42f4:	10000926 	beq	r2,zero,431c <__muldf3+0x574>
    42f8:	8880022c 	andhi	r2,r17,8
    42fc:	1000071e 	bne	r2,zero,431c <__muldf3+0x574>
    4300:	00800434 	movhi	r2,16
    4304:	89400234 	orhi	r5,r17,8
    4308:	10bfffc4 	addi	r2,r2,-1
    430c:	b82b883a 	mov	r21,r23
    4310:	288a703a 	and	r5,r5,r2
    4314:	4029883a 	mov	r20,r8
    4318:	003f6806 	br	40bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040bc>
    431c:	00800434 	movhi	r2,16
    4320:	81400234 	orhi	r5,r16,8
    4324:	10bfffc4 	addi	r2,r2,-1
    4328:	288a703a 	and	r5,r5,r2
    432c:	003f6306 	br	40bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040bc>
    4330:	147ff604 	addi	r17,r2,-40
    4334:	3462983a 	sll	r17,r6,r17
    4338:	0011883a 	mov	r8,zero
    433c:	003f4406 	br	4050 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004050>
    4340:	3009883a 	mov	r4,r6
    4344:	d9800215 	stw	r6,8(sp)
    4348:	da400115 	stw	r9,4(sp)
    434c:	da800015 	stw	r10,0(sp)
    4350:	00051d00 	call	51d0 <__clzsi2>
    4354:	10800804 	addi	r2,r2,32
    4358:	da800017 	ldw	r10,0(sp)
    435c:	da400117 	ldw	r9,4(sp)
    4360:	d9800217 	ldw	r6,8(sp)
    4364:	003f3006 	br	4028 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004028>
    4368:	143ff604 	addi	r16,r2,-40
    436c:	9c20983a 	sll	r16,r19,r16
    4370:	0029883a 	mov	r20,zero
    4374:	003f1606 	br	3fd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fd0>
    4378:	d9800215 	stw	r6,8(sp)
    437c:	d9c00015 	stw	r7,0(sp)
    4380:	da400115 	stw	r9,4(sp)
    4384:	00051d00 	call	51d0 <__clzsi2>
    4388:	10800804 	addi	r2,r2,32
    438c:	da400117 	ldw	r9,4(sp)
    4390:	d9c00017 	ldw	r7,0(sp)
    4394:	d9800217 	ldw	r6,8(sp)
    4398:	003f0306 	br	3fa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fa8>
    439c:	00c00044 	movi	r3,1
    43a0:	1947c83a 	sub	r3,r3,r5
    43a4:	00800e04 	movi	r2,56
    43a8:	10feda16 	blt	r2,r3,3f14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f14>
    43ac:	008007c4 	movi	r2,31
    43b0:	10c01b16 	blt	r2,r3,4420 <__muldf3+0x678>
    43b4:	00800804 	movi	r2,32
    43b8:	10c5c83a 	sub	r2,r2,r3
    43bc:	888a983a 	sll	r5,r17,r2
    43c0:	40c8d83a 	srl	r4,r8,r3
    43c4:	4084983a 	sll	r2,r8,r2
    43c8:	88e2d83a 	srl	r17,r17,r3
    43cc:	2906b03a 	or	r3,r5,r4
    43d0:	1004c03a 	cmpne	r2,r2,zero
    43d4:	1886b03a 	or	r3,r3,r2
    43d8:	188001cc 	andi	r2,r3,7
    43dc:	10000726 	beq	r2,zero,43fc <__muldf3+0x654>
    43e0:	188003cc 	andi	r2,r3,15
    43e4:	01000104 	movi	r4,4
    43e8:	11000426 	beq	r2,r4,43fc <__muldf3+0x654>
    43ec:	1805883a 	mov	r2,r3
    43f0:	10c00104 	addi	r3,r2,4
    43f4:	1885803a 	cmpltu	r2,r3,r2
    43f8:	88a3883a 	add	r17,r17,r2
    43fc:	8880202c 	andhi	r2,r17,128
    4400:	10001c26 	beq	r2,zero,4474 <__muldf3+0x6cc>
    4404:	b02b883a 	mov	r21,r22
    4408:	00800044 	movi	r2,1
    440c:	000b883a 	mov	r5,zero
    4410:	0029883a 	mov	r20,zero
    4414:	003ec306 	br	3f24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f24>
    4418:	5805883a 	mov	r2,r11
    441c:	003f9906 	br	4284 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004284>
    4420:	00bff844 	movi	r2,-31
    4424:	1145c83a 	sub	r2,r2,r5
    4428:	8888d83a 	srl	r4,r17,r2
    442c:	00800804 	movi	r2,32
    4430:	18801a26 	beq	r3,r2,449c <__muldf3+0x6f4>
    4434:	00801004 	movi	r2,64
    4438:	10c5c83a 	sub	r2,r2,r3
    443c:	8884983a 	sll	r2,r17,r2
    4440:	1204b03a 	or	r2,r2,r8
    4444:	1004c03a 	cmpne	r2,r2,zero
    4448:	2084b03a 	or	r2,r4,r2
    444c:	144001cc 	andi	r17,r2,7
    4450:	88000d1e 	bne	r17,zero,4488 <__muldf3+0x6e0>
    4454:	000b883a 	mov	r5,zero
    4458:	1028d0fa 	srli	r20,r2,3
    445c:	b02b883a 	mov	r21,r22
    4460:	0005883a 	mov	r2,zero
    4464:	a468b03a 	or	r20,r20,r17
    4468:	003eae06 	br	3f24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f24>
    446c:	1007883a 	mov	r3,r2
    4470:	0023883a 	mov	r17,zero
    4474:	880a927a 	slli	r5,r17,9
    4478:	1805883a 	mov	r2,r3
    447c:	8822977a 	slli	r17,r17,29
    4480:	280ad33a 	srli	r5,r5,12
    4484:	003ff406 	br	4458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004458>
    4488:	10c003cc 	andi	r3,r2,15
    448c:	01000104 	movi	r4,4
    4490:	193ff626 	beq	r3,r4,446c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700446c>
    4494:	0023883a 	mov	r17,zero
    4498:	003fd506 	br	43f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043f0>
    449c:	0005883a 	mov	r2,zero
    44a0:	003fe706 	br	4440 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004440>
    44a4:	00800434 	movhi	r2,16
    44a8:	89400234 	orhi	r5,r17,8
    44ac:	10bfffc4 	addi	r2,r2,-1
    44b0:	b02b883a 	mov	r21,r22
    44b4:	288a703a 	and	r5,r5,r2
    44b8:	4029883a 	mov	r20,r8
    44bc:	003eff06 	br	40bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040bc>

000044c0 <__subdf3>:
    44c0:	02000434 	movhi	r8,16
    44c4:	423fffc4 	addi	r8,r8,-1
    44c8:	defffb04 	addi	sp,sp,-20
    44cc:	2a14703a 	and	r10,r5,r8
    44d0:	3812d53a 	srli	r9,r7,20
    44d4:	3a10703a 	and	r8,r7,r8
    44d8:	2006d77a 	srli	r3,r4,29
    44dc:	3004d77a 	srli	r2,r6,29
    44e0:	dc000015 	stw	r16,0(sp)
    44e4:	501490fa 	slli	r10,r10,3
    44e8:	2820d53a 	srli	r16,r5,20
    44ec:	401090fa 	slli	r8,r8,3
    44f0:	dc800215 	stw	r18,8(sp)
    44f4:	dc400115 	stw	r17,4(sp)
    44f8:	dfc00415 	stw	ra,16(sp)
    44fc:	202290fa 	slli	r17,r4,3
    4500:	dcc00315 	stw	r19,12(sp)
    4504:	4a41ffcc 	andi	r9,r9,2047
    4508:	0101ffc4 	movi	r4,2047
    450c:	2824d7fa 	srli	r18,r5,31
    4510:	8401ffcc 	andi	r16,r16,2047
    4514:	50c6b03a 	or	r3,r10,r3
    4518:	380ed7fa 	srli	r7,r7,31
    451c:	408ab03a 	or	r5,r8,r2
    4520:	300c90fa 	slli	r6,r6,3
    4524:	49009626 	beq	r9,r4,4780 <__subdf3+0x2c0>
    4528:	39c0005c 	xori	r7,r7,1
    452c:	8245c83a 	sub	r2,r16,r9
    4530:	3c807426 	beq	r7,r18,4704 <__subdf3+0x244>
    4534:	0080af0e 	bge	zero,r2,47f4 <__subdf3+0x334>
    4538:	48002a1e 	bne	r9,zero,45e4 <__subdf3+0x124>
    453c:	2988b03a 	or	r4,r5,r6
    4540:	20009a1e 	bne	r4,zero,47ac <__subdf3+0x2ec>
    4544:	888001cc 	andi	r2,r17,7
    4548:	10000726 	beq	r2,zero,4568 <__subdf3+0xa8>
    454c:	888003cc 	andi	r2,r17,15
    4550:	01000104 	movi	r4,4
    4554:	11000426 	beq	r2,r4,4568 <__subdf3+0xa8>
    4558:	890b883a 	add	r5,r17,r4
    455c:	2c63803a 	cmpltu	r17,r5,r17
    4560:	1c47883a 	add	r3,r3,r17
    4564:	2823883a 	mov	r17,r5
    4568:	1880202c 	andhi	r2,r3,128
    456c:	10005926 	beq	r2,zero,46d4 <__subdf3+0x214>
    4570:	84000044 	addi	r16,r16,1
    4574:	0081ffc4 	movi	r2,2047
    4578:	8080be26 	beq	r16,r2,4874 <__subdf3+0x3b4>
    457c:	017fe034 	movhi	r5,65408
    4580:	297fffc4 	addi	r5,r5,-1
    4584:	1946703a 	and	r3,r3,r5
    4588:	1804977a 	slli	r2,r3,29
    458c:	1806927a 	slli	r3,r3,9
    4590:	8822d0fa 	srli	r17,r17,3
    4594:	8401ffcc 	andi	r16,r16,2047
    4598:	180ad33a 	srli	r5,r3,12
    459c:	9100004c 	andi	r4,r18,1
    45a0:	1444b03a 	or	r2,r2,r17
    45a4:	80c1ffcc 	andi	r3,r16,2047
    45a8:	1820953a 	slli	r16,r3,20
    45ac:	20c03fcc 	andi	r3,r4,255
    45b0:	180897fa 	slli	r4,r3,31
    45b4:	00c00434 	movhi	r3,16
    45b8:	18ffffc4 	addi	r3,r3,-1
    45bc:	28c6703a 	and	r3,r5,r3
    45c0:	1c06b03a 	or	r3,r3,r16
    45c4:	1906b03a 	or	r3,r3,r4
    45c8:	dfc00417 	ldw	ra,16(sp)
    45cc:	dcc00317 	ldw	r19,12(sp)
    45d0:	dc800217 	ldw	r18,8(sp)
    45d4:	dc400117 	ldw	r17,4(sp)
    45d8:	dc000017 	ldw	r16,0(sp)
    45dc:	dec00504 	addi	sp,sp,20
    45e0:	f800283a 	ret
    45e4:	0101ffc4 	movi	r4,2047
    45e8:	813fd626 	beq	r16,r4,4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    45ec:	29402034 	orhi	r5,r5,128
    45f0:	01000e04 	movi	r4,56
    45f4:	2080a316 	blt	r4,r2,4884 <__subdf3+0x3c4>
    45f8:	010007c4 	movi	r4,31
    45fc:	2080c616 	blt	r4,r2,4918 <__subdf3+0x458>
    4600:	01000804 	movi	r4,32
    4604:	2089c83a 	sub	r4,r4,r2
    4608:	2910983a 	sll	r8,r5,r4
    460c:	308ed83a 	srl	r7,r6,r2
    4610:	3108983a 	sll	r4,r6,r4
    4614:	2884d83a 	srl	r2,r5,r2
    4618:	41ccb03a 	or	r6,r8,r7
    461c:	2008c03a 	cmpne	r4,r4,zero
    4620:	310cb03a 	or	r6,r6,r4
    4624:	898dc83a 	sub	r6,r17,r6
    4628:	89a3803a 	cmpltu	r17,r17,r6
    462c:	1887c83a 	sub	r3,r3,r2
    4630:	1c47c83a 	sub	r3,r3,r17
    4634:	3023883a 	mov	r17,r6
    4638:	1880202c 	andhi	r2,r3,128
    463c:	10002326 	beq	r2,zero,46cc <__subdf3+0x20c>
    4640:	04c02034 	movhi	r19,128
    4644:	9cffffc4 	addi	r19,r19,-1
    4648:	1ce6703a 	and	r19,r3,r19
    464c:	98007a26 	beq	r19,zero,4838 <__subdf3+0x378>
    4650:	9809883a 	mov	r4,r19
    4654:	00051d00 	call	51d0 <__clzsi2>
    4658:	113ffe04 	addi	r4,r2,-8
    465c:	00c007c4 	movi	r3,31
    4660:	19007b16 	blt	r3,r4,4850 <__subdf3+0x390>
    4664:	00800804 	movi	r2,32
    4668:	1105c83a 	sub	r2,r2,r4
    466c:	8884d83a 	srl	r2,r17,r2
    4670:	9906983a 	sll	r3,r19,r4
    4674:	8922983a 	sll	r17,r17,r4
    4678:	10c4b03a 	or	r2,r2,r3
    467c:	24007816 	blt	r4,r16,4860 <__subdf3+0x3a0>
    4680:	2421c83a 	sub	r16,r4,r16
    4684:	80c00044 	addi	r3,r16,1
    4688:	010007c4 	movi	r4,31
    468c:	20c09516 	blt	r4,r3,48e4 <__subdf3+0x424>
    4690:	01400804 	movi	r5,32
    4694:	28cbc83a 	sub	r5,r5,r3
    4698:	88c8d83a 	srl	r4,r17,r3
    469c:	8962983a 	sll	r17,r17,r5
    46a0:	114a983a 	sll	r5,r2,r5
    46a4:	10c6d83a 	srl	r3,r2,r3
    46a8:	8804c03a 	cmpne	r2,r17,zero
    46ac:	290ab03a 	or	r5,r5,r4
    46b0:	28a2b03a 	or	r17,r5,r2
    46b4:	0021883a 	mov	r16,zero
    46b8:	003fa206 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    46bc:	2090b03a 	or	r8,r4,r2
    46c0:	40018e26 	beq	r8,zero,4cfc <__subdf3+0x83c>
    46c4:	1007883a 	mov	r3,r2
    46c8:	2023883a 	mov	r17,r4
    46cc:	888001cc 	andi	r2,r17,7
    46d0:	103f9e1e 	bne	r2,zero,454c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700454c>
    46d4:	1804977a 	slli	r2,r3,29
    46d8:	8822d0fa 	srli	r17,r17,3
    46dc:	1810d0fa 	srli	r8,r3,3
    46e0:	9100004c 	andi	r4,r18,1
    46e4:	1444b03a 	or	r2,r2,r17
    46e8:	00c1ffc4 	movi	r3,2047
    46ec:	80c02826 	beq	r16,r3,4790 <__subdf3+0x2d0>
    46f0:	01400434 	movhi	r5,16
    46f4:	297fffc4 	addi	r5,r5,-1
    46f8:	80e0703a 	and	r16,r16,r3
    46fc:	414a703a 	and	r5,r8,r5
    4700:	003fa806 	br	45a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70045a4>
    4704:	0080630e 	bge	zero,r2,4894 <__subdf3+0x3d4>
    4708:	48003026 	beq	r9,zero,47cc <__subdf3+0x30c>
    470c:	0101ffc4 	movi	r4,2047
    4710:	813f8c26 	beq	r16,r4,4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4714:	29402034 	orhi	r5,r5,128
    4718:	01000e04 	movi	r4,56
    471c:	2080a90e 	bge	r4,r2,49c4 <__subdf3+0x504>
    4720:	298cb03a 	or	r6,r5,r6
    4724:	3012c03a 	cmpne	r9,r6,zero
    4728:	0005883a 	mov	r2,zero
    472c:	4c53883a 	add	r9,r9,r17
    4730:	4c63803a 	cmpltu	r17,r9,r17
    4734:	10c7883a 	add	r3,r2,r3
    4738:	88c7883a 	add	r3,r17,r3
    473c:	4823883a 	mov	r17,r9
    4740:	1880202c 	andhi	r2,r3,128
    4744:	1000d026 	beq	r2,zero,4a88 <__subdf3+0x5c8>
    4748:	84000044 	addi	r16,r16,1
    474c:	0081ffc4 	movi	r2,2047
    4750:	8080fe26 	beq	r16,r2,4b4c <__subdf3+0x68c>
    4754:	00bfe034 	movhi	r2,65408
    4758:	10bfffc4 	addi	r2,r2,-1
    475c:	1886703a 	and	r3,r3,r2
    4760:	880ad07a 	srli	r5,r17,1
    4764:	180497fa 	slli	r2,r3,31
    4768:	8900004c 	andi	r4,r17,1
    476c:	2922b03a 	or	r17,r5,r4
    4770:	1806d07a 	srli	r3,r3,1
    4774:	1462b03a 	or	r17,r2,r17
    4778:	3825883a 	mov	r18,r7
    477c:	003f7106 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4780:	2984b03a 	or	r2,r5,r6
    4784:	103f6826 	beq	r2,zero,4528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004528>
    4788:	39c03fcc 	andi	r7,r7,255
    478c:	003f6706 	br	452c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700452c>
    4790:	4086b03a 	or	r3,r8,r2
    4794:	18015226 	beq	r3,zero,4ce0 <__subdf3+0x820>
    4798:	00c00434 	movhi	r3,16
    479c:	41400234 	orhi	r5,r8,8
    47a0:	18ffffc4 	addi	r3,r3,-1
    47a4:	28ca703a 	and	r5,r5,r3
    47a8:	003f7e06 	br	45a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70045a4>
    47ac:	10bfffc4 	addi	r2,r2,-1
    47b0:	1000491e 	bne	r2,zero,48d8 <__subdf3+0x418>
    47b4:	898fc83a 	sub	r7,r17,r6
    47b8:	89e3803a 	cmpltu	r17,r17,r7
    47bc:	1947c83a 	sub	r3,r3,r5
    47c0:	1c47c83a 	sub	r3,r3,r17
    47c4:	3823883a 	mov	r17,r7
    47c8:	003f9b06 	br	4638 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004638>
    47cc:	2988b03a 	or	r4,r5,r6
    47d0:	203f5c26 	beq	r4,zero,4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    47d4:	10bfffc4 	addi	r2,r2,-1
    47d8:	1000931e 	bne	r2,zero,4a28 <__subdf3+0x568>
    47dc:	898d883a 	add	r6,r17,r6
    47e0:	3463803a 	cmpltu	r17,r6,r17
    47e4:	1947883a 	add	r3,r3,r5
    47e8:	88c7883a 	add	r3,r17,r3
    47ec:	3023883a 	mov	r17,r6
    47f0:	003fd306 	br	4740 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004740>
    47f4:	1000541e 	bne	r2,zero,4948 <__subdf3+0x488>
    47f8:	80800044 	addi	r2,r16,1
    47fc:	1081ffcc 	andi	r2,r2,2047
    4800:	01000044 	movi	r4,1
    4804:	2080a20e 	bge	r4,r2,4a90 <__subdf3+0x5d0>
    4808:	8989c83a 	sub	r4,r17,r6
    480c:	8905803a 	cmpltu	r2,r17,r4
    4810:	1967c83a 	sub	r19,r3,r5
    4814:	98a7c83a 	sub	r19,r19,r2
    4818:	9880202c 	andhi	r2,r19,128
    481c:	10006326 	beq	r2,zero,49ac <__subdf3+0x4ec>
    4820:	3463c83a 	sub	r17,r6,r17
    4824:	28c7c83a 	sub	r3,r5,r3
    4828:	344d803a 	cmpltu	r6,r6,r17
    482c:	19a7c83a 	sub	r19,r3,r6
    4830:	3825883a 	mov	r18,r7
    4834:	983f861e 	bne	r19,zero,4650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004650>
    4838:	8809883a 	mov	r4,r17
    483c:	00051d00 	call	51d0 <__clzsi2>
    4840:	10800804 	addi	r2,r2,32
    4844:	113ffe04 	addi	r4,r2,-8
    4848:	00c007c4 	movi	r3,31
    484c:	193f850e 	bge	r3,r4,4664 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004664>
    4850:	10bff604 	addi	r2,r2,-40
    4854:	8884983a 	sll	r2,r17,r2
    4858:	0023883a 	mov	r17,zero
    485c:	243f880e 	bge	r4,r16,4680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004680>
    4860:	00ffe034 	movhi	r3,65408
    4864:	18ffffc4 	addi	r3,r3,-1
    4868:	8121c83a 	sub	r16,r16,r4
    486c:	10c6703a 	and	r3,r2,r3
    4870:	003f3406 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4874:	9100004c 	andi	r4,r18,1
    4878:	000b883a 	mov	r5,zero
    487c:	0005883a 	mov	r2,zero
    4880:	003f4806 	br	45a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70045a4>
    4884:	298cb03a 	or	r6,r5,r6
    4888:	300cc03a 	cmpne	r6,r6,zero
    488c:	0005883a 	mov	r2,zero
    4890:	003f6406 	br	4624 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004624>
    4894:	10009a1e 	bne	r2,zero,4b00 <__subdf3+0x640>
    4898:	82400044 	addi	r9,r16,1
    489c:	4881ffcc 	andi	r2,r9,2047
    48a0:	02800044 	movi	r10,1
    48a4:	5080670e 	bge	r10,r2,4a44 <__subdf3+0x584>
    48a8:	0081ffc4 	movi	r2,2047
    48ac:	4880af26 	beq	r9,r2,4b6c <__subdf3+0x6ac>
    48b0:	898d883a 	add	r6,r17,r6
    48b4:	1945883a 	add	r2,r3,r5
    48b8:	3447803a 	cmpltu	r3,r6,r17
    48bc:	1887883a 	add	r3,r3,r2
    48c0:	182297fa 	slli	r17,r3,31
    48c4:	300cd07a 	srli	r6,r6,1
    48c8:	1806d07a 	srli	r3,r3,1
    48cc:	4821883a 	mov	r16,r9
    48d0:	89a2b03a 	or	r17,r17,r6
    48d4:	003f1b06 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    48d8:	0101ffc4 	movi	r4,2047
    48dc:	813f441e 	bne	r16,r4,45f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70045f0>
    48e0:	003f1806 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    48e4:	843ff844 	addi	r16,r16,-31
    48e8:	01400804 	movi	r5,32
    48ec:	1408d83a 	srl	r4,r2,r16
    48f0:	19405026 	beq	r3,r5,4a34 <__subdf3+0x574>
    48f4:	01401004 	movi	r5,64
    48f8:	28c7c83a 	sub	r3,r5,r3
    48fc:	10c4983a 	sll	r2,r2,r3
    4900:	88a2b03a 	or	r17,r17,r2
    4904:	8822c03a 	cmpne	r17,r17,zero
    4908:	2462b03a 	or	r17,r4,r17
    490c:	0007883a 	mov	r3,zero
    4910:	0021883a 	mov	r16,zero
    4914:	003f6d06 	br	46cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046cc>
    4918:	11fff804 	addi	r7,r2,-32
    491c:	01000804 	movi	r4,32
    4920:	29ced83a 	srl	r7,r5,r7
    4924:	11004526 	beq	r2,r4,4a3c <__subdf3+0x57c>
    4928:	01001004 	movi	r4,64
    492c:	2089c83a 	sub	r4,r4,r2
    4930:	2904983a 	sll	r2,r5,r4
    4934:	118cb03a 	or	r6,r2,r6
    4938:	300cc03a 	cmpne	r6,r6,zero
    493c:	398cb03a 	or	r6,r7,r6
    4940:	0005883a 	mov	r2,zero
    4944:	003f3706 	br	4624 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004624>
    4948:	80002a26 	beq	r16,zero,49f4 <__subdf3+0x534>
    494c:	0101ffc4 	movi	r4,2047
    4950:	49006626 	beq	r9,r4,4aec <__subdf3+0x62c>
    4954:	0085c83a 	sub	r2,zero,r2
    4958:	18c02034 	orhi	r3,r3,128
    495c:	01000e04 	movi	r4,56
    4960:	20807e16 	blt	r4,r2,4b5c <__subdf3+0x69c>
    4964:	010007c4 	movi	r4,31
    4968:	2080e716 	blt	r4,r2,4d08 <__subdf3+0x848>
    496c:	01000804 	movi	r4,32
    4970:	2089c83a 	sub	r4,r4,r2
    4974:	1914983a 	sll	r10,r3,r4
    4978:	8890d83a 	srl	r8,r17,r2
    497c:	8908983a 	sll	r4,r17,r4
    4980:	1884d83a 	srl	r2,r3,r2
    4984:	5222b03a 	or	r17,r10,r8
    4988:	2006c03a 	cmpne	r3,r4,zero
    498c:	88e2b03a 	or	r17,r17,r3
    4990:	3463c83a 	sub	r17,r6,r17
    4994:	2885c83a 	sub	r2,r5,r2
    4998:	344d803a 	cmpltu	r6,r6,r17
    499c:	1187c83a 	sub	r3,r2,r6
    49a0:	4821883a 	mov	r16,r9
    49a4:	3825883a 	mov	r18,r7
    49a8:	003f2306 	br	4638 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004638>
    49ac:	24d0b03a 	or	r8,r4,r19
    49b0:	40001b1e 	bne	r8,zero,4a20 <__subdf3+0x560>
    49b4:	0005883a 	mov	r2,zero
    49b8:	0009883a 	mov	r4,zero
    49bc:	0021883a 	mov	r16,zero
    49c0:	003f4906 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    49c4:	010007c4 	movi	r4,31
    49c8:	20803a16 	blt	r4,r2,4ab4 <__subdf3+0x5f4>
    49cc:	01000804 	movi	r4,32
    49d0:	2089c83a 	sub	r4,r4,r2
    49d4:	2912983a 	sll	r9,r5,r4
    49d8:	3090d83a 	srl	r8,r6,r2
    49dc:	3108983a 	sll	r4,r6,r4
    49e0:	2884d83a 	srl	r2,r5,r2
    49e4:	4a12b03a 	or	r9,r9,r8
    49e8:	2008c03a 	cmpne	r4,r4,zero
    49ec:	4912b03a 	or	r9,r9,r4
    49f0:	003f4e06 	br	472c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700472c>
    49f4:	1c48b03a 	or	r4,r3,r17
    49f8:	20003c26 	beq	r4,zero,4aec <__subdf3+0x62c>
    49fc:	0084303a 	nor	r2,zero,r2
    4a00:	1000381e 	bne	r2,zero,4ae4 <__subdf3+0x624>
    4a04:	3463c83a 	sub	r17,r6,r17
    4a08:	28c5c83a 	sub	r2,r5,r3
    4a0c:	344d803a 	cmpltu	r6,r6,r17
    4a10:	1187c83a 	sub	r3,r2,r6
    4a14:	4821883a 	mov	r16,r9
    4a18:	3825883a 	mov	r18,r7
    4a1c:	003f0606 	br	4638 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004638>
    4a20:	2023883a 	mov	r17,r4
    4a24:	003f0906 	br	464c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700464c>
    4a28:	0101ffc4 	movi	r4,2047
    4a2c:	813f3a1e 	bne	r16,r4,4718 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004718>
    4a30:	003ec406 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4a34:	0005883a 	mov	r2,zero
    4a38:	003fb106 	br	4900 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004900>
    4a3c:	0005883a 	mov	r2,zero
    4a40:	003fbc06 	br	4934 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004934>
    4a44:	1c44b03a 	or	r2,r3,r17
    4a48:	80008e1e 	bne	r16,zero,4c84 <__subdf3+0x7c4>
    4a4c:	1000c826 	beq	r2,zero,4d70 <__subdf3+0x8b0>
    4a50:	2984b03a 	or	r2,r5,r6
    4a54:	103ebb26 	beq	r2,zero,4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4a58:	8989883a 	add	r4,r17,r6
    4a5c:	1945883a 	add	r2,r3,r5
    4a60:	2447803a 	cmpltu	r3,r4,r17
    4a64:	1887883a 	add	r3,r3,r2
    4a68:	1880202c 	andhi	r2,r3,128
    4a6c:	2023883a 	mov	r17,r4
    4a70:	103f1626 	beq	r2,zero,46cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046cc>
    4a74:	00bfe034 	movhi	r2,65408
    4a78:	10bfffc4 	addi	r2,r2,-1
    4a7c:	5021883a 	mov	r16,r10
    4a80:	1886703a 	and	r3,r3,r2
    4a84:	003eaf06 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4a88:	3825883a 	mov	r18,r7
    4a8c:	003f0f06 	br	46cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046cc>
    4a90:	1c44b03a 	or	r2,r3,r17
    4a94:	8000251e 	bne	r16,zero,4b2c <__subdf3+0x66c>
    4a98:	1000661e 	bne	r2,zero,4c34 <__subdf3+0x774>
    4a9c:	2990b03a 	or	r8,r5,r6
    4aa0:	40009626 	beq	r8,zero,4cfc <__subdf3+0x83c>
    4aa4:	2807883a 	mov	r3,r5
    4aa8:	3023883a 	mov	r17,r6
    4aac:	3825883a 	mov	r18,r7
    4ab0:	003ea406 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4ab4:	127ff804 	addi	r9,r2,-32
    4ab8:	01000804 	movi	r4,32
    4abc:	2a52d83a 	srl	r9,r5,r9
    4ac0:	11008c26 	beq	r2,r4,4cf4 <__subdf3+0x834>
    4ac4:	01001004 	movi	r4,64
    4ac8:	2085c83a 	sub	r2,r4,r2
    4acc:	2884983a 	sll	r2,r5,r2
    4ad0:	118cb03a 	or	r6,r2,r6
    4ad4:	300cc03a 	cmpne	r6,r6,zero
    4ad8:	4992b03a 	or	r9,r9,r6
    4adc:	0005883a 	mov	r2,zero
    4ae0:	003f1206 	br	472c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700472c>
    4ae4:	0101ffc4 	movi	r4,2047
    4ae8:	493f9c1e 	bne	r9,r4,495c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700495c>
    4aec:	2807883a 	mov	r3,r5
    4af0:	3023883a 	mov	r17,r6
    4af4:	4821883a 	mov	r16,r9
    4af8:	3825883a 	mov	r18,r7
    4afc:	003e9106 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4b00:	80001f1e 	bne	r16,zero,4b80 <__subdf3+0x6c0>
    4b04:	1c48b03a 	or	r4,r3,r17
    4b08:	20005a26 	beq	r4,zero,4c74 <__subdf3+0x7b4>
    4b0c:	0084303a 	nor	r2,zero,r2
    4b10:	1000561e 	bne	r2,zero,4c6c <__subdf3+0x7ac>
    4b14:	89a3883a 	add	r17,r17,r6
    4b18:	1945883a 	add	r2,r3,r5
    4b1c:	898d803a 	cmpltu	r6,r17,r6
    4b20:	3087883a 	add	r3,r6,r2
    4b24:	4821883a 	mov	r16,r9
    4b28:	003f0506 	br	4740 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004740>
    4b2c:	10002b1e 	bne	r2,zero,4bdc <__subdf3+0x71c>
    4b30:	2984b03a 	or	r2,r5,r6
    4b34:	10008026 	beq	r2,zero,4d38 <__subdf3+0x878>
    4b38:	2807883a 	mov	r3,r5
    4b3c:	3023883a 	mov	r17,r6
    4b40:	3825883a 	mov	r18,r7
    4b44:	0401ffc4 	movi	r16,2047
    4b48:	003e7e06 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4b4c:	3809883a 	mov	r4,r7
    4b50:	0011883a 	mov	r8,zero
    4b54:	0005883a 	mov	r2,zero
    4b58:	003ee306 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4b5c:	1c62b03a 	or	r17,r3,r17
    4b60:	8822c03a 	cmpne	r17,r17,zero
    4b64:	0005883a 	mov	r2,zero
    4b68:	003f8906 	br	4990 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004990>
    4b6c:	3809883a 	mov	r4,r7
    4b70:	4821883a 	mov	r16,r9
    4b74:	0011883a 	mov	r8,zero
    4b78:	0005883a 	mov	r2,zero
    4b7c:	003eda06 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4b80:	0101ffc4 	movi	r4,2047
    4b84:	49003b26 	beq	r9,r4,4c74 <__subdf3+0x7b4>
    4b88:	0085c83a 	sub	r2,zero,r2
    4b8c:	18c02034 	orhi	r3,r3,128
    4b90:	01000e04 	movi	r4,56
    4b94:	20806e16 	blt	r4,r2,4d50 <__subdf3+0x890>
    4b98:	010007c4 	movi	r4,31
    4b9c:	20807716 	blt	r4,r2,4d7c <__subdf3+0x8bc>
    4ba0:	01000804 	movi	r4,32
    4ba4:	2089c83a 	sub	r4,r4,r2
    4ba8:	1914983a 	sll	r10,r3,r4
    4bac:	8890d83a 	srl	r8,r17,r2
    4bb0:	8908983a 	sll	r4,r17,r4
    4bb4:	1884d83a 	srl	r2,r3,r2
    4bb8:	5222b03a 	or	r17,r10,r8
    4bbc:	2006c03a 	cmpne	r3,r4,zero
    4bc0:	88e2b03a 	or	r17,r17,r3
    4bc4:	89a3883a 	add	r17,r17,r6
    4bc8:	1145883a 	add	r2,r2,r5
    4bcc:	898d803a 	cmpltu	r6,r17,r6
    4bd0:	3087883a 	add	r3,r6,r2
    4bd4:	4821883a 	mov	r16,r9
    4bd8:	003ed906 	br	4740 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004740>
    4bdc:	2984b03a 	or	r2,r5,r6
    4be0:	10004226 	beq	r2,zero,4cec <__subdf3+0x82c>
    4be4:	1808d0fa 	srli	r4,r3,3
    4be8:	8822d0fa 	srli	r17,r17,3
    4bec:	1806977a 	slli	r3,r3,29
    4bf0:	2080022c 	andhi	r2,r4,8
    4bf4:	1c62b03a 	or	r17,r3,r17
    4bf8:	10000826 	beq	r2,zero,4c1c <__subdf3+0x75c>
    4bfc:	2812d0fa 	srli	r9,r5,3
    4c00:	4880022c 	andhi	r2,r9,8
    4c04:	1000051e 	bne	r2,zero,4c1c <__subdf3+0x75c>
    4c08:	300cd0fa 	srli	r6,r6,3
    4c0c:	2804977a 	slli	r2,r5,29
    4c10:	4809883a 	mov	r4,r9
    4c14:	3825883a 	mov	r18,r7
    4c18:	11a2b03a 	or	r17,r2,r6
    4c1c:	8806d77a 	srli	r3,r17,29
    4c20:	200890fa 	slli	r4,r4,3
    4c24:	882290fa 	slli	r17,r17,3
    4c28:	0401ffc4 	movi	r16,2047
    4c2c:	1906b03a 	or	r3,r3,r4
    4c30:	003e4406 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4c34:	2984b03a 	or	r2,r5,r6
    4c38:	103e4226 	beq	r2,zero,4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4c3c:	8989c83a 	sub	r4,r17,r6
    4c40:	8911803a 	cmpltu	r8,r17,r4
    4c44:	1945c83a 	sub	r2,r3,r5
    4c48:	1205c83a 	sub	r2,r2,r8
    4c4c:	1200202c 	andhi	r8,r2,128
    4c50:	403e9a26 	beq	r8,zero,46bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046bc>
    4c54:	3463c83a 	sub	r17,r6,r17
    4c58:	28c5c83a 	sub	r2,r5,r3
    4c5c:	344d803a 	cmpltu	r6,r6,r17
    4c60:	1187c83a 	sub	r3,r2,r6
    4c64:	3825883a 	mov	r18,r7
    4c68:	003e3606 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4c6c:	0101ffc4 	movi	r4,2047
    4c70:	493fc71e 	bne	r9,r4,4b90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b90>
    4c74:	2807883a 	mov	r3,r5
    4c78:	3023883a 	mov	r17,r6
    4c7c:	4821883a 	mov	r16,r9
    4c80:	003e3006 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4c84:	10003626 	beq	r2,zero,4d60 <__subdf3+0x8a0>
    4c88:	2984b03a 	or	r2,r5,r6
    4c8c:	10001726 	beq	r2,zero,4cec <__subdf3+0x82c>
    4c90:	1808d0fa 	srli	r4,r3,3
    4c94:	8822d0fa 	srli	r17,r17,3
    4c98:	1806977a 	slli	r3,r3,29
    4c9c:	2080022c 	andhi	r2,r4,8
    4ca0:	1c62b03a 	or	r17,r3,r17
    4ca4:	10000726 	beq	r2,zero,4cc4 <__subdf3+0x804>
    4ca8:	2812d0fa 	srli	r9,r5,3
    4cac:	4880022c 	andhi	r2,r9,8
    4cb0:	1000041e 	bne	r2,zero,4cc4 <__subdf3+0x804>
    4cb4:	300cd0fa 	srli	r6,r6,3
    4cb8:	2804977a 	slli	r2,r5,29
    4cbc:	4809883a 	mov	r4,r9
    4cc0:	11a2b03a 	or	r17,r2,r6
    4cc4:	8806d77a 	srli	r3,r17,29
    4cc8:	200890fa 	slli	r4,r4,3
    4ccc:	882290fa 	slli	r17,r17,3
    4cd0:	3825883a 	mov	r18,r7
    4cd4:	1906b03a 	or	r3,r3,r4
    4cd8:	0401ffc4 	movi	r16,2047
    4cdc:	003e1906 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4ce0:	000b883a 	mov	r5,zero
    4ce4:	0005883a 	mov	r2,zero
    4ce8:	003e2e06 	br	45a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70045a4>
    4cec:	0401ffc4 	movi	r16,2047
    4cf0:	003e1406 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4cf4:	0005883a 	mov	r2,zero
    4cf8:	003f7506 	br	4ad0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ad0>
    4cfc:	0005883a 	mov	r2,zero
    4d00:	0009883a 	mov	r4,zero
    4d04:	003e7806 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4d08:	123ff804 	addi	r8,r2,-32
    4d0c:	01000804 	movi	r4,32
    4d10:	1a10d83a 	srl	r8,r3,r8
    4d14:	11002526 	beq	r2,r4,4dac <__subdf3+0x8ec>
    4d18:	01001004 	movi	r4,64
    4d1c:	2085c83a 	sub	r2,r4,r2
    4d20:	1884983a 	sll	r2,r3,r2
    4d24:	1444b03a 	or	r2,r2,r17
    4d28:	1004c03a 	cmpne	r2,r2,zero
    4d2c:	40a2b03a 	or	r17,r8,r2
    4d30:	0005883a 	mov	r2,zero
    4d34:	003f1606 	br	4990 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004990>
    4d38:	02000434 	movhi	r8,16
    4d3c:	0009883a 	mov	r4,zero
    4d40:	423fffc4 	addi	r8,r8,-1
    4d44:	00bfffc4 	movi	r2,-1
    4d48:	0401ffc4 	movi	r16,2047
    4d4c:	003e6606 	br	46e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e8>
    4d50:	1c62b03a 	or	r17,r3,r17
    4d54:	8822c03a 	cmpne	r17,r17,zero
    4d58:	0005883a 	mov	r2,zero
    4d5c:	003f9906 	br	4bc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004bc4>
    4d60:	2807883a 	mov	r3,r5
    4d64:	3023883a 	mov	r17,r6
    4d68:	0401ffc4 	movi	r16,2047
    4d6c:	003df506 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4d70:	2807883a 	mov	r3,r5
    4d74:	3023883a 	mov	r17,r6
    4d78:	003df206 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    4d7c:	123ff804 	addi	r8,r2,-32
    4d80:	01000804 	movi	r4,32
    4d84:	1a10d83a 	srl	r8,r3,r8
    4d88:	11000a26 	beq	r2,r4,4db4 <__subdf3+0x8f4>
    4d8c:	01001004 	movi	r4,64
    4d90:	2085c83a 	sub	r2,r4,r2
    4d94:	1884983a 	sll	r2,r3,r2
    4d98:	1444b03a 	or	r2,r2,r17
    4d9c:	1004c03a 	cmpne	r2,r2,zero
    4da0:	40a2b03a 	or	r17,r8,r2
    4da4:	0005883a 	mov	r2,zero
    4da8:	003f8606 	br	4bc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004bc4>
    4dac:	0005883a 	mov	r2,zero
    4db0:	003fdc06 	br	4d24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004d24>
    4db4:	0005883a 	mov	r2,zero
    4db8:	003ff706 	br	4d98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004d98>

00004dbc <__fixdfsi>:
    4dbc:	280cd53a 	srli	r6,r5,20
    4dc0:	00c00434 	movhi	r3,16
    4dc4:	18ffffc4 	addi	r3,r3,-1
    4dc8:	3181ffcc 	andi	r6,r6,2047
    4dcc:	01c0ff84 	movi	r7,1022
    4dd0:	28c6703a 	and	r3,r5,r3
    4dd4:	280ad7fa 	srli	r5,r5,31
    4dd8:	3980120e 	bge	r7,r6,4e24 <__fixdfsi+0x68>
    4ddc:	00810744 	movi	r2,1053
    4de0:	11800c16 	blt	r2,r6,4e14 <__fixdfsi+0x58>
    4de4:	00810cc4 	movi	r2,1075
    4de8:	1185c83a 	sub	r2,r2,r6
    4dec:	01c007c4 	movi	r7,31
    4df0:	18c00434 	orhi	r3,r3,16
    4df4:	38800d16 	blt	r7,r2,4e2c <__fixdfsi+0x70>
    4df8:	31befb44 	addi	r6,r6,-1043
    4dfc:	2084d83a 	srl	r2,r4,r2
    4e00:	1986983a 	sll	r3,r3,r6
    4e04:	1884b03a 	or	r2,r3,r2
    4e08:	28000726 	beq	r5,zero,4e28 <__fixdfsi+0x6c>
    4e0c:	0085c83a 	sub	r2,zero,r2
    4e10:	f800283a 	ret
    4e14:	00a00034 	movhi	r2,32768
    4e18:	10bfffc4 	addi	r2,r2,-1
    4e1c:	2885883a 	add	r2,r5,r2
    4e20:	f800283a 	ret
    4e24:	0005883a 	mov	r2,zero
    4e28:	f800283a 	ret
    4e2c:	008104c4 	movi	r2,1043
    4e30:	1185c83a 	sub	r2,r2,r6
    4e34:	1884d83a 	srl	r2,r3,r2
    4e38:	003ff306 	br	4e08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004e08>

00004e3c <__floatsidf>:
    4e3c:	defffd04 	addi	sp,sp,-12
    4e40:	dfc00215 	stw	ra,8(sp)
    4e44:	dc400115 	stw	r17,4(sp)
    4e48:	dc000015 	stw	r16,0(sp)
    4e4c:	20002b26 	beq	r4,zero,4efc <__floatsidf+0xc0>
    4e50:	2023883a 	mov	r17,r4
    4e54:	2020d7fa 	srli	r16,r4,31
    4e58:	20002d16 	blt	r4,zero,4f10 <__floatsidf+0xd4>
    4e5c:	8809883a 	mov	r4,r17
    4e60:	00051d00 	call	51d0 <__clzsi2>
    4e64:	01410784 	movi	r5,1054
    4e68:	288bc83a 	sub	r5,r5,r2
    4e6c:	01010cc4 	movi	r4,1075
    4e70:	2149c83a 	sub	r4,r4,r5
    4e74:	00c007c4 	movi	r3,31
    4e78:	1900160e 	bge	r3,r4,4ed4 <__floatsidf+0x98>
    4e7c:	00c104c4 	movi	r3,1043
    4e80:	1947c83a 	sub	r3,r3,r5
    4e84:	88c6983a 	sll	r3,r17,r3
    4e88:	00800434 	movhi	r2,16
    4e8c:	10bfffc4 	addi	r2,r2,-1
    4e90:	1886703a 	and	r3,r3,r2
    4e94:	2941ffcc 	andi	r5,r5,2047
    4e98:	800d883a 	mov	r6,r16
    4e9c:	0005883a 	mov	r2,zero
    4ea0:	280a953a 	slli	r5,r5,20
    4ea4:	31803fcc 	andi	r6,r6,255
    4ea8:	01000434 	movhi	r4,16
    4eac:	300c97fa 	slli	r6,r6,31
    4eb0:	213fffc4 	addi	r4,r4,-1
    4eb4:	1906703a 	and	r3,r3,r4
    4eb8:	1946b03a 	or	r3,r3,r5
    4ebc:	1986b03a 	or	r3,r3,r6
    4ec0:	dfc00217 	ldw	ra,8(sp)
    4ec4:	dc400117 	ldw	r17,4(sp)
    4ec8:	dc000017 	ldw	r16,0(sp)
    4ecc:	dec00304 	addi	sp,sp,12
    4ed0:	f800283a 	ret
    4ed4:	00c002c4 	movi	r3,11
    4ed8:	1887c83a 	sub	r3,r3,r2
    4edc:	88c6d83a 	srl	r3,r17,r3
    4ee0:	8904983a 	sll	r2,r17,r4
    4ee4:	01000434 	movhi	r4,16
    4ee8:	213fffc4 	addi	r4,r4,-1
    4eec:	2941ffcc 	andi	r5,r5,2047
    4ef0:	1906703a 	and	r3,r3,r4
    4ef4:	800d883a 	mov	r6,r16
    4ef8:	003fe906 	br	4ea0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ea0>
    4efc:	000d883a 	mov	r6,zero
    4f00:	000b883a 	mov	r5,zero
    4f04:	0007883a 	mov	r3,zero
    4f08:	0005883a 	mov	r2,zero
    4f0c:	003fe406 	br	4ea0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ea0>
    4f10:	0123c83a 	sub	r17,zero,r4
    4f14:	003fd106 	br	4e5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004e5c>

00004f18 <__extendsfdf2>:
    4f18:	200ad5fa 	srli	r5,r4,23
    4f1c:	defffd04 	addi	sp,sp,-12
    4f20:	dc400115 	stw	r17,4(sp)
    4f24:	29403fcc 	andi	r5,r5,255
    4f28:	29800044 	addi	r6,r5,1
    4f2c:	04402034 	movhi	r17,128
    4f30:	dc000015 	stw	r16,0(sp)
    4f34:	8c7fffc4 	addi	r17,r17,-1
    4f38:	dfc00215 	stw	ra,8(sp)
    4f3c:	31803fcc 	andi	r6,r6,255
    4f40:	00800044 	movi	r2,1
    4f44:	8922703a 	and	r17,r17,r4
    4f48:	2020d7fa 	srli	r16,r4,31
    4f4c:	1180110e 	bge	r2,r6,4f94 <__extendsfdf2+0x7c>
    4f50:	880cd0fa 	srli	r6,r17,3
    4f54:	8822977a 	slli	r17,r17,29
    4f58:	2940e004 	addi	r5,r5,896
    4f5c:	2941ffcc 	andi	r5,r5,2047
    4f60:	2804953a 	slli	r2,r5,20
    4f64:	01400434 	movhi	r5,16
    4f68:	800697fa 	slli	r3,r16,31
    4f6c:	297fffc4 	addi	r5,r5,-1
    4f70:	314a703a 	and	r5,r6,r5
    4f74:	288ab03a 	or	r5,r5,r2
    4f78:	28c6b03a 	or	r3,r5,r3
    4f7c:	8805883a 	mov	r2,r17
    4f80:	dfc00217 	ldw	ra,8(sp)
    4f84:	dc400117 	ldw	r17,4(sp)
    4f88:	dc000017 	ldw	r16,0(sp)
    4f8c:	dec00304 	addi	sp,sp,12
    4f90:	f800283a 	ret
    4f94:	2800111e 	bne	r5,zero,4fdc <__extendsfdf2+0xc4>
    4f98:	88001c26 	beq	r17,zero,500c <__extendsfdf2+0xf4>
    4f9c:	8809883a 	mov	r4,r17
    4fa0:	00051d00 	call	51d0 <__clzsi2>
    4fa4:	00c00284 	movi	r3,10
    4fa8:	18801b16 	blt	r3,r2,5018 <__extendsfdf2+0x100>
    4fac:	018002c4 	movi	r6,11
    4fb0:	308dc83a 	sub	r6,r6,r2
    4fb4:	11000544 	addi	r4,r2,21
    4fb8:	8986d83a 	srl	r3,r17,r6
    4fbc:	8922983a 	sll	r17,r17,r4
    4fc0:	0180e244 	movi	r6,905
    4fc4:	01400434 	movhi	r5,16
    4fc8:	3085c83a 	sub	r2,r6,r2
    4fcc:	297fffc4 	addi	r5,r5,-1
    4fd0:	194c703a 	and	r6,r3,r5
    4fd4:	1141ffcc 	andi	r5,r2,2047
    4fd8:	003fe006 	br	4f5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f5c>
    4fdc:	88000826 	beq	r17,zero,5000 <__extendsfdf2+0xe8>
    4fe0:	880cd0fa 	srli	r6,r17,3
    4fe4:	00800434 	movhi	r2,16
    4fe8:	10bfffc4 	addi	r2,r2,-1
    4fec:	31800234 	orhi	r6,r6,8
    4ff0:	8822977a 	slli	r17,r17,29
    4ff4:	308c703a 	and	r6,r6,r2
    4ff8:	0141ffc4 	movi	r5,2047
    4ffc:	003fd706 	br	4f5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f5c>
    5000:	0141ffc4 	movi	r5,2047
    5004:	000d883a 	mov	r6,zero
    5008:	003fd406 	br	4f5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f5c>
    500c:	000b883a 	mov	r5,zero
    5010:	000d883a 	mov	r6,zero
    5014:	003fd106 	br	4f5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f5c>
    5018:	11bffd44 	addi	r6,r2,-11
    501c:	8986983a 	sll	r3,r17,r6
    5020:	0023883a 	mov	r17,zero
    5024:	003fe606 	br	4fc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004fc0>

00005028 <__truncdfsf2>:
    5028:	2810d53a 	srli	r8,r5,20
    502c:	01c00434 	movhi	r7,16
    5030:	39ffffc4 	addi	r7,r7,-1
    5034:	29ce703a 	and	r7,r5,r7
    5038:	4201ffcc 	andi	r8,r8,2047
    503c:	380e90fa 	slli	r7,r7,3
    5040:	200cd77a 	srli	r6,r4,29
    5044:	42400044 	addi	r9,r8,1
    5048:	4a41ffcc 	andi	r9,r9,2047
    504c:	00c00044 	movi	r3,1
    5050:	280ad7fa 	srli	r5,r5,31
    5054:	31ceb03a 	or	r7,r6,r7
    5058:	200490fa 	slli	r2,r4,3
    505c:	1a40230e 	bge	r3,r9,50ec <__truncdfsf2+0xc4>
    5060:	40ff2004 	addi	r3,r8,-896
    5064:	01803f84 	movi	r6,254
    5068:	30c01516 	blt	r6,r3,50c0 <__truncdfsf2+0x98>
    506c:	00c0380e 	bge	zero,r3,5150 <__truncdfsf2+0x128>
    5070:	200c91ba 	slli	r6,r4,6
    5074:	380e90fa 	slli	r7,r7,3
    5078:	1004d77a 	srli	r2,r2,29
    507c:	300cc03a 	cmpne	r6,r6,zero
    5080:	31ccb03a 	or	r6,r6,r7
    5084:	308cb03a 	or	r6,r6,r2
    5088:	308001cc 	andi	r2,r6,7
    508c:	10000426 	beq	r2,zero,50a0 <__truncdfsf2+0x78>
    5090:	308003cc 	andi	r2,r6,15
    5094:	01000104 	movi	r4,4
    5098:	11000126 	beq	r2,r4,50a0 <__truncdfsf2+0x78>
    509c:	31800104 	addi	r6,r6,4
    50a0:	3081002c 	andhi	r2,r6,1024
    50a4:	10001626 	beq	r2,zero,5100 <__truncdfsf2+0xd8>
    50a8:	18c00044 	addi	r3,r3,1
    50ac:	00803fc4 	movi	r2,255
    50b0:	18800326 	beq	r3,r2,50c0 <__truncdfsf2+0x98>
    50b4:	300c91ba 	slli	r6,r6,6
    50b8:	300cd27a 	srli	r6,r6,9
    50bc:	00000206 	br	50c8 <__truncdfsf2+0xa0>
    50c0:	00ffffc4 	movi	r3,-1
    50c4:	000d883a 	mov	r6,zero
    50c8:	18c03fcc 	andi	r3,r3,255
    50cc:	180895fa 	slli	r4,r3,23
    50d0:	00c02034 	movhi	r3,128
    50d4:	280a97fa 	slli	r5,r5,31
    50d8:	18ffffc4 	addi	r3,r3,-1
    50dc:	30c6703a 	and	r3,r6,r3
    50e0:	1906b03a 	or	r3,r3,r4
    50e4:	1944b03a 	or	r2,r3,r5
    50e8:	f800283a 	ret
    50ec:	40000b1e 	bne	r8,zero,511c <__truncdfsf2+0xf4>
    50f0:	388cb03a 	or	r6,r7,r2
    50f4:	0007883a 	mov	r3,zero
    50f8:	30000426 	beq	r6,zero,510c <__truncdfsf2+0xe4>
    50fc:	01800144 	movi	r6,5
    5100:	00803fc4 	movi	r2,255
    5104:	300cd0fa 	srli	r6,r6,3
    5108:	18800a26 	beq	r3,r2,5134 <__truncdfsf2+0x10c>
    510c:	00802034 	movhi	r2,128
    5110:	10bfffc4 	addi	r2,r2,-1
    5114:	308c703a 	and	r6,r6,r2
    5118:	003feb06 	br	50c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70050c8>
    511c:	3888b03a 	or	r4,r7,r2
    5120:	203fe726 	beq	r4,zero,50c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70050c0>
    5124:	380c90fa 	slli	r6,r7,3
    5128:	00c03fc4 	movi	r3,255
    512c:	31808034 	orhi	r6,r6,512
    5130:	003fd506 	br	5088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005088>
    5134:	303fe226 	beq	r6,zero,50c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70050c0>
    5138:	00802034 	movhi	r2,128
    513c:	31801034 	orhi	r6,r6,64
    5140:	10bfffc4 	addi	r2,r2,-1
    5144:	00ffffc4 	movi	r3,-1
    5148:	308c703a 	and	r6,r6,r2
    514c:	003fde06 	br	50c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70050c8>
    5150:	013ffa44 	movi	r4,-23
    5154:	19000e16 	blt	r3,r4,5190 <__truncdfsf2+0x168>
    5158:	01000784 	movi	r4,30
    515c:	20c9c83a 	sub	r4,r4,r3
    5160:	018007c4 	movi	r6,31
    5164:	39c02034 	orhi	r7,r7,128
    5168:	31000b16 	blt	r6,r4,5198 <__truncdfsf2+0x170>
    516c:	423f2084 	addi	r8,r8,-894
    5170:	120c983a 	sll	r6,r2,r8
    5174:	3a0e983a 	sll	r7,r7,r8
    5178:	1104d83a 	srl	r2,r2,r4
    517c:	300cc03a 	cmpne	r6,r6,zero
    5180:	31ceb03a 	or	r7,r6,r7
    5184:	388cb03a 	or	r6,r7,r2
    5188:	0007883a 	mov	r3,zero
    518c:	003fbe06 	br	5088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005088>
    5190:	0007883a 	mov	r3,zero
    5194:	003fd906 	br	50fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70050fc>
    5198:	01bfff84 	movi	r6,-2
    519c:	30cdc83a 	sub	r6,r6,r3
    51a0:	00c00804 	movi	r3,32
    51a4:	398cd83a 	srl	r6,r7,r6
    51a8:	20c00726 	beq	r4,r3,51c8 <__truncdfsf2+0x1a0>
    51ac:	423f2884 	addi	r8,r8,-862
    51b0:	3a0e983a 	sll	r7,r7,r8
    51b4:	3884b03a 	or	r2,r7,r2
    51b8:	1004c03a 	cmpne	r2,r2,zero
    51bc:	118cb03a 	or	r6,r2,r6
    51c0:	0007883a 	mov	r3,zero
    51c4:	003fb006 	br	5088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005088>
    51c8:	000f883a 	mov	r7,zero
    51cc:	003ff906 	br	51b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70051b4>

000051d0 <__clzsi2>:
    51d0:	00bfffd4 	movui	r2,65535
    51d4:	11000536 	bltu	r2,r4,51ec <__clzsi2+0x1c>
    51d8:	00803fc4 	movi	r2,255
    51dc:	11000f36 	bltu	r2,r4,521c <__clzsi2+0x4c>
    51e0:	00800804 	movi	r2,32
    51e4:	0007883a 	mov	r3,zero
    51e8:	00000506 	br	5200 <__clzsi2+0x30>
    51ec:	00804034 	movhi	r2,256
    51f0:	10bfffc4 	addi	r2,r2,-1
    51f4:	11000c2e 	bgeu	r2,r4,5228 <__clzsi2+0x58>
    51f8:	00800204 	movi	r2,8
    51fc:	00c00604 	movi	r3,24
    5200:	20c8d83a 	srl	r4,r4,r3
    5204:	00c000b4 	movhi	r3,2
    5208:	18edf904 	addi	r3,r3,-18460
    520c:	1909883a 	add	r4,r3,r4
    5210:	20c00003 	ldbu	r3,0(r4)
    5214:	10c5c83a 	sub	r2,r2,r3
    5218:	f800283a 	ret
    521c:	00800604 	movi	r2,24
    5220:	00c00204 	movi	r3,8
    5224:	003ff606 	br	5200 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005200>
    5228:	00800404 	movi	r2,16
    522c:	1007883a 	mov	r3,r2
    5230:	003ff306 	br	5200 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005200>

00005234 <_printf_r>:
    5234:	defffd04 	addi	sp,sp,-12
    5238:	2805883a 	mov	r2,r5
    523c:	dfc00015 	stw	ra,0(sp)
    5240:	d9800115 	stw	r6,4(sp)
    5244:	d9c00215 	stw	r7,8(sp)
    5248:	21400217 	ldw	r5,8(r4)
    524c:	d9c00104 	addi	r7,sp,4
    5250:	100d883a 	mov	r6,r2
    5254:	00052a00 	call	52a0 <___vfprintf_internal_r>
    5258:	dfc00017 	ldw	ra,0(sp)
    525c:	dec00304 	addi	sp,sp,12
    5260:	f800283a 	ret

00005264 <printf>:
    5264:	defffc04 	addi	sp,sp,-16
    5268:	dfc00015 	stw	ra,0(sp)
    526c:	d9400115 	stw	r5,4(sp)
    5270:	d9800215 	stw	r6,8(sp)
    5274:	d9c00315 	stw	r7,12(sp)
    5278:	008000b4 	movhi	r2,2
    527c:	10b71304 	addi	r2,r2,-9140
    5280:	10800017 	ldw	r2,0(r2)
    5284:	200b883a 	mov	r5,r4
    5288:	d9800104 	addi	r6,sp,4
    528c:	11000217 	ldw	r4,8(r2)
    5290:	00074980 	call	7498 <__vfprintf_internal>
    5294:	dfc00017 	ldw	ra,0(sp)
    5298:	dec00404 	addi	sp,sp,16
    529c:	f800283a 	ret

000052a0 <___vfprintf_internal_r>:
    52a0:	deffb804 	addi	sp,sp,-288
    52a4:	dfc04715 	stw	ra,284(sp)
    52a8:	ddc04515 	stw	r23,276(sp)
    52ac:	dd404315 	stw	r21,268(sp)
    52b0:	d9002c15 	stw	r4,176(sp)
    52b4:	282f883a 	mov	r23,r5
    52b8:	302b883a 	mov	r21,r6
    52bc:	d9c02d15 	stw	r7,180(sp)
    52c0:	df004615 	stw	fp,280(sp)
    52c4:	dd804415 	stw	r22,272(sp)
    52c8:	dd004215 	stw	r20,264(sp)
    52cc:	dcc04115 	stw	r19,260(sp)
    52d0:	dc804015 	stw	r18,256(sp)
    52d4:	dc403f15 	stw	r17,252(sp)
    52d8:	dc003e15 	stw	r16,248(sp)
    52dc:	0009bfc0 	call	9bfc <_localeconv_r>
    52e0:	10800017 	ldw	r2,0(r2)
    52e4:	1009883a 	mov	r4,r2
    52e8:	d8803415 	stw	r2,208(sp)
    52ec:	000bc240 	call	bc24 <strlen>
    52f0:	d8803715 	stw	r2,220(sp)
    52f4:	d8802c17 	ldw	r2,176(sp)
    52f8:	10000226 	beq	r2,zero,5304 <___vfprintf_internal_r+0x64>
    52fc:	10800e17 	ldw	r2,56(r2)
    5300:	1000f926 	beq	r2,zero,56e8 <___vfprintf_internal_r+0x448>
    5304:	b880030b 	ldhu	r2,12(r23)
    5308:	10c8000c 	andi	r3,r2,8192
    530c:	1800061e 	bne	r3,zero,5328 <___vfprintf_internal_r+0x88>
    5310:	b9001917 	ldw	r4,100(r23)
    5314:	00f7ffc4 	movi	r3,-8193
    5318:	10880014 	ori	r2,r2,8192
    531c:	20c6703a 	and	r3,r4,r3
    5320:	b880030d 	sth	r2,12(r23)
    5324:	b8c01915 	stw	r3,100(r23)
    5328:	10c0020c 	andi	r3,r2,8
    532c:	1800c126 	beq	r3,zero,5634 <___vfprintf_internal_r+0x394>
    5330:	b8c00417 	ldw	r3,16(r23)
    5334:	1800bf26 	beq	r3,zero,5634 <___vfprintf_internal_r+0x394>
    5338:	1080068c 	andi	r2,r2,26
    533c:	00c00284 	movi	r3,10
    5340:	10c0c426 	beq	r2,r3,5654 <___vfprintf_internal_r+0x3b4>
    5344:	d8c00404 	addi	r3,sp,16
    5348:	050000b4 	movhi	r20,2
    534c:	d9001e04 	addi	r4,sp,120
    5350:	a52e4984 	addi	r20,r20,-18138
    5354:	d8c01e15 	stw	r3,120(sp)
    5358:	d8002015 	stw	zero,128(sp)
    535c:	d8001f15 	stw	zero,124(sp)
    5360:	d8003315 	stw	zero,204(sp)
    5364:	d8003615 	stw	zero,216(sp)
    5368:	d8003815 	stw	zero,224(sp)
    536c:	1811883a 	mov	r8,r3
    5370:	d8003915 	stw	zero,228(sp)
    5374:	d8003a15 	stw	zero,232(sp)
    5378:	d8002f15 	stw	zero,188(sp)
    537c:	d9002815 	stw	r4,160(sp)
    5380:	a8800007 	ldb	r2,0(r21)
    5384:	10027b26 	beq	r2,zero,5d74 <___vfprintf_internal_r+0xad4>
    5388:	00c00944 	movi	r3,37
    538c:	a821883a 	mov	r16,r21
    5390:	10c0021e 	bne	r2,r3,539c <___vfprintf_internal_r+0xfc>
    5394:	00001406 	br	53e8 <___vfprintf_internal_r+0x148>
    5398:	10c00326 	beq	r2,r3,53a8 <___vfprintf_internal_r+0x108>
    539c:	84000044 	addi	r16,r16,1
    53a0:	80800007 	ldb	r2,0(r16)
    53a4:	103ffc1e 	bne	r2,zero,5398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005398>
    53a8:	8563c83a 	sub	r17,r16,r21
    53ac:	88000e26 	beq	r17,zero,53e8 <___vfprintf_internal_r+0x148>
    53b0:	d8c02017 	ldw	r3,128(sp)
    53b4:	d8801f17 	ldw	r2,124(sp)
    53b8:	45400015 	stw	r21,0(r8)
    53bc:	1c47883a 	add	r3,r3,r17
    53c0:	10800044 	addi	r2,r2,1
    53c4:	d8c02015 	stw	r3,128(sp)
    53c8:	44400115 	stw	r17,4(r8)
    53cc:	d8801f15 	stw	r2,124(sp)
    53d0:	00c001c4 	movi	r3,7
    53d4:	1880a716 	blt	r3,r2,5674 <___vfprintf_internal_r+0x3d4>
    53d8:	42000204 	addi	r8,r8,8
    53dc:	d9402f17 	ldw	r5,188(sp)
    53e0:	2c4b883a 	add	r5,r5,r17
    53e4:	d9402f15 	stw	r5,188(sp)
    53e8:	80800007 	ldb	r2,0(r16)
    53ec:	1000a826 	beq	r2,zero,5690 <___vfprintf_internal_r+0x3f0>
    53f0:	84400047 	ldb	r17,1(r16)
    53f4:	00bfffc4 	movi	r2,-1
    53f8:	85400044 	addi	r21,r16,1
    53fc:	d8002785 	stb	zero,158(sp)
    5400:	0007883a 	mov	r3,zero
    5404:	000f883a 	mov	r7,zero
    5408:	d8802915 	stw	r2,164(sp)
    540c:	d8003115 	stw	zero,196(sp)
    5410:	0025883a 	mov	r18,zero
    5414:	01401604 	movi	r5,88
    5418:	01800244 	movi	r6,9
    541c:	02800a84 	movi	r10,42
    5420:	02401b04 	movi	r9,108
    5424:	ad400044 	addi	r21,r21,1
    5428:	88bff804 	addi	r2,r17,-32
    542c:	28830436 	bltu	r5,r2,6040 <___vfprintf_internal_r+0xda0>
    5430:	100490ba 	slli	r2,r2,2
    5434:	01000034 	movhi	r4,0
    5438:	21151204 	addi	r4,r4,21576
    543c:	1105883a 	add	r2,r2,r4
    5440:	10800017 	ldw	r2,0(r2)
    5444:	1000683a 	jmp	r2
    5448:	00005f60 	cmpeqi	zero,zero,381
    544c:	00006040 	call	604 <check_KEYs+0x7c>
    5450:	00006040 	call	604 <check_KEYs+0x7c>
    5454:	00005f80 	call	5f8 <check_KEYs+0x70>
    5458:	00006040 	call	604 <check_KEYs+0x7c>
    545c:	00006040 	call	604 <check_KEYs+0x7c>
    5460:	00006040 	call	604 <check_KEYs+0x7c>
    5464:	00006040 	call	604 <check_KEYs+0x7c>
    5468:	00006040 	call	604 <check_KEYs+0x7c>
    546c:	00006040 	call	604 <check_KEYs+0x7c>
    5470:	000056f4 	movhi	zero,347
    5474:	00005e9c 	xori	zero,zero,378
    5478:	00006040 	call	604 <check_KEYs+0x7c>
    547c:	000055bc 	xorhi	zero,zero,342
    5480:	0000571c 	xori	zero,zero,348
    5484:	00006040 	call	604 <check_KEYs+0x7c>
    5488:	0000575c 	xori	zero,zero,349
    548c:	00005768 	cmpgeui	zero,zero,349
    5490:	00005768 	cmpgeui	zero,zero,349
    5494:	00005768 	cmpgeui	zero,zero,349
    5498:	00005768 	cmpgeui	zero,zero,349
    549c:	00005768 	cmpgeui	zero,zero,349
    54a0:	00005768 	cmpgeui	zero,zero,349
    54a4:	00005768 	cmpgeui	zero,zero,349
    54a8:	00005768 	cmpgeui	zero,zero,349
    54ac:	00005768 	cmpgeui	zero,zero,349
    54b0:	00006040 	call	604 <check_KEYs+0x7c>
    54b4:	00006040 	call	604 <check_KEYs+0x7c>
    54b8:	00006040 	call	604 <check_KEYs+0x7c>
    54bc:	00006040 	call	604 <check_KEYs+0x7c>
    54c0:	00006040 	call	604 <check_KEYs+0x7c>
    54c4:	00006040 	call	604 <check_KEYs+0x7c>
    54c8:	00006040 	call	604 <check_KEYs+0x7c>
    54cc:	00006040 	call	604 <check_KEYs+0x7c>
    54d0:	00006040 	call	604 <check_KEYs+0x7c>
    54d4:	00006040 	call	604 <check_KEYs+0x7c>
    54d8:	0000579c 	xori	zero,zero,350
    54dc:	00005858 	cmpnei	zero,zero,353
    54e0:	00006040 	call	604 <check_KEYs+0x7c>
    54e4:	00005858 	cmpnei	zero,zero,353
    54e8:	00006040 	call	604 <check_KEYs+0x7c>
    54ec:	00006040 	call	604 <check_KEYs+0x7c>
    54f0:	00006040 	call	604 <check_KEYs+0x7c>
    54f4:	00006040 	call	604 <check_KEYs+0x7c>
    54f8:	000058f8 	rdprs	zero,zero,355
    54fc:	00006040 	call	604 <check_KEYs+0x7c>
    5500:	00006040 	call	604 <check_KEYs+0x7c>
    5504:	00005904 	movi	zero,356
    5508:	00006040 	call	604 <check_KEYs+0x7c>
    550c:	00006040 	call	604 <check_KEYs+0x7c>
    5510:	00006040 	call	604 <check_KEYs+0x7c>
    5514:	00006040 	call	604 <check_KEYs+0x7c>
    5518:	00006040 	call	604 <check_KEYs+0x7c>
    551c:	00005d7c 	xorhi	zero,zero,373
    5520:	00006040 	call	604 <check_KEYs+0x7c>
    5524:	00006040 	call	604 <check_KEYs+0x7c>
    5528:	00005ddc 	xori	zero,zero,375
    552c:	00006040 	call	604 <check_KEYs+0x7c>
    5530:	00006040 	call	604 <check_KEYs+0x7c>
    5534:	00006040 	call	604 <check_KEYs+0x7c>
    5538:	00006040 	call	604 <check_KEYs+0x7c>
    553c:	00006040 	call	604 <check_KEYs+0x7c>
    5540:	00006040 	call	604 <check_KEYs+0x7c>
    5544:	00006040 	call	604 <check_KEYs+0x7c>
    5548:	00006040 	call	604 <check_KEYs+0x7c>
    554c:	00006040 	call	604 <check_KEYs+0x7c>
    5550:	00006040 	call	604 <check_KEYs+0x7c>
    5554:	00005fec 	andhi	zero,zero,383
    5558:	00005f8c 	andi	zero,zero,382
    555c:	00005858 	cmpnei	zero,zero,353
    5560:	00005858 	cmpnei	zero,zero,353
    5564:	00005858 	cmpnei	zero,zero,353
    5568:	00005f9c 	xori	zero,zero,382
    556c:	00005f8c 	andi	zero,zero,382
    5570:	00006040 	call	604 <check_KEYs+0x7c>
    5574:	00006040 	call	604 <check_KEYs+0x7c>
    5578:	00005fa8 	cmpgeui	zero,zero,382
    557c:	00006040 	call	604 <check_KEYs+0x7c>
    5580:	00005fb8 	rdprs	zero,zero,382
    5584:	00005e8c 	andi	zero,zero,378
    5588:	000055c8 	cmpgei	zero,zero,343
    558c:	00005eac 	andhi	zero,zero,378
    5590:	00006040 	call	604 <check_KEYs+0x7c>
    5594:	00005eb8 	rdprs	zero,zero,378
    5598:	00006040 	call	604 <check_KEYs+0x7c>
    559c:	00005f14 	movui	zero,380
    55a0:	00006040 	call	604 <check_KEYs+0x7c>
    55a4:	00006040 	call	604 <check_KEYs+0x7c>
    55a8:	00005f24 	muli	zero,zero,380
    55ac:	d9003117 	ldw	r4,196(sp)
    55b0:	d8802d15 	stw	r2,180(sp)
    55b4:	0109c83a 	sub	r4,zero,r4
    55b8:	d9003115 	stw	r4,196(sp)
    55bc:	94800114 	ori	r18,r18,4
    55c0:	ac400007 	ldb	r17,0(r21)
    55c4:	003f9706 	br	5424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005424>
    55c8:	00800c04 	movi	r2,48
    55cc:	d9002d17 	ldw	r4,180(sp)
    55d0:	d9402917 	ldw	r5,164(sp)
    55d4:	d8802705 	stb	r2,156(sp)
    55d8:	00801e04 	movi	r2,120
    55dc:	d8802745 	stb	r2,157(sp)
    55e0:	d8002785 	stb	zero,158(sp)
    55e4:	20c00104 	addi	r3,r4,4
    55e8:	24c00017 	ldw	r19,0(r4)
    55ec:	002d883a 	mov	r22,zero
    55f0:	90800094 	ori	r2,r18,2
    55f4:	28029a16 	blt	r5,zero,6060 <___vfprintf_internal_r+0xdc0>
    55f8:	00bfdfc4 	movi	r2,-129
    55fc:	90a4703a 	and	r18,r18,r2
    5600:	d8c02d15 	stw	r3,180(sp)
    5604:	94800094 	ori	r18,r18,2
    5608:	9802871e 	bne	r19,zero,6028 <___vfprintf_internal_r+0xd88>
    560c:	008000b4 	movhi	r2,2
    5610:	10ae4204 	addi	r2,r2,-18168
    5614:	d8803915 	stw	r2,228(sp)
    5618:	04401e04 	movi	r17,120
    561c:	d8802917 	ldw	r2,164(sp)
    5620:	0039883a 	mov	fp,zero
    5624:	1001e926 	beq	r2,zero,5dcc <___vfprintf_internal_r+0xb2c>
    5628:	0027883a 	mov	r19,zero
    562c:	002d883a 	mov	r22,zero
    5630:	00020506 	br	5e48 <___vfprintf_internal_r+0xba8>
    5634:	d9002c17 	ldw	r4,176(sp)
    5638:	b80b883a 	mov	r5,r23
    563c:	00075700 	call	7570 <__swsetup_r>
    5640:	1005ac1e 	bne	r2,zero,6cf4 <___vfprintf_internal_r+0x1a54>
    5644:	b880030b 	ldhu	r2,12(r23)
    5648:	00c00284 	movi	r3,10
    564c:	1080068c 	andi	r2,r2,26
    5650:	10ff3c1e 	bne	r2,r3,5344 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005344>
    5654:	b880038f 	ldh	r2,14(r23)
    5658:	103f3a16 	blt	r2,zero,5344 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005344>
    565c:	d9c02d17 	ldw	r7,180(sp)
    5660:	d9002c17 	ldw	r4,176(sp)
    5664:	a80d883a 	mov	r6,r21
    5668:	b80b883a 	mov	r5,r23
    566c:	00074b40 	call	74b4 <__sbprintf>
    5670:	00001106 	br	56b8 <___vfprintf_internal_r+0x418>
    5674:	d9002c17 	ldw	r4,176(sp)
    5678:	d9801e04 	addi	r6,sp,120
    567c:	b80b883a 	mov	r5,r23
    5680:	000bdb80 	call	bdb8 <__sprint_r>
    5684:	1000081e 	bne	r2,zero,56a8 <___vfprintf_internal_r+0x408>
    5688:	da000404 	addi	r8,sp,16
    568c:	003f5306 	br	53dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70053dc>
    5690:	d8802017 	ldw	r2,128(sp)
    5694:	10000426 	beq	r2,zero,56a8 <___vfprintf_internal_r+0x408>
    5698:	d9002c17 	ldw	r4,176(sp)
    569c:	d9801e04 	addi	r6,sp,120
    56a0:	b80b883a 	mov	r5,r23
    56a4:	000bdb80 	call	bdb8 <__sprint_r>
    56a8:	b880030b 	ldhu	r2,12(r23)
    56ac:	1080100c 	andi	r2,r2,64
    56b0:	1005901e 	bne	r2,zero,6cf4 <___vfprintf_internal_r+0x1a54>
    56b4:	d8802f17 	ldw	r2,188(sp)
    56b8:	dfc04717 	ldw	ra,284(sp)
    56bc:	df004617 	ldw	fp,280(sp)
    56c0:	ddc04517 	ldw	r23,276(sp)
    56c4:	dd804417 	ldw	r22,272(sp)
    56c8:	dd404317 	ldw	r21,268(sp)
    56cc:	dd004217 	ldw	r20,264(sp)
    56d0:	dcc04117 	ldw	r19,260(sp)
    56d4:	dc804017 	ldw	r18,256(sp)
    56d8:	dc403f17 	ldw	r17,252(sp)
    56dc:	dc003e17 	ldw	r16,248(sp)
    56e0:	dec04804 	addi	sp,sp,288
    56e4:	f800283a 	ret
    56e8:	d9002c17 	ldw	r4,176(sp)
    56ec:	00095440 	call	9544 <__sinit>
    56f0:	003f0406 	br	5304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005304>
    56f4:	d8802d17 	ldw	r2,180(sp)
    56f8:	d9002d17 	ldw	r4,180(sp)
    56fc:	10800017 	ldw	r2,0(r2)
    5700:	d8803115 	stw	r2,196(sp)
    5704:	20800104 	addi	r2,r4,4
    5708:	d9003117 	ldw	r4,196(sp)
    570c:	203fa716 	blt	r4,zero,55ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70055ac>
    5710:	d8802d15 	stw	r2,180(sp)
    5714:	ac400007 	ldb	r17,0(r21)
    5718:	003f4206 	br	5424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005424>
    571c:	ac400007 	ldb	r17,0(r21)
    5720:	aac00044 	addi	r11,r21,1
    5724:	8a872826 	beq	r17,r10,73c8 <___vfprintf_internal_r+0x2128>
    5728:	88bff404 	addi	r2,r17,-48
    572c:	0009883a 	mov	r4,zero
    5730:	30867d36 	bltu	r6,r2,7128 <___vfprintf_internal_r+0x1e88>
    5734:	5c400007 	ldb	r17,0(r11)
    5738:	210002a4 	muli	r4,r4,10
    573c:	5d400044 	addi	r21,r11,1
    5740:	a817883a 	mov	r11,r21
    5744:	2089883a 	add	r4,r4,r2
    5748:	88bff404 	addi	r2,r17,-48
    574c:	30bff92e 	bgeu	r6,r2,5734 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005734>
    5750:	2005c916 	blt	r4,zero,6e78 <___vfprintf_internal_r+0x1bd8>
    5754:	d9002915 	stw	r4,164(sp)
    5758:	003f3306 	br	5428 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005428>
    575c:	94802014 	ori	r18,r18,128
    5760:	ac400007 	ldb	r17,0(r21)
    5764:	003f2f06 	br	5424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005424>
    5768:	a809883a 	mov	r4,r21
    576c:	d8003115 	stw	zero,196(sp)
    5770:	88bff404 	addi	r2,r17,-48
    5774:	0017883a 	mov	r11,zero
    5778:	24400007 	ldb	r17,0(r4)
    577c:	5ac002a4 	muli	r11,r11,10
    5780:	ad400044 	addi	r21,r21,1
    5784:	a809883a 	mov	r4,r21
    5788:	12d7883a 	add	r11,r2,r11
    578c:	88bff404 	addi	r2,r17,-48
    5790:	30bff92e 	bgeu	r6,r2,5778 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005778>
    5794:	dac03115 	stw	r11,196(sp)
    5798:	003f2306 	br	5428 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005428>
    579c:	18c03fcc 	andi	r3,r3,255
    57a0:	18072b1e 	bne	r3,zero,7450 <___vfprintf_internal_r+0x21b0>
    57a4:	94800414 	ori	r18,r18,16
    57a8:	9080080c 	andi	r2,r18,32
    57ac:	10037b26 	beq	r2,zero,659c <___vfprintf_internal_r+0x12fc>
    57b0:	d9402d17 	ldw	r5,180(sp)
    57b4:	28800117 	ldw	r2,4(r5)
    57b8:	2cc00017 	ldw	r19,0(r5)
    57bc:	29400204 	addi	r5,r5,8
    57c0:	d9402d15 	stw	r5,180(sp)
    57c4:	102d883a 	mov	r22,r2
    57c8:	10044b16 	blt	r2,zero,68f8 <___vfprintf_internal_r+0x1658>
    57cc:	d9402917 	ldw	r5,164(sp)
    57d0:	df002783 	ldbu	fp,158(sp)
    57d4:	2803bc16 	blt	r5,zero,66c8 <___vfprintf_internal_r+0x1428>
    57d8:	00ffdfc4 	movi	r3,-129
    57dc:	9d84b03a 	or	r2,r19,r22
    57e0:	90e4703a 	and	r18,r18,r3
    57e4:	10017726 	beq	r2,zero,5dc4 <___vfprintf_internal_r+0xb24>
    57e8:	b0038326 	beq	r22,zero,65f8 <___vfprintf_internal_r+0x1358>
    57ec:	dc402a15 	stw	r17,168(sp)
    57f0:	dc001e04 	addi	r16,sp,120
    57f4:	b023883a 	mov	r17,r22
    57f8:	402d883a 	mov	r22,r8
    57fc:	9809883a 	mov	r4,r19
    5800:	880b883a 	mov	r5,r17
    5804:	01800284 	movi	r6,10
    5808:	000f883a 	mov	r7,zero
    580c:	000ed2c0 	call	ed2c <__umoddi3>
    5810:	10800c04 	addi	r2,r2,48
    5814:	843fffc4 	addi	r16,r16,-1
    5818:	9809883a 	mov	r4,r19
    581c:	880b883a 	mov	r5,r17
    5820:	80800005 	stb	r2,0(r16)
    5824:	01800284 	movi	r6,10
    5828:	000f883a 	mov	r7,zero
    582c:	000e7b40 	call	e7b4 <__udivdi3>
    5830:	1027883a 	mov	r19,r2
    5834:	10c4b03a 	or	r2,r2,r3
    5838:	1823883a 	mov	r17,r3
    583c:	103fef1e 	bne	r2,zero,57fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057fc>
    5840:	d8c02817 	ldw	r3,160(sp)
    5844:	dc402a17 	ldw	r17,168(sp)
    5848:	b011883a 	mov	r8,r22
    584c:	1c07c83a 	sub	r3,r3,r16
    5850:	d8c02e15 	stw	r3,184(sp)
    5854:	00005906 	br	59bc <___vfprintf_internal_r+0x71c>
    5858:	18c03fcc 	andi	r3,r3,255
    585c:	1806fa1e 	bne	r3,zero,7448 <___vfprintf_internal_r+0x21a8>
    5860:	9080020c 	andi	r2,r18,8
    5864:	10048a26 	beq	r2,zero,6a90 <___vfprintf_internal_r+0x17f0>
    5868:	d8c02d17 	ldw	r3,180(sp)
    586c:	d9002d17 	ldw	r4,180(sp)
    5870:	d9402d17 	ldw	r5,180(sp)
    5874:	18c00017 	ldw	r3,0(r3)
    5878:	21000117 	ldw	r4,4(r4)
    587c:	29400204 	addi	r5,r5,8
    5880:	d8c03615 	stw	r3,216(sp)
    5884:	d9003815 	stw	r4,224(sp)
    5888:	d9402d15 	stw	r5,180(sp)
    588c:	d9003617 	ldw	r4,216(sp)
    5890:	d9403817 	ldw	r5,224(sp)
    5894:	da003d15 	stw	r8,244(sp)
    5898:	04000044 	movi	r16,1
    589c:	000b9440 	call	b944 <__fpclassifyd>
    58a0:	da003d17 	ldw	r8,244(sp)
    58a4:	14041f1e 	bne	r2,r16,6924 <___vfprintf_internal_r+0x1684>
    58a8:	d9003617 	ldw	r4,216(sp)
    58ac:	d9403817 	ldw	r5,224(sp)
    58b0:	000d883a 	mov	r6,zero
    58b4:	000f883a 	mov	r7,zero
    58b8:	000f2640 	call	f264 <__ledf2>
    58bc:	da003d17 	ldw	r8,244(sp)
    58c0:	1005be16 	blt	r2,zero,6fbc <___vfprintf_internal_r+0x1d1c>
    58c4:	df002783 	ldbu	fp,158(sp)
    58c8:	008011c4 	movi	r2,71
    58cc:	1445330e 	bge	r2,r17,6d9c <___vfprintf_internal_r+0x1afc>
    58d0:	040000b4 	movhi	r16,2
    58d4:	842e3a04 	addi	r16,r16,-18200
    58d8:	00c000c4 	movi	r3,3
    58dc:	00bfdfc4 	movi	r2,-129
    58e0:	d8c02a15 	stw	r3,168(sp)
    58e4:	90a4703a 	and	r18,r18,r2
    58e8:	d8c02e15 	stw	r3,184(sp)
    58ec:	d8002915 	stw	zero,164(sp)
    58f0:	d8003215 	stw	zero,200(sp)
    58f4:	00003706 	br	59d4 <___vfprintf_internal_r+0x734>
    58f8:	94800214 	ori	r18,r18,8
    58fc:	ac400007 	ldb	r17,0(r21)
    5900:	003ec806 	br	5424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005424>
    5904:	18c03fcc 	andi	r3,r3,255
    5908:	1806db1e 	bne	r3,zero,7478 <___vfprintf_internal_r+0x21d8>
    590c:	94800414 	ori	r18,r18,16
    5910:	9080080c 	andi	r2,r18,32
    5914:	1002d826 	beq	r2,zero,6478 <___vfprintf_internal_r+0x11d8>
    5918:	d9402d17 	ldw	r5,180(sp)
    591c:	d8c02917 	ldw	r3,164(sp)
    5920:	d8002785 	stb	zero,158(sp)
    5924:	28800204 	addi	r2,r5,8
    5928:	2cc00017 	ldw	r19,0(r5)
    592c:	2d800117 	ldw	r22,4(r5)
    5930:	18048f16 	blt	r3,zero,6b70 <___vfprintf_internal_r+0x18d0>
    5934:	013fdfc4 	movi	r4,-129
    5938:	9d86b03a 	or	r3,r19,r22
    593c:	d8802d15 	stw	r2,180(sp)
    5940:	9124703a 	and	r18,r18,r4
    5944:	1802d91e 	bne	r3,zero,64ac <___vfprintf_internal_r+0x120c>
    5948:	d8c02917 	ldw	r3,164(sp)
    594c:	0039883a 	mov	fp,zero
    5950:	1805c326 	beq	r3,zero,7060 <___vfprintf_internal_r+0x1dc0>
    5954:	0027883a 	mov	r19,zero
    5958:	002d883a 	mov	r22,zero
    595c:	dc001e04 	addi	r16,sp,120
    5960:	9806d0fa 	srli	r3,r19,3
    5964:	b008977a 	slli	r4,r22,29
    5968:	b02cd0fa 	srli	r22,r22,3
    596c:	9cc001cc 	andi	r19,r19,7
    5970:	98800c04 	addi	r2,r19,48
    5974:	843fffc4 	addi	r16,r16,-1
    5978:	20e6b03a 	or	r19,r4,r3
    597c:	80800005 	stb	r2,0(r16)
    5980:	9d86b03a 	or	r3,r19,r22
    5984:	183ff61e 	bne	r3,zero,5960 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005960>
    5988:	90c0004c 	andi	r3,r18,1
    598c:	18013b26 	beq	r3,zero,5e7c <___vfprintf_internal_r+0xbdc>
    5990:	10803fcc 	andi	r2,r2,255
    5994:	1080201c 	xori	r2,r2,128
    5998:	10bfe004 	addi	r2,r2,-128
    599c:	00c00c04 	movi	r3,48
    59a0:	10c13626 	beq	r2,r3,5e7c <___vfprintf_internal_r+0xbdc>
    59a4:	80ffffc5 	stb	r3,-1(r16)
    59a8:	d8c02817 	ldw	r3,160(sp)
    59ac:	80bfffc4 	addi	r2,r16,-1
    59b0:	1021883a 	mov	r16,r2
    59b4:	1887c83a 	sub	r3,r3,r2
    59b8:	d8c02e15 	stw	r3,184(sp)
    59bc:	d8802e17 	ldw	r2,184(sp)
    59c0:	d9002917 	ldw	r4,164(sp)
    59c4:	1100010e 	bge	r2,r4,59cc <___vfprintf_internal_r+0x72c>
    59c8:	2005883a 	mov	r2,r4
    59cc:	d8802a15 	stw	r2,168(sp)
    59d0:	d8003215 	stw	zero,200(sp)
    59d4:	e7003fcc 	andi	fp,fp,255
    59d8:	e700201c 	xori	fp,fp,128
    59dc:	e73fe004 	addi	fp,fp,-128
    59e0:	e0000326 	beq	fp,zero,59f0 <___vfprintf_internal_r+0x750>
    59e4:	d8c02a17 	ldw	r3,168(sp)
    59e8:	18c00044 	addi	r3,r3,1
    59ec:	d8c02a15 	stw	r3,168(sp)
    59f0:	90c0008c 	andi	r3,r18,2
    59f4:	d8c02b15 	stw	r3,172(sp)
    59f8:	18000326 	beq	r3,zero,5a08 <___vfprintf_internal_r+0x768>
    59fc:	d8c02a17 	ldw	r3,168(sp)
    5a00:	18c00084 	addi	r3,r3,2
    5a04:	d8c02a15 	stw	r3,168(sp)
    5a08:	90c0210c 	andi	r3,r18,132
    5a0c:	d8c03015 	stw	r3,192(sp)
    5a10:	1801a31e 	bne	r3,zero,60a0 <___vfprintf_internal_r+0xe00>
    5a14:	d9003117 	ldw	r4,196(sp)
    5a18:	d8c02a17 	ldw	r3,168(sp)
    5a1c:	20e7c83a 	sub	r19,r4,r3
    5a20:	04c19f0e 	bge	zero,r19,60a0 <___vfprintf_internal_r+0xe00>
    5a24:	02400404 	movi	r9,16
    5a28:	d8c02017 	ldw	r3,128(sp)
    5a2c:	d8801f17 	ldw	r2,124(sp)
    5a30:	4cc50d0e 	bge	r9,r19,6e68 <___vfprintf_internal_r+0x1bc8>
    5a34:	014000b4 	movhi	r5,2
    5a38:	296e4d84 	addi	r5,r5,-18122
    5a3c:	dc403b15 	stw	r17,236(sp)
    5a40:	d9403515 	stw	r5,212(sp)
    5a44:	9823883a 	mov	r17,r19
    5a48:	482d883a 	mov	r22,r9
    5a4c:	9027883a 	mov	r19,r18
    5a50:	070001c4 	movi	fp,7
    5a54:	8025883a 	mov	r18,r16
    5a58:	dc002c17 	ldw	r16,176(sp)
    5a5c:	00000306 	br	5a6c <___vfprintf_internal_r+0x7cc>
    5a60:	8c7ffc04 	addi	r17,r17,-16
    5a64:	42000204 	addi	r8,r8,8
    5a68:	b440130e 	bge	r22,r17,5ab8 <___vfprintf_internal_r+0x818>
    5a6c:	010000b4 	movhi	r4,2
    5a70:	18c00404 	addi	r3,r3,16
    5a74:	10800044 	addi	r2,r2,1
    5a78:	212e4d84 	addi	r4,r4,-18122
    5a7c:	41000015 	stw	r4,0(r8)
    5a80:	45800115 	stw	r22,4(r8)
    5a84:	d8c02015 	stw	r3,128(sp)
    5a88:	d8801f15 	stw	r2,124(sp)
    5a8c:	e0bff40e 	bge	fp,r2,5a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a60>
    5a90:	d9801e04 	addi	r6,sp,120
    5a94:	b80b883a 	mov	r5,r23
    5a98:	8009883a 	mov	r4,r16
    5a9c:	000bdb80 	call	bdb8 <__sprint_r>
    5aa0:	103f011e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    5aa4:	8c7ffc04 	addi	r17,r17,-16
    5aa8:	d8c02017 	ldw	r3,128(sp)
    5aac:	d8801f17 	ldw	r2,124(sp)
    5ab0:	da000404 	addi	r8,sp,16
    5ab4:	b47fed16 	blt	r22,r17,5a6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a6c>
    5ab8:	9021883a 	mov	r16,r18
    5abc:	9825883a 	mov	r18,r19
    5ac0:	8827883a 	mov	r19,r17
    5ac4:	dc403b17 	ldw	r17,236(sp)
    5ac8:	d9403517 	ldw	r5,212(sp)
    5acc:	98c7883a 	add	r3,r19,r3
    5ad0:	10800044 	addi	r2,r2,1
    5ad4:	41400015 	stw	r5,0(r8)
    5ad8:	44c00115 	stw	r19,4(r8)
    5adc:	d8c02015 	stw	r3,128(sp)
    5ae0:	d8801f15 	stw	r2,124(sp)
    5ae4:	010001c4 	movi	r4,7
    5ae8:	2082a316 	blt	r4,r2,6578 <___vfprintf_internal_r+0x12d8>
    5aec:	df002787 	ldb	fp,158(sp)
    5af0:	42000204 	addi	r8,r8,8
    5af4:	e0000c26 	beq	fp,zero,5b28 <___vfprintf_internal_r+0x888>
    5af8:	d8801f17 	ldw	r2,124(sp)
    5afc:	d9002784 	addi	r4,sp,158
    5b00:	18c00044 	addi	r3,r3,1
    5b04:	10800044 	addi	r2,r2,1
    5b08:	41000015 	stw	r4,0(r8)
    5b0c:	01000044 	movi	r4,1
    5b10:	41000115 	stw	r4,4(r8)
    5b14:	d8c02015 	stw	r3,128(sp)
    5b18:	d8801f15 	stw	r2,124(sp)
    5b1c:	010001c4 	movi	r4,7
    5b20:	20823c16 	blt	r4,r2,6414 <___vfprintf_internal_r+0x1174>
    5b24:	42000204 	addi	r8,r8,8
    5b28:	d8802b17 	ldw	r2,172(sp)
    5b2c:	10000c26 	beq	r2,zero,5b60 <___vfprintf_internal_r+0x8c0>
    5b30:	d8801f17 	ldw	r2,124(sp)
    5b34:	d9002704 	addi	r4,sp,156
    5b38:	18c00084 	addi	r3,r3,2
    5b3c:	10800044 	addi	r2,r2,1
    5b40:	41000015 	stw	r4,0(r8)
    5b44:	01000084 	movi	r4,2
    5b48:	41000115 	stw	r4,4(r8)
    5b4c:	d8c02015 	stw	r3,128(sp)
    5b50:	d8801f15 	stw	r2,124(sp)
    5b54:	010001c4 	movi	r4,7
    5b58:	20823616 	blt	r4,r2,6434 <___vfprintf_internal_r+0x1194>
    5b5c:	42000204 	addi	r8,r8,8
    5b60:	d9003017 	ldw	r4,192(sp)
    5b64:	00802004 	movi	r2,128
    5b68:	20819926 	beq	r4,r2,61d0 <___vfprintf_internal_r+0xf30>
    5b6c:	d9402917 	ldw	r5,164(sp)
    5b70:	d8802e17 	ldw	r2,184(sp)
    5b74:	28adc83a 	sub	r22,r5,r2
    5b78:	0580310e 	bge	zero,r22,5c40 <___vfprintf_internal_r+0x9a0>
    5b7c:	07000404 	movi	fp,16
    5b80:	d8801f17 	ldw	r2,124(sp)
    5b84:	e584140e 	bge	fp,r22,6bd8 <___vfprintf_internal_r+0x1938>
    5b88:	014000b4 	movhi	r5,2
    5b8c:	296e4984 	addi	r5,r5,-18138
    5b90:	dc402915 	stw	r17,164(sp)
    5b94:	d9402b15 	stw	r5,172(sp)
    5b98:	b023883a 	mov	r17,r22
    5b9c:	04c001c4 	movi	r19,7
    5ba0:	a82d883a 	mov	r22,r21
    5ba4:	902b883a 	mov	r21,r18
    5ba8:	8025883a 	mov	r18,r16
    5bac:	dc002c17 	ldw	r16,176(sp)
    5bb0:	00000306 	br	5bc0 <___vfprintf_internal_r+0x920>
    5bb4:	8c7ffc04 	addi	r17,r17,-16
    5bb8:	42000204 	addi	r8,r8,8
    5bbc:	e440110e 	bge	fp,r17,5c04 <___vfprintf_internal_r+0x964>
    5bc0:	18c00404 	addi	r3,r3,16
    5bc4:	10800044 	addi	r2,r2,1
    5bc8:	45000015 	stw	r20,0(r8)
    5bcc:	47000115 	stw	fp,4(r8)
    5bd0:	d8c02015 	stw	r3,128(sp)
    5bd4:	d8801f15 	stw	r2,124(sp)
    5bd8:	98bff60e 	bge	r19,r2,5bb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bb4>
    5bdc:	d9801e04 	addi	r6,sp,120
    5be0:	b80b883a 	mov	r5,r23
    5be4:	8009883a 	mov	r4,r16
    5be8:	000bdb80 	call	bdb8 <__sprint_r>
    5bec:	103eae1e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    5bf0:	8c7ffc04 	addi	r17,r17,-16
    5bf4:	d8c02017 	ldw	r3,128(sp)
    5bf8:	d8801f17 	ldw	r2,124(sp)
    5bfc:	da000404 	addi	r8,sp,16
    5c00:	e47fef16 	blt	fp,r17,5bc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bc0>
    5c04:	9021883a 	mov	r16,r18
    5c08:	a825883a 	mov	r18,r21
    5c0c:	b02b883a 	mov	r21,r22
    5c10:	882d883a 	mov	r22,r17
    5c14:	dc402917 	ldw	r17,164(sp)
    5c18:	d9002b17 	ldw	r4,172(sp)
    5c1c:	1d87883a 	add	r3,r3,r22
    5c20:	10800044 	addi	r2,r2,1
    5c24:	41000015 	stw	r4,0(r8)
    5c28:	45800115 	stw	r22,4(r8)
    5c2c:	d8c02015 	stw	r3,128(sp)
    5c30:	d8801f15 	stw	r2,124(sp)
    5c34:	010001c4 	movi	r4,7
    5c38:	2081ee16 	blt	r4,r2,63f4 <___vfprintf_internal_r+0x1154>
    5c3c:	42000204 	addi	r8,r8,8
    5c40:	9080400c 	andi	r2,r18,256
    5c44:	1001181e 	bne	r2,zero,60a8 <___vfprintf_internal_r+0xe08>
    5c48:	d9402e17 	ldw	r5,184(sp)
    5c4c:	d8801f17 	ldw	r2,124(sp)
    5c50:	44000015 	stw	r16,0(r8)
    5c54:	1947883a 	add	r3,r3,r5
    5c58:	10800044 	addi	r2,r2,1
    5c5c:	41400115 	stw	r5,4(r8)
    5c60:	d8c02015 	stw	r3,128(sp)
    5c64:	d8801f15 	stw	r2,124(sp)
    5c68:	010001c4 	movi	r4,7
    5c6c:	2081d316 	blt	r4,r2,63bc <___vfprintf_internal_r+0x111c>
    5c70:	42000204 	addi	r8,r8,8
    5c74:	9480010c 	andi	r18,r18,4
    5c78:	90003226 	beq	r18,zero,5d44 <___vfprintf_internal_r+0xaa4>
    5c7c:	d9403117 	ldw	r5,196(sp)
    5c80:	d8802a17 	ldw	r2,168(sp)
    5c84:	28a1c83a 	sub	r16,r5,r2
    5c88:	04002e0e 	bge	zero,r16,5d44 <___vfprintf_internal_r+0xaa4>
    5c8c:	04400404 	movi	r17,16
    5c90:	d8801f17 	ldw	r2,124(sp)
    5c94:	8c04a20e 	bge	r17,r16,6f20 <___vfprintf_internal_r+0x1c80>
    5c98:	014000b4 	movhi	r5,2
    5c9c:	296e4d84 	addi	r5,r5,-18122
    5ca0:	d9403515 	stw	r5,212(sp)
    5ca4:	048001c4 	movi	r18,7
    5ca8:	dcc02c17 	ldw	r19,176(sp)
    5cac:	00000306 	br	5cbc <___vfprintf_internal_r+0xa1c>
    5cb0:	843ffc04 	addi	r16,r16,-16
    5cb4:	42000204 	addi	r8,r8,8
    5cb8:	8c00130e 	bge	r17,r16,5d08 <___vfprintf_internal_r+0xa68>
    5cbc:	010000b4 	movhi	r4,2
    5cc0:	18c00404 	addi	r3,r3,16
    5cc4:	10800044 	addi	r2,r2,1
    5cc8:	212e4d84 	addi	r4,r4,-18122
    5ccc:	41000015 	stw	r4,0(r8)
    5cd0:	44400115 	stw	r17,4(r8)
    5cd4:	d8c02015 	stw	r3,128(sp)
    5cd8:	d8801f15 	stw	r2,124(sp)
    5cdc:	90bff40e 	bge	r18,r2,5cb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005cb0>
    5ce0:	d9801e04 	addi	r6,sp,120
    5ce4:	b80b883a 	mov	r5,r23
    5ce8:	9809883a 	mov	r4,r19
    5cec:	000bdb80 	call	bdb8 <__sprint_r>
    5cf0:	103e6d1e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    5cf4:	843ffc04 	addi	r16,r16,-16
    5cf8:	d8c02017 	ldw	r3,128(sp)
    5cfc:	d8801f17 	ldw	r2,124(sp)
    5d00:	da000404 	addi	r8,sp,16
    5d04:	8c3fed16 	blt	r17,r16,5cbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005cbc>
    5d08:	d9403517 	ldw	r5,212(sp)
    5d0c:	1c07883a 	add	r3,r3,r16
    5d10:	10800044 	addi	r2,r2,1
    5d14:	41400015 	stw	r5,0(r8)
    5d18:	44000115 	stw	r16,4(r8)
    5d1c:	d8c02015 	stw	r3,128(sp)
    5d20:	d8801f15 	stw	r2,124(sp)
    5d24:	010001c4 	movi	r4,7
    5d28:	2080060e 	bge	r4,r2,5d44 <___vfprintf_internal_r+0xaa4>
    5d2c:	d9002c17 	ldw	r4,176(sp)
    5d30:	d9801e04 	addi	r6,sp,120
    5d34:	b80b883a 	mov	r5,r23
    5d38:	000bdb80 	call	bdb8 <__sprint_r>
    5d3c:	103e5a1e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    5d40:	d8c02017 	ldw	r3,128(sp)
    5d44:	d8803117 	ldw	r2,196(sp)
    5d48:	d9002a17 	ldw	r4,168(sp)
    5d4c:	1100010e 	bge	r2,r4,5d54 <___vfprintf_internal_r+0xab4>
    5d50:	2005883a 	mov	r2,r4
    5d54:	d9402f17 	ldw	r5,188(sp)
    5d58:	288b883a 	add	r5,r5,r2
    5d5c:	d9402f15 	stw	r5,188(sp)
    5d60:	18019e1e 	bne	r3,zero,63dc <___vfprintf_internal_r+0x113c>
    5d64:	a8800007 	ldb	r2,0(r21)
    5d68:	d8001f15 	stw	zero,124(sp)
    5d6c:	da000404 	addi	r8,sp,16
    5d70:	103d851e 	bne	r2,zero,5388 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005388>
    5d74:	a821883a 	mov	r16,r21
    5d78:	003d9b06 	br	53e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70053e8>
    5d7c:	18c03fcc 	andi	r3,r3,255
    5d80:	1805c11e 	bne	r3,zero,7488 <___vfprintf_internal_r+0x21e8>
    5d84:	94800414 	ori	r18,r18,16
    5d88:	9080080c 	andi	r2,r18,32
    5d8c:	10020c26 	beq	r2,zero,65c0 <___vfprintf_internal_r+0x1320>
    5d90:	d8802d17 	ldw	r2,180(sp)
    5d94:	d9002917 	ldw	r4,164(sp)
    5d98:	d8002785 	stb	zero,158(sp)
    5d9c:	10c00204 	addi	r3,r2,8
    5da0:	14c00017 	ldw	r19,0(r2)
    5da4:	15800117 	ldw	r22,4(r2)
    5da8:	20040f16 	blt	r4,zero,6de8 <___vfprintf_internal_r+0x1b48>
    5dac:	013fdfc4 	movi	r4,-129
    5db0:	9d84b03a 	or	r2,r19,r22
    5db4:	d8c02d15 	stw	r3,180(sp)
    5db8:	9124703a 	and	r18,r18,r4
    5dbc:	0039883a 	mov	fp,zero
    5dc0:	103e891e 	bne	r2,zero,57e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057e8>
    5dc4:	d9002917 	ldw	r4,164(sp)
    5dc8:	2002c11e 	bne	r4,zero,68d0 <___vfprintf_internal_r+0x1630>
    5dcc:	d8002915 	stw	zero,164(sp)
    5dd0:	d8002e15 	stw	zero,184(sp)
    5dd4:	dc001e04 	addi	r16,sp,120
    5dd8:	003ef806 	br	59bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059bc>
    5ddc:	18c03fcc 	andi	r3,r3,255
    5de0:	18059d1e 	bne	r3,zero,7458 <___vfprintf_internal_r+0x21b8>
    5de4:	014000b4 	movhi	r5,2
    5de8:	296e3d04 	addi	r5,r5,-18188
    5dec:	d9403915 	stw	r5,228(sp)
    5df0:	9080080c 	andi	r2,r18,32
    5df4:	10005226 	beq	r2,zero,5f40 <___vfprintf_internal_r+0xca0>
    5df8:	d8802d17 	ldw	r2,180(sp)
    5dfc:	14c00017 	ldw	r19,0(r2)
    5e00:	15800117 	ldw	r22,4(r2)
    5e04:	10800204 	addi	r2,r2,8
    5e08:	d8802d15 	stw	r2,180(sp)
    5e0c:	9080004c 	andi	r2,r18,1
    5e10:	10019026 	beq	r2,zero,6454 <___vfprintf_internal_r+0x11b4>
    5e14:	9d84b03a 	or	r2,r19,r22
    5e18:	10036926 	beq	r2,zero,6bc0 <___vfprintf_internal_r+0x1920>
    5e1c:	d8c02917 	ldw	r3,164(sp)
    5e20:	00800c04 	movi	r2,48
    5e24:	d8802705 	stb	r2,156(sp)
    5e28:	dc402745 	stb	r17,157(sp)
    5e2c:	d8002785 	stb	zero,158(sp)
    5e30:	90800094 	ori	r2,r18,2
    5e34:	18045d16 	blt	r3,zero,6fac <___vfprintf_internal_r+0x1d0c>
    5e38:	00bfdfc4 	movi	r2,-129
    5e3c:	90a4703a 	and	r18,r18,r2
    5e40:	94800094 	ori	r18,r18,2
    5e44:	0039883a 	mov	fp,zero
    5e48:	d9003917 	ldw	r4,228(sp)
    5e4c:	dc001e04 	addi	r16,sp,120
    5e50:	988003cc 	andi	r2,r19,15
    5e54:	b006973a 	slli	r3,r22,28
    5e58:	2085883a 	add	r2,r4,r2
    5e5c:	9826d13a 	srli	r19,r19,4
    5e60:	10800003 	ldbu	r2,0(r2)
    5e64:	b02cd13a 	srli	r22,r22,4
    5e68:	843fffc4 	addi	r16,r16,-1
    5e6c:	1ce6b03a 	or	r19,r3,r19
    5e70:	80800005 	stb	r2,0(r16)
    5e74:	9d84b03a 	or	r2,r19,r22
    5e78:	103ff51e 	bne	r2,zero,5e50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e50>
    5e7c:	d8c02817 	ldw	r3,160(sp)
    5e80:	1c07c83a 	sub	r3,r3,r16
    5e84:	d8c02e15 	stw	r3,184(sp)
    5e88:	003ecc06 	br	59bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059bc>
    5e8c:	18c03fcc 	andi	r3,r3,255
    5e90:	183e9f26 	beq	r3,zero,5910 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005910>
    5e94:	d9c02785 	stb	r7,158(sp)
    5e98:	003e9d06 	br	5910 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005910>
    5e9c:	00c00044 	movi	r3,1
    5ea0:	01c00ac4 	movi	r7,43
    5ea4:	ac400007 	ldb	r17,0(r21)
    5ea8:	003d5e06 	br	5424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005424>
    5eac:	94800814 	ori	r18,r18,32
    5eb0:	ac400007 	ldb	r17,0(r21)
    5eb4:	003d5b06 	br	5424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005424>
    5eb8:	d8c02d17 	ldw	r3,180(sp)
    5ebc:	d8002785 	stb	zero,158(sp)
    5ec0:	1c000017 	ldw	r16,0(r3)
    5ec4:	1cc00104 	addi	r19,r3,4
    5ec8:	80041926 	beq	r16,zero,6f30 <___vfprintf_internal_r+0x1c90>
    5ecc:	d9002917 	ldw	r4,164(sp)
    5ed0:	2003d016 	blt	r4,zero,6e14 <___vfprintf_internal_r+0x1b74>
    5ed4:	200d883a 	mov	r6,r4
    5ed8:	000b883a 	mov	r5,zero
    5edc:	8009883a 	mov	r4,r16
    5ee0:	da003d15 	stw	r8,244(sp)
    5ee4:	000a5f40 	call	a5f4 <memchr>
    5ee8:	da003d17 	ldw	r8,244(sp)
    5eec:	10045426 	beq	r2,zero,7040 <___vfprintf_internal_r+0x1da0>
    5ef0:	1405c83a 	sub	r2,r2,r16
    5ef4:	d8802e15 	stw	r2,184(sp)
    5ef8:	1003cc16 	blt	r2,zero,6e2c <___vfprintf_internal_r+0x1b8c>
    5efc:	df002783 	ldbu	fp,158(sp)
    5f00:	d8802a15 	stw	r2,168(sp)
    5f04:	dcc02d15 	stw	r19,180(sp)
    5f08:	d8002915 	stw	zero,164(sp)
    5f0c:	d8003215 	stw	zero,200(sp)
    5f10:	003eb006 	br	59d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059d4>
    5f14:	18c03fcc 	andi	r3,r3,255
    5f18:	183f9b26 	beq	r3,zero,5d88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d88>
    5f1c:	d9c02785 	stb	r7,158(sp)
    5f20:	003f9906 	br	5d88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d88>
    5f24:	18c03fcc 	andi	r3,r3,255
    5f28:	1805551e 	bne	r3,zero,7480 <___vfprintf_internal_r+0x21e0>
    5f2c:	014000b4 	movhi	r5,2
    5f30:	296e4204 	addi	r5,r5,-18168
    5f34:	d9403915 	stw	r5,228(sp)
    5f38:	9080080c 	andi	r2,r18,32
    5f3c:	103fae1e 	bne	r2,zero,5df8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005df8>
    5f40:	9080040c 	andi	r2,r18,16
    5f44:	1002de26 	beq	r2,zero,6ac0 <___vfprintf_internal_r+0x1820>
    5f48:	d8c02d17 	ldw	r3,180(sp)
    5f4c:	002d883a 	mov	r22,zero
    5f50:	1cc00017 	ldw	r19,0(r3)
    5f54:	18c00104 	addi	r3,r3,4
    5f58:	d8c02d15 	stw	r3,180(sp)
    5f5c:	003fab06 	br	5e0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e0c>
    5f60:	38803fcc 	andi	r2,r7,255
    5f64:	1080201c 	xori	r2,r2,128
    5f68:	10bfe004 	addi	r2,r2,-128
    5f6c:	1002d21e 	bne	r2,zero,6ab8 <___vfprintf_internal_r+0x1818>
    5f70:	00c00044 	movi	r3,1
    5f74:	01c00804 	movi	r7,32
    5f78:	ac400007 	ldb	r17,0(r21)
    5f7c:	003d2906 	br	5424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005424>
    5f80:	94800054 	ori	r18,r18,1
    5f84:	ac400007 	ldb	r17,0(r21)
    5f88:	003d2606 	br	5424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005424>
    5f8c:	18c03fcc 	andi	r3,r3,255
    5f90:	183e0526 	beq	r3,zero,57a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057a8>
    5f94:	d9c02785 	stb	r7,158(sp)
    5f98:	003e0306 	br	57a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057a8>
    5f9c:	94801014 	ori	r18,r18,64
    5fa0:	ac400007 	ldb	r17,0(r21)
    5fa4:	003d1f06 	br	5424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005424>
    5fa8:	ac400007 	ldb	r17,0(r21)
    5fac:	8a438726 	beq	r17,r9,6dcc <___vfprintf_internal_r+0x1b2c>
    5fb0:	94800414 	ori	r18,r18,16
    5fb4:	003d1b06 	br	5424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005424>
    5fb8:	18c03fcc 	andi	r3,r3,255
    5fbc:	1805341e 	bne	r3,zero,7490 <___vfprintf_internal_r+0x21f0>
    5fc0:	9080080c 	andi	r2,r18,32
    5fc4:	1002cd26 	beq	r2,zero,6afc <___vfprintf_internal_r+0x185c>
    5fc8:	d9402d17 	ldw	r5,180(sp)
    5fcc:	d9002f17 	ldw	r4,188(sp)
    5fd0:	28800017 	ldw	r2,0(r5)
    5fd4:	2007d7fa 	srai	r3,r4,31
    5fd8:	29400104 	addi	r5,r5,4
    5fdc:	d9402d15 	stw	r5,180(sp)
    5fe0:	11000015 	stw	r4,0(r2)
    5fe4:	10c00115 	stw	r3,4(r2)
    5fe8:	003ce506 	br	5380 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005380>
    5fec:	d8c02d17 	ldw	r3,180(sp)
    5ff0:	d9002d17 	ldw	r4,180(sp)
    5ff4:	d8002785 	stb	zero,158(sp)
    5ff8:	18800017 	ldw	r2,0(r3)
    5ffc:	21000104 	addi	r4,r4,4
    6000:	00c00044 	movi	r3,1
    6004:	d8c02a15 	stw	r3,168(sp)
    6008:	d8801405 	stb	r2,80(sp)
    600c:	d9002d15 	stw	r4,180(sp)
    6010:	d8c02e15 	stw	r3,184(sp)
    6014:	d8002915 	stw	zero,164(sp)
    6018:	d8003215 	stw	zero,200(sp)
    601c:	dc001404 	addi	r16,sp,80
    6020:	0039883a 	mov	fp,zero
    6024:	003e7206 	br	59f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059f0>
    6028:	010000b4 	movhi	r4,2
    602c:	212e4204 	addi	r4,r4,-18168
    6030:	0039883a 	mov	fp,zero
    6034:	d9003915 	stw	r4,228(sp)
    6038:	04401e04 	movi	r17,120
    603c:	003f8206 	br	5e48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e48>
    6040:	18c03fcc 	andi	r3,r3,255
    6044:	1805061e 	bne	r3,zero,7460 <___vfprintf_internal_r+0x21c0>
    6048:	883d9126 	beq	r17,zero,5690 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005690>
    604c:	00c00044 	movi	r3,1
    6050:	d8c02a15 	stw	r3,168(sp)
    6054:	dc401405 	stb	r17,80(sp)
    6058:	d8002785 	stb	zero,158(sp)
    605c:	003fec06 	br	6010 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006010>
    6060:	014000b4 	movhi	r5,2
    6064:	296e4204 	addi	r5,r5,-18168
    6068:	d9403915 	stw	r5,228(sp)
    606c:	d8c02d15 	stw	r3,180(sp)
    6070:	1025883a 	mov	r18,r2
    6074:	04401e04 	movi	r17,120
    6078:	9d84b03a 	or	r2,r19,r22
    607c:	1000fc1e 	bne	r2,zero,6470 <___vfprintf_internal_r+0x11d0>
    6080:	0039883a 	mov	fp,zero
    6084:	00800084 	movi	r2,2
    6088:	10803fcc 	andi	r2,r2,255
    608c:	00c00044 	movi	r3,1
    6090:	10c20f26 	beq	r2,r3,68d0 <___vfprintf_internal_r+0x1630>
    6094:	00c00084 	movi	r3,2
    6098:	10fd6326 	beq	r2,r3,5628 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005628>
    609c:	003e2d06 	br	5954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005954>
    60a0:	d8c02017 	ldw	r3,128(sp)
    60a4:	003e9306 	br	5af4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af4>
    60a8:	00801944 	movi	r2,101
    60ac:	14407e0e 	bge	r2,r17,62a8 <___vfprintf_internal_r+0x1008>
    60b0:	d9003617 	ldw	r4,216(sp)
    60b4:	d9403817 	ldw	r5,224(sp)
    60b8:	000d883a 	mov	r6,zero
    60bc:	000f883a 	mov	r7,zero
    60c0:	d8c03c15 	stw	r3,240(sp)
    60c4:	da003d15 	stw	r8,244(sp)
    60c8:	0003c440 	call	3c44 <__eqdf2>
    60cc:	d8c03c17 	ldw	r3,240(sp)
    60d0:	da003d17 	ldw	r8,244(sp)
    60d4:	1000f71e 	bne	r2,zero,64b4 <___vfprintf_internal_r+0x1214>
    60d8:	d8801f17 	ldw	r2,124(sp)
    60dc:	010000b4 	movhi	r4,2
    60e0:	212e4904 	addi	r4,r4,-18140
    60e4:	18c00044 	addi	r3,r3,1
    60e8:	10800044 	addi	r2,r2,1
    60ec:	41000015 	stw	r4,0(r8)
    60f0:	01000044 	movi	r4,1
    60f4:	41000115 	stw	r4,4(r8)
    60f8:	d8c02015 	stw	r3,128(sp)
    60fc:	d8801f15 	stw	r2,124(sp)
    6100:	010001c4 	movi	r4,7
    6104:	2082b816 	blt	r4,r2,6be8 <___vfprintf_internal_r+0x1948>
    6108:	42000204 	addi	r8,r8,8
    610c:	d8802617 	ldw	r2,152(sp)
    6110:	d9403317 	ldw	r5,204(sp)
    6114:	11400216 	blt	r2,r5,6120 <___vfprintf_internal_r+0xe80>
    6118:	9080004c 	andi	r2,r18,1
    611c:	103ed526 	beq	r2,zero,5c74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c74>
    6120:	d8803717 	ldw	r2,220(sp)
    6124:	d9003417 	ldw	r4,208(sp)
    6128:	d9403717 	ldw	r5,220(sp)
    612c:	1887883a 	add	r3,r3,r2
    6130:	d8801f17 	ldw	r2,124(sp)
    6134:	41000015 	stw	r4,0(r8)
    6138:	41400115 	stw	r5,4(r8)
    613c:	10800044 	addi	r2,r2,1
    6140:	d8c02015 	stw	r3,128(sp)
    6144:	d8801f15 	stw	r2,124(sp)
    6148:	010001c4 	movi	r4,7
    614c:	20832916 	blt	r4,r2,6df4 <___vfprintf_internal_r+0x1b54>
    6150:	42000204 	addi	r8,r8,8
    6154:	d8803317 	ldw	r2,204(sp)
    6158:	143fffc4 	addi	r16,r2,-1
    615c:	043ec50e 	bge	zero,r16,5c74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c74>
    6160:	04400404 	movi	r17,16
    6164:	d8801f17 	ldw	r2,124(sp)
    6168:	8c00880e 	bge	r17,r16,638c <___vfprintf_internal_r+0x10ec>
    616c:	014000b4 	movhi	r5,2
    6170:	296e4984 	addi	r5,r5,-18138
    6174:	d9402b15 	stw	r5,172(sp)
    6178:	058001c4 	movi	r22,7
    617c:	dcc02c17 	ldw	r19,176(sp)
    6180:	00000306 	br	6190 <___vfprintf_internal_r+0xef0>
    6184:	42000204 	addi	r8,r8,8
    6188:	843ffc04 	addi	r16,r16,-16
    618c:	8c00820e 	bge	r17,r16,6398 <___vfprintf_internal_r+0x10f8>
    6190:	18c00404 	addi	r3,r3,16
    6194:	10800044 	addi	r2,r2,1
    6198:	45000015 	stw	r20,0(r8)
    619c:	44400115 	stw	r17,4(r8)
    61a0:	d8c02015 	stw	r3,128(sp)
    61a4:	d8801f15 	stw	r2,124(sp)
    61a8:	b0bff60e 	bge	r22,r2,6184 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006184>
    61ac:	d9801e04 	addi	r6,sp,120
    61b0:	b80b883a 	mov	r5,r23
    61b4:	9809883a 	mov	r4,r19
    61b8:	000bdb80 	call	bdb8 <__sprint_r>
    61bc:	103d3a1e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    61c0:	d8c02017 	ldw	r3,128(sp)
    61c4:	d8801f17 	ldw	r2,124(sp)
    61c8:	da000404 	addi	r8,sp,16
    61cc:	003fee06 	br	6188 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006188>
    61d0:	d9403117 	ldw	r5,196(sp)
    61d4:	d8802a17 	ldw	r2,168(sp)
    61d8:	28adc83a 	sub	r22,r5,r2
    61dc:	05be630e 	bge	zero,r22,5b6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b6c>
    61e0:	07000404 	movi	fp,16
    61e4:	d8801f17 	ldw	r2,124(sp)
    61e8:	e5838f0e 	bge	fp,r22,7028 <___vfprintf_internal_r+0x1d88>
    61ec:	014000b4 	movhi	r5,2
    61f0:	296e4984 	addi	r5,r5,-18138
    61f4:	dc403015 	stw	r17,192(sp)
    61f8:	d9402b15 	stw	r5,172(sp)
    61fc:	b023883a 	mov	r17,r22
    6200:	04c001c4 	movi	r19,7
    6204:	a82d883a 	mov	r22,r21
    6208:	902b883a 	mov	r21,r18
    620c:	8025883a 	mov	r18,r16
    6210:	dc002c17 	ldw	r16,176(sp)
    6214:	00000306 	br	6224 <___vfprintf_internal_r+0xf84>
    6218:	8c7ffc04 	addi	r17,r17,-16
    621c:	42000204 	addi	r8,r8,8
    6220:	e440110e 	bge	fp,r17,6268 <___vfprintf_internal_r+0xfc8>
    6224:	18c00404 	addi	r3,r3,16
    6228:	10800044 	addi	r2,r2,1
    622c:	45000015 	stw	r20,0(r8)
    6230:	47000115 	stw	fp,4(r8)
    6234:	d8c02015 	stw	r3,128(sp)
    6238:	d8801f15 	stw	r2,124(sp)
    623c:	98bff60e 	bge	r19,r2,6218 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006218>
    6240:	d9801e04 	addi	r6,sp,120
    6244:	b80b883a 	mov	r5,r23
    6248:	8009883a 	mov	r4,r16
    624c:	000bdb80 	call	bdb8 <__sprint_r>
    6250:	103d151e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    6254:	8c7ffc04 	addi	r17,r17,-16
    6258:	d8c02017 	ldw	r3,128(sp)
    625c:	d8801f17 	ldw	r2,124(sp)
    6260:	da000404 	addi	r8,sp,16
    6264:	e47fef16 	blt	fp,r17,6224 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006224>
    6268:	9021883a 	mov	r16,r18
    626c:	a825883a 	mov	r18,r21
    6270:	b02b883a 	mov	r21,r22
    6274:	882d883a 	mov	r22,r17
    6278:	dc403017 	ldw	r17,192(sp)
    627c:	d9002b17 	ldw	r4,172(sp)
    6280:	1d87883a 	add	r3,r3,r22
    6284:	10800044 	addi	r2,r2,1
    6288:	41000015 	stw	r4,0(r8)
    628c:	45800115 	stw	r22,4(r8)
    6290:	d8c02015 	stw	r3,128(sp)
    6294:	d8801f15 	stw	r2,124(sp)
    6298:	010001c4 	movi	r4,7
    629c:	20818e16 	blt	r4,r2,68d8 <___vfprintf_internal_r+0x1638>
    62a0:	42000204 	addi	r8,r8,8
    62a4:	003e3106 	br	5b6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b6c>
    62a8:	d9403317 	ldw	r5,204(sp)
    62ac:	00800044 	movi	r2,1
    62b0:	18c00044 	addi	r3,r3,1
    62b4:	1141530e 	bge	r2,r5,6804 <___vfprintf_internal_r+0x1564>
    62b8:	dc401f17 	ldw	r17,124(sp)
    62bc:	00800044 	movi	r2,1
    62c0:	40800115 	stw	r2,4(r8)
    62c4:	8c400044 	addi	r17,r17,1
    62c8:	44000015 	stw	r16,0(r8)
    62cc:	d8c02015 	stw	r3,128(sp)
    62d0:	dc401f15 	stw	r17,124(sp)
    62d4:	008001c4 	movi	r2,7
    62d8:	14416b16 	blt	r2,r17,6888 <___vfprintf_internal_r+0x15e8>
    62dc:	42000204 	addi	r8,r8,8
    62e0:	d8803717 	ldw	r2,220(sp)
    62e4:	d9003417 	ldw	r4,208(sp)
    62e8:	8c400044 	addi	r17,r17,1
    62ec:	10c7883a 	add	r3,r2,r3
    62f0:	40800115 	stw	r2,4(r8)
    62f4:	41000015 	stw	r4,0(r8)
    62f8:	d8c02015 	stw	r3,128(sp)
    62fc:	dc401f15 	stw	r17,124(sp)
    6300:	008001c4 	movi	r2,7
    6304:	14416916 	blt	r2,r17,68ac <___vfprintf_internal_r+0x160c>
    6308:	45800204 	addi	r22,r8,8
    630c:	d9003617 	ldw	r4,216(sp)
    6310:	d9403817 	ldw	r5,224(sp)
    6314:	000d883a 	mov	r6,zero
    6318:	000f883a 	mov	r7,zero
    631c:	d8c03c15 	stw	r3,240(sp)
    6320:	0003c440 	call	3c44 <__eqdf2>
    6324:	d8c03c17 	ldw	r3,240(sp)
    6328:	1000bc26 	beq	r2,zero,661c <___vfprintf_internal_r+0x137c>
    632c:	d9403317 	ldw	r5,204(sp)
    6330:	84000044 	addi	r16,r16,1
    6334:	8c400044 	addi	r17,r17,1
    6338:	28bfffc4 	addi	r2,r5,-1
    633c:	1887883a 	add	r3,r3,r2
    6340:	b0800115 	stw	r2,4(r22)
    6344:	b4000015 	stw	r16,0(r22)
    6348:	d8c02015 	stw	r3,128(sp)
    634c:	dc401f15 	stw	r17,124(sp)
    6350:	008001c4 	movi	r2,7
    6354:	14414316 	blt	r2,r17,6864 <___vfprintf_internal_r+0x15c4>
    6358:	b5800204 	addi	r22,r22,8
    635c:	d9003a17 	ldw	r4,232(sp)
    6360:	df0022c4 	addi	fp,sp,139
    6364:	8c400044 	addi	r17,r17,1
    6368:	20c7883a 	add	r3,r4,r3
    636c:	b7000015 	stw	fp,0(r22)
    6370:	b1000115 	stw	r4,4(r22)
    6374:	d8c02015 	stw	r3,128(sp)
    6378:	dc401f15 	stw	r17,124(sp)
    637c:	008001c4 	movi	r2,7
    6380:	14400e16 	blt	r2,r17,63bc <___vfprintf_internal_r+0x111c>
    6384:	b2000204 	addi	r8,r22,8
    6388:	003e3a06 	br	5c74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c74>
    638c:	010000b4 	movhi	r4,2
    6390:	212e4984 	addi	r4,r4,-18138
    6394:	d9002b15 	stw	r4,172(sp)
    6398:	d9002b17 	ldw	r4,172(sp)
    639c:	1c07883a 	add	r3,r3,r16
    63a0:	44000115 	stw	r16,4(r8)
    63a4:	41000015 	stw	r4,0(r8)
    63a8:	10800044 	addi	r2,r2,1
    63ac:	d8c02015 	stw	r3,128(sp)
    63b0:	d8801f15 	stw	r2,124(sp)
    63b4:	010001c4 	movi	r4,7
    63b8:	20be2d0e 	bge	r4,r2,5c70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c70>
    63bc:	d9002c17 	ldw	r4,176(sp)
    63c0:	d9801e04 	addi	r6,sp,120
    63c4:	b80b883a 	mov	r5,r23
    63c8:	000bdb80 	call	bdb8 <__sprint_r>
    63cc:	103cb61e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    63d0:	d8c02017 	ldw	r3,128(sp)
    63d4:	da000404 	addi	r8,sp,16
    63d8:	003e2606 	br	5c74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c74>
    63dc:	d9002c17 	ldw	r4,176(sp)
    63e0:	d9801e04 	addi	r6,sp,120
    63e4:	b80b883a 	mov	r5,r23
    63e8:	000bdb80 	call	bdb8 <__sprint_r>
    63ec:	103e5d26 	beq	r2,zero,5d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d64>
    63f0:	003cad06 	br	56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    63f4:	d9002c17 	ldw	r4,176(sp)
    63f8:	d9801e04 	addi	r6,sp,120
    63fc:	b80b883a 	mov	r5,r23
    6400:	000bdb80 	call	bdb8 <__sprint_r>
    6404:	103ca81e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    6408:	d8c02017 	ldw	r3,128(sp)
    640c:	da000404 	addi	r8,sp,16
    6410:	003e0b06 	br	5c40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c40>
    6414:	d9002c17 	ldw	r4,176(sp)
    6418:	d9801e04 	addi	r6,sp,120
    641c:	b80b883a 	mov	r5,r23
    6420:	000bdb80 	call	bdb8 <__sprint_r>
    6424:	103ca01e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    6428:	d8c02017 	ldw	r3,128(sp)
    642c:	da000404 	addi	r8,sp,16
    6430:	003dbd06 	br	5b28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b28>
    6434:	d9002c17 	ldw	r4,176(sp)
    6438:	d9801e04 	addi	r6,sp,120
    643c:	b80b883a 	mov	r5,r23
    6440:	000bdb80 	call	bdb8 <__sprint_r>
    6444:	103c981e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    6448:	d8c02017 	ldw	r3,128(sp)
    644c:	da000404 	addi	r8,sp,16
    6450:	003dc306 	br	5b60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b60>
    6454:	d8802917 	ldw	r2,164(sp)
    6458:	d8002785 	stb	zero,158(sp)
    645c:	103f0616 	blt	r2,zero,6078 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006078>
    6460:	00ffdfc4 	movi	r3,-129
    6464:	9d84b03a 	or	r2,r19,r22
    6468:	90e4703a 	and	r18,r18,r3
    646c:	103c6b26 	beq	r2,zero,561c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700561c>
    6470:	0039883a 	mov	fp,zero
    6474:	003e7406 	br	5e48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e48>
    6478:	9080040c 	andi	r2,r18,16
    647c:	1001b326 	beq	r2,zero,6b4c <___vfprintf_internal_r+0x18ac>
    6480:	d9002d17 	ldw	r4,180(sp)
    6484:	d9402917 	ldw	r5,164(sp)
    6488:	d8002785 	stb	zero,158(sp)
    648c:	20800104 	addi	r2,r4,4
    6490:	24c00017 	ldw	r19,0(r4)
    6494:	002d883a 	mov	r22,zero
    6498:	2801b516 	blt	r5,zero,6b70 <___vfprintf_internal_r+0x18d0>
    649c:	00ffdfc4 	movi	r3,-129
    64a0:	d8802d15 	stw	r2,180(sp)
    64a4:	90e4703a 	and	r18,r18,r3
    64a8:	983d2726 	beq	r19,zero,5948 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005948>
    64ac:	0039883a 	mov	fp,zero
    64b0:	003d2a06 	br	595c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700595c>
    64b4:	dc402617 	ldw	r17,152(sp)
    64b8:	0441d30e 	bge	zero,r17,6c08 <___vfprintf_internal_r+0x1968>
    64bc:	dc403217 	ldw	r17,200(sp)
    64c0:	d8803317 	ldw	r2,204(sp)
    64c4:	1440010e 	bge	r2,r17,64cc <___vfprintf_internal_r+0x122c>
    64c8:	1023883a 	mov	r17,r2
    64cc:	04400a0e 	bge	zero,r17,64f8 <___vfprintf_internal_r+0x1258>
    64d0:	d8801f17 	ldw	r2,124(sp)
    64d4:	1c47883a 	add	r3,r3,r17
    64d8:	44000015 	stw	r16,0(r8)
    64dc:	10800044 	addi	r2,r2,1
    64e0:	44400115 	stw	r17,4(r8)
    64e4:	d8c02015 	stw	r3,128(sp)
    64e8:	d8801f15 	stw	r2,124(sp)
    64ec:	010001c4 	movi	r4,7
    64f0:	20826516 	blt	r4,r2,6e88 <___vfprintf_internal_r+0x1be8>
    64f4:	42000204 	addi	r8,r8,8
    64f8:	88026116 	blt	r17,zero,6e80 <___vfprintf_internal_r+0x1be0>
    64fc:	d9003217 	ldw	r4,200(sp)
    6500:	2463c83a 	sub	r17,r4,r17
    6504:	04407b0e 	bge	zero,r17,66f4 <___vfprintf_internal_r+0x1454>
    6508:	05800404 	movi	r22,16
    650c:	d8801f17 	ldw	r2,124(sp)
    6510:	b4419d0e 	bge	r22,r17,6b88 <___vfprintf_internal_r+0x18e8>
    6514:	010000b4 	movhi	r4,2
    6518:	212e4984 	addi	r4,r4,-18138
    651c:	d9002b15 	stw	r4,172(sp)
    6520:	070001c4 	movi	fp,7
    6524:	dcc02c17 	ldw	r19,176(sp)
    6528:	00000306 	br	6538 <___vfprintf_internal_r+0x1298>
    652c:	42000204 	addi	r8,r8,8
    6530:	8c7ffc04 	addi	r17,r17,-16
    6534:	b441970e 	bge	r22,r17,6b94 <___vfprintf_internal_r+0x18f4>
    6538:	18c00404 	addi	r3,r3,16
    653c:	10800044 	addi	r2,r2,1
    6540:	45000015 	stw	r20,0(r8)
    6544:	45800115 	stw	r22,4(r8)
    6548:	d8c02015 	stw	r3,128(sp)
    654c:	d8801f15 	stw	r2,124(sp)
    6550:	e0bff60e 	bge	fp,r2,652c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700652c>
    6554:	d9801e04 	addi	r6,sp,120
    6558:	b80b883a 	mov	r5,r23
    655c:	9809883a 	mov	r4,r19
    6560:	000bdb80 	call	bdb8 <__sprint_r>
    6564:	103c501e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    6568:	d8c02017 	ldw	r3,128(sp)
    656c:	d8801f17 	ldw	r2,124(sp)
    6570:	da000404 	addi	r8,sp,16
    6574:	003fee06 	br	6530 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006530>
    6578:	d9002c17 	ldw	r4,176(sp)
    657c:	d9801e04 	addi	r6,sp,120
    6580:	b80b883a 	mov	r5,r23
    6584:	000bdb80 	call	bdb8 <__sprint_r>
    6588:	103c471e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    658c:	d8c02017 	ldw	r3,128(sp)
    6590:	df002787 	ldb	fp,158(sp)
    6594:	da000404 	addi	r8,sp,16
    6598:	003d5606 	br	5af4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af4>
    659c:	9080040c 	andi	r2,r18,16
    65a0:	10016126 	beq	r2,zero,6b28 <___vfprintf_internal_r+0x1888>
    65a4:	d8802d17 	ldw	r2,180(sp)
    65a8:	14c00017 	ldw	r19,0(r2)
    65ac:	10800104 	addi	r2,r2,4
    65b0:	d8802d15 	stw	r2,180(sp)
    65b4:	982dd7fa 	srai	r22,r19,31
    65b8:	b005883a 	mov	r2,r22
    65bc:	003c8206 	br	57c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057c8>
    65c0:	9080040c 	andi	r2,r18,16
    65c4:	10003526 	beq	r2,zero,669c <___vfprintf_internal_r+0x13fc>
    65c8:	d9402d17 	ldw	r5,180(sp)
    65cc:	d8c02917 	ldw	r3,164(sp)
    65d0:	d8002785 	stb	zero,158(sp)
    65d4:	28800104 	addi	r2,r5,4
    65d8:	2cc00017 	ldw	r19,0(r5)
    65dc:	002d883a 	mov	r22,zero
    65e0:	18003716 	blt	r3,zero,66c0 <___vfprintf_internal_r+0x1420>
    65e4:	00ffdfc4 	movi	r3,-129
    65e8:	d8802d15 	stw	r2,180(sp)
    65ec:	90e4703a 	and	r18,r18,r3
    65f0:	0039883a 	mov	fp,zero
    65f4:	983df326 	beq	r19,zero,5dc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005dc4>
    65f8:	00800244 	movi	r2,9
    65fc:	14fc7b36 	bltu	r2,r19,57ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057ec>
    6600:	d8c02817 	ldw	r3,160(sp)
    6604:	dc001dc4 	addi	r16,sp,119
    6608:	9cc00c04 	addi	r19,r19,48
    660c:	1c07c83a 	sub	r3,r3,r16
    6610:	dcc01dc5 	stb	r19,119(sp)
    6614:	d8c02e15 	stw	r3,184(sp)
    6618:	003ce806 	br	59bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059bc>
    661c:	d8803317 	ldw	r2,204(sp)
    6620:	143fffc4 	addi	r16,r2,-1
    6624:	043f4d0e 	bge	zero,r16,635c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700635c>
    6628:	07000404 	movi	fp,16
    662c:	e400810e 	bge	fp,r16,6834 <___vfprintf_internal_r+0x1594>
    6630:	014000b4 	movhi	r5,2
    6634:	296e4984 	addi	r5,r5,-18138
    6638:	d9402b15 	stw	r5,172(sp)
    663c:	01c001c4 	movi	r7,7
    6640:	dcc02c17 	ldw	r19,176(sp)
    6644:	00000306 	br	6654 <___vfprintf_internal_r+0x13b4>
    6648:	b5800204 	addi	r22,r22,8
    664c:	843ffc04 	addi	r16,r16,-16
    6650:	e4007b0e 	bge	fp,r16,6840 <___vfprintf_internal_r+0x15a0>
    6654:	18c00404 	addi	r3,r3,16
    6658:	8c400044 	addi	r17,r17,1
    665c:	b5000015 	stw	r20,0(r22)
    6660:	b7000115 	stw	fp,4(r22)
    6664:	d8c02015 	stw	r3,128(sp)
    6668:	dc401f15 	stw	r17,124(sp)
    666c:	3c7ff60e 	bge	r7,r17,6648 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006648>
    6670:	d9801e04 	addi	r6,sp,120
    6674:	b80b883a 	mov	r5,r23
    6678:	9809883a 	mov	r4,r19
    667c:	d9c03c15 	stw	r7,240(sp)
    6680:	000bdb80 	call	bdb8 <__sprint_r>
    6684:	d9c03c17 	ldw	r7,240(sp)
    6688:	103c071e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    668c:	d8c02017 	ldw	r3,128(sp)
    6690:	dc401f17 	ldw	r17,124(sp)
    6694:	dd800404 	addi	r22,sp,16
    6698:	003fec06 	br	664c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700664c>
    669c:	9080100c 	andi	r2,r18,64
    66a0:	d8002785 	stb	zero,158(sp)
    66a4:	10010e26 	beq	r2,zero,6ae0 <___vfprintf_internal_r+0x1840>
    66a8:	d9002d17 	ldw	r4,180(sp)
    66ac:	d9402917 	ldw	r5,164(sp)
    66b0:	002d883a 	mov	r22,zero
    66b4:	20800104 	addi	r2,r4,4
    66b8:	24c0000b 	ldhu	r19,0(r4)
    66bc:	283fc90e 	bge	r5,zero,65e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70065e4>
    66c0:	d8802d15 	stw	r2,180(sp)
    66c4:	0039883a 	mov	fp,zero
    66c8:	9d84b03a 	or	r2,r19,r22
    66cc:	103c461e 	bne	r2,zero,57e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057e8>
    66d0:	00800044 	movi	r2,1
    66d4:	003e6c06 	br	6088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006088>
    66d8:	d9002c17 	ldw	r4,176(sp)
    66dc:	d9801e04 	addi	r6,sp,120
    66e0:	b80b883a 	mov	r5,r23
    66e4:	000bdb80 	call	bdb8 <__sprint_r>
    66e8:	103bef1e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    66ec:	d8c02017 	ldw	r3,128(sp)
    66f0:	da000404 	addi	r8,sp,16
    66f4:	d9003217 	ldw	r4,200(sp)
    66f8:	d8802617 	ldw	r2,152(sp)
    66fc:	d9403317 	ldw	r5,204(sp)
    6700:	8123883a 	add	r17,r16,r4
    6704:	11400216 	blt	r2,r5,6710 <___vfprintf_internal_r+0x1470>
    6708:	9100004c 	andi	r4,r18,1
    670c:	20000d26 	beq	r4,zero,6744 <___vfprintf_internal_r+0x14a4>
    6710:	d9003717 	ldw	r4,220(sp)
    6714:	d9403417 	ldw	r5,208(sp)
    6718:	1907883a 	add	r3,r3,r4
    671c:	d9001f17 	ldw	r4,124(sp)
    6720:	41400015 	stw	r5,0(r8)
    6724:	d9403717 	ldw	r5,220(sp)
    6728:	21000044 	addi	r4,r4,1
    672c:	d8c02015 	stw	r3,128(sp)
    6730:	41400115 	stw	r5,4(r8)
    6734:	d9001f15 	stw	r4,124(sp)
    6738:	014001c4 	movi	r5,7
    673c:	2901e816 	blt	r5,r4,6ee0 <___vfprintf_internal_r+0x1c40>
    6740:	42000204 	addi	r8,r8,8
    6744:	d9003317 	ldw	r4,204(sp)
    6748:	8121883a 	add	r16,r16,r4
    674c:	2085c83a 	sub	r2,r4,r2
    6750:	8461c83a 	sub	r16,r16,r17
    6754:	1400010e 	bge	r2,r16,675c <___vfprintf_internal_r+0x14bc>
    6758:	1021883a 	mov	r16,r2
    675c:	04000a0e 	bge	zero,r16,6788 <___vfprintf_internal_r+0x14e8>
    6760:	d9001f17 	ldw	r4,124(sp)
    6764:	1c07883a 	add	r3,r3,r16
    6768:	44400015 	stw	r17,0(r8)
    676c:	21000044 	addi	r4,r4,1
    6770:	44000115 	stw	r16,4(r8)
    6774:	d8c02015 	stw	r3,128(sp)
    6778:	d9001f15 	stw	r4,124(sp)
    677c:	014001c4 	movi	r5,7
    6780:	2901fb16 	blt	r5,r4,6f70 <___vfprintf_internal_r+0x1cd0>
    6784:	42000204 	addi	r8,r8,8
    6788:	8001f716 	blt	r16,zero,6f68 <___vfprintf_internal_r+0x1cc8>
    678c:	1421c83a 	sub	r16,r2,r16
    6790:	043d380e 	bge	zero,r16,5c74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c74>
    6794:	04400404 	movi	r17,16
    6798:	d8801f17 	ldw	r2,124(sp)
    679c:	8c3efb0e 	bge	r17,r16,638c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700638c>
    67a0:	014000b4 	movhi	r5,2
    67a4:	296e4984 	addi	r5,r5,-18138
    67a8:	d9402b15 	stw	r5,172(sp)
    67ac:	058001c4 	movi	r22,7
    67b0:	dcc02c17 	ldw	r19,176(sp)
    67b4:	00000306 	br	67c4 <___vfprintf_internal_r+0x1524>
    67b8:	42000204 	addi	r8,r8,8
    67bc:	843ffc04 	addi	r16,r16,-16
    67c0:	8c3ef50e 	bge	r17,r16,6398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006398>
    67c4:	18c00404 	addi	r3,r3,16
    67c8:	10800044 	addi	r2,r2,1
    67cc:	45000015 	stw	r20,0(r8)
    67d0:	44400115 	stw	r17,4(r8)
    67d4:	d8c02015 	stw	r3,128(sp)
    67d8:	d8801f15 	stw	r2,124(sp)
    67dc:	b0bff60e 	bge	r22,r2,67b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70067b8>
    67e0:	d9801e04 	addi	r6,sp,120
    67e4:	b80b883a 	mov	r5,r23
    67e8:	9809883a 	mov	r4,r19
    67ec:	000bdb80 	call	bdb8 <__sprint_r>
    67f0:	103bad1e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    67f4:	d8c02017 	ldw	r3,128(sp)
    67f8:	d8801f17 	ldw	r2,124(sp)
    67fc:	da000404 	addi	r8,sp,16
    6800:	003fee06 	br	67bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70067bc>
    6804:	9088703a 	and	r4,r18,r2
    6808:	203eab1e 	bne	r4,zero,62b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70062b8>
    680c:	dc401f17 	ldw	r17,124(sp)
    6810:	40800115 	stw	r2,4(r8)
    6814:	44000015 	stw	r16,0(r8)
    6818:	8c400044 	addi	r17,r17,1
    681c:	d8c02015 	stw	r3,128(sp)
    6820:	dc401f15 	stw	r17,124(sp)
    6824:	008001c4 	movi	r2,7
    6828:	14400e16 	blt	r2,r17,6864 <___vfprintf_internal_r+0x15c4>
    682c:	45800204 	addi	r22,r8,8
    6830:	003eca06 	br	635c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700635c>
    6834:	010000b4 	movhi	r4,2
    6838:	212e4984 	addi	r4,r4,-18138
    683c:	d9002b15 	stw	r4,172(sp)
    6840:	d8802b17 	ldw	r2,172(sp)
    6844:	1c07883a 	add	r3,r3,r16
    6848:	8c400044 	addi	r17,r17,1
    684c:	b0800015 	stw	r2,0(r22)
    6850:	b4000115 	stw	r16,4(r22)
    6854:	d8c02015 	stw	r3,128(sp)
    6858:	dc401f15 	stw	r17,124(sp)
    685c:	008001c4 	movi	r2,7
    6860:	147ebd0e 	bge	r2,r17,6358 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006358>
    6864:	d9002c17 	ldw	r4,176(sp)
    6868:	d9801e04 	addi	r6,sp,120
    686c:	b80b883a 	mov	r5,r23
    6870:	000bdb80 	call	bdb8 <__sprint_r>
    6874:	103b8c1e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    6878:	d8c02017 	ldw	r3,128(sp)
    687c:	dc401f17 	ldw	r17,124(sp)
    6880:	dd800404 	addi	r22,sp,16
    6884:	003eb506 	br	635c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700635c>
    6888:	d9002c17 	ldw	r4,176(sp)
    688c:	d9801e04 	addi	r6,sp,120
    6890:	b80b883a 	mov	r5,r23
    6894:	000bdb80 	call	bdb8 <__sprint_r>
    6898:	103b831e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    689c:	d8c02017 	ldw	r3,128(sp)
    68a0:	dc401f17 	ldw	r17,124(sp)
    68a4:	da000404 	addi	r8,sp,16
    68a8:	003e8d06 	br	62e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70062e0>
    68ac:	d9002c17 	ldw	r4,176(sp)
    68b0:	d9801e04 	addi	r6,sp,120
    68b4:	b80b883a 	mov	r5,r23
    68b8:	000bdb80 	call	bdb8 <__sprint_r>
    68bc:	103b7a1e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    68c0:	d8c02017 	ldw	r3,128(sp)
    68c4:	dc401f17 	ldw	r17,124(sp)
    68c8:	dd800404 	addi	r22,sp,16
    68cc:	003e8f06 	br	630c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700630c>
    68d0:	0027883a 	mov	r19,zero
    68d4:	003f4a06 	br	6600 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006600>
    68d8:	d9002c17 	ldw	r4,176(sp)
    68dc:	d9801e04 	addi	r6,sp,120
    68e0:	b80b883a 	mov	r5,r23
    68e4:	000bdb80 	call	bdb8 <__sprint_r>
    68e8:	103b6f1e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    68ec:	d8c02017 	ldw	r3,128(sp)
    68f0:	da000404 	addi	r8,sp,16
    68f4:	003c9d06 	br	5b6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b6c>
    68f8:	04e7c83a 	sub	r19,zero,r19
    68fc:	9804c03a 	cmpne	r2,r19,zero
    6900:	05adc83a 	sub	r22,zero,r22
    6904:	b0adc83a 	sub	r22,r22,r2
    6908:	d8802917 	ldw	r2,164(sp)
    690c:	07000b44 	movi	fp,45
    6910:	df002785 	stb	fp,158(sp)
    6914:	10017b16 	blt	r2,zero,6f04 <___vfprintf_internal_r+0x1c64>
    6918:	00bfdfc4 	movi	r2,-129
    691c:	90a4703a 	and	r18,r18,r2
    6920:	003bb106 	br	57e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057e8>
    6924:	d9003617 	ldw	r4,216(sp)
    6928:	d9403817 	ldw	r5,224(sp)
    692c:	da003d15 	stw	r8,244(sp)
    6930:	000b9440 	call	b944 <__fpclassifyd>
    6934:	da003d17 	ldw	r8,244(sp)
    6938:	1000f026 	beq	r2,zero,6cfc <___vfprintf_internal_r+0x1a5c>
    693c:	d9002917 	ldw	r4,164(sp)
    6940:	05bff7c4 	movi	r22,-33
    6944:	00bfffc4 	movi	r2,-1
    6948:	8dac703a 	and	r22,r17,r22
    694c:	20820026 	beq	r4,r2,7150 <___vfprintf_internal_r+0x1eb0>
    6950:	008011c4 	movi	r2,71
    6954:	b081f726 	beq	r22,r2,7134 <___vfprintf_internal_r+0x1e94>
    6958:	d9003817 	ldw	r4,224(sp)
    695c:	90c04014 	ori	r3,r18,256
    6960:	d8c02b15 	stw	r3,172(sp)
    6964:	20021516 	blt	r4,zero,71bc <___vfprintf_internal_r+0x1f1c>
    6968:	dcc03817 	ldw	r19,224(sp)
    696c:	d8002a05 	stb	zero,168(sp)
    6970:	00801984 	movi	r2,102
    6974:	8881f926 	beq	r17,r2,715c <___vfprintf_internal_r+0x1ebc>
    6978:	00801184 	movi	r2,70
    697c:	88821c26 	beq	r17,r2,71f0 <___vfprintf_internal_r+0x1f50>
    6980:	00801144 	movi	r2,69
    6984:	b081ef26 	beq	r22,r2,7144 <___vfprintf_internal_r+0x1ea4>
    6988:	d8c02917 	ldw	r3,164(sp)
    698c:	d8802104 	addi	r2,sp,132
    6990:	d8800315 	stw	r2,12(sp)
    6994:	d9403617 	ldw	r5,216(sp)
    6998:	d8802504 	addi	r2,sp,148
    699c:	d9002c17 	ldw	r4,176(sp)
    69a0:	d8800215 	stw	r2,8(sp)
    69a4:	d8802604 	addi	r2,sp,152
    69a8:	d8c00015 	stw	r3,0(sp)
    69ac:	d8800115 	stw	r2,4(sp)
    69b0:	01c00084 	movi	r7,2
    69b4:	980d883a 	mov	r6,r19
    69b8:	d8c03c15 	stw	r3,240(sp)
    69bc:	da003d15 	stw	r8,244(sp)
    69c0:	00078c40 	call	78c4 <_dtoa_r>
    69c4:	1021883a 	mov	r16,r2
    69c8:	008019c4 	movi	r2,103
    69cc:	d8c03c17 	ldw	r3,240(sp)
    69d0:	da003d17 	ldw	r8,244(sp)
    69d4:	88817126 	beq	r17,r2,6f9c <___vfprintf_internal_r+0x1cfc>
    69d8:	008011c4 	movi	r2,71
    69dc:	88829226 	beq	r17,r2,7428 <___vfprintf_internal_r+0x2188>
    69e0:	80f9883a 	add	fp,r16,r3
    69e4:	d9003617 	ldw	r4,216(sp)
    69e8:	000d883a 	mov	r6,zero
    69ec:	000f883a 	mov	r7,zero
    69f0:	980b883a 	mov	r5,r19
    69f4:	da003d15 	stw	r8,244(sp)
    69f8:	0003c440 	call	3c44 <__eqdf2>
    69fc:	da003d17 	ldw	r8,244(sp)
    6a00:	10018d26 	beq	r2,zero,7038 <___vfprintf_internal_r+0x1d98>
    6a04:	d8802117 	ldw	r2,132(sp)
    6a08:	1700062e 	bgeu	r2,fp,6a24 <___vfprintf_internal_r+0x1784>
    6a0c:	01000c04 	movi	r4,48
    6a10:	10c00044 	addi	r3,r2,1
    6a14:	d8c02115 	stw	r3,132(sp)
    6a18:	11000005 	stb	r4,0(r2)
    6a1c:	d8802117 	ldw	r2,132(sp)
    6a20:	173ffb36 	bltu	r2,fp,6a10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a10>
    6a24:	1405c83a 	sub	r2,r2,r16
    6a28:	d8803315 	stw	r2,204(sp)
    6a2c:	008011c4 	movi	r2,71
    6a30:	b0817626 	beq	r22,r2,700c <___vfprintf_internal_r+0x1d6c>
    6a34:	00801944 	movi	r2,101
    6a38:	1442810e 	bge	r2,r17,7440 <___vfprintf_internal_r+0x21a0>
    6a3c:	d8c02617 	ldw	r3,152(sp)
    6a40:	00801984 	movi	r2,102
    6a44:	d8c03215 	stw	r3,200(sp)
    6a48:	8881fe26 	beq	r17,r2,7244 <___vfprintf_internal_r+0x1fa4>
    6a4c:	d8c03217 	ldw	r3,200(sp)
    6a50:	d9003317 	ldw	r4,204(sp)
    6a54:	1901dd16 	blt	r3,r4,71cc <___vfprintf_internal_r+0x1f2c>
    6a58:	9480004c 	andi	r18,r18,1
    6a5c:	90022b1e 	bne	r18,zero,730c <___vfprintf_internal_r+0x206c>
    6a60:	1805883a 	mov	r2,r3
    6a64:	18028016 	blt	r3,zero,7468 <___vfprintf_internal_r+0x21c8>
    6a68:	d8c03217 	ldw	r3,200(sp)
    6a6c:	044019c4 	movi	r17,103
    6a70:	d8c02e15 	stw	r3,184(sp)
    6a74:	df002a07 	ldb	fp,168(sp)
    6a78:	e001531e 	bne	fp,zero,6fc8 <___vfprintf_internal_r+0x1d28>
    6a7c:	df002783 	ldbu	fp,158(sp)
    6a80:	d8802a15 	stw	r2,168(sp)
    6a84:	dc802b17 	ldw	r18,172(sp)
    6a88:	d8002915 	stw	zero,164(sp)
    6a8c:	003bd106 	br	59d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059d4>
    6a90:	d8802d17 	ldw	r2,180(sp)
    6a94:	d8c02d17 	ldw	r3,180(sp)
    6a98:	d9002d17 	ldw	r4,180(sp)
    6a9c:	10800017 	ldw	r2,0(r2)
    6aa0:	18c00117 	ldw	r3,4(r3)
    6aa4:	21000204 	addi	r4,r4,8
    6aa8:	d8803615 	stw	r2,216(sp)
    6aac:	d8c03815 	stw	r3,224(sp)
    6ab0:	d9002d15 	stw	r4,180(sp)
    6ab4:	003b7506 	br	588c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700588c>
    6ab8:	ac400007 	ldb	r17,0(r21)
    6abc:	003a5906 	br	5424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005424>
    6ac0:	9080100c 	andi	r2,r18,64
    6ac4:	1000a826 	beq	r2,zero,6d68 <___vfprintf_internal_r+0x1ac8>
    6ac8:	d9002d17 	ldw	r4,180(sp)
    6acc:	002d883a 	mov	r22,zero
    6ad0:	24c0000b 	ldhu	r19,0(r4)
    6ad4:	21000104 	addi	r4,r4,4
    6ad8:	d9002d15 	stw	r4,180(sp)
    6adc:	003ccb06 	br	5e0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e0c>
    6ae0:	d8c02d17 	ldw	r3,180(sp)
    6ae4:	d9002917 	ldw	r4,164(sp)
    6ae8:	002d883a 	mov	r22,zero
    6aec:	18800104 	addi	r2,r3,4
    6af0:	1cc00017 	ldw	r19,0(r3)
    6af4:	203ebb0e 	bge	r4,zero,65e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70065e4>
    6af8:	003ef106 	br	66c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70066c0>
    6afc:	9080040c 	andi	r2,r18,16
    6b00:	1000921e 	bne	r2,zero,6d4c <___vfprintf_internal_r+0x1aac>
    6b04:	9480100c 	andi	r18,r18,64
    6b08:	90013926 	beq	r18,zero,6ff0 <___vfprintf_internal_r+0x1d50>
    6b0c:	d9002d17 	ldw	r4,180(sp)
    6b10:	d9402f17 	ldw	r5,188(sp)
    6b14:	20800017 	ldw	r2,0(r4)
    6b18:	21000104 	addi	r4,r4,4
    6b1c:	d9002d15 	stw	r4,180(sp)
    6b20:	1140000d 	sth	r5,0(r2)
    6b24:	003a1606 	br	5380 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005380>
    6b28:	9080100c 	andi	r2,r18,64
    6b2c:	10008026 	beq	r2,zero,6d30 <___vfprintf_internal_r+0x1a90>
    6b30:	d8c02d17 	ldw	r3,180(sp)
    6b34:	1cc0000f 	ldh	r19,0(r3)
    6b38:	18c00104 	addi	r3,r3,4
    6b3c:	d8c02d15 	stw	r3,180(sp)
    6b40:	982dd7fa 	srai	r22,r19,31
    6b44:	b005883a 	mov	r2,r22
    6b48:	003b1f06 	br	57c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057c8>
    6b4c:	9080100c 	andi	r2,r18,64
    6b50:	d8002785 	stb	zero,158(sp)
    6b54:	10008a1e 	bne	r2,zero,6d80 <___vfprintf_internal_r+0x1ae0>
    6b58:	d9402d17 	ldw	r5,180(sp)
    6b5c:	d8c02917 	ldw	r3,164(sp)
    6b60:	002d883a 	mov	r22,zero
    6b64:	28800104 	addi	r2,r5,4
    6b68:	2cc00017 	ldw	r19,0(r5)
    6b6c:	183e4b0e 	bge	r3,zero,649c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700649c>
    6b70:	9d86b03a 	or	r3,r19,r22
    6b74:	d8802d15 	stw	r2,180(sp)
    6b78:	183e4c1e 	bne	r3,zero,64ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70064ac>
    6b7c:	0039883a 	mov	fp,zero
    6b80:	0005883a 	mov	r2,zero
    6b84:	003d4006 	br	6088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006088>
    6b88:	014000b4 	movhi	r5,2
    6b8c:	296e4984 	addi	r5,r5,-18138
    6b90:	d9402b15 	stw	r5,172(sp)
    6b94:	d9402b17 	ldw	r5,172(sp)
    6b98:	1c47883a 	add	r3,r3,r17
    6b9c:	10800044 	addi	r2,r2,1
    6ba0:	41400015 	stw	r5,0(r8)
    6ba4:	44400115 	stw	r17,4(r8)
    6ba8:	d8c02015 	stw	r3,128(sp)
    6bac:	d8801f15 	stw	r2,124(sp)
    6bb0:	010001c4 	movi	r4,7
    6bb4:	20bec816 	blt	r4,r2,66d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70066d8>
    6bb8:	42000204 	addi	r8,r8,8
    6bbc:	003ecd06 	br	66f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70066f4>
    6bc0:	d9002917 	ldw	r4,164(sp)
    6bc4:	d8002785 	stb	zero,158(sp)
    6bc8:	203d2d16 	blt	r4,zero,6080 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006080>
    6bcc:	00bfdfc4 	movi	r2,-129
    6bd0:	90a4703a 	and	r18,r18,r2
    6bd4:	003a9106 	br	561c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700561c>
    6bd8:	010000b4 	movhi	r4,2
    6bdc:	212e4984 	addi	r4,r4,-18138
    6be0:	d9002b15 	stw	r4,172(sp)
    6be4:	003c0c06 	br	5c18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c18>
    6be8:	d9002c17 	ldw	r4,176(sp)
    6bec:	d9801e04 	addi	r6,sp,120
    6bf0:	b80b883a 	mov	r5,r23
    6bf4:	000bdb80 	call	bdb8 <__sprint_r>
    6bf8:	103aab1e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    6bfc:	d8c02017 	ldw	r3,128(sp)
    6c00:	da000404 	addi	r8,sp,16
    6c04:	003d4106 	br	610c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700610c>
    6c08:	d8801f17 	ldw	r2,124(sp)
    6c0c:	014000b4 	movhi	r5,2
    6c10:	01000044 	movi	r4,1
    6c14:	18c00044 	addi	r3,r3,1
    6c18:	10800044 	addi	r2,r2,1
    6c1c:	296e4904 	addi	r5,r5,-18140
    6c20:	41000115 	stw	r4,4(r8)
    6c24:	41400015 	stw	r5,0(r8)
    6c28:	d8c02015 	stw	r3,128(sp)
    6c2c:	d8801f15 	stw	r2,124(sp)
    6c30:	010001c4 	movi	r4,7
    6c34:	20805c16 	blt	r4,r2,6da8 <___vfprintf_internal_r+0x1b08>
    6c38:	42000204 	addi	r8,r8,8
    6c3c:	8800041e 	bne	r17,zero,6c50 <___vfprintf_internal_r+0x19b0>
    6c40:	d8803317 	ldw	r2,204(sp)
    6c44:	1000021e 	bne	r2,zero,6c50 <___vfprintf_internal_r+0x19b0>
    6c48:	9080004c 	andi	r2,r18,1
    6c4c:	103c0926 	beq	r2,zero,5c74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c74>
    6c50:	d9003717 	ldw	r4,220(sp)
    6c54:	d8801f17 	ldw	r2,124(sp)
    6c58:	d9403417 	ldw	r5,208(sp)
    6c5c:	20c7883a 	add	r3,r4,r3
    6c60:	10800044 	addi	r2,r2,1
    6c64:	41000115 	stw	r4,4(r8)
    6c68:	41400015 	stw	r5,0(r8)
    6c6c:	d8c02015 	stw	r3,128(sp)
    6c70:	d8801f15 	stw	r2,124(sp)
    6c74:	010001c4 	movi	r4,7
    6c78:	20812116 	blt	r4,r2,7100 <___vfprintf_internal_r+0x1e60>
    6c7c:	42000204 	addi	r8,r8,8
    6c80:	0463c83a 	sub	r17,zero,r17
    6c84:	0440730e 	bge	zero,r17,6e54 <___vfprintf_internal_r+0x1bb4>
    6c88:	05800404 	movi	r22,16
    6c8c:	b440860e 	bge	r22,r17,6ea8 <___vfprintf_internal_r+0x1c08>
    6c90:	014000b4 	movhi	r5,2
    6c94:	296e4984 	addi	r5,r5,-18138
    6c98:	d9402b15 	stw	r5,172(sp)
    6c9c:	070001c4 	movi	fp,7
    6ca0:	dcc02c17 	ldw	r19,176(sp)
    6ca4:	00000306 	br	6cb4 <___vfprintf_internal_r+0x1a14>
    6ca8:	42000204 	addi	r8,r8,8
    6cac:	8c7ffc04 	addi	r17,r17,-16
    6cb0:	b440800e 	bge	r22,r17,6eb4 <___vfprintf_internal_r+0x1c14>
    6cb4:	18c00404 	addi	r3,r3,16
    6cb8:	10800044 	addi	r2,r2,1
    6cbc:	45000015 	stw	r20,0(r8)
    6cc0:	45800115 	stw	r22,4(r8)
    6cc4:	d8c02015 	stw	r3,128(sp)
    6cc8:	d8801f15 	stw	r2,124(sp)
    6ccc:	e0bff60e 	bge	fp,r2,6ca8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ca8>
    6cd0:	d9801e04 	addi	r6,sp,120
    6cd4:	b80b883a 	mov	r5,r23
    6cd8:	9809883a 	mov	r4,r19
    6cdc:	000bdb80 	call	bdb8 <__sprint_r>
    6ce0:	103a711e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    6ce4:	d8c02017 	ldw	r3,128(sp)
    6ce8:	d8801f17 	ldw	r2,124(sp)
    6cec:	da000404 	addi	r8,sp,16
    6cf0:	003fee06 	br	6cac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006cac>
    6cf4:	00bfffc4 	movi	r2,-1
    6cf8:	003a6f06 	br	56b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056b8>
    6cfc:	008011c4 	movi	r2,71
    6d00:	1440b816 	blt	r2,r17,6fe4 <___vfprintf_internal_r+0x1d44>
    6d04:	040000b4 	movhi	r16,2
    6d08:	842e3b04 	addi	r16,r16,-18196
    6d0c:	00c000c4 	movi	r3,3
    6d10:	00bfdfc4 	movi	r2,-129
    6d14:	d8c02a15 	stw	r3,168(sp)
    6d18:	90a4703a 	and	r18,r18,r2
    6d1c:	df002783 	ldbu	fp,158(sp)
    6d20:	d8c02e15 	stw	r3,184(sp)
    6d24:	d8002915 	stw	zero,164(sp)
    6d28:	d8003215 	stw	zero,200(sp)
    6d2c:	003b2906 	br	59d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059d4>
    6d30:	d9002d17 	ldw	r4,180(sp)
    6d34:	24c00017 	ldw	r19,0(r4)
    6d38:	21000104 	addi	r4,r4,4
    6d3c:	d9002d15 	stw	r4,180(sp)
    6d40:	982dd7fa 	srai	r22,r19,31
    6d44:	b005883a 	mov	r2,r22
    6d48:	003a9f06 	br	57c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057c8>
    6d4c:	d9402d17 	ldw	r5,180(sp)
    6d50:	d8c02f17 	ldw	r3,188(sp)
    6d54:	28800017 	ldw	r2,0(r5)
    6d58:	29400104 	addi	r5,r5,4
    6d5c:	d9402d15 	stw	r5,180(sp)
    6d60:	10c00015 	stw	r3,0(r2)
    6d64:	00398606 	br	5380 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005380>
    6d68:	d9402d17 	ldw	r5,180(sp)
    6d6c:	002d883a 	mov	r22,zero
    6d70:	2cc00017 	ldw	r19,0(r5)
    6d74:	29400104 	addi	r5,r5,4
    6d78:	d9402d15 	stw	r5,180(sp)
    6d7c:	003c2306 	br	5e0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e0c>
    6d80:	d8c02d17 	ldw	r3,180(sp)
    6d84:	d9002917 	ldw	r4,164(sp)
    6d88:	002d883a 	mov	r22,zero
    6d8c:	18800104 	addi	r2,r3,4
    6d90:	1cc0000b 	ldhu	r19,0(r3)
    6d94:	203dc10e 	bge	r4,zero,649c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700649c>
    6d98:	003f7506 	br	6b70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b70>
    6d9c:	040000b4 	movhi	r16,2
    6da0:	842e3904 	addi	r16,r16,-18204
    6da4:	003acc06 	br	58d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70058d8>
    6da8:	d9002c17 	ldw	r4,176(sp)
    6dac:	d9801e04 	addi	r6,sp,120
    6db0:	b80b883a 	mov	r5,r23
    6db4:	000bdb80 	call	bdb8 <__sprint_r>
    6db8:	103a3b1e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    6dbc:	dc402617 	ldw	r17,152(sp)
    6dc0:	d8c02017 	ldw	r3,128(sp)
    6dc4:	da000404 	addi	r8,sp,16
    6dc8:	003f9c06 	br	6c3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c3c>
    6dcc:	ac400043 	ldbu	r17,1(r21)
    6dd0:	94800814 	ori	r18,r18,32
    6dd4:	ad400044 	addi	r21,r21,1
    6dd8:	8c403fcc 	andi	r17,r17,255
    6ddc:	8c40201c 	xori	r17,r17,128
    6de0:	8c7fe004 	addi	r17,r17,-128
    6de4:	00398f06 	br	5424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005424>
    6de8:	d8c02d15 	stw	r3,180(sp)
    6dec:	0039883a 	mov	fp,zero
    6df0:	003e3506 	br	66c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70066c8>
    6df4:	d9002c17 	ldw	r4,176(sp)
    6df8:	d9801e04 	addi	r6,sp,120
    6dfc:	b80b883a 	mov	r5,r23
    6e00:	000bdb80 	call	bdb8 <__sprint_r>
    6e04:	103a281e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    6e08:	d8c02017 	ldw	r3,128(sp)
    6e0c:	da000404 	addi	r8,sp,16
    6e10:	003cd006 	br	6154 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006154>
    6e14:	8009883a 	mov	r4,r16
    6e18:	da003d15 	stw	r8,244(sp)
    6e1c:	000bc240 	call	bc24 <strlen>
    6e20:	d8802e15 	stw	r2,184(sp)
    6e24:	da003d17 	ldw	r8,244(sp)
    6e28:	103c340e 	bge	r2,zero,5efc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005efc>
    6e2c:	0005883a 	mov	r2,zero
    6e30:	003c3206 	br	5efc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005efc>
    6e34:	d9002c17 	ldw	r4,176(sp)
    6e38:	d9801e04 	addi	r6,sp,120
    6e3c:	b80b883a 	mov	r5,r23
    6e40:	000bdb80 	call	bdb8 <__sprint_r>
    6e44:	103a181e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    6e48:	d8c02017 	ldw	r3,128(sp)
    6e4c:	d8801f17 	ldw	r2,124(sp)
    6e50:	da000404 	addi	r8,sp,16
    6e54:	d9403317 	ldw	r5,204(sp)
    6e58:	10800044 	addi	r2,r2,1
    6e5c:	44000015 	stw	r16,0(r8)
    6e60:	28c7883a 	add	r3,r5,r3
    6e64:	003b7d06 	br	5c5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c5c>
    6e68:	010000b4 	movhi	r4,2
    6e6c:	212e4d84 	addi	r4,r4,-18122
    6e70:	d9003515 	stw	r4,212(sp)
    6e74:	003b1406 	br	5ac8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ac8>
    6e78:	013fffc4 	movi	r4,-1
    6e7c:	003a3506 	br	5754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005754>
    6e80:	0023883a 	mov	r17,zero
    6e84:	003d9d06 	br	64fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70064fc>
    6e88:	d9002c17 	ldw	r4,176(sp)
    6e8c:	d9801e04 	addi	r6,sp,120
    6e90:	b80b883a 	mov	r5,r23
    6e94:	000bdb80 	call	bdb8 <__sprint_r>
    6e98:	103a031e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    6e9c:	d8c02017 	ldw	r3,128(sp)
    6ea0:	da000404 	addi	r8,sp,16
    6ea4:	003d9406 	br	64f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70064f8>
    6ea8:	010000b4 	movhi	r4,2
    6eac:	212e4984 	addi	r4,r4,-18138
    6eb0:	d9002b15 	stw	r4,172(sp)
    6eb4:	d9002b17 	ldw	r4,172(sp)
    6eb8:	1c47883a 	add	r3,r3,r17
    6ebc:	10800044 	addi	r2,r2,1
    6ec0:	41000015 	stw	r4,0(r8)
    6ec4:	44400115 	stw	r17,4(r8)
    6ec8:	d8c02015 	stw	r3,128(sp)
    6ecc:	d8801f15 	stw	r2,124(sp)
    6ed0:	010001c4 	movi	r4,7
    6ed4:	20bfd716 	blt	r4,r2,6e34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e34>
    6ed8:	42000204 	addi	r8,r8,8
    6edc:	003fdd06 	br	6e54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e54>
    6ee0:	d9002c17 	ldw	r4,176(sp)
    6ee4:	d9801e04 	addi	r6,sp,120
    6ee8:	b80b883a 	mov	r5,r23
    6eec:	000bdb80 	call	bdb8 <__sprint_r>
    6ef0:	1039ed1e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    6ef4:	d8802617 	ldw	r2,152(sp)
    6ef8:	d8c02017 	ldw	r3,128(sp)
    6efc:	da000404 	addi	r8,sp,16
    6f00:	003e1006 	br	6744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006744>
    6f04:	00800044 	movi	r2,1
    6f08:	10803fcc 	andi	r2,r2,255
    6f0c:	00c00044 	movi	r3,1
    6f10:	10fa3526 	beq	r2,r3,57e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057e8>
    6f14:	00c00084 	movi	r3,2
    6f18:	10fbcb26 	beq	r2,r3,5e48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e48>
    6f1c:	003a8f06 	br	595c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700595c>
    6f20:	010000b4 	movhi	r4,2
    6f24:	212e4d84 	addi	r4,r4,-18122
    6f28:	d9003515 	stw	r4,212(sp)
    6f2c:	003b7606 	br	5d08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d08>
    6f30:	d8802917 	ldw	r2,164(sp)
    6f34:	00c00184 	movi	r3,6
    6f38:	1880012e 	bgeu	r3,r2,6f40 <___vfprintf_internal_r+0x1ca0>
    6f3c:	1805883a 	mov	r2,r3
    6f40:	d8802e15 	stw	r2,184(sp)
    6f44:	1000ef16 	blt	r2,zero,7304 <___vfprintf_internal_r+0x2064>
    6f48:	040000b4 	movhi	r16,2
    6f4c:	d8802a15 	stw	r2,168(sp)
    6f50:	dcc02d15 	stw	r19,180(sp)
    6f54:	d8002915 	stw	zero,164(sp)
    6f58:	d8003215 	stw	zero,200(sp)
    6f5c:	842e4704 	addi	r16,r16,-18148
    6f60:	0039883a 	mov	fp,zero
    6f64:	003aa206 	br	59f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059f0>
    6f68:	0021883a 	mov	r16,zero
    6f6c:	003e0706 	br	678c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700678c>
    6f70:	d9002c17 	ldw	r4,176(sp)
    6f74:	d9801e04 	addi	r6,sp,120
    6f78:	b80b883a 	mov	r5,r23
    6f7c:	000bdb80 	call	bdb8 <__sprint_r>
    6f80:	1039c91e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    6f84:	d8802617 	ldw	r2,152(sp)
    6f88:	d9403317 	ldw	r5,204(sp)
    6f8c:	d8c02017 	ldw	r3,128(sp)
    6f90:	da000404 	addi	r8,sp,16
    6f94:	2885c83a 	sub	r2,r5,r2
    6f98:	003dfb06 	br	6788 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006788>
    6f9c:	9080004c 	andi	r2,r18,1
    6fa0:	103e8f1e 	bne	r2,zero,69e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70069e0>
    6fa4:	d8802117 	ldw	r2,132(sp)
    6fa8:	003e9e06 	br	6a24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a24>
    6fac:	1025883a 	mov	r18,r2
    6fb0:	0039883a 	mov	fp,zero
    6fb4:	00800084 	movi	r2,2
    6fb8:	003fd306 	br	6f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f08>
    6fbc:	07000b44 	movi	fp,45
    6fc0:	df002785 	stb	fp,158(sp)
    6fc4:	003a4006 	br	58c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70058c8>
    6fc8:	00c00b44 	movi	r3,45
    6fcc:	d8c02785 	stb	r3,158(sp)
    6fd0:	d8802a15 	stw	r2,168(sp)
    6fd4:	dc802b17 	ldw	r18,172(sp)
    6fd8:	d8002915 	stw	zero,164(sp)
    6fdc:	07000b44 	movi	fp,45
    6fe0:	003a8006 	br	59e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059e4>
    6fe4:	040000b4 	movhi	r16,2
    6fe8:	842e3c04 	addi	r16,r16,-18192
    6fec:	003f4706 	br	6d0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d0c>
    6ff0:	d8c02d17 	ldw	r3,180(sp)
    6ff4:	d9002f17 	ldw	r4,188(sp)
    6ff8:	18800017 	ldw	r2,0(r3)
    6ffc:	18c00104 	addi	r3,r3,4
    7000:	d8c02d15 	stw	r3,180(sp)
    7004:	11000015 	stw	r4,0(r2)
    7008:	0038dd06 	br	5380 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005380>
    700c:	dd802617 	ldw	r22,152(sp)
    7010:	00bfff44 	movi	r2,-3
    7014:	b0801c16 	blt	r22,r2,7088 <___vfprintf_internal_r+0x1de8>
    7018:	d9402917 	ldw	r5,164(sp)
    701c:	2d801a16 	blt	r5,r22,7088 <___vfprintf_internal_r+0x1de8>
    7020:	dd803215 	stw	r22,200(sp)
    7024:	003e8906 	br	6a4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a4c>
    7028:	010000b4 	movhi	r4,2
    702c:	212e4984 	addi	r4,r4,-18138
    7030:	d9002b15 	stw	r4,172(sp)
    7034:	003c9106 	br	627c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700627c>
    7038:	e005883a 	mov	r2,fp
    703c:	003e7906 	br	6a24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a24>
    7040:	d9402917 	ldw	r5,164(sp)
    7044:	df002783 	ldbu	fp,158(sp)
    7048:	dcc02d15 	stw	r19,180(sp)
    704c:	d9402a15 	stw	r5,168(sp)
    7050:	d9402e15 	stw	r5,184(sp)
    7054:	d8002915 	stw	zero,164(sp)
    7058:	d8003215 	stw	zero,200(sp)
    705c:	003a5d06 	br	59d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059d4>
    7060:	9080004c 	andi	r2,r18,1
    7064:	0039883a 	mov	fp,zero
    7068:	10000426 	beq	r2,zero,707c <___vfprintf_internal_r+0x1ddc>
    706c:	00800c04 	movi	r2,48
    7070:	dc001dc4 	addi	r16,sp,119
    7074:	d8801dc5 	stb	r2,119(sp)
    7078:	003b8006 	br	5e7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e7c>
    707c:	d8002e15 	stw	zero,184(sp)
    7080:	dc001e04 	addi	r16,sp,120
    7084:	003a4d06 	br	59bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059bc>
    7088:	8c7fff84 	addi	r17,r17,-2
    708c:	b5bfffc4 	addi	r22,r22,-1
    7090:	dd802615 	stw	r22,152(sp)
    7094:	dc4022c5 	stb	r17,139(sp)
    7098:	b000bf16 	blt	r22,zero,7398 <___vfprintf_internal_r+0x20f8>
    709c:	00800ac4 	movi	r2,43
    70a0:	d8802305 	stb	r2,140(sp)
    70a4:	00800244 	movi	r2,9
    70a8:	15807016 	blt	r2,r22,726c <___vfprintf_internal_r+0x1fcc>
    70ac:	00800c04 	movi	r2,48
    70b0:	b5800c04 	addi	r22,r22,48
    70b4:	d8802345 	stb	r2,141(sp)
    70b8:	dd802385 	stb	r22,142(sp)
    70bc:	d88023c4 	addi	r2,sp,143
    70c0:	df0022c4 	addi	fp,sp,139
    70c4:	d8c03317 	ldw	r3,204(sp)
    70c8:	1739c83a 	sub	fp,r2,fp
    70cc:	d9003317 	ldw	r4,204(sp)
    70d0:	e0c7883a 	add	r3,fp,r3
    70d4:	df003a15 	stw	fp,232(sp)
    70d8:	d8c02e15 	stw	r3,184(sp)
    70dc:	00800044 	movi	r2,1
    70e0:	1100b30e 	bge	r2,r4,73b0 <___vfprintf_internal_r+0x2110>
    70e4:	d8c02e17 	ldw	r3,184(sp)
    70e8:	18c00044 	addi	r3,r3,1
    70ec:	d8c02e15 	stw	r3,184(sp)
    70f0:	1805883a 	mov	r2,r3
    70f4:	1800ac16 	blt	r3,zero,73a8 <___vfprintf_internal_r+0x2108>
    70f8:	d8003215 	stw	zero,200(sp)
    70fc:	003e5d06 	br	6a74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a74>
    7100:	d9002c17 	ldw	r4,176(sp)
    7104:	d9801e04 	addi	r6,sp,120
    7108:	b80b883a 	mov	r5,r23
    710c:	000bdb80 	call	bdb8 <__sprint_r>
    7110:	1039651e 	bne	r2,zero,56a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056a8>
    7114:	dc402617 	ldw	r17,152(sp)
    7118:	d8c02017 	ldw	r3,128(sp)
    711c:	d8801f17 	ldw	r2,124(sp)
    7120:	da000404 	addi	r8,sp,16
    7124:	003ed606 	br	6c80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c80>
    7128:	582b883a 	mov	r21,r11
    712c:	d8002915 	stw	zero,164(sp)
    7130:	0038bd06 	br	5428 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005428>
    7134:	d8802917 	ldw	r2,164(sp)
    7138:	103e071e 	bne	r2,zero,6958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006958>
    713c:	dc002915 	stw	r16,164(sp)
    7140:	003e0506 	br	6958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006958>
    7144:	d9002917 	ldw	r4,164(sp)
    7148:	20c00044 	addi	r3,r4,1
    714c:	003e0f06 	br	698c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700698c>
    7150:	01400184 	movi	r5,6
    7154:	d9402915 	stw	r5,164(sp)
    7158:	003dff06 	br	6958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006958>
    715c:	d8802104 	addi	r2,sp,132
    7160:	d8800315 	stw	r2,12(sp)
    7164:	d8802504 	addi	r2,sp,148
    7168:	d8800215 	stw	r2,8(sp)
    716c:	d8802604 	addi	r2,sp,152
    7170:	d8800115 	stw	r2,4(sp)
    7174:	d8802917 	ldw	r2,164(sp)
    7178:	d9403617 	ldw	r5,216(sp)
    717c:	d9002c17 	ldw	r4,176(sp)
    7180:	d8800015 	stw	r2,0(sp)
    7184:	01c000c4 	movi	r7,3
    7188:	980d883a 	mov	r6,r19
    718c:	da003d15 	stw	r8,244(sp)
    7190:	00078c40 	call	78c4 <_dtoa_r>
    7194:	d8c02917 	ldw	r3,164(sp)
    7198:	da003d17 	ldw	r8,244(sp)
    719c:	1021883a 	mov	r16,r2
    71a0:	10f9883a 	add	fp,r2,r3
    71a4:	81000007 	ldb	r4,0(r16)
    71a8:	00800c04 	movi	r2,48
    71ac:	20805e26 	beq	r4,r2,7328 <___vfprintf_internal_r+0x2088>
    71b0:	d8c02617 	ldw	r3,152(sp)
    71b4:	e0f9883a 	add	fp,fp,r3
    71b8:	003e0a06 	br	69e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70069e4>
    71bc:	00c00b44 	movi	r3,45
    71c0:	24e0003c 	xorhi	r19,r4,32768
    71c4:	d8c02a05 	stb	r3,168(sp)
    71c8:	003de906 	br	6970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006970>
    71cc:	d8c03217 	ldw	r3,200(sp)
    71d0:	00c07a0e 	bge	zero,r3,73bc <___vfprintf_internal_r+0x211c>
    71d4:	00800044 	movi	r2,1
    71d8:	d9003317 	ldw	r4,204(sp)
    71dc:	1105883a 	add	r2,r2,r4
    71e0:	d8802e15 	stw	r2,184(sp)
    71e4:	10004e16 	blt	r2,zero,7320 <___vfprintf_internal_r+0x2080>
    71e8:	044019c4 	movi	r17,103
    71ec:	003e2106 	br	6a74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a74>
    71f0:	d9002917 	ldw	r4,164(sp)
    71f4:	d8802104 	addi	r2,sp,132
    71f8:	d8800315 	stw	r2,12(sp)
    71fc:	d9000015 	stw	r4,0(sp)
    7200:	d8802504 	addi	r2,sp,148
    7204:	d9403617 	ldw	r5,216(sp)
    7208:	d9002c17 	ldw	r4,176(sp)
    720c:	d8800215 	stw	r2,8(sp)
    7210:	d8802604 	addi	r2,sp,152
    7214:	d8800115 	stw	r2,4(sp)
    7218:	01c000c4 	movi	r7,3
    721c:	980d883a 	mov	r6,r19
    7220:	da003d15 	stw	r8,244(sp)
    7224:	00078c40 	call	78c4 <_dtoa_r>
    7228:	d8c02917 	ldw	r3,164(sp)
    722c:	da003d17 	ldw	r8,244(sp)
    7230:	1021883a 	mov	r16,r2
    7234:	00801184 	movi	r2,70
    7238:	80f9883a 	add	fp,r16,r3
    723c:	88bfd926 	beq	r17,r2,71a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70071a4>
    7240:	003de806 	br	69e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70069e4>
    7244:	d9002917 	ldw	r4,164(sp)
    7248:	00c04d0e 	bge	zero,r3,7380 <___vfprintf_internal_r+0x20e0>
    724c:	2000441e 	bne	r4,zero,7360 <___vfprintf_internal_r+0x20c0>
    7250:	9480004c 	andi	r18,r18,1
    7254:	9000421e 	bne	r18,zero,7360 <___vfprintf_internal_r+0x20c0>
    7258:	1805883a 	mov	r2,r3
    725c:	18007016 	blt	r3,zero,7420 <___vfprintf_internal_r+0x2180>
    7260:	d8c03217 	ldw	r3,200(sp)
    7264:	d8c02e15 	stw	r3,184(sp)
    7268:	003e0206 	br	6a74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a74>
    726c:	df0022c4 	addi	fp,sp,139
    7270:	dc002915 	stw	r16,164(sp)
    7274:	4027883a 	mov	r19,r8
    7278:	e021883a 	mov	r16,fp
    727c:	b009883a 	mov	r4,r22
    7280:	01400284 	movi	r5,10
    7284:	00027ec0 	call	27ec <__modsi3>
    7288:	10800c04 	addi	r2,r2,48
    728c:	843fffc4 	addi	r16,r16,-1
    7290:	b009883a 	mov	r4,r22
    7294:	01400284 	movi	r5,10
    7298:	80800005 	stb	r2,0(r16)
    729c:	00027680 	call	2768 <__divsi3>
    72a0:	102d883a 	mov	r22,r2
    72a4:	00800244 	movi	r2,9
    72a8:	15bff416 	blt	r2,r22,727c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700727c>
    72ac:	9811883a 	mov	r8,r19
    72b0:	b0800c04 	addi	r2,r22,48
    72b4:	8027883a 	mov	r19,r16
    72b8:	997fffc4 	addi	r5,r19,-1
    72bc:	98bfffc5 	stb	r2,-1(r19)
    72c0:	dc002917 	ldw	r16,164(sp)
    72c4:	2f006a2e 	bgeu	r5,fp,7470 <___vfprintf_internal_r+0x21d0>
    72c8:	d9c02384 	addi	r7,sp,142
    72cc:	3ccfc83a 	sub	r7,r7,r19
    72d0:	d9002344 	addi	r4,sp,141
    72d4:	e1cf883a 	add	r7,fp,r7
    72d8:	00000106 	br	72e0 <___vfprintf_internal_r+0x2040>
    72dc:	28800003 	ldbu	r2,0(r5)
    72e0:	20800005 	stb	r2,0(r4)
    72e4:	21000044 	addi	r4,r4,1
    72e8:	29400044 	addi	r5,r5,1
    72ec:	393ffb1e 	bne	r7,r4,72dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70072dc>
    72f0:	d8802304 	addi	r2,sp,140
    72f4:	14c5c83a 	sub	r2,r2,r19
    72f8:	d8c02344 	addi	r3,sp,141
    72fc:	1885883a 	add	r2,r3,r2
    7300:	003f7006 	br	70c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070c4>
    7304:	0005883a 	mov	r2,zero
    7308:	003f0f06 	br	6f48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f48>
    730c:	d8c03217 	ldw	r3,200(sp)
    7310:	18c00044 	addi	r3,r3,1
    7314:	d8c02e15 	stw	r3,184(sp)
    7318:	1805883a 	mov	r2,r3
    731c:	183fb20e 	bge	r3,zero,71e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70071e8>
    7320:	0005883a 	mov	r2,zero
    7324:	003fb006 	br	71e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70071e8>
    7328:	d9003617 	ldw	r4,216(sp)
    732c:	000d883a 	mov	r6,zero
    7330:	000f883a 	mov	r7,zero
    7334:	980b883a 	mov	r5,r19
    7338:	d8c03c15 	stw	r3,240(sp)
    733c:	da003d15 	stw	r8,244(sp)
    7340:	0003c440 	call	3c44 <__eqdf2>
    7344:	d8c03c17 	ldw	r3,240(sp)
    7348:	da003d17 	ldw	r8,244(sp)
    734c:	103f9826 	beq	r2,zero,71b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70071b0>
    7350:	00800044 	movi	r2,1
    7354:	10c7c83a 	sub	r3,r2,r3
    7358:	d8c02615 	stw	r3,152(sp)
    735c:	003f9506 	br	71b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70071b4>
    7360:	d9002917 	ldw	r4,164(sp)
    7364:	d8c03217 	ldw	r3,200(sp)
    7368:	20800044 	addi	r2,r4,1
    736c:	1885883a 	add	r2,r3,r2
    7370:	d8802e15 	stw	r2,184(sp)
    7374:	103dbf0e 	bge	r2,zero,6a74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a74>
    7378:	0005883a 	mov	r2,zero
    737c:	003dbd06 	br	6a74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a74>
    7380:	2000211e 	bne	r4,zero,7408 <___vfprintf_internal_r+0x2168>
    7384:	9480004c 	andi	r18,r18,1
    7388:	90001f1e 	bne	r18,zero,7408 <___vfprintf_internal_r+0x2168>
    738c:	00800044 	movi	r2,1
    7390:	d8802e15 	stw	r2,184(sp)
    7394:	003db706 	br	6a74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a74>
    7398:	00800b44 	movi	r2,45
    739c:	05adc83a 	sub	r22,zero,r22
    73a0:	d8802305 	stb	r2,140(sp)
    73a4:	003f3f06 	br	70a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070a4>
    73a8:	0005883a 	mov	r2,zero
    73ac:	003f5206 	br	70f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070f8>
    73b0:	90a4703a 	and	r18,r18,r2
    73b4:	903f4e26 	beq	r18,zero,70f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070f0>
    73b8:	003f4a06 	br	70e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070e4>
    73bc:	00800084 	movi	r2,2
    73c0:	10c5c83a 	sub	r2,r2,r3
    73c4:	003f8406 	br	71d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70071d8>
    73c8:	d8802d17 	ldw	r2,180(sp)
    73cc:	d9002d17 	ldw	r4,180(sp)
    73d0:	ac400043 	ldbu	r17,1(r21)
    73d4:	10800017 	ldw	r2,0(r2)
    73d8:	582b883a 	mov	r21,r11
    73dc:	d8802915 	stw	r2,164(sp)
    73e0:	20800104 	addi	r2,r4,4
    73e4:	d9002917 	ldw	r4,164(sp)
    73e8:	d8802d15 	stw	r2,180(sp)
    73ec:	203e7a0e 	bge	r4,zero,6dd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006dd8>
    73f0:	8c403fcc 	andi	r17,r17,255
    73f4:	00bfffc4 	movi	r2,-1
    73f8:	8c40201c 	xori	r17,r17,128
    73fc:	d8802915 	stw	r2,164(sp)
    7400:	8c7fe004 	addi	r17,r17,-128
    7404:	00380706 	br	5424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005424>
    7408:	d8c02917 	ldw	r3,164(sp)
    740c:	18c00084 	addi	r3,r3,2
    7410:	d8c02e15 	stw	r3,184(sp)
    7414:	1805883a 	mov	r2,r3
    7418:	183d960e 	bge	r3,zero,6a74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a74>
    741c:	003fd606 	br	7378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007378>
    7420:	0005883a 	mov	r2,zero
    7424:	003f8e06 	br	7260 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007260>
    7428:	9080004c 	andi	r2,r18,1
    742c:	103f811e 	bne	r2,zero,7234 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007234>
    7430:	d8802117 	ldw	r2,132(sp)
    7434:	1405c83a 	sub	r2,r2,r16
    7438:	d8803315 	stw	r2,204(sp)
    743c:	b47ef326 	beq	r22,r17,700c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700700c>
    7440:	dd802617 	ldw	r22,152(sp)
    7444:	003f1106 	br	708c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700708c>
    7448:	d9c02785 	stb	r7,158(sp)
    744c:	00390406 	br	5860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005860>
    7450:	d9c02785 	stb	r7,158(sp)
    7454:	0038d306 	br	57a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057a4>
    7458:	d9c02785 	stb	r7,158(sp)
    745c:	003a6106 	br	5de4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005de4>
    7460:	d9c02785 	stb	r7,158(sp)
    7464:	003af806 	br	6048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006048>
    7468:	0005883a 	mov	r2,zero
    746c:	003d7e06 	br	6a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a68>
    7470:	d8802344 	addi	r2,sp,141
    7474:	003f1306 	br	70c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070c4>
    7478:	d9c02785 	stb	r7,158(sp)
    747c:	00392306 	br	590c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700590c>
    7480:	d9c02785 	stb	r7,158(sp)
    7484:	003aa906 	br	5f2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f2c>
    7488:	d9c02785 	stb	r7,158(sp)
    748c:	003a3d06 	br	5d84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d84>
    7490:	d9c02785 	stb	r7,158(sp)
    7494:	003aca06 	br	5fc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005fc0>

00007498 <__vfprintf_internal>:
    7498:	008000b4 	movhi	r2,2
    749c:	10b71304 	addi	r2,r2,-9140
    74a0:	300f883a 	mov	r7,r6
    74a4:	280d883a 	mov	r6,r5
    74a8:	200b883a 	mov	r5,r4
    74ac:	11000017 	ldw	r4,0(r2)
    74b0:	00052a01 	jmpi	52a0 <___vfprintf_internal_r>

000074b4 <__sbprintf>:
    74b4:	2880030b 	ldhu	r2,12(r5)
    74b8:	2ac01917 	ldw	r11,100(r5)
    74bc:	2a80038b 	ldhu	r10,14(r5)
    74c0:	2a400717 	ldw	r9,28(r5)
    74c4:	2a000917 	ldw	r8,36(r5)
    74c8:	defee204 	addi	sp,sp,-1144
    74cc:	00c10004 	movi	r3,1024
    74d0:	dc011a15 	stw	r16,1128(sp)
    74d4:	10bfff4c 	andi	r2,r2,65533
    74d8:	2821883a 	mov	r16,r5
    74dc:	d8cb883a 	add	r5,sp,r3
    74e0:	dc811c15 	stw	r18,1136(sp)
    74e4:	dc411b15 	stw	r17,1132(sp)
    74e8:	dfc11d15 	stw	ra,1140(sp)
    74ec:	2025883a 	mov	r18,r4
    74f0:	d881030d 	sth	r2,1036(sp)
    74f4:	dac11915 	stw	r11,1124(sp)
    74f8:	da81038d 	sth	r10,1038(sp)
    74fc:	da410715 	stw	r9,1052(sp)
    7500:	da010915 	stw	r8,1060(sp)
    7504:	dec10015 	stw	sp,1024(sp)
    7508:	dec10415 	stw	sp,1040(sp)
    750c:	d8c10215 	stw	r3,1032(sp)
    7510:	d8c10515 	stw	r3,1044(sp)
    7514:	d8010615 	stw	zero,1048(sp)
    7518:	00052a00 	call	52a0 <___vfprintf_internal_r>
    751c:	1023883a 	mov	r17,r2
    7520:	10000416 	blt	r2,zero,7534 <__sbprintf+0x80>
    7524:	d9410004 	addi	r5,sp,1024
    7528:	9009883a 	mov	r4,r18
    752c:	00091680 	call	9168 <_fflush_r>
    7530:	10000d1e 	bne	r2,zero,7568 <__sbprintf+0xb4>
    7534:	d881030b 	ldhu	r2,1036(sp)
    7538:	1080100c 	andi	r2,r2,64
    753c:	10000326 	beq	r2,zero,754c <__sbprintf+0x98>
    7540:	8080030b 	ldhu	r2,12(r16)
    7544:	10801014 	ori	r2,r2,64
    7548:	8080030d 	sth	r2,12(r16)
    754c:	8805883a 	mov	r2,r17
    7550:	dfc11d17 	ldw	ra,1140(sp)
    7554:	dc811c17 	ldw	r18,1136(sp)
    7558:	dc411b17 	ldw	r17,1132(sp)
    755c:	dc011a17 	ldw	r16,1128(sp)
    7560:	dec11e04 	addi	sp,sp,1144
    7564:	f800283a 	ret
    7568:	047fffc4 	movi	r17,-1
    756c:	003ff106 	br	7534 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007534>

00007570 <__swsetup_r>:
    7570:	008000b4 	movhi	r2,2
    7574:	defffd04 	addi	sp,sp,-12
    7578:	10b71304 	addi	r2,r2,-9140
    757c:	dc400115 	stw	r17,4(sp)
    7580:	2023883a 	mov	r17,r4
    7584:	11000017 	ldw	r4,0(r2)
    7588:	dc000015 	stw	r16,0(sp)
    758c:	dfc00215 	stw	ra,8(sp)
    7590:	2821883a 	mov	r16,r5
    7594:	20000226 	beq	r4,zero,75a0 <__swsetup_r+0x30>
    7598:	20800e17 	ldw	r2,56(r4)
    759c:	10003126 	beq	r2,zero,7664 <__swsetup_r+0xf4>
    75a0:	8080030b 	ldhu	r2,12(r16)
    75a4:	10c0020c 	andi	r3,r2,8
    75a8:	1009883a 	mov	r4,r2
    75ac:	18000f26 	beq	r3,zero,75ec <__swsetup_r+0x7c>
    75b0:	80c00417 	ldw	r3,16(r16)
    75b4:	18001526 	beq	r3,zero,760c <__swsetup_r+0x9c>
    75b8:	1100004c 	andi	r4,r2,1
    75bc:	20001c1e 	bne	r4,zero,7630 <__swsetup_r+0xc0>
    75c0:	1080008c 	andi	r2,r2,2
    75c4:	1000291e 	bne	r2,zero,766c <__swsetup_r+0xfc>
    75c8:	80800517 	ldw	r2,20(r16)
    75cc:	80800215 	stw	r2,8(r16)
    75d0:	18001c26 	beq	r3,zero,7644 <__swsetup_r+0xd4>
    75d4:	0005883a 	mov	r2,zero
    75d8:	dfc00217 	ldw	ra,8(sp)
    75dc:	dc400117 	ldw	r17,4(sp)
    75e0:	dc000017 	ldw	r16,0(sp)
    75e4:	dec00304 	addi	sp,sp,12
    75e8:	f800283a 	ret
    75ec:	2080040c 	andi	r2,r4,16
    75f0:	10002e26 	beq	r2,zero,76ac <__swsetup_r+0x13c>
    75f4:	2080010c 	andi	r2,r4,4
    75f8:	10001e1e 	bne	r2,zero,7674 <__swsetup_r+0x104>
    75fc:	80c00417 	ldw	r3,16(r16)
    7600:	20800214 	ori	r2,r4,8
    7604:	8080030d 	sth	r2,12(r16)
    7608:	183feb1e 	bne	r3,zero,75b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075b8>
    760c:	1100a00c 	andi	r4,r2,640
    7610:	01408004 	movi	r5,512
    7614:	217fe826 	beq	r4,r5,75b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075b8>
    7618:	800b883a 	mov	r5,r16
    761c:	8809883a 	mov	r4,r17
    7620:	0009c2c0 	call	9c2c <__smakebuf_r>
    7624:	8080030b 	ldhu	r2,12(r16)
    7628:	80c00417 	ldw	r3,16(r16)
    762c:	003fe206 	br	75b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075b8>
    7630:	80800517 	ldw	r2,20(r16)
    7634:	80000215 	stw	zero,8(r16)
    7638:	0085c83a 	sub	r2,zero,r2
    763c:	80800615 	stw	r2,24(r16)
    7640:	183fe41e 	bne	r3,zero,75d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075d4>
    7644:	80c0030b 	ldhu	r3,12(r16)
    7648:	0005883a 	mov	r2,zero
    764c:	1900200c 	andi	r4,r3,128
    7650:	203fe126 	beq	r4,zero,75d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075d8>
    7654:	18c01014 	ori	r3,r3,64
    7658:	80c0030d 	sth	r3,12(r16)
    765c:	00bfffc4 	movi	r2,-1
    7660:	003fdd06 	br	75d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075d8>
    7664:	00095440 	call	9544 <__sinit>
    7668:	003fcd06 	br	75a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075a0>
    766c:	0005883a 	mov	r2,zero
    7670:	003fd606 	br	75cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075cc>
    7674:	81400c17 	ldw	r5,48(r16)
    7678:	28000626 	beq	r5,zero,7694 <__swsetup_r+0x124>
    767c:	80801004 	addi	r2,r16,64
    7680:	28800326 	beq	r5,r2,7690 <__swsetup_r+0x120>
    7684:	8809883a 	mov	r4,r17
    7688:	00096b80 	call	96b8 <_free_r>
    768c:	8100030b 	ldhu	r4,12(r16)
    7690:	80000c15 	stw	zero,48(r16)
    7694:	80c00417 	ldw	r3,16(r16)
    7698:	00bff6c4 	movi	r2,-37
    769c:	1108703a 	and	r4,r2,r4
    76a0:	80000115 	stw	zero,4(r16)
    76a4:	80c00015 	stw	r3,0(r16)
    76a8:	003fd506 	br	7600 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007600>
    76ac:	00800244 	movi	r2,9
    76b0:	88800015 	stw	r2,0(r17)
    76b4:	20801014 	ori	r2,r4,64
    76b8:	8080030d 	sth	r2,12(r16)
    76bc:	00bfffc4 	movi	r2,-1
    76c0:	003fc506 	br	75d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075d8>

000076c4 <quorem>:
    76c4:	defff704 	addi	sp,sp,-36
    76c8:	dc800215 	stw	r18,8(sp)
    76cc:	20800417 	ldw	r2,16(r4)
    76d0:	2c800417 	ldw	r18,16(r5)
    76d4:	dfc00815 	stw	ra,32(sp)
    76d8:	ddc00715 	stw	r23,28(sp)
    76dc:	dd800615 	stw	r22,24(sp)
    76e0:	dd400515 	stw	r21,20(sp)
    76e4:	dd000415 	stw	r20,16(sp)
    76e8:	dcc00315 	stw	r19,12(sp)
    76ec:	dc400115 	stw	r17,4(sp)
    76f0:	dc000015 	stw	r16,0(sp)
    76f4:	14807116 	blt	r2,r18,78bc <quorem+0x1f8>
    76f8:	94bfffc4 	addi	r18,r18,-1
    76fc:	94ad883a 	add	r22,r18,r18
    7700:	b5ad883a 	add	r22,r22,r22
    7704:	2c400504 	addi	r17,r5,20
    7708:	8da9883a 	add	r20,r17,r22
    770c:	25400504 	addi	r21,r4,20
    7710:	282f883a 	mov	r23,r5
    7714:	adad883a 	add	r22,r21,r22
    7718:	a1400017 	ldw	r5,0(r20)
    771c:	2021883a 	mov	r16,r4
    7720:	b1000017 	ldw	r4,0(r22)
    7724:	29400044 	addi	r5,r5,1
    7728:	00028600 	call	2860 <__udivsi3>
    772c:	1027883a 	mov	r19,r2
    7730:	10002c26 	beq	r2,zero,77e4 <quorem+0x120>
    7734:	a813883a 	mov	r9,r21
    7738:	880b883a 	mov	r5,r17
    773c:	0009883a 	mov	r4,zero
    7740:	000d883a 	mov	r6,zero
    7744:	2a000017 	ldw	r8,0(r5)
    7748:	49c00017 	ldw	r7,0(r9)
    774c:	29400104 	addi	r5,r5,4
    7750:	40bfffcc 	andi	r2,r8,65535
    7754:	14c5383a 	mul	r2,r2,r19
    7758:	4010d43a 	srli	r8,r8,16
    775c:	38ffffcc 	andi	r3,r7,65535
    7760:	1105883a 	add	r2,r2,r4
    7764:	1008d43a 	srli	r4,r2,16
    7768:	44d1383a 	mul	r8,r8,r19
    776c:	198d883a 	add	r6,r3,r6
    7770:	10ffffcc 	andi	r3,r2,65535
    7774:	30c7c83a 	sub	r3,r6,r3
    7778:	380ed43a 	srli	r7,r7,16
    777c:	4105883a 	add	r2,r8,r4
    7780:	180dd43a 	srai	r6,r3,16
    7784:	113fffcc 	andi	r4,r2,65535
    7788:	390fc83a 	sub	r7,r7,r4
    778c:	398d883a 	add	r6,r7,r6
    7790:	300e943a 	slli	r7,r6,16
    7794:	18ffffcc 	andi	r3,r3,65535
    7798:	1008d43a 	srli	r4,r2,16
    779c:	38ceb03a 	or	r7,r7,r3
    77a0:	49c00015 	stw	r7,0(r9)
    77a4:	300dd43a 	srai	r6,r6,16
    77a8:	4a400104 	addi	r9,r9,4
    77ac:	a17fe52e 	bgeu	r20,r5,7744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007744>
    77b0:	b0800017 	ldw	r2,0(r22)
    77b4:	10000b1e 	bne	r2,zero,77e4 <quorem+0x120>
    77b8:	b0bfff04 	addi	r2,r22,-4
    77bc:	a880082e 	bgeu	r21,r2,77e0 <quorem+0x11c>
    77c0:	b0ffff17 	ldw	r3,-4(r22)
    77c4:	18000326 	beq	r3,zero,77d4 <quorem+0x110>
    77c8:	00000506 	br	77e0 <quorem+0x11c>
    77cc:	10c00017 	ldw	r3,0(r2)
    77d0:	1800031e 	bne	r3,zero,77e0 <quorem+0x11c>
    77d4:	10bfff04 	addi	r2,r2,-4
    77d8:	94bfffc4 	addi	r18,r18,-1
    77dc:	a8bffb36 	bltu	r21,r2,77cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70077cc>
    77e0:	84800415 	stw	r18,16(r16)
    77e4:	b80b883a 	mov	r5,r23
    77e8:	8009883a 	mov	r4,r16
    77ec:	000b2100 	call	b210 <__mcmp>
    77f0:	10002616 	blt	r2,zero,788c <quorem+0x1c8>
    77f4:	9cc00044 	addi	r19,r19,1
    77f8:	a805883a 	mov	r2,r21
    77fc:	000b883a 	mov	r5,zero
    7800:	11000017 	ldw	r4,0(r2)
    7804:	89800017 	ldw	r6,0(r17)
    7808:	10800104 	addi	r2,r2,4
    780c:	20ffffcc 	andi	r3,r4,65535
    7810:	194b883a 	add	r5,r3,r5
    7814:	30ffffcc 	andi	r3,r6,65535
    7818:	28c7c83a 	sub	r3,r5,r3
    781c:	300cd43a 	srli	r6,r6,16
    7820:	2008d43a 	srli	r4,r4,16
    7824:	180bd43a 	srai	r5,r3,16
    7828:	18ffffcc 	andi	r3,r3,65535
    782c:	2189c83a 	sub	r4,r4,r6
    7830:	2149883a 	add	r4,r4,r5
    7834:	200c943a 	slli	r6,r4,16
    7838:	8c400104 	addi	r17,r17,4
    783c:	200bd43a 	srai	r5,r4,16
    7840:	30c6b03a 	or	r3,r6,r3
    7844:	10ffff15 	stw	r3,-4(r2)
    7848:	a47fed2e 	bgeu	r20,r17,7800 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007800>
    784c:	9485883a 	add	r2,r18,r18
    7850:	1085883a 	add	r2,r2,r2
    7854:	a887883a 	add	r3,r21,r2
    7858:	18800017 	ldw	r2,0(r3)
    785c:	10000b1e 	bne	r2,zero,788c <quorem+0x1c8>
    7860:	18bfff04 	addi	r2,r3,-4
    7864:	a880082e 	bgeu	r21,r2,7888 <quorem+0x1c4>
    7868:	18ffff17 	ldw	r3,-4(r3)
    786c:	18000326 	beq	r3,zero,787c <quorem+0x1b8>
    7870:	00000506 	br	7888 <quorem+0x1c4>
    7874:	10c00017 	ldw	r3,0(r2)
    7878:	1800031e 	bne	r3,zero,7888 <quorem+0x1c4>
    787c:	10bfff04 	addi	r2,r2,-4
    7880:	94bfffc4 	addi	r18,r18,-1
    7884:	a8bffb36 	bltu	r21,r2,7874 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007874>
    7888:	84800415 	stw	r18,16(r16)
    788c:	9805883a 	mov	r2,r19
    7890:	dfc00817 	ldw	ra,32(sp)
    7894:	ddc00717 	ldw	r23,28(sp)
    7898:	dd800617 	ldw	r22,24(sp)
    789c:	dd400517 	ldw	r21,20(sp)
    78a0:	dd000417 	ldw	r20,16(sp)
    78a4:	dcc00317 	ldw	r19,12(sp)
    78a8:	dc800217 	ldw	r18,8(sp)
    78ac:	dc400117 	ldw	r17,4(sp)
    78b0:	dc000017 	ldw	r16,0(sp)
    78b4:	dec00904 	addi	sp,sp,36
    78b8:	f800283a 	ret
    78bc:	0005883a 	mov	r2,zero
    78c0:	003ff306 	br	7890 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007890>

000078c4 <_dtoa_r>:
    78c4:	20801017 	ldw	r2,64(r4)
    78c8:	deffde04 	addi	sp,sp,-136
    78cc:	df002015 	stw	fp,128(sp)
    78d0:	dcc01b15 	stw	r19,108(sp)
    78d4:	dc801a15 	stw	r18,104(sp)
    78d8:	dc401915 	stw	r17,100(sp)
    78dc:	dc001815 	stw	r16,96(sp)
    78e0:	dfc02115 	stw	ra,132(sp)
    78e4:	ddc01f15 	stw	r23,124(sp)
    78e8:	dd801e15 	stw	r22,120(sp)
    78ec:	dd401d15 	stw	r21,116(sp)
    78f0:	dd001c15 	stw	r20,112(sp)
    78f4:	d9c00315 	stw	r7,12(sp)
    78f8:	2039883a 	mov	fp,r4
    78fc:	3023883a 	mov	r17,r6
    7900:	2825883a 	mov	r18,r5
    7904:	dc002417 	ldw	r16,144(sp)
    7908:	3027883a 	mov	r19,r6
    790c:	10000826 	beq	r2,zero,7930 <_dtoa_r+0x6c>
    7910:	21801117 	ldw	r6,68(r4)
    7914:	00c00044 	movi	r3,1
    7918:	100b883a 	mov	r5,r2
    791c:	1986983a 	sll	r3,r3,r6
    7920:	11800115 	stw	r6,4(r2)
    7924:	10c00215 	stw	r3,8(r2)
    7928:	000a9f00 	call	a9f0 <_Bfree>
    792c:	e0001015 	stw	zero,64(fp)
    7930:	88002e16 	blt	r17,zero,79ec <_dtoa_r+0x128>
    7934:	80000015 	stw	zero,0(r16)
    7938:	889ffc2c 	andhi	r2,r17,32752
    793c:	00dffc34 	movhi	r3,32752
    7940:	10c01c26 	beq	r2,r3,79b4 <_dtoa_r+0xf0>
    7944:	000d883a 	mov	r6,zero
    7948:	000f883a 	mov	r7,zero
    794c:	9009883a 	mov	r4,r18
    7950:	980b883a 	mov	r5,r19
    7954:	0003c440 	call	3c44 <__eqdf2>
    7958:	10002b1e 	bne	r2,zero,7a08 <_dtoa_r+0x144>
    795c:	d9c02317 	ldw	r7,140(sp)
    7960:	00800044 	movi	r2,1
    7964:	38800015 	stw	r2,0(r7)
    7968:	d8802517 	ldw	r2,148(sp)
    796c:	10019e26 	beq	r2,zero,7fe8 <_dtoa_r+0x724>
    7970:	d8c02517 	ldw	r3,148(sp)
    7974:	008000b4 	movhi	r2,2
    7978:	10ae4944 	addi	r2,r2,-18139
    797c:	18800015 	stw	r2,0(r3)
    7980:	10bfffc4 	addi	r2,r2,-1
    7984:	dfc02117 	ldw	ra,132(sp)
    7988:	df002017 	ldw	fp,128(sp)
    798c:	ddc01f17 	ldw	r23,124(sp)
    7990:	dd801e17 	ldw	r22,120(sp)
    7994:	dd401d17 	ldw	r21,116(sp)
    7998:	dd001c17 	ldw	r20,112(sp)
    799c:	dcc01b17 	ldw	r19,108(sp)
    79a0:	dc801a17 	ldw	r18,104(sp)
    79a4:	dc401917 	ldw	r17,100(sp)
    79a8:	dc001817 	ldw	r16,96(sp)
    79ac:	dec02204 	addi	sp,sp,136
    79b0:	f800283a 	ret
    79b4:	d8c02317 	ldw	r3,140(sp)
    79b8:	0089c3c4 	movi	r2,9999
    79bc:	18800015 	stw	r2,0(r3)
    79c0:	90017726 	beq	r18,zero,7fa0 <_dtoa_r+0x6dc>
    79c4:	008000b4 	movhi	r2,2
    79c8:	10ae5504 	addi	r2,r2,-18092
    79cc:	d9002517 	ldw	r4,148(sp)
    79d0:	203fec26 	beq	r4,zero,7984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007984>
    79d4:	10c000c7 	ldb	r3,3(r2)
    79d8:	1801781e 	bne	r3,zero,7fbc <_dtoa_r+0x6f8>
    79dc:	10c000c4 	addi	r3,r2,3
    79e0:	d9802517 	ldw	r6,148(sp)
    79e4:	30c00015 	stw	r3,0(r6)
    79e8:	003fe606 	br	7984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007984>
    79ec:	04e00034 	movhi	r19,32768
    79f0:	9cffffc4 	addi	r19,r19,-1
    79f4:	00800044 	movi	r2,1
    79f8:	8ce6703a 	and	r19,r17,r19
    79fc:	80800015 	stw	r2,0(r16)
    7a00:	9823883a 	mov	r17,r19
    7a04:	003fcc06 	br	7938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007938>
    7a08:	d8800204 	addi	r2,sp,8
    7a0c:	d8800015 	stw	r2,0(sp)
    7a10:	d9c00104 	addi	r7,sp,4
    7a14:	900b883a 	mov	r5,r18
    7a18:	980d883a 	mov	r6,r19
    7a1c:	e009883a 	mov	r4,fp
    7a20:	8820d53a 	srli	r16,r17,20
    7a24:	000b5dc0 	call	b5dc <__d2b>
    7a28:	d8800915 	stw	r2,36(sp)
    7a2c:	8001651e 	bne	r16,zero,7fc4 <_dtoa_r+0x700>
    7a30:	dd800217 	ldw	r22,8(sp)
    7a34:	dc000117 	ldw	r16,4(sp)
    7a38:	00800804 	movi	r2,32
    7a3c:	b421883a 	add	r16,r22,r16
    7a40:	80c10c84 	addi	r3,r16,1074
    7a44:	10c2d10e 	bge	r2,r3,858c <_dtoa_r+0xcc8>
    7a48:	00801004 	movi	r2,64
    7a4c:	81010484 	addi	r4,r16,1042
    7a50:	10c7c83a 	sub	r3,r2,r3
    7a54:	9108d83a 	srl	r4,r18,r4
    7a58:	88e2983a 	sll	r17,r17,r3
    7a5c:	2448b03a 	or	r4,r4,r17
    7a60:	000f3580 	call	f358 <__floatunsidf>
    7a64:	017f8434 	movhi	r5,65040
    7a68:	01800044 	movi	r6,1
    7a6c:	1009883a 	mov	r4,r2
    7a70:	194b883a 	add	r5,r3,r5
    7a74:	843fffc4 	addi	r16,r16,-1
    7a78:	d9801115 	stw	r6,68(sp)
    7a7c:	000d883a 	mov	r6,zero
    7a80:	01cffe34 	movhi	r7,16376
    7a84:	00044c00 	call	44c0 <__subdf3>
    7a88:	0198dbf4 	movhi	r6,25455
    7a8c:	01cff4f4 	movhi	r7,16339
    7a90:	3190d844 	addi	r6,r6,17249
    7a94:	39e1e9c4 	addi	r7,r7,-30809
    7a98:	1009883a 	mov	r4,r2
    7a9c:	180b883a 	mov	r5,r3
    7aa0:	0003da80 	call	3da8 <__muldf3>
    7aa4:	01a2d874 	movhi	r6,35681
    7aa8:	01cff1f4 	movhi	r7,16327
    7aac:	31b22cc4 	addi	r6,r6,-14157
    7ab0:	39e28a04 	addi	r7,r7,-30168
    7ab4:	180b883a 	mov	r5,r3
    7ab8:	1009883a 	mov	r4,r2
    7abc:	0002ab00 	call	2ab0 <__adddf3>
    7ac0:	8009883a 	mov	r4,r16
    7ac4:	1029883a 	mov	r20,r2
    7ac8:	1823883a 	mov	r17,r3
    7acc:	0004e3c0 	call	4e3c <__floatsidf>
    7ad0:	019427f4 	movhi	r6,20639
    7ad4:	01cff4f4 	movhi	r7,16339
    7ad8:	319e7ec4 	addi	r6,r6,31227
    7adc:	39d104c4 	addi	r7,r7,17427
    7ae0:	1009883a 	mov	r4,r2
    7ae4:	180b883a 	mov	r5,r3
    7ae8:	0003da80 	call	3da8 <__muldf3>
    7aec:	100d883a 	mov	r6,r2
    7af0:	180f883a 	mov	r7,r3
    7af4:	a009883a 	mov	r4,r20
    7af8:	880b883a 	mov	r5,r17
    7afc:	0002ab00 	call	2ab0 <__adddf3>
    7b00:	1009883a 	mov	r4,r2
    7b04:	180b883a 	mov	r5,r3
    7b08:	1029883a 	mov	r20,r2
    7b0c:	1823883a 	mov	r17,r3
    7b10:	0004dbc0 	call	4dbc <__fixdfsi>
    7b14:	000d883a 	mov	r6,zero
    7b18:	000f883a 	mov	r7,zero
    7b1c:	a009883a 	mov	r4,r20
    7b20:	880b883a 	mov	r5,r17
    7b24:	d8800515 	stw	r2,20(sp)
    7b28:	000f2640 	call	f264 <__ledf2>
    7b2c:	10028716 	blt	r2,zero,854c <_dtoa_r+0xc88>
    7b30:	d8c00517 	ldw	r3,20(sp)
    7b34:	00800584 	movi	r2,22
    7b38:	10c27536 	bltu	r2,r3,8510 <_dtoa_r+0xc4c>
    7b3c:	180490fa 	slli	r2,r3,3
    7b40:	00c000b4 	movhi	r3,2
    7b44:	18ee7104 	addi	r3,r3,-17980
    7b48:	1885883a 	add	r2,r3,r2
    7b4c:	11000017 	ldw	r4,0(r2)
    7b50:	11400117 	ldw	r5,4(r2)
    7b54:	900d883a 	mov	r6,r18
    7b58:	980f883a 	mov	r7,r19
    7b5c:	0003ccc0 	call	3ccc <__gedf2>
    7b60:	00828d0e 	bge	zero,r2,8598 <_dtoa_r+0xcd4>
    7b64:	d9000517 	ldw	r4,20(sp)
    7b68:	d8000e15 	stw	zero,56(sp)
    7b6c:	213fffc4 	addi	r4,r4,-1
    7b70:	d9000515 	stw	r4,20(sp)
    7b74:	b42dc83a 	sub	r22,r22,r16
    7b78:	b5bfffc4 	addi	r22,r22,-1
    7b7c:	b0026f16 	blt	r22,zero,853c <_dtoa_r+0xc78>
    7b80:	d8000815 	stw	zero,32(sp)
    7b84:	d9c00517 	ldw	r7,20(sp)
    7b88:	38026416 	blt	r7,zero,851c <_dtoa_r+0xc58>
    7b8c:	b1ed883a 	add	r22,r22,r7
    7b90:	d9c00d15 	stw	r7,52(sp)
    7b94:	d8000a15 	stw	zero,40(sp)
    7b98:	d9800317 	ldw	r6,12(sp)
    7b9c:	00800244 	movi	r2,9
    7ba0:	11811436 	bltu	r2,r6,7ff4 <_dtoa_r+0x730>
    7ba4:	00800144 	movi	r2,5
    7ba8:	1184e10e 	bge	r2,r6,8f30 <_dtoa_r+0x166c>
    7bac:	31bfff04 	addi	r6,r6,-4
    7bb0:	d9800315 	stw	r6,12(sp)
    7bb4:	0023883a 	mov	r17,zero
    7bb8:	d9800317 	ldw	r6,12(sp)
    7bbc:	008000c4 	movi	r2,3
    7bc0:	30836726 	beq	r6,r2,8960 <_dtoa_r+0x109c>
    7bc4:	1183410e 	bge	r2,r6,88cc <_dtoa_r+0x1008>
    7bc8:	d9c00317 	ldw	r7,12(sp)
    7bcc:	00800104 	movi	r2,4
    7bd0:	38827c26 	beq	r7,r2,85c4 <_dtoa_r+0xd00>
    7bd4:	00800144 	movi	r2,5
    7bd8:	3884c41e 	bne	r7,r2,8eec <_dtoa_r+0x1628>
    7bdc:	00800044 	movi	r2,1
    7be0:	d8800b15 	stw	r2,44(sp)
    7be4:	d8c00517 	ldw	r3,20(sp)
    7be8:	d9002217 	ldw	r4,136(sp)
    7bec:	1907883a 	add	r3,r3,r4
    7bf0:	19800044 	addi	r6,r3,1
    7bf4:	d8c00c15 	stw	r3,48(sp)
    7bf8:	d9800615 	stw	r6,24(sp)
    7bfc:	0183a40e 	bge	zero,r6,8a90 <_dtoa_r+0x11cc>
    7c00:	d9800617 	ldw	r6,24(sp)
    7c04:	3021883a 	mov	r16,r6
    7c08:	e0001115 	stw	zero,68(fp)
    7c0c:	008005c4 	movi	r2,23
    7c10:	1184c92e 	bgeu	r2,r6,8f38 <_dtoa_r+0x1674>
    7c14:	00c00044 	movi	r3,1
    7c18:	00800104 	movi	r2,4
    7c1c:	1085883a 	add	r2,r2,r2
    7c20:	11000504 	addi	r4,r2,20
    7c24:	180b883a 	mov	r5,r3
    7c28:	18c00044 	addi	r3,r3,1
    7c2c:	313ffb2e 	bgeu	r6,r4,7c1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c1c>
    7c30:	e1401115 	stw	r5,68(fp)
    7c34:	e009883a 	mov	r4,fp
    7c38:	000a9480 	call	a948 <_Balloc>
    7c3c:	d8800715 	stw	r2,28(sp)
    7c40:	e0801015 	stw	r2,64(fp)
    7c44:	00800384 	movi	r2,14
    7c48:	1400f736 	bltu	r2,r16,8028 <_dtoa_r+0x764>
    7c4c:	8800f626 	beq	r17,zero,8028 <_dtoa_r+0x764>
    7c50:	d9c00517 	ldw	r7,20(sp)
    7c54:	01c39a0e 	bge	zero,r7,8ac0 <_dtoa_r+0x11fc>
    7c58:	388003cc 	andi	r2,r7,15
    7c5c:	100490fa 	slli	r2,r2,3
    7c60:	382bd13a 	srai	r21,r7,4
    7c64:	00c000b4 	movhi	r3,2
    7c68:	18ee7104 	addi	r3,r3,-17980
    7c6c:	1885883a 	add	r2,r3,r2
    7c70:	a8c0040c 	andi	r3,r21,16
    7c74:	12400017 	ldw	r9,0(r2)
    7c78:	12000117 	ldw	r8,4(r2)
    7c7c:	18037926 	beq	r3,zero,8a64 <_dtoa_r+0x11a0>
    7c80:	008000b4 	movhi	r2,2
    7c84:	10ae6704 	addi	r2,r2,-18020
    7c88:	11800817 	ldw	r6,32(r2)
    7c8c:	11c00917 	ldw	r7,36(r2)
    7c90:	9009883a 	mov	r4,r18
    7c94:	980b883a 	mov	r5,r19
    7c98:	da001715 	stw	r8,92(sp)
    7c9c:	da401615 	stw	r9,88(sp)
    7ca0:	000335c0 	call	335c <__divdf3>
    7ca4:	da001717 	ldw	r8,92(sp)
    7ca8:	da401617 	ldw	r9,88(sp)
    7cac:	ad4003cc 	andi	r21,r21,15
    7cb0:	040000c4 	movi	r16,3
    7cb4:	1023883a 	mov	r17,r2
    7cb8:	1829883a 	mov	r20,r3
    7cbc:	a8001126 	beq	r21,zero,7d04 <_dtoa_r+0x440>
    7cc0:	05c000b4 	movhi	r23,2
    7cc4:	bdee6704 	addi	r23,r23,-18020
    7cc8:	4805883a 	mov	r2,r9
    7ccc:	4007883a 	mov	r3,r8
    7cd0:	a980004c 	andi	r6,r21,1
    7cd4:	1009883a 	mov	r4,r2
    7cd8:	a82bd07a 	srai	r21,r21,1
    7cdc:	180b883a 	mov	r5,r3
    7ce0:	30000426 	beq	r6,zero,7cf4 <_dtoa_r+0x430>
    7ce4:	b9800017 	ldw	r6,0(r23)
    7ce8:	b9c00117 	ldw	r7,4(r23)
    7cec:	84000044 	addi	r16,r16,1
    7cf0:	0003da80 	call	3da8 <__muldf3>
    7cf4:	bdc00204 	addi	r23,r23,8
    7cf8:	a83ff51e 	bne	r21,zero,7cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007cd0>
    7cfc:	1013883a 	mov	r9,r2
    7d00:	1811883a 	mov	r8,r3
    7d04:	480d883a 	mov	r6,r9
    7d08:	400f883a 	mov	r7,r8
    7d0c:	8809883a 	mov	r4,r17
    7d10:	a00b883a 	mov	r5,r20
    7d14:	000335c0 	call	335c <__divdf3>
    7d18:	d8800f15 	stw	r2,60(sp)
    7d1c:	d8c01015 	stw	r3,64(sp)
    7d20:	d8c00e17 	ldw	r3,56(sp)
    7d24:	18000626 	beq	r3,zero,7d40 <_dtoa_r+0x47c>
    7d28:	d9000f17 	ldw	r4,60(sp)
    7d2c:	d9401017 	ldw	r5,64(sp)
    7d30:	000d883a 	mov	r6,zero
    7d34:	01cffc34 	movhi	r7,16368
    7d38:	000f2640 	call	f264 <__ledf2>
    7d3c:	10040b16 	blt	r2,zero,8d6c <_dtoa_r+0x14a8>
    7d40:	8009883a 	mov	r4,r16
    7d44:	0004e3c0 	call	4e3c <__floatsidf>
    7d48:	d9800f17 	ldw	r6,60(sp)
    7d4c:	d9c01017 	ldw	r7,64(sp)
    7d50:	1009883a 	mov	r4,r2
    7d54:	180b883a 	mov	r5,r3
    7d58:	0003da80 	call	3da8 <__muldf3>
    7d5c:	000d883a 	mov	r6,zero
    7d60:	01d00734 	movhi	r7,16412
    7d64:	1009883a 	mov	r4,r2
    7d68:	180b883a 	mov	r5,r3
    7d6c:	0002ab00 	call	2ab0 <__adddf3>
    7d70:	1021883a 	mov	r16,r2
    7d74:	d8800617 	ldw	r2,24(sp)
    7d78:	047f3034 	movhi	r17,64704
    7d7c:	1c63883a 	add	r17,r3,r17
    7d80:	10031826 	beq	r2,zero,89e4 <_dtoa_r+0x1120>
    7d84:	d8c00517 	ldw	r3,20(sp)
    7d88:	db000617 	ldw	r12,24(sp)
    7d8c:	d8c01315 	stw	r3,76(sp)
    7d90:	d9000b17 	ldw	r4,44(sp)
    7d94:	20038f26 	beq	r4,zero,8bd4 <_dtoa_r+0x1310>
    7d98:	60bfffc4 	addi	r2,r12,-1
    7d9c:	100490fa 	slli	r2,r2,3
    7da0:	00c000b4 	movhi	r3,2
    7da4:	18ee7104 	addi	r3,r3,-17980
    7da8:	1885883a 	add	r2,r3,r2
    7dac:	11800017 	ldw	r6,0(r2)
    7db0:	11c00117 	ldw	r7,4(r2)
    7db4:	d8800717 	ldw	r2,28(sp)
    7db8:	0009883a 	mov	r4,zero
    7dbc:	014ff834 	movhi	r5,16352
    7dc0:	db001615 	stw	r12,88(sp)
    7dc4:	15c00044 	addi	r23,r2,1
    7dc8:	000335c0 	call	335c <__divdf3>
    7dcc:	800d883a 	mov	r6,r16
    7dd0:	880f883a 	mov	r7,r17
    7dd4:	1009883a 	mov	r4,r2
    7dd8:	180b883a 	mov	r5,r3
    7ddc:	00044c00 	call	44c0 <__subdf3>
    7de0:	d9401017 	ldw	r5,64(sp)
    7de4:	d9000f17 	ldw	r4,60(sp)
    7de8:	102b883a 	mov	r21,r2
    7dec:	d8c01215 	stw	r3,72(sp)
    7df0:	0004dbc0 	call	4dbc <__fixdfsi>
    7df4:	1009883a 	mov	r4,r2
    7df8:	1029883a 	mov	r20,r2
    7dfc:	0004e3c0 	call	4e3c <__floatsidf>
    7e00:	d9000f17 	ldw	r4,60(sp)
    7e04:	d9401017 	ldw	r5,64(sp)
    7e08:	100d883a 	mov	r6,r2
    7e0c:	180f883a 	mov	r7,r3
    7e10:	00044c00 	call	44c0 <__subdf3>
    7e14:	1823883a 	mov	r17,r3
    7e18:	d8c00717 	ldw	r3,28(sp)
    7e1c:	d9401217 	ldw	r5,72(sp)
    7e20:	a2000c04 	addi	r8,r20,48
    7e24:	1021883a 	mov	r16,r2
    7e28:	1a000005 	stb	r8,0(r3)
    7e2c:	800d883a 	mov	r6,r16
    7e30:	880f883a 	mov	r7,r17
    7e34:	a809883a 	mov	r4,r21
    7e38:	4029883a 	mov	r20,r8
    7e3c:	0003ccc0 	call	3ccc <__gedf2>
    7e40:	00841d16 	blt	zero,r2,8eb8 <_dtoa_r+0x15f4>
    7e44:	800d883a 	mov	r6,r16
    7e48:	880f883a 	mov	r7,r17
    7e4c:	0009883a 	mov	r4,zero
    7e50:	014ffc34 	movhi	r5,16368
    7e54:	00044c00 	call	44c0 <__subdf3>
    7e58:	d9401217 	ldw	r5,72(sp)
    7e5c:	100d883a 	mov	r6,r2
    7e60:	180f883a 	mov	r7,r3
    7e64:	a809883a 	mov	r4,r21
    7e68:	0003ccc0 	call	3ccc <__gedf2>
    7e6c:	db001617 	ldw	r12,88(sp)
    7e70:	00840e16 	blt	zero,r2,8eac <_dtoa_r+0x15e8>
    7e74:	00800044 	movi	r2,1
    7e78:	13006b0e 	bge	r2,r12,8028 <_dtoa_r+0x764>
    7e7c:	d9000717 	ldw	r4,28(sp)
    7e80:	dd800f15 	stw	r22,60(sp)
    7e84:	dcc01015 	stw	r19,64(sp)
    7e88:	2319883a 	add	r12,r4,r12
    7e8c:	dcc01217 	ldw	r19,72(sp)
    7e90:	602d883a 	mov	r22,r12
    7e94:	dc801215 	stw	r18,72(sp)
    7e98:	b825883a 	mov	r18,r23
    7e9c:	00000906 	br	7ec4 <_dtoa_r+0x600>
    7ea0:	00044c00 	call	44c0 <__subdf3>
    7ea4:	a80d883a 	mov	r6,r21
    7ea8:	980f883a 	mov	r7,r19
    7eac:	1009883a 	mov	r4,r2
    7eb0:	180b883a 	mov	r5,r3
    7eb4:	000f2640 	call	f264 <__ledf2>
    7eb8:	1003e816 	blt	r2,zero,8e5c <_dtoa_r+0x1598>
    7ebc:	b825883a 	mov	r18,r23
    7ec0:	bd83e926 	beq	r23,r22,8e68 <_dtoa_r+0x15a4>
    7ec4:	a809883a 	mov	r4,r21
    7ec8:	980b883a 	mov	r5,r19
    7ecc:	000d883a 	mov	r6,zero
    7ed0:	01d00934 	movhi	r7,16420
    7ed4:	0003da80 	call	3da8 <__muldf3>
    7ed8:	000d883a 	mov	r6,zero
    7edc:	01d00934 	movhi	r7,16420
    7ee0:	8009883a 	mov	r4,r16
    7ee4:	880b883a 	mov	r5,r17
    7ee8:	102b883a 	mov	r21,r2
    7eec:	1827883a 	mov	r19,r3
    7ef0:	0003da80 	call	3da8 <__muldf3>
    7ef4:	180b883a 	mov	r5,r3
    7ef8:	1009883a 	mov	r4,r2
    7efc:	1821883a 	mov	r16,r3
    7f00:	1023883a 	mov	r17,r2
    7f04:	0004dbc0 	call	4dbc <__fixdfsi>
    7f08:	1009883a 	mov	r4,r2
    7f0c:	1029883a 	mov	r20,r2
    7f10:	0004e3c0 	call	4e3c <__floatsidf>
    7f14:	8809883a 	mov	r4,r17
    7f18:	800b883a 	mov	r5,r16
    7f1c:	100d883a 	mov	r6,r2
    7f20:	180f883a 	mov	r7,r3
    7f24:	00044c00 	call	44c0 <__subdf3>
    7f28:	a5000c04 	addi	r20,r20,48
    7f2c:	a80d883a 	mov	r6,r21
    7f30:	980f883a 	mov	r7,r19
    7f34:	1009883a 	mov	r4,r2
    7f38:	180b883a 	mov	r5,r3
    7f3c:	95000005 	stb	r20,0(r18)
    7f40:	1021883a 	mov	r16,r2
    7f44:	1823883a 	mov	r17,r3
    7f48:	000f2640 	call	f264 <__ledf2>
    7f4c:	bdc00044 	addi	r23,r23,1
    7f50:	800d883a 	mov	r6,r16
    7f54:	880f883a 	mov	r7,r17
    7f58:	0009883a 	mov	r4,zero
    7f5c:	014ffc34 	movhi	r5,16368
    7f60:	103fcf0e 	bge	r2,zero,7ea0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ea0>
    7f64:	d8c01317 	ldw	r3,76(sp)
    7f68:	d8c00515 	stw	r3,20(sp)
    7f6c:	d9400917 	ldw	r5,36(sp)
    7f70:	e009883a 	mov	r4,fp
    7f74:	000a9f00 	call	a9f0 <_Bfree>
    7f78:	d9000517 	ldw	r4,20(sp)
    7f7c:	d9802317 	ldw	r6,140(sp)
    7f80:	d9c02517 	ldw	r7,148(sp)
    7f84:	b8000005 	stb	zero,0(r23)
    7f88:	20800044 	addi	r2,r4,1
    7f8c:	30800015 	stw	r2,0(r6)
    7f90:	3802aa26 	beq	r7,zero,8a3c <_dtoa_r+0x1178>
    7f94:	3dc00015 	stw	r23,0(r7)
    7f98:	d8800717 	ldw	r2,28(sp)
    7f9c:	003e7906 	br	7984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007984>
    7fa0:	00800434 	movhi	r2,16
    7fa4:	10bfffc4 	addi	r2,r2,-1
    7fa8:	88a2703a 	and	r17,r17,r2
    7fac:	883e851e 	bne	r17,zero,79c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70079c4>
    7fb0:	008000b4 	movhi	r2,2
    7fb4:	10ae5204 	addi	r2,r2,-18104
    7fb8:	003e8406 	br	79cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70079cc>
    7fbc:	10c00204 	addi	r3,r2,8
    7fc0:	003e8706 	br	79e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70079e0>
    7fc4:	01400434 	movhi	r5,16
    7fc8:	297fffc4 	addi	r5,r5,-1
    7fcc:	994a703a 	and	r5,r19,r5
    7fd0:	9009883a 	mov	r4,r18
    7fd4:	843f0044 	addi	r16,r16,-1023
    7fd8:	294ffc34 	orhi	r5,r5,16368
    7fdc:	dd800217 	ldw	r22,8(sp)
    7fe0:	d8001115 	stw	zero,68(sp)
    7fe4:	003ea506 	br	7a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a7c>
    7fe8:	008000b4 	movhi	r2,2
    7fec:	10ae4904 	addi	r2,r2,-18140
    7ff0:	003e6406 	br	7984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007984>
    7ff4:	e0001115 	stw	zero,68(fp)
    7ff8:	000b883a 	mov	r5,zero
    7ffc:	e009883a 	mov	r4,fp
    8000:	000a9480 	call	a948 <_Balloc>
    8004:	01bfffc4 	movi	r6,-1
    8008:	01c00044 	movi	r7,1
    800c:	d8800715 	stw	r2,28(sp)
    8010:	d9800c15 	stw	r6,48(sp)
    8014:	e0801015 	stw	r2,64(fp)
    8018:	d8000315 	stw	zero,12(sp)
    801c:	d9c00b15 	stw	r7,44(sp)
    8020:	d9800615 	stw	r6,24(sp)
    8024:	d8002215 	stw	zero,136(sp)
    8028:	d8800117 	ldw	r2,4(sp)
    802c:	10008916 	blt	r2,zero,8254 <_dtoa_r+0x990>
    8030:	d9000517 	ldw	r4,20(sp)
    8034:	00c00384 	movi	r3,14
    8038:	19008616 	blt	r3,r4,8254 <_dtoa_r+0x990>
    803c:	200490fa 	slli	r2,r4,3
    8040:	00c000b4 	movhi	r3,2
    8044:	d9802217 	ldw	r6,136(sp)
    8048:	18ee7104 	addi	r3,r3,-17980
    804c:	1885883a 	add	r2,r3,r2
    8050:	14000017 	ldw	r16,0(r2)
    8054:	14400117 	ldw	r17,4(r2)
    8058:	30016316 	blt	r6,zero,85e8 <_dtoa_r+0xd24>
    805c:	800d883a 	mov	r6,r16
    8060:	880f883a 	mov	r7,r17
    8064:	9009883a 	mov	r4,r18
    8068:	980b883a 	mov	r5,r19
    806c:	000335c0 	call	335c <__divdf3>
    8070:	180b883a 	mov	r5,r3
    8074:	1009883a 	mov	r4,r2
    8078:	0004dbc0 	call	4dbc <__fixdfsi>
    807c:	1009883a 	mov	r4,r2
    8080:	102b883a 	mov	r21,r2
    8084:	0004e3c0 	call	4e3c <__floatsidf>
    8088:	800d883a 	mov	r6,r16
    808c:	880f883a 	mov	r7,r17
    8090:	1009883a 	mov	r4,r2
    8094:	180b883a 	mov	r5,r3
    8098:	0003da80 	call	3da8 <__muldf3>
    809c:	100d883a 	mov	r6,r2
    80a0:	180f883a 	mov	r7,r3
    80a4:	9009883a 	mov	r4,r18
    80a8:	980b883a 	mov	r5,r19
    80ac:	00044c00 	call	44c0 <__subdf3>
    80b0:	d9c00717 	ldw	r7,28(sp)
    80b4:	1009883a 	mov	r4,r2
    80b8:	a8800c04 	addi	r2,r21,48
    80bc:	38800005 	stb	r2,0(r7)
    80c0:	3dc00044 	addi	r23,r7,1
    80c4:	d9c00617 	ldw	r7,24(sp)
    80c8:	01800044 	movi	r6,1
    80cc:	180b883a 	mov	r5,r3
    80d0:	2005883a 	mov	r2,r4
    80d4:	39803826 	beq	r7,r6,81b8 <_dtoa_r+0x8f4>
    80d8:	000d883a 	mov	r6,zero
    80dc:	01d00934 	movhi	r7,16420
    80e0:	0003da80 	call	3da8 <__muldf3>
    80e4:	000d883a 	mov	r6,zero
    80e8:	000f883a 	mov	r7,zero
    80ec:	1009883a 	mov	r4,r2
    80f0:	180b883a 	mov	r5,r3
    80f4:	1025883a 	mov	r18,r2
    80f8:	1827883a 	mov	r19,r3
    80fc:	0003c440 	call	3c44 <__eqdf2>
    8100:	103f9a26 	beq	r2,zero,7f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f6c>
    8104:	d9c00617 	ldw	r7,24(sp)
    8108:	d8c00717 	ldw	r3,28(sp)
    810c:	b829883a 	mov	r20,r23
    8110:	38bfffc4 	addi	r2,r7,-1
    8114:	18ad883a 	add	r22,r3,r2
    8118:	00000a06 	br	8144 <_dtoa_r+0x880>
    811c:	0003da80 	call	3da8 <__muldf3>
    8120:	000d883a 	mov	r6,zero
    8124:	000f883a 	mov	r7,zero
    8128:	1009883a 	mov	r4,r2
    812c:	180b883a 	mov	r5,r3
    8130:	1025883a 	mov	r18,r2
    8134:	1827883a 	mov	r19,r3
    8138:	b829883a 	mov	r20,r23
    813c:	0003c440 	call	3c44 <__eqdf2>
    8140:	103f8a26 	beq	r2,zero,7f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f6c>
    8144:	800d883a 	mov	r6,r16
    8148:	880f883a 	mov	r7,r17
    814c:	9009883a 	mov	r4,r18
    8150:	980b883a 	mov	r5,r19
    8154:	000335c0 	call	335c <__divdf3>
    8158:	180b883a 	mov	r5,r3
    815c:	1009883a 	mov	r4,r2
    8160:	0004dbc0 	call	4dbc <__fixdfsi>
    8164:	1009883a 	mov	r4,r2
    8168:	102b883a 	mov	r21,r2
    816c:	0004e3c0 	call	4e3c <__floatsidf>
    8170:	800d883a 	mov	r6,r16
    8174:	880f883a 	mov	r7,r17
    8178:	1009883a 	mov	r4,r2
    817c:	180b883a 	mov	r5,r3
    8180:	0003da80 	call	3da8 <__muldf3>
    8184:	100d883a 	mov	r6,r2
    8188:	180f883a 	mov	r7,r3
    818c:	9009883a 	mov	r4,r18
    8190:	980b883a 	mov	r5,r19
    8194:	00044c00 	call	44c0 <__subdf3>
    8198:	aa000c04 	addi	r8,r21,48
    819c:	a2000005 	stb	r8,0(r20)
    81a0:	000d883a 	mov	r6,zero
    81a4:	01d00934 	movhi	r7,16420
    81a8:	1009883a 	mov	r4,r2
    81ac:	180b883a 	mov	r5,r3
    81b0:	a5c00044 	addi	r23,r20,1
    81b4:	b53fd91e 	bne	r22,r20,811c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700811c>
    81b8:	100d883a 	mov	r6,r2
    81bc:	180f883a 	mov	r7,r3
    81c0:	1009883a 	mov	r4,r2
    81c4:	180b883a 	mov	r5,r3
    81c8:	0002ab00 	call	2ab0 <__adddf3>
    81cc:	100d883a 	mov	r6,r2
    81d0:	180f883a 	mov	r7,r3
    81d4:	8009883a 	mov	r4,r16
    81d8:	880b883a 	mov	r5,r17
    81dc:	1027883a 	mov	r19,r2
    81e0:	1825883a 	mov	r18,r3
    81e4:	000f2640 	call	f264 <__ledf2>
    81e8:	10000816 	blt	r2,zero,820c <_dtoa_r+0x948>
    81ec:	980d883a 	mov	r6,r19
    81f0:	900f883a 	mov	r7,r18
    81f4:	8009883a 	mov	r4,r16
    81f8:	880b883a 	mov	r5,r17
    81fc:	0003c440 	call	3c44 <__eqdf2>
    8200:	103f5a1e 	bne	r2,zero,7f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f6c>
    8204:	ad40004c 	andi	r21,r21,1
    8208:	a83f5826 	beq	r21,zero,7f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f6c>
    820c:	bd3fffc3 	ldbu	r20,-1(r23)
    8210:	b8bfffc4 	addi	r2,r23,-1
    8214:	1007883a 	mov	r3,r2
    8218:	01400e44 	movi	r5,57
    821c:	d9800717 	ldw	r6,28(sp)
    8220:	00000506 	br	8238 <_dtoa_r+0x974>
    8224:	18ffffc4 	addi	r3,r3,-1
    8228:	11824726 	beq	r2,r6,8b48 <_dtoa_r+0x1284>
    822c:	1d000003 	ldbu	r20,0(r3)
    8230:	102f883a 	mov	r23,r2
    8234:	10bfffc4 	addi	r2,r2,-1
    8238:	a1003fcc 	andi	r4,r20,255
    823c:	2100201c 	xori	r4,r4,128
    8240:	213fe004 	addi	r4,r4,-128
    8244:	217ff726 	beq	r4,r5,8224 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008224>
    8248:	a2000044 	addi	r8,r20,1
    824c:	12000005 	stb	r8,0(r2)
    8250:	003f4606 	br	7f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f6c>
    8254:	d9000b17 	ldw	r4,44(sp)
    8258:	2000c826 	beq	r4,zero,857c <_dtoa_r+0xcb8>
    825c:	d9800317 	ldw	r6,12(sp)
    8260:	00c00044 	movi	r3,1
    8264:	1980f90e 	bge	r3,r6,864c <_dtoa_r+0xd88>
    8268:	d8800617 	ldw	r2,24(sp)
    826c:	d8c00a17 	ldw	r3,40(sp)
    8270:	157fffc4 	addi	r21,r2,-1
    8274:	1d41f316 	blt	r3,r21,8a44 <_dtoa_r+0x1180>
    8278:	1d6bc83a 	sub	r21,r3,r21
    827c:	d9c00617 	ldw	r7,24(sp)
    8280:	3802aa16 	blt	r7,zero,8d2c <_dtoa_r+0x1468>
    8284:	dd000817 	ldw	r20,32(sp)
    8288:	d8800617 	ldw	r2,24(sp)
    828c:	d8c00817 	ldw	r3,32(sp)
    8290:	01400044 	movi	r5,1
    8294:	e009883a 	mov	r4,fp
    8298:	1887883a 	add	r3,r3,r2
    829c:	d8c00815 	stw	r3,32(sp)
    82a0:	b0ad883a 	add	r22,r22,r2
    82a4:	000ad540 	call	ad54 <__i2b>
    82a8:	1023883a 	mov	r17,r2
    82ac:	a0000826 	beq	r20,zero,82d0 <_dtoa_r+0xa0c>
    82b0:	0580070e 	bge	zero,r22,82d0 <_dtoa_r+0xa0c>
    82b4:	a005883a 	mov	r2,r20
    82b8:	b500b916 	blt	r22,r20,85a0 <_dtoa_r+0xcdc>
    82bc:	d9000817 	ldw	r4,32(sp)
    82c0:	a0a9c83a 	sub	r20,r20,r2
    82c4:	b0adc83a 	sub	r22,r22,r2
    82c8:	2089c83a 	sub	r4,r4,r2
    82cc:	d9000815 	stw	r4,32(sp)
    82d0:	d9800a17 	ldw	r6,40(sp)
    82d4:	0181810e 	bge	zero,r6,88dc <_dtoa_r+0x1018>
    82d8:	d9c00b17 	ldw	r7,44(sp)
    82dc:	3800b326 	beq	r7,zero,85ac <_dtoa_r+0xce8>
    82e0:	a800b226 	beq	r21,zero,85ac <_dtoa_r+0xce8>
    82e4:	880b883a 	mov	r5,r17
    82e8:	a80d883a 	mov	r6,r21
    82ec:	e009883a 	mov	r4,fp
    82f0:	000af880 	call	af88 <__pow5mult>
    82f4:	d9800917 	ldw	r6,36(sp)
    82f8:	100b883a 	mov	r5,r2
    82fc:	e009883a 	mov	r4,fp
    8300:	1023883a 	mov	r17,r2
    8304:	000ad900 	call	ad90 <__multiply>
    8308:	1021883a 	mov	r16,r2
    830c:	d8800a17 	ldw	r2,40(sp)
    8310:	d9400917 	ldw	r5,36(sp)
    8314:	e009883a 	mov	r4,fp
    8318:	1545c83a 	sub	r2,r2,r21
    831c:	d8800a15 	stw	r2,40(sp)
    8320:	000a9f00 	call	a9f0 <_Bfree>
    8324:	d8c00a17 	ldw	r3,40(sp)
    8328:	18009f1e 	bne	r3,zero,85a8 <_dtoa_r+0xce4>
    832c:	05c00044 	movi	r23,1
    8330:	e009883a 	mov	r4,fp
    8334:	b80b883a 	mov	r5,r23
    8338:	000ad540 	call	ad54 <__i2b>
    833c:	d9000d17 	ldw	r4,52(sp)
    8340:	102b883a 	mov	r21,r2
    8344:	2000ce26 	beq	r4,zero,8680 <_dtoa_r+0xdbc>
    8348:	200d883a 	mov	r6,r4
    834c:	100b883a 	mov	r5,r2
    8350:	e009883a 	mov	r4,fp
    8354:	000af880 	call	af88 <__pow5mult>
    8358:	d9800317 	ldw	r6,12(sp)
    835c:	102b883a 	mov	r21,r2
    8360:	b981810e 	bge	r23,r6,8968 <_dtoa_r+0x10a4>
    8364:	0027883a 	mov	r19,zero
    8368:	a8800417 	ldw	r2,16(r21)
    836c:	05c00804 	movi	r23,32
    8370:	10800104 	addi	r2,r2,4
    8374:	1085883a 	add	r2,r2,r2
    8378:	1085883a 	add	r2,r2,r2
    837c:	a885883a 	add	r2,r21,r2
    8380:	11000017 	ldw	r4,0(r2)
    8384:	000ac3c0 	call	ac3c <__hi0bits>
    8388:	b885c83a 	sub	r2,r23,r2
    838c:	1585883a 	add	r2,r2,r22
    8390:	108007cc 	andi	r2,r2,31
    8394:	1000b326 	beq	r2,zero,8664 <_dtoa_r+0xda0>
    8398:	00c00804 	movi	r3,32
    839c:	1887c83a 	sub	r3,r3,r2
    83a0:	01000104 	movi	r4,4
    83a4:	20c2cd0e 	bge	r4,r3,8edc <_dtoa_r+0x1618>
    83a8:	00c00704 	movi	r3,28
    83ac:	1885c83a 	sub	r2,r3,r2
    83b0:	d8c00817 	ldw	r3,32(sp)
    83b4:	a0a9883a 	add	r20,r20,r2
    83b8:	b0ad883a 	add	r22,r22,r2
    83bc:	1887883a 	add	r3,r3,r2
    83c0:	d8c00815 	stw	r3,32(sp)
    83c4:	d9800817 	ldw	r6,32(sp)
    83c8:	0180040e 	bge	zero,r6,83dc <_dtoa_r+0xb18>
    83cc:	800b883a 	mov	r5,r16
    83d0:	e009883a 	mov	r4,fp
    83d4:	000b0c80 	call	b0c8 <__lshift>
    83d8:	1021883a 	mov	r16,r2
    83dc:	0580050e 	bge	zero,r22,83f4 <_dtoa_r+0xb30>
    83e0:	a80b883a 	mov	r5,r21
    83e4:	b00d883a 	mov	r6,r22
    83e8:	e009883a 	mov	r4,fp
    83ec:	000b0c80 	call	b0c8 <__lshift>
    83f0:	102b883a 	mov	r21,r2
    83f4:	d9c00e17 	ldw	r7,56(sp)
    83f8:	3801211e 	bne	r7,zero,8880 <_dtoa_r+0xfbc>
    83fc:	d9800617 	ldw	r6,24(sp)
    8400:	0181380e 	bge	zero,r6,88e4 <_dtoa_r+0x1020>
    8404:	d8c00b17 	ldw	r3,44(sp)
    8408:	1800ab1e 	bne	r3,zero,86b8 <_dtoa_r+0xdf4>
    840c:	dc800717 	ldw	r18,28(sp)
    8410:	dcc00617 	ldw	r19,24(sp)
    8414:	9029883a 	mov	r20,r18
    8418:	00000206 	br	8424 <_dtoa_r+0xb60>
    841c:	000aa180 	call	aa18 <__multadd>
    8420:	1021883a 	mov	r16,r2
    8424:	a80b883a 	mov	r5,r21
    8428:	8009883a 	mov	r4,r16
    842c:	00076c40 	call	76c4 <quorem>
    8430:	10800c04 	addi	r2,r2,48
    8434:	90800005 	stb	r2,0(r18)
    8438:	94800044 	addi	r18,r18,1
    843c:	9507c83a 	sub	r3,r18,r20
    8440:	000f883a 	mov	r7,zero
    8444:	01800284 	movi	r6,10
    8448:	800b883a 	mov	r5,r16
    844c:	e009883a 	mov	r4,fp
    8450:	1cfff216 	blt	r3,r19,841c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700841c>
    8454:	1011883a 	mov	r8,r2
    8458:	d8800617 	ldw	r2,24(sp)
    845c:	0082370e 	bge	zero,r2,8d3c <_dtoa_r+0x1478>
    8460:	d9000717 	ldw	r4,28(sp)
    8464:	0025883a 	mov	r18,zero
    8468:	20af883a 	add	r23,r4,r2
    846c:	01800044 	movi	r6,1
    8470:	800b883a 	mov	r5,r16
    8474:	e009883a 	mov	r4,fp
    8478:	da001715 	stw	r8,92(sp)
    847c:	000b0c80 	call	b0c8 <__lshift>
    8480:	a80b883a 	mov	r5,r21
    8484:	1009883a 	mov	r4,r2
    8488:	d8800915 	stw	r2,36(sp)
    848c:	000b2100 	call	b210 <__mcmp>
    8490:	da001717 	ldw	r8,92(sp)
    8494:	0081800e 	bge	zero,r2,8a98 <_dtoa_r+0x11d4>
    8498:	b93fffc3 	ldbu	r4,-1(r23)
    849c:	b8bfffc4 	addi	r2,r23,-1
    84a0:	1007883a 	mov	r3,r2
    84a4:	01800e44 	movi	r6,57
    84a8:	d9c00717 	ldw	r7,28(sp)
    84ac:	00000506 	br	84c4 <_dtoa_r+0xc00>
    84b0:	18ffffc4 	addi	r3,r3,-1
    84b4:	11c12326 	beq	r2,r7,8944 <_dtoa_r+0x1080>
    84b8:	19000003 	ldbu	r4,0(r3)
    84bc:	102f883a 	mov	r23,r2
    84c0:	10bfffc4 	addi	r2,r2,-1
    84c4:	21403fcc 	andi	r5,r4,255
    84c8:	2940201c 	xori	r5,r5,128
    84cc:	297fe004 	addi	r5,r5,-128
    84d0:	29bff726 	beq	r5,r6,84b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084b0>
    84d4:	21000044 	addi	r4,r4,1
    84d8:	11000005 	stb	r4,0(r2)
    84dc:	a80b883a 	mov	r5,r21
    84e0:	e009883a 	mov	r4,fp
    84e4:	000a9f00 	call	a9f0 <_Bfree>
    84e8:	883ea026 	beq	r17,zero,7f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f6c>
    84ec:	90000426 	beq	r18,zero,8500 <_dtoa_r+0xc3c>
    84f0:	94400326 	beq	r18,r17,8500 <_dtoa_r+0xc3c>
    84f4:	900b883a 	mov	r5,r18
    84f8:	e009883a 	mov	r4,fp
    84fc:	000a9f00 	call	a9f0 <_Bfree>
    8500:	880b883a 	mov	r5,r17
    8504:	e009883a 	mov	r4,fp
    8508:	000a9f00 	call	a9f0 <_Bfree>
    850c:	003e9706 	br	7f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f6c>
    8510:	01800044 	movi	r6,1
    8514:	d9800e15 	stw	r6,56(sp)
    8518:	003d9606 	br	7b74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b74>
    851c:	d8800817 	ldw	r2,32(sp)
    8520:	d8c00517 	ldw	r3,20(sp)
    8524:	d8000d15 	stw	zero,52(sp)
    8528:	10c5c83a 	sub	r2,r2,r3
    852c:	00c9c83a 	sub	r4,zero,r3
    8530:	d8800815 	stw	r2,32(sp)
    8534:	d9000a15 	stw	r4,40(sp)
    8538:	003d9706 	br	7b98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b98>
    853c:	05adc83a 	sub	r22,zero,r22
    8540:	dd800815 	stw	r22,32(sp)
    8544:	002d883a 	mov	r22,zero
    8548:	003d8e06 	br	7b84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b84>
    854c:	d9000517 	ldw	r4,20(sp)
    8550:	0004e3c0 	call	4e3c <__floatsidf>
    8554:	100d883a 	mov	r6,r2
    8558:	180f883a 	mov	r7,r3
    855c:	a009883a 	mov	r4,r20
    8560:	880b883a 	mov	r5,r17
    8564:	0003c440 	call	3c44 <__eqdf2>
    8568:	103d7126 	beq	r2,zero,7b30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b30>
    856c:	d9c00517 	ldw	r7,20(sp)
    8570:	39ffffc4 	addi	r7,r7,-1
    8574:	d9c00515 	stw	r7,20(sp)
    8578:	003d6d06 	br	7b30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b30>
    857c:	dd400a17 	ldw	r21,40(sp)
    8580:	dd000817 	ldw	r20,32(sp)
    8584:	0023883a 	mov	r17,zero
    8588:	003f4806 	br	82ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70082ac>
    858c:	10e3c83a 	sub	r17,r2,r3
    8590:	9448983a 	sll	r4,r18,r17
    8594:	003d3206 	br	7a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a60>
    8598:	d8000e15 	stw	zero,56(sp)
    859c:	003d7506 	br	7b74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b74>
    85a0:	b005883a 	mov	r2,r22
    85a4:	003f4506 	br	82bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70082bc>
    85a8:	dc000915 	stw	r16,36(sp)
    85ac:	d9800a17 	ldw	r6,40(sp)
    85b0:	d9400917 	ldw	r5,36(sp)
    85b4:	e009883a 	mov	r4,fp
    85b8:	000af880 	call	af88 <__pow5mult>
    85bc:	1021883a 	mov	r16,r2
    85c0:	003f5a06 	br	832c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700832c>
    85c4:	01c00044 	movi	r7,1
    85c8:	d9c00b15 	stw	r7,44(sp)
    85cc:	d8802217 	ldw	r2,136(sp)
    85d0:	0081280e 	bge	zero,r2,8a74 <_dtoa_r+0x11b0>
    85d4:	100d883a 	mov	r6,r2
    85d8:	1021883a 	mov	r16,r2
    85dc:	d8800c15 	stw	r2,48(sp)
    85e0:	d8800615 	stw	r2,24(sp)
    85e4:	003d8806 	br	7c08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c08>
    85e8:	d8800617 	ldw	r2,24(sp)
    85ec:	00be9b16 	blt	zero,r2,805c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700805c>
    85f0:	10010f1e 	bne	r2,zero,8a30 <_dtoa_r+0x116c>
    85f4:	880b883a 	mov	r5,r17
    85f8:	000d883a 	mov	r6,zero
    85fc:	01d00534 	movhi	r7,16404
    8600:	8009883a 	mov	r4,r16
    8604:	0003da80 	call	3da8 <__muldf3>
    8608:	900d883a 	mov	r6,r18
    860c:	980f883a 	mov	r7,r19
    8610:	1009883a 	mov	r4,r2
    8614:	180b883a 	mov	r5,r3
    8618:	0003ccc0 	call	3ccc <__gedf2>
    861c:	002b883a 	mov	r21,zero
    8620:	0023883a 	mov	r17,zero
    8624:	1000bf16 	blt	r2,zero,8924 <_dtoa_r+0x1060>
    8628:	d9802217 	ldw	r6,136(sp)
    862c:	ddc00717 	ldw	r23,28(sp)
    8630:	018c303a 	nor	r6,zero,r6
    8634:	d9800515 	stw	r6,20(sp)
    8638:	a80b883a 	mov	r5,r21
    863c:	e009883a 	mov	r4,fp
    8640:	000a9f00 	call	a9f0 <_Bfree>
    8644:	883e4926 	beq	r17,zero,7f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f6c>
    8648:	003fad06 	br	8500 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008500>
    864c:	d9c01117 	ldw	r7,68(sp)
    8650:	3801bc26 	beq	r7,zero,8d44 <_dtoa_r+0x1480>
    8654:	10810cc4 	addi	r2,r2,1075
    8658:	dd400a17 	ldw	r21,40(sp)
    865c:	dd000817 	ldw	r20,32(sp)
    8660:	003f0a06 	br	828c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700828c>
    8664:	00800704 	movi	r2,28
    8668:	d9000817 	ldw	r4,32(sp)
    866c:	a0a9883a 	add	r20,r20,r2
    8670:	b0ad883a 	add	r22,r22,r2
    8674:	2089883a 	add	r4,r4,r2
    8678:	d9000815 	stw	r4,32(sp)
    867c:	003f5106 	br	83c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70083c4>
    8680:	d8c00317 	ldw	r3,12(sp)
    8684:	b8c1fc0e 	bge	r23,r3,8e78 <_dtoa_r+0x15b4>
    8688:	0027883a 	mov	r19,zero
    868c:	b805883a 	mov	r2,r23
    8690:	003f3e06 	br	838c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700838c>
    8694:	880b883a 	mov	r5,r17
    8698:	e009883a 	mov	r4,fp
    869c:	000f883a 	mov	r7,zero
    86a0:	01800284 	movi	r6,10
    86a4:	000aa180 	call	aa18 <__multadd>
    86a8:	d9000c17 	ldw	r4,48(sp)
    86ac:	1023883a 	mov	r17,r2
    86b0:	0102040e 	bge	zero,r4,8ec4 <_dtoa_r+0x1600>
    86b4:	d9000615 	stw	r4,24(sp)
    86b8:	0500050e 	bge	zero,r20,86d0 <_dtoa_r+0xe0c>
    86bc:	880b883a 	mov	r5,r17
    86c0:	a00d883a 	mov	r6,r20
    86c4:	e009883a 	mov	r4,fp
    86c8:	000b0c80 	call	b0c8 <__lshift>
    86cc:	1023883a 	mov	r17,r2
    86d0:	9801241e 	bne	r19,zero,8b64 <_dtoa_r+0x12a0>
    86d4:	8829883a 	mov	r20,r17
    86d8:	d9000617 	ldw	r4,24(sp)
    86dc:	dcc00717 	ldw	r19,28(sp)
    86e0:	9480004c 	andi	r18,r18,1
    86e4:	20bfffc4 	addi	r2,r4,-1
    86e8:	9885883a 	add	r2,r19,r2
    86ec:	d8800415 	stw	r2,16(sp)
    86f0:	dc800615 	stw	r18,24(sp)
    86f4:	a80b883a 	mov	r5,r21
    86f8:	8009883a 	mov	r4,r16
    86fc:	00076c40 	call	76c4 <quorem>
    8700:	880b883a 	mov	r5,r17
    8704:	8009883a 	mov	r4,r16
    8708:	102f883a 	mov	r23,r2
    870c:	000b2100 	call	b210 <__mcmp>
    8710:	a80b883a 	mov	r5,r21
    8714:	a00d883a 	mov	r6,r20
    8718:	e009883a 	mov	r4,fp
    871c:	102d883a 	mov	r22,r2
    8720:	000b2700 	call	b270 <__mdiff>
    8724:	1007883a 	mov	r3,r2
    8728:	10800317 	ldw	r2,12(r2)
    872c:	bc800c04 	addi	r18,r23,48
    8730:	180b883a 	mov	r5,r3
    8734:	10004e1e 	bne	r2,zero,8870 <_dtoa_r+0xfac>
    8738:	8009883a 	mov	r4,r16
    873c:	d8c01615 	stw	r3,88(sp)
    8740:	000b2100 	call	b210 <__mcmp>
    8744:	d8c01617 	ldw	r3,88(sp)
    8748:	e009883a 	mov	r4,fp
    874c:	d8801615 	stw	r2,88(sp)
    8750:	180b883a 	mov	r5,r3
    8754:	000a9f00 	call	a9f0 <_Bfree>
    8758:	d8801617 	ldw	r2,88(sp)
    875c:	1000041e 	bne	r2,zero,8770 <_dtoa_r+0xeac>
    8760:	d9800317 	ldw	r6,12(sp)
    8764:	3000021e 	bne	r6,zero,8770 <_dtoa_r+0xeac>
    8768:	d8c00617 	ldw	r3,24(sp)
    876c:	18003726 	beq	r3,zero,884c <_dtoa_r+0xf88>
    8770:	b0002016 	blt	r22,zero,87f4 <_dtoa_r+0xf30>
    8774:	b000041e 	bne	r22,zero,8788 <_dtoa_r+0xec4>
    8778:	d9000317 	ldw	r4,12(sp)
    877c:	2000021e 	bne	r4,zero,8788 <_dtoa_r+0xec4>
    8780:	d8c00617 	ldw	r3,24(sp)
    8784:	18001b26 	beq	r3,zero,87f4 <_dtoa_r+0xf30>
    8788:	00810716 	blt	zero,r2,8ba8 <_dtoa_r+0x12e4>
    878c:	d8c00417 	ldw	r3,16(sp)
    8790:	9d800044 	addi	r22,r19,1
    8794:	9c800005 	stb	r18,0(r19)
    8798:	b02f883a 	mov	r23,r22
    879c:	98c10626 	beq	r19,r3,8bb8 <_dtoa_r+0x12f4>
    87a0:	800b883a 	mov	r5,r16
    87a4:	000f883a 	mov	r7,zero
    87a8:	01800284 	movi	r6,10
    87ac:	e009883a 	mov	r4,fp
    87b0:	000aa180 	call	aa18 <__multadd>
    87b4:	1021883a 	mov	r16,r2
    87b8:	000f883a 	mov	r7,zero
    87bc:	01800284 	movi	r6,10
    87c0:	880b883a 	mov	r5,r17
    87c4:	e009883a 	mov	r4,fp
    87c8:	8d002526 	beq	r17,r20,8860 <_dtoa_r+0xf9c>
    87cc:	000aa180 	call	aa18 <__multadd>
    87d0:	a00b883a 	mov	r5,r20
    87d4:	000f883a 	mov	r7,zero
    87d8:	01800284 	movi	r6,10
    87dc:	e009883a 	mov	r4,fp
    87e0:	1023883a 	mov	r17,r2
    87e4:	000aa180 	call	aa18 <__multadd>
    87e8:	1029883a 	mov	r20,r2
    87ec:	b027883a 	mov	r19,r22
    87f0:	003fc006 	br	86f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086f4>
    87f4:	9011883a 	mov	r8,r18
    87f8:	00800e0e 	bge	zero,r2,8834 <_dtoa_r+0xf70>
    87fc:	800b883a 	mov	r5,r16
    8800:	01800044 	movi	r6,1
    8804:	e009883a 	mov	r4,fp
    8808:	da001715 	stw	r8,92(sp)
    880c:	000b0c80 	call	b0c8 <__lshift>
    8810:	a80b883a 	mov	r5,r21
    8814:	1009883a 	mov	r4,r2
    8818:	1021883a 	mov	r16,r2
    881c:	000b2100 	call	b210 <__mcmp>
    8820:	da001717 	ldw	r8,92(sp)
    8824:	0081960e 	bge	zero,r2,8e80 <_dtoa_r+0x15bc>
    8828:	00800e44 	movi	r2,57
    882c:	40817026 	beq	r8,r2,8df0 <_dtoa_r+0x152c>
    8830:	ba000c44 	addi	r8,r23,49
    8834:	8825883a 	mov	r18,r17
    8838:	9dc00044 	addi	r23,r19,1
    883c:	9a000005 	stb	r8,0(r19)
    8840:	a023883a 	mov	r17,r20
    8844:	dc000915 	stw	r16,36(sp)
    8848:	003f2406 	br	84dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084dc>
    884c:	00800e44 	movi	r2,57
    8850:	9011883a 	mov	r8,r18
    8854:	90816626 	beq	r18,r2,8df0 <_dtoa_r+0x152c>
    8858:	05bff516 	blt	zero,r22,8830 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008830>
    885c:	003ff506 	br	8834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008834>
    8860:	000aa180 	call	aa18 <__multadd>
    8864:	1023883a 	mov	r17,r2
    8868:	1029883a 	mov	r20,r2
    886c:	003fdf06 	br	87ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087ec>
    8870:	e009883a 	mov	r4,fp
    8874:	000a9f00 	call	a9f0 <_Bfree>
    8878:	00800044 	movi	r2,1
    887c:	003fbc06 	br	8770 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008770>
    8880:	a80b883a 	mov	r5,r21
    8884:	8009883a 	mov	r4,r16
    8888:	000b2100 	call	b210 <__mcmp>
    888c:	103edb0e 	bge	r2,zero,83fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70083fc>
    8890:	800b883a 	mov	r5,r16
    8894:	000f883a 	mov	r7,zero
    8898:	01800284 	movi	r6,10
    889c:	e009883a 	mov	r4,fp
    88a0:	000aa180 	call	aa18 <__multadd>
    88a4:	1021883a 	mov	r16,r2
    88a8:	d8800517 	ldw	r2,20(sp)
    88ac:	d8c00b17 	ldw	r3,44(sp)
    88b0:	10bfffc4 	addi	r2,r2,-1
    88b4:	d8800515 	stw	r2,20(sp)
    88b8:	183f761e 	bne	r3,zero,8694 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008694>
    88bc:	d9000c17 	ldw	r4,48(sp)
    88c0:	0101730e 	bge	zero,r4,8e90 <_dtoa_r+0x15cc>
    88c4:	d9000615 	stw	r4,24(sp)
    88c8:	003ed006 	br	840c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700840c>
    88cc:	00800084 	movi	r2,2
    88d0:	3081861e 	bne	r6,r2,8eec <_dtoa_r+0x1628>
    88d4:	d8000b15 	stw	zero,44(sp)
    88d8:	003f3c06 	br	85cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70085cc>
    88dc:	dc000917 	ldw	r16,36(sp)
    88e0:	003e9206 	br	832c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700832c>
    88e4:	d9c00317 	ldw	r7,12(sp)
    88e8:	00800084 	movi	r2,2
    88ec:	11fec50e 	bge	r2,r7,8404 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008404>
    88f0:	d9000617 	ldw	r4,24(sp)
    88f4:	20013c1e 	bne	r4,zero,8de8 <_dtoa_r+0x1524>
    88f8:	a80b883a 	mov	r5,r21
    88fc:	000f883a 	mov	r7,zero
    8900:	01800144 	movi	r6,5
    8904:	e009883a 	mov	r4,fp
    8908:	000aa180 	call	aa18 <__multadd>
    890c:	100b883a 	mov	r5,r2
    8910:	8009883a 	mov	r4,r16
    8914:	102b883a 	mov	r21,r2
    8918:	000b2100 	call	b210 <__mcmp>
    891c:	dc000915 	stw	r16,36(sp)
    8920:	00bf410e 	bge	zero,r2,8628 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008628>
    8924:	d9c00717 	ldw	r7,28(sp)
    8928:	00800c44 	movi	r2,49
    892c:	38800005 	stb	r2,0(r7)
    8930:	d8800517 	ldw	r2,20(sp)
    8934:	3dc00044 	addi	r23,r7,1
    8938:	10800044 	addi	r2,r2,1
    893c:	d8800515 	stw	r2,20(sp)
    8940:	003f3d06 	br	8638 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008638>
    8944:	d9800517 	ldw	r6,20(sp)
    8948:	d9c00717 	ldw	r7,28(sp)
    894c:	00800c44 	movi	r2,49
    8950:	31800044 	addi	r6,r6,1
    8954:	d9800515 	stw	r6,20(sp)
    8958:	38800005 	stb	r2,0(r7)
    895c:	003edf06 	br	84dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084dc>
    8960:	d8000b15 	stw	zero,44(sp)
    8964:	003c9f06 	br	7be4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007be4>
    8968:	903e7e1e 	bne	r18,zero,8364 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008364>
    896c:	00800434 	movhi	r2,16
    8970:	10bfffc4 	addi	r2,r2,-1
    8974:	9884703a 	and	r2,r19,r2
    8978:	1000ea1e 	bne	r2,zero,8d24 <_dtoa_r+0x1460>
    897c:	9cdffc2c 	andhi	r19,r19,32752
    8980:	9800e826 	beq	r19,zero,8d24 <_dtoa_r+0x1460>
    8984:	d9c00817 	ldw	r7,32(sp)
    8988:	b5800044 	addi	r22,r22,1
    898c:	04c00044 	movi	r19,1
    8990:	39c00044 	addi	r7,r7,1
    8994:	d9c00815 	stw	r7,32(sp)
    8998:	d8800d17 	ldw	r2,52(sp)
    899c:	103e721e 	bne	r2,zero,8368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008368>
    89a0:	00800044 	movi	r2,1
    89a4:	003e7906 	br	838c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700838c>
    89a8:	8009883a 	mov	r4,r16
    89ac:	0004e3c0 	call	4e3c <__floatsidf>
    89b0:	d9800f17 	ldw	r6,60(sp)
    89b4:	d9c01017 	ldw	r7,64(sp)
    89b8:	1009883a 	mov	r4,r2
    89bc:	180b883a 	mov	r5,r3
    89c0:	0003da80 	call	3da8 <__muldf3>
    89c4:	000d883a 	mov	r6,zero
    89c8:	01d00734 	movhi	r7,16412
    89cc:	1009883a 	mov	r4,r2
    89d0:	180b883a 	mov	r5,r3
    89d4:	0002ab00 	call	2ab0 <__adddf3>
    89d8:	047f3034 	movhi	r17,64704
    89dc:	1021883a 	mov	r16,r2
    89e0:	1c63883a 	add	r17,r3,r17
    89e4:	d9000f17 	ldw	r4,60(sp)
    89e8:	d9401017 	ldw	r5,64(sp)
    89ec:	000d883a 	mov	r6,zero
    89f0:	01d00534 	movhi	r7,16404
    89f4:	00044c00 	call	44c0 <__subdf3>
    89f8:	800d883a 	mov	r6,r16
    89fc:	880f883a 	mov	r7,r17
    8a00:	1009883a 	mov	r4,r2
    8a04:	180b883a 	mov	r5,r3
    8a08:	102b883a 	mov	r21,r2
    8a0c:	1829883a 	mov	r20,r3
    8a10:	0003ccc0 	call	3ccc <__gedf2>
    8a14:	00806c16 	blt	zero,r2,8bc8 <_dtoa_r+0x1304>
    8a18:	89e0003c 	xorhi	r7,r17,32768
    8a1c:	800d883a 	mov	r6,r16
    8a20:	a809883a 	mov	r4,r21
    8a24:	a00b883a 	mov	r5,r20
    8a28:	000f2640 	call	f264 <__ledf2>
    8a2c:	103d7e0e 	bge	r2,zero,8028 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008028>
    8a30:	002b883a 	mov	r21,zero
    8a34:	0023883a 	mov	r17,zero
    8a38:	003efb06 	br	8628 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008628>
    8a3c:	d8800717 	ldw	r2,28(sp)
    8a40:	003bd006 	br	7984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007984>
    8a44:	d9000a17 	ldw	r4,40(sp)
    8a48:	d9800d17 	ldw	r6,52(sp)
    8a4c:	dd400a15 	stw	r21,40(sp)
    8a50:	a905c83a 	sub	r2,r21,r4
    8a54:	308d883a 	add	r6,r6,r2
    8a58:	d9800d15 	stw	r6,52(sp)
    8a5c:	002b883a 	mov	r21,zero
    8a60:	003e0606 	br	827c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700827c>
    8a64:	9023883a 	mov	r17,r18
    8a68:	9829883a 	mov	r20,r19
    8a6c:	04000084 	movi	r16,2
    8a70:	003c9206 	br	7cbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007cbc>
    8a74:	04000044 	movi	r16,1
    8a78:	dc000c15 	stw	r16,48(sp)
    8a7c:	dc000615 	stw	r16,24(sp)
    8a80:	dc002215 	stw	r16,136(sp)
    8a84:	e0001115 	stw	zero,68(fp)
    8a88:	000b883a 	mov	r5,zero
    8a8c:	003c6906 	br	7c34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c34>
    8a90:	3021883a 	mov	r16,r6
    8a94:	003ffb06 	br	8a84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a84>
    8a98:	1000021e 	bne	r2,zero,8aa4 <_dtoa_r+0x11e0>
    8a9c:	4200004c 	andi	r8,r8,1
    8aa0:	403e7d1e 	bne	r8,zero,8498 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008498>
    8aa4:	01000c04 	movi	r4,48
    8aa8:	00000106 	br	8ab0 <_dtoa_r+0x11ec>
    8aac:	102f883a 	mov	r23,r2
    8ab0:	b8bfffc4 	addi	r2,r23,-1
    8ab4:	10c00007 	ldb	r3,0(r2)
    8ab8:	193ffc26 	beq	r3,r4,8aac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008aac>
    8abc:	003e8706 	br	84dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084dc>
    8ac0:	d8800517 	ldw	r2,20(sp)
    8ac4:	00a3c83a 	sub	r17,zero,r2
    8ac8:	8800a426 	beq	r17,zero,8d5c <_dtoa_r+0x1498>
    8acc:	888003cc 	andi	r2,r17,15
    8ad0:	100490fa 	slli	r2,r2,3
    8ad4:	00c000b4 	movhi	r3,2
    8ad8:	18ee7104 	addi	r3,r3,-17980
    8adc:	1885883a 	add	r2,r3,r2
    8ae0:	11800017 	ldw	r6,0(r2)
    8ae4:	11c00117 	ldw	r7,4(r2)
    8ae8:	9009883a 	mov	r4,r18
    8aec:	980b883a 	mov	r5,r19
    8af0:	8823d13a 	srai	r17,r17,4
    8af4:	0003da80 	call	3da8 <__muldf3>
    8af8:	d8800f15 	stw	r2,60(sp)
    8afc:	d8c01015 	stw	r3,64(sp)
    8b00:	8800e826 	beq	r17,zero,8ea4 <_dtoa_r+0x15e0>
    8b04:	050000b4 	movhi	r20,2
    8b08:	a52e6704 	addi	r20,r20,-18020
    8b0c:	04000084 	movi	r16,2
    8b10:	8980004c 	andi	r6,r17,1
    8b14:	1009883a 	mov	r4,r2
    8b18:	8823d07a 	srai	r17,r17,1
    8b1c:	180b883a 	mov	r5,r3
    8b20:	30000426 	beq	r6,zero,8b34 <_dtoa_r+0x1270>
    8b24:	a1800017 	ldw	r6,0(r20)
    8b28:	a1c00117 	ldw	r7,4(r20)
    8b2c:	84000044 	addi	r16,r16,1
    8b30:	0003da80 	call	3da8 <__muldf3>
    8b34:	a5000204 	addi	r20,r20,8
    8b38:	883ff51e 	bne	r17,zero,8b10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b10>
    8b3c:	d8800f15 	stw	r2,60(sp)
    8b40:	d8c01015 	stw	r3,64(sp)
    8b44:	003c7606 	br	7d20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d20>
    8b48:	00c00c04 	movi	r3,48
    8b4c:	10c00005 	stb	r3,0(r2)
    8b50:	d8c00517 	ldw	r3,20(sp)
    8b54:	bd3fffc3 	ldbu	r20,-1(r23)
    8b58:	18c00044 	addi	r3,r3,1
    8b5c:	d8c00515 	stw	r3,20(sp)
    8b60:	003db906 	br	8248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008248>
    8b64:	89400117 	ldw	r5,4(r17)
    8b68:	e009883a 	mov	r4,fp
    8b6c:	000a9480 	call	a948 <_Balloc>
    8b70:	89800417 	ldw	r6,16(r17)
    8b74:	89400304 	addi	r5,r17,12
    8b78:	11000304 	addi	r4,r2,12
    8b7c:	31800084 	addi	r6,r6,2
    8b80:	318d883a 	add	r6,r6,r6
    8b84:	318d883a 	add	r6,r6,r6
    8b88:	1027883a 	mov	r19,r2
    8b8c:	000a6d80 	call	a6d8 <memcpy>
    8b90:	01800044 	movi	r6,1
    8b94:	980b883a 	mov	r5,r19
    8b98:	e009883a 	mov	r4,fp
    8b9c:	000b0c80 	call	b0c8 <__lshift>
    8ba0:	1029883a 	mov	r20,r2
    8ba4:	003ecc06 	br	86d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086d8>
    8ba8:	00800e44 	movi	r2,57
    8bac:	90809026 	beq	r18,r2,8df0 <_dtoa_r+0x152c>
    8bb0:	92000044 	addi	r8,r18,1
    8bb4:	003f1f06 	br	8834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008834>
    8bb8:	9011883a 	mov	r8,r18
    8bbc:	8825883a 	mov	r18,r17
    8bc0:	a023883a 	mov	r17,r20
    8bc4:	003e2906 	br	846c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700846c>
    8bc8:	002b883a 	mov	r21,zero
    8bcc:	0023883a 	mov	r17,zero
    8bd0:	003f5406 	br	8924 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008924>
    8bd4:	61bfffc4 	addi	r6,r12,-1
    8bd8:	300490fa 	slli	r2,r6,3
    8bdc:	00c000b4 	movhi	r3,2
    8be0:	18ee7104 	addi	r3,r3,-17980
    8be4:	1885883a 	add	r2,r3,r2
    8be8:	11000017 	ldw	r4,0(r2)
    8bec:	11400117 	ldw	r5,4(r2)
    8bf0:	d8800717 	ldw	r2,28(sp)
    8bf4:	880f883a 	mov	r7,r17
    8bf8:	d9801215 	stw	r6,72(sp)
    8bfc:	800d883a 	mov	r6,r16
    8c00:	db001615 	stw	r12,88(sp)
    8c04:	15c00044 	addi	r23,r2,1
    8c08:	0003da80 	call	3da8 <__muldf3>
    8c0c:	d9401017 	ldw	r5,64(sp)
    8c10:	d9000f17 	ldw	r4,60(sp)
    8c14:	d8c01515 	stw	r3,84(sp)
    8c18:	d8801415 	stw	r2,80(sp)
    8c1c:	0004dbc0 	call	4dbc <__fixdfsi>
    8c20:	1009883a 	mov	r4,r2
    8c24:	1021883a 	mov	r16,r2
    8c28:	0004e3c0 	call	4e3c <__floatsidf>
    8c2c:	d9000f17 	ldw	r4,60(sp)
    8c30:	d9401017 	ldw	r5,64(sp)
    8c34:	100d883a 	mov	r6,r2
    8c38:	180f883a 	mov	r7,r3
    8c3c:	00044c00 	call	44c0 <__subdf3>
    8c40:	1829883a 	mov	r20,r3
    8c44:	d8c00717 	ldw	r3,28(sp)
    8c48:	84000c04 	addi	r16,r16,48
    8c4c:	1023883a 	mov	r17,r2
    8c50:	1c000005 	stb	r16,0(r3)
    8c54:	db001617 	ldw	r12,88(sp)
    8c58:	00800044 	movi	r2,1
    8c5c:	60802226 	beq	r12,r2,8ce8 <_dtoa_r+0x1424>
    8c60:	d9c00717 	ldw	r7,28(sp)
    8c64:	8805883a 	mov	r2,r17
    8c68:	b82b883a 	mov	r21,r23
    8c6c:	3b19883a 	add	r12,r7,r12
    8c70:	6023883a 	mov	r17,r12
    8c74:	a007883a 	mov	r3,r20
    8c78:	dc800f15 	stw	r18,60(sp)
    8c7c:	000d883a 	mov	r6,zero
    8c80:	01d00934 	movhi	r7,16420
    8c84:	1009883a 	mov	r4,r2
    8c88:	180b883a 	mov	r5,r3
    8c8c:	0003da80 	call	3da8 <__muldf3>
    8c90:	180b883a 	mov	r5,r3
    8c94:	1009883a 	mov	r4,r2
    8c98:	1829883a 	mov	r20,r3
    8c9c:	1025883a 	mov	r18,r2
    8ca0:	0004dbc0 	call	4dbc <__fixdfsi>
    8ca4:	1009883a 	mov	r4,r2
    8ca8:	1021883a 	mov	r16,r2
    8cac:	0004e3c0 	call	4e3c <__floatsidf>
    8cb0:	100d883a 	mov	r6,r2
    8cb4:	180f883a 	mov	r7,r3
    8cb8:	9009883a 	mov	r4,r18
    8cbc:	a00b883a 	mov	r5,r20
    8cc0:	84000c04 	addi	r16,r16,48
    8cc4:	00044c00 	call	44c0 <__subdf3>
    8cc8:	ad400044 	addi	r21,r21,1
    8ccc:	ac3fffc5 	stb	r16,-1(r21)
    8cd0:	ac7fea1e 	bne	r21,r17,8c7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008c7c>
    8cd4:	1023883a 	mov	r17,r2
    8cd8:	d8801217 	ldw	r2,72(sp)
    8cdc:	dc800f17 	ldw	r18,60(sp)
    8ce0:	1829883a 	mov	r20,r3
    8ce4:	b8af883a 	add	r23,r23,r2
    8ce8:	d9001417 	ldw	r4,80(sp)
    8cec:	d9401517 	ldw	r5,84(sp)
    8cf0:	000d883a 	mov	r6,zero
    8cf4:	01cff834 	movhi	r7,16352
    8cf8:	0002ab00 	call	2ab0 <__adddf3>
    8cfc:	880d883a 	mov	r6,r17
    8d00:	a00f883a 	mov	r7,r20
    8d04:	1009883a 	mov	r4,r2
    8d08:	180b883a 	mov	r5,r3
    8d0c:	000f2640 	call	f264 <__ledf2>
    8d10:	10003e0e 	bge	r2,zero,8e0c <_dtoa_r+0x1548>
    8d14:	d9001317 	ldw	r4,76(sp)
    8d18:	bd3fffc3 	ldbu	r20,-1(r23)
    8d1c:	d9000515 	stw	r4,20(sp)
    8d20:	003d3b06 	br	8210 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008210>
    8d24:	0027883a 	mov	r19,zero
    8d28:	003f1b06 	br	8998 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008998>
    8d2c:	d8800817 	ldw	r2,32(sp)
    8d30:	11e9c83a 	sub	r20,r2,r7
    8d34:	0005883a 	mov	r2,zero
    8d38:	003d5406 	br	828c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700828c>
    8d3c:	00800044 	movi	r2,1
    8d40:	003dc706 	br	8460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008460>
    8d44:	d8c00217 	ldw	r3,8(sp)
    8d48:	00800d84 	movi	r2,54
    8d4c:	dd400a17 	ldw	r21,40(sp)
    8d50:	10c5c83a 	sub	r2,r2,r3
    8d54:	dd000817 	ldw	r20,32(sp)
    8d58:	003d4c06 	br	828c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700828c>
    8d5c:	dc800f15 	stw	r18,60(sp)
    8d60:	dcc01015 	stw	r19,64(sp)
    8d64:	04000084 	movi	r16,2
    8d68:	003bed06 	br	7d20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d20>
    8d6c:	d9000617 	ldw	r4,24(sp)
    8d70:	203f0d26 	beq	r4,zero,89a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089a8>
    8d74:	d9800c17 	ldw	r6,48(sp)
    8d78:	01bcab0e 	bge	zero,r6,8028 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008028>
    8d7c:	d9401017 	ldw	r5,64(sp)
    8d80:	d9000f17 	ldw	r4,60(sp)
    8d84:	000d883a 	mov	r6,zero
    8d88:	01d00934 	movhi	r7,16420
    8d8c:	0003da80 	call	3da8 <__muldf3>
    8d90:	81000044 	addi	r4,r16,1
    8d94:	d8800f15 	stw	r2,60(sp)
    8d98:	d8c01015 	stw	r3,64(sp)
    8d9c:	0004e3c0 	call	4e3c <__floatsidf>
    8da0:	d9800f17 	ldw	r6,60(sp)
    8da4:	d9c01017 	ldw	r7,64(sp)
    8da8:	1009883a 	mov	r4,r2
    8dac:	180b883a 	mov	r5,r3
    8db0:	0003da80 	call	3da8 <__muldf3>
    8db4:	01d00734 	movhi	r7,16412
    8db8:	000d883a 	mov	r6,zero
    8dbc:	1009883a 	mov	r4,r2
    8dc0:	180b883a 	mov	r5,r3
    8dc4:	0002ab00 	call	2ab0 <__adddf3>
    8dc8:	d9c00517 	ldw	r7,20(sp)
    8dcc:	047f3034 	movhi	r17,64704
    8dd0:	1021883a 	mov	r16,r2
    8dd4:	39ffffc4 	addi	r7,r7,-1
    8dd8:	d9c01315 	stw	r7,76(sp)
    8ddc:	1c63883a 	add	r17,r3,r17
    8de0:	db000c17 	ldw	r12,48(sp)
    8de4:	003bea06 	br	7d90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d90>
    8de8:	dc000915 	stw	r16,36(sp)
    8dec:	003e0e06 	br	8628 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008628>
    8df0:	01000e44 	movi	r4,57
    8df4:	8825883a 	mov	r18,r17
    8df8:	9dc00044 	addi	r23,r19,1
    8dfc:	99000005 	stb	r4,0(r19)
    8e00:	a023883a 	mov	r17,r20
    8e04:	dc000915 	stw	r16,36(sp)
    8e08:	003da406 	br	849c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700849c>
    8e0c:	d9801417 	ldw	r6,80(sp)
    8e10:	d9c01517 	ldw	r7,84(sp)
    8e14:	0009883a 	mov	r4,zero
    8e18:	014ff834 	movhi	r5,16352
    8e1c:	00044c00 	call	44c0 <__subdf3>
    8e20:	880d883a 	mov	r6,r17
    8e24:	a00f883a 	mov	r7,r20
    8e28:	1009883a 	mov	r4,r2
    8e2c:	180b883a 	mov	r5,r3
    8e30:	0003ccc0 	call	3ccc <__gedf2>
    8e34:	00bc7c0e 	bge	zero,r2,8028 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008028>
    8e38:	01000c04 	movi	r4,48
    8e3c:	00000106 	br	8e44 <_dtoa_r+0x1580>
    8e40:	102f883a 	mov	r23,r2
    8e44:	b8bfffc4 	addi	r2,r23,-1
    8e48:	10c00007 	ldb	r3,0(r2)
    8e4c:	193ffc26 	beq	r3,r4,8e40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008e40>
    8e50:	d9801317 	ldw	r6,76(sp)
    8e54:	d9800515 	stw	r6,20(sp)
    8e58:	003c4406 	br	7f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f6c>
    8e5c:	d9801317 	ldw	r6,76(sp)
    8e60:	d9800515 	stw	r6,20(sp)
    8e64:	003cea06 	br	8210 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008210>
    8e68:	dd800f17 	ldw	r22,60(sp)
    8e6c:	dcc01017 	ldw	r19,64(sp)
    8e70:	dc801217 	ldw	r18,72(sp)
    8e74:	003c6c06 	br	8028 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008028>
    8e78:	903e031e 	bne	r18,zero,8688 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008688>
    8e7c:	003ebb06 	br	896c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700896c>
    8e80:	103e6c1e 	bne	r2,zero,8834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008834>
    8e84:	4080004c 	andi	r2,r8,1
    8e88:	103e6a26 	beq	r2,zero,8834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008834>
    8e8c:	003e6606 	br	8828 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008828>
    8e90:	d8c00317 	ldw	r3,12(sp)
    8e94:	00800084 	movi	r2,2
    8e98:	10c02916 	blt	r2,r3,8f40 <_dtoa_r+0x167c>
    8e9c:	d9000c17 	ldw	r4,48(sp)
    8ea0:	003e8806 	br	88c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70088c4>
    8ea4:	04000084 	movi	r16,2
    8ea8:	003b9d06 	br	7d20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d20>
    8eac:	d9001317 	ldw	r4,76(sp)
    8eb0:	d9000515 	stw	r4,20(sp)
    8eb4:	003cd606 	br	8210 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008210>
    8eb8:	d8801317 	ldw	r2,76(sp)
    8ebc:	d8800515 	stw	r2,20(sp)
    8ec0:	003c2a06 	br	7f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f6c>
    8ec4:	d9800317 	ldw	r6,12(sp)
    8ec8:	00800084 	movi	r2,2
    8ecc:	11801516 	blt	r2,r6,8f24 <_dtoa_r+0x1660>
    8ed0:	d9c00c17 	ldw	r7,48(sp)
    8ed4:	d9c00615 	stw	r7,24(sp)
    8ed8:	003df706 	br	86b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086b8>
    8edc:	193d3926 	beq	r3,r4,83c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70083c4>
    8ee0:	00c00f04 	movi	r3,60
    8ee4:	1885c83a 	sub	r2,r3,r2
    8ee8:	003ddf06 	br	8668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008668>
    8eec:	e009883a 	mov	r4,fp
    8ef0:	e0001115 	stw	zero,68(fp)
    8ef4:	000b883a 	mov	r5,zero
    8ef8:	000a9480 	call	a948 <_Balloc>
    8efc:	d8800715 	stw	r2,28(sp)
    8f00:	d8c00717 	ldw	r3,28(sp)
    8f04:	00bfffc4 	movi	r2,-1
    8f08:	01000044 	movi	r4,1
    8f0c:	d8800c15 	stw	r2,48(sp)
    8f10:	e0c01015 	stw	r3,64(fp)
    8f14:	d9000b15 	stw	r4,44(sp)
    8f18:	d8800615 	stw	r2,24(sp)
    8f1c:	d8002215 	stw	zero,136(sp)
    8f20:	003c4106 	br	8028 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008028>
    8f24:	d8c00c17 	ldw	r3,48(sp)
    8f28:	d8c00615 	stw	r3,24(sp)
    8f2c:	003e7006 	br	88f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70088f0>
    8f30:	04400044 	movi	r17,1
    8f34:	003b2006 	br	7bb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007bb8>
    8f38:	000b883a 	mov	r5,zero
    8f3c:	003b3d06 	br	7c34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c34>
    8f40:	d8800c17 	ldw	r2,48(sp)
    8f44:	d8800615 	stw	r2,24(sp)
    8f48:	003e6906 	br	88f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70088f0>

00008f4c <__sflush_r>:
    8f4c:	2880030b 	ldhu	r2,12(r5)
    8f50:	defffb04 	addi	sp,sp,-20
    8f54:	dcc00315 	stw	r19,12(sp)
    8f58:	dc400115 	stw	r17,4(sp)
    8f5c:	dfc00415 	stw	ra,16(sp)
    8f60:	dc800215 	stw	r18,8(sp)
    8f64:	dc000015 	stw	r16,0(sp)
    8f68:	10c0020c 	andi	r3,r2,8
    8f6c:	2823883a 	mov	r17,r5
    8f70:	2027883a 	mov	r19,r4
    8f74:	1800311e 	bne	r3,zero,903c <__sflush_r+0xf0>
    8f78:	28c00117 	ldw	r3,4(r5)
    8f7c:	10820014 	ori	r2,r2,2048
    8f80:	2880030d 	sth	r2,12(r5)
    8f84:	00c04b0e 	bge	zero,r3,90b4 <__sflush_r+0x168>
    8f88:	8a000a17 	ldw	r8,40(r17)
    8f8c:	40002326 	beq	r8,zero,901c <__sflush_r+0xd0>
    8f90:	9c000017 	ldw	r16,0(r19)
    8f94:	10c4000c 	andi	r3,r2,4096
    8f98:	98000015 	stw	zero,0(r19)
    8f9c:	18004826 	beq	r3,zero,90c0 <__sflush_r+0x174>
    8fa0:	89801417 	ldw	r6,80(r17)
    8fa4:	10c0010c 	andi	r3,r2,4
    8fa8:	18000626 	beq	r3,zero,8fc4 <__sflush_r+0x78>
    8fac:	88c00117 	ldw	r3,4(r17)
    8fb0:	88800c17 	ldw	r2,48(r17)
    8fb4:	30cdc83a 	sub	r6,r6,r3
    8fb8:	10000226 	beq	r2,zero,8fc4 <__sflush_r+0x78>
    8fbc:	88800f17 	ldw	r2,60(r17)
    8fc0:	308dc83a 	sub	r6,r6,r2
    8fc4:	89400717 	ldw	r5,28(r17)
    8fc8:	000f883a 	mov	r7,zero
    8fcc:	9809883a 	mov	r4,r19
    8fd0:	403ee83a 	callr	r8
    8fd4:	00ffffc4 	movi	r3,-1
    8fd8:	10c04426 	beq	r2,r3,90ec <__sflush_r+0x1a0>
    8fdc:	88c0030b 	ldhu	r3,12(r17)
    8fe0:	89000417 	ldw	r4,16(r17)
    8fe4:	88000115 	stw	zero,4(r17)
    8fe8:	197dffcc 	andi	r5,r3,63487
    8fec:	8940030d 	sth	r5,12(r17)
    8ff0:	89000015 	stw	r4,0(r17)
    8ff4:	18c4000c 	andi	r3,r3,4096
    8ff8:	18002c1e 	bne	r3,zero,90ac <__sflush_r+0x160>
    8ffc:	89400c17 	ldw	r5,48(r17)
    9000:	9c000015 	stw	r16,0(r19)
    9004:	28000526 	beq	r5,zero,901c <__sflush_r+0xd0>
    9008:	88801004 	addi	r2,r17,64
    900c:	28800226 	beq	r5,r2,9018 <__sflush_r+0xcc>
    9010:	9809883a 	mov	r4,r19
    9014:	00096b80 	call	96b8 <_free_r>
    9018:	88000c15 	stw	zero,48(r17)
    901c:	0005883a 	mov	r2,zero
    9020:	dfc00417 	ldw	ra,16(sp)
    9024:	dcc00317 	ldw	r19,12(sp)
    9028:	dc800217 	ldw	r18,8(sp)
    902c:	dc400117 	ldw	r17,4(sp)
    9030:	dc000017 	ldw	r16,0(sp)
    9034:	dec00504 	addi	sp,sp,20
    9038:	f800283a 	ret
    903c:	2c800417 	ldw	r18,16(r5)
    9040:	903ff626 	beq	r18,zero,901c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700901c>
    9044:	2c000017 	ldw	r16,0(r5)
    9048:	108000cc 	andi	r2,r2,3
    904c:	2c800015 	stw	r18,0(r5)
    9050:	84a1c83a 	sub	r16,r16,r18
    9054:	1000131e 	bne	r2,zero,90a4 <__sflush_r+0x158>
    9058:	28800517 	ldw	r2,20(r5)
    905c:	88800215 	stw	r2,8(r17)
    9060:	04000316 	blt	zero,r16,9070 <__sflush_r+0x124>
    9064:	003fed06 	br	901c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700901c>
    9068:	90a5883a 	add	r18,r18,r2
    906c:	043feb0e 	bge	zero,r16,901c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700901c>
    9070:	88800917 	ldw	r2,36(r17)
    9074:	89400717 	ldw	r5,28(r17)
    9078:	800f883a 	mov	r7,r16
    907c:	900d883a 	mov	r6,r18
    9080:	9809883a 	mov	r4,r19
    9084:	103ee83a 	callr	r2
    9088:	80a1c83a 	sub	r16,r16,r2
    908c:	00bff616 	blt	zero,r2,9068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009068>
    9090:	88c0030b 	ldhu	r3,12(r17)
    9094:	00bfffc4 	movi	r2,-1
    9098:	18c01014 	ori	r3,r3,64
    909c:	88c0030d 	sth	r3,12(r17)
    90a0:	003fdf06 	br	9020 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009020>
    90a4:	0005883a 	mov	r2,zero
    90a8:	003fec06 	br	905c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700905c>
    90ac:	88801415 	stw	r2,80(r17)
    90b0:	003fd206 	br	8ffc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ffc>
    90b4:	28c00f17 	ldw	r3,60(r5)
    90b8:	00ffb316 	blt	zero,r3,8f88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f88>
    90bc:	003fd706 	br	901c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700901c>
    90c0:	89400717 	ldw	r5,28(r17)
    90c4:	000d883a 	mov	r6,zero
    90c8:	01c00044 	movi	r7,1
    90cc:	9809883a 	mov	r4,r19
    90d0:	403ee83a 	callr	r8
    90d4:	100d883a 	mov	r6,r2
    90d8:	00bfffc4 	movi	r2,-1
    90dc:	30801426 	beq	r6,r2,9130 <__sflush_r+0x1e4>
    90e0:	8880030b 	ldhu	r2,12(r17)
    90e4:	8a000a17 	ldw	r8,40(r17)
    90e8:	003fae06 	br	8fa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fa4>
    90ec:	98c00017 	ldw	r3,0(r19)
    90f0:	183fba26 	beq	r3,zero,8fdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fdc>
    90f4:	01000744 	movi	r4,29
    90f8:	19000626 	beq	r3,r4,9114 <__sflush_r+0x1c8>
    90fc:	01000584 	movi	r4,22
    9100:	19000426 	beq	r3,r4,9114 <__sflush_r+0x1c8>
    9104:	88c0030b 	ldhu	r3,12(r17)
    9108:	18c01014 	ori	r3,r3,64
    910c:	88c0030d 	sth	r3,12(r17)
    9110:	003fc306 	br	9020 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009020>
    9114:	8880030b 	ldhu	r2,12(r17)
    9118:	88c00417 	ldw	r3,16(r17)
    911c:	88000115 	stw	zero,4(r17)
    9120:	10bdffcc 	andi	r2,r2,63487
    9124:	8880030d 	sth	r2,12(r17)
    9128:	88c00015 	stw	r3,0(r17)
    912c:	003fb306 	br	8ffc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ffc>
    9130:	98800017 	ldw	r2,0(r19)
    9134:	103fea26 	beq	r2,zero,90e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090e0>
    9138:	00c00744 	movi	r3,29
    913c:	10c00226 	beq	r2,r3,9148 <__sflush_r+0x1fc>
    9140:	00c00584 	movi	r3,22
    9144:	10c0031e 	bne	r2,r3,9154 <__sflush_r+0x208>
    9148:	9c000015 	stw	r16,0(r19)
    914c:	0005883a 	mov	r2,zero
    9150:	003fb306 	br	9020 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009020>
    9154:	88c0030b 	ldhu	r3,12(r17)
    9158:	3005883a 	mov	r2,r6
    915c:	18c01014 	ori	r3,r3,64
    9160:	88c0030d 	sth	r3,12(r17)
    9164:	003fae06 	br	9020 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009020>

00009168 <_fflush_r>:
    9168:	defffd04 	addi	sp,sp,-12
    916c:	dc000115 	stw	r16,4(sp)
    9170:	dfc00215 	stw	ra,8(sp)
    9174:	2021883a 	mov	r16,r4
    9178:	20000226 	beq	r4,zero,9184 <_fflush_r+0x1c>
    917c:	20800e17 	ldw	r2,56(r4)
    9180:	10000c26 	beq	r2,zero,91b4 <_fflush_r+0x4c>
    9184:	2880030f 	ldh	r2,12(r5)
    9188:	1000051e 	bne	r2,zero,91a0 <_fflush_r+0x38>
    918c:	0005883a 	mov	r2,zero
    9190:	dfc00217 	ldw	ra,8(sp)
    9194:	dc000117 	ldw	r16,4(sp)
    9198:	dec00304 	addi	sp,sp,12
    919c:	f800283a 	ret
    91a0:	8009883a 	mov	r4,r16
    91a4:	dfc00217 	ldw	ra,8(sp)
    91a8:	dc000117 	ldw	r16,4(sp)
    91ac:	dec00304 	addi	sp,sp,12
    91b0:	0008f4c1 	jmpi	8f4c <__sflush_r>
    91b4:	d9400015 	stw	r5,0(sp)
    91b8:	00095440 	call	9544 <__sinit>
    91bc:	d9400017 	ldw	r5,0(sp)
    91c0:	003ff006 	br	9184 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009184>

000091c4 <fflush>:
    91c4:	20000526 	beq	r4,zero,91dc <fflush+0x18>
    91c8:	008000b4 	movhi	r2,2
    91cc:	10b71304 	addi	r2,r2,-9140
    91d0:	200b883a 	mov	r5,r4
    91d4:	11000017 	ldw	r4,0(r2)
    91d8:	00091681 	jmpi	9168 <_fflush_r>
    91dc:	008000b4 	movhi	r2,2
    91e0:	10b71204 	addi	r2,r2,-9144
    91e4:	11000017 	ldw	r4,0(r2)
    91e8:	01400074 	movhi	r5,1
    91ec:	29645a04 	addi	r5,r5,-28312
    91f0:	0009a8c1 	jmpi	9a8c <_fwalk_reent>

000091f4 <__fp_unlock>:
    91f4:	0005883a 	mov	r2,zero
    91f8:	f800283a 	ret

000091fc <_cleanup_r>:
    91fc:	01400074 	movhi	r5,1
    9200:	29751f04 	addi	r5,r5,-11140
    9204:	0009a8c1 	jmpi	9a8c <_fwalk_reent>

00009208 <__sinit.part.1>:
    9208:	defff704 	addi	sp,sp,-36
    920c:	00c00074 	movhi	r3,1
    9210:	dfc00815 	stw	ra,32(sp)
    9214:	ddc00715 	stw	r23,28(sp)
    9218:	dd800615 	stw	r22,24(sp)
    921c:	dd400515 	stw	r21,20(sp)
    9220:	dd000415 	stw	r20,16(sp)
    9224:	dcc00315 	stw	r19,12(sp)
    9228:	dc800215 	stw	r18,8(sp)
    922c:	dc400115 	stw	r17,4(sp)
    9230:	dc000015 	stw	r16,0(sp)
    9234:	18e47f04 	addi	r3,r3,-28164
    9238:	24000117 	ldw	r16,4(r4)
    923c:	20c00f15 	stw	r3,60(r4)
    9240:	2080bb04 	addi	r2,r4,748
    9244:	00c000c4 	movi	r3,3
    9248:	20c0b915 	stw	r3,740(r4)
    924c:	2080ba15 	stw	r2,744(r4)
    9250:	2000b815 	stw	zero,736(r4)
    9254:	05c00204 	movi	r23,8
    9258:	00800104 	movi	r2,4
    925c:	2025883a 	mov	r18,r4
    9260:	b80d883a 	mov	r6,r23
    9264:	81001704 	addi	r4,r16,92
    9268:	000b883a 	mov	r5,zero
    926c:	80000015 	stw	zero,0(r16)
    9270:	80000115 	stw	zero,4(r16)
    9274:	80000215 	stw	zero,8(r16)
    9278:	8080030d 	sth	r2,12(r16)
    927c:	80001915 	stw	zero,100(r16)
    9280:	8000038d 	sth	zero,14(r16)
    9284:	80000415 	stw	zero,16(r16)
    9288:	80000515 	stw	zero,20(r16)
    928c:	80000615 	stw	zero,24(r16)
    9290:	000a8200 	call	a820 <memset>
    9294:	05800074 	movhi	r22,1
    9298:	94400217 	ldw	r17,8(r18)
    929c:	05400074 	movhi	r21,1
    92a0:	05000074 	movhi	r20,1
    92a4:	04c00074 	movhi	r19,1
    92a8:	b5ae8304 	addi	r22,r22,-17908
    92ac:	ad6e9a04 	addi	r21,r21,-17816
    92b0:	a52eb904 	addi	r20,r20,-17692
    92b4:	9ceed004 	addi	r19,r19,-17600
    92b8:	85800815 	stw	r22,32(r16)
    92bc:	85400915 	stw	r21,36(r16)
    92c0:	85000a15 	stw	r20,40(r16)
    92c4:	84c00b15 	stw	r19,44(r16)
    92c8:	84000715 	stw	r16,28(r16)
    92cc:	00800284 	movi	r2,10
    92d0:	8880030d 	sth	r2,12(r17)
    92d4:	00800044 	movi	r2,1
    92d8:	b80d883a 	mov	r6,r23
    92dc:	89001704 	addi	r4,r17,92
    92e0:	000b883a 	mov	r5,zero
    92e4:	88000015 	stw	zero,0(r17)
    92e8:	88000115 	stw	zero,4(r17)
    92ec:	88000215 	stw	zero,8(r17)
    92f0:	88001915 	stw	zero,100(r17)
    92f4:	8880038d 	sth	r2,14(r17)
    92f8:	88000415 	stw	zero,16(r17)
    92fc:	88000515 	stw	zero,20(r17)
    9300:	88000615 	stw	zero,24(r17)
    9304:	000a8200 	call	a820 <memset>
    9308:	94000317 	ldw	r16,12(r18)
    930c:	00800484 	movi	r2,18
    9310:	8c400715 	stw	r17,28(r17)
    9314:	8d800815 	stw	r22,32(r17)
    9318:	8d400915 	stw	r21,36(r17)
    931c:	8d000a15 	stw	r20,40(r17)
    9320:	8cc00b15 	stw	r19,44(r17)
    9324:	8080030d 	sth	r2,12(r16)
    9328:	00800084 	movi	r2,2
    932c:	80000015 	stw	zero,0(r16)
    9330:	80000115 	stw	zero,4(r16)
    9334:	80000215 	stw	zero,8(r16)
    9338:	80001915 	stw	zero,100(r16)
    933c:	8080038d 	sth	r2,14(r16)
    9340:	80000415 	stw	zero,16(r16)
    9344:	80000515 	stw	zero,20(r16)
    9348:	80000615 	stw	zero,24(r16)
    934c:	b80d883a 	mov	r6,r23
    9350:	000b883a 	mov	r5,zero
    9354:	81001704 	addi	r4,r16,92
    9358:	000a8200 	call	a820 <memset>
    935c:	00800044 	movi	r2,1
    9360:	84000715 	stw	r16,28(r16)
    9364:	85800815 	stw	r22,32(r16)
    9368:	85400915 	stw	r21,36(r16)
    936c:	85000a15 	stw	r20,40(r16)
    9370:	84c00b15 	stw	r19,44(r16)
    9374:	90800e15 	stw	r2,56(r18)
    9378:	dfc00817 	ldw	ra,32(sp)
    937c:	ddc00717 	ldw	r23,28(sp)
    9380:	dd800617 	ldw	r22,24(sp)
    9384:	dd400517 	ldw	r21,20(sp)
    9388:	dd000417 	ldw	r20,16(sp)
    938c:	dcc00317 	ldw	r19,12(sp)
    9390:	dc800217 	ldw	r18,8(sp)
    9394:	dc400117 	ldw	r17,4(sp)
    9398:	dc000017 	ldw	r16,0(sp)
    939c:	dec00904 	addi	sp,sp,36
    93a0:	f800283a 	ret

000093a4 <__fp_lock>:
    93a4:	0005883a 	mov	r2,zero
    93a8:	f800283a 	ret

000093ac <__sfmoreglue>:
    93ac:	defffc04 	addi	sp,sp,-16
    93b0:	dc400115 	stw	r17,4(sp)
    93b4:	2c7fffc4 	addi	r17,r5,-1
    93b8:	8c401a24 	muli	r17,r17,104
    93bc:	dc800215 	stw	r18,8(sp)
    93c0:	2825883a 	mov	r18,r5
    93c4:	89401d04 	addi	r5,r17,116
    93c8:	dc000015 	stw	r16,0(sp)
    93cc:	dfc00315 	stw	ra,12(sp)
    93d0:	0009de80 	call	9de8 <_malloc_r>
    93d4:	1021883a 	mov	r16,r2
    93d8:	10000726 	beq	r2,zero,93f8 <__sfmoreglue+0x4c>
    93dc:	11000304 	addi	r4,r2,12
    93e0:	10000015 	stw	zero,0(r2)
    93e4:	14800115 	stw	r18,4(r2)
    93e8:	11000215 	stw	r4,8(r2)
    93ec:	89801a04 	addi	r6,r17,104
    93f0:	000b883a 	mov	r5,zero
    93f4:	000a8200 	call	a820 <memset>
    93f8:	8005883a 	mov	r2,r16
    93fc:	dfc00317 	ldw	ra,12(sp)
    9400:	dc800217 	ldw	r18,8(sp)
    9404:	dc400117 	ldw	r17,4(sp)
    9408:	dc000017 	ldw	r16,0(sp)
    940c:	dec00404 	addi	sp,sp,16
    9410:	f800283a 	ret

00009414 <__sfp>:
    9414:	defffb04 	addi	sp,sp,-20
    9418:	dc000015 	stw	r16,0(sp)
    941c:	040000b4 	movhi	r16,2
    9420:	84371204 	addi	r16,r16,-9144
    9424:	dcc00315 	stw	r19,12(sp)
    9428:	2027883a 	mov	r19,r4
    942c:	81000017 	ldw	r4,0(r16)
    9430:	dfc00415 	stw	ra,16(sp)
    9434:	dc800215 	stw	r18,8(sp)
    9438:	20800e17 	ldw	r2,56(r4)
    943c:	dc400115 	stw	r17,4(sp)
    9440:	1000021e 	bne	r2,zero,944c <__sfp+0x38>
    9444:	00092080 	call	9208 <__sinit.part.1>
    9448:	81000017 	ldw	r4,0(r16)
    944c:	2480b804 	addi	r18,r4,736
    9450:	047fffc4 	movi	r17,-1
    9454:	91000117 	ldw	r4,4(r18)
    9458:	94000217 	ldw	r16,8(r18)
    945c:	213fffc4 	addi	r4,r4,-1
    9460:	20000a16 	blt	r4,zero,948c <__sfp+0x78>
    9464:	8080030f 	ldh	r2,12(r16)
    9468:	10000c26 	beq	r2,zero,949c <__sfp+0x88>
    946c:	80c01d04 	addi	r3,r16,116
    9470:	00000206 	br	947c <__sfp+0x68>
    9474:	18bfe60f 	ldh	r2,-104(r3)
    9478:	10000826 	beq	r2,zero,949c <__sfp+0x88>
    947c:	213fffc4 	addi	r4,r4,-1
    9480:	1c3ffd04 	addi	r16,r3,-12
    9484:	18c01a04 	addi	r3,r3,104
    9488:	247ffa1e 	bne	r4,r17,9474 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009474>
    948c:	90800017 	ldw	r2,0(r18)
    9490:	10001d26 	beq	r2,zero,9508 <__sfp+0xf4>
    9494:	1025883a 	mov	r18,r2
    9498:	003fee06 	br	9454 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009454>
    949c:	00bfffc4 	movi	r2,-1
    94a0:	8080038d 	sth	r2,14(r16)
    94a4:	00800044 	movi	r2,1
    94a8:	8080030d 	sth	r2,12(r16)
    94ac:	80001915 	stw	zero,100(r16)
    94b0:	80000015 	stw	zero,0(r16)
    94b4:	80000215 	stw	zero,8(r16)
    94b8:	80000115 	stw	zero,4(r16)
    94bc:	80000415 	stw	zero,16(r16)
    94c0:	80000515 	stw	zero,20(r16)
    94c4:	80000615 	stw	zero,24(r16)
    94c8:	01800204 	movi	r6,8
    94cc:	000b883a 	mov	r5,zero
    94d0:	81001704 	addi	r4,r16,92
    94d4:	000a8200 	call	a820 <memset>
    94d8:	8005883a 	mov	r2,r16
    94dc:	80000c15 	stw	zero,48(r16)
    94e0:	80000d15 	stw	zero,52(r16)
    94e4:	80001115 	stw	zero,68(r16)
    94e8:	80001215 	stw	zero,72(r16)
    94ec:	dfc00417 	ldw	ra,16(sp)
    94f0:	dcc00317 	ldw	r19,12(sp)
    94f4:	dc800217 	ldw	r18,8(sp)
    94f8:	dc400117 	ldw	r17,4(sp)
    94fc:	dc000017 	ldw	r16,0(sp)
    9500:	dec00504 	addi	sp,sp,20
    9504:	f800283a 	ret
    9508:	01400104 	movi	r5,4
    950c:	9809883a 	mov	r4,r19
    9510:	00093ac0 	call	93ac <__sfmoreglue>
    9514:	90800015 	stw	r2,0(r18)
    9518:	103fde1e 	bne	r2,zero,9494 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009494>
    951c:	00800304 	movi	r2,12
    9520:	98800015 	stw	r2,0(r19)
    9524:	0005883a 	mov	r2,zero
    9528:	003ff006 	br	94ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70094ec>

0000952c <_cleanup>:
    952c:	008000b4 	movhi	r2,2
    9530:	10b71204 	addi	r2,r2,-9144
    9534:	11000017 	ldw	r4,0(r2)
    9538:	01400074 	movhi	r5,1
    953c:	29751f04 	addi	r5,r5,-11140
    9540:	0009a8c1 	jmpi	9a8c <_fwalk_reent>

00009544 <__sinit>:
    9544:	20800e17 	ldw	r2,56(r4)
    9548:	10000126 	beq	r2,zero,9550 <__sinit+0xc>
    954c:	f800283a 	ret
    9550:	00092081 	jmpi	9208 <__sinit.part.1>

00009554 <__sfp_lock_acquire>:
    9554:	f800283a 	ret

00009558 <__sfp_lock_release>:
    9558:	f800283a 	ret

0000955c <__sinit_lock_acquire>:
    955c:	f800283a 	ret

00009560 <__sinit_lock_release>:
    9560:	f800283a 	ret

00009564 <__fp_lock_all>:
    9564:	008000b4 	movhi	r2,2
    9568:	10b71304 	addi	r2,r2,-9140
    956c:	11000017 	ldw	r4,0(r2)
    9570:	01400074 	movhi	r5,1
    9574:	2964e904 	addi	r5,r5,-27740
    9578:	00099c81 	jmpi	99c8 <_fwalk>

0000957c <__fp_unlock_all>:
    957c:	008000b4 	movhi	r2,2
    9580:	10b71304 	addi	r2,r2,-9140
    9584:	11000017 	ldw	r4,0(r2)
    9588:	01400074 	movhi	r5,1
    958c:	29647d04 	addi	r5,r5,-28172
    9590:	00099c81 	jmpi	99c8 <_fwalk>

00009594 <_malloc_trim_r>:
    9594:	defffb04 	addi	sp,sp,-20
    9598:	dcc00315 	stw	r19,12(sp)
    959c:	04c000b4 	movhi	r19,2
    95a0:	dc800215 	stw	r18,8(sp)
    95a4:	dc400115 	stw	r17,4(sp)
    95a8:	dc000015 	stw	r16,0(sp)
    95ac:	dfc00415 	stw	ra,16(sp)
    95b0:	2821883a 	mov	r16,r5
    95b4:	9cf08e04 	addi	r19,r19,-15816
    95b8:	2025883a 	mov	r18,r4
    95bc:	000fe600 	call	fe60 <__malloc_lock>
    95c0:	98800217 	ldw	r2,8(r19)
    95c4:	14400117 	ldw	r17,4(r2)
    95c8:	00bfff04 	movi	r2,-4
    95cc:	88a2703a 	and	r17,r17,r2
    95d0:	8c21c83a 	sub	r16,r17,r16
    95d4:	8403fbc4 	addi	r16,r16,4079
    95d8:	8020d33a 	srli	r16,r16,12
    95dc:	0083ffc4 	movi	r2,4095
    95e0:	843fffc4 	addi	r16,r16,-1
    95e4:	8020933a 	slli	r16,r16,12
    95e8:	1400060e 	bge	r2,r16,9604 <_malloc_trim_r+0x70>
    95ec:	000b883a 	mov	r5,zero
    95f0:	9009883a 	mov	r4,r18
    95f4:	000b9b80 	call	b9b8 <_sbrk_r>
    95f8:	98c00217 	ldw	r3,8(r19)
    95fc:	1c47883a 	add	r3,r3,r17
    9600:	10c00a26 	beq	r2,r3,962c <_malloc_trim_r+0x98>
    9604:	9009883a 	mov	r4,r18
    9608:	000ff800 	call	ff80 <__malloc_unlock>
    960c:	0005883a 	mov	r2,zero
    9610:	dfc00417 	ldw	ra,16(sp)
    9614:	dcc00317 	ldw	r19,12(sp)
    9618:	dc800217 	ldw	r18,8(sp)
    961c:	dc400117 	ldw	r17,4(sp)
    9620:	dc000017 	ldw	r16,0(sp)
    9624:	dec00504 	addi	sp,sp,20
    9628:	f800283a 	ret
    962c:	040bc83a 	sub	r5,zero,r16
    9630:	9009883a 	mov	r4,r18
    9634:	000b9b80 	call	b9b8 <_sbrk_r>
    9638:	00ffffc4 	movi	r3,-1
    963c:	10c00d26 	beq	r2,r3,9674 <_malloc_trim_r+0xe0>
    9640:	00c000b4 	movhi	r3,2
    9644:	18ff4204 	addi	r3,r3,-760
    9648:	18800017 	ldw	r2,0(r3)
    964c:	99000217 	ldw	r4,8(r19)
    9650:	8c23c83a 	sub	r17,r17,r16
    9654:	8c400054 	ori	r17,r17,1
    9658:	1421c83a 	sub	r16,r2,r16
    965c:	24400115 	stw	r17,4(r4)
    9660:	9009883a 	mov	r4,r18
    9664:	1c000015 	stw	r16,0(r3)
    9668:	000ff800 	call	ff80 <__malloc_unlock>
    966c:	00800044 	movi	r2,1
    9670:	003fe706 	br	9610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009610>
    9674:	000b883a 	mov	r5,zero
    9678:	9009883a 	mov	r4,r18
    967c:	000b9b80 	call	b9b8 <_sbrk_r>
    9680:	99000217 	ldw	r4,8(r19)
    9684:	014003c4 	movi	r5,15
    9688:	1107c83a 	sub	r3,r2,r4
    968c:	28ffdd0e 	bge	r5,r3,9604 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009604>
    9690:	014000b4 	movhi	r5,2
    9694:	29771504 	addi	r5,r5,-9132
    9698:	29400017 	ldw	r5,0(r5)
    969c:	18c00054 	ori	r3,r3,1
    96a0:	20c00115 	stw	r3,4(r4)
    96a4:	00c000b4 	movhi	r3,2
    96a8:	1145c83a 	sub	r2,r2,r5
    96ac:	18ff4204 	addi	r3,r3,-760
    96b0:	18800015 	stw	r2,0(r3)
    96b4:	003fd306 	br	9604 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009604>

000096b8 <_free_r>:
    96b8:	28004126 	beq	r5,zero,97c0 <_free_r+0x108>
    96bc:	defffd04 	addi	sp,sp,-12
    96c0:	dc400115 	stw	r17,4(sp)
    96c4:	dc000015 	stw	r16,0(sp)
    96c8:	2023883a 	mov	r17,r4
    96cc:	2821883a 	mov	r16,r5
    96d0:	dfc00215 	stw	ra,8(sp)
    96d4:	000fe600 	call	fe60 <__malloc_lock>
    96d8:	81ffff17 	ldw	r7,-4(r16)
    96dc:	00bfff84 	movi	r2,-2
    96e0:	010000b4 	movhi	r4,2
    96e4:	81bffe04 	addi	r6,r16,-8
    96e8:	3884703a 	and	r2,r7,r2
    96ec:	21308e04 	addi	r4,r4,-15816
    96f0:	308b883a 	add	r5,r6,r2
    96f4:	2a400117 	ldw	r9,4(r5)
    96f8:	22000217 	ldw	r8,8(r4)
    96fc:	00ffff04 	movi	r3,-4
    9700:	48c6703a 	and	r3,r9,r3
    9704:	2a005726 	beq	r5,r8,9864 <_free_r+0x1ac>
    9708:	28c00115 	stw	r3,4(r5)
    970c:	39c0004c 	andi	r7,r7,1
    9710:	3800091e 	bne	r7,zero,9738 <_free_r+0x80>
    9714:	823ffe17 	ldw	r8,-8(r16)
    9718:	22400204 	addi	r9,r4,8
    971c:	320dc83a 	sub	r6,r6,r8
    9720:	31c00217 	ldw	r7,8(r6)
    9724:	1205883a 	add	r2,r2,r8
    9728:	3a406526 	beq	r7,r9,98c0 <_free_r+0x208>
    972c:	32000317 	ldw	r8,12(r6)
    9730:	3a000315 	stw	r8,12(r7)
    9734:	41c00215 	stw	r7,8(r8)
    9738:	28cf883a 	add	r7,r5,r3
    973c:	39c00117 	ldw	r7,4(r7)
    9740:	39c0004c 	andi	r7,r7,1
    9744:	38003a26 	beq	r7,zero,9830 <_free_r+0x178>
    9748:	10c00054 	ori	r3,r2,1
    974c:	30c00115 	stw	r3,4(r6)
    9750:	3087883a 	add	r3,r6,r2
    9754:	18800015 	stw	r2,0(r3)
    9758:	00c07fc4 	movi	r3,511
    975c:	18801936 	bltu	r3,r2,97c4 <_free_r+0x10c>
    9760:	1004d0fa 	srli	r2,r2,3
    9764:	01c00044 	movi	r7,1
    9768:	21400117 	ldw	r5,4(r4)
    976c:	10c00044 	addi	r3,r2,1
    9770:	18c7883a 	add	r3,r3,r3
    9774:	1005d0ba 	srai	r2,r2,2
    9778:	18c7883a 	add	r3,r3,r3
    977c:	18c7883a 	add	r3,r3,r3
    9780:	1907883a 	add	r3,r3,r4
    9784:	3884983a 	sll	r2,r7,r2
    9788:	19c00017 	ldw	r7,0(r3)
    978c:	1a3ffe04 	addi	r8,r3,-8
    9790:	1144b03a 	or	r2,r2,r5
    9794:	32000315 	stw	r8,12(r6)
    9798:	31c00215 	stw	r7,8(r6)
    979c:	20800115 	stw	r2,4(r4)
    97a0:	19800015 	stw	r6,0(r3)
    97a4:	39800315 	stw	r6,12(r7)
    97a8:	8809883a 	mov	r4,r17
    97ac:	dfc00217 	ldw	ra,8(sp)
    97b0:	dc400117 	ldw	r17,4(sp)
    97b4:	dc000017 	ldw	r16,0(sp)
    97b8:	dec00304 	addi	sp,sp,12
    97bc:	000ff801 	jmpi	ff80 <__malloc_unlock>
    97c0:	f800283a 	ret
    97c4:	100ad27a 	srli	r5,r2,9
    97c8:	00c00104 	movi	r3,4
    97cc:	19404a36 	bltu	r3,r5,98f8 <_free_r+0x240>
    97d0:	100ad1ba 	srli	r5,r2,6
    97d4:	28c00e44 	addi	r3,r5,57
    97d8:	18c7883a 	add	r3,r3,r3
    97dc:	29400e04 	addi	r5,r5,56
    97e0:	18c7883a 	add	r3,r3,r3
    97e4:	18c7883a 	add	r3,r3,r3
    97e8:	1909883a 	add	r4,r3,r4
    97ec:	20c00017 	ldw	r3,0(r4)
    97f0:	01c000b4 	movhi	r7,2
    97f4:	213ffe04 	addi	r4,r4,-8
    97f8:	39f08e04 	addi	r7,r7,-15816
    97fc:	20c04426 	beq	r4,r3,9910 <_free_r+0x258>
    9800:	01ffff04 	movi	r7,-4
    9804:	19400117 	ldw	r5,4(r3)
    9808:	29ca703a 	and	r5,r5,r7
    980c:	1140022e 	bgeu	r2,r5,9818 <_free_r+0x160>
    9810:	18c00217 	ldw	r3,8(r3)
    9814:	20fffb1e 	bne	r4,r3,9804 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009804>
    9818:	19000317 	ldw	r4,12(r3)
    981c:	31000315 	stw	r4,12(r6)
    9820:	30c00215 	stw	r3,8(r6)
    9824:	21800215 	stw	r6,8(r4)
    9828:	19800315 	stw	r6,12(r3)
    982c:	003fde06 	br	97a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097a8>
    9830:	29c00217 	ldw	r7,8(r5)
    9834:	10c5883a 	add	r2,r2,r3
    9838:	00c000b4 	movhi	r3,2
    983c:	18f09004 	addi	r3,r3,-15808
    9840:	38c03b26 	beq	r7,r3,9930 <_free_r+0x278>
    9844:	2a000317 	ldw	r8,12(r5)
    9848:	11400054 	ori	r5,r2,1
    984c:	3087883a 	add	r3,r6,r2
    9850:	3a000315 	stw	r8,12(r7)
    9854:	41c00215 	stw	r7,8(r8)
    9858:	31400115 	stw	r5,4(r6)
    985c:	18800015 	stw	r2,0(r3)
    9860:	003fbd06 	br	9758 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009758>
    9864:	39c0004c 	andi	r7,r7,1
    9868:	10c5883a 	add	r2,r2,r3
    986c:	3800071e 	bne	r7,zero,988c <_free_r+0x1d4>
    9870:	81fffe17 	ldw	r7,-8(r16)
    9874:	31cdc83a 	sub	r6,r6,r7
    9878:	30c00317 	ldw	r3,12(r6)
    987c:	31400217 	ldw	r5,8(r6)
    9880:	11c5883a 	add	r2,r2,r7
    9884:	28c00315 	stw	r3,12(r5)
    9888:	19400215 	stw	r5,8(r3)
    988c:	10c00054 	ori	r3,r2,1
    9890:	30c00115 	stw	r3,4(r6)
    9894:	00c000b4 	movhi	r3,2
    9898:	18f71604 	addi	r3,r3,-9128
    989c:	18c00017 	ldw	r3,0(r3)
    98a0:	21800215 	stw	r6,8(r4)
    98a4:	10ffc036 	bltu	r2,r3,97a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097a8>
    98a8:	008000b4 	movhi	r2,2
    98ac:	10bf2004 	addi	r2,r2,-896
    98b0:	11400017 	ldw	r5,0(r2)
    98b4:	8809883a 	mov	r4,r17
    98b8:	00095940 	call	9594 <_malloc_trim_r>
    98bc:	003fba06 	br	97a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097a8>
    98c0:	28c9883a 	add	r4,r5,r3
    98c4:	21000117 	ldw	r4,4(r4)
    98c8:	2100004c 	andi	r4,r4,1
    98cc:	2000391e 	bne	r4,zero,99b4 <_free_r+0x2fc>
    98d0:	29c00217 	ldw	r7,8(r5)
    98d4:	29000317 	ldw	r4,12(r5)
    98d8:	1885883a 	add	r2,r3,r2
    98dc:	10c00054 	ori	r3,r2,1
    98e0:	39000315 	stw	r4,12(r7)
    98e4:	21c00215 	stw	r7,8(r4)
    98e8:	30c00115 	stw	r3,4(r6)
    98ec:	308d883a 	add	r6,r6,r2
    98f0:	30800015 	stw	r2,0(r6)
    98f4:	003fac06 	br	97a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097a8>
    98f8:	00c00504 	movi	r3,20
    98fc:	19401536 	bltu	r3,r5,9954 <_free_r+0x29c>
    9900:	28c01704 	addi	r3,r5,92
    9904:	18c7883a 	add	r3,r3,r3
    9908:	294016c4 	addi	r5,r5,91
    990c:	003fb406 	br	97e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097e0>
    9910:	280bd0ba 	srai	r5,r5,2
    9914:	00c00044 	movi	r3,1
    9918:	38800117 	ldw	r2,4(r7)
    991c:	194a983a 	sll	r5,r3,r5
    9920:	2007883a 	mov	r3,r4
    9924:	2884b03a 	or	r2,r5,r2
    9928:	38800115 	stw	r2,4(r7)
    992c:	003fbb06 	br	981c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700981c>
    9930:	21800515 	stw	r6,20(r4)
    9934:	21800415 	stw	r6,16(r4)
    9938:	10c00054 	ori	r3,r2,1
    993c:	31c00315 	stw	r7,12(r6)
    9940:	31c00215 	stw	r7,8(r6)
    9944:	30c00115 	stw	r3,4(r6)
    9948:	308d883a 	add	r6,r6,r2
    994c:	30800015 	stw	r2,0(r6)
    9950:	003f9506 	br	97a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097a8>
    9954:	00c01504 	movi	r3,84
    9958:	19400536 	bltu	r3,r5,9970 <_free_r+0x2b8>
    995c:	100ad33a 	srli	r5,r2,12
    9960:	28c01bc4 	addi	r3,r5,111
    9964:	18c7883a 	add	r3,r3,r3
    9968:	29401b84 	addi	r5,r5,110
    996c:	003f9c06 	br	97e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097e0>
    9970:	00c05504 	movi	r3,340
    9974:	19400536 	bltu	r3,r5,998c <_free_r+0x2d4>
    9978:	100ad3fa 	srli	r5,r2,15
    997c:	28c01e04 	addi	r3,r5,120
    9980:	18c7883a 	add	r3,r3,r3
    9984:	29401dc4 	addi	r5,r5,119
    9988:	003f9506 	br	97e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097e0>
    998c:	00c15504 	movi	r3,1364
    9990:	19400536 	bltu	r3,r5,99a8 <_free_r+0x2f0>
    9994:	100ad4ba 	srli	r5,r2,18
    9998:	28c01f44 	addi	r3,r5,125
    999c:	18c7883a 	add	r3,r3,r3
    99a0:	29401f04 	addi	r5,r5,124
    99a4:	003f8e06 	br	97e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097e0>
    99a8:	00c03f84 	movi	r3,254
    99ac:	01401f84 	movi	r5,126
    99b0:	003f8b06 	br	97e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097e0>
    99b4:	10c00054 	ori	r3,r2,1
    99b8:	30c00115 	stw	r3,4(r6)
    99bc:	308d883a 	add	r6,r6,r2
    99c0:	30800015 	stw	r2,0(r6)
    99c4:	003f7806 	br	97a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097a8>

000099c8 <_fwalk>:
    99c8:	defff704 	addi	sp,sp,-36
    99cc:	dd000415 	stw	r20,16(sp)
    99d0:	dfc00815 	stw	ra,32(sp)
    99d4:	ddc00715 	stw	r23,28(sp)
    99d8:	dd800615 	stw	r22,24(sp)
    99dc:	dd400515 	stw	r21,20(sp)
    99e0:	dcc00315 	stw	r19,12(sp)
    99e4:	dc800215 	stw	r18,8(sp)
    99e8:	dc400115 	stw	r17,4(sp)
    99ec:	dc000015 	stw	r16,0(sp)
    99f0:	2500b804 	addi	r20,r4,736
    99f4:	a0002326 	beq	r20,zero,9a84 <_fwalk+0xbc>
    99f8:	282b883a 	mov	r21,r5
    99fc:	002f883a 	mov	r23,zero
    9a00:	05800044 	movi	r22,1
    9a04:	04ffffc4 	movi	r19,-1
    9a08:	a4400117 	ldw	r17,4(r20)
    9a0c:	a4800217 	ldw	r18,8(r20)
    9a10:	8c7fffc4 	addi	r17,r17,-1
    9a14:	88000d16 	blt	r17,zero,9a4c <_fwalk+0x84>
    9a18:	94000304 	addi	r16,r18,12
    9a1c:	94800384 	addi	r18,r18,14
    9a20:	8080000b 	ldhu	r2,0(r16)
    9a24:	8c7fffc4 	addi	r17,r17,-1
    9a28:	813ffd04 	addi	r4,r16,-12
    9a2c:	b080042e 	bgeu	r22,r2,9a40 <_fwalk+0x78>
    9a30:	9080000f 	ldh	r2,0(r18)
    9a34:	14c00226 	beq	r2,r19,9a40 <_fwalk+0x78>
    9a38:	a83ee83a 	callr	r21
    9a3c:	b8aeb03a 	or	r23,r23,r2
    9a40:	84001a04 	addi	r16,r16,104
    9a44:	94801a04 	addi	r18,r18,104
    9a48:	8cfff51e 	bne	r17,r19,9a20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a20>
    9a4c:	a5000017 	ldw	r20,0(r20)
    9a50:	a03fed1e 	bne	r20,zero,9a08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a08>
    9a54:	b805883a 	mov	r2,r23
    9a58:	dfc00817 	ldw	ra,32(sp)
    9a5c:	ddc00717 	ldw	r23,28(sp)
    9a60:	dd800617 	ldw	r22,24(sp)
    9a64:	dd400517 	ldw	r21,20(sp)
    9a68:	dd000417 	ldw	r20,16(sp)
    9a6c:	dcc00317 	ldw	r19,12(sp)
    9a70:	dc800217 	ldw	r18,8(sp)
    9a74:	dc400117 	ldw	r17,4(sp)
    9a78:	dc000017 	ldw	r16,0(sp)
    9a7c:	dec00904 	addi	sp,sp,36
    9a80:	f800283a 	ret
    9a84:	002f883a 	mov	r23,zero
    9a88:	003ff206 	br	9a54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a54>

00009a8c <_fwalk_reent>:
    9a8c:	defff704 	addi	sp,sp,-36
    9a90:	dd000415 	stw	r20,16(sp)
    9a94:	dfc00815 	stw	ra,32(sp)
    9a98:	ddc00715 	stw	r23,28(sp)
    9a9c:	dd800615 	stw	r22,24(sp)
    9aa0:	dd400515 	stw	r21,20(sp)
    9aa4:	dcc00315 	stw	r19,12(sp)
    9aa8:	dc800215 	stw	r18,8(sp)
    9aac:	dc400115 	stw	r17,4(sp)
    9ab0:	dc000015 	stw	r16,0(sp)
    9ab4:	2500b804 	addi	r20,r4,736
    9ab8:	a0002326 	beq	r20,zero,9b48 <_fwalk_reent+0xbc>
    9abc:	282b883a 	mov	r21,r5
    9ac0:	2027883a 	mov	r19,r4
    9ac4:	002f883a 	mov	r23,zero
    9ac8:	05800044 	movi	r22,1
    9acc:	04bfffc4 	movi	r18,-1
    9ad0:	a4400117 	ldw	r17,4(r20)
    9ad4:	a4000217 	ldw	r16,8(r20)
    9ad8:	8c7fffc4 	addi	r17,r17,-1
    9adc:	88000c16 	blt	r17,zero,9b10 <_fwalk_reent+0x84>
    9ae0:	84000304 	addi	r16,r16,12
    9ae4:	8080000b 	ldhu	r2,0(r16)
    9ae8:	8c7fffc4 	addi	r17,r17,-1
    9aec:	817ffd04 	addi	r5,r16,-12
    9af0:	b080052e 	bgeu	r22,r2,9b08 <_fwalk_reent+0x7c>
    9af4:	8080008f 	ldh	r2,2(r16)
    9af8:	9809883a 	mov	r4,r19
    9afc:	14800226 	beq	r2,r18,9b08 <_fwalk_reent+0x7c>
    9b00:	a83ee83a 	callr	r21
    9b04:	b8aeb03a 	or	r23,r23,r2
    9b08:	84001a04 	addi	r16,r16,104
    9b0c:	8cbff51e 	bne	r17,r18,9ae4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ae4>
    9b10:	a5000017 	ldw	r20,0(r20)
    9b14:	a03fee1e 	bne	r20,zero,9ad0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ad0>
    9b18:	b805883a 	mov	r2,r23
    9b1c:	dfc00817 	ldw	ra,32(sp)
    9b20:	ddc00717 	ldw	r23,28(sp)
    9b24:	dd800617 	ldw	r22,24(sp)
    9b28:	dd400517 	ldw	r21,20(sp)
    9b2c:	dd000417 	ldw	r20,16(sp)
    9b30:	dcc00317 	ldw	r19,12(sp)
    9b34:	dc800217 	ldw	r18,8(sp)
    9b38:	dc400117 	ldw	r17,4(sp)
    9b3c:	dc000017 	ldw	r16,0(sp)
    9b40:	dec00904 	addi	sp,sp,36
    9b44:	f800283a 	ret
    9b48:	002f883a 	mov	r23,zero
    9b4c:	003ff206 	br	9b18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b18>

00009b50 <_setlocale_r>:
    9b50:	30001b26 	beq	r6,zero,9bc0 <_setlocale_r+0x70>
    9b54:	014000b4 	movhi	r5,2
    9b58:	defffe04 	addi	sp,sp,-8
    9b5c:	296e5704 	addi	r5,r5,-18084
    9b60:	3009883a 	mov	r4,r6
    9b64:	dc000015 	stw	r16,0(sp)
    9b68:	dfc00115 	stw	ra,4(sp)
    9b6c:	3021883a 	mov	r16,r6
    9b70:	000bb480 	call	bb48 <strcmp>
    9b74:	1000061e 	bne	r2,zero,9b90 <_setlocale_r+0x40>
    9b78:	008000b4 	movhi	r2,2
    9b7c:	10ae5604 	addi	r2,r2,-18088
    9b80:	dfc00117 	ldw	ra,4(sp)
    9b84:	dc000017 	ldw	r16,0(sp)
    9b88:	dec00204 	addi	sp,sp,8
    9b8c:	f800283a 	ret
    9b90:	014000b4 	movhi	r5,2
    9b94:	296e5604 	addi	r5,r5,-18088
    9b98:	8009883a 	mov	r4,r16
    9b9c:	000bb480 	call	bb48 <strcmp>
    9ba0:	103ff526 	beq	r2,zero,9b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b78>
    9ba4:	014000b4 	movhi	r5,2
    9ba8:	296e4104 	addi	r5,r5,-18172
    9bac:	8009883a 	mov	r4,r16
    9bb0:	000bb480 	call	bb48 <strcmp>
    9bb4:	103ff026 	beq	r2,zero,9b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b78>
    9bb8:	0005883a 	mov	r2,zero
    9bbc:	003ff006 	br	9b80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b80>
    9bc0:	008000b4 	movhi	r2,2
    9bc4:	10ae5604 	addi	r2,r2,-18088
    9bc8:	f800283a 	ret

00009bcc <__locale_charset>:
    9bcc:	008000b4 	movhi	r2,2
    9bd0:	10b07804 	addi	r2,r2,-15904
    9bd4:	f800283a 	ret

00009bd8 <__locale_mb_cur_max>:
    9bd8:	008000b4 	movhi	r2,2
    9bdc:	10b71404 	addi	r2,r2,-9136
    9be0:	10800017 	ldw	r2,0(r2)
    9be4:	f800283a 	ret

00009be8 <__locale_msgcharset>:
    9be8:	008000b4 	movhi	r2,2
    9bec:	10b07004 	addi	r2,r2,-15936
    9bf0:	f800283a 	ret

00009bf4 <__locale_cjk_lang>:
    9bf4:	0005883a 	mov	r2,zero
    9bf8:	f800283a 	ret

00009bfc <_localeconv_r>:
    9bfc:	008000b4 	movhi	r2,2
    9c00:	10b08004 	addi	r2,r2,-15872
    9c04:	f800283a 	ret

00009c08 <setlocale>:
    9c08:	008000b4 	movhi	r2,2
    9c0c:	10b71304 	addi	r2,r2,-9140
    9c10:	280d883a 	mov	r6,r5
    9c14:	200b883a 	mov	r5,r4
    9c18:	11000017 	ldw	r4,0(r2)
    9c1c:	0009b501 	jmpi	9b50 <_setlocale_r>

00009c20 <localeconv>:
    9c20:	008000b4 	movhi	r2,2
    9c24:	10b08004 	addi	r2,r2,-15872
    9c28:	f800283a 	ret

00009c2c <__smakebuf_r>:
    9c2c:	2880030b 	ldhu	r2,12(r5)
    9c30:	10c0008c 	andi	r3,r2,2
    9c34:	1800411e 	bne	r3,zero,9d3c <__smakebuf_r+0x110>
    9c38:	deffec04 	addi	sp,sp,-80
    9c3c:	dc000f15 	stw	r16,60(sp)
    9c40:	2821883a 	mov	r16,r5
    9c44:	2940038f 	ldh	r5,14(r5)
    9c48:	dc401015 	stw	r17,64(sp)
    9c4c:	dfc01315 	stw	ra,76(sp)
    9c50:	dcc01215 	stw	r19,72(sp)
    9c54:	dc801115 	stw	r18,68(sp)
    9c58:	2023883a 	mov	r17,r4
    9c5c:	28001c16 	blt	r5,zero,9cd0 <__smakebuf_r+0xa4>
    9c60:	d80d883a 	mov	r6,sp
    9c64:	000d7880 	call	d788 <_fstat_r>
    9c68:	10001816 	blt	r2,zero,9ccc <__smakebuf_r+0xa0>
    9c6c:	d8800117 	ldw	r2,4(sp)
    9c70:	00e00014 	movui	r3,32768
    9c74:	10bc000c 	andi	r2,r2,61440
    9c78:	14c80020 	cmpeqi	r19,r2,8192
    9c7c:	10c03726 	beq	r2,r3,9d5c <__smakebuf_r+0x130>
    9c80:	80c0030b 	ldhu	r3,12(r16)
    9c84:	18c20014 	ori	r3,r3,2048
    9c88:	80c0030d 	sth	r3,12(r16)
    9c8c:	00c80004 	movi	r3,8192
    9c90:	10c0521e 	bne	r2,r3,9ddc <__smakebuf_r+0x1b0>
    9c94:	8140038f 	ldh	r5,14(r16)
    9c98:	8809883a 	mov	r4,r17
    9c9c:	000dca00 	call	dca0 <_isatty_r>
    9ca0:	10004c26 	beq	r2,zero,9dd4 <__smakebuf_r+0x1a8>
    9ca4:	8080030b 	ldhu	r2,12(r16)
    9ca8:	80c010c4 	addi	r3,r16,67
    9cac:	80c00015 	stw	r3,0(r16)
    9cb0:	10800054 	ori	r2,r2,1
    9cb4:	8080030d 	sth	r2,12(r16)
    9cb8:	00800044 	movi	r2,1
    9cbc:	80c00415 	stw	r3,16(r16)
    9cc0:	80800515 	stw	r2,20(r16)
    9cc4:	04810004 	movi	r18,1024
    9cc8:	00000706 	br	9ce8 <__smakebuf_r+0xbc>
    9ccc:	8080030b 	ldhu	r2,12(r16)
    9cd0:	10c0200c 	andi	r3,r2,128
    9cd4:	18001f1e 	bne	r3,zero,9d54 <__smakebuf_r+0x128>
    9cd8:	04810004 	movi	r18,1024
    9cdc:	10820014 	ori	r2,r2,2048
    9ce0:	8080030d 	sth	r2,12(r16)
    9ce4:	0027883a 	mov	r19,zero
    9ce8:	900b883a 	mov	r5,r18
    9cec:	8809883a 	mov	r4,r17
    9cf0:	0009de80 	call	9de8 <_malloc_r>
    9cf4:	10002c26 	beq	r2,zero,9da8 <__smakebuf_r+0x17c>
    9cf8:	80c0030b 	ldhu	r3,12(r16)
    9cfc:	01000074 	movhi	r4,1
    9d00:	21247f04 	addi	r4,r4,-28164
    9d04:	89000f15 	stw	r4,60(r17)
    9d08:	18c02014 	ori	r3,r3,128
    9d0c:	80c0030d 	sth	r3,12(r16)
    9d10:	80800015 	stw	r2,0(r16)
    9d14:	80800415 	stw	r2,16(r16)
    9d18:	84800515 	stw	r18,20(r16)
    9d1c:	98001a1e 	bne	r19,zero,9d88 <__smakebuf_r+0x15c>
    9d20:	dfc01317 	ldw	ra,76(sp)
    9d24:	dcc01217 	ldw	r19,72(sp)
    9d28:	dc801117 	ldw	r18,68(sp)
    9d2c:	dc401017 	ldw	r17,64(sp)
    9d30:	dc000f17 	ldw	r16,60(sp)
    9d34:	dec01404 	addi	sp,sp,80
    9d38:	f800283a 	ret
    9d3c:	288010c4 	addi	r2,r5,67
    9d40:	28800015 	stw	r2,0(r5)
    9d44:	28800415 	stw	r2,16(r5)
    9d48:	00800044 	movi	r2,1
    9d4c:	28800515 	stw	r2,20(r5)
    9d50:	f800283a 	ret
    9d54:	04801004 	movi	r18,64
    9d58:	003fe006 	br	9cdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009cdc>
    9d5c:	81000a17 	ldw	r4,40(r16)
    9d60:	00c00074 	movhi	r3,1
    9d64:	18eeb904 	addi	r3,r3,-17692
    9d68:	20ffc51e 	bne	r4,r3,9c80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c80>
    9d6c:	8080030b 	ldhu	r2,12(r16)
    9d70:	04810004 	movi	r18,1024
    9d74:	84801315 	stw	r18,76(r16)
    9d78:	1484b03a 	or	r2,r2,r18
    9d7c:	8080030d 	sth	r2,12(r16)
    9d80:	0027883a 	mov	r19,zero
    9d84:	003fd806 	br	9ce8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ce8>
    9d88:	8140038f 	ldh	r5,14(r16)
    9d8c:	8809883a 	mov	r4,r17
    9d90:	000dca00 	call	dca0 <_isatty_r>
    9d94:	103fe226 	beq	r2,zero,9d20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d20>
    9d98:	8080030b 	ldhu	r2,12(r16)
    9d9c:	10800054 	ori	r2,r2,1
    9da0:	8080030d 	sth	r2,12(r16)
    9da4:	003fde06 	br	9d20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d20>
    9da8:	8080030b 	ldhu	r2,12(r16)
    9dac:	10c0800c 	andi	r3,r2,512
    9db0:	183fdb1e 	bne	r3,zero,9d20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d20>
    9db4:	10800094 	ori	r2,r2,2
    9db8:	80c010c4 	addi	r3,r16,67
    9dbc:	8080030d 	sth	r2,12(r16)
    9dc0:	00800044 	movi	r2,1
    9dc4:	80c00015 	stw	r3,0(r16)
    9dc8:	80c00415 	stw	r3,16(r16)
    9dcc:	80800515 	stw	r2,20(r16)
    9dd0:	003fd306 	br	9d20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d20>
    9dd4:	04810004 	movi	r18,1024
    9dd8:	003fc306 	br	9ce8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ce8>
    9ddc:	0027883a 	mov	r19,zero
    9de0:	04810004 	movi	r18,1024
    9de4:	003fc006 	br	9ce8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ce8>

00009de8 <_malloc_r>:
    9de8:	defff504 	addi	sp,sp,-44
    9dec:	dc800315 	stw	r18,12(sp)
    9df0:	dfc00a15 	stw	ra,40(sp)
    9df4:	df000915 	stw	fp,36(sp)
    9df8:	ddc00815 	stw	r23,32(sp)
    9dfc:	dd800715 	stw	r22,28(sp)
    9e00:	dd400615 	stw	r21,24(sp)
    9e04:	dd000515 	stw	r20,20(sp)
    9e08:	dcc00415 	stw	r19,16(sp)
    9e0c:	dc400215 	stw	r17,8(sp)
    9e10:	dc000115 	stw	r16,4(sp)
    9e14:	288002c4 	addi	r2,r5,11
    9e18:	00c00584 	movi	r3,22
    9e1c:	2025883a 	mov	r18,r4
    9e20:	18807f2e 	bgeu	r3,r2,a020 <_malloc_r+0x238>
    9e24:	047ffe04 	movi	r17,-8
    9e28:	1462703a 	and	r17,r2,r17
    9e2c:	8800a316 	blt	r17,zero,a0bc <_malloc_r+0x2d4>
    9e30:	8940a236 	bltu	r17,r5,a0bc <_malloc_r+0x2d4>
    9e34:	000fe600 	call	fe60 <__malloc_lock>
    9e38:	00807dc4 	movi	r2,503
    9e3c:	1441e92e 	bgeu	r2,r17,a5e4 <_malloc_r+0x7fc>
    9e40:	8804d27a 	srli	r2,r17,9
    9e44:	1000a126 	beq	r2,zero,a0cc <_malloc_r+0x2e4>
    9e48:	00c00104 	movi	r3,4
    9e4c:	18811e36 	bltu	r3,r2,a2c8 <_malloc_r+0x4e0>
    9e50:	8804d1ba 	srli	r2,r17,6
    9e54:	12000e44 	addi	r8,r2,57
    9e58:	11c00e04 	addi	r7,r2,56
    9e5c:	4209883a 	add	r4,r8,r8
    9e60:	04c000b4 	movhi	r19,2
    9e64:	2109883a 	add	r4,r4,r4
    9e68:	9cf08e04 	addi	r19,r19,-15816
    9e6c:	2109883a 	add	r4,r4,r4
    9e70:	9909883a 	add	r4,r19,r4
    9e74:	24000117 	ldw	r16,4(r4)
    9e78:	213ffe04 	addi	r4,r4,-8
    9e7c:	24009726 	beq	r4,r16,a0dc <_malloc_r+0x2f4>
    9e80:	80800117 	ldw	r2,4(r16)
    9e84:	01bfff04 	movi	r6,-4
    9e88:	014003c4 	movi	r5,15
    9e8c:	1184703a 	and	r2,r2,r6
    9e90:	1447c83a 	sub	r3,r2,r17
    9e94:	28c00716 	blt	r5,r3,9eb4 <_malloc_r+0xcc>
    9e98:	1800920e 	bge	r3,zero,a0e4 <_malloc_r+0x2fc>
    9e9c:	84000317 	ldw	r16,12(r16)
    9ea0:	24008e26 	beq	r4,r16,a0dc <_malloc_r+0x2f4>
    9ea4:	80800117 	ldw	r2,4(r16)
    9ea8:	1184703a 	and	r2,r2,r6
    9eac:	1447c83a 	sub	r3,r2,r17
    9eb0:	28fff90e 	bge	r5,r3,9e98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e98>
    9eb4:	3809883a 	mov	r4,r7
    9eb8:	018000b4 	movhi	r6,2
    9ebc:	9c000417 	ldw	r16,16(r19)
    9ec0:	31b08e04 	addi	r6,r6,-15816
    9ec4:	32000204 	addi	r8,r6,8
    9ec8:	82013426 	beq	r16,r8,a39c <_malloc_r+0x5b4>
    9ecc:	80c00117 	ldw	r3,4(r16)
    9ed0:	00bfff04 	movi	r2,-4
    9ed4:	188e703a 	and	r7,r3,r2
    9ed8:	3c45c83a 	sub	r2,r7,r17
    9edc:	00c003c4 	movi	r3,15
    9ee0:	18811f16 	blt	r3,r2,a360 <_malloc_r+0x578>
    9ee4:	32000515 	stw	r8,20(r6)
    9ee8:	32000415 	stw	r8,16(r6)
    9eec:	10007f0e 	bge	r2,zero,a0ec <_malloc_r+0x304>
    9ef0:	00807fc4 	movi	r2,511
    9ef4:	11c0fd36 	bltu	r2,r7,a2ec <_malloc_r+0x504>
    9ef8:	3806d0fa 	srli	r3,r7,3
    9efc:	01c00044 	movi	r7,1
    9f00:	30800117 	ldw	r2,4(r6)
    9f04:	19400044 	addi	r5,r3,1
    9f08:	294b883a 	add	r5,r5,r5
    9f0c:	1807d0ba 	srai	r3,r3,2
    9f10:	294b883a 	add	r5,r5,r5
    9f14:	294b883a 	add	r5,r5,r5
    9f18:	298b883a 	add	r5,r5,r6
    9f1c:	38c6983a 	sll	r3,r7,r3
    9f20:	29c00017 	ldw	r7,0(r5)
    9f24:	2a7ffe04 	addi	r9,r5,-8
    9f28:	1886b03a 	or	r3,r3,r2
    9f2c:	82400315 	stw	r9,12(r16)
    9f30:	81c00215 	stw	r7,8(r16)
    9f34:	30c00115 	stw	r3,4(r6)
    9f38:	2c000015 	stw	r16,0(r5)
    9f3c:	3c000315 	stw	r16,12(r7)
    9f40:	2005d0ba 	srai	r2,r4,2
    9f44:	01400044 	movi	r5,1
    9f48:	288a983a 	sll	r5,r5,r2
    9f4c:	19406f36 	bltu	r3,r5,a10c <_malloc_r+0x324>
    9f50:	28c4703a 	and	r2,r5,r3
    9f54:	10000a1e 	bne	r2,zero,9f80 <_malloc_r+0x198>
    9f58:	00bfff04 	movi	r2,-4
    9f5c:	294b883a 	add	r5,r5,r5
    9f60:	2088703a 	and	r4,r4,r2
    9f64:	28c4703a 	and	r2,r5,r3
    9f68:	21000104 	addi	r4,r4,4
    9f6c:	1000041e 	bne	r2,zero,9f80 <_malloc_r+0x198>
    9f70:	294b883a 	add	r5,r5,r5
    9f74:	28c4703a 	and	r2,r5,r3
    9f78:	21000104 	addi	r4,r4,4
    9f7c:	103ffc26 	beq	r2,zero,9f70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f70>
    9f80:	02bfff04 	movi	r10,-4
    9f84:	024003c4 	movi	r9,15
    9f88:	21800044 	addi	r6,r4,1
    9f8c:	318d883a 	add	r6,r6,r6
    9f90:	318d883a 	add	r6,r6,r6
    9f94:	318d883a 	add	r6,r6,r6
    9f98:	998d883a 	add	r6,r19,r6
    9f9c:	333ffe04 	addi	r12,r6,-8
    9fa0:	2017883a 	mov	r11,r4
    9fa4:	31800104 	addi	r6,r6,4
    9fa8:	34000017 	ldw	r16,0(r6)
    9fac:	31fffd04 	addi	r7,r6,-12
    9fb0:	81c0041e 	bne	r16,r7,9fc4 <_malloc_r+0x1dc>
    9fb4:	0000fb06 	br	a3a4 <_malloc_r+0x5bc>
    9fb8:	1801030e 	bge	r3,zero,a3c8 <_malloc_r+0x5e0>
    9fbc:	84000317 	ldw	r16,12(r16)
    9fc0:	81c0f826 	beq	r16,r7,a3a4 <_malloc_r+0x5bc>
    9fc4:	80800117 	ldw	r2,4(r16)
    9fc8:	1284703a 	and	r2,r2,r10
    9fcc:	1447c83a 	sub	r3,r2,r17
    9fd0:	48fff90e 	bge	r9,r3,9fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fb8>
    9fd4:	80800317 	ldw	r2,12(r16)
    9fd8:	81000217 	ldw	r4,8(r16)
    9fdc:	89400054 	ori	r5,r17,1
    9fe0:	81400115 	stw	r5,4(r16)
    9fe4:	20800315 	stw	r2,12(r4)
    9fe8:	11000215 	stw	r4,8(r2)
    9fec:	8463883a 	add	r17,r16,r17
    9ff0:	9c400515 	stw	r17,20(r19)
    9ff4:	9c400415 	stw	r17,16(r19)
    9ff8:	18800054 	ori	r2,r3,1
    9ffc:	88800115 	stw	r2,4(r17)
    a000:	8a000315 	stw	r8,12(r17)
    a004:	8a000215 	stw	r8,8(r17)
    a008:	88e3883a 	add	r17,r17,r3
    a00c:	88c00015 	stw	r3,0(r17)
    a010:	9009883a 	mov	r4,r18
    a014:	000ff800 	call	ff80 <__malloc_unlock>
    a018:	80800204 	addi	r2,r16,8
    a01c:	00001b06 	br	a08c <_malloc_r+0x2a4>
    a020:	04400404 	movi	r17,16
    a024:	89402536 	bltu	r17,r5,a0bc <_malloc_r+0x2d4>
    a028:	000fe600 	call	fe60 <__malloc_lock>
    a02c:	00800184 	movi	r2,6
    a030:	01000084 	movi	r4,2
    a034:	04c000b4 	movhi	r19,2
    a038:	1085883a 	add	r2,r2,r2
    a03c:	9cf08e04 	addi	r19,r19,-15816
    a040:	1085883a 	add	r2,r2,r2
    a044:	9885883a 	add	r2,r19,r2
    a048:	14000117 	ldw	r16,4(r2)
    a04c:	10fffe04 	addi	r3,r2,-8
    a050:	80c0d926 	beq	r16,r3,a3b8 <_malloc_r+0x5d0>
    a054:	80c00117 	ldw	r3,4(r16)
    a058:	81000317 	ldw	r4,12(r16)
    a05c:	00bfff04 	movi	r2,-4
    a060:	1884703a 	and	r2,r3,r2
    a064:	81400217 	ldw	r5,8(r16)
    a068:	8085883a 	add	r2,r16,r2
    a06c:	10c00117 	ldw	r3,4(r2)
    a070:	29000315 	stw	r4,12(r5)
    a074:	21400215 	stw	r5,8(r4)
    a078:	18c00054 	ori	r3,r3,1
    a07c:	10c00115 	stw	r3,4(r2)
    a080:	9009883a 	mov	r4,r18
    a084:	000ff800 	call	ff80 <__malloc_unlock>
    a088:	80800204 	addi	r2,r16,8
    a08c:	dfc00a17 	ldw	ra,40(sp)
    a090:	df000917 	ldw	fp,36(sp)
    a094:	ddc00817 	ldw	r23,32(sp)
    a098:	dd800717 	ldw	r22,28(sp)
    a09c:	dd400617 	ldw	r21,24(sp)
    a0a0:	dd000517 	ldw	r20,20(sp)
    a0a4:	dcc00417 	ldw	r19,16(sp)
    a0a8:	dc800317 	ldw	r18,12(sp)
    a0ac:	dc400217 	ldw	r17,8(sp)
    a0b0:	dc000117 	ldw	r16,4(sp)
    a0b4:	dec00b04 	addi	sp,sp,44
    a0b8:	f800283a 	ret
    a0bc:	00800304 	movi	r2,12
    a0c0:	90800015 	stw	r2,0(r18)
    a0c4:	0005883a 	mov	r2,zero
    a0c8:	003ff006 	br	a08c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a08c>
    a0cc:	01002004 	movi	r4,128
    a0d0:	02001004 	movi	r8,64
    a0d4:	01c00fc4 	movi	r7,63
    a0d8:	003f6106 	br	9e60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e60>
    a0dc:	4009883a 	mov	r4,r8
    a0e0:	003f7506 	br	9eb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009eb8>
    a0e4:	81000317 	ldw	r4,12(r16)
    a0e8:	003fde06 	br	a064 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a064>
    a0ec:	81c5883a 	add	r2,r16,r7
    a0f0:	11400117 	ldw	r5,4(r2)
    a0f4:	9009883a 	mov	r4,r18
    a0f8:	29400054 	ori	r5,r5,1
    a0fc:	11400115 	stw	r5,4(r2)
    a100:	000ff800 	call	ff80 <__malloc_unlock>
    a104:	80800204 	addi	r2,r16,8
    a108:	003fe006 	br	a08c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a08c>
    a10c:	9c000217 	ldw	r16,8(r19)
    a110:	00bfff04 	movi	r2,-4
    a114:	85800117 	ldw	r22,4(r16)
    a118:	b0ac703a 	and	r22,r22,r2
    a11c:	b4400336 	bltu	r22,r17,a12c <_malloc_r+0x344>
    a120:	b445c83a 	sub	r2,r22,r17
    a124:	00c003c4 	movi	r3,15
    a128:	18805d16 	blt	r3,r2,a2a0 <_malloc_r+0x4b8>
    a12c:	05c000b4 	movhi	r23,2
    a130:	008000b4 	movhi	r2,2
    a134:	10bf2004 	addi	r2,r2,-896
    a138:	bdf71504 	addi	r23,r23,-9132
    a13c:	15400017 	ldw	r21,0(r2)
    a140:	b8c00017 	ldw	r3,0(r23)
    a144:	00bfffc4 	movi	r2,-1
    a148:	858d883a 	add	r6,r16,r22
    a14c:	8d6b883a 	add	r21,r17,r21
    a150:	1880ea26 	beq	r3,r2,a4fc <_malloc_r+0x714>
    a154:	ad4403c4 	addi	r21,r21,4111
    a158:	00bc0004 	movi	r2,-4096
    a15c:	a8aa703a 	and	r21,r21,r2
    a160:	a80b883a 	mov	r5,r21
    a164:	9009883a 	mov	r4,r18
    a168:	d9800015 	stw	r6,0(sp)
    a16c:	000b9b80 	call	b9b8 <_sbrk_r>
    a170:	1029883a 	mov	r20,r2
    a174:	00bfffc4 	movi	r2,-1
    a178:	d9800017 	ldw	r6,0(sp)
    a17c:	a080e826 	beq	r20,r2,a520 <_malloc_r+0x738>
    a180:	a180a636 	bltu	r20,r6,a41c <_malloc_r+0x634>
    a184:	070000b4 	movhi	fp,2
    a188:	e73f4204 	addi	fp,fp,-760
    a18c:	e0800017 	ldw	r2,0(fp)
    a190:	a887883a 	add	r3,r21,r2
    a194:	e0c00015 	stw	r3,0(fp)
    a198:	3500e626 	beq	r6,r20,a534 <_malloc_r+0x74c>
    a19c:	b9000017 	ldw	r4,0(r23)
    a1a0:	00bfffc4 	movi	r2,-1
    a1a4:	2080ee26 	beq	r4,r2,a560 <_malloc_r+0x778>
    a1a8:	a185c83a 	sub	r2,r20,r6
    a1ac:	10c5883a 	add	r2,r2,r3
    a1b0:	e0800015 	stw	r2,0(fp)
    a1b4:	a0c001cc 	andi	r3,r20,7
    a1b8:	1800bc26 	beq	r3,zero,a4ac <_malloc_r+0x6c4>
    a1bc:	a0e9c83a 	sub	r20,r20,r3
    a1c0:	00840204 	movi	r2,4104
    a1c4:	a5000204 	addi	r20,r20,8
    a1c8:	10c7c83a 	sub	r3,r2,r3
    a1cc:	a545883a 	add	r2,r20,r21
    a1d0:	1083ffcc 	andi	r2,r2,4095
    a1d4:	18abc83a 	sub	r21,r3,r2
    a1d8:	a80b883a 	mov	r5,r21
    a1dc:	9009883a 	mov	r4,r18
    a1e0:	000b9b80 	call	b9b8 <_sbrk_r>
    a1e4:	00ffffc4 	movi	r3,-1
    a1e8:	10c0e126 	beq	r2,r3,a570 <_malloc_r+0x788>
    a1ec:	1505c83a 	sub	r2,r2,r20
    a1f0:	1545883a 	add	r2,r2,r21
    a1f4:	10800054 	ori	r2,r2,1
    a1f8:	e0c00017 	ldw	r3,0(fp)
    a1fc:	9d000215 	stw	r20,8(r19)
    a200:	a0800115 	stw	r2,4(r20)
    a204:	a8c7883a 	add	r3,r21,r3
    a208:	e0c00015 	stw	r3,0(fp)
    a20c:	84c00e26 	beq	r16,r19,a248 <_malloc_r+0x460>
    a210:	018003c4 	movi	r6,15
    a214:	3580a72e 	bgeu	r6,r22,a4b4 <_malloc_r+0x6cc>
    a218:	81400117 	ldw	r5,4(r16)
    a21c:	013ffe04 	movi	r4,-8
    a220:	b0bffd04 	addi	r2,r22,-12
    a224:	1104703a 	and	r2,r2,r4
    a228:	2900004c 	andi	r4,r5,1
    a22c:	2088b03a 	or	r4,r4,r2
    a230:	81000115 	stw	r4,4(r16)
    a234:	01400144 	movi	r5,5
    a238:	8089883a 	add	r4,r16,r2
    a23c:	21400115 	stw	r5,4(r4)
    a240:	21400215 	stw	r5,8(r4)
    a244:	3080cd36 	bltu	r6,r2,a57c <_malloc_r+0x794>
    a248:	008000b4 	movhi	r2,2
    a24c:	10bf1f04 	addi	r2,r2,-900
    a250:	11000017 	ldw	r4,0(r2)
    a254:	20c0012e 	bgeu	r4,r3,a25c <_malloc_r+0x474>
    a258:	10c00015 	stw	r3,0(r2)
    a25c:	008000b4 	movhi	r2,2
    a260:	10bf1e04 	addi	r2,r2,-904
    a264:	11000017 	ldw	r4,0(r2)
    a268:	9c000217 	ldw	r16,8(r19)
    a26c:	20c0012e 	bgeu	r4,r3,a274 <_malloc_r+0x48c>
    a270:	10c00015 	stw	r3,0(r2)
    a274:	80c00117 	ldw	r3,4(r16)
    a278:	00bfff04 	movi	r2,-4
    a27c:	1886703a 	and	r3,r3,r2
    a280:	1c45c83a 	sub	r2,r3,r17
    a284:	1c400236 	bltu	r3,r17,a290 <_malloc_r+0x4a8>
    a288:	00c003c4 	movi	r3,15
    a28c:	18800416 	blt	r3,r2,a2a0 <_malloc_r+0x4b8>
    a290:	9009883a 	mov	r4,r18
    a294:	000ff800 	call	ff80 <__malloc_unlock>
    a298:	0005883a 	mov	r2,zero
    a29c:	003f7b06 	br	a08c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a08c>
    a2a0:	88c00054 	ori	r3,r17,1
    a2a4:	80c00115 	stw	r3,4(r16)
    a2a8:	8463883a 	add	r17,r16,r17
    a2ac:	10800054 	ori	r2,r2,1
    a2b0:	9c400215 	stw	r17,8(r19)
    a2b4:	88800115 	stw	r2,4(r17)
    a2b8:	9009883a 	mov	r4,r18
    a2bc:	000ff800 	call	ff80 <__malloc_unlock>
    a2c0:	80800204 	addi	r2,r16,8
    a2c4:	003f7106 	br	a08c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a08c>
    a2c8:	00c00504 	movi	r3,20
    a2cc:	18804a2e 	bgeu	r3,r2,a3f8 <_malloc_r+0x610>
    a2d0:	00c01504 	movi	r3,84
    a2d4:	18806e36 	bltu	r3,r2,a490 <_malloc_r+0x6a8>
    a2d8:	8804d33a 	srli	r2,r17,12
    a2dc:	12001bc4 	addi	r8,r2,111
    a2e0:	11c01b84 	addi	r7,r2,110
    a2e4:	4209883a 	add	r4,r8,r8
    a2e8:	003edd06 	br	9e60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e60>
    a2ec:	3804d27a 	srli	r2,r7,9
    a2f0:	00c00104 	movi	r3,4
    a2f4:	1880442e 	bgeu	r3,r2,a408 <_malloc_r+0x620>
    a2f8:	00c00504 	movi	r3,20
    a2fc:	18808136 	bltu	r3,r2,a504 <_malloc_r+0x71c>
    a300:	11401704 	addi	r5,r2,92
    a304:	10c016c4 	addi	r3,r2,91
    a308:	294b883a 	add	r5,r5,r5
    a30c:	294b883a 	add	r5,r5,r5
    a310:	294b883a 	add	r5,r5,r5
    a314:	994b883a 	add	r5,r19,r5
    a318:	28800017 	ldw	r2,0(r5)
    a31c:	018000b4 	movhi	r6,2
    a320:	297ffe04 	addi	r5,r5,-8
    a324:	31b08e04 	addi	r6,r6,-15816
    a328:	28806526 	beq	r5,r2,a4c0 <_malloc_r+0x6d8>
    a32c:	01bfff04 	movi	r6,-4
    a330:	10c00117 	ldw	r3,4(r2)
    a334:	1986703a 	and	r3,r3,r6
    a338:	38c0022e 	bgeu	r7,r3,a344 <_malloc_r+0x55c>
    a33c:	10800217 	ldw	r2,8(r2)
    a340:	28bffb1e 	bne	r5,r2,a330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a330>
    a344:	11400317 	ldw	r5,12(r2)
    a348:	98c00117 	ldw	r3,4(r19)
    a34c:	81400315 	stw	r5,12(r16)
    a350:	80800215 	stw	r2,8(r16)
    a354:	2c000215 	stw	r16,8(r5)
    a358:	14000315 	stw	r16,12(r2)
    a35c:	003ef806 	br	9f40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f40>
    a360:	88c00054 	ori	r3,r17,1
    a364:	80c00115 	stw	r3,4(r16)
    a368:	8463883a 	add	r17,r16,r17
    a36c:	34400515 	stw	r17,20(r6)
    a370:	34400415 	stw	r17,16(r6)
    a374:	10c00054 	ori	r3,r2,1
    a378:	8a000315 	stw	r8,12(r17)
    a37c:	8a000215 	stw	r8,8(r17)
    a380:	88c00115 	stw	r3,4(r17)
    a384:	88a3883a 	add	r17,r17,r2
    a388:	88800015 	stw	r2,0(r17)
    a38c:	9009883a 	mov	r4,r18
    a390:	000ff800 	call	ff80 <__malloc_unlock>
    a394:	80800204 	addi	r2,r16,8
    a398:	003f3c06 	br	a08c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a08c>
    a39c:	30c00117 	ldw	r3,4(r6)
    a3a0:	003ee706 	br	9f40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f40>
    a3a4:	5ac00044 	addi	r11,r11,1
    a3a8:	588000cc 	andi	r2,r11,3
    a3ac:	31800204 	addi	r6,r6,8
    a3b0:	103efd1e 	bne	r2,zero,9fa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fa8>
    a3b4:	00002406 	br	a448 <_malloc_r+0x660>
    a3b8:	14000317 	ldw	r16,12(r2)
    a3bc:	143f251e 	bne	r2,r16,a054 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a054>
    a3c0:	21000084 	addi	r4,r4,2
    a3c4:	003ebc06 	br	9eb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009eb8>
    a3c8:	8085883a 	add	r2,r16,r2
    a3cc:	10c00117 	ldw	r3,4(r2)
    a3d0:	81000317 	ldw	r4,12(r16)
    a3d4:	81400217 	ldw	r5,8(r16)
    a3d8:	18c00054 	ori	r3,r3,1
    a3dc:	10c00115 	stw	r3,4(r2)
    a3e0:	29000315 	stw	r4,12(r5)
    a3e4:	21400215 	stw	r5,8(r4)
    a3e8:	9009883a 	mov	r4,r18
    a3ec:	000ff800 	call	ff80 <__malloc_unlock>
    a3f0:	80800204 	addi	r2,r16,8
    a3f4:	003f2506 	br	a08c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a08c>
    a3f8:	12001704 	addi	r8,r2,92
    a3fc:	11c016c4 	addi	r7,r2,91
    a400:	4209883a 	add	r4,r8,r8
    a404:	003e9606 	br	9e60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e60>
    a408:	3804d1ba 	srli	r2,r7,6
    a40c:	11400e44 	addi	r5,r2,57
    a410:	10c00e04 	addi	r3,r2,56
    a414:	294b883a 	add	r5,r5,r5
    a418:	003fbc06 	br	a30c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a30c>
    a41c:	84ff5926 	beq	r16,r19,a184 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a184>
    a420:	008000b4 	movhi	r2,2
    a424:	10b08e04 	addi	r2,r2,-15816
    a428:	14000217 	ldw	r16,8(r2)
    a42c:	00bfff04 	movi	r2,-4
    a430:	80c00117 	ldw	r3,4(r16)
    a434:	1886703a 	and	r3,r3,r2
    a438:	003f9106 	br	a280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a280>
    a43c:	60800217 	ldw	r2,8(r12)
    a440:	213fffc4 	addi	r4,r4,-1
    a444:	1300651e 	bne	r2,r12,a5dc <_malloc_r+0x7f4>
    a448:	208000cc 	andi	r2,r4,3
    a44c:	633ffe04 	addi	r12,r12,-8
    a450:	103ffa1e 	bne	r2,zero,a43c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a43c>
    a454:	98800117 	ldw	r2,4(r19)
    a458:	0146303a 	nor	r3,zero,r5
    a45c:	1884703a 	and	r2,r3,r2
    a460:	98800115 	stw	r2,4(r19)
    a464:	294b883a 	add	r5,r5,r5
    a468:	117f2836 	bltu	r2,r5,a10c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a10c>
    a46c:	283f2726 	beq	r5,zero,a10c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a10c>
    a470:	2886703a 	and	r3,r5,r2
    a474:	5809883a 	mov	r4,r11
    a478:	183ec31e 	bne	r3,zero,9f88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f88>
    a47c:	294b883a 	add	r5,r5,r5
    a480:	2886703a 	and	r3,r5,r2
    a484:	21000104 	addi	r4,r4,4
    a488:	183ffc26 	beq	r3,zero,a47c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a47c>
    a48c:	003ebe06 	br	9f88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f88>
    a490:	00c05504 	movi	r3,340
    a494:	18801236 	bltu	r3,r2,a4e0 <_malloc_r+0x6f8>
    a498:	8804d3fa 	srli	r2,r17,15
    a49c:	12001e04 	addi	r8,r2,120
    a4a0:	11c01dc4 	addi	r7,r2,119
    a4a4:	4209883a 	add	r4,r8,r8
    a4a8:	003e6d06 	br	9e60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e60>
    a4ac:	00c40004 	movi	r3,4096
    a4b0:	003f4606 	br	a1cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a1cc>
    a4b4:	00800044 	movi	r2,1
    a4b8:	a0800115 	stw	r2,4(r20)
    a4bc:	003f7406 	br	a290 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a290>
    a4c0:	1805d0ba 	srai	r2,r3,2
    a4c4:	01c00044 	movi	r7,1
    a4c8:	30c00117 	ldw	r3,4(r6)
    a4cc:	388e983a 	sll	r7,r7,r2
    a4d0:	2805883a 	mov	r2,r5
    a4d4:	38c6b03a 	or	r3,r7,r3
    a4d8:	30c00115 	stw	r3,4(r6)
    a4dc:	003f9b06 	br	a34c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a34c>
    a4e0:	00c15504 	movi	r3,1364
    a4e4:	18801a36 	bltu	r3,r2,a550 <_malloc_r+0x768>
    a4e8:	8804d4ba 	srli	r2,r17,18
    a4ec:	12001f44 	addi	r8,r2,125
    a4f0:	11c01f04 	addi	r7,r2,124
    a4f4:	4209883a 	add	r4,r8,r8
    a4f8:	003e5906 	br	9e60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e60>
    a4fc:	ad400404 	addi	r21,r21,16
    a500:	003f1706 	br	a160 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a160>
    a504:	00c01504 	movi	r3,84
    a508:	18802336 	bltu	r3,r2,a598 <_malloc_r+0x7b0>
    a50c:	3804d33a 	srli	r2,r7,12
    a510:	11401bc4 	addi	r5,r2,111
    a514:	10c01b84 	addi	r3,r2,110
    a518:	294b883a 	add	r5,r5,r5
    a51c:	003f7b06 	br	a30c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a30c>
    a520:	9c000217 	ldw	r16,8(r19)
    a524:	00bfff04 	movi	r2,-4
    a528:	80c00117 	ldw	r3,4(r16)
    a52c:	1886703a 	and	r3,r3,r2
    a530:	003f5306 	br	a280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a280>
    a534:	3083ffcc 	andi	r2,r6,4095
    a538:	103f181e 	bne	r2,zero,a19c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a19c>
    a53c:	99000217 	ldw	r4,8(r19)
    a540:	b545883a 	add	r2,r22,r21
    a544:	10800054 	ori	r2,r2,1
    a548:	20800115 	stw	r2,4(r4)
    a54c:	003f3e06 	br	a248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a248>
    a550:	01003f84 	movi	r4,254
    a554:	02001fc4 	movi	r8,127
    a558:	01c01f84 	movi	r7,126
    a55c:	003e4006 	br	9e60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e60>
    a560:	008000b4 	movhi	r2,2
    a564:	10b71504 	addi	r2,r2,-9132
    a568:	15000015 	stw	r20,0(r2)
    a56c:	003f1106 	br	a1b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a1b4>
    a570:	00800044 	movi	r2,1
    a574:	002b883a 	mov	r21,zero
    a578:	003f1f06 	br	a1f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a1f8>
    a57c:	81400204 	addi	r5,r16,8
    a580:	9009883a 	mov	r4,r18
    a584:	00096b80 	call	96b8 <_free_r>
    a588:	008000b4 	movhi	r2,2
    a58c:	10bf4204 	addi	r2,r2,-760
    a590:	10c00017 	ldw	r3,0(r2)
    a594:	003f2c06 	br	a248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a248>
    a598:	00c05504 	movi	r3,340
    a59c:	18800536 	bltu	r3,r2,a5b4 <_malloc_r+0x7cc>
    a5a0:	3804d3fa 	srli	r2,r7,15
    a5a4:	11401e04 	addi	r5,r2,120
    a5a8:	10c01dc4 	addi	r3,r2,119
    a5ac:	294b883a 	add	r5,r5,r5
    a5b0:	003f5606 	br	a30c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a30c>
    a5b4:	00c15504 	movi	r3,1364
    a5b8:	18800536 	bltu	r3,r2,a5d0 <_malloc_r+0x7e8>
    a5bc:	3804d4ba 	srli	r2,r7,18
    a5c0:	11401f44 	addi	r5,r2,125
    a5c4:	10c01f04 	addi	r3,r2,124
    a5c8:	294b883a 	add	r5,r5,r5
    a5cc:	003f4f06 	br	a30c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a30c>
    a5d0:	01403f84 	movi	r5,254
    a5d4:	00c01f84 	movi	r3,126
    a5d8:	003f4c06 	br	a30c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a30c>
    a5dc:	98800117 	ldw	r2,4(r19)
    a5e0:	003fa006 	br	a464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a464>
    a5e4:	8808d0fa 	srli	r4,r17,3
    a5e8:	20800044 	addi	r2,r4,1
    a5ec:	1085883a 	add	r2,r2,r2
    a5f0:	003e9006 	br	a034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a034>

0000a5f4 <memchr>:
    a5f4:	208000cc 	andi	r2,r4,3
    a5f8:	280f883a 	mov	r7,r5
    a5fc:	10003426 	beq	r2,zero,a6d0 <memchr+0xdc>
    a600:	30bfffc4 	addi	r2,r6,-1
    a604:	30001a26 	beq	r6,zero,a670 <memchr+0x7c>
    a608:	20c00003 	ldbu	r3,0(r4)
    a60c:	29803fcc 	andi	r6,r5,255
    a610:	30c0051e 	bne	r6,r3,a628 <memchr+0x34>
    a614:	00001806 	br	a678 <memchr+0x84>
    a618:	10001526 	beq	r2,zero,a670 <memchr+0x7c>
    a61c:	20c00003 	ldbu	r3,0(r4)
    a620:	10bfffc4 	addi	r2,r2,-1
    a624:	30c01426 	beq	r6,r3,a678 <memchr+0x84>
    a628:	21000044 	addi	r4,r4,1
    a62c:	20c000cc 	andi	r3,r4,3
    a630:	183ff91e 	bne	r3,zero,a618 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a618>
    a634:	020000c4 	movi	r8,3
    a638:	40801136 	bltu	r8,r2,a680 <memchr+0x8c>
    a63c:	10000c26 	beq	r2,zero,a670 <memchr+0x7c>
    a640:	20c00003 	ldbu	r3,0(r4)
    a644:	29403fcc 	andi	r5,r5,255
    a648:	28c00b26 	beq	r5,r3,a678 <memchr+0x84>
    a64c:	20c00044 	addi	r3,r4,1
    a650:	39803fcc 	andi	r6,r7,255
    a654:	2089883a 	add	r4,r4,r2
    a658:	00000306 	br	a668 <memchr+0x74>
    a65c:	18c00044 	addi	r3,r3,1
    a660:	197fffc3 	ldbu	r5,-1(r3)
    a664:	31400526 	beq	r6,r5,a67c <memchr+0x88>
    a668:	1805883a 	mov	r2,r3
    a66c:	20fffb1e 	bne	r4,r3,a65c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a65c>
    a670:	0005883a 	mov	r2,zero
    a674:	f800283a 	ret
    a678:	2005883a 	mov	r2,r4
    a67c:	f800283a 	ret
    a680:	28c03fcc 	andi	r3,r5,255
    a684:	1812923a 	slli	r9,r3,8
    a688:	02ffbff4 	movhi	r11,65279
    a68c:	02a02074 	movhi	r10,32897
    a690:	48d2b03a 	or	r9,r9,r3
    a694:	4806943a 	slli	r3,r9,16
    a698:	5affbfc4 	addi	r11,r11,-257
    a69c:	52a02004 	addi	r10,r10,-32640
    a6a0:	48d2b03a 	or	r9,r9,r3
    a6a4:	20c00017 	ldw	r3,0(r4)
    a6a8:	48c6f03a 	xor	r3,r9,r3
    a6ac:	1acd883a 	add	r6,r3,r11
    a6b0:	00c6303a 	nor	r3,zero,r3
    a6b4:	30c6703a 	and	r3,r6,r3
    a6b8:	1a86703a 	and	r3,r3,r10
    a6bc:	183fe01e 	bne	r3,zero,a640 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a640>
    a6c0:	10bfff04 	addi	r2,r2,-4
    a6c4:	21000104 	addi	r4,r4,4
    a6c8:	40bff636 	bltu	r8,r2,a6a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6a4>
    a6cc:	003fdb06 	br	a63c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a63c>
    a6d0:	3005883a 	mov	r2,r6
    a6d4:	003fd706 	br	a634 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a634>

0000a6d8 <memcpy>:
    a6d8:	defffd04 	addi	sp,sp,-12
    a6dc:	dfc00215 	stw	ra,8(sp)
    a6e0:	dc400115 	stw	r17,4(sp)
    a6e4:	dc000015 	stw	r16,0(sp)
    a6e8:	00c003c4 	movi	r3,15
    a6ec:	2005883a 	mov	r2,r4
    a6f0:	1980452e 	bgeu	r3,r6,a808 <memcpy+0x130>
    a6f4:	2906b03a 	or	r3,r5,r4
    a6f8:	18c000cc 	andi	r3,r3,3
    a6fc:	1800441e 	bne	r3,zero,a810 <memcpy+0x138>
    a700:	347ffc04 	addi	r17,r6,-16
    a704:	8822d13a 	srli	r17,r17,4
    a708:	28c00104 	addi	r3,r5,4
    a70c:	23400104 	addi	r13,r4,4
    a710:	8820913a 	slli	r16,r17,4
    a714:	2b000204 	addi	r12,r5,8
    a718:	22c00204 	addi	r11,r4,8
    a71c:	84000504 	addi	r16,r16,20
    a720:	2a800304 	addi	r10,r5,12
    a724:	22400304 	addi	r9,r4,12
    a728:	2c21883a 	add	r16,r5,r16
    a72c:	2811883a 	mov	r8,r5
    a730:	200f883a 	mov	r7,r4
    a734:	41000017 	ldw	r4,0(r8)
    a738:	1fc00017 	ldw	ra,0(r3)
    a73c:	63c00017 	ldw	r15,0(r12)
    a740:	39000015 	stw	r4,0(r7)
    a744:	53800017 	ldw	r14,0(r10)
    a748:	6fc00015 	stw	ra,0(r13)
    a74c:	5bc00015 	stw	r15,0(r11)
    a750:	4b800015 	stw	r14,0(r9)
    a754:	18c00404 	addi	r3,r3,16
    a758:	39c00404 	addi	r7,r7,16
    a75c:	42000404 	addi	r8,r8,16
    a760:	6b400404 	addi	r13,r13,16
    a764:	63000404 	addi	r12,r12,16
    a768:	5ac00404 	addi	r11,r11,16
    a76c:	52800404 	addi	r10,r10,16
    a770:	4a400404 	addi	r9,r9,16
    a774:	1c3fef1e 	bne	r3,r16,a734 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a734>
    a778:	89c00044 	addi	r7,r17,1
    a77c:	380e913a 	slli	r7,r7,4
    a780:	310003cc 	andi	r4,r6,15
    a784:	02c000c4 	movi	r11,3
    a788:	11c7883a 	add	r3,r2,r7
    a78c:	29cb883a 	add	r5,r5,r7
    a790:	5900212e 	bgeu	r11,r4,a818 <memcpy+0x140>
    a794:	1813883a 	mov	r9,r3
    a798:	2811883a 	mov	r8,r5
    a79c:	200f883a 	mov	r7,r4
    a7a0:	42800017 	ldw	r10,0(r8)
    a7a4:	4a400104 	addi	r9,r9,4
    a7a8:	39ffff04 	addi	r7,r7,-4
    a7ac:	4abfff15 	stw	r10,-4(r9)
    a7b0:	42000104 	addi	r8,r8,4
    a7b4:	59fffa36 	bltu	r11,r7,a7a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7a0>
    a7b8:	213fff04 	addi	r4,r4,-4
    a7bc:	2008d0ba 	srli	r4,r4,2
    a7c0:	318000cc 	andi	r6,r6,3
    a7c4:	21000044 	addi	r4,r4,1
    a7c8:	2109883a 	add	r4,r4,r4
    a7cc:	2109883a 	add	r4,r4,r4
    a7d0:	1907883a 	add	r3,r3,r4
    a7d4:	290b883a 	add	r5,r5,r4
    a7d8:	30000626 	beq	r6,zero,a7f4 <memcpy+0x11c>
    a7dc:	198d883a 	add	r6,r3,r6
    a7e0:	29c00003 	ldbu	r7,0(r5)
    a7e4:	18c00044 	addi	r3,r3,1
    a7e8:	29400044 	addi	r5,r5,1
    a7ec:	19ffffc5 	stb	r7,-1(r3)
    a7f0:	19bffb1e 	bne	r3,r6,a7e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7e0>
    a7f4:	dfc00217 	ldw	ra,8(sp)
    a7f8:	dc400117 	ldw	r17,4(sp)
    a7fc:	dc000017 	ldw	r16,0(sp)
    a800:	dec00304 	addi	sp,sp,12
    a804:	f800283a 	ret
    a808:	2007883a 	mov	r3,r4
    a80c:	003ff206 	br	a7d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7d8>
    a810:	2007883a 	mov	r3,r4
    a814:	003ff106 	br	a7dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7dc>
    a818:	200d883a 	mov	r6,r4
    a81c:	003fee06 	br	a7d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7d8>

0000a820 <memset>:
    a820:	20c000cc 	andi	r3,r4,3
    a824:	2005883a 	mov	r2,r4
    a828:	18004426 	beq	r3,zero,a93c <memset+0x11c>
    a82c:	31ffffc4 	addi	r7,r6,-1
    a830:	30004026 	beq	r6,zero,a934 <memset+0x114>
    a834:	2813883a 	mov	r9,r5
    a838:	200d883a 	mov	r6,r4
    a83c:	2007883a 	mov	r3,r4
    a840:	00000406 	br	a854 <memset+0x34>
    a844:	3a3fffc4 	addi	r8,r7,-1
    a848:	31800044 	addi	r6,r6,1
    a84c:	38003926 	beq	r7,zero,a934 <memset+0x114>
    a850:	400f883a 	mov	r7,r8
    a854:	18c00044 	addi	r3,r3,1
    a858:	32400005 	stb	r9,0(r6)
    a85c:	1a0000cc 	andi	r8,r3,3
    a860:	403ff81e 	bne	r8,zero,a844 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a844>
    a864:	010000c4 	movi	r4,3
    a868:	21c02d2e 	bgeu	r4,r7,a920 <memset+0x100>
    a86c:	29003fcc 	andi	r4,r5,255
    a870:	200c923a 	slli	r6,r4,8
    a874:	3108b03a 	or	r4,r6,r4
    a878:	200c943a 	slli	r6,r4,16
    a87c:	218cb03a 	or	r6,r4,r6
    a880:	010003c4 	movi	r4,15
    a884:	21c0182e 	bgeu	r4,r7,a8e8 <memset+0xc8>
    a888:	3b3ffc04 	addi	r12,r7,-16
    a88c:	6018d13a 	srli	r12,r12,4
    a890:	1a000104 	addi	r8,r3,4
    a894:	1ac00204 	addi	r11,r3,8
    a898:	6008913a 	slli	r4,r12,4
    a89c:	1a800304 	addi	r10,r3,12
    a8a0:	1813883a 	mov	r9,r3
    a8a4:	21000504 	addi	r4,r4,20
    a8a8:	1909883a 	add	r4,r3,r4
    a8ac:	49800015 	stw	r6,0(r9)
    a8b0:	41800015 	stw	r6,0(r8)
    a8b4:	59800015 	stw	r6,0(r11)
    a8b8:	51800015 	stw	r6,0(r10)
    a8bc:	42000404 	addi	r8,r8,16
    a8c0:	4a400404 	addi	r9,r9,16
    a8c4:	5ac00404 	addi	r11,r11,16
    a8c8:	52800404 	addi	r10,r10,16
    a8cc:	413ff71e 	bne	r8,r4,a8ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8ac>
    a8d0:	63000044 	addi	r12,r12,1
    a8d4:	6018913a 	slli	r12,r12,4
    a8d8:	39c003cc 	andi	r7,r7,15
    a8dc:	010000c4 	movi	r4,3
    a8e0:	1b07883a 	add	r3,r3,r12
    a8e4:	21c00e2e 	bgeu	r4,r7,a920 <memset+0x100>
    a8e8:	1813883a 	mov	r9,r3
    a8ec:	3811883a 	mov	r8,r7
    a8f0:	010000c4 	movi	r4,3
    a8f4:	49800015 	stw	r6,0(r9)
    a8f8:	423fff04 	addi	r8,r8,-4
    a8fc:	4a400104 	addi	r9,r9,4
    a900:	223ffc36 	bltu	r4,r8,a8f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8f4>
    a904:	393fff04 	addi	r4,r7,-4
    a908:	2008d0ba 	srli	r4,r4,2
    a90c:	39c000cc 	andi	r7,r7,3
    a910:	21000044 	addi	r4,r4,1
    a914:	2109883a 	add	r4,r4,r4
    a918:	2109883a 	add	r4,r4,r4
    a91c:	1907883a 	add	r3,r3,r4
    a920:	38000526 	beq	r7,zero,a938 <memset+0x118>
    a924:	19cf883a 	add	r7,r3,r7
    a928:	19400005 	stb	r5,0(r3)
    a92c:	18c00044 	addi	r3,r3,1
    a930:	38fffd1e 	bne	r7,r3,a928 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a928>
    a934:	f800283a 	ret
    a938:	f800283a 	ret
    a93c:	2007883a 	mov	r3,r4
    a940:	300f883a 	mov	r7,r6
    a944:	003fc706 	br	a864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a864>

0000a948 <_Balloc>:
    a948:	20801317 	ldw	r2,76(r4)
    a94c:	defffc04 	addi	sp,sp,-16
    a950:	dc400115 	stw	r17,4(sp)
    a954:	dc000015 	stw	r16,0(sp)
    a958:	dfc00315 	stw	ra,12(sp)
    a95c:	dc800215 	stw	r18,8(sp)
    a960:	2023883a 	mov	r17,r4
    a964:	2821883a 	mov	r16,r5
    a968:	10000f26 	beq	r2,zero,a9a8 <_Balloc+0x60>
    a96c:	8407883a 	add	r3,r16,r16
    a970:	18c7883a 	add	r3,r3,r3
    a974:	10c7883a 	add	r3,r2,r3
    a978:	18800017 	ldw	r2,0(r3)
    a97c:	10001126 	beq	r2,zero,a9c4 <_Balloc+0x7c>
    a980:	11000017 	ldw	r4,0(r2)
    a984:	19000015 	stw	r4,0(r3)
    a988:	10000415 	stw	zero,16(r2)
    a98c:	10000315 	stw	zero,12(r2)
    a990:	dfc00317 	ldw	ra,12(sp)
    a994:	dc800217 	ldw	r18,8(sp)
    a998:	dc400117 	ldw	r17,4(sp)
    a99c:	dc000017 	ldw	r16,0(sp)
    a9a0:	dec00404 	addi	sp,sp,16
    a9a4:	f800283a 	ret
    a9a8:	01800844 	movi	r6,33
    a9ac:	01400104 	movi	r5,4
    a9b0:	000d3b80 	call	d3b8 <_calloc_r>
    a9b4:	88801315 	stw	r2,76(r17)
    a9b8:	103fec1e 	bne	r2,zero,a96c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a96c>
    a9bc:	0005883a 	mov	r2,zero
    a9c0:	003ff306 	br	a990 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a990>
    a9c4:	01400044 	movi	r5,1
    a9c8:	2c24983a 	sll	r18,r5,r16
    a9cc:	8809883a 	mov	r4,r17
    a9d0:	91800144 	addi	r6,r18,5
    a9d4:	318d883a 	add	r6,r6,r6
    a9d8:	318d883a 	add	r6,r6,r6
    a9dc:	000d3b80 	call	d3b8 <_calloc_r>
    a9e0:	103ff626 	beq	r2,zero,a9bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a9bc>
    a9e4:	14000115 	stw	r16,4(r2)
    a9e8:	14800215 	stw	r18,8(r2)
    a9ec:	003fe606 	br	a988 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a988>

0000a9f0 <_Bfree>:
    a9f0:	28000826 	beq	r5,zero,aa14 <_Bfree+0x24>
    a9f4:	28c00117 	ldw	r3,4(r5)
    a9f8:	20801317 	ldw	r2,76(r4)
    a9fc:	18c7883a 	add	r3,r3,r3
    aa00:	18c7883a 	add	r3,r3,r3
    aa04:	10c5883a 	add	r2,r2,r3
    aa08:	10c00017 	ldw	r3,0(r2)
    aa0c:	28c00015 	stw	r3,0(r5)
    aa10:	11400015 	stw	r5,0(r2)
    aa14:	f800283a 	ret

0000aa18 <__multadd>:
    aa18:	defffa04 	addi	sp,sp,-24
    aa1c:	dc800315 	stw	r18,12(sp)
    aa20:	dc400215 	stw	r17,8(sp)
    aa24:	dc000115 	stw	r16,4(sp)
    aa28:	2823883a 	mov	r17,r5
    aa2c:	2c000417 	ldw	r16,16(r5)
    aa30:	dfc00515 	stw	ra,20(sp)
    aa34:	dcc00415 	stw	r19,16(sp)
    aa38:	2025883a 	mov	r18,r4
    aa3c:	29400504 	addi	r5,r5,20
    aa40:	0011883a 	mov	r8,zero
    aa44:	28c00017 	ldw	r3,0(r5)
    aa48:	29400104 	addi	r5,r5,4
    aa4c:	42000044 	addi	r8,r8,1
    aa50:	18bfffcc 	andi	r2,r3,65535
    aa54:	1185383a 	mul	r2,r2,r6
    aa58:	1806d43a 	srli	r3,r3,16
    aa5c:	11cf883a 	add	r7,r2,r7
    aa60:	3808d43a 	srli	r4,r7,16
    aa64:	1987383a 	mul	r3,r3,r6
    aa68:	38bfffcc 	andi	r2,r7,65535
    aa6c:	1907883a 	add	r3,r3,r4
    aa70:	1808943a 	slli	r4,r3,16
    aa74:	180ed43a 	srli	r7,r3,16
    aa78:	2085883a 	add	r2,r4,r2
    aa7c:	28bfff15 	stw	r2,-4(r5)
    aa80:	443ff016 	blt	r8,r16,aa44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa44>
    aa84:	38000926 	beq	r7,zero,aaac <__multadd+0x94>
    aa88:	88800217 	ldw	r2,8(r17)
    aa8c:	80800f0e 	bge	r16,r2,aacc <__multadd+0xb4>
    aa90:	80800144 	addi	r2,r16,5
    aa94:	1085883a 	add	r2,r2,r2
    aa98:	1085883a 	add	r2,r2,r2
    aa9c:	8885883a 	add	r2,r17,r2
    aaa0:	11c00015 	stw	r7,0(r2)
    aaa4:	84000044 	addi	r16,r16,1
    aaa8:	8c000415 	stw	r16,16(r17)
    aaac:	8805883a 	mov	r2,r17
    aab0:	dfc00517 	ldw	ra,20(sp)
    aab4:	dcc00417 	ldw	r19,16(sp)
    aab8:	dc800317 	ldw	r18,12(sp)
    aabc:	dc400217 	ldw	r17,8(sp)
    aac0:	dc000117 	ldw	r16,4(sp)
    aac4:	dec00604 	addi	sp,sp,24
    aac8:	f800283a 	ret
    aacc:	89400117 	ldw	r5,4(r17)
    aad0:	9009883a 	mov	r4,r18
    aad4:	d9c00015 	stw	r7,0(sp)
    aad8:	29400044 	addi	r5,r5,1
    aadc:	000a9480 	call	a948 <_Balloc>
    aae0:	89800417 	ldw	r6,16(r17)
    aae4:	89400304 	addi	r5,r17,12
    aae8:	11000304 	addi	r4,r2,12
    aaec:	31800084 	addi	r6,r6,2
    aaf0:	318d883a 	add	r6,r6,r6
    aaf4:	318d883a 	add	r6,r6,r6
    aaf8:	1027883a 	mov	r19,r2
    aafc:	000a6d80 	call	a6d8 <memcpy>
    ab00:	d9c00017 	ldw	r7,0(sp)
    ab04:	88000a26 	beq	r17,zero,ab30 <__multadd+0x118>
    ab08:	88c00117 	ldw	r3,4(r17)
    ab0c:	90801317 	ldw	r2,76(r18)
    ab10:	18c7883a 	add	r3,r3,r3
    ab14:	18c7883a 	add	r3,r3,r3
    ab18:	10c5883a 	add	r2,r2,r3
    ab1c:	10c00017 	ldw	r3,0(r2)
    ab20:	88c00015 	stw	r3,0(r17)
    ab24:	14400015 	stw	r17,0(r2)
    ab28:	9823883a 	mov	r17,r19
    ab2c:	003fd806 	br	aa90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa90>
    ab30:	9823883a 	mov	r17,r19
    ab34:	003fd606 	br	aa90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa90>

0000ab38 <__s2b>:
    ab38:	defff904 	addi	sp,sp,-28
    ab3c:	dc400115 	stw	r17,4(sp)
    ab40:	dc000015 	stw	r16,0(sp)
    ab44:	2023883a 	mov	r17,r4
    ab48:	2821883a 	mov	r16,r5
    ab4c:	39000204 	addi	r4,r7,8
    ab50:	01400244 	movi	r5,9
    ab54:	dcc00315 	stw	r19,12(sp)
    ab58:	dc800215 	stw	r18,8(sp)
    ab5c:	dfc00615 	stw	ra,24(sp)
    ab60:	dd400515 	stw	r21,20(sp)
    ab64:	dd000415 	stw	r20,16(sp)
    ab68:	3825883a 	mov	r18,r7
    ab6c:	3027883a 	mov	r19,r6
    ab70:	00027680 	call	2768 <__divsi3>
    ab74:	00c00044 	movi	r3,1
    ab78:	000b883a 	mov	r5,zero
    ab7c:	1880030e 	bge	r3,r2,ab8c <__s2b+0x54>
    ab80:	18c7883a 	add	r3,r3,r3
    ab84:	29400044 	addi	r5,r5,1
    ab88:	18bffd16 	blt	r3,r2,ab80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab80>
    ab8c:	8809883a 	mov	r4,r17
    ab90:	000a9480 	call	a948 <_Balloc>
    ab94:	d8c00717 	ldw	r3,28(sp)
    ab98:	10c00515 	stw	r3,20(r2)
    ab9c:	00c00044 	movi	r3,1
    aba0:	10c00415 	stw	r3,16(r2)
    aba4:	00c00244 	movi	r3,9
    aba8:	1cc0210e 	bge	r3,r19,ac30 <__s2b+0xf8>
    abac:	80eb883a 	add	r21,r16,r3
    abb0:	a829883a 	mov	r20,r21
    abb4:	84e1883a 	add	r16,r16,r19
    abb8:	a1c00007 	ldb	r7,0(r20)
    abbc:	01800284 	movi	r6,10
    abc0:	a5000044 	addi	r20,r20,1
    abc4:	100b883a 	mov	r5,r2
    abc8:	39fff404 	addi	r7,r7,-48
    abcc:	8809883a 	mov	r4,r17
    abd0:	000aa180 	call	aa18 <__multadd>
    abd4:	a43ff81e 	bne	r20,r16,abb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abb8>
    abd8:	ace1883a 	add	r16,r21,r19
    abdc:	843ffe04 	addi	r16,r16,-8
    abe0:	9c800a0e 	bge	r19,r18,ac0c <__s2b+0xd4>
    abe4:	94e5c83a 	sub	r18,r18,r19
    abe8:	84a5883a 	add	r18,r16,r18
    abec:	81c00007 	ldb	r7,0(r16)
    abf0:	01800284 	movi	r6,10
    abf4:	84000044 	addi	r16,r16,1
    abf8:	100b883a 	mov	r5,r2
    abfc:	39fff404 	addi	r7,r7,-48
    ac00:	8809883a 	mov	r4,r17
    ac04:	000aa180 	call	aa18 <__multadd>
    ac08:	84bff81e 	bne	r16,r18,abec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abec>
    ac0c:	dfc00617 	ldw	ra,24(sp)
    ac10:	dd400517 	ldw	r21,20(sp)
    ac14:	dd000417 	ldw	r20,16(sp)
    ac18:	dcc00317 	ldw	r19,12(sp)
    ac1c:	dc800217 	ldw	r18,8(sp)
    ac20:	dc400117 	ldw	r17,4(sp)
    ac24:	dc000017 	ldw	r16,0(sp)
    ac28:	dec00704 	addi	sp,sp,28
    ac2c:	f800283a 	ret
    ac30:	84000284 	addi	r16,r16,10
    ac34:	1827883a 	mov	r19,r3
    ac38:	003fe906 	br	abe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abe0>

0000ac3c <__hi0bits>:
    ac3c:	20bfffec 	andhi	r2,r4,65535
    ac40:	1000141e 	bne	r2,zero,ac94 <__hi0bits+0x58>
    ac44:	2008943a 	slli	r4,r4,16
    ac48:	00800404 	movi	r2,16
    ac4c:	20ffc02c 	andhi	r3,r4,65280
    ac50:	1800021e 	bne	r3,zero,ac5c <__hi0bits+0x20>
    ac54:	2008923a 	slli	r4,r4,8
    ac58:	10800204 	addi	r2,r2,8
    ac5c:	20fc002c 	andhi	r3,r4,61440
    ac60:	1800021e 	bne	r3,zero,ac6c <__hi0bits+0x30>
    ac64:	2008913a 	slli	r4,r4,4
    ac68:	10800104 	addi	r2,r2,4
    ac6c:	20f0002c 	andhi	r3,r4,49152
    ac70:	1800031e 	bne	r3,zero,ac80 <__hi0bits+0x44>
    ac74:	2109883a 	add	r4,r4,r4
    ac78:	10800084 	addi	r2,r2,2
    ac7c:	2109883a 	add	r4,r4,r4
    ac80:	20000316 	blt	r4,zero,ac90 <__hi0bits+0x54>
    ac84:	2110002c 	andhi	r4,r4,16384
    ac88:	2000041e 	bne	r4,zero,ac9c <__hi0bits+0x60>
    ac8c:	00800804 	movi	r2,32
    ac90:	f800283a 	ret
    ac94:	0005883a 	mov	r2,zero
    ac98:	003fec06 	br	ac4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ac4c>
    ac9c:	10800044 	addi	r2,r2,1
    aca0:	f800283a 	ret

0000aca4 <__lo0bits>:
    aca4:	20c00017 	ldw	r3,0(r4)
    aca8:	188001cc 	andi	r2,r3,7
    acac:	10000826 	beq	r2,zero,acd0 <__lo0bits+0x2c>
    acb0:	1880004c 	andi	r2,r3,1
    acb4:	1000211e 	bne	r2,zero,ad3c <__lo0bits+0x98>
    acb8:	1880008c 	andi	r2,r3,2
    acbc:	1000211e 	bne	r2,zero,ad44 <__lo0bits+0xa0>
    acc0:	1806d0ba 	srli	r3,r3,2
    acc4:	00800084 	movi	r2,2
    acc8:	20c00015 	stw	r3,0(r4)
    accc:	f800283a 	ret
    acd0:	18bfffcc 	andi	r2,r3,65535
    acd4:	10001326 	beq	r2,zero,ad24 <__lo0bits+0x80>
    acd8:	0005883a 	mov	r2,zero
    acdc:	19403fcc 	andi	r5,r3,255
    ace0:	2800021e 	bne	r5,zero,acec <__lo0bits+0x48>
    ace4:	1806d23a 	srli	r3,r3,8
    ace8:	10800204 	addi	r2,r2,8
    acec:	194003cc 	andi	r5,r3,15
    acf0:	2800021e 	bne	r5,zero,acfc <__lo0bits+0x58>
    acf4:	1806d13a 	srli	r3,r3,4
    acf8:	10800104 	addi	r2,r2,4
    acfc:	194000cc 	andi	r5,r3,3
    ad00:	2800021e 	bne	r5,zero,ad0c <__lo0bits+0x68>
    ad04:	1806d0ba 	srli	r3,r3,2
    ad08:	10800084 	addi	r2,r2,2
    ad0c:	1940004c 	andi	r5,r3,1
    ad10:	2800081e 	bne	r5,zero,ad34 <__lo0bits+0x90>
    ad14:	1806d07a 	srli	r3,r3,1
    ad18:	1800051e 	bne	r3,zero,ad30 <__lo0bits+0x8c>
    ad1c:	00800804 	movi	r2,32
    ad20:	f800283a 	ret
    ad24:	1806d43a 	srli	r3,r3,16
    ad28:	00800404 	movi	r2,16
    ad2c:	003feb06 	br	acdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700acdc>
    ad30:	10800044 	addi	r2,r2,1
    ad34:	20c00015 	stw	r3,0(r4)
    ad38:	f800283a 	ret
    ad3c:	0005883a 	mov	r2,zero
    ad40:	f800283a 	ret
    ad44:	1806d07a 	srli	r3,r3,1
    ad48:	00800044 	movi	r2,1
    ad4c:	20c00015 	stw	r3,0(r4)
    ad50:	f800283a 	ret

0000ad54 <__i2b>:
    ad54:	defffd04 	addi	sp,sp,-12
    ad58:	dc000015 	stw	r16,0(sp)
    ad5c:	04000044 	movi	r16,1
    ad60:	dc400115 	stw	r17,4(sp)
    ad64:	2823883a 	mov	r17,r5
    ad68:	800b883a 	mov	r5,r16
    ad6c:	dfc00215 	stw	ra,8(sp)
    ad70:	000a9480 	call	a948 <_Balloc>
    ad74:	14400515 	stw	r17,20(r2)
    ad78:	14000415 	stw	r16,16(r2)
    ad7c:	dfc00217 	ldw	ra,8(sp)
    ad80:	dc400117 	ldw	r17,4(sp)
    ad84:	dc000017 	ldw	r16,0(sp)
    ad88:	dec00304 	addi	sp,sp,12
    ad8c:	f800283a 	ret

0000ad90 <__multiply>:
    ad90:	defffa04 	addi	sp,sp,-24
    ad94:	dcc00315 	stw	r19,12(sp)
    ad98:	dc800215 	stw	r18,8(sp)
    ad9c:	34c00417 	ldw	r19,16(r6)
    ada0:	2c800417 	ldw	r18,16(r5)
    ada4:	dd000415 	stw	r20,16(sp)
    ada8:	dc400115 	stw	r17,4(sp)
    adac:	dfc00515 	stw	ra,20(sp)
    adb0:	dc000015 	stw	r16,0(sp)
    adb4:	2829883a 	mov	r20,r5
    adb8:	3023883a 	mov	r17,r6
    adbc:	94c0050e 	bge	r18,r19,add4 <__multiply+0x44>
    adc0:	9007883a 	mov	r3,r18
    adc4:	3029883a 	mov	r20,r6
    adc8:	9825883a 	mov	r18,r19
    adcc:	2823883a 	mov	r17,r5
    add0:	1827883a 	mov	r19,r3
    add4:	a0800217 	ldw	r2,8(r20)
    add8:	94e1883a 	add	r16,r18,r19
    addc:	a1400117 	ldw	r5,4(r20)
    ade0:	1400010e 	bge	r2,r16,ade8 <__multiply+0x58>
    ade4:	29400044 	addi	r5,r5,1
    ade8:	000a9480 	call	a948 <_Balloc>
    adec:	8415883a 	add	r10,r16,r16
    adf0:	12c00504 	addi	r11,r2,20
    adf4:	5295883a 	add	r10,r10,r10
    adf8:	5a95883a 	add	r10,r11,r10
    adfc:	5807883a 	mov	r3,r11
    ae00:	5a80032e 	bgeu	r11,r10,ae10 <__multiply+0x80>
    ae04:	18000015 	stw	zero,0(r3)
    ae08:	18c00104 	addi	r3,r3,4
    ae0c:	1abffd36 	bltu	r3,r10,ae04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae04>
    ae10:	9ce7883a 	add	r19,r19,r19
    ae14:	94a5883a 	add	r18,r18,r18
    ae18:	89800504 	addi	r6,r17,20
    ae1c:	9ce7883a 	add	r19,r19,r19
    ae20:	a3400504 	addi	r13,r20,20
    ae24:	94a5883a 	add	r18,r18,r18
    ae28:	34d9883a 	add	r12,r6,r19
    ae2c:	6c93883a 	add	r9,r13,r18
    ae30:	3300422e 	bgeu	r6,r12,af3c <__multiply+0x1ac>
    ae34:	37c00017 	ldw	ra,0(r6)
    ae38:	fbffffcc 	andi	r15,ra,65535
    ae3c:	78001b26 	beq	r15,zero,aeac <__multiply+0x11c>
    ae40:	5811883a 	mov	r8,r11
    ae44:	681d883a 	mov	r14,r13
    ae48:	000f883a 	mov	r7,zero
    ae4c:	71000017 	ldw	r4,0(r14)
    ae50:	40c00017 	ldw	r3,0(r8)
    ae54:	73800104 	addi	r14,r14,4
    ae58:	217fffcc 	andi	r5,r4,65535
    ae5c:	2bcb383a 	mul	r5,r5,r15
    ae60:	2008d43a 	srli	r4,r4,16
    ae64:	1c7fffcc 	andi	r17,r3,65535
    ae68:	2c4b883a 	add	r5,r5,r17
    ae6c:	29cb883a 	add	r5,r5,r7
    ae70:	23c9383a 	mul	r4,r4,r15
    ae74:	1806d43a 	srli	r3,r3,16
    ae78:	280ed43a 	srli	r7,r5,16
    ae7c:	297fffcc 	andi	r5,r5,65535
    ae80:	20c7883a 	add	r3,r4,r3
    ae84:	19c7883a 	add	r3,r3,r7
    ae88:	1808943a 	slli	r4,r3,16
    ae8c:	4023883a 	mov	r17,r8
    ae90:	180ed43a 	srli	r7,r3,16
    ae94:	214ab03a 	or	r5,r4,r5
    ae98:	41400015 	stw	r5,0(r8)
    ae9c:	42000104 	addi	r8,r8,4
    aea0:	727fea36 	bltu	r14,r9,ae4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae4c>
    aea4:	89c00115 	stw	r7,4(r17)
    aea8:	37c00017 	ldw	ra,0(r6)
    aeac:	f83ed43a 	srli	ra,ra,16
    aeb0:	f8001f26 	beq	ra,zero,af30 <__multiply+0x1a0>
    aeb4:	58c00017 	ldw	r3,0(r11)
    aeb8:	681d883a 	mov	r14,r13
    aebc:	581f883a 	mov	r15,r11
    aec0:	1811883a 	mov	r8,r3
    aec4:	5825883a 	mov	r18,r11
    aec8:	000f883a 	mov	r7,zero
    aecc:	00000106 	br	aed4 <__multiply+0x144>
    aed0:	8825883a 	mov	r18,r17
    aed4:	7140000b 	ldhu	r5,0(r14)
    aed8:	4010d43a 	srli	r8,r8,16
    aedc:	193fffcc 	andi	r4,r3,65535
    aee0:	2fcb383a 	mul	r5,r5,ra
    aee4:	7bc00104 	addi	r15,r15,4
    aee8:	73800104 	addi	r14,r14,4
    aeec:	2a0b883a 	add	r5,r5,r8
    aef0:	29cb883a 	add	r5,r5,r7
    aef4:	2806943a 	slli	r3,r5,16
    aef8:	94400104 	addi	r17,r18,4
    aefc:	280ad43a 	srli	r5,r5,16
    af00:	1908b03a 	or	r4,r3,r4
    af04:	793fff15 	stw	r4,-4(r15)
    af08:	70ffff17 	ldw	r3,-4(r14)
    af0c:	8a000017 	ldw	r8,0(r17)
    af10:	1806d43a 	srli	r3,r3,16
    af14:	413fffcc 	andi	r4,r8,65535
    af18:	1fc7383a 	mul	r3,r3,ra
    af1c:	1907883a 	add	r3,r3,r4
    af20:	1947883a 	add	r3,r3,r5
    af24:	180ed43a 	srli	r7,r3,16
    af28:	727fe936 	bltu	r14,r9,aed0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aed0>
    af2c:	90c00115 	stw	r3,4(r18)
    af30:	31800104 	addi	r6,r6,4
    af34:	5ac00104 	addi	r11,r11,4
    af38:	333fbe36 	bltu	r6,r12,ae34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae34>
    af3c:	0400090e 	bge	zero,r16,af64 <__multiply+0x1d4>
    af40:	50ffff17 	ldw	r3,-4(r10)
    af44:	52bfff04 	addi	r10,r10,-4
    af48:	18000326 	beq	r3,zero,af58 <__multiply+0x1c8>
    af4c:	00000506 	br	af64 <__multiply+0x1d4>
    af50:	50c00017 	ldw	r3,0(r10)
    af54:	1800031e 	bne	r3,zero,af64 <__multiply+0x1d4>
    af58:	843fffc4 	addi	r16,r16,-1
    af5c:	52bfff04 	addi	r10,r10,-4
    af60:	803ffb1e 	bne	r16,zero,af50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af50>
    af64:	14000415 	stw	r16,16(r2)
    af68:	dfc00517 	ldw	ra,20(sp)
    af6c:	dd000417 	ldw	r20,16(sp)
    af70:	dcc00317 	ldw	r19,12(sp)
    af74:	dc800217 	ldw	r18,8(sp)
    af78:	dc400117 	ldw	r17,4(sp)
    af7c:	dc000017 	ldw	r16,0(sp)
    af80:	dec00604 	addi	sp,sp,24
    af84:	f800283a 	ret

0000af88 <__pow5mult>:
    af88:	defffa04 	addi	sp,sp,-24
    af8c:	dcc00315 	stw	r19,12(sp)
    af90:	dc000015 	stw	r16,0(sp)
    af94:	dfc00515 	stw	ra,20(sp)
    af98:	dd000415 	stw	r20,16(sp)
    af9c:	dc800215 	stw	r18,8(sp)
    afa0:	dc400115 	stw	r17,4(sp)
    afa4:	308000cc 	andi	r2,r6,3
    afa8:	3021883a 	mov	r16,r6
    afac:	2027883a 	mov	r19,r4
    afb0:	10002f1e 	bne	r2,zero,b070 <__pow5mult+0xe8>
    afb4:	2825883a 	mov	r18,r5
    afb8:	8021d0ba 	srai	r16,r16,2
    afbc:	80001a26 	beq	r16,zero,b028 <__pow5mult+0xa0>
    afc0:	9c401217 	ldw	r17,72(r19)
    afc4:	8800061e 	bne	r17,zero,afe0 <__pow5mult+0x58>
    afc8:	00003406 	br	b09c <__pow5mult+0x114>
    afcc:	8021d07a 	srai	r16,r16,1
    afd0:	80001526 	beq	r16,zero,b028 <__pow5mult+0xa0>
    afd4:	88800017 	ldw	r2,0(r17)
    afd8:	10001c26 	beq	r2,zero,b04c <__pow5mult+0xc4>
    afdc:	1023883a 	mov	r17,r2
    afe0:	8080004c 	andi	r2,r16,1
    afe4:	103ff926 	beq	r2,zero,afcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700afcc>
    afe8:	880d883a 	mov	r6,r17
    afec:	900b883a 	mov	r5,r18
    aff0:	9809883a 	mov	r4,r19
    aff4:	000ad900 	call	ad90 <__multiply>
    aff8:	90001b26 	beq	r18,zero,b068 <__pow5mult+0xe0>
    affc:	91000117 	ldw	r4,4(r18)
    b000:	98c01317 	ldw	r3,76(r19)
    b004:	8021d07a 	srai	r16,r16,1
    b008:	2109883a 	add	r4,r4,r4
    b00c:	2109883a 	add	r4,r4,r4
    b010:	1907883a 	add	r3,r3,r4
    b014:	19000017 	ldw	r4,0(r3)
    b018:	91000015 	stw	r4,0(r18)
    b01c:	1c800015 	stw	r18,0(r3)
    b020:	1025883a 	mov	r18,r2
    b024:	803feb1e 	bne	r16,zero,afd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700afd4>
    b028:	9005883a 	mov	r2,r18
    b02c:	dfc00517 	ldw	ra,20(sp)
    b030:	dd000417 	ldw	r20,16(sp)
    b034:	dcc00317 	ldw	r19,12(sp)
    b038:	dc800217 	ldw	r18,8(sp)
    b03c:	dc400117 	ldw	r17,4(sp)
    b040:	dc000017 	ldw	r16,0(sp)
    b044:	dec00604 	addi	sp,sp,24
    b048:	f800283a 	ret
    b04c:	880d883a 	mov	r6,r17
    b050:	880b883a 	mov	r5,r17
    b054:	9809883a 	mov	r4,r19
    b058:	000ad900 	call	ad90 <__multiply>
    b05c:	88800015 	stw	r2,0(r17)
    b060:	10000015 	stw	zero,0(r2)
    b064:	003fdd06 	br	afdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700afdc>
    b068:	1025883a 	mov	r18,r2
    b06c:	003fd706 	br	afcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700afcc>
    b070:	10bfffc4 	addi	r2,r2,-1
    b074:	1085883a 	add	r2,r2,r2
    b078:	00c000b4 	movhi	r3,2
    b07c:	18ee5a04 	addi	r3,r3,-18072
    b080:	1085883a 	add	r2,r2,r2
    b084:	1885883a 	add	r2,r3,r2
    b088:	11800017 	ldw	r6,0(r2)
    b08c:	000f883a 	mov	r7,zero
    b090:	000aa180 	call	aa18 <__multadd>
    b094:	1025883a 	mov	r18,r2
    b098:	003fc706 	br	afb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700afb8>
    b09c:	05000044 	movi	r20,1
    b0a0:	a00b883a 	mov	r5,r20
    b0a4:	9809883a 	mov	r4,r19
    b0a8:	000a9480 	call	a948 <_Balloc>
    b0ac:	1023883a 	mov	r17,r2
    b0b0:	00809c44 	movi	r2,625
    b0b4:	88800515 	stw	r2,20(r17)
    b0b8:	8d000415 	stw	r20,16(r17)
    b0bc:	9c401215 	stw	r17,72(r19)
    b0c0:	88000015 	stw	zero,0(r17)
    b0c4:	003fc606 	br	afe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700afe0>

0000b0c8 <__lshift>:
    b0c8:	defff904 	addi	sp,sp,-28
    b0cc:	dd400515 	stw	r21,20(sp)
    b0d0:	dcc00315 	stw	r19,12(sp)
    b0d4:	302bd17a 	srai	r21,r6,5
    b0d8:	2cc00417 	ldw	r19,16(r5)
    b0dc:	28800217 	ldw	r2,8(r5)
    b0e0:	dd000415 	stw	r20,16(sp)
    b0e4:	ace7883a 	add	r19,r21,r19
    b0e8:	dc800215 	stw	r18,8(sp)
    b0ec:	dc400115 	stw	r17,4(sp)
    b0f0:	dc000015 	stw	r16,0(sp)
    b0f4:	dfc00615 	stw	ra,24(sp)
    b0f8:	9c000044 	addi	r16,r19,1
    b0fc:	2823883a 	mov	r17,r5
    b100:	3029883a 	mov	r20,r6
    b104:	2025883a 	mov	r18,r4
    b108:	29400117 	ldw	r5,4(r5)
    b10c:	1400030e 	bge	r2,r16,b11c <__lshift+0x54>
    b110:	1085883a 	add	r2,r2,r2
    b114:	29400044 	addi	r5,r5,1
    b118:	143ffd16 	blt	r2,r16,b110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b110>
    b11c:	9009883a 	mov	r4,r18
    b120:	000a9480 	call	a948 <_Balloc>
    b124:	10c00504 	addi	r3,r2,20
    b128:	0540070e 	bge	zero,r21,b148 <__lshift+0x80>
    b12c:	ad6b883a 	add	r21,r21,r21
    b130:	ad6b883a 	add	r21,r21,r21
    b134:	1809883a 	mov	r4,r3
    b138:	1d47883a 	add	r3,r3,r21
    b13c:	20000015 	stw	zero,0(r4)
    b140:	21000104 	addi	r4,r4,4
    b144:	193ffd1e 	bne	r3,r4,b13c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b13c>
    b148:	8a000417 	ldw	r8,16(r17)
    b14c:	89000504 	addi	r4,r17,20
    b150:	a18007cc 	andi	r6,r20,31
    b154:	4211883a 	add	r8,r8,r8
    b158:	4211883a 	add	r8,r8,r8
    b15c:	2211883a 	add	r8,r4,r8
    b160:	30002326 	beq	r6,zero,b1f0 <__lshift+0x128>
    b164:	02400804 	movi	r9,32
    b168:	4993c83a 	sub	r9,r9,r6
    b16c:	000b883a 	mov	r5,zero
    b170:	21c00017 	ldw	r7,0(r4)
    b174:	1815883a 	mov	r10,r3
    b178:	18c00104 	addi	r3,r3,4
    b17c:	398e983a 	sll	r7,r7,r6
    b180:	21000104 	addi	r4,r4,4
    b184:	394ab03a 	or	r5,r7,r5
    b188:	197fff15 	stw	r5,-4(r3)
    b18c:	217fff17 	ldw	r5,-4(r4)
    b190:	2a4ad83a 	srl	r5,r5,r9
    b194:	223ff636 	bltu	r4,r8,b170 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b170>
    b198:	51400115 	stw	r5,4(r10)
    b19c:	28001a1e 	bne	r5,zero,b208 <__lshift+0x140>
    b1a0:	843fffc4 	addi	r16,r16,-1
    b1a4:	14000415 	stw	r16,16(r2)
    b1a8:	88000826 	beq	r17,zero,b1cc <__lshift+0x104>
    b1ac:	89000117 	ldw	r4,4(r17)
    b1b0:	90c01317 	ldw	r3,76(r18)
    b1b4:	2109883a 	add	r4,r4,r4
    b1b8:	2109883a 	add	r4,r4,r4
    b1bc:	1907883a 	add	r3,r3,r4
    b1c0:	19000017 	ldw	r4,0(r3)
    b1c4:	89000015 	stw	r4,0(r17)
    b1c8:	1c400015 	stw	r17,0(r3)
    b1cc:	dfc00617 	ldw	ra,24(sp)
    b1d0:	dd400517 	ldw	r21,20(sp)
    b1d4:	dd000417 	ldw	r20,16(sp)
    b1d8:	dcc00317 	ldw	r19,12(sp)
    b1dc:	dc800217 	ldw	r18,8(sp)
    b1e0:	dc400117 	ldw	r17,4(sp)
    b1e4:	dc000017 	ldw	r16,0(sp)
    b1e8:	dec00704 	addi	sp,sp,28
    b1ec:	f800283a 	ret
    b1f0:	21400017 	ldw	r5,0(r4)
    b1f4:	18c00104 	addi	r3,r3,4
    b1f8:	21000104 	addi	r4,r4,4
    b1fc:	197fff15 	stw	r5,-4(r3)
    b200:	223ffb36 	bltu	r4,r8,b1f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b1f0>
    b204:	003fe606 	br	b1a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b1a0>
    b208:	9c000084 	addi	r16,r19,2
    b20c:	003fe406 	br	b1a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b1a0>

0000b210 <__mcmp>:
    b210:	20800417 	ldw	r2,16(r4)
    b214:	28c00417 	ldw	r3,16(r5)
    b218:	10c5c83a 	sub	r2,r2,r3
    b21c:	1000111e 	bne	r2,zero,b264 <__mcmp+0x54>
    b220:	18c7883a 	add	r3,r3,r3
    b224:	18c7883a 	add	r3,r3,r3
    b228:	21000504 	addi	r4,r4,20
    b22c:	29400504 	addi	r5,r5,20
    b230:	20c5883a 	add	r2,r4,r3
    b234:	28cb883a 	add	r5,r5,r3
    b238:	00000106 	br	b240 <__mcmp+0x30>
    b23c:	20800a2e 	bgeu	r4,r2,b268 <__mcmp+0x58>
    b240:	10bfff04 	addi	r2,r2,-4
    b244:	297fff04 	addi	r5,r5,-4
    b248:	11800017 	ldw	r6,0(r2)
    b24c:	28c00017 	ldw	r3,0(r5)
    b250:	30fffa26 	beq	r6,r3,b23c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b23c>
    b254:	30c00236 	bltu	r6,r3,b260 <__mcmp+0x50>
    b258:	00800044 	movi	r2,1
    b25c:	f800283a 	ret
    b260:	00bfffc4 	movi	r2,-1
    b264:	f800283a 	ret
    b268:	0005883a 	mov	r2,zero
    b26c:	f800283a 	ret

0000b270 <__mdiff>:
    b270:	28c00417 	ldw	r3,16(r5)
    b274:	30800417 	ldw	r2,16(r6)
    b278:	defffa04 	addi	sp,sp,-24
    b27c:	dcc00315 	stw	r19,12(sp)
    b280:	dc800215 	stw	r18,8(sp)
    b284:	dfc00515 	stw	ra,20(sp)
    b288:	dd000415 	stw	r20,16(sp)
    b28c:	dc400115 	stw	r17,4(sp)
    b290:	dc000015 	stw	r16,0(sp)
    b294:	1887c83a 	sub	r3,r3,r2
    b298:	2825883a 	mov	r18,r5
    b29c:	3027883a 	mov	r19,r6
    b2a0:	1800141e 	bne	r3,zero,b2f4 <__mdiff+0x84>
    b2a4:	1085883a 	add	r2,r2,r2
    b2a8:	1085883a 	add	r2,r2,r2
    b2ac:	2a000504 	addi	r8,r5,20
    b2b0:	34000504 	addi	r16,r6,20
    b2b4:	4087883a 	add	r3,r8,r2
    b2b8:	8085883a 	add	r2,r16,r2
    b2bc:	00000106 	br	b2c4 <__mdiff+0x54>
    b2c0:	40c0592e 	bgeu	r8,r3,b428 <__mdiff+0x1b8>
    b2c4:	18ffff04 	addi	r3,r3,-4
    b2c8:	10bfff04 	addi	r2,r2,-4
    b2cc:	19c00017 	ldw	r7,0(r3)
    b2d0:	11400017 	ldw	r5,0(r2)
    b2d4:	397ffa26 	beq	r7,r5,b2c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2c0>
    b2d8:	3940592e 	bgeu	r7,r5,b440 <__mdiff+0x1d0>
    b2dc:	9005883a 	mov	r2,r18
    b2e0:	4023883a 	mov	r17,r8
    b2e4:	9825883a 	mov	r18,r19
    b2e8:	05000044 	movi	r20,1
    b2ec:	1027883a 	mov	r19,r2
    b2f0:	00000406 	br	b304 <__mdiff+0x94>
    b2f4:	18005616 	blt	r3,zero,b450 <__mdiff+0x1e0>
    b2f8:	34400504 	addi	r17,r6,20
    b2fc:	2c000504 	addi	r16,r5,20
    b300:	0029883a 	mov	r20,zero
    b304:	91400117 	ldw	r5,4(r18)
    b308:	000a9480 	call	a948 <_Balloc>
    b30c:	92400417 	ldw	r9,16(r18)
    b310:	9b000417 	ldw	r12,16(r19)
    b314:	12c00504 	addi	r11,r2,20
    b318:	4a51883a 	add	r8,r9,r9
    b31c:	6319883a 	add	r12,r12,r12
    b320:	4211883a 	add	r8,r8,r8
    b324:	6319883a 	add	r12,r12,r12
    b328:	15000315 	stw	r20,12(r2)
    b32c:	8211883a 	add	r8,r16,r8
    b330:	8b19883a 	add	r12,r17,r12
    b334:	0007883a 	mov	r3,zero
    b338:	81400017 	ldw	r5,0(r16)
    b33c:	89c00017 	ldw	r7,0(r17)
    b340:	59800104 	addi	r6,r11,4
    b344:	293fffcc 	andi	r4,r5,65535
    b348:	20c7883a 	add	r3,r4,r3
    b34c:	393fffcc 	andi	r4,r7,65535
    b350:	1909c83a 	sub	r4,r3,r4
    b354:	280ad43a 	srli	r5,r5,16
    b358:	380ed43a 	srli	r7,r7,16
    b35c:	2007d43a 	srai	r3,r4,16
    b360:	213fffcc 	andi	r4,r4,65535
    b364:	29cbc83a 	sub	r5,r5,r7
    b368:	28c7883a 	add	r3,r5,r3
    b36c:	180a943a 	slli	r5,r3,16
    b370:	8c400104 	addi	r17,r17,4
    b374:	84000104 	addi	r16,r16,4
    b378:	2908b03a 	or	r4,r5,r4
    b37c:	59000015 	stw	r4,0(r11)
    b380:	1807d43a 	srai	r3,r3,16
    b384:	3015883a 	mov	r10,r6
    b388:	3017883a 	mov	r11,r6
    b38c:	8b3fea36 	bltu	r17,r12,b338 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b338>
    b390:	8200162e 	bgeu	r16,r8,b3ec <__mdiff+0x17c>
    b394:	8017883a 	mov	r11,r16
    b398:	59400017 	ldw	r5,0(r11)
    b39c:	31800104 	addi	r6,r6,4
    b3a0:	5ac00104 	addi	r11,r11,4
    b3a4:	293fffcc 	andi	r4,r5,65535
    b3a8:	20c7883a 	add	r3,r4,r3
    b3ac:	280ed43a 	srli	r7,r5,16
    b3b0:	180bd43a 	srai	r5,r3,16
    b3b4:	193fffcc 	andi	r4,r3,65535
    b3b8:	3947883a 	add	r3,r7,r5
    b3bc:	180a943a 	slli	r5,r3,16
    b3c0:	1807d43a 	srai	r3,r3,16
    b3c4:	2908b03a 	or	r4,r5,r4
    b3c8:	313fff15 	stw	r4,-4(r6)
    b3cc:	5a3ff236 	bltu	r11,r8,b398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b398>
    b3d0:	0406303a 	nor	r3,zero,r16
    b3d4:	1a07883a 	add	r3,r3,r8
    b3d8:	1806d0ba 	srli	r3,r3,2
    b3dc:	18c00044 	addi	r3,r3,1
    b3e0:	18c7883a 	add	r3,r3,r3
    b3e4:	18c7883a 	add	r3,r3,r3
    b3e8:	50d5883a 	add	r10,r10,r3
    b3ec:	50ffff04 	addi	r3,r10,-4
    b3f0:	2000041e 	bne	r4,zero,b404 <__mdiff+0x194>
    b3f4:	18ffff04 	addi	r3,r3,-4
    b3f8:	19000017 	ldw	r4,0(r3)
    b3fc:	4a7fffc4 	addi	r9,r9,-1
    b400:	203ffc26 	beq	r4,zero,b3f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b3f4>
    b404:	12400415 	stw	r9,16(r2)
    b408:	dfc00517 	ldw	ra,20(sp)
    b40c:	dd000417 	ldw	r20,16(sp)
    b410:	dcc00317 	ldw	r19,12(sp)
    b414:	dc800217 	ldw	r18,8(sp)
    b418:	dc400117 	ldw	r17,4(sp)
    b41c:	dc000017 	ldw	r16,0(sp)
    b420:	dec00604 	addi	sp,sp,24
    b424:	f800283a 	ret
    b428:	000b883a 	mov	r5,zero
    b42c:	000a9480 	call	a948 <_Balloc>
    b430:	00c00044 	movi	r3,1
    b434:	10c00415 	stw	r3,16(r2)
    b438:	10000515 	stw	zero,20(r2)
    b43c:	003ff206 	br	b408 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b408>
    b440:	8023883a 	mov	r17,r16
    b444:	0029883a 	mov	r20,zero
    b448:	4021883a 	mov	r16,r8
    b44c:	003fad06 	br	b304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b304>
    b450:	9005883a 	mov	r2,r18
    b454:	94400504 	addi	r17,r18,20
    b458:	9c000504 	addi	r16,r19,20
    b45c:	9825883a 	mov	r18,r19
    b460:	05000044 	movi	r20,1
    b464:	1027883a 	mov	r19,r2
    b468:	003fa606 	br	b304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b304>

0000b46c <__ulp>:
    b46c:	295ffc2c 	andhi	r5,r5,32752
    b470:	00bf3034 	movhi	r2,64704
    b474:	2887883a 	add	r3,r5,r2
    b478:	00c0020e 	bge	zero,r3,b484 <__ulp+0x18>
    b47c:	0005883a 	mov	r2,zero
    b480:	f800283a 	ret
    b484:	00c7c83a 	sub	r3,zero,r3
    b488:	1807d53a 	srai	r3,r3,20
    b48c:	008004c4 	movi	r2,19
    b490:	10c00b0e 	bge	r2,r3,b4c0 <__ulp+0x54>
    b494:	18bffb04 	addi	r2,r3,-20
    b498:	01000784 	movi	r4,30
    b49c:	0007883a 	mov	r3,zero
    b4a0:	20800516 	blt	r4,r2,b4b8 <__ulp+0x4c>
    b4a4:	010007c4 	movi	r4,31
    b4a8:	2089c83a 	sub	r4,r4,r2
    b4ac:	00800044 	movi	r2,1
    b4b0:	1104983a 	sll	r2,r2,r4
    b4b4:	f800283a 	ret
    b4b8:	00800044 	movi	r2,1
    b4bc:	f800283a 	ret
    b4c0:	01400234 	movhi	r5,8
    b4c4:	28c7d83a 	sra	r3,r5,r3
    b4c8:	0005883a 	mov	r2,zero
    b4cc:	f800283a 	ret

0000b4d0 <__b2d>:
    b4d0:	defffa04 	addi	sp,sp,-24
    b4d4:	dc000015 	stw	r16,0(sp)
    b4d8:	24000417 	ldw	r16,16(r4)
    b4dc:	dc400115 	stw	r17,4(sp)
    b4e0:	24400504 	addi	r17,r4,20
    b4e4:	8421883a 	add	r16,r16,r16
    b4e8:	8421883a 	add	r16,r16,r16
    b4ec:	8c21883a 	add	r16,r17,r16
    b4f0:	dc800215 	stw	r18,8(sp)
    b4f4:	84bfff17 	ldw	r18,-4(r16)
    b4f8:	dd000415 	stw	r20,16(sp)
    b4fc:	dcc00315 	stw	r19,12(sp)
    b500:	9009883a 	mov	r4,r18
    b504:	2829883a 	mov	r20,r5
    b508:	dfc00515 	stw	ra,20(sp)
    b50c:	000ac3c0 	call	ac3c <__hi0bits>
    b510:	00c00804 	movi	r3,32
    b514:	1889c83a 	sub	r4,r3,r2
    b518:	a1000015 	stw	r4,0(r20)
    b51c:	01000284 	movi	r4,10
    b520:	84ffff04 	addi	r19,r16,-4
    b524:	20801216 	blt	r4,r2,b570 <__b2d+0xa0>
    b528:	018002c4 	movi	r6,11
    b52c:	308dc83a 	sub	r6,r6,r2
    b530:	9186d83a 	srl	r3,r18,r6
    b534:	18cffc34 	orhi	r3,r3,16368
    b538:	8cc0212e 	bgeu	r17,r19,b5c0 <__b2d+0xf0>
    b53c:	813ffe17 	ldw	r4,-8(r16)
    b540:	218cd83a 	srl	r6,r4,r6
    b544:	10800544 	addi	r2,r2,21
    b548:	9084983a 	sll	r2,r18,r2
    b54c:	1184b03a 	or	r2,r2,r6
    b550:	dfc00517 	ldw	ra,20(sp)
    b554:	dd000417 	ldw	r20,16(sp)
    b558:	dcc00317 	ldw	r19,12(sp)
    b55c:	dc800217 	ldw	r18,8(sp)
    b560:	dc400117 	ldw	r17,4(sp)
    b564:	dc000017 	ldw	r16,0(sp)
    b568:	dec00604 	addi	sp,sp,24
    b56c:	f800283a 	ret
    b570:	8cc00f2e 	bgeu	r17,r19,b5b0 <__b2d+0xe0>
    b574:	117ffd44 	addi	r5,r2,-11
    b578:	80bffe17 	ldw	r2,-8(r16)
    b57c:	28000e26 	beq	r5,zero,b5b8 <__b2d+0xe8>
    b580:	1949c83a 	sub	r4,r3,r5
    b584:	9164983a 	sll	r18,r18,r5
    b588:	1106d83a 	srl	r3,r2,r4
    b58c:	81bffe04 	addi	r6,r16,-8
    b590:	948ffc34 	orhi	r18,r18,16368
    b594:	90c6b03a 	or	r3,r18,r3
    b598:	89800e2e 	bgeu	r17,r6,b5d4 <__b2d+0x104>
    b59c:	81bffd17 	ldw	r6,-12(r16)
    b5a0:	1144983a 	sll	r2,r2,r5
    b5a4:	310ad83a 	srl	r5,r6,r4
    b5a8:	2884b03a 	or	r2,r5,r2
    b5ac:	003fe806 	br	b550 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b550>
    b5b0:	10bffd44 	addi	r2,r2,-11
    b5b4:	1000041e 	bne	r2,zero,b5c8 <__b2d+0xf8>
    b5b8:	90cffc34 	orhi	r3,r18,16368
    b5bc:	003fe406 	br	b550 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b550>
    b5c0:	000d883a 	mov	r6,zero
    b5c4:	003fdf06 	br	b544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b544>
    b5c8:	90a4983a 	sll	r18,r18,r2
    b5cc:	0005883a 	mov	r2,zero
    b5d0:	003ff906 	br	b5b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5b8>
    b5d4:	1144983a 	sll	r2,r2,r5
    b5d8:	003fdd06 	br	b550 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b550>

0000b5dc <__d2b>:
    b5dc:	defff804 	addi	sp,sp,-32
    b5e0:	dc000215 	stw	r16,8(sp)
    b5e4:	3021883a 	mov	r16,r6
    b5e8:	dc400315 	stw	r17,12(sp)
    b5ec:	8022907a 	slli	r17,r16,1
    b5f0:	dd000615 	stw	r20,24(sp)
    b5f4:	2829883a 	mov	r20,r5
    b5f8:	01400044 	movi	r5,1
    b5fc:	dcc00515 	stw	r19,20(sp)
    b600:	dc800415 	stw	r18,16(sp)
    b604:	dfc00715 	stw	ra,28(sp)
    b608:	3825883a 	mov	r18,r7
    b60c:	8822d57a 	srli	r17,r17,21
    b610:	000a9480 	call	a948 <_Balloc>
    b614:	1027883a 	mov	r19,r2
    b618:	00800434 	movhi	r2,16
    b61c:	10bfffc4 	addi	r2,r2,-1
    b620:	808c703a 	and	r6,r16,r2
    b624:	88000126 	beq	r17,zero,b62c <__d2b+0x50>
    b628:	31800434 	orhi	r6,r6,16
    b62c:	d9800015 	stw	r6,0(sp)
    b630:	a0002426 	beq	r20,zero,b6c4 <__d2b+0xe8>
    b634:	d9000104 	addi	r4,sp,4
    b638:	dd000115 	stw	r20,4(sp)
    b63c:	000aca40 	call	aca4 <__lo0bits>
    b640:	d8c00017 	ldw	r3,0(sp)
    b644:	10002f1e 	bne	r2,zero,b704 <__d2b+0x128>
    b648:	d9000117 	ldw	r4,4(sp)
    b64c:	99000515 	stw	r4,20(r19)
    b650:	1821003a 	cmpeq	r16,r3,zero
    b654:	01000084 	movi	r4,2
    b658:	2421c83a 	sub	r16,r4,r16
    b65c:	98c00615 	stw	r3,24(r19)
    b660:	9c000415 	stw	r16,16(r19)
    b664:	88001f1e 	bne	r17,zero,b6e4 <__d2b+0x108>
    b668:	10bef384 	addi	r2,r2,-1074
    b66c:	90800015 	stw	r2,0(r18)
    b670:	00900034 	movhi	r2,16384
    b674:	10bfffc4 	addi	r2,r2,-1
    b678:	8085883a 	add	r2,r16,r2
    b67c:	1085883a 	add	r2,r2,r2
    b680:	1085883a 	add	r2,r2,r2
    b684:	9885883a 	add	r2,r19,r2
    b688:	11000517 	ldw	r4,20(r2)
    b68c:	8020917a 	slli	r16,r16,5
    b690:	000ac3c0 	call	ac3c <__hi0bits>
    b694:	d8c00817 	ldw	r3,32(sp)
    b698:	8085c83a 	sub	r2,r16,r2
    b69c:	18800015 	stw	r2,0(r3)
    b6a0:	9805883a 	mov	r2,r19
    b6a4:	dfc00717 	ldw	ra,28(sp)
    b6a8:	dd000617 	ldw	r20,24(sp)
    b6ac:	dcc00517 	ldw	r19,20(sp)
    b6b0:	dc800417 	ldw	r18,16(sp)
    b6b4:	dc400317 	ldw	r17,12(sp)
    b6b8:	dc000217 	ldw	r16,8(sp)
    b6bc:	dec00804 	addi	sp,sp,32
    b6c0:	f800283a 	ret
    b6c4:	d809883a 	mov	r4,sp
    b6c8:	000aca40 	call	aca4 <__lo0bits>
    b6cc:	d8c00017 	ldw	r3,0(sp)
    b6d0:	04000044 	movi	r16,1
    b6d4:	9c000415 	stw	r16,16(r19)
    b6d8:	98c00515 	stw	r3,20(r19)
    b6dc:	10800804 	addi	r2,r2,32
    b6e0:	883fe126 	beq	r17,zero,b668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b668>
    b6e4:	00c00d44 	movi	r3,53
    b6e8:	8c7ef344 	addi	r17,r17,-1075
    b6ec:	88a3883a 	add	r17,r17,r2
    b6f0:	1885c83a 	sub	r2,r3,r2
    b6f4:	d8c00817 	ldw	r3,32(sp)
    b6f8:	94400015 	stw	r17,0(r18)
    b6fc:	18800015 	stw	r2,0(r3)
    b700:	003fe706 	br	b6a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b6a0>
    b704:	01000804 	movi	r4,32
    b708:	2089c83a 	sub	r4,r4,r2
    b70c:	1908983a 	sll	r4,r3,r4
    b710:	d9400117 	ldw	r5,4(sp)
    b714:	1886d83a 	srl	r3,r3,r2
    b718:	2148b03a 	or	r4,r4,r5
    b71c:	99000515 	stw	r4,20(r19)
    b720:	d8c00015 	stw	r3,0(sp)
    b724:	003fca06 	br	b650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b650>

0000b728 <__ratio>:
    b728:	defff904 	addi	sp,sp,-28
    b72c:	dc400315 	stw	r17,12(sp)
    b730:	2823883a 	mov	r17,r5
    b734:	d9400104 	addi	r5,sp,4
    b738:	dfc00615 	stw	ra,24(sp)
    b73c:	dcc00515 	stw	r19,20(sp)
    b740:	dc800415 	stw	r18,16(sp)
    b744:	2027883a 	mov	r19,r4
    b748:	dc000215 	stw	r16,8(sp)
    b74c:	000b4d00 	call	b4d0 <__b2d>
    b750:	d80b883a 	mov	r5,sp
    b754:	8809883a 	mov	r4,r17
    b758:	1025883a 	mov	r18,r2
    b75c:	1821883a 	mov	r16,r3
    b760:	000b4d00 	call	b4d0 <__b2d>
    b764:	8a000417 	ldw	r8,16(r17)
    b768:	99000417 	ldw	r4,16(r19)
    b76c:	d9400117 	ldw	r5,4(sp)
    b770:	2209c83a 	sub	r4,r4,r8
    b774:	2010917a 	slli	r8,r4,5
    b778:	d9000017 	ldw	r4,0(sp)
    b77c:	2909c83a 	sub	r4,r5,r4
    b780:	4109883a 	add	r4,r8,r4
    b784:	01000e0e 	bge	zero,r4,b7c0 <__ratio+0x98>
    b788:	2008953a 	slli	r4,r4,20
    b78c:	2421883a 	add	r16,r4,r16
    b790:	100d883a 	mov	r6,r2
    b794:	180f883a 	mov	r7,r3
    b798:	9009883a 	mov	r4,r18
    b79c:	800b883a 	mov	r5,r16
    b7a0:	000335c0 	call	335c <__divdf3>
    b7a4:	dfc00617 	ldw	ra,24(sp)
    b7a8:	dcc00517 	ldw	r19,20(sp)
    b7ac:	dc800417 	ldw	r18,16(sp)
    b7b0:	dc400317 	ldw	r17,12(sp)
    b7b4:	dc000217 	ldw	r16,8(sp)
    b7b8:	dec00704 	addi	sp,sp,28
    b7bc:	f800283a 	ret
    b7c0:	2008953a 	slli	r4,r4,20
    b7c4:	1907c83a 	sub	r3,r3,r4
    b7c8:	003ff106 	br	b790 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b790>

0000b7cc <_mprec_log10>:
    b7cc:	defffe04 	addi	sp,sp,-8
    b7d0:	dc000015 	stw	r16,0(sp)
    b7d4:	dfc00115 	stw	ra,4(sp)
    b7d8:	008005c4 	movi	r2,23
    b7dc:	2021883a 	mov	r16,r4
    b7e0:	11000d0e 	bge	r2,r4,b818 <_mprec_log10+0x4c>
    b7e4:	0005883a 	mov	r2,zero
    b7e8:	00cffc34 	movhi	r3,16368
    b7ec:	843fffc4 	addi	r16,r16,-1
    b7f0:	000d883a 	mov	r6,zero
    b7f4:	01d00934 	movhi	r7,16420
    b7f8:	1009883a 	mov	r4,r2
    b7fc:	180b883a 	mov	r5,r3
    b800:	0003da80 	call	3da8 <__muldf3>
    b804:	803ff91e 	bne	r16,zero,b7ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b7ec>
    b808:	dfc00117 	ldw	ra,4(sp)
    b80c:	dc000017 	ldw	r16,0(sp)
    b810:	dec00204 	addi	sp,sp,8
    b814:	f800283a 	ret
    b818:	202090fa 	slli	r16,r4,3
    b81c:	008000b4 	movhi	r2,2
    b820:	10ae7104 	addi	r2,r2,-17980
    b824:	1421883a 	add	r16,r2,r16
    b828:	80800017 	ldw	r2,0(r16)
    b82c:	80c00117 	ldw	r3,4(r16)
    b830:	dfc00117 	ldw	ra,4(sp)
    b834:	dc000017 	ldw	r16,0(sp)
    b838:	dec00204 	addi	sp,sp,8
    b83c:	f800283a 	ret

0000b840 <__copybits>:
    b840:	297fffc4 	addi	r5,r5,-1
    b844:	280fd17a 	srai	r7,r5,5
    b848:	30c00417 	ldw	r3,16(r6)
    b84c:	30800504 	addi	r2,r6,20
    b850:	39c00044 	addi	r7,r7,1
    b854:	18c7883a 	add	r3,r3,r3
    b858:	39cf883a 	add	r7,r7,r7
    b85c:	18c7883a 	add	r3,r3,r3
    b860:	39cf883a 	add	r7,r7,r7
    b864:	10c7883a 	add	r3,r2,r3
    b868:	21cf883a 	add	r7,r4,r7
    b86c:	10c00d2e 	bgeu	r2,r3,b8a4 <__copybits+0x64>
    b870:	200b883a 	mov	r5,r4
    b874:	12000017 	ldw	r8,0(r2)
    b878:	29400104 	addi	r5,r5,4
    b87c:	10800104 	addi	r2,r2,4
    b880:	2a3fff15 	stw	r8,-4(r5)
    b884:	10fffb36 	bltu	r2,r3,b874 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b874>
    b888:	1985c83a 	sub	r2,r3,r6
    b88c:	10bffac4 	addi	r2,r2,-21
    b890:	1004d0ba 	srli	r2,r2,2
    b894:	10800044 	addi	r2,r2,1
    b898:	1085883a 	add	r2,r2,r2
    b89c:	1085883a 	add	r2,r2,r2
    b8a0:	2089883a 	add	r4,r4,r2
    b8a4:	21c0032e 	bgeu	r4,r7,b8b4 <__copybits+0x74>
    b8a8:	20000015 	stw	zero,0(r4)
    b8ac:	21000104 	addi	r4,r4,4
    b8b0:	21fffd36 	bltu	r4,r7,b8a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8a8>
    b8b4:	f800283a 	ret

0000b8b8 <__any_on>:
    b8b8:	20c00417 	ldw	r3,16(r4)
    b8bc:	2805d17a 	srai	r2,r5,5
    b8c0:	21000504 	addi	r4,r4,20
    b8c4:	18800d0e 	bge	r3,r2,b8fc <__any_on+0x44>
    b8c8:	18c7883a 	add	r3,r3,r3
    b8cc:	18c7883a 	add	r3,r3,r3
    b8d0:	20c7883a 	add	r3,r4,r3
    b8d4:	20c0192e 	bgeu	r4,r3,b93c <__any_on+0x84>
    b8d8:	18bfff17 	ldw	r2,-4(r3)
    b8dc:	18ffff04 	addi	r3,r3,-4
    b8e0:	1000041e 	bne	r2,zero,b8f4 <__any_on+0x3c>
    b8e4:	20c0142e 	bgeu	r4,r3,b938 <__any_on+0x80>
    b8e8:	18ffff04 	addi	r3,r3,-4
    b8ec:	19400017 	ldw	r5,0(r3)
    b8f0:	283ffc26 	beq	r5,zero,b8e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8e4>
    b8f4:	00800044 	movi	r2,1
    b8f8:	f800283a 	ret
    b8fc:	10c00a0e 	bge	r2,r3,b928 <__any_on+0x70>
    b900:	1085883a 	add	r2,r2,r2
    b904:	1085883a 	add	r2,r2,r2
    b908:	294007cc 	andi	r5,r5,31
    b90c:	2087883a 	add	r3,r4,r2
    b910:	283ff026 	beq	r5,zero,b8d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8d4>
    b914:	19800017 	ldw	r6,0(r3)
    b918:	3144d83a 	srl	r2,r6,r5
    b91c:	114a983a 	sll	r5,r2,r5
    b920:	317ff41e 	bne	r6,r5,b8f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8f4>
    b924:	003feb06 	br	b8d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8d4>
    b928:	1085883a 	add	r2,r2,r2
    b92c:	1085883a 	add	r2,r2,r2
    b930:	2087883a 	add	r3,r4,r2
    b934:	003fe706 	br	b8d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8d4>
    b938:	f800283a 	ret
    b93c:	0005883a 	mov	r2,zero
    b940:	f800283a 	ret

0000b944 <__fpclassifyd>:
    b944:	00a00034 	movhi	r2,32768
    b948:	10bfffc4 	addi	r2,r2,-1
    b94c:	2884703a 	and	r2,r5,r2
    b950:	10000726 	beq	r2,zero,b970 <__fpclassifyd+0x2c>
    b954:	00fffc34 	movhi	r3,65520
    b958:	019ff834 	movhi	r6,32736
    b95c:	28c7883a 	add	r3,r5,r3
    b960:	31bfffc4 	addi	r6,r6,-1
    b964:	30c00536 	bltu	r6,r3,b97c <__fpclassifyd+0x38>
    b968:	00800104 	movi	r2,4
    b96c:	f800283a 	ret
    b970:	2000021e 	bne	r4,zero,b97c <__fpclassifyd+0x38>
    b974:	00800084 	movi	r2,2
    b978:	f800283a 	ret
    b97c:	00dffc34 	movhi	r3,32752
    b980:	019ff834 	movhi	r6,32736
    b984:	28cb883a 	add	r5,r5,r3
    b988:	31bfffc4 	addi	r6,r6,-1
    b98c:	317ff62e 	bgeu	r6,r5,b968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b968>
    b990:	01400434 	movhi	r5,16
    b994:	297fffc4 	addi	r5,r5,-1
    b998:	28800236 	bltu	r5,r2,b9a4 <__fpclassifyd+0x60>
    b99c:	008000c4 	movi	r2,3
    b9a0:	f800283a 	ret
    b9a4:	10c00226 	beq	r2,r3,b9b0 <__fpclassifyd+0x6c>
    b9a8:	0005883a 	mov	r2,zero
    b9ac:	f800283a 	ret
    b9b0:	2005003a 	cmpeq	r2,r4,zero
    b9b4:	f800283a 	ret

0000b9b8 <_sbrk_r>:
    b9b8:	defffd04 	addi	sp,sp,-12
    b9bc:	dc000015 	stw	r16,0(sp)
    b9c0:	040000b4 	movhi	r16,2
    b9c4:	dc400115 	stw	r17,4(sp)
    b9c8:	843f2104 	addi	r16,r16,-892
    b9cc:	2023883a 	mov	r17,r4
    b9d0:	2809883a 	mov	r4,r5
    b9d4:	dfc00215 	stw	ra,8(sp)
    b9d8:	80000015 	stw	zero,0(r16)
    b9dc:	000fb580 	call	fb58 <sbrk>
    b9e0:	00ffffc4 	movi	r3,-1
    b9e4:	10c00526 	beq	r2,r3,b9fc <_sbrk_r+0x44>
    b9e8:	dfc00217 	ldw	ra,8(sp)
    b9ec:	dc400117 	ldw	r17,4(sp)
    b9f0:	dc000017 	ldw	r16,0(sp)
    b9f4:	dec00304 	addi	sp,sp,12
    b9f8:	f800283a 	ret
    b9fc:	80c00017 	ldw	r3,0(r16)
    ba00:	183ff926 	beq	r3,zero,b9e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9e8>
    ba04:	88c00015 	stw	r3,0(r17)
    ba08:	003ff706 	br	b9e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9e8>

0000ba0c <__sread>:
    ba0c:	defffe04 	addi	sp,sp,-8
    ba10:	dc000015 	stw	r16,0(sp)
    ba14:	2821883a 	mov	r16,r5
    ba18:	2940038f 	ldh	r5,14(r5)
    ba1c:	dfc00115 	stw	ra,4(sp)
    ba20:	000deb00 	call	deb0 <_read_r>
    ba24:	10000716 	blt	r2,zero,ba44 <__sread+0x38>
    ba28:	80c01417 	ldw	r3,80(r16)
    ba2c:	1887883a 	add	r3,r3,r2
    ba30:	80c01415 	stw	r3,80(r16)
    ba34:	dfc00117 	ldw	ra,4(sp)
    ba38:	dc000017 	ldw	r16,0(sp)
    ba3c:	dec00204 	addi	sp,sp,8
    ba40:	f800283a 	ret
    ba44:	80c0030b 	ldhu	r3,12(r16)
    ba48:	18fbffcc 	andi	r3,r3,61439
    ba4c:	80c0030d 	sth	r3,12(r16)
    ba50:	dfc00117 	ldw	ra,4(sp)
    ba54:	dc000017 	ldw	r16,0(sp)
    ba58:	dec00204 	addi	sp,sp,8
    ba5c:	f800283a 	ret

0000ba60 <__seofread>:
    ba60:	0005883a 	mov	r2,zero
    ba64:	f800283a 	ret

0000ba68 <__swrite>:
    ba68:	2880030b 	ldhu	r2,12(r5)
    ba6c:	defffb04 	addi	sp,sp,-20
    ba70:	dcc00315 	stw	r19,12(sp)
    ba74:	dc800215 	stw	r18,8(sp)
    ba78:	dc400115 	stw	r17,4(sp)
    ba7c:	dc000015 	stw	r16,0(sp)
    ba80:	dfc00415 	stw	ra,16(sp)
    ba84:	10c0400c 	andi	r3,r2,256
    ba88:	2821883a 	mov	r16,r5
    ba8c:	2023883a 	mov	r17,r4
    ba90:	3025883a 	mov	r18,r6
    ba94:	3827883a 	mov	r19,r7
    ba98:	18000526 	beq	r3,zero,bab0 <__swrite+0x48>
    ba9c:	2940038f 	ldh	r5,14(r5)
    baa0:	01c00084 	movi	r7,2
    baa4:	000d883a 	mov	r6,zero
    baa8:	000dcf40 	call	dcf4 <_lseek_r>
    baac:	8080030b 	ldhu	r2,12(r16)
    bab0:	8140038f 	ldh	r5,14(r16)
    bab4:	10bbffcc 	andi	r2,r2,61439
    bab8:	980f883a 	mov	r7,r19
    babc:	900d883a 	mov	r6,r18
    bac0:	8809883a 	mov	r4,r17
    bac4:	8080030d 	sth	r2,12(r16)
    bac8:	dfc00417 	ldw	ra,16(sp)
    bacc:	dcc00317 	ldw	r19,12(sp)
    bad0:	dc800217 	ldw	r18,8(sp)
    bad4:	dc400117 	ldw	r17,4(sp)
    bad8:	dc000017 	ldw	r16,0(sp)
    badc:	dec00504 	addi	sp,sp,20
    bae0:	000d3041 	jmpi	d304 <_write_r>

0000bae4 <__sseek>:
    bae4:	defffe04 	addi	sp,sp,-8
    bae8:	dc000015 	stw	r16,0(sp)
    baec:	2821883a 	mov	r16,r5
    baf0:	2940038f 	ldh	r5,14(r5)
    baf4:	dfc00115 	stw	ra,4(sp)
    baf8:	000dcf40 	call	dcf4 <_lseek_r>
    bafc:	00ffffc4 	movi	r3,-1
    bb00:	10c00826 	beq	r2,r3,bb24 <__sseek+0x40>
    bb04:	80c0030b 	ldhu	r3,12(r16)
    bb08:	80801415 	stw	r2,80(r16)
    bb0c:	18c40014 	ori	r3,r3,4096
    bb10:	80c0030d 	sth	r3,12(r16)
    bb14:	dfc00117 	ldw	ra,4(sp)
    bb18:	dc000017 	ldw	r16,0(sp)
    bb1c:	dec00204 	addi	sp,sp,8
    bb20:	f800283a 	ret
    bb24:	80c0030b 	ldhu	r3,12(r16)
    bb28:	18fbffcc 	andi	r3,r3,61439
    bb2c:	80c0030d 	sth	r3,12(r16)
    bb30:	dfc00117 	ldw	ra,4(sp)
    bb34:	dc000017 	ldw	r16,0(sp)
    bb38:	dec00204 	addi	sp,sp,8
    bb3c:	f800283a 	ret

0000bb40 <__sclose>:
    bb40:	2940038f 	ldh	r5,14(r5)
    bb44:	000d3641 	jmpi	d364 <_close_r>

0000bb48 <strcmp>:
    bb48:	2144b03a 	or	r2,r4,r5
    bb4c:	108000cc 	andi	r2,r2,3
    bb50:	1000171e 	bne	r2,zero,bbb0 <strcmp+0x68>
    bb54:	20800017 	ldw	r2,0(r4)
    bb58:	28c00017 	ldw	r3,0(r5)
    bb5c:	10c0141e 	bne	r2,r3,bbb0 <strcmp+0x68>
    bb60:	027fbff4 	movhi	r9,65279
    bb64:	4a7fbfc4 	addi	r9,r9,-257
    bb68:	0086303a 	nor	r3,zero,r2
    bb6c:	02202074 	movhi	r8,32897
    bb70:	1245883a 	add	r2,r2,r9
    bb74:	42202004 	addi	r8,r8,-32640
    bb78:	10c4703a 	and	r2,r2,r3
    bb7c:	1204703a 	and	r2,r2,r8
    bb80:	10000226 	beq	r2,zero,bb8c <strcmp+0x44>
    bb84:	00002306 	br	bc14 <strcmp+0xcc>
    bb88:	1000221e 	bne	r2,zero,bc14 <strcmp+0xcc>
    bb8c:	21000104 	addi	r4,r4,4
    bb90:	20c00017 	ldw	r3,0(r4)
    bb94:	29400104 	addi	r5,r5,4
    bb98:	29800017 	ldw	r6,0(r5)
    bb9c:	1a4f883a 	add	r7,r3,r9
    bba0:	00c4303a 	nor	r2,zero,r3
    bba4:	3884703a 	and	r2,r7,r2
    bba8:	1204703a 	and	r2,r2,r8
    bbac:	19bff626 	beq	r3,r6,bb88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb88>
    bbb0:	20800003 	ldbu	r2,0(r4)
    bbb4:	10c03fcc 	andi	r3,r2,255
    bbb8:	18c0201c 	xori	r3,r3,128
    bbbc:	18ffe004 	addi	r3,r3,-128
    bbc0:	18000c26 	beq	r3,zero,bbf4 <strcmp+0xac>
    bbc4:	29800007 	ldb	r6,0(r5)
    bbc8:	19800326 	beq	r3,r6,bbd8 <strcmp+0x90>
    bbcc:	00001306 	br	bc1c <strcmp+0xd4>
    bbd0:	29800007 	ldb	r6,0(r5)
    bbd4:	11800b1e 	bne	r2,r6,bc04 <strcmp+0xbc>
    bbd8:	21000044 	addi	r4,r4,1
    bbdc:	20c00003 	ldbu	r3,0(r4)
    bbe0:	29400044 	addi	r5,r5,1
    bbe4:	18803fcc 	andi	r2,r3,255
    bbe8:	1080201c 	xori	r2,r2,128
    bbec:	10bfe004 	addi	r2,r2,-128
    bbf0:	103ff71e 	bne	r2,zero,bbd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bbd0>
    bbf4:	0007883a 	mov	r3,zero
    bbf8:	28800003 	ldbu	r2,0(r5)
    bbfc:	1885c83a 	sub	r2,r3,r2
    bc00:	f800283a 	ret
    bc04:	28800003 	ldbu	r2,0(r5)
    bc08:	18c03fcc 	andi	r3,r3,255
    bc0c:	1885c83a 	sub	r2,r3,r2
    bc10:	f800283a 	ret
    bc14:	0005883a 	mov	r2,zero
    bc18:	f800283a 	ret
    bc1c:	10c03fcc 	andi	r3,r2,255
    bc20:	003ff506 	br	bbf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bbf8>

0000bc24 <strlen>:
    bc24:	208000cc 	andi	r2,r4,3
    bc28:	10002026 	beq	r2,zero,bcac <strlen+0x88>
    bc2c:	20800007 	ldb	r2,0(r4)
    bc30:	10002026 	beq	r2,zero,bcb4 <strlen+0x90>
    bc34:	2005883a 	mov	r2,r4
    bc38:	00000206 	br	bc44 <strlen+0x20>
    bc3c:	10c00007 	ldb	r3,0(r2)
    bc40:	18001826 	beq	r3,zero,bca4 <strlen+0x80>
    bc44:	10800044 	addi	r2,r2,1
    bc48:	10c000cc 	andi	r3,r2,3
    bc4c:	183ffb1e 	bne	r3,zero,bc3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc3c>
    bc50:	10c00017 	ldw	r3,0(r2)
    bc54:	01ffbff4 	movhi	r7,65279
    bc58:	39ffbfc4 	addi	r7,r7,-257
    bc5c:	00ca303a 	nor	r5,zero,r3
    bc60:	01a02074 	movhi	r6,32897
    bc64:	19c7883a 	add	r3,r3,r7
    bc68:	31a02004 	addi	r6,r6,-32640
    bc6c:	1946703a 	and	r3,r3,r5
    bc70:	1986703a 	and	r3,r3,r6
    bc74:	1800091e 	bne	r3,zero,bc9c <strlen+0x78>
    bc78:	10800104 	addi	r2,r2,4
    bc7c:	10c00017 	ldw	r3,0(r2)
    bc80:	19cb883a 	add	r5,r3,r7
    bc84:	00c6303a 	nor	r3,zero,r3
    bc88:	28c6703a 	and	r3,r5,r3
    bc8c:	1986703a 	and	r3,r3,r6
    bc90:	183ff926 	beq	r3,zero,bc78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc78>
    bc94:	00000106 	br	bc9c <strlen+0x78>
    bc98:	10800044 	addi	r2,r2,1
    bc9c:	10c00007 	ldb	r3,0(r2)
    bca0:	183ffd1e 	bne	r3,zero,bc98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc98>
    bca4:	1105c83a 	sub	r2,r2,r4
    bca8:	f800283a 	ret
    bcac:	2005883a 	mov	r2,r4
    bcb0:	003fe706 	br	bc50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc50>
    bcb4:	0005883a 	mov	r2,zero
    bcb8:	f800283a 	ret

0000bcbc <__sprint_r.part.0>:
    bcbc:	28801917 	ldw	r2,100(r5)
    bcc0:	defff604 	addi	sp,sp,-40
    bcc4:	dd400515 	stw	r21,20(sp)
    bcc8:	dfc00915 	stw	ra,36(sp)
    bccc:	df000815 	stw	fp,32(sp)
    bcd0:	ddc00715 	stw	r23,28(sp)
    bcd4:	dd800615 	stw	r22,24(sp)
    bcd8:	dd000415 	stw	r20,16(sp)
    bcdc:	dcc00315 	stw	r19,12(sp)
    bce0:	dc800215 	stw	r18,8(sp)
    bce4:	dc400115 	stw	r17,4(sp)
    bce8:	dc000015 	stw	r16,0(sp)
    bcec:	1088000c 	andi	r2,r2,8192
    bcf0:	302b883a 	mov	r21,r6
    bcf4:	10002e26 	beq	r2,zero,bdb0 <__sprint_r.part.0+0xf4>
    bcf8:	30800217 	ldw	r2,8(r6)
    bcfc:	35800017 	ldw	r22,0(r6)
    bd00:	10002926 	beq	r2,zero,bda8 <__sprint_r.part.0+0xec>
    bd04:	2827883a 	mov	r19,r5
    bd08:	2029883a 	mov	r20,r4
    bd0c:	b5c00104 	addi	r23,r22,4
    bd10:	04bfffc4 	movi	r18,-1
    bd14:	bc400017 	ldw	r17,0(r23)
    bd18:	b4000017 	ldw	r16,0(r22)
    bd1c:	0039883a 	mov	fp,zero
    bd20:	8822d0ba 	srli	r17,r17,2
    bd24:	8800031e 	bne	r17,zero,bd34 <__sprint_r.part.0+0x78>
    bd28:	00001806 	br	bd8c <__sprint_r.part.0+0xd0>
    bd2c:	84000104 	addi	r16,r16,4
    bd30:	8f001526 	beq	r17,fp,bd88 <__sprint_r.part.0+0xcc>
    bd34:	81400017 	ldw	r5,0(r16)
    bd38:	980d883a 	mov	r6,r19
    bd3c:	a009883a 	mov	r4,r20
    bd40:	000d6e40 	call	d6e4 <_fputwc_r>
    bd44:	e7000044 	addi	fp,fp,1
    bd48:	14bff81e 	bne	r2,r18,bd2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd2c>
    bd4c:	9005883a 	mov	r2,r18
    bd50:	a8000215 	stw	zero,8(r21)
    bd54:	a8000115 	stw	zero,4(r21)
    bd58:	dfc00917 	ldw	ra,36(sp)
    bd5c:	df000817 	ldw	fp,32(sp)
    bd60:	ddc00717 	ldw	r23,28(sp)
    bd64:	dd800617 	ldw	r22,24(sp)
    bd68:	dd400517 	ldw	r21,20(sp)
    bd6c:	dd000417 	ldw	r20,16(sp)
    bd70:	dcc00317 	ldw	r19,12(sp)
    bd74:	dc800217 	ldw	r18,8(sp)
    bd78:	dc400117 	ldw	r17,4(sp)
    bd7c:	dc000017 	ldw	r16,0(sp)
    bd80:	dec00a04 	addi	sp,sp,40
    bd84:	f800283a 	ret
    bd88:	a8800217 	ldw	r2,8(r21)
    bd8c:	8c63883a 	add	r17,r17,r17
    bd90:	8c63883a 	add	r17,r17,r17
    bd94:	1445c83a 	sub	r2,r2,r17
    bd98:	a8800215 	stw	r2,8(r21)
    bd9c:	b5800204 	addi	r22,r22,8
    bda0:	bdc00204 	addi	r23,r23,8
    bda4:	103fdb1e 	bne	r2,zero,bd14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd14>
    bda8:	0005883a 	mov	r2,zero
    bdac:	003fe806 	br	bd50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd50>
    bdb0:	000d7e40 	call	d7e4 <__sfvwrite_r>
    bdb4:	003fe606 	br	bd50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd50>

0000bdb8 <__sprint_r>:
    bdb8:	30c00217 	ldw	r3,8(r6)
    bdbc:	18000126 	beq	r3,zero,bdc4 <__sprint_r+0xc>
    bdc0:	000bcbc1 	jmpi	bcbc <__sprint_r.part.0>
    bdc4:	30000115 	stw	zero,4(r6)
    bdc8:	0005883a 	mov	r2,zero
    bdcc:	f800283a 	ret

0000bdd0 <___vfiprintf_internal_r>:
    bdd0:	deffc904 	addi	sp,sp,-220
    bdd4:	df003515 	stw	fp,212(sp)
    bdd8:	dd003115 	stw	r20,196(sp)
    bddc:	dfc03615 	stw	ra,216(sp)
    bde0:	ddc03415 	stw	r23,208(sp)
    bde4:	dd803315 	stw	r22,204(sp)
    bde8:	dd403215 	stw	r21,200(sp)
    bdec:	dcc03015 	stw	r19,192(sp)
    bdf0:	dc802f15 	stw	r18,188(sp)
    bdf4:	dc402e15 	stw	r17,184(sp)
    bdf8:	dc002d15 	stw	r16,180(sp)
    bdfc:	d9002015 	stw	r4,128(sp)
    be00:	d9c02215 	stw	r7,136(sp)
    be04:	2829883a 	mov	r20,r5
    be08:	3039883a 	mov	fp,r6
    be0c:	20000226 	beq	r4,zero,be18 <___vfiprintf_internal_r+0x48>
    be10:	20800e17 	ldw	r2,56(r4)
    be14:	1000cf26 	beq	r2,zero,c154 <___vfiprintf_internal_r+0x384>
    be18:	a080030b 	ldhu	r2,12(r20)
    be1c:	10c8000c 	andi	r3,r2,8192
    be20:	1800061e 	bne	r3,zero,be3c <___vfiprintf_internal_r+0x6c>
    be24:	a1001917 	ldw	r4,100(r20)
    be28:	00f7ffc4 	movi	r3,-8193
    be2c:	10880014 	ori	r2,r2,8192
    be30:	20c6703a 	and	r3,r4,r3
    be34:	a080030d 	sth	r2,12(r20)
    be38:	a0c01915 	stw	r3,100(r20)
    be3c:	10c0020c 	andi	r3,r2,8
    be40:	1800a926 	beq	r3,zero,c0e8 <___vfiprintf_internal_r+0x318>
    be44:	a0c00417 	ldw	r3,16(r20)
    be48:	1800a726 	beq	r3,zero,c0e8 <___vfiprintf_internal_r+0x318>
    be4c:	1080068c 	andi	r2,r2,26
    be50:	00c00284 	movi	r3,10
    be54:	10c0ac26 	beq	r2,r3,c108 <___vfiprintf_internal_r+0x338>
    be58:	da801a04 	addi	r10,sp,104
    be5c:	da801e15 	stw	r10,120(sp)
    be60:	d8801e17 	ldw	r2,120(sp)
    be64:	da8019c4 	addi	r10,sp,103
    be68:	058000b4 	movhi	r22,2
    be6c:	05c000b4 	movhi	r23,2
    be70:	da801f15 	stw	r10,124(sp)
    be74:	1295c83a 	sub	r10,r2,r10
    be78:	b5aea704 	addi	r22,r22,-17764
    be7c:	bdeea304 	addi	r23,r23,-17780
    be80:	dec01a15 	stw	sp,104(sp)
    be84:	d8001c15 	stw	zero,112(sp)
    be88:	d8001b15 	stw	zero,108(sp)
    be8c:	d8002615 	stw	zero,152(sp)
    be90:	d8002315 	stw	zero,140(sp)
    be94:	da802715 	stw	r10,156(sp)
    be98:	d811883a 	mov	r8,sp
    be9c:	dd002115 	stw	r20,132(sp)
    bea0:	e021883a 	mov	r16,fp
    bea4:	80800007 	ldb	r2,0(r16)
    bea8:	1003ea26 	beq	r2,zero,ce54 <___vfiprintf_internal_r+0x1084>
    beac:	00c00944 	movi	r3,37
    beb0:	8025883a 	mov	r18,r16
    beb4:	10c0021e 	bne	r2,r3,bec0 <___vfiprintf_internal_r+0xf0>
    beb8:	00001606 	br	bf14 <___vfiprintf_internal_r+0x144>
    bebc:	10c00326 	beq	r2,r3,becc <___vfiprintf_internal_r+0xfc>
    bec0:	94800044 	addi	r18,r18,1
    bec4:	90800007 	ldb	r2,0(r18)
    bec8:	103ffc1e 	bne	r2,zero,bebc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bebc>
    becc:	9423c83a 	sub	r17,r18,r16
    bed0:	88001026 	beq	r17,zero,bf14 <___vfiprintf_internal_r+0x144>
    bed4:	d8c01c17 	ldw	r3,112(sp)
    bed8:	d8801b17 	ldw	r2,108(sp)
    bedc:	44000015 	stw	r16,0(r8)
    bee0:	88c7883a 	add	r3,r17,r3
    bee4:	10800044 	addi	r2,r2,1
    bee8:	44400115 	stw	r17,4(r8)
    beec:	d8c01c15 	stw	r3,112(sp)
    bef0:	d8801b15 	stw	r2,108(sp)
    bef4:	010001c4 	movi	r4,7
    bef8:	2080760e 	bge	r4,r2,c0d4 <___vfiprintf_internal_r+0x304>
    befc:	1803821e 	bne	r3,zero,cd08 <___vfiprintf_internal_r+0xf38>
    bf00:	da802317 	ldw	r10,140(sp)
    bf04:	d8001b15 	stw	zero,108(sp)
    bf08:	d811883a 	mov	r8,sp
    bf0c:	5455883a 	add	r10,r10,r17
    bf10:	da802315 	stw	r10,140(sp)
    bf14:	90800007 	ldb	r2,0(r18)
    bf18:	10044626 	beq	r2,zero,d034 <___vfiprintf_internal_r+0x1264>
    bf1c:	90c00047 	ldb	r3,1(r18)
    bf20:	94000044 	addi	r16,r18,1
    bf24:	d8001d85 	stb	zero,118(sp)
    bf28:	0009883a 	mov	r4,zero
    bf2c:	000f883a 	mov	r7,zero
    bf30:	027fffc4 	movi	r9,-1
    bf34:	0023883a 	mov	r17,zero
    bf38:	0029883a 	mov	r20,zero
    bf3c:	01401604 	movi	r5,88
    bf40:	01800244 	movi	r6,9
    bf44:	03400a84 	movi	r13,42
    bf48:	03001b04 	movi	r12,108
    bf4c:	84000044 	addi	r16,r16,1
    bf50:	18bff804 	addi	r2,r3,-32
    bf54:	28827336 	bltu	r5,r2,c924 <___vfiprintf_internal_r+0xb54>
    bf58:	100490ba 	slli	r2,r2,2
    bf5c:	02800074 	movhi	r10,1
    bf60:	52afdc04 	addi	r10,r10,-16528
    bf64:	1285883a 	add	r2,r2,r10
    bf68:	10800017 	ldw	r2,0(r2)
    bf6c:	1000683a 	jmp	r2
    bf70:	0000c658 	cmpnei	zero,zero,793
    bf74:	0000c924 	muli	zero,zero,804
    bf78:	0000c924 	muli	zero,zero,804
    bf7c:	0000c678 	rdprs	zero,zero,793
    bf80:	0000c924 	muli	zero,zero,804
    bf84:	0000c924 	muli	zero,zero,804
    bf88:	0000c924 	muli	zero,zero,804
    bf8c:	0000c924 	muli	zero,zero,804
    bf90:	0000c924 	muli	zero,zero,804
    bf94:	0000c924 	muli	zero,zero,804
    bf98:	0000c860 	cmpeqi	zero,zero,801
    bf9c:	0000c87c 	xorhi	zero,zero,801
    bfa0:	0000c924 	muli	zero,zero,804
    bfa4:	0000c164 	muli	zero,zero,773
    bfa8:	0000c88c 	andi	zero,zero,802
    bfac:	0000c924 	muli	zero,zero,804
    bfb0:	0000c684 	movi	zero,794
    bfb4:	0000c690 	cmplti	zero,zero,794
    bfb8:	0000c690 	cmplti	zero,zero,794
    bfbc:	0000c690 	cmplti	zero,zero,794
    bfc0:	0000c690 	cmplti	zero,zero,794
    bfc4:	0000c690 	cmplti	zero,zero,794
    bfc8:	0000c690 	cmplti	zero,zero,794
    bfcc:	0000c690 	cmplti	zero,zero,794
    bfd0:	0000c690 	cmplti	zero,zero,794
    bfd4:	0000c690 	cmplti	zero,zero,794
    bfd8:	0000c924 	muli	zero,zero,804
    bfdc:	0000c924 	muli	zero,zero,804
    bfe0:	0000c924 	muli	zero,zero,804
    bfe4:	0000c924 	muli	zero,zero,804
    bfe8:	0000c924 	muli	zero,zero,804
    bfec:	0000c924 	muli	zero,zero,804
    bff0:	0000c924 	muli	zero,zero,804
    bff4:	0000c924 	muli	zero,zero,804
    bff8:	0000c924 	muli	zero,zero,804
    bffc:	0000c924 	muli	zero,zero,804
    c000:	0000c6bc 	xorhi	zero,zero,794
    c004:	0000c924 	muli	zero,zero,804
    c008:	0000c924 	muli	zero,zero,804
    c00c:	0000c924 	muli	zero,zero,804
    c010:	0000c924 	muli	zero,zero,804
    c014:	0000c924 	muli	zero,zero,804
    c018:	0000c924 	muli	zero,zero,804
    c01c:	0000c924 	muli	zero,zero,804
    c020:	0000c924 	muli	zero,zero,804
    c024:	0000c924 	muli	zero,zero,804
    c028:	0000c924 	muli	zero,zero,804
    c02c:	0000c6f4 	movhi	zero,795
    c030:	0000c924 	muli	zero,zero,804
    c034:	0000c924 	muli	zero,zero,804
    c038:	0000c924 	muli	zero,zero,804
    c03c:	0000c924 	muli	zero,zero,804
    c040:	0000c924 	muli	zero,zero,804
    c044:	0000c74c 	andi	zero,zero,797
    c048:	0000c924 	muli	zero,zero,804
    c04c:	0000c924 	muli	zero,zero,804
    c050:	0000c7bc 	xorhi	zero,zero,798
    c054:	0000c924 	muli	zero,zero,804
    c058:	0000c924 	muli	zero,zero,804
    c05c:	0000c924 	muli	zero,zero,804
    c060:	0000c924 	muli	zero,zero,804
    c064:	0000c924 	muli	zero,zero,804
    c068:	0000c924 	muli	zero,zero,804
    c06c:	0000c924 	muli	zero,zero,804
    c070:	0000c924 	muli	zero,zero,804
    c074:	0000c924 	muli	zero,zero,804
    c078:	0000c924 	muli	zero,zero,804
    c07c:	0000c568 	cmpgeui	zero,zero,789
    c080:	0000c594 	movui	zero,790
    c084:	0000c924 	muli	zero,zero,804
    c088:	0000c924 	muli	zero,zero,804
    c08c:	0000c924 	muli	zero,zero,804
    c090:	0000c8cc 	andi	zero,zero,803
    c094:	0000c594 	movui	zero,790
    c098:	0000c924 	muli	zero,zero,804
    c09c:	0000c924 	muli	zero,zero,804
    c0a0:	0000c428 	cmpgeui	zero,zero,784
    c0a4:	0000c924 	muli	zero,zero,804
    c0a8:	0000c438 	rdprs	zero,zero,784
    c0ac:	0000c474 	movhi	zero,785
    c0b0:	0000c170 	cmpltui	zero,zero,773
    c0b4:	0000c41c 	xori	zero,zero,784
    c0b8:	0000c924 	muli	zero,zero,804
    c0bc:	0000c7f8 	rdprs	zero,zero,799
    c0c0:	0000c924 	muli	zero,zero,804
    c0c4:	0000c850 	cmplti	zero,zero,801
    c0c8:	0000c924 	muli	zero,zero,804
    c0cc:	0000c924 	muli	zero,zero,804
    c0d0:	0000c514 	movui	zero,788
    c0d4:	42000204 	addi	r8,r8,8
    c0d8:	da802317 	ldw	r10,140(sp)
    c0dc:	5455883a 	add	r10,r10,r17
    c0e0:	da802315 	stw	r10,140(sp)
    c0e4:	003f8b06 	br	bf14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf14>
    c0e8:	d9002017 	ldw	r4,128(sp)
    c0ec:	a00b883a 	mov	r5,r20
    c0f0:	00075700 	call	7570 <__swsetup_r>
    c0f4:	1003b11e 	bne	r2,zero,cfbc <___vfiprintf_internal_r+0x11ec>
    c0f8:	a080030b 	ldhu	r2,12(r20)
    c0fc:	00c00284 	movi	r3,10
    c100:	1080068c 	andi	r2,r2,26
    c104:	10ff541e 	bne	r2,r3,be58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be58>
    c108:	a080038f 	ldh	r2,14(r20)
    c10c:	103f5216 	blt	r2,zero,be58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be58>
    c110:	d9c02217 	ldw	r7,136(sp)
    c114:	d9002017 	ldw	r4,128(sp)
    c118:	e00d883a 	mov	r6,fp
    c11c:	a00b883a 	mov	r5,r20
    c120:	000d2480 	call	d248 <__sbprintf>
    c124:	dfc03617 	ldw	ra,216(sp)
    c128:	df003517 	ldw	fp,212(sp)
    c12c:	ddc03417 	ldw	r23,208(sp)
    c130:	dd803317 	ldw	r22,204(sp)
    c134:	dd403217 	ldw	r21,200(sp)
    c138:	dd003117 	ldw	r20,196(sp)
    c13c:	dcc03017 	ldw	r19,192(sp)
    c140:	dc802f17 	ldw	r18,188(sp)
    c144:	dc402e17 	ldw	r17,184(sp)
    c148:	dc002d17 	ldw	r16,180(sp)
    c14c:	dec03704 	addi	sp,sp,220
    c150:	f800283a 	ret
    c154:	00095440 	call	9544 <__sinit>
    c158:	003f2f06 	br	be18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be18>
    c15c:	0463c83a 	sub	r17,zero,r17
    c160:	d8802215 	stw	r2,136(sp)
    c164:	a5000114 	ori	r20,r20,4
    c168:	80c00007 	ldb	r3,0(r16)
    c16c:	003f7706 	br	bf4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf4c>
    c170:	00800c04 	movi	r2,48
    c174:	da802217 	ldw	r10,136(sp)
    c178:	d8801d05 	stb	r2,116(sp)
    c17c:	00801e04 	movi	r2,120
    c180:	d8801d45 	stb	r2,117(sp)
    c184:	d8001d85 	stb	zero,118(sp)
    c188:	50c00104 	addi	r3,r10,4
    c18c:	54800017 	ldw	r18,0(r10)
    c190:	0027883a 	mov	r19,zero
    c194:	a0800094 	ori	r2,r20,2
    c198:	48030b16 	blt	r9,zero,cdc8 <___vfiprintf_internal_r+0xff8>
    c19c:	00bfdfc4 	movi	r2,-129
    c1a0:	a096703a 	and	r11,r20,r2
    c1a4:	d8c02215 	stw	r3,136(sp)
    c1a8:	5d000094 	ori	r20,r11,2
    c1ac:	90032b1e 	bne	r18,zero,ce5c <___vfiprintf_internal_r+0x108c>
    c1b0:	008000b4 	movhi	r2,2
    c1b4:	10ae4204 	addi	r2,r2,-18168
    c1b8:	d8802615 	stw	r2,152(sp)
    c1bc:	0039883a 	mov	fp,zero
    c1c0:	48017b1e 	bne	r9,zero,c7b0 <___vfiprintf_internal_r+0x9e0>
    c1c4:	0013883a 	mov	r9,zero
    c1c8:	0027883a 	mov	r19,zero
    c1cc:	dd401a04 	addi	r21,sp,104
    c1d0:	4825883a 	mov	r18,r9
    c1d4:	4cc0010e 	bge	r9,r19,c1dc <___vfiprintf_internal_r+0x40c>
    c1d8:	9825883a 	mov	r18,r19
    c1dc:	e7003fcc 	andi	fp,fp,255
    c1e0:	e700201c 	xori	fp,fp,128
    c1e4:	e73fe004 	addi	fp,fp,-128
    c1e8:	e0000126 	beq	fp,zero,c1f0 <___vfiprintf_internal_r+0x420>
    c1ec:	94800044 	addi	r18,r18,1
    c1f0:	a380008c 	andi	r14,r20,2
    c1f4:	70000126 	beq	r14,zero,c1fc <___vfiprintf_internal_r+0x42c>
    c1f8:	94800084 	addi	r18,r18,2
    c1fc:	a700210c 	andi	fp,r20,132
    c200:	e001df1e 	bne	fp,zero,c980 <___vfiprintf_internal_r+0xbb0>
    c204:	8c87c83a 	sub	r3,r17,r18
    c208:	00c1dd0e 	bge	zero,r3,c980 <___vfiprintf_internal_r+0xbb0>
    c20c:	01c00404 	movi	r7,16
    c210:	d8801c17 	ldw	r2,112(sp)
    c214:	38c3ad0e 	bge	r7,r3,d0cc <___vfiprintf_internal_r+0x12fc>
    c218:	028000b4 	movhi	r10,2
    c21c:	52aea704 	addi	r10,r10,-17764
    c220:	dc002915 	stw	r16,164(sp)
    c224:	d9801b17 	ldw	r6,108(sp)
    c228:	da802415 	stw	r10,144(sp)
    c22c:	03c001c4 	movi	r15,7
    c230:	da402515 	stw	r9,148(sp)
    c234:	db802815 	stw	r14,160(sp)
    c238:	1821883a 	mov	r16,r3
    c23c:	00000506 	br	c254 <___vfiprintf_internal_r+0x484>
    c240:	31400084 	addi	r5,r6,2
    c244:	42000204 	addi	r8,r8,8
    c248:	200d883a 	mov	r6,r4
    c24c:	843ffc04 	addi	r16,r16,-16
    c250:	3c000d0e 	bge	r7,r16,c288 <___vfiprintf_internal_r+0x4b8>
    c254:	10800404 	addi	r2,r2,16
    c258:	31000044 	addi	r4,r6,1
    c25c:	45800015 	stw	r22,0(r8)
    c260:	41c00115 	stw	r7,4(r8)
    c264:	d8801c15 	stw	r2,112(sp)
    c268:	d9001b15 	stw	r4,108(sp)
    c26c:	793ff40e 	bge	r15,r4,c240 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c240>
    c270:	1001b51e 	bne	r2,zero,c948 <___vfiprintf_internal_r+0xb78>
    c274:	843ffc04 	addi	r16,r16,-16
    c278:	000d883a 	mov	r6,zero
    c27c:	01400044 	movi	r5,1
    c280:	d811883a 	mov	r8,sp
    c284:	3c3ff316 	blt	r7,r16,c254 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c254>
    c288:	8007883a 	mov	r3,r16
    c28c:	da402517 	ldw	r9,148(sp)
    c290:	db802817 	ldw	r14,160(sp)
    c294:	dc002917 	ldw	r16,164(sp)
    c298:	da802417 	ldw	r10,144(sp)
    c29c:	1885883a 	add	r2,r3,r2
    c2a0:	40c00115 	stw	r3,4(r8)
    c2a4:	42800015 	stw	r10,0(r8)
    c2a8:	d8801c15 	stw	r2,112(sp)
    c2ac:	d9401b15 	stw	r5,108(sp)
    c2b0:	00c001c4 	movi	r3,7
    c2b4:	19426016 	blt	r3,r5,cc38 <___vfiprintf_internal_r+0xe68>
    c2b8:	d8c01d87 	ldb	r3,118(sp)
    c2bc:	42000204 	addi	r8,r8,8
    c2c0:	29000044 	addi	r4,r5,1
    c2c4:	1801b31e 	bne	r3,zero,c994 <___vfiprintf_internal_r+0xbc4>
    c2c8:	7001c026 	beq	r14,zero,c9cc <___vfiprintf_internal_r+0xbfc>
    c2cc:	d8c01d04 	addi	r3,sp,116
    c2d0:	10800084 	addi	r2,r2,2
    c2d4:	40c00015 	stw	r3,0(r8)
    c2d8:	00c00084 	movi	r3,2
    c2dc:	40c00115 	stw	r3,4(r8)
    c2e0:	d8801c15 	stw	r2,112(sp)
    c2e4:	d9001b15 	stw	r4,108(sp)
    c2e8:	00c001c4 	movi	r3,7
    c2ec:	1902650e 	bge	r3,r4,cc84 <___vfiprintf_internal_r+0xeb4>
    c2f0:	10029a1e 	bne	r2,zero,cd5c <___vfiprintf_internal_r+0xf8c>
    c2f4:	00c02004 	movi	r3,128
    c2f8:	01000044 	movi	r4,1
    c2fc:	000b883a 	mov	r5,zero
    c300:	d811883a 	mov	r8,sp
    c304:	e0c1b31e 	bne	fp,r3,c9d4 <___vfiprintf_internal_r+0xc04>
    c308:	8cb9c83a 	sub	fp,r17,r18
    c30c:	0701b10e 	bge	zero,fp,c9d4 <___vfiprintf_internal_r+0xc04>
    c310:	01c00404 	movi	r7,16
    c314:	3f03890e 	bge	r7,fp,d13c <___vfiprintf_internal_r+0x136c>
    c318:	00c000b4 	movhi	r3,2
    c31c:	18eea304 	addi	r3,r3,-17780
    c320:	d8c02415 	stw	r3,144(sp)
    c324:	8007883a 	mov	r3,r16
    c328:	034001c4 	movi	r13,7
    c32c:	e021883a 	mov	r16,fp
    c330:	da402515 	stw	r9,148(sp)
    c334:	1839883a 	mov	fp,r3
    c338:	00000506 	br	c350 <___vfiprintf_internal_r+0x580>
    c33c:	29800084 	addi	r6,r5,2
    c340:	42000204 	addi	r8,r8,8
    c344:	180b883a 	mov	r5,r3
    c348:	843ffc04 	addi	r16,r16,-16
    c34c:	3c000d0e 	bge	r7,r16,c384 <___vfiprintf_internal_r+0x5b4>
    c350:	10800404 	addi	r2,r2,16
    c354:	28c00044 	addi	r3,r5,1
    c358:	45c00015 	stw	r23,0(r8)
    c35c:	41c00115 	stw	r7,4(r8)
    c360:	d8801c15 	stw	r2,112(sp)
    c364:	d8c01b15 	stw	r3,108(sp)
    c368:	68fff40e 	bge	r13,r3,c33c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c33c>
    c36c:	1002241e 	bne	r2,zero,cc00 <___vfiprintf_internal_r+0xe30>
    c370:	843ffc04 	addi	r16,r16,-16
    c374:	01800044 	movi	r6,1
    c378:	000b883a 	mov	r5,zero
    c37c:	d811883a 	mov	r8,sp
    c380:	3c3ff316 	blt	r7,r16,c350 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c350>
    c384:	da402517 	ldw	r9,148(sp)
    c388:	e007883a 	mov	r3,fp
    c38c:	8039883a 	mov	fp,r16
    c390:	1821883a 	mov	r16,r3
    c394:	d8c02417 	ldw	r3,144(sp)
    c398:	1705883a 	add	r2,r2,fp
    c39c:	47000115 	stw	fp,4(r8)
    c3a0:	40c00015 	stw	r3,0(r8)
    c3a4:	d8801c15 	stw	r2,112(sp)
    c3a8:	d9801b15 	stw	r6,108(sp)
    c3ac:	00c001c4 	movi	r3,7
    c3b0:	19827616 	blt	r3,r6,cd8c <___vfiprintf_internal_r+0xfbc>
    c3b4:	4cf9c83a 	sub	fp,r9,r19
    c3b8:	42000204 	addi	r8,r8,8
    c3bc:	31000044 	addi	r4,r6,1
    c3c0:	300b883a 	mov	r5,r6
    c3c4:	07018516 	blt	zero,fp,c9dc <___vfiprintf_internal_r+0xc0c>
    c3c8:	9885883a 	add	r2,r19,r2
    c3cc:	45400015 	stw	r21,0(r8)
    c3d0:	44c00115 	stw	r19,4(r8)
    c3d4:	d8801c15 	stw	r2,112(sp)
    c3d8:	d9001b15 	stw	r4,108(sp)
    c3dc:	00c001c4 	movi	r3,7
    c3e0:	1901dd0e 	bge	r3,r4,cb58 <___vfiprintf_internal_r+0xd88>
    c3e4:	1002401e 	bne	r2,zero,cce8 <___vfiprintf_internal_r+0xf18>
    c3e8:	d8001b15 	stw	zero,108(sp)
    c3ec:	a2c0010c 	andi	r11,r20,4
    c3f0:	58000226 	beq	r11,zero,c3fc <___vfiprintf_internal_r+0x62c>
    c3f4:	8ca7c83a 	sub	r19,r17,r18
    c3f8:	04c2f216 	blt	zero,r19,cfc4 <___vfiprintf_internal_r+0x11f4>
    c3fc:	8c80010e 	bge	r17,r18,c404 <___vfiprintf_internal_r+0x634>
    c400:	9023883a 	mov	r17,r18
    c404:	da802317 	ldw	r10,140(sp)
    c408:	5455883a 	add	r10,r10,r17
    c40c:	da802315 	stw	r10,140(sp)
    c410:	d8001b15 	stw	zero,108(sp)
    c414:	d811883a 	mov	r8,sp
    c418:	003ea206 	br	bea4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bea4>
    c41c:	a5000814 	ori	r20,r20,32
    c420:	80c00007 	ldb	r3,0(r16)
    c424:	003ec906 	br	bf4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf4c>
    c428:	80c00007 	ldb	r3,0(r16)
    c42c:	1b030926 	beq	r3,r12,d054 <___vfiprintf_internal_r+0x1284>
    c430:	a5000414 	ori	r20,r20,16
    c434:	003ec506 	br	bf4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf4c>
    c438:	21003fcc 	andi	r4,r4,255
    c43c:	20035e1e 	bne	r4,zero,d1b8 <___vfiprintf_internal_r+0x13e8>
    c440:	a080080c 	andi	r2,r20,32
    c444:	1002a526 	beq	r2,zero,cedc <___vfiprintf_internal_r+0x110c>
    c448:	da802217 	ldw	r10,136(sp)
    c44c:	50800017 	ldw	r2,0(r10)
    c450:	da802317 	ldw	r10,140(sp)
    c454:	5007d7fa 	srai	r3,r10,31
    c458:	da802217 	ldw	r10,136(sp)
    c45c:	10c00115 	stw	r3,4(r2)
    c460:	52800104 	addi	r10,r10,4
    c464:	da802215 	stw	r10,136(sp)
    c468:	da802317 	ldw	r10,140(sp)
    c46c:	12800015 	stw	r10,0(r2)
    c470:	003e8c06 	br	bea4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bea4>
    c474:	21003fcc 	andi	r4,r4,255
    c478:	2003511e 	bne	r4,zero,d1c0 <___vfiprintf_internal_r+0x13f0>
    c47c:	a080080c 	andi	r2,r20,32
    c480:	1000a126 	beq	r2,zero,c708 <___vfiprintf_internal_r+0x938>
    c484:	da802217 	ldw	r10,136(sp)
    c488:	d8001d85 	stb	zero,118(sp)
    c48c:	50800204 	addi	r2,r10,8
    c490:	54800017 	ldw	r18,0(r10)
    c494:	54c00117 	ldw	r19,4(r10)
    c498:	4802b416 	blt	r9,zero,cf6c <___vfiprintf_internal_r+0x119c>
    c49c:	013fdfc4 	movi	r4,-129
    c4a0:	94c6b03a 	or	r3,r18,r19
    c4a4:	d8802215 	stw	r2,136(sp)
    c4a8:	a128703a 	and	r20,r20,r4
    c4ac:	1800a226 	beq	r3,zero,c738 <___vfiprintf_internal_r+0x968>
    c4b0:	0039883a 	mov	fp,zero
    c4b4:	dd401a04 	addi	r21,sp,104
    c4b8:	9006d0fa 	srli	r3,r18,3
    c4bc:	9808977a 	slli	r4,r19,29
    c4c0:	9826d0fa 	srli	r19,r19,3
    c4c4:	948001cc 	andi	r18,r18,7
    c4c8:	90800c04 	addi	r2,r18,48
    c4cc:	ad7fffc4 	addi	r21,r21,-1
    c4d0:	20e4b03a 	or	r18,r4,r3
    c4d4:	a8800005 	stb	r2,0(r21)
    c4d8:	94c6b03a 	or	r3,r18,r19
    c4dc:	183ff61e 	bne	r3,zero,c4b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4b8>
    c4e0:	a0c0004c 	andi	r3,r20,1
    c4e4:	18005926 	beq	r3,zero,c64c <___vfiprintf_internal_r+0x87c>
    c4e8:	10803fcc 	andi	r2,r2,255
    c4ec:	1080201c 	xori	r2,r2,128
    c4f0:	10bfe004 	addi	r2,r2,-128
    c4f4:	00c00c04 	movi	r3,48
    c4f8:	10c05426 	beq	r2,r3,c64c <___vfiprintf_internal_r+0x87c>
    c4fc:	da801e17 	ldw	r10,120(sp)
    c500:	a8bfffc4 	addi	r2,r21,-1
    c504:	a8ffffc5 	stb	r3,-1(r21)
    c508:	50a7c83a 	sub	r19,r10,r2
    c50c:	102b883a 	mov	r21,r2
    c510:	003f2f06 	br	c1d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1d0>
    c514:	21003fcc 	andi	r4,r4,255
    c518:	2003421e 	bne	r4,zero,d224 <___vfiprintf_internal_r+0x1454>
    c51c:	008000b4 	movhi	r2,2
    c520:	10ae4204 	addi	r2,r2,-18168
    c524:	d8802615 	stw	r2,152(sp)
    c528:	a080080c 	andi	r2,r20,32
    c52c:	1000aa26 	beq	r2,zero,c7d8 <___vfiprintf_internal_r+0xa08>
    c530:	da802217 	ldw	r10,136(sp)
    c534:	54800017 	ldw	r18,0(r10)
    c538:	54c00117 	ldw	r19,4(r10)
    c53c:	52800204 	addi	r10,r10,8
    c540:	da802215 	stw	r10,136(sp)
    c544:	a080004c 	andi	r2,r20,1
    c548:	1001d226 	beq	r2,zero,cc94 <___vfiprintf_internal_r+0xec4>
    c54c:	94c4b03a 	or	r2,r18,r19
    c550:	1002351e 	bne	r2,zero,ce28 <___vfiprintf_internal_r+0x1058>
    c554:	d8001d85 	stb	zero,118(sp)
    c558:	48022216 	blt	r9,zero,cde4 <___vfiprintf_internal_r+0x1014>
    c55c:	00bfdfc4 	movi	r2,-129
    c560:	a0a8703a 	and	r20,r20,r2
    c564:	003f1506 	br	c1bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1bc>
    c568:	da802217 	ldw	r10,136(sp)
    c56c:	04800044 	movi	r18,1
    c570:	d8001d85 	stb	zero,118(sp)
    c574:	50800017 	ldw	r2,0(r10)
    c578:	52800104 	addi	r10,r10,4
    c57c:	da802215 	stw	r10,136(sp)
    c580:	d8801005 	stb	r2,64(sp)
    c584:	9027883a 	mov	r19,r18
    c588:	dd401004 	addi	r21,sp,64
    c58c:	0013883a 	mov	r9,zero
    c590:	003f1706 	br	c1f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1f0>
    c594:	21003fcc 	andi	r4,r4,255
    c598:	2003201e 	bne	r4,zero,d21c <___vfiprintf_internal_r+0x144c>
    c59c:	a080080c 	andi	r2,r20,32
    c5a0:	10004b26 	beq	r2,zero,c6d0 <___vfiprintf_internal_r+0x900>
    c5a4:	da802217 	ldw	r10,136(sp)
    c5a8:	50800117 	ldw	r2,4(r10)
    c5ac:	54800017 	ldw	r18,0(r10)
    c5b0:	52800204 	addi	r10,r10,8
    c5b4:	da802215 	stw	r10,136(sp)
    c5b8:	1027883a 	mov	r19,r2
    c5bc:	10022c16 	blt	r2,zero,ce70 <___vfiprintf_internal_r+0x10a0>
    c5c0:	df001d83 	ldbu	fp,118(sp)
    c5c4:	48007216 	blt	r9,zero,c790 <___vfiprintf_internal_r+0x9c0>
    c5c8:	00ffdfc4 	movi	r3,-129
    c5cc:	94c4b03a 	or	r2,r18,r19
    c5d0:	a0e8703a 	and	r20,r20,r3
    c5d4:	1000cc26 	beq	r2,zero,c908 <___vfiprintf_internal_r+0xb38>
    c5d8:	98021026 	beq	r19,zero,ce1c <___vfiprintf_internal_r+0x104c>
    c5dc:	dc402415 	stw	r17,144(sp)
    c5e0:	dc002515 	stw	r16,148(sp)
    c5e4:	9823883a 	mov	r17,r19
    c5e8:	9021883a 	mov	r16,r18
    c5ec:	dd401a04 	addi	r21,sp,104
    c5f0:	4825883a 	mov	r18,r9
    c5f4:	4027883a 	mov	r19,r8
    c5f8:	8009883a 	mov	r4,r16
    c5fc:	880b883a 	mov	r5,r17
    c600:	01800284 	movi	r6,10
    c604:	000f883a 	mov	r7,zero
    c608:	000ed2c0 	call	ed2c <__umoddi3>
    c60c:	10800c04 	addi	r2,r2,48
    c610:	ad7fffc4 	addi	r21,r21,-1
    c614:	8009883a 	mov	r4,r16
    c618:	880b883a 	mov	r5,r17
    c61c:	a8800005 	stb	r2,0(r21)
    c620:	01800284 	movi	r6,10
    c624:	000f883a 	mov	r7,zero
    c628:	000e7b40 	call	e7b4 <__udivdi3>
    c62c:	1021883a 	mov	r16,r2
    c630:	10c4b03a 	or	r2,r2,r3
    c634:	1823883a 	mov	r17,r3
    c638:	103fef1e 	bne	r2,zero,c5f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5f8>
    c63c:	dc402417 	ldw	r17,144(sp)
    c640:	dc002517 	ldw	r16,148(sp)
    c644:	9013883a 	mov	r9,r18
    c648:	9811883a 	mov	r8,r19
    c64c:	da801e17 	ldw	r10,120(sp)
    c650:	5567c83a 	sub	r19,r10,r21
    c654:	003ede06 	br	c1d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1d0>
    c658:	38803fcc 	andi	r2,r7,255
    c65c:	1080201c 	xori	r2,r2,128
    c660:	10bfe004 	addi	r2,r2,-128
    c664:	1002371e 	bne	r2,zero,cf44 <___vfiprintf_internal_r+0x1174>
    c668:	01000044 	movi	r4,1
    c66c:	01c00804 	movi	r7,32
    c670:	80c00007 	ldb	r3,0(r16)
    c674:	003e3506 	br	bf4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf4c>
    c678:	a5000054 	ori	r20,r20,1
    c67c:	80c00007 	ldb	r3,0(r16)
    c680:	003e3206 	br	bf4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf4c>
    c684:	a5002014 	ori	r20,r20,128
    c688:	80c00007 	ldb	r3,0(r16)
    c68c:	003e2f06 	br	bf4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf4c>
    c690:	8015883a 	mov	r10,r16
    c694:	0023883a 	mov	r17,zero
    c698:	18bff404 	addi	r2,r3,-48
    c69c:	50c00007 	ldb	r3,0(r10)
    c6a0:	8c4002a4 	muli	r17,r17,10
    c6a4:	84000044 	addi	r16,r16,1
    c6a8:	8015883a 	mov	r10,r16
    c6ac:	1463883a 	add	r17,r2,r17
    c6b0:	18bff404 	addi	r2,r3,-48
    c6b4:	30bff92e 	bgeu	r6,r2,c69c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c69c>
    c6b8:	003e2506 	br	bf50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf50>
    c6bc:	21003fcc 	andi	r4,r4,255
    c6c0:	2002d41e 	bne	r4,zero,d214 <___vfiprintf_internal_r+0x1444>
    c6c4:	a5000414 	ori	r20,r20,16
    c6c8:	a080080c 	andi	r2,r20,32
    c6cc:	103fb51e 	bne	r2,zero,c5a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5a4>
    c6d0:	a080040c 	andi	r2,r20,16
    c6d4:	1001f826 	beq	r2,zero,ceb8 <___vfiprintf_internal_r+0x10e8>
    c6d8:	da802217 	ldw	r10,136(sp)
    c6dc:	54800017 	ldw	r18,0(r10)
    c6e0:	52800104 	addi	r10,r10,4
    c6e4:	da802215 	stw	r10,136(sp)
    c6e8:	9027d7fa 	srai	r19,r18,31
    c6ec:	9805883a 	mov	r2,r19
    c6f0:	003fb206 	br	c5bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5bc>
    c6f4:	21003fcc 	andi	r4,r4,255
    c6f8:	2002c41e 	bne	r4,zero,d20c <___vfiprintf_internal_r+0x143c>
    c6fc:	a5000414 	ori	r20,r20,16
    c700:	a080080c 	andi	r2,r20,32
    c704:	103f5f1e 	bne	r2,zero,c484 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c484>
    c708:	a080040c 	andi	r2,r20,16
    c70c:	10020f26 	beq	r2,zero,cf4c <___vfiprintf_internal_r+0x117c>
    c710:	da802217 	ldw	r10,136(sp)
    c714:	d8001d85 	stb	zero,118(sp)
    c718:	0027883a 	mov	r19,zero
    c71c:	50800104 	addi	r2,r10,4
    c720:	54800017 	ldw	r18,0(r10)
    c724:	48021116 	blt	r9,zero,cf6c <___vfiprintf_internal_r+0x119c>
    c728:	00ffdfc4 	movi	r3,-129
    c72c:	d8802215 	stw	r2,136(sp)
    c730:	a0e8703a 	and	r20,r20,r3
    c734:	903f5e1e 	bne	r18,zero,c4b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4b0>
    c738:	0039883a 	mov	fp,zero
    c73c:	4802a626 	beq	r9,zero,d1d8 <___vfiprintf_internal_r+0x1408>
    c740:	0025883a 	mov	r18,zero
    c744:	0027883a 	mov	r19,zero
    c748:	003f5a06 	br	c4b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4b4>
    c74c:	21003fcc 	andi	r4,r4,255
    c750:	20029f1e 	bne	r4,zero,d1d0 <___vfiprintf_internal_r+0x1400>
    c754:	a5000414 	ori	r20,r20,16
    c758:	a080080c 	andi	r2,r20,32
    c75c:	10005e1e 	bne	r2,zero,c8d8 <___vfiprintf_internal_r+0xb08>
    c760:	a080040c 	andi	r2,r20,16
    c764:	1001a21e 	bne	r2,zero,cdf0 <___vfiprintf_internal_r+0x1020>
    c768:	a080100c 	andi	r2,r20,64
    c76c:	d8001d85 	stb	zero,118(sp)
    c770:	da802217 	ldw	r10,136(sp)
    c774:	1002231e 	bne	r2,zero,d004 <___vfiprintf_internal_r+0x1234>
    c778:	50800104 	addi	r2,r10,4
    c77c:	54800017 	ldw	r18,0(r10)
    c780:	0027883a 	mov	r19,zero
    c784:	4801a00e 	bge	r9,zero,ce08 <___vfiprintf_internal_r+0x1038>
    c788:	d8802215 	stw	r2,136(sp)
    c78c:	0039883a 	mov	fp,zero
    c790:	94c4b03a 	or	r2,r18,r19
    c794:	103f901e 	bne	r2,zero,c5d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5d8>
    c798:	00800044 	movi	r2,1
    c79c:	10803fcc 	andi	r2,r2,255
    c7a0:	00c00044 	movi	r3,1
    c7a4:	10c05926 	beq	r2,r3,c90c <___vfiprintf_internal_r+0xb3c>
    c7a8:	00c00084 	movi	r3,2
    c7ac:	10ffe41e 	bne	r2,r3,c740 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c740>
    c7b0:	0025883a 	mov	r18,zero
    c7b4:	0027883a 	mov	r19,zero
    c7b8:	00013d06 	br	ccb0 <___vfiprintf_internal_r+0xee0>
    c7bc:	21003fcc 	andi	r4,r4,255
    c7c0:	2002811e 	bne	r4,zero,d1c8 <___vfiprintf_internal_r+0x13f8>
    c7c4:	008000b4 	movhi	r2,2
    c7c8:	10ae3d04 	addi	r2,r2,-18188
    c7cc:	d8802615 	stw	r2,152(sp)
    c7d0:	a080080c 	andi	r2,r20,32
    c7d4:	103f561e 	bne	r2,zero,c530 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c530>
    c7d8:	a080040c 	andi	r2,r20,16
    c7dc:	1001d126 	beq	r2,zero,cf24 <___vfiprintf_internal_r+0x1154>
    c7e0:	da802217 	ldw	r10,136(sp)
    c7e4:	0027883a 	mov	r19,zero
    c7e8:	54800017 	ldw	r18,0(r10)
    c7ec:	52800104 	addi	r10,r10,4
    c7f0:	da802215 	stw	r10,136(sp)
    c7f4:	003f5306 	br	c544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c544>
    c7f8:	da802217 	ldw	r10,136(sp)
    c7fc:	d8001d85 	stb	zero,118(sp)
    c800:	55400017 	ldw	r21,0(r10)
    c804:	50c00104 	addi	r3,r10,4
    c808:	a8024226 	beq	r21,zero,d114 <___vfiprintf_internal_r+0x1344>
    c80c:	48021816 	blt	r9,zero,d070 <___vfiprintf_internal_r+0x12a0>
    c810:	480d883a 	mov	r6,r9
    c814:	000b883a 	mov	r5,zero
    c818:	a809883a 	mov	r4,r21
    c81c:	d8c02a15 	stw	r3,168(sp)
    c820:	da002b15 	stw	r8,172(sp)
    c824:	da402c15 	stw	r9,176(sp)
    c828:	000a5f40 	call	a5f4 <memchr>
    c82c:	d8c02a17 	ldw	r3,168(sp)
    c830:	da002b17 	ldw	r8,172(sp)
    c834:	da402c17 	ldw	r9,176(sp)
    c838:	10024826 	beq	r2,zero,d15c <___vfiprintf_internal_r+0x138c>
    c83c:	1567c83a 	sub	r19,r2,r21
    c840:	df001d83 	ldbu	fp,118(sp)
    c844:	d8c02215 	stw	r3,136(sp)
    c848:	0013883a 	mov	r9,zero
    c84c:	003e6006 	br	c1d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1d0>
    c850:	21003fcc 	andi	r4,r4,255
    c854:	203fc026 	beq	r4,zero,c758 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c758>
    c858:	d9c01d85 	stb	r7,118(sp)
    c85c:	003fbe06 	br	c758 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c758>
    c860:	da802217 	ldw	r10,136(sp)
    c864:	54400017 	ldw	r17,0(r10)
    c868:	50800104 	addi	r2,r10,4
    c86c:	883e3b16 	blt	r17,zero,c15c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c15c>
    c870:	d8802215 	stw	r2,136(sp)
    c874:	80c00007 	ldb	r3,0(r16)
    c878:	003db406 	br	bf4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf4c>
    c87c:	01000044 	movi	r4,1
    c880:	01c00ac4 	movi	r7,43
    c884:	80c00007 	ldb	r3,0(r16)
    c888:	003db006 	br	bf4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf4c>
    c88c:	80c00007 	ldb	r3,0(r16)
    c890:	82800044 	addi	r10,r16,1
    c894:	1b423c26 	beq	r3,r13,d188 <___vfiprintf_internal_r+0x13b8>
    c898:	18bff404 	addi	r2,r3,-48
    c89c:	0013883a 	mov	r9,zero
    c8a0:	30822b36 	bltu	r6,r2,d150 <___vfiprintf_internal_r+0x1380>
    c8a4:	50c00007 	ldb	r3,0(r10)
    c8a8:	4a4002a4 	muli	r9,r9,10
    c8ac:	54000044 	addi	r16,r10,1
    c8b0:	8015883a 	mov	r10,r16
    c8b4:	4893883a 	add	r9,r9,r2
    c8b8:	18bff404 	addi	r2,r3,-48
    c8bc:	30bff92e 	bgeu	r6,r2,c8a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c8a4>
    c8c0:	483da30e 	bge	r9,zero,bf50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf50>
    c8c4:	027fffc4 	movi	r9,-1
    c8c8:	003da106 	br	bf50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf50>
    c8cc:	a5001014 	ori	r20,r20,64
    c8d0:	80c00007 	ldb	r3,0(r16)
    c8d4:	003d9d06 	br	bf4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf4c>
    c8d8:	da802217 	ldw	r10,136(sp)
    c8dc:	d8001d85 	stb	zero,118(sp)
    c8e0:	50c00204 	addi	r3,r10,8
    c8e4:	54800017 	ldw	r18,0(r10)
    c8e8:	54c00117 	ldw	r19,4(r10)
    c8ec:	4801ca16 	blt	r9,zero,d018 <___vfiprintf_internal_r+0x1248>
    c8f0:	013fdfc4 	movi	r4,-129
    c8f4:	94c4b03a 	or	r2,r18,r19
    c8f8:	d8c02215 	stw	r3,136(sp)
    c8fc:	a128703a 	and	r20,r20,r4
    c900:	0039883a 	mov	fp,zero
    c904:	103f341e 	bne	r2,zero,c5d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5d8>
    c908:	483e2e26 	beq	r9,zero,c1c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1c4>
    c90c:	0025883a 	mov	r18,zero
    c910:	94800c04 	addi	r18,r18,48
    c914:	dc8019c5 	stb	r18,103(sp)
    c918:	dcc02717 	ldw	r19,156(sp)
    c91c:	dd4019c4 	addi	r21,sp,103
    c920:	003e2b06 	br	c1d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1d0>
    c924:	21003fcc 	andi	r4,r4,255
    c928:	2002361e 	bne	r4,zero,d204 <___vfiprintf_internal_r+0x1434>
    c92c:	1801c126 	beq	r3,zero,d034 <___vfiprintf_internal_r+0x1264>
    c930:	04800044 	movi	r18,1
    c934:	d8c01005 	stb	r3,64(sp)
    c938:	d8001d85 	stb	zero,118(sp)
    c93c:	9027883a 	mov	r19,r18
    c940:	dd401004 	addi	r21,sp,64
    c944:	003f1106 	br	c58c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c58c>
    c948:	d9402117 	ldw	r5,132(sp)
    c94c:	d9002017 	ldw	r4,128(sp)
    c950:	d9801a04 	addi	r6,sp,104
    c954:	d9c02b15 	stw	r7,172(sp)
    c958:	dbc02a15 	stw	r15,168(sp)
    c95c:	000bcbc0 	call	bcbc <__sprint_r.part.0>
    c960:	d9c02b17 	ldw	r7,172(sp)
    c964:	dbc02a17 	ldw	r15,168(sp)
    c968:	10006d1e 	bne	r2,zero,cb20 <___vfiprintf_internal_r+0xd50>
    c96c:	d9801b17 	ldw	r6,108(sp)
    c970:	d8801c17 	ldw	r2,112(sp)
    c974:	d811883a 	mov	r8,sp
    c978:	31400044 	addi	r5,r6,1
    c97c:	003e3306 	br	c24c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c24c>
    c980:	d9401b17 	ldw	r5,108(sp)
    c984:	d8801c17 	ldw	r2,112(sp)
    c988:	29000044 	addi	r4,r5,1
    c98c:	d8c01d87 	ldb	r3,118(sp)
    c990:	183e4d26 	beq	r3,zero,c2c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c2c8>
    c994:	00c00044 	movi	r3,1
    c998:	d9401d84 	addi	r5,sp,118
    c99c:	10c5883a 	add	r2,r2,r3
    c9a0:	41400015 	stw	r5,0(r8)
    c9a4:	40c00115 	stw	r3,4(r8)
    c9a8:	d8801c15 	stw	r2,112(sp)
    c9ac:	d9001b15 	stw	r4,108(sp)
    c9b0:	014001c4 	movi	r5,7
    c9b4:	2900a90e 	bge	r5,r4,cc5c <___vfiprintf_internal_r+0xe8c>
    c9b8:	1000da1e 	bne	r2,zero,cd24 <___vfiprintf_internal_r+0xf54>
    c9bc:	7000ab1e 	bne	r14,zero,cc6c <___vfiprintf_internal_r+0xe9c>
    c9c0:	000b883a 	mov	r5,zero
    c9c4:	1809883a 	mov	r4,r3
    c9c8:	d811883a 	mov	r8,sp
    c9cc:	00c02004 	movi	r3,128
    c9d0:	e0fe4d26 	beq	fp,r3,c308 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c308>
    c9d4:	4cf9c83a 	sub	fp,r9,r19
    c9d8:	073e7b0e 	bge	zero,fp,c3c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3c8>
    c9dc:	01c00404 	movi	r7,16
    c9e0:	3f01900e 	bge	r7,fp,d024 <___vfiprintf_internal_r+0x1254>
    c9e4:	00c000b4 	movhi	r3,2
    c9e8:	18eea304 	addi	r3,r3,-17780
    c9ec:	d8c02415 	stw	r3,144(sp)
    c9f0:	034001c4 	movi	r13,7
    c9f4:	00000506 	br	ca0c <___vfiprintf_internal_r+0xc3c>
    c9f8:	29000084 	addi	r4,r5,2
    c9fc:	42000204 	addi	r8,r8,8
    ca00:	180b883a 	mov	r5,r3
    ca04:	e73ffc04 	addi	fp,fp,-16
    ca08:	3f000d0e 	bge	r7,fp,ca40 <___vfiprintf_internal_r+0xc70>
    ca0c:	10800404 	addi	r2,r2,16
    ca10:	28c00044 	addi	r3,r5,1
    ca14:	45c00015 	stw	r23,0(r8)
    ca18:	41c00115 	stw	r7,4(r8)
    ca1c:	d8801c15 	stw	r2,112(sp)
    ca20:	d8c01b15 	stw	r3,108(sp)
    ca24:	68fff40e 	bge	r13,r3,c9f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9f8>
    ca28:	1000101e 	bne	r2,zero,ca6c <___vfiprintf_internal_r+0xc9c>
    ca2c:	e73ffc04 	addi	fp,fp,-16
    ca30:	01000044 	movi	r4,1
    ca34:	000b883a 	mov	r5,zero
    ca38:	d811883a 	mov	r8,sp
    ca3c:	3f3ff316 	blt	r7,fp,ca0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca0c>
    ca40:	da802417 	ldw	r10,144(sp)
    ca44:	1705883a 	add	r2,r2,fp
    ca48:	47000115 	stw	fp,4(r8)
    ca4c:	42800015 	stw	r10,0(r8)
    ca50:	d8801c15 	stw	r2,112(sp)
    ca54:	d9001b15 	stw	r4,108(sp)
    ca58:	00c001c4 	movi	r3,7
    ca5c:	19003616 	blt	r3,r4,cb38 <___vfiprintf_internal_r+0xd68>
    ca60:	42000204 	addi	r8,r8,8
    ca64:	21000044 	addi	r4,r4,1
    ca68:	003e5706 	br	c3c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3c8>
    ca6c:	d9402117 	ldw	r5,132(sp)
    ca70:	d9002017 	ldw	r4,128(sp)
    ca74:	d9801a04 	addi	r6,sp,104
    ca78:	d9c02b15 	stw	r7,172(sp)
    ca7c:	db402a15 	stw	r13,168(sp)
    ca80:	000bcbc0 	call	bcbc <__sprint_r.part.0>
    ca84:	d9c02b17 	ldw	r7,172(sp)
    ca88:	db402a17 	ldw	r13,168(sp)
    ca8c:	1000241e 	bne	r2,zero,cb20 <___vfiprintf_internal_r+0xd50>
    ca90:	d9401b17 	ldw	r5,108(sp)
    ca94:	d8801c17 	ldw	r2,112(sp)
    ca98:	d811883a 	mov	r8,sp
    ca9c:	29000044 	addi	r4,r5,1
    caa0:	003fd806 	br	ca04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca04>
    caa4:	d9401b17 	ldw	r5,108(sp)
    caa8:	00c000b4 	movhi	r3,2
    caac:	18eea704 	addi	r3,r3,-17764
    cab0:	d8c02415 	stw	r3,144(sp)
    cab4:	29400044 	addi	r5,r5,1
    cab8:	d8c02417 	ldw	r3,144(sp)
    cabc:	14c5883a 	add	r2,r2,r19
    cac0:	44c00115 	stw	r19,4(r8)
    cac4:	40c00015 	stw	r3,0(r8)
    cac8:	d8801c15 	stw	r2,112(sp)
    cacc:	d9401b15 	stw	r5,108(sp)
    cad0:	00c001c4 	movi	r3,7
    cad4:	1940070e 	bge	r3,r5,caf4 <___vfiprintf_internal_r+0xd24>
    cad8:	103e4826 	beq	r2,zero,c3fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3fc>
    cadc:	d9402117 	ldw	r5,132(sp)
    cae0:	d9002017 	ldw	r4,128(sp)
    cae4:	d9801a04 	addi	r6,sp,104
    cae8:	000bcbc0 	call	bcbc <__sprint_r.part.0>
    caec:	10000c1e 	bne	r2,zero,cb20 <___vfiprintf_internal_r+0xd50>
    caf0:	d8801c17 	ldw	r2,112(sp)
    caf4:	8c80010e 	bge	r17,r18,cafc <___vfiprintf_internal_r+0xd2c>
    caf8:	9023883a 	mov	r17,r18
    cafc:	da802317 	ldw	r10,140(sp)
    cb00:	5455883a 	add	r10,r10,r17
    cb04:	da802315 	stw	r10,140(sp)
    cb08:	103e4126 	beq	r2,zero,c410 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c410>
    cb0c:	d9402117 	ldw	r5,132(sp)
    cb10:	d9002017 	ldw	r4,128(sp)
    cb14:	d9801a04 	addi	r6,sp,104
    cb18:	000bcbc0 	call	bcbc <__sprint_r.part.0>
    cb1c:	103e3c26 	beq	r2,zero,c410 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c410>
    cb20:	dd002117 	ldw	r20,132(sp)
    cb24:	a080030b 	ldhu	r2,12(r20)
    cb28:	1080100c 	andi	r2,r2,64
    cb2c:	1001231e 	bne	r2,zero,cfbc <___vfiprintf_internal_r+0x11ec>
    cb30:	d8802317 	ldw	r2,140(sp)
    cb34:	003d7b06 	br	c124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c124>
    cb38:	1000991e 	bne	r2,zero,cda0 <___vfiprintf_internal_r+0xfd0>
    cb3c:	00c00044 	movi	r3,1
    cb40:	9805883a 	mov	r2,r19
    cb44:	dd400015 	stw	r21,0(sp)
    cb48:	dcc00115 	stw	r19,4(sp)
    cb4c:	dcc01c15 	stw	r19,112(sp)
    cb50:	d8c01b15 	stw	r3,108(sp)
    cb54:	d811883a 	mov	r8,sp
    cb58:	42000204 	addi	r8,r8,8
    cb5c:	a2c0010c 	andi	r11,r20,4
    cb60:	583fe426 	beq	r11,zero,caf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700caf4>
    cb64:	8ca7c83a 	sub	r19,r17,r18
    cb68:	04ffe20e 	bge	zero,r19,caf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700caf4>
    cb6c:	01c00404 	movi	r7,16
    cb70:	3cffcc0e 	bge	r7,r19,caa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700caa4>
    cb74:	028000b4 	movhi	r10,2
    cb78:	52aea704 	addi	r10,r10,-17764
    cb7c:	d9001b17 	ldw	r4,108(sp)
    cb80:	da802415 	stw	r10,144(sp)
    cb84:	382b883a 	mov	r21,r7
    cb88:	050001c4 	movi	r20,7
    cb8c:	df002017 	ldw	fp,128(sp)
    cb90:	00000506 	br	cba8 <___vfiprintf_internal_r+0xdd8>
    cb94:	21400084 	addi	r5,r4,2
    cb98:	42000204 	addi	r8,r8,8
    cb9c:	1809883a 	mov	r4,r3
    cba0:	9cfffc04 	addi	r19,r19,-16
    cba4:	acffc40e 	bge	r21,r19,cab8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cab8>
    cba8:	10800404 	addi	r2,r2,16
    cbac:	20c00044 	addi	r3,r4,1
    cbb0:	45800015 	stw	r22,0(r8)
    cbb4:	45400115 	stw	r21,4(r8)
    cbb8:	d8801c15 	stw	r2,112(sp)
    cbbc:	d8c01b15 	stw	r3,108(sp)
    cbc0:	a0fff40e 	bge	r20,r3,cb94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb94>
    cbc4:	1000041e 	bne	r2,zero,cbd8 <___vfiprintf_internal_r+0xe08>
    cbc8:	01400044 	movi	r5,1
    cbcc:	0009883a 	mov	r4,zero
    cbd0:	d811883a 	mov	r8,sp
    cbd4:	003ff206 	br	cba0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cba0>
    cbd8:	d9402117 	ldw	r5,132(sp)
    cbdc:	d9801a04 	addi	r6,sp,104
    cbe0:	e009883a 	mov	r4,fp
    cbe4:	000bcbc0 	call	bcbc <__sprint_r.part.0>
    cbe8:	103fcd1e 	bne	r2,zero,cb20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb20>
    cbec:	d9001b17 	ldw	r4,108(sp)
    cbf0:	d8801c17 	ldw	r2,112(sp)
    cbf4:	d811883a 	mov	r8,sp
    cbf8:	21400044 	addi	r5,r4,1
    cbfc:	003fe806 	br	cba0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cba0>
    cc00:	d9402117 	ldw	r5,132(sp)
    cc04:	d9002017 	ldw	r4,128(sp)
    cc08:	d9801a04 	addi	r6,sp,104
    cc0c:	d9c02b15 	stw	r7,172(sp)
    cc10:	db402a15 	stw	r13,168(sp)
    cc14:	000bcbc0 	call	bcbc <__sprint_r.part.0>
    cc18:	d9c02b17 	ldw	r7,172(sp)
    cc1c:	db402a17 	ldw	r13,168(sp)
    cc20:	103fbf1e 	bne	r2,zero,cb20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb20>
    cc24:	d9401b17 	ldw	r5,108(sp)
    cc28:	d8801c17 	ldw	r2,112(sp)
    cc2c:	d811883a 	mov	r8,sp
    cc30:	29800044 	addi	r6,r5,1
    cc34:	003dc406 	br	c348 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c348>
    cc38:	1000d21e 	bne	r2,zero,cf84 <___vfiprintf_internal_r+0x11b4>
    cc3c:	d8c01d87 	ldb	r3,118(sp)
    cc40:	18009526 	beq	r3,zero,ce98 <___vfiprintf_internal_r+0x10c8>
    cc44:	00800044 	movi	r2,1
    cc48:	d8c01d84 	addi	r3,sp,118
    cc4c:	1009883a 	mov	r4,r2
    cc50:	d8c00015 	stw	r3,0(sp)
    cc54:	d8800115 	stw	r2,4(sp)
    cc58:	d811883a 	mov	r8,sp
    cc5c:	200b883a 	mov	r5,r4
    cc60:	42000204 	addi	r8,r8,8
    cc64:	21000044 	addi	r4,r4,1
    cc68:	003d9706 	br	c2c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c2c8>
    cc6c:	d9001d04 	addi	r4,sp,116
    cc70:	00800084 	movi	r2,2
    cc74:	d9000015 	stw	r4,0(sp)
    cc78:	d8800115 	stw	r2,4(sp)
    cc7c:	1809883a 	mov	r4,r3
    cc80:	d811883a 	mov	r8,sp
    cc84:	200b883a 	mov	r5,r4
    cc88:	42000204 	addi	r8,r8,8
    cc8c:	21000044 	addi	r4,r4,1
    cc90:	003f4e06 	br	c9cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9cc>
    cc94:	d8001d85 	stb	zero,118(sp)
    cc98:	48005016 	blt	r9,zero,cddc <___vfiprintf_internal_r+0x100c>
    cc9c:	00ffdfc4 	movi	r3,-129
    cca0:	94c4b03a 	or	r2,r18,r19
    cca4:	a0e8703a 	and	r20,r20,r3
    cca8:	103d4426 	beq	r2,zero,c1bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1bc>
    ccac:	0039883a 	mov	fp,zero
    ccb0:	d9002617 	ldw	r4,152(sp)
    ccb4:	dd401a04 	addi	r21,sp,104
    ccb8:	908003cc 	andi	r2,r18,15
    ccbc:	9806973a 	slli	r3,r19,28
    ccc0:	2085883a 	add	r2,r4,r2
    ccc4:	9024d13a 	srli	r18,r18,4
    ccc8:	10800003 	ldbu	r2,0(r2)
    cccc:	9826d13a 	srli	r19,r19,4
    ccd0:	ad7fffc4 	addi	r21,r21,-1
    ccd4:	1ca4b03a 	or	r18,r3,r18
    ccd8:	a8800005 	stb	r2,0(r21)
    ccdc:	94c4b03a 	or	r2,r18,r19
    cce0:	103ff51e 	bne	r2,zero,ccb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ccb8>
    cce4:	003e5906 	br	c64c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c64c>
    cce8:	d9402117 	ldw	r5,132(sp)
    ccec:	d9002017 	ldw	r4,128(sp)
    ccf0:	d9801a04 	addi	r6,sp,104
    ccf4:	000bcbc0 	call	bcbc <__sprint_r.part.0>
    ccf8:	103f891e 	bne	r2,zero,cb20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb20>
    ccfc:	d8801c17 	ldw	r2,112(sp)
    cd00:	d811883a 	mov	r8,sp
    cd04:	003f9506 	br	cb5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb5c>
    cd08:	d9402117 	ldw	r5,132(sp)
    cd0c:	d9002017 	ldw	r4,128(sp)
    cd10:	d9801a04 	addi	r6,sp,104
    cd14:	000bcbc0 	call	bcbc <__sprint_r.part.0>
    cd18:	103f811e 	bne	r2,zero,cb20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb20>
    cd1c:	d811883a 	mov	r8,sp
    cd20:	003ced06 	br	c0d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0d8>
    cd24:	d9402117 	ldw	r5,132(sp)
    cd28:	d9002017 	ldw	r4,128(sp)
    cd2c:	d9801a04 	addi	r6,sp,104
    cd30:	da402c15 	stw	r9,176(sp)
    cd34:	db802a15 	stw	r14,168(sp)
    cd38:	000bcbc0 	call	bcbc <__sprint_r.part.0>
    cd3c:	da402c17 	ldw	r9,176(sp)
    cd40:	db802a17 	ldw	r14,168(sp)
    cd44:	103f761e 	bne	r2,zero,cb20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb20>
    cd48:	d9401b17 	ldw	r5,108(sp)
    cd4c:	d8801c17 	ldw	r2,112(sp)
    cd50:	d811883a 	mov	r8,sp
    cd54:	29000044 	addi	r4,r5,1
    cd58:	003d5b06 	br	c2c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c2c8>
    cd5c:	d9402117 	ldw	r5,132(sp)
    cd60:	d9002017 	ldw	r4,128(sp)
    cd64:	d9801a04 	addi	r6,sp,104
    cd68:	da402c15 	stw	r9,176(sp)
    cd6c:	000bcbc0 	call	bcbc <__sprint_r.part.0>
    cd70:	da402c17 	ldw	r9,176(sp)
    cd74:	103f6a1e 	bne	r2,zero,cb20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb20>
    cd78:	d9401b17 	ldw	r5,108(sp)
    cd7c:	d8801c17 	ldw	r2,112(sp)
    cd80:	d811883a 	mov	r8,sp
    cd84:	29000044 	addi	r4,r5,1
    cd88:	003f1006 	br	c9cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9cc>
    cd8c:	1000c31e 	bne	r2,zero,d09c <___vfiprintf_internal_r+0x12cc>
    cd90:	01000044 	movi	r4,1
    cd94:	000b883a 	mov	r5,zero
    cd98:	d811883a 	mov	r8,sp
    cd9c:	003f0d06 	br	c9d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9d4>
    cda0:	d9402117 	ldw	r5,132(sp)
    cda4:	d9002017 	ldw	r4,128(sp)
    cda8:	d9801a04 	addi	r6,sp,104
    cdac:	000bcbc0 	call	bcbc <__sprint_r.part.0>
    cdb0:	103f5b1e 	bne	r2,zero,cb20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb20>
    cdb4:	d9001b17 	ldw	r4,108(sp)
    cdb8:	d8801c17 	ldw	r2,112(sp)
    cdbc:	d811883a 	mov	r8,sp
    cdc0:	21000044 	addi	r4,r4,1
    cdc4:	003d8006 	br	c3c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3c8>
    cdc8:	010000b4 	movhi	r4,2
    cdcc:	212e4204 	addi	r4,r4,-18168
    cdd0:	d9002615 	stw	r4,152(sp)
    cdd4:	d8c02215 	stw	r3,136(sp)
    cdd8:	1029883a 	mov	r20,r2
    cddc:	94c4b03a 	or	r2,r18,r19
    cde0:	103fb21e 	bne	r2,zero,ccac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ccac>
    cde4:	0039883a 	mov	fp,zero
    cde8:	00800084 	movi	r2,2
    cdec:	003e6b06 	br	c79c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c79c>
    cdf0:	da802217 	ldw	r10,136(sp)
    cdf4:	d8001d85 	stb	zero,118(sp)
    cdf8:	0027883a 	mov	r19,zero
    cdfc:	50800104 	addi	r2,r10,4
    ce00:	54800017 	ldw	r18,0(r10)
    ce04:	483e6016 	blt	r9,zero,c788 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c788>
    ce08:	00ffdfc4 	movi	r3,-129
    ce0c:	d8802215 	stw	r2,136(sp)
    ce10:	a0e8703a 	and	r20,r20,r3
    ce14:	0039883a 	mov	fp,zero
    ce18:	903ebb26 	beq	r18,zero,c908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c908>
    ce1c:	00800244 	movi	r2,9
    ce20:	14bdee36 	bltu	r2,r18,c5dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5dc>
    ce24:	003eba06 	br	c910 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c910>
    ce28:	00800c04 	movi	r2,48
    ce2c:	d8c01d45 	stb	r3,117(sp)
    ce30:	d8801d05 	stb	r2,116(sp)
    ce34:	d8001d85 	stb	zero,118(sp)
    ce38:	a0c00094 	ori	r3,r20,2
    ce3c:	4800a916 	blt	r9,zero,d0e4 <___vfiprintf_internal_r+0x1314>
    ce40:	00bfdfc4 	movi	r2,-129
    ce44:	a096703a 	and	r11,r20,r2
    ce48:	5d000094 	ori	r20,r11,2
    ce4c:	0039883a 	mov	fp,zero
    ce50:	003f9706 	br	ccb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ccb0>
    ce54:	8025883a 	mov	r18,r16
    ce58:	003c2e06 	br	bf14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf14>
    ce5c:	008000b4 	movhi	r2,2
    ce60:	10ae4204 	addi	r2,r2,-18168
    ce64:	0039883a 	mov	fp,zero
    ce68:	d8802615 	stw	r2,152(sp)
    ce6c:	003f9006 	br	ccb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ccb0>
    ce70:	04a5c83a 	sub	r18,zero,r18
    ce74:	07000b44 	movi	fp,45
    ce78:	9004c03a 	cmpne	r2,r18,zero
    ce7c:	04e7c83a 	sub	r19,zero,r19
    ce80:	df001d85 	stb	fp,118(sp)
    ce84:	98a7c83a 	sub	r19,r19,r2
    ce88:	48009f16 	blt	r9,zero,d108 <___vfiprintf_internal_r+0x1338>
    ce8c:	00bfdfc4 	movi	r2,-129
    ce90:	a0a8703a 	and	r20,r20,r2
    ce94:	003dd006 	br	c5d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5d8>
    ce98:	70004c26 	beq	r14,zero,cfcc <___vfiprintf_internal_r+0x11fc>
    ce9c:	00800084 	movi	r2,2
    cea0:	d8c01d04 	addi	r3,sp,116
    cea4:	d8c00015 	stw	r3,0(sp)
    cea8:	d8800115 	stw	r2,4(sp)
    ceac:	01000044 	movi	r4,1
    ceb0:	d811883a 	mov	r8,sp
    ceb4:	003f7306 	br	cc84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc84>
    ceb8:	a080100c 	andi	r2,r20,64
    cebc:	da802217 	ldw	r10,136(sp)
    cec0:	103e0626 	beq	r2,zero,c6dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c6dc>
    cec4:	5480000f 	ldh	r18,0(r10)
    cec8:	52800104 	addi	r10,r10,4
    cecc:	da802215 	stw	r10,136(sp)
    ced0:	9027d7fa 	srai	r19,r18,31
    ced4:	9805883a 	mov	r2,r19
    ced8:	003db806 	br	c5bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5bc>
    cedc:	a080040c 	andi	r2,r20,16
    cee0:	1000091e 	bne	r2,zero,cf08 <___vfiprintf_internal_r+0x1138>
    cee4:	a2c0100c 	andi	r11,r20,64
    cee8:	58000726 	beq	r11,zero,cf08 <___vfiprintf_internal_r+0x1138>
    ceec:	da802217 	ldw	r10,136(sp)
    cef0:	50800017 	ldw	r2,0(r10)
    cef4:	52800104 	addi	r10,r10,4
    cef8:	da802215 	stw	r10,136(sp)
    cefc:	da802317 	ldw	r10,140(sp)
    cf00:	1280000d 	sth	r10,0(r2)
    cf04:	003be706 	br	bea4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bea4>
    cf08:	da802217 	ldw	r10,136(sp)
    cf0c:	50800017 	ldw	r2,0(r10)
    cf10:	52800104 	addi	r10,r10,4
    cf14:	da802215 	stw	r10,136(sp)
    cf18:	da802317 	ldw	r10,140(sp)
    cf1c:	12800015 	stw	r10,0(r2)
    cf20:	003be006 	br	bea4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bea4>
    cf24:	a080100c 	andi	r2,r20,64
    cf28:	da802217 	ldw	r10,136(sp)
    cf2c:	10003026 	beq	r2,zero,cff0 <___vfiprintf_internal_r+0x1220>
    cf30:	5480000b 	ldhu	r18,0(r10)
    cf34:	52800104 	addi	r10,r10,4
    cf38:	0027883a 	mov	r19,zero
    cf3c:	da802215 	stw	r10,136(sp)
    cf40:	003d8006 	br	c544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c544>
    cf44:	80c00007 	ldb	r3,0(r16)
    cf48:	003c0006 	br	bf4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf4c>
    cf4c:	a080100c 	andi	r2,r20,64
    cf50:	d8001d85 	stb	zero,118(sp)
    cf54:	da802217 	ldw	r10,136(sp)
    cf58:	1000201e 	bne	r2,zero,cfdc <___vfiprintf_internal_r+0x120c>
    cf5c:	50800104 	addi	r2,r10,4
    cf60:	54800017 	ldw	r18,0(r10)
    cf64:	0027883a 	mov	r19,zero
    cf68:	483def0e 	bge	r9,zero,c728 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c728>
    cf6c:	94c6b03a 	or	r3,r18,r19
    cf70:	d8802215 	stw	r2,136(sp)
    cf74:	183d4e1e 	bne	r3,zero,c4b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4b0>
    cf78:	0039883a 	mov	fp,zero
    cf7c:	0005883a 	mov	r2,zero
    cf80:	003e0606 	br	c79c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c79c>
    cf84:	d9402117 	ldw	r5,132(sp)
    cf88:	d9002017 	ldw	r4,128(sp)
    cf8c:	d9801a04 	addi	r6,sp,104
    cf90:	da402c15 	stw	r9,176(sp)
    cf94:	db802a15 	stw	r14,168(sp)
    cf98:	000bcbc0 	call	bcbc <__sprint_r.part.0>
    cf9c:	da402c17 	ldw	r9,176(sp)
    cfa0:	db802a17 	ldw	r14,168(sp)
    cfa4:	103ede1e 	bne	r2,zero,cb20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb20>
    cfa8:	d9401b17 	ldw	r5,108(sp)
    cfac:	d8801c17 	ldw	r2,112(sp)
    cfb0:	d811883a 	mov	r8,sp
    cfb4:	29000044 	addi	r4,r5,1
    cfb8:	003e7406 	br	c98c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c98c>
    cfbc:	00bfffc4 	movi	r2,-1
    cfc0:	003c5806 	br	c124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c124>
    cfc4:	d811883a 	mov	r8,sp
    cfc8:	003ee806 	br	cb6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb6c>
    cfcc:	000b883a 	mov	r5,zero
    cfd0:	01000044 	movi	r4,1
    cfd4:	d811883a 	mov	r8,sp
    cfd8:	003e7c06 	br	c9cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9cc>
    cfdc:	50800104 	addi	r2,r10,4
    cfe0:	5480000b 	ldhu	r18,0(r10)
    cfe4:	0027883a 	mov	r19,zero
    cfe8:	483dcf0e 	bge	r9,zero,c728 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c728>
    cfec:	003fdf06 	br	cf6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf6c>
    cff0:	54800017 	ldw	r18,0(r10)
    cff4:	52800104 	addi	r10,r10,4
    cff8:	0027883a 	mov	r19,zero
    cffc:	da802215 	stw	r10,136(sp)
    d000:	003d5006 	br	c544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c544>
    d004:	50800104 	addi	r2,r10,4
    d008:	5480000b 	ldhu	r18,0(r10)
    d00c:	0027883a 	mov	r19,zero
    d010:	483f7d0e 	bge	r9,zero,ce08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce08>
    d014:	003ddc06 	br	c788 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c788>
    d018:	d8c02215 	stw	r3,136(sp)
    d01c:	0039883a 	mov	fp,zero
    d020:	003ddb06 	br	c790 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c790>
    d024:	028000b4 	movhi	r10,2
    d028:	52aea304 	addi	r10,r10,-17780
    d02c:	da802415 	stw	r10,144(sp)
    d030:	003e8306 	br	ca40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca40>
    d034:	d8801c17 	ldw	r2,112(sp)
    d038:	dd002117 	ldw	r20,132(sp)
    d03c:	103eb926 	beq	r2,zero,cb24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb24>
    d040:	d9002017 	ldw	r4,128(sp)
    d044:	d9801a04 	addi	r6,sp,104
    d048:	a00b883a 	mov	r5,r20
    d04c:	000bcbc0 	call	bcbc <__sprint_r.part.0>
    d050:	003eb406 	br	cb24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb24>
    d054:	80c00043 	ldbu	r3,1(r16)
    d058:	a5000814 	ori	r20,r20,32
    d05c:	84000044 	addi	r16,r16,1
    d060:	18c03fcc 	andi	r3,r3,255
    d064:	18c0201c 	xori	r3,r3,128
    d068:	18ffe004 	addi	r3,r3,-128
    d06c:	003bb706 	br	bf4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf4c>
    d070:	a809883a 	mov	r4,r21
    d074:	d8c02a15 	stw	r3,168(sp)
    d078:	da002b15 	stw	r8,172(sp)
    d07c:	000bc240 	call	bc24 <strlen>
    d080:	d8c02a17 	ldw	r3,168(sp)
    d084:	1027883a 	mov	r19,r2
    d088:	df001d83 	ldbu	fp,118(sp)
    d08c:	d8c02215 	stw	r3,136(sp)
    d090:	0013883a 	mov	r9,zero
    d094:	da002b17 	ldw	r8,172(sp)
    d098:	003c4d06 	br	c1d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1d0>
    d09c:	d9402117 	ldw	r5,132(sp)
    d0a0:	d9002017 	ldw	r4,128(sp)
    d0a4:	d9801a04 	addi	r6,sp,104
    d0a8:	da402c15 	stw	r9,176(sp)
    d0ac:	000bcbc0 	call	bcbc <__sprint_r.part.0>
    d0b0:	da402c17 	ldw	r9,176(sp)
    d0b4:	103e9a1e 	bne	r2,zero,cb20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb20>
    d0b8:	d9401b17 	ldw	r5,108(sp)
    d0bc:	d8801c17 	ldw	r2,112(sp)
    d0c0:	d811883a 	mov	r8,sp
    d0c4:	29000044 	addi	r4,r5,1
    d0c8:	003e4206 	br	c9d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9d4>
    d0cc:	d9401b17 	ldw	r5,108(sp)
    d0d0:	010000b4 	movhi	r4,2
    d0d4:	212ea704 	addi	r4,r4,-17764
    d0d8:	d9002415 	stw	r4,144(sp)
    d0dc:	29400044 	addi	r5,r5,1
    d0e0:	003c6d06 	br	c298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c298>
    d0e4:	0039883a 	mov	fp,zero
    d0e8:	00800084 	movi	r2,2
    d0ec:	10803fcc 	andi	r2,r2,255
    d0f0:	01000044 	movi	r4,1
    d0f4:	11001e26 	beq	r2,r4,d170 <___vfiprintf_internal_r+0x13a0>
    d0f8:	01000084 	movi	r4,2
    d0fc:	11001e1e 	bne	r2,r4,d178 <___vfiprintf_internal_r+0x13a8>
    d100:	1829883a 	mov	r20,r3
    d104:	003eea06 	br	ccb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ccb0>
    d108:	a007883a 	mov	r3,r20
    d10c:	00800044 	movi	r2,1
    d110:	003ff606 	br	d0ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0ec>
    d114:	00800184 	movi	r2,6
    d118:	1240012e 	bgeu	r2,r9,d120 <___vfiprintf_internal_r+0x1350>
    d11c:	1013883a 	mov	r9,r2
    d120:	4827883a 	mov	r19,r9
    d124:	4825883a 	mov	r18,r9
    d128:	48001516 	blt	r9,zero,d180 <___vfiprintf_internal_r+0x13b0>
    d12c:	054000b4 	movhi	r21,2
    d130:	d8c02215 	stw	r3,136(sp)
    d134:	ad6e4704 	addi	r21,r21,-18148
    d138:	003d1406 	br	c58c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c58c>
    d13c:	028000b4 	movhi	r10,2
    d140:	52aea304 	addi	r10,r10,-17780
    d144:	da802415 	stw	r10,144(sp)
    d148:	200d883a 	mov	r6,r4
    d14c:	003c9106 	br	c394 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c394>
    d150:	5021883a 	mov	r16,r10
    d154:	0013883a 	mov	r9,zero
    d158:	003b7d06 	br	bf50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf50>
    d15c:	4827883a 	mov	r19,r9
    d160:	df001d83 	ldbu	fp,118(sp)
    d164:	d8c02215 	stw	r3,136(sp)
    d168:	0013883a 	mov	r9,zero
    d16c:	003c1806 	br	c1d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1d0>
    d170:	1829883a 	mov	r20,r3
    d174:	003d1806 	br	c5d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5d8>
    d178:	1829883a 	mov	r20,r3
    d17c:	003ccd06 	br	c4b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4b4>
    d180:	0025883a 	mov	r18,zero
    d184:	003fe906 	br	d12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d12c>
    d188:	d8802217 	ldw	r2,136(sp)
    d18c:	80c00043 	ldbu	r3,1(r16)
    d190:	5021883a 	mov	r16,r10
    d194:	12400017 	ldw	r9,0(r2)
    d198:	10800104 	addi	r2,r2,4
    d19c:	d8802215 	stw	r2,136(sp)
    d1a0:	483faf0e 	bge	r9,zero,d060 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d060>
    d1a4:	18c03fcc 	andi	r3,r3,255
    d1a8:	18c0201c 	xori	r3,r3,128
    d1ac:	027fffc4 	movi	r9,-1
    d1b0:	18ffe004 	addi	r3,r3,-128
    d1b4:	003b6506 	br	bf4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf4c>
    d1b8:	d9c01d85 	stb	r7,118(sp)
    d1bc:	003ca006 	br	c440 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c440>
    d1c0:	d9c01d85 	stb	r7,118(sp)
    d1c4:	003cad06 	br	c47c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c47c>
    d1c8:	d9c01d85 	stb	r7,118(sp)
    d1cc:	003d7d06 	br	c7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c7c4>
    d1d0:	d9c01d85 	stb	r7,118(sp)
    d1d4:	003d5f06 	br	c754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c754>
    d1d8:	a080004c 	andi	r2,r20,1
    d1dc:	0039883a 	mov	fp,zero
    d1e0:	10000526 	beq	r2,zero,d1f8 <___vfiprintf_internal_r+0x1428>
    d1e4:	00800c04 	movi	r2,48
    d1e8:	d88019c5 	stb	r2,103(sp)
    d1ec:	dcc02717 	ldw	r19,156(sp)
    d1f0:	dd4019c4 	addi	r21,sp,103
    d1f4:	003bf606 	br	c1d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1d0>
    d1f8:	0027883a 	mov	r19,zero
    d1fc:	dd401a04 	addi	r21,sp,104
    d200:	003bf306 	br	c1d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1d0>
    d204:	d9c01d85 	stb	r7,118(sp)
    d208:	003dc806 	br	c92c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c92c>
    d20c:	d9c01d85 	stb	r7,118(sp)
    d210:	003d3a06 	br	c6fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c6fc>
    d214:	d9c01d85 	stb	r7,118(sp)
    d218:	003d2a06 	br	c6c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c6c4>
    d21c:	d9c01d85 	stb	r7,118(sp)
    d220:	003cde06 	br	c59c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c59c>
    d224:	d9c01d85 	stb	r7,118(sp)
    d228:	003cbc06 	br	c51c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c51c>

0000d22c <__vfiprintf_internal>:
    d22c:	008000b4 	movhi	r2,2
    d230:	10b71304 	addi	r2,r2,-9140
    d234:	300f883a 	mov	r7,r6
    d238:	280d883a 	mov	r6,r5
    d23c:	200b883a 	mov	r5,r4
    d240:	11000017 	ldw	r4,0(r2)
    d244:	000bdd01 	jmpi	bdd0 <___vfiprintf_internal_r>

0000d248 <__sbprintf>:
    d248:	2880030b 	ldhu	r2,12(r5)
    d24c:	2ac01917 	ldw	r11,100(r5)
    d250:	2a80038b 	ldhu	r10,14(r5)
    d254:	2a400717 	ldw	r9,28(r5)
    d258:	2a000917 	ldw	r8,36(r5)
    d25c:	defee204 	addi	sp,sp,-1144
    d260:	00c10004 	movi	r3,1024
    d264:	dc011a15 	stw	r16,1128(sp)
    d268:	10bfff4c 	andi	r2,r2,65533
    d26c:	2821883a 	mov	r16,r5
    d270:	d8cb883a 	add	r5,sp,r3
    d274:	dc811c15 	stw	r18,1136(sp)
    d278:	dc411b15 	stw	r17,1132(sp)
    d27c:	dfc11d15 	stw	ra,1140(sp)
    d280:	2025883a 	mov	r18,r4
    d284:	d881030d 	sth	r2,1036(sp)
    d288:	dac11915 	stw	r11,1124(sp)
    d28c:	da81038d 	sth	r10,1038(sp)
    d290:	da410715 	stw	r9,1052(sp)
    d294:	da010915 	stw	r8,1060(sp)
    d298:	dec10015 	stw	sp,1024(sp)
    d29c:	dec10415 	stw	sp,1040(sp)
    d2a0:	d8c10215 	stw	r3,1032(sp)
    d2a4:	d8c10515 	stw	r3,1044(sp)
    d2a8:	d8010615 	stw	zero,1048(sp)
    d2ac:	000bdd00 	call	bdd0 <___vfiprintf_internal_r>
    d2b0:	1023883a 	mov	r17,r2
    d2b4:	10000416 	blt	r2,zero,d2c8 <__sbprintf+0x80>
    d2b8:	d9410004 	addi	r5,sp,1024
    d2bc:	9009883a 	mov	r4,r18
    d2c0:	00091680 	call	9168 <_fflush_r>
    d2c4:	10000d1e 	bne	r2,zero,d2fc <__sbprintf+0xb4>
    d2c8:	d881030b 	ldhu	r2,1036(sp)
    d2cc:	1080100c 	andi	r2,r2,64
    d2d0:	10000326 	beq	r2,zero,d2e0 <__sbprintf+0x98>
    d2d4:	8080030b 	ldhu	r2,12(r16)
    d2d8:	10801014 	ori	r2,r2,64
    d2dc:	8080030d 	sth	r2,12(r16)
    d2e0:	8805883a 	mov	r2,r17
    d2e4:	dfc11d17 	ldw	ra,1140(sp)
    d2e8:	dc811c17 	ldw	r18,1136(sp)
    d2ec:	dc411b17 	ldw	r17,1132(sp)
    d2f0:	dc011a17 	ldw	r16,1128(sp)
    d2f4:	dec11e04 	addi	sp,sp,1144
    d2f8:	f800283a 	ret
    d2fc:	047fffc4 	movi	r17,-1
    d300:	003ff106 	br	d2c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d2c8>

0000d304 <_write_r>:
    d304:	defffd04 	addi	sp,sp,-12
    d308:	2805883a 	mov	r2,r5
    d30c:	dc000015 	stw	r16,0(sp)
    d310:	040000b4 	movhi	r16,2
    d314:	dc400115 	stw	r17,4(sp)
    d318:	300b883a 	mov	r5,r6
    d31c:	843f2104 	addi	r16,r16,-892
    d320:	2023883a 	mov	r17,r4
    d324:	380d883a 	mov	r6,r7
    d328:	1009883a 	mov	r4,r2
    d32c:	dfc00215 	stw	ra,8(sp)
    d330:	80000015 	stw	zero,0(r16)
    d334:	000fc440 	call	fc44 <write>
    d338:	00ffffc4 	movi	r3,-1
    d33c:	10c00526 	beq	r2,r3,d354 <_write_r+0x50>
    d340:	dfc00217 	ldw	ra,8(sp)
    d344:	dc400117 	ldw	r17,4(sp)
    d348:	dc000017 	ldw	r16,0(sp)
    d34c:	dec00304 	addi	sp,sp,12
    d350:	f800283a 	ret
    d354:	80c00017 	ldw	r3,0(r16)
    d358:	183ff926 	beq	r3,zero,d340 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d340>
    d35c:	88c00015 	stw	r3,0(r17)
    d360:	003ff706 	br	d340 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d340>

0000d364 <_close_r>:
    d364:	defffd04 	addi	sp,sp,-12
    d368:	dc000015 	stw	r16,0(sp)
    d36c:	040000b4 	movhi	r16,2
    d370:	dc400115 	stw	r17,4(sp)
    d374:	843f2104 	addi	r16,r16,-892
    d378:	2023883a 	mov	r17,r4
    d37c:	2809883a 	mov	r4,r5
    d380:	dfc00215 	stw	ra,8(sp)
    d384:	80000015 	stw	zero,0(r16)
    d388:	000f43c0 	call	f43c <close>
    d38c:	00ffffc4 	movi	r3,-1
    d390:	10c00526 	beq	r2,r3,d3a8 <_close_r+0x44>
    d394:	dfc00217 	ldw	ra,8(sp)
    d398:	dc400117 	ldw	r17,4(sp)
    d39c:	dc000017 	ldw	r16,0(sp)
    d3a0:	dec00304 	addi	sp,sp,12
    d3a4:	f800283a 	ret
    d3a8:	80c00017 	ldw	r3,0(r16)
    d3ac:	183ff926 	beq	r3,zero,d394 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d394>
    d3b0:	88c00015 	stw	r3,0(r17)
    d3b4:	003ff706 	br	d394 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d394>

0000d3b8 <_calloc_r>:
    d3b8:	298b383a 	mul	r5,r5,r6
    d3bc:	defffe04 	addi	sp,sp,-8
    d3c0:	dfc00115 	stw	ra,4(sp)
    d3c4:	dc000015 	stw	r16,0(sp)
    d3c8:	0009de80 	call	9de8 <_malloc_r>
    d3cc:	10002926 	beq	r2,zero,d474 <_calloc_r+0xbc>
    d3d0:	11bfff17 	ldw	r6,-4(r2)
    d3d4:	1021883a 	mov	r16,r2
    d3d8:	00bfff04 	movi	r2,-4
    d3dc:	308c703a 	and	r6,r6,r2
    d3e0:	00c00904 	movi	r3,36
    d3e4:	308d883a 	add	r6,r6,r2
    d3e8:	19801636 	bltu	r3,r6,d444 <_calloc_r+0x8c>
    d3ec:	008004c4 	movi	r2,19
    d3f0:	11800b2e 	bgeu	r2,r6,d420 <_calloc_r+0x68>
    d3f4:	80000015 	stw	zero,0(r16)
    d3f8:	80000115 	stw	zero,4(r16)
    d3fc:	008006c4 	movi	r2,27
    d400:	11801a2e 	bgeu	r2,r6,d46c <_calloc_r+0xb4>
    d404:	80000215 	stw	zero,8(r16)
    d408:	80000315 	stw	zero,12(r16)
    d40c:	30c0151e 	bne	r6,r3,d464 <_calloc_r+0xac>
    d410:	80000415 	stw	zero,16(r16)
    d414:	80800604 	addi	r2,r16,24
    d418:	80000515 	stw	zero,20(r16)
    d41c:	00000106 	br	d424 <_calloc_r+0x6c>
    d420:	8005883a 	mov	r2,r16
    d424:	10000015 	stw	zero,0(r2)
    d428:	10000115 	stw	zero,4(r2)
    d42c:	10000215 	stw	zero,8(r2)
    d430:	8005883a 	mov	r2,r16
    d434:	dfc00117 	ldw	ra,4(sp)
    d438:	dc000017 	ldw	r16,0(sp)
    d43c:	dec00204 	addi	sp,sp,8
    d440:	f800283a 	ret
    d444:	000b883a 	mov	r5,zero
    d448:	8009883a 	mov	r4,r16
    d44c:	000a8200 	call	a820 <memset>
    d450:	8005883a 	mov	r2,r16
    d454:	dfc00117 	ldw	ra,4(sp)
    d458:	dc000017 	ldw	r16,0(sp)
    d45c:	dec00204 	addi	sp,sp,8
    d460:	f800283a 	ret
    d464:	80800404 	addi	r2,r16,16
    d468:	003fee06 	br	d424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d424>
    d46c:	80800204 	addi	r2,r16,8
    d470:	003fec06 	br	d424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d424>
    d474:	0005883a 	mov	r2,zero
    d478:	003fee06 	br	d434 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d434>

0000d47c <_fclose_r>:
    d47c:	28003926 	beq	r5,zero,d564 <_fclose_r+0xe8>
    d480:	defffc04 	addi	sp,sp,-16
    d484:	dc400115 	stw	r17,4(sp)
    d488:	dc000015 	stw	r16,0(sp)
    d48c:	dfc00315 	stw	ra,12(sp)
    d490:	dc800215 	stw	r18,8(sp)
    d494:	2023883a 	mov	r17,r4
    d498:	2821883a 	mov	r16,r5
    d49c:	20000226 	beq	r4,zero,d4a8 <_fclose_r+0x2c>
    d4a0:	20800e17 	ldw	r2,56(r4)
    d4a4:	10002726 	beq	r2,zero,d544 <_fclose_r+0xc8>
    d4a8:	8080030f 	ldh	r2,12(r16)
    d4ac:	1000071e 	bne	r2,zero,d4cc <_fclose_r+0x50>
    d4b0:	0005883a 	mov	r2,zero
    d4b4:	dfc00317 	ldw	ra,12(sp)
    d4b8:	dc800217 	ldw	r18,8(sp)
    d4bc:	dc400117 	ldw	r17,4(sp)
    d4c0:	dc000017 	ldw	r16,0(sp)
    d4c4:	dec00404 	addi	sp,sp,16
    d4c8:	f800283a 	ret
    d4cc:	800b883a 	mov	r5,r16
    d4d0:	8809883a 	mov	r4,r17
    d4d4:	0008f4c0 	call	8f4c <__sflush_r>
    d4d8:	1025883a 	mov	r18,r2
    d4dc:	80800b17 	ldw	r2,44(r16)
    d4e0:	10000426 	beq	r2,zero,d4f4 <_fclose_r+0x78>
    d4e4:	81400717 	ldw	r5,28(r16)
    d4e8:	8809883a 	mov	r4,r17
    d4ec:	103ee83a 	callr	r2
    d4f0:	10001616 	blt	r2,zero,d54c <_fclose_r+0xd0>
    d4f4:	8080030b 	ldhu	r2,12(r16)
    d4f8:	1080200c 	andi	r2,r2,128
    d4fc:	1000151e 	bne	r2,zero,d554 <_fclose_r+0xd8>
    d500:	81400c17 	ldw	r5,48(r16)
    d504:	28000526 	beq	r5,zero,d51c <_fclose_r+0xa0>
    d508:	80801004 	addi	r2,r16,64
    d50c:	28800226 	beq	r5,r2,d518 <_fclose_r+0x9c>
    d510:	8809883a 	mov	r4,r17
    d514:	00096b80 	call	96b8 <_free_r>
    d518:	80000c15 	stw	zero,48(r16)
    d51c:	81401117 	ldw	r5,68(r16)
    d520:	28000326 	beq	r5,zero,d530 <_fclose_r+0xb4>
    d524:	8809883a 	mov	r4,r17
    d528:	00096b80 	call	96b8 <_free_r>
    d52c:	80001115 	stw	zero,68(r16)
    d530:	00095540 	call	9554 <__sfp_lock_acquire>
    d534:	8000030d 	sth	zero,12(r16)
    d538:	00095580 	call	9558 <__sfp_lock_release>
    d53c:	9005883a 	mov	r2,r18
    d540:	003fdc06 	br	d4b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4b4>
    d544:	00095440 	call	9544 <__sinit>
    d548:	003fd706 	br	d4a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4a8>
    d54c:	04bfffc4 	movi	r18,-1
    d550:	003fe806 	br	d4f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4f4>
    d554:	81400417 	ldw	r5,16(r16)
    d558:	8809883a 	mov	r4,r17
    d55c:	00096b80 	call	96b8 <_free_r>
    d560:	003fe706 	br	d500 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d500>
    d564:	0005883a 	mov	r2,zero
    d568:	f800283a 	ret

0000d56c <fclose>:
    d56c:	008000b4 	movhi	r2,2
    d570:	10b71304 	addi	r2,r2,-9140
    d574:	200b883a 	mov	r5,r4
    d578:	11000017 	ldw	r4,0(r2)
    d57c:	000d47c1 	jmpi	d47c <_fclose_r>

0000d580 <__fputwc>:
    d580:	defff804 	addi	sp,sp,-32
    d584:	dcc00415 	stw	r19,16(sp)
    d588:	dc800315 	stw	r18,12(sp)
    d58c:	dc000115 	stw	r16,4(sp)
    d590:	dfc00715 	stw	ra,28(sp)
    d594:	dd400615 	stw	r21,24(sp)
    d598:	dd000515 	stw	r20,20(sp)
    d59c:	dc400215 	stw	r17,8(sp)
    d5a0:	2027883a 	mov	r19,r4
    d5a4:	2825883a 	mov	r18,r5
    d5a8:	3021883a 	mov	r16,r6
    d5ac:	0009bd80 	call	9bd8 <__locale_mb_cur_max>
    d5b0:	00c00044 	movi	r3,1
    d5b4:	10c03e26 	beq	r2,r3,d6b0 <__fputwc+0x130>
    d5b8:	81c01704 	addi	r7,r16,92
    d5bc:	900d883a 	mov	r6,r18
    d5c0:	d80b883a 	mov	r5,sp
    d5c4:	9809883a 	mov	r4,r19
    d5c8:	000e5cc0 	call	e5cc <_wcrtomb_r>
    d5cc:	1029883a 	mov	r20,r2
    d5d0:	00bfffc4 	movi	r2,-1
    d5d4:	a0802026 	beq	r20,r2,d658 <__fputwc+0xd8>
    d5d8:	d9400003 	ldbu	r5,0(sp)
    d5dc:	a0001c26 	beq	r20,zero,d650 <__fputwc+0xd0>
    d5e0:	0023883a 	mov	r17,zero
    d5e4:	05400284 	movi	r21,10
    d5e8:	00000906 	br	d610 <__fputwc+0x90>
    d5ec:	80800017 	ldw	r2,0(r16)
    d5f0:	11400005 	stb	r5,0(r2)
    d5f4:	80c00017 	ldw	r3,0(r16)
    d5f8:	18c00044 	addi	r3,r3,1
    d5fc:	80c00015 	stw	r3,0(r16)
    d600:	8c400044 	addi	r17,r17,1
    d604:	dc45883a 	add	r2,sp,r17
    d608:	8d00112e 	bgeu	r17,r20,d650 <__fputwc+0xd0>
    d60c:	11400003 	ldbu	r5,0(r2)
    d610:	80c00217 	ldw	r3,8(r16)
    d614:	18ffffc4 	addi	r3,r3,-1
    d618:	80c00215 	stw	r3,8(r16)
    d61c:	183ff30e 	bge	r3,zero,d5ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d5ec>
    d620:	80800617 	ldw	r2,24(r16)
    d624:	18801916 	blt	r3,r2,d68c <__fputwc+0x10c>
    d628:	80800017 	ldw	r2,0(r16)
    d62c:	11400005 	stb	r5,0(r2)
    d630:	80800017 	ldw	r2,0(r16)
    d634:	10c00003 	ldbu	r3,0(r2)
    d638:	10800044 	addi	r2,r2,1
    d63c:	1d402326 	beq	r3,r21,d6cc <__fputwc+0x14c>
    d640:	80800015 	stw	r2,0(r16)
    d644:	8c400044 	addi	r17,r17,1
    d648:	dc45883a 	add	r2,sp,r17
    d64c:	8d3fef36 	bltu	r17,r20,d60c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d60c>
    d650:	9005883a 	mov	r2,r18
    d654:	00000406 	br	d668 <__fputwc+0xe8>
    d658:	80c0030b 	ldhu	r3,12(r16)
    d65c:	a005883a 	mov	r2,r20
    d660:	18c01014 	ori	r3,r3,64
    d664:	80c0030d 	sth	r3,12(r16)
    d668:	dfc00717 	ldw	ra,28(sp)
    d66c:	dd400617 	ldw	r21,24(sp)
    d670:	dd000517 	ldw	r20,20(sp)
    d674:	dcc00417 	ldw	r19,16(sp)
    d678:	dc800317 	ldw	r18,12(sp)
    d67c:	dc400217 	ldw	r17,8(sp)
    d680:	dc000117 	ldw	r16,4(sp)
    d684:	dec00804 	addi	sp,sp,32
    d688:	f800283a 	ret
    d68c:	800d883a 	mov	r6,r16
    d690:	29403fcc 	andi	r5,r5,255
    d694:	9809883a 	mov	r4,r19
    d698:	000e4740 	call	e474 <__swbuf_r>
    d69c:	10bfffe0 	cmpeqi	r2,r2,-1
    d6a0:	10803fcc 	andi	r2,r2,255
    d6a4:	103fd626 	beq	r2,zero,d600 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d600>
    d6a8:	00bfffc4 	movi	r2,-1
    d6ac:	003fee06 	br	d668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d668>
    d6b0:	90ffffc4 	addi	r3,r18,-1
    d6b4:	01003f84 	movi	r4,254
    d6b8:	20ffbf36 	bltu	r4,r3,d5b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d5b8>
    d6bc:	900b883a 	mov	r5,r18
    d6c0:	dc800005 	stb	r18,0(sp)
    d6c4:	1029883a 	mov	r20,r2
    d6c8:	003fc506 	br	d5e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d5e0>
    d6cc:	800d883a 	mov	r6,r16
    d6d0:	a80b883a 	mov	r5,r21
    d6d4:	9809883a 	mov	r4,r19
    d6d8:	000e4740 	call	e474 <__swbuf_r>
    d6dc:	10bfffe0 	cmpeqi	r2,r2,-1
    d6e0:	003fef06 	br	d6a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d6a0>

0000d6e4 <_fputwc_r>:
    d6e4:	3080030b 	ldhu	r2,12(r6)
    d6e8:	10c8000c 	andi	r3,r2,8192
    d6ec:	1800051e 	bne	r3,zero,d704 <_fputwc_r+0x20>
    d6f0:	30c01917 	ldw	r3,100(r6)
    d6f4:	10880014 	ori	r2,r2,8192
    d6f8:	3080030d 	sth	r2,12(r6)
    d6fc:	18880014 	ori	r2,r3,8192
    d700:	30801915 	stw	r2,100(r6)
    d704:	000d5801 	jmpi	d580 <__fputwc>

0000d708 <fputwc>:
    d708:	008000b4 	movhi	r2,2
    d70c:	defffc04 	addi	sp,sp,-16
    d710:	10b71304 	addi	r2,r2,-9140
    d714:	dc000115 	stw	r16,4(sp)
    d718:	14000017 	ldw	r16,0(r2)
    d71c:	dc400215 	stw	r17,8(sp)
    d720:	dfc00315 	stw	ra,12(sp)
    d724:	2023883a 	mov	r17,r4
    d728:	80000226 	beq	r16,zero,d734 <fputwc+0x2c>
    d72c:	80800e17 	ldw	r2,56(r16)
    d730:	10001026 	beq	r2,zero,d774 <fputwc+0x6c>
    d734:	2880030b 	ldhu	r2,12(r5)
    d738:	10c8000c 	andi	r3,r2,8192
    d73c:	1800051e 	bne	r3,zero,d754 <fputwc+0x4c>
    d740:	28c01917 	ldw	r3,100(r5)
    d744:	10880014 	ori	r2,r2,8192
    d748:	2880030d 	sth	r2,12(r5)
    d74c:	18880014 	ori	r2,r3,8192
    d750:	28801915 	stw	r2,100(r5)
    d754:	280d883a 	mov	r6,r5
    d758:	8009883a 	mov	r4,r16
    d75c:	880b883a 	mov	r5,r17
    d760:	dfc00317 	ldw	ra,12(sp)
    d764:	dc400217 	ldw	r17,8(sp)
    d768:	dc000117 	ldw	r16,4(sp)
    d76c:	dec00404 	addi	sp,sp,16
    d770:	000d5801 	jmpi	d580 <__fputwc>
    d774:	8009883a 	mov	r4,r16
    d778:	d9400015 	stw	r5,0(sp)
    d77c:	00095440 	call	9544 <__sinit>
    d780:	d9400017 	ldw	r5,0(sp)
    d784:	003feb06 	br	d734 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d734>

0000d788 <_fstat_r>:
    d788:	defffd04 	addi	sp,sp,-12
    d78c:	2805883a 	mov	r2,r5
    d790:	dc000015 	stw	r16,0(sp)
    d794:	040000b4 	movhi	r16,2
    d798:	dc400115 	stw	r17,4(sp)
    d79c:	843f2104 	addi	r16,r16,-892
    d7a0:	2023883a 	mov	r17,r4
    d7a4:	300b883a 	mov	r5,r6
    d7a8:	1009883a 	mov	r4,r2
    d7ac:	dfc00215 	stw	ra,8(sp)
    d7b0:	80000015 	stw	zero,0(r16)
    d7b4:	000f5740 	call	f574 <fstat>
    d7b8:	00ffffc4 	movi	r3,-1
    d7bc:	10c00526 	beq	r2,r3,d7d4 <_fstat_r+0x4c>
    d7c0:	dfc00217 	ldw	ra,8(sp)
    d7c4:	dc400117 	ldw	r17,4(sp)
    d7c8:	dc000017 	ldw	r16,0(sp)
    d7cc:	dec00304 	addi	sp,sp,12
    d7d0:	f800283a 	ret
    d7d4:	80c00017 	ldw	r3,0(r16)
    d7d8:	183ff926 	beq	r3,zero,d7c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d7c0>
    d7dc:	88c00015 	stw	r3,0(r17)
    d7e0:	003ff706 	br	d7c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d7c0>

0000d7e4 <__sfvwrite_r>:
    d7e4:	30800217 	ldw	r2,8(r6)
    d7e8:	10006726 	beq	r2,zero,d988 <__sfvwrite_r+0x1a4>
    d7ec:	28c0030b 	ldhu	r3,12(r5)
    d7f0:	defff404 	addi	sp,sp,-48
    d7f4:	dd400715 	stw	r21,28(sp)
    d7f8:	dd000615 	stw	r20,24(sp)
    d7fc:	dc000215 	stw	r16,8(sp)
    d800:	dfc00b15 	stw	ra,44(sp)
    d804:	df000a15 	stw	fp,40(sp)
    d808:	ddc00915 	stw	r23,36(sp)
    d80c:	dd800815 	stw	r22,32(sp)
    d810:	dcc00515 	stw	r19,20(sp)
    d814:	dc800415 	stw	r18,16(sp)
    d818:	dc400315 	stw	r17,12(sp)
    d81c:	1880020c 	andi	r2,r3,8
    d820:	2821883a 	mov	r16,r5
    d824:	202b883a 	mov	r21,r4
    d828:	3029883a 	mov	r20,r6
    d82c:	10002726 	beq	r2,zero,d8cc <__sfvwrite_r+0xe8>
    d830:	28800417 	ldw	r2,16(r5)
    d834:	10002526 	beq	r2,zero,d8cc <__sfvwrite_r+0xe8>
    d838:	1880008c 	andi	r2,r3,2
    d83c:	a4400017 	ldw	r17,0(r20)
    d840:	10002a26 	beq	r2,zero,d8ec <__sfvwrite_r+0x108>
    d844:	05a00034 	movhi	r22,32768
    d848:	0027883a 	mov	r19,zero
    d84c:	0025883a 	mov	r18,zero
    d850:	b5bf0004 	addi	r22,r22,-1024
    d854:	980d883a 	mov	r6,r19
    d858:	a809883a 	mov	r4,r21
    d85c:	90004626 	beq	r18,zero,d978 <__sfvwrite_r+0x194>
    d860:	900f883a 	mov	r7,r18
    d864:	b480022e 	bgeu	r22,r18,d870 <__sfvwrite_r+0x8c>
    d868:	01e00034 	movhi	r7,32768
    d86c:	39ff0004 	addi	r7,r7,-1024
    d870:	80800917 	ldw	r2,36(r16)
    d874:	81400717 	ldw	r5,28(r16)
    d878:	103ee83a 	callr	r2
    d87c:	0080570e 	bge	zero,r2,d9dc <__sfvwrite_r+0x1f8>
    d880:	a0c00217 	ldw	r3,8(r20)
    d884:	98a7883a 	add	r19,r19,r2
    d888:	90a5c83a 	sub	r18,r18,r2
    d88c:	1885c83a 	sub	r2,r3,r2
    d890:	a0800215 	stw	r2,8(r20)
    d894:	103fef1e 	bne	r2,zero,d854 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d854>
    d898:	0005883a 	mov	r2,zero
    d89c:	dfc00b17 	ldw	ra,44(sp)
    d8a0:	df000a17 	ldw	fp,40(sp)
    d8a4:	ddc00917 	ldw	r23,36(sp)
    d8a8:	dd800817 	ldw	r22,32(sp)
    d8ac:	dd400717 	ldw	r21,28(sp)
    d8b0:	dd000617 	ldw	r20,24(sp)
    d8b4:	dcc00517 	ldw	r19,20(sp)
    d8b8:	dc800417 	ldw	r18,16(sp)
    d8bc:	dc400317 	ldw	r17,12(sp)
    d8c0:	dc000217 	ldw	r16,8(sp)
    d8c4:	dec00c04 	addi	sp,sp,48
    d8c8:	f800283a 	ret
    d8cc:	800b883a 	mov	r5,r16
    d8d0:	a809883a 	mov	r4,r21
    d8d4:	00075700 	call	7570 <__swsetup_r>
    d8d8:	1000eb1e 	bne	r2,zero,dc88 <__sfvwrite_r+0x4a4>
    d8dc:	80c0030b 	ldhu	r3,12(r16)
    d8e0:	a4400017 	ldw	r17,0(r20)
    d8e4:	1880008c 	andi	r2,r3,2
    d8e8:	103fd61e 	bne	r2,zero,d844 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d844>
    d8ec:	1880004c 	andi	r2,r3,1
    d8f0:	10003f1e 	bne	r2,zero,d9f0 <__sfvwrite_r+0x20c>
    d8f4:	0039883a 	mov	fp,zero
    d8f8:	0025883a 	mov	r18,zero
    d8fc:	90001a26 	beq	r18,zero,d968 <__sfvwrite_r+0x184>
    d900:	1880800c 	andi	r2,r3,512
    d904:	84c00217 	ldw	r19,8(r16)
    d908:	10002126 	beq	r2,zero,d990 <__sfvwrite_r+0x1ac>
    d90c:	982f883a 	mov	r23,r19
    d910:	94c09336 	bltu	r18,r19,db60 <__sfvwrite_r+0x37c>
    d914:	1881200c 	andi	r2,r3,1152
    d918:	10009e1e 	bne	r2,zero,db94 <__sfvwrite_r+0x3b0>
    d91c:	81000017 	ldw	r4,0(r16)
    d920:	b80d883a 	mov	r6,r23
    d924:	e00b883a 	mov	r5,fp
    d928:	000dd540 	call	dd54 <memmove>
    d92c:	80c00217 	ldw	r3,8(r16)
    d930:	81000017 	ldw	r4,0(r16)
    d934:	9005883a 	mov	r2,r18
    d938:	1ce7c83a 	sub	r19,r3,r19
    d93c:	25cf883a 	add	r7,r4,r23
    d940:	84c00215 	stw	r19,8(r16)
    d944:	81c00015 	stw	r7,0(r16)
    d948:	a0c00217 	ldw	r3,8(r20)
    d94c:	e0b9883a 	add	fp,fp,r2
    d950:	90a5c83a 	sub	r18,r18,r2
    d954:	18a7c83a 	sub	r19,r3,r2
    d958:	a4c00215 	stw	r19,8(r20)
    d95c:	983fce26 	beq	r19,zero,d898 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d898>
    d960:	80c0030b 	ldhu	r3,12(r16)
    d964:	903fe61e 	bne	r18,zero,d900 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d900>
    d968:	8f000017 	ldw	fp,0(r17)
    d96c:	8c800117 	ldw	r18,4(r17)
    d970:	8c400204 	addi	r17,r17,8
    d974:	003fe106 	br	d8fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8fc>
    d978:	8cc00017 	ldw	r19,0(r17)
    d97c:	8c800117 	ldw	r18,4(r17)
    d980:	8c400204 	addi	r17,r17,8
    d984:	003fb306 	br	d854 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d854>
    d988:	0005883a 	mov	r2,zero
    d98c:	f800283a 	ret
    d990:	81000017 	ldw	r4,0(r16)
    d994:	80800417 	ldw	r2,16(r16)
    d998:	11005736 	bltu	r2,r4,daf8 <__sfvwrite_r+0x314>
    d99c:	85c00517 	ldw	r23,20(r16)
    d9a0:	95c05536 	bltu	r18,r23,daf8 <__sfvwrite_r+0x314>
    d9a4:	00a00034 	movhi	r2,32768
    d9a8:	10bfffc4 	addi	r2,r2,-1
    d9ac:	9009883a 	mov	r4,r18
    d9b0:	1480012e 	bgeu	r2,r18,d9b8 <__sfvwrite_r+0x1d4>
    d9b4:	1009883a 	mov	r4,r2
    d9b8:	b80b883a 	mov	r5,r23
    d9bc:	00027680 	call	2768 <__divsi3>
    d9c0:	15cf383a 	mul	r7,r2,r23
    d9c4:	81400717 	ldw	r5,28(r16)
    d9c8:	80800917 	ldw	r2,36(r16)
    d9cc:	e00d883a 	mov	r6,fp
    d9d0:	a809883a 	mov	r4,r21
    d9d4:	103ee83a 	callr	r2
    d9d8:	00bfdb16 	blt	zero,r2,d948 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d948>
    d9dc:	8080030b 	ldhu	r2,12(r16)
    d9e0:	10801014 	ori	r2,r2,64
    d9e4:	8080030d 	sth	r2,12(r16)
    d9e8:	00bfffc4 	movi	r2,-1
    d9ec:	003fab06 	br	d89c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d89c>
    d9f0:	0027883a 	mov	r19,zero
    d9f4:	0011883a 	mov	r8,zero
    d9f8:	0039883a 	mov	fp,zero
    d9fc:	0025883a 	mov	r18,zero
    da00:	90001f26 	beq	r18,zero,da80 <__sfvwrite_r+0x29c>
    da04:	40005a26 	beq	r8,zero,db70 <__sfvwrite_r+0x38c>
    da08:	982d883a 	mov	r22,r19
    da0c:	94c0012e 	bgeu	r18,r19,da14 <__sfvwrite_r+0x230>
    da10:	902d883a 	mov	r22,r18
    da14:	81000017 	ldw	r4,0(r16)
    da18:	80800417 	ldw	r2,16(r16)
    da1c:	b02f883a 	mov	r23,r22
    da20:	81c00517 	ldw	r7,20(r16)
    da24:	1100032e 	bgeu	r2,r4,da34 <__sfvwrite_r+0x250>
    da28:	80c00217 	ldw	r3,8(r16)
    da2c:	38c7883a 	add	r3,r7,r3
    da30:	1d801816 	blt	r3,r22,da94 <__sfvwrite_r+0x2b0>
    da34:	b1c03e16 	blt	r22,r7,db30 <__sfvwrite_r+0x34c>
    da38:	80800917 	ldw	r2,36(r16)
    da3c:	81400717 	ldw	r5,28(r16)
    da40:	e00d883a 	mov	r6,fp
    da44:	da000115 	stw	r8,4(sp)
    da48:	a809883a 	mov	r4,r21
    da4c:	103ee83a 	callr	r2
    da50:	102f883a 	mov	r23,r2
    da54:	da000117 	ldw	r8,4(sp)
    da58:	00bfe00e 	bge	zero,r2,d9dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9dc>
    da5c:	9de7c83a 	sub	r19,r19,r23
    da60:	98001f26 	beq	r19,zero,dae0 <__sfvwrite_r+0x2fc>
    da64:	a0800217 	ldw	r2,8(r20)
    da68:	e5f9883a 	add	fp,fp,r23
    da6c:	95e5c83a 	sub	r18,r18,r23
    da70:	15efc83a 	sub	r23,r2,r23
    da74:	a5c00215 	stw	r23,8(r20)
    da78:	b83f8726 	beq	r23,zero,d898 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d898>
    da7c:	903fe11e 	bne	r18,zero,da04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da04>
    da80:	8f000017 	ldw	fp,0(r17)
    da84:	8c800117 	ldw	r18,4(r17)
    da88:	0011883a 	mov	r8,zero
    da8c:	8c400204 	addi	r17,r17,8
    da90:	003fdb06 	br	da00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da00>
    da94:	180d883a 	mov	r6,r3
    da98:	e00b883a 	mov	r5,fp
    da9c:	da000115 	stw	r8,4(sp)
    daa0:	d8c00015 	stw	r3,0(sp)
    daa4:	000dd540 	call	dd54 <memmove>
    daa8:	d8c00017 	ldw	r3,0(sp)
    daac:	80800017 	ldw	r2,0(r16)
    dab0:	800b883a 	mov	r5,r16
    dab4:	a809883a 	mov	r4,r21
    dab8:	10c5883a 	add	r2,r2,r3
    dabc:	80800015 	stw	r2,0(r16)
    dac0:	d8c00015 	stw	r3,0(sp)
    dac4:	00091680 	call	9168 <_fflush_r>
    dac8:	d8c00017 	ldw	r3,0(sp)
    dacc:	da000117 	ldw	r8,4(sp)
    dad0:	103fc21e 	bne	r2,zero,d9dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9dc>
    dad4:	182f883a 	mov	r23,r3
    dad8:	9de7c83a 	sub	r19,r19,r23
    dadc:	983fe11e 	bne	r19,zero,da64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da64>
    dae0:	800b883a 	mov	r5,r16
    dae4:	a809883a 	mov	r4,r21
    dae8:	00091680 	call	9168 <_fflush_r>
    daec:	103fbb1e 	bne	r2,zero,d9dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9dc>
    daf0:	0011883a 	mov	r8,zero
    daf4:	003fdb06 	br	da64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da64>
    daf8:	94c0012e 	bgeu	r18,r19,db00 <__sfvwrite_r+0x31c>
    dafc:	9027883a 	mov	r19,r18
    db00:	980d883a 	mov	r6,r19
    db04:	e00b883a 	mov	r5,fp
    db08:	000dd540 	call	dd54 <memmove>
    db0c:	80800217 	ldw	r2,8(r16)
    db10:	80c00017 	ldw	r3,0(r16)
    db14:	14c5c83a 	sub	r2,r2,r19
    db18:	1cc7883a 	add	r3,r3,r19
    db1c:	80800215 	stw	r2,8(r16)
    db20:	80c00015 	stw	r3,0(r16)
    db24:	10004326 	beq	r2,zero,dc34 <__sfvwrite_r+0x450>
    db28:	9805883a 	mov	r2,r19
    db2c:	003f8606 	br	d948 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d948>
    db30:	b00d883a 	mov	r6,r22
    db34:	e00b883a 	mov	r5,fp
    db38:	da000115 	stw	r8,4(sp)
    db3c:	000dd540 	call	dd54 <memmove>
    db40:	80800217 	ldw	r2,8(r16)
    db44:	80c00017 	ldw	r3,0(r16)
    db48:	da000117 	ldw	r8,4(sp)
    db4c:	1585c83a 	sub	r2,r2,r22
    db50:	1dad883a 	add	r22,r3,r22
    db54:	80800215 	stw	r2,8(r16)
    db58:	85800015 	stw	r22,0(r16)
    db5c:	003fbf06 	br	da5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da5c>
    db60:	81000017 	ldw	r4,0(r16)
    db64:	9027883a 	mov	r19,r18
    db68:	902f883a 	mov	r23,r18
    db6c:	003f6c06 	br	d920 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d920>
    db70:	900d883a 	mov	r6,r18
    db74:	01400284 	movi	r5,10
    db78:	e009883a 	mov	r4,fp
    db7c:	000a5f40 	call	a5f4 <memchr>
    db80:	10003e26 	beq	r2,zero,dc7c <__sfvwrite_r+0x498>
    db84:	10800044 	addi	r2,r2,1
    db88:	1727c83a 	sub	r19,r2,fp
    db8c:	02000044 	movi	r8,1
    db90:	003f9d06 	br	da08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da08>
    db94:	80800517 	ldw	r2,20(r16)
    db98:	81400417 	ldw	r5,16(r16)
    db9c:	81c00017 	ldw	r7,0(r16)
    dba0:	10a7883a 	add	r19,r2,r2
    dba4:	9885883a 	add	r2,r19,r2
    dba8:	1026d7fa 	srli	r19,r2,31
    dbac:	396dc83a 	sub	r22,r7,r5
    dbb0:	b1000044 	addi	r4,r22,1
    dbb4:	9885883a 	add	r2,r19,r2
    dbb8:	1027d07a 	srai	r19,r2,1
    dbbc:	2485883a 	add	r2,r4,r18
    dbc0:	980d883a 	mov	r6,r19
    dbc4:	9880022e 	bgeu	r19,r2,dbd0 <__sfvwrite_r+0x3ec>
    dbc8:	1027883a 	mov	r19,r2
    dbcc:	100d883a 	mov	r6,r2
    dbd0:	18c1000c 	andi	r3,r3,1024
    dbd4:	18001c26 	beq	r3,zero,dc48 <__sfvwrite_r+0x464>
    dbd8:	300b883a 	mov	r5,r6
    dbdc:	a809883a 	mov	r4,r21
    dbe0:	0009de80 	call	9de8 <_malloc_r>
    dbe4:	102f883a 	mov	r23,r2
    dbe8:	10002926 	beq	r2,zero,dc90 <__sfvwrite_r+0x4ac>
    dbec:	81400417 	ldw	r5,16(r16)
    dbf0:	b00d883a 	mov	r6,r22
    dbf4:	1009883a 	mov	r4,r2
    dbf8:	000a6d80 	call	a6d8 <memcpy>
    dbfc:	8080030b 	ldhu	r2,12(r16)
    dc00:	00fedfc4 	movi	r3,-1153
    dc04:	10c4703a 	and	r2,r2,r3
    dc08:	10802014 	ori	r2,r2,128
    dc0c:	8080030d 	sth	r2,12(r16)
    dc10:	bd89883a 	add	r4,r23,r22
    dc14:	9d8fc83a 	sub	r7,r19,r22
    dc18:	85c00415 	stw	r23,16(r16)
    dc1c:	84c00515 	stw	r19,20(r16)
    dc20:	81000015 	stw	r4,0(r16)
    dc24:	9027883a 	mov	r19,r18
    dc28:	81c00215 	stw	r7,8(r16)
    dc2c:	902f883a 	mov	r23,r18
    dc30:	003f3b06 	br	d920 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d920>
    dc34:	800b883a 	mov	r5,r16
    dc38:	a809883a 	mov	r4,r21
    dc3c:	00091680 	call	9168 <_fflush_r>
    dc40:	103fb926 	beq	r2,zero,db28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700db28>
    dc44:	003f6506 	br	d9dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9dc>
    dc48:	a809883a 	mov	r4,r21
    dc4c:	000df100 	call	df10 <_realloc_r>
    dc50:	102f883a 	mov	r23,r2
    dc54:	103fee1e 	bne	r2,zero,dc10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dc10>
    dc58:	81400417 	ldw	r5,16(r16)
    dc5c:	a809883a 	mov	r4,r21
    dc60:	00096b80 	call	96b8 <_free_r>
    dc64:	8080030b 	ldhu	r2,12(r16)
    dc68:	00ffdfc4 	movi	r3,-129
    dc6c:	1884703a 	and	r2,r3,r2
    dc70:	00c00304 	movi	r3,12
    dc74:	a8c00015 	stw	r3,0(r21)
    dc78:	003f5906 	br	d9e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9e0>
    dc7c:	94c00044 	addi	r19,r18,1
    dc80:	02000044 	movi	r8,1
    dc84:	003f6006 	br	da08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da08>
    dc88:	00bfffc4 	movi	r2,-1
    dc8c:	003f0306 	br	d89c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d89c>
    dc90:	00800304 	movi	r2,12
    dc94:	a8800015 	stw	r2,0(r21)
    dc98:	8080030b 	ldhu	r2,12(r16)
    dc9c:	003f5006 	br	d9e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9e0>

0000dca0 <_isatty_r>:
    dca0:	defffd04 	addi	sp,sp,-12
    dca4:	dc000015 	stw	r16,0(sp)
    dca8:	040000b4 	movhi	r16,2
    dcac:	dc400115 	stw	r17,4(sp)
    dcb0:	843f2104 	addi	r16,r16,-892
    dcb4:	2023883a 	mov	r17,r4
    dcb8:	2809883a 	mov	r4,r5
    dcbc:	dfc00215 	stw	ra,8(sp)
    dcc0:	80000015 	stw	zero,0(r16)
    dcc4:	000f6600 	call	f660 <isatty>
    dcc8:	00ffffc4 	movi	r3,-1
    dccc:	10c00526 	beq	r2,r3,dce4 <_isatty_r+0x44>
    dcd0:	dfc00217 	ldw	ra,8(sp)
    dcd4:	dc400117 	ldw	r17,4(sp)
    dcd8:	dc000017 	ldw	r16,0(sp)
    dcdc:	dec00304 	addi	sp,sp,12
    dce0:	f800283a 	ret
    dce4:	80c00017 	ldw	r3,0(r16)
    dce8:	183ff926 	beq	r3,zero,dcd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dcd0>
    dcec:	88c00015 	stw	r3,0(r17)
    dcf0:	003ff706 	br	dcd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dcd0>

0000dcf4 <_lseek_r>:
    dcf4:	defffd04 	addi	sp,sp,-12
    dcf8:	2805883a 	mov	r2,r5
    dcfc:	dc000015 	stw	r16,0(sp)
    dd00:	040000b4 	movhi	r16,2
    dd04:	dc400115 	stw	r17,4(sp)
    dd08:	300b883a 	mov	r5,r6
    dd0c:	843f2104 	addi	r16,r16,-892
    dd10:	2023883a 	mov	r17,r4
    dd14:	380d883a 	mov	r6,r7
    dd18:	1009883a 	mov	r4,r2
    dd1c:	dfc00215 	stw	ra,8(sp)
    dd20:	80000015 	stw	zero,0(r16)
    dd24:	000f82c0 	call	f82c <lseek>
    dd28:	00ffffc4 	movi	r3,-1
    dd2c:	10c00526 	beq	r2,r3,dd44 <_lseek_r+0x50>
    dd30:	dfc00217 	ldw	ra,8(sp)
    dd34:	dc400117 	ldw	r17,4(sp)
    dd38:	dc000017 	ldw	r16,0(sp)
    dd3c:	dec00304 	addi	sp,sp,12
    dd40:	f800283a 	ret
    dd44:	80c00017 	ldw	r3,0(r16)
    dd48:	183ff926 	beq	r3,zero,dd30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd30>
    dd4c:	88c00015 	stw	r3,0(r17)
    dd50:	003ff706 	br	dd30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd30>

0000dd54 <memmove>:
    dd54:	2005883a 	mov	r2,r4
    dd58:	29000b2e 	bgeu	r5,r4,dd88 <memmove+0x34>
    dd5c:	298f883a 	add	r7,r5,r6
    dd60:	21c0092e 	bgeu	r4,r7,dd88 <memmove+0x34>
    dd64:	2187883a 	add	r3,r4,r6
    dd68:	198bc83a 	sub	r5,r3,r6
    dd6c:	30004826 	beq	r6,zero,de90 <memmove+0x13c>
    dd70:	39ffffc4 	addi	r7,r7,-1
    dd74:	39000003 	ldbu	r4,0(r7)
    dd78:	18ffffc4 	addi	r3,r3,-1
    dd7c:	19000005 	stb	r4,0(r3)
    dd80:	28fffb1e 	bne	r5,r3,dd70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd70>
    dd84:	f800283a 	ret
    dd88:	00c003c4 	movi	r3,15
    dd8c:	1980412e 	bgeu	r3,r6,de94 <memmove+0x140>
    dd90:	2886b03a 	or	r3,r5,r2
    dd94:	18c000cc 	andi	r3,r3,3
    dd98:	1800401e 	bne	r3,zero,de9c <memmove+0x148>
    dd9c:	33fffc04 	addi	r15,r6,-16
    dda0:	781ed13a 	srli	r15,r15,4
    dda4:	28c00104 	addi	r3,r5,4
    dda8:	13400104 	addi	r13,r2,4
    ddac:	781c913a 	slli	r14,r15,4
    ddb0:	2b000204 	addi	r12,r5,8
    ddb4:	12c00204 	addi	r11,r2,8
    ddb8:	73800504 	addi	r14,r14,20
    ddbc:	2a800304 	addi	r10,r5,12
    ddc0:	12400304 	addi	r9,r2,12
    ddc4:	2b9d883a 	add	r14,r5,r14
    ddc8:	2811883a 	mov	r8,r5
    ddcc:	100f883a 	mov	r7,r2
    ddd0:	41000017 	ldw	r4,0(r8)
    ddd4:	39c00404 	addi	r7,r7,16
    ddd8:	18c00404 	addi	r3,r3,16
    dddc:	393ffc15 	stw	r4,-16(r7)
    dde0:	193ffc17 	ldw	r4,-16(r3)
    dde4:	6b400404 	addi	r13,r13,16
    dde8:	5ac00404 	addi	r11,r11,16
    ddec:	693ffc15 	stw	r4,-16(r13)
    ddf0:	61000017 	ldw	r4,0(r12)
    ddf4:	4a400404 	addi	r9,r9,16
    ddf8:	42000404 	addi	r8,r8,16
    ddfc:	593ffc15 	stw	r4,-16(r11)
    de00:	51000017 	ldw	r4,0(r10)
    de04:	63000404 	addi	r12,r12,16
    de08:	52800404 	addi	r10,r10,16
    de0c:	493ffc15 	stw	r4,-16(r9)
    de10:	1bbfef1e 	bne	r3,r14,ddd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddd0>
    de14:	79000044 	addi	r4,r15,1
    de18:	2008913a 	slli	r4,r4,4
    de1c:	328003cc 	andi	r10,r6,15
    de20:	02c000c4 	movi	r11,3
    de24:	1107883a 	add	r3,r2,r4
    de28:	290b883a 	add	r5,r5,r4
    de2c:	5a801e2e 	bgeu	r11,r10,dea8 <memmove+0x154>
    de30:	1813883a 	mov	r9,r3
    de34:	2811883a 	mov	r8,r5
    de38:	500f883a 	mov	r7,r10
    de3c:	41000017 	ldw	r4,0(r8)
    de40:	4a400104 	addi	r9,r9,4
    de44:	39ffff04 	addi	r7,r7,-4
    de48:	493fff15 	stw	r4,-4(r9)
    de4c:	42000104 	addi	r8,r8,4
    de50:	59fffa36 	bltu	r11,r7,de3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de3c>
    de54:	513fff04 	addi	r4,r10,-4
    de58:	2008d0ba 	srli	r4,r4,2
    de5c:	318000cc 	andi	r6,r6,3
    de60:	21000044 	addi	r4,r4,1
    de64:	2109883a 	add	r4,r4,r4
    de68:	2109883a 	add	r4,r4,r4
    de6c:	1907883a 	add	r3,r3,r4
    de70:	290b883a 	add	r5,r5,r4
    de74:	30000b26 	beq	r6,zero,dea4 <memmove+0x150>
    de78:	198d883a 	add	r6,r3,r6
    de7c:	29c00003 	ldbu	r7,0(r5)
    de80:	18c00044 	addi	r3,r3,1
    de84:	29400044 	addi	r5,r5,1
    de88:	19ffffc5 	stb	r7,-1(r3)
    de8c:	19bffb1e 	bne	r3,r6,de7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de7c>
    de90:	f800283a 	ret
    de94:	1007883a 	mov	r3,r2
    de98:	003ff606 	br	de74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de74>
    de9c:	1007883a 	mov	r3,r2
    dea0:	003ff506 	br	de78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de78>
    dea4:	f800283a 	ret
    dea8:	500d883a 	mov	r6,r10
    deac:	003ff106 	br	de74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de74>

0000deb0 <_read_r>:
    deb0:	defffd04 	addi	sp,sp,-12
    deb4:	2805883a 	mov	r2,r5
    deb8:	dc000015 	stw	r16,0(sp)
    debc:	040000b4 	movhi	r16,2
    dec0:	dc400115 	stw	r17,4(sp)
    dec4:	300b883a 	mov	r5,r6
    dec8:	843f2104 	addi	r16,r16,-892
    decc:	2023883a 	mov	r17,r4
    ded0:	380d883a 	mov	r6,r7
    ded4:	1009883a 	mov	r4,r2
    ded8:	dfc00215 	stw	ra,8(sp)
    dedc:	80000015 	stw	zero,0(r16)
    dee0:	000f9f80 	call	f9f8 <read>
    dee4:	00ffffc4 	movi	r3,-1
    dee8:	10c00526 	beq	r2,r3,df00 <_read_r+0x50>
    deec:	dfc00217 	ldw	ra,8(sp)
    def0:	dc400117 	ldw	r17,4(sp)
    def4:	dc000017 	ldw	r16,0(sp)
    def8:	dec00304 	addi	sp,sp,12
    defc:	f800283a 	ret
    df00:	80c00017 	ldw	r3,0(r16)
    df04:	183ff926 	beq	r3,zero,deec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700deec>
    df08:	88c00015 	stw	r3,0(r17)
    df0c:	003ff706 	br	deec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700deec>

0000df10 <_realloc_r>:
    df10:	defff604 	addi	sp,sp,-40
    df14:	dc800215 	stw	r18,8(sp)
    df18:	dfc00915 	stw	ra,36(sp)
    df1c:	df000815 	stw	fp,32(sp)
    df20:	ddc00715 	stw	r23,28(sp)
    df24:	dd800615 	stw	r22,24(sp)
    df28:	dd400515 	stw	r21,20(sp)
    df2c:	dd000415 	stw	r20,16(sp)
    df30:	dcc00315 	stw	r19,12(sp)
    df34:	dc400115 	stw	r17,4(sp)
    df38:	dc000015 	stw	r16,0(sp)
    df3c:	3025883a 	mov	r18,r6
    df40:	2800b726 	beq	r5,zero,e220 <_realloc_r+0x310>
    df44:	282b883a 	mov	r21,r5
    df48:	2029883a 	mov	r20,r4
    df4c:	000fe600 	call	fe60 <__malloc_lock>
    df50:	a8bfff17 	ldw	r2,-4(r21)
    df54:	043fff04 	movi	r16,-4
    df58:	90c002c4 	addi	r3,r18,11
    df5c:	01000584 	movi	r4,22
    df60:	acfffe04 	addi	r19,r21,-8
    df64:	1420703a 	and	r16,r2,r16
    df68:	20c0332e 	bgeu	r4,r3,e038 <_realloc_r+0x128>
    df6c:	047ffe04 	movi	r17,-8
    df70:	1c62703a 	and	r17,r3,r17
    df74:	8807883a 	mov	r3,r17
    df78:	88005816 	blt	r17,zero,e0dc <_realloc_r+0x1cc>
    df7c:	8c805736 	bltu	r17,r18,e0dc <_realloc_r+0x1cc>
    df80:	80c0300e 	bge	r16,r3,e044 <_realloc_r+0x134>
    df84:	070000b4 	movhi	fp,2
    df88:	e7308e04 	addi	fp,fp,-15816
    df8c:	e1c00217 	ldw	r7,8(fp)
    df90:	9c09883a 	add	r4,r19,r16
    df94:	22000117 	ldw	r8,4(r4)
    df98:	21c06326 	beq	r4,r7,e128 <_realloc_r+0x218>
    df9c:	017fff84 	movi	r5,-2
    dfa0:	414a703a 	and	r5,r8,r5
    dfa4:	214b883a 	add	r5,r4,r5
    dfa8:	29800117 	ldw	r6,4(r5)
    dfac:	3180004c 	andi	r6,r6,1
    dfb0:	30003f26 	beq	r6,zero,e0b0 <_realloc_r+0x1a0>
    dfb4:	1080004c 	andi	r2,r2,1
    dfb8:	10008326 	beq	r2,zero,e1c8 <_realloc_r+0x2b8>
    dfbc:	900b883a 	mov	r5,r18
    dfc0:	a009883a 	mov	r4,r20
    dfc4:	0009de80 	call	9de8 <_malloc_r>
    dfc8:	1025883a 	mov	r18,r2
    dfcc:	10011e26 	beq	r2,zero,e448 <_realloc_r+0x538>
    dfd0:	a93fff17 	ldw	r4,-4(r21)
    dfd4:	10fffe04 	addi	r3,r2,-8
    dfd8:	00bfff84 	movi	r2,-2
    dfdc:	2084703a 	and	r2,r4,r2
    dfe0:	9885883a 	add	r2,r19,r2
    dfe4:	1880ee26 	beq	r3,r2,e3a0 <_realloc_r+0x490>
    dfe8:	81bfff04 	addi	r6,r16,-4
    dfec:	00800904 	movi	r2,36
    dff0:	1180b836 	bltu	r2,r6,e2d4 <_realloc_r+0x3c4>
    dff4:	00c004c4 	movi	r3,19
    dff8:	19809636 	bltu	r3,r6,e254 <_realloc_r+0x344>
    dffc:	9005883a 	mov	r2,r18
    e000:	a807883a 	mov	r3,r21
    e004:	19000017 	ldw	r4,0(r3)
    e008:	11000015 	stw	r4,0(r2)
    e00c:	19000117 	ldw	r4,4(r3)
    e010:	11000115 	stw	r4,4(r2)
    e014:	18c00217 	ldw	r3,8(r3)
    e018:	10c00215 	stw	r3,8(r2)
    e01c:	a80b883a 	mov	r5,r21
    e020:	a009883a 	mov	r4,r20
    e024:	00096b80 	call	96b8 <_free_r>
    e028:	a009883a 	mov	r4,r20
    e02c:	000ff800 	call	ff80 <__malloc_unlock>
    e030:	9005883a 	mov	r2,r18
    e034:	00001206 	br	e080 <_realloc_r+0x170>
    e038:	00c00404 	movi	r3,16
    e03c:	1823883a 	mov	r17,r3
    e040:	003fce06 	br	df7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df7c>
    e044:	a825883a 	mov	r18,r21
    e048:	8445c83a 	sub	r2,r16,r17
    e04c:	00c003c4 	movi	r3,15
    e050:	18802636 	bltu	r3,r2,e0ec <_realloc_r+0x1dc>
    e054:	99800117 	ldw	r6,4(r19)
    e058:	9c07883a 	add	r3,r19,r16
    e05c:	3180004c 	andi	r6,r6,1
    e060:	3420b03a 	or	r16,r6,r16
    e064:	9c000115 	stw	r16,4(r19)
    e068:	18800117 	ldw	r2,4(r3)
    e06c:	10800054 	ori	r2,r2,1
    e070:	18800115 	stw	r2,4(r3)
    e074:	a009883a 	mov	r4,r20
    e078:	000ff800 	call	ff80 <__malloc_unlock>
    e07c:	9005883a 	mov	r2,r18
    e080:	dfc00917 	ldw	ra,36(sp)
    e084:	df000817 	ldw	fp,32(sp)
    e088:	ddc00717 	ldw	r23,28(sp)
    e08c:	dd800617 	ldw	r22,24(sp)
    e090:	dd400517 	ldw	r21,20(sp)
    e094:	dd000417 	ldw	r20,16(sp)
    e098:	dcc00317 	ldw	r19,12(sp)
    e09c:	dc800217 	ldw	r18,8(sp)
    e0a0:	dc400117 	ldw	r17,4(sp)
    e0a4:	dc000017 	ldw	r16,0(sp)
    e0a8:	dec00a04 	addi	sp,sp,40
    e0ac:	f800283a 	ret
    e0b0:	017fff04 	movi	r5,-4
    e0b4:	414a703a 	and	r5,r8,r5
    e0b8:	814d883a 	add	r6,r16,r5
    e0bc:	30c01f16 	blt	r6,r3,e13c <_realloc_r+0x22c>
    e0c0:	20800317 	ldw	r2,12(r4)
    e0c4:	20c00217 	ldw	r3,8(r4)
    e0c8:	a825883a 	mov	r18,r21
    e0cc:	3021883a 	mov	r16,r6
    e0d0:	18800315 	stw	r2,12(r3)
    e0d4:	10c00215 	stw	r3,8(r2)
    e0d8:	003fdb06 	br	e048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e048>
    e0dc:	00800304 	movi	r2,12
    e0e0:	a0800015 	stw	r2,0(r20)
    e0e4:	0005883a 	mov	r2,zero
    e0e8:	003fe506 	br	e080 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e080>
    e0ec:	98c00117 	ldw	r3,4(r19)
    e0f0:	9c4b883a 	add	r5,r19,r17
    e0f4:	11000054 	ori	r4,r2,1
    e0f8:	18c0004c 	andi	r3,r3,1
    e0fc:	1c62b03a 	or	r17,r3,r17
    e100:	9c400115 	stw	r17,4(r19)
    e104:	29000115 	stw	r4,4(r5)
    e108:	2885883a 	add	r2,r5,r2
    e10c:	10c00117 	ldw	r3,4(r2)
    e110:	29400204 	addi	r5,r5,8
    e114:	a009883a 	mov	r4,r20
    e118:	18c00054 	ori	r3,r3,1
    e11c:	10c00115 	stw	r3,4(r2)
    e120:	00096b80 	call	96b8 <_free_r>
    e124:	003fd306 	br	e074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e074>
    e128:	017fff04 	movi	r5,-4
    e12c:	414a703a 	and	r5,r8,r5
    e130:	89800404 	addi	r6,r17,16
    e134:	8151883a 	add	r8,r16,r5
    e138:	4180590e 	bge	r8,r6,e2a0 <_realloc_r+0x390>
    e13c:	1080004c 	andi	r2,r2,1
    e140:	103f9e1e 	bne	r2,zero,dfbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dfbc>
    e144:	adbffe17 	ldw	r22,-8(r21)
    e148:	00bfff04 	movi	r2,-4
    e14c:	9dadc83a 	sub	r22,r19,r22
    e150:	b1800117 	ldw	r6,4(r22)
    e154:	3084703a 	and	r2,r6,r2
    e158:	20002026 	beq	r4,zero,e1dc <_realloc_r+0x2cc>
    e15c:	80af883a 	add	r23,r16,r2
    e160:	b96f883a 	add	r23,r23,r5
    e164:	21c05f26 	beq	r4,r7,e2e4 <_realloc_r+0x3d4>
    e168:	b8c01c16 	blt	r23,r3,e1dc <_realloc_r+0x2cc>
    e16c:	20800317 	ldw	r2,12(r4)
    e170:	20c00217 	ldw	r3,8(r4)
    e174:	81bfff04 	addi	r6,r16,-4
    e178:	01000904 	movi	r4,36
    e17c:	18800315 	stw	r2,12(r3)
    e180:	10c00215 	stw	r3,8(r2)
    e184:	b0c00217 	ldw	r3,8(r22)
    e188:	b0800317 	ldw	r2,12(r22)
    e18c:	b4800204 	addi	r18,r22,8
    e190:	18800315 	stw	r2,12(r3)
    e194:	10c00215 	stw	r3,8(r2)
    e198:	21801b36 	bltu	r4,r6,e208 <_realloc_r+0x2f8>
    e19c:	008004c4 	movi	r2,19
    e1a0:	1180352e 	bgeu	r2,r6,e278 <_realloc_r+0x368>
    e1a4:	a8800017 	ldw	r2,0(r21)
    e1a8:	b0800215 	stw	r2,8(r22)
    e1ac:	a8800117 	ldw	r2,4(r21)
    e1b0:	b0800315 	stw	r2,12(r22)
    e1b4:	008006c4 	movi	r2,27
    e1b8:	11807f36 	bltu	r2,r6,e3b8 <_realloc_r+0x4a8>
    e1bc:	b0800404 	addi	r2,r22,16
    e1c0:	ad400204 	addi	r21,r21,8
    e1c4:	00002d06 	br	e27c <_realloc_r+0x36c>
    e1c8:	adbffe17 	ldw	r22,-8(r21)
    e1cc:	00bfff04 	movi	r2,-4
    e1d0:	9dadc83a 	sub	r22,r19,r22
    e1d4:	b1000117 	ldw	r4,4(r22)
    e1d8:	2084703a 	and	r2,r4,r2
    e1dc:	b03f7726 	beq	r22,zero,dfbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dfbc>
    e1e0:	80af883a 	add	r23,r16,r2
    e1e4:	b8ff7516 	blt	r23,r3,dfbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dfbc>
    e1e8:	b0800317 	ldw	r2,12(r22)
    e1ec:	b0c00217 	ldw	r3,8(r22)
    e1f0:	81bfff04 	addi	r6,r16,-4
    e1f4:	01000904 	movi	r4,36
    e1f8:	18800315 	stw	r2,12(r3)
    e1fc:	10c00215 	stw	r3,8(r2)
    e200:	b4800204 	addi	r18,r22,8
    e204:	21bfe52e 	bgeu	r4,r6,e19c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e19c>
    e208:	a80b883a 	mov	r5,r21
    e20c:	9009883a 	mov	r4,r18
    e210:	000dd540 	call	dd54 <memmove>
    e214:	b821883a 	mov	r16,r23
    e218:	b027883a 	mov	r19,r22
    e21c:	003f8a06 	br	e048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e048>
    e220:	300b883a 	mov	r5,r6
    e224:	dfc00917 	ldw	ra,36(sp)
    e228:	df000817 	ldw	fp,32(sp)
    e22c:	ddc00717 	ldw	r23,28(sp)
    e230:	dd800617 	ldw	r22,24(sp)
    e234:	dd400517 	ldw	r21,20(sp)
    e238:	dd000417 	ldw	r20,16(sp)
    e23c:	dcc00317 	ldw	r19,12(sp)
    e240:	dc800217 	ldw	r18,8(sp)
    e244:	dc400117 	ldw	r17,4(sp)
    e248:	dc000017 	ldw	r16,0(sp)
    e24c:	dec00a04 	addi	sp,sp,40
    e250:	0009de81 	jmpi	9de8 <_malloc_r>
    e254:	a8c00017 	ldw	r3,0(r21)
    e258:	90c00015 	stw	r3,0(r18)
    e25c:	a8c00117 	ldw	r3,4(r21)
    e260:	90c00115 	stw	r3,4(r18)
    e264:	00c006c4 	movi	r3,27
    e268:	19804536 	bltu	r3,r6,e380 <_realloc_r+0x470>
    e26c:	90800204 	addi	r2,r18,8
    e270:	a8c00204 	addi	r3,r21,8
    e274:	003f6306 	br	e004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e004>
    e278:	9005883a 	mov	r2,r18
    e27c:	a8c00017 	ldw	r3,0(r21)
    e280:	b821883a 	mov	r16,r23
    e284:	b027883a 	mov	r19,r22
    e288:	10c00015 	stw	r3,0(r2)
    e28c:	a8c00117 	ldw	r3,4(r21)
    e290:	10c00115 	stw	r3,4(r2)
    e294:	a8c00217 	ldw	r3,8(r21)
    e298:	10c00215 	stw	r3,8(r2)
    e29c:	003f6a06 	br	e048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e048>
    e2a0:	9c67883a 	add	r19,r19,r17
    e2a4:	4445c83a 	sub	r2,r8,r17
    e2a8:	e4c00215 	stw	r19,8(fp)
    e2ac:	10800054 	ori	r2,r2,1
    e2b0:	98800115 	stw	r2,4(r19)
    e2b4:	a8bfff17 	ldw	r2,-4(r21)
    e2b8:	a009883a 	mov	r4,r20
    e2bc:	1080004c 	andi	r2,r2,1
    e2c0:	1462b03a 	or	r17,r2,r17
    e2c4:	ac7fff15 	stw	r17,-4(r21)
    e2c8:	000ff800 	call	ff80 <__malloc_unlock>
    e2cc:	a805883a 	mov	r2,r21
    e2d0:	003f6b06 	br	e080 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e080>
    e2d4:	a80b883a 	mov	r5,r21
    e2d8:	9009883a 	mov	r4,r18
    e2dc:	000dd540 	call	dd54 <memmove>
    e2e0:	003f4e06 	br	e01c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e01c>
    e2e4:	89000404 	addi	r4,r17,16
    e2e8:	b93fbc16 	blt	r23,r4,e1dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e1dc>
    e2ec:	b0800317 	ldw	r2,12(r22)
    e2f0:	b0c00217 	ldw	r3,8(r22)
    e2f4:	81bfff04 	addi	r6,r16,-4
    e2f8:	01000904 	movi	r4,36
    e2fc:	18800315 	stw	r2,12(r3)
    e300:	10c00215 	stw	r3,8(r2)
    e304:	b4800204 	addi	r18,r22,8
    e308:	21804336 	bltu	r4,r6,e418 <_realloc_r+0x508>
    e30c:	008004c4 	movi	r2,19
    e310:	11803f2e 	bgeu	r2,r6,e410 <_realloc_r+0x500>
    e314:	a8800017 	ldw	r2,0(r21)
    e318:	b0800215 	stw	r2,8(r22)
    e31c:	a8800117 	ldw	r2,4(r21)
    e320:	b0800315 	stw	r2,12(r22)
    e324:	008006c4 	movi	r2,27
    e328:	11803f36 	bltu	r2,r6,e428 <_realloc_r+0x518>
    e32c:	b0800404 	addi	r2,r22,16
    e330:	ad400204 	addi	r21,r21,8
    e334:	a8c00017 	ldw	r3,0(r21)
    e338:	10c00015 	stw	r3,0(r2)
    e33c:	a8c00117 	ldw	r3,4(r21)
    e340:	10c00115 	stw	r3,4(r2)
    e344:	a8c00217 	ldw	r3,8(r21)
    e348:	10c00215 	stw	r3,8(r2)
    e34c:	b447883a 	add	r3,r22,r17
    e350:	bc45c83a 	sub	r2,r23,r17
    e354:	e0c00215 	stw	r3,8(fp)
    e358:	10800054 	ori	r2,r2,1
    e35c:	18800115 	stw	r2,4(r3)
    e360:	b0800117 	ldw	r2,4(r22)
    e364:	a009883a 	mov	r4,r20
    e368:	1080004c 	andi	r2,r2,1
    e36c:	1462b03a 	or	r17,r2,r17
    e370:	b4400115 	stw	r17,4(r22)
    e374:	000ff800 	call	ff80 <__malloc_unlock>
    e378:	9005883a 	mov	r2,r18
    e37c:	003f4006 	br	e080 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e080>
    e380:	a8c00217 	ldw	r3,8(r21)
    e384:	90c00215 	stw	r3,8(r18)
    e388:	a8c00317 	ldw	r3,12(r21)
    e38c:	90c00315 	stw	r3,12(r18)
    e390:	30801126 	beq	r6,r2,e3d8 <_realloc_r+0x4c8>
    e394:	90800404 	addi	r2,r18,16
    e398:	a8c00404 	addi	r3,r21,16
    e39c:	003f1906 	br	e004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e004>
    e3a0:	90ffff17 	ldw	r3,-4(r18)
    e3a4:	00bfff04 	movi	r2,-4
    e3a8:	a825883a 	mov	r18,r21
    e3ac:	1884703a 	and	r2,r3,r2
    e3b0:	80a1883a 	add	r16,r16,r2
    e3b4:	003f2406 	br	e048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e048>
    e3b8:	a8800217 	ldw	r2,8(r21)
    e3bc:	b0800415 	stw	r2,16(r22)
    e3c0:	a8800317 	ldw	r2,12(r21)
    e3c4:	b0800515 	stw	r2,20(r22)
    e3c8:	31000a26 	beq	r6,r4,e3f4 <_realloc_r+0x4e4>
    e3cc:	b0800604 	addi	r2,r22,24
    e3d0:	ad400404 	addi	r21,r21,16
    e3d4:	003fa906 	br	e27c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e27c>
    e3d8:	a9000417 	ldw	r4,16(r21)
    e3dc:	90800604 	addi	r2,r18,24
    e3e0:	a8c00604 	addi	r3,r21,24
    e3e4:	91000415 	stw	r4,16(r18)
    e3e8:	a9000517 	ldw	r4,20(r21)
    e3ec:	91000515 	stw	r4,20(r18)
    e3f0:	003f0406 	br	e004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e004>
    e3f4:	a8c00417 	ldw	r3,16(r21)
    e3f8:	ad400604 	addi	r21,r21,24
    e3fc:	b0800804 	addi	r2,r22,32
    e400:	b0c00615 	stw	r3,24(r22)
    e404:	a8ffff17 	ldw	r3,-4(r21)
    e408:	b0c00715 	stw	r3,28(r22)
    e40c:	003f9b06 	br	e27c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e27c>
    e410:	9005883a 	mov	r2,r18
    e414:	003fc706 	br	e334 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e334>
    e418:	a80b883a 	mov	r5,r21
    e41c:	9009883a 	mov	r4,r18
    e420:	000dd540 	call	dd54 <memmove>
    e424:	003fc906 	br	e34c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e34c>
    e428:	a8800217 	ldw	r2,8(r21)
    e42c:	b0800415 	stw	r2,16(r22)
    e430:	a8800317 	ldw	r2,12(r21)
    e434:	b0800515 	stw	r2,20(r22)
    e438:	31000726 	beq	r6,r4,e458 <_realloc_r+0x548>
    e43c:	b0800604 	addi	r2,r22,24
    e440:	ad400404 	addi	r21,r21,16
    e444:	003fbb06 	br	e334 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e334>
    e448:	a009883a 	mov	r4,r20
    e44c:	000ff800 	call	ff80 <__malloc_unlock>
    e450:	0005883a 	mov	r2,zero
    e454:	003f0a06 	br	e080 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e080>
    e458:	a8c00417 	ldw	r3,16(r21)
    e45c:	ad400604 	addi	r21,r21,24
    e460:	b0800804 	addi	r2,r22,32
    e464:	b0c00615 	stw	r3,24(r22)
    e468:	a8ffff17 	ldw	r3,-4(r21)
    e46c:	b0c00715 	stw	r3,28(r22)
    e470:	003fb006 	br	e334 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e334>

0000e474 <__swbuf_r>:
    e474:	defffb04 	addi	sp,sp,-20
    e478:	dcc00315 	stw	r19,12(sp)
    e47c:	dc800215 	stw	r18,8(sp)
    e480:	dc000015 	stw	r16,0(sp)
    e484:	dfc00415 	stw	ra,16(sp)
    e488:	dc400115 	stw	r17,4(sp)
    e48c:	2025883a 	mov	r18,r4
    e490:	2827883a 	mov	r19,r5
    e494:	3021883a 	mov	r16,r6
    e498:	20000226 	beq	r4,zero,e4a4 <__swbuf_r+0x30>
    e49c:	20800e17 	ldw	r2,56(r4)
    e4a0:	10004226 	beq	r2,zero,e5ac <__swbuf_r+0x138>
    e4a4:	80800617 	ldw	r2,24(r16)
    e4a8:	8100030b 	ldhu	r4,12(r16)
    e4ac:	80800215 	stw	r2,8(r16)
    e4b0:	2080020c 	andi	r2,r4,8
    e4b4:	10003626 	beq	r2,zero,e590 <__swbuf_r+0x11c>
    e4b8:	80c00417 	ldw	r3,16(r16)
    e4bc:	18003426 	beq	r3,zero,e590 <__swbuf_r+0x11c>
    e4c0:	2088000c 	andi	r2,r4,8192
    e4c4:	9c403fcc 	andi	r17,r19,255
    e4c8:	10001a26 	beq	r2,zero,e534 <__swbuf_r+0xc0>
    e4cc:	80800017 	ldw	r2,0(r16)
    e4d0:	81000517 	ldw	r4,20(r16)
    e4d4:	10c7c83a 	sub	r3,r2,r3
    e4d8:	1900200e 	bge	r3,r4,e55c <__swbuf_r+0xe8>
    e4dc:	18c00044 	addi	r3,r3,1
    e4e0:	81000217 	ldw	r4,8(r16)
    e4e4:	11400044 	addi	r5,r2,1
    e4e8:	81400015 	stw	r5,0(r16)
    e4ec:	213fffc4 	addi	r4,r4,-1
    e4f0:	81000215 	stw	r4,8(r16)
    e4f4:	14c00005 	stb	r19,0(r2)
    e4f8:	80800517 	ldw	r2,20(r16)
    e4fc:	10c01e26 	beq	r2,r3,e578 <__swbuf_r+0x104>
    e500:	8080030b 	ldhu	r2,12(r16)
    e504:	1080004c 	andi	r2,r2,1
    e508:	10000226 	beq	r2,zero,e514 <__swbuf_r+0xa0>
    e50c:	00800284 	movi	r2,10
    e510:	88801926 	beq	r17,r2,e578 <__swbuf_r+0x104>
    e514:	8805883a 	mov	r2,r17
    e518:	dfc00417 	ldw	ra,16(sp)
    e51c:	dcc00317 	ldw	r19,12(sp)
    e520:	dc800217 	ldw	r18,8(sp)
    e524:	dc400117 	ldw	r17,4(sp)
    e528:	dc000017 	ldw	r16,0(sp)
    e52c:	dec00504 	addi	sp,sp,20
    e530:	f800283a 	ret
    e534:	81401917 	ldw	r5,100(r16)
    e538:	00b7ffc4 	movi	r2,-8193
    e53c:	21080014 	ori	r4,r4,8192
    e540:	2884703a 	and	r2,r5,r2
    e544:	80801915 	stw	r2,100(r16)
    e548:	80800017 	ldw	r2,0(r16)
    e54c:	8100030d 	sth	r4,12(r16)
    e550:	81000517 	ldw	r4,20(r16)
    e554:	10c7c83a 	sub	r3,r2,r3
    e558:	193fe016 	blt	r3,r4,e4dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e4dc>
    e55c:	800b883a 	mov	r5,r16
    e560:	9009883a 	mov	r4,r18
    e564:	00091680 	call	9168 <_fflush_r>
    e568:	1000071e 	bne	r2,zero,e588 <__swbuf_r+0x114>
    e56c:	80800017 	ldw	r2,0(r16)
    e570:	00c00044 	movi	r3,1
    e574:	003fda06 	br	e4e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e4e0>
    e578:	800b883a 	mov	r5,r16
    e57c:	9009883a 	mov	r4,r18
    e580:	00091680 	call	9168 <_fflush_r>
    e584:	103fe326 	beq	r2,zero,e514 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e514>
    e588:	00bfffc4 	movi	r2,-1
    e58c:	003fe206 	br	e518 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e518>
    e590:	800b883a 	mov	r5,r16
    e594:	9009883a 	mov	r4,r18
    e598:	00075700 	call	7570 <__swsetup_r>
    e59c:	103ffa1e 	bne	r2,zero,e588 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e588>
    e5a0:	8100030b 	ldhu	r4,12(r16)
    e5a4:	80c00417 	ldw	r3,16(r16)
    e5a8:	003fc506 	br	e4c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e4c0>
    e5ac:	00095440 	call	9544 <__sinit>
    e5b0:	003fbc06 	br	e4a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e4a4>

0000e5b4 <__swbuf>:
    e5b4:	008000b4 	movhi	r2,2
    e5b8:	10b71304 	addi	r2,r2,-9140
    e5bc:	280d883a 	mov	r6,r5
    e5c0:	200b883a 	mov	r5,r4
    e5c4:	11000017 	ldw	r4,0(r2)
    e5c8:	000e4741 	jmpi	e474 <__swbuf_r>

0000e5cc <_wcrtomb_r>:
    e5cc:	defff604 	addi	sp,sp,-40
    e5d0:	008000b4 	movhi	r2,2
    e5d4:	dc800815 	stw	r18,32(sp)
    e5d8:	dc400715 	stw	r17,28(sp)
    e5dc:	dc000615 	stw	r16,24(sp)
    e5e0:	10b71704 	addi	r2,r2,-9124
    e5e4:	dfc00915 	stw	ra,36(sp)
    e5e8:	2021883a 	mov	r16,r4
    e5ec:	3823883a 	mov	r17,r7
    e5f0:	14800017 	ldw	r18,0(r2)
    e5f4:	28001426 	beq	r5,zero,e648 <_wcrtomb_r+0x7c>
    e5f8:	d9400415 	stw	r5,16(sp)
    e5fc:	d9800515 	stw	r6,20(sp)
    e600:	0009bcc0 	call	9bcc <__locale_charset>
    e604:	d9800517 	ldw	r6,20(sp)
    e608:	d9400417 	ldw	r5,16(sp)
    e60c:	100f883a 	mov	r7,r2
    e610:	dc400015 	stw	r17,0(sp)
    e614:	8009883a 	mov	r4,r16
    e618:	903ee83a 	callr	r18
    e61c:	00ffffc4 	movi	r3,-1
    e620:	10c0031e 	bne	r2,r3,e630 <_wcrtomb_r+0x64>
    e624:	88000015 	stw	zero,0(r17)
    e628:	00c02284 	movi	r3,138
    e62c:	80c00015 	stw	r3,0(r16)
    e630:	dfc00917 	ldw	ra,36(sp)
    e634:	dc800817 	ldw	r18,32(sp)
    e638:	dc400717 	ldw	r17,28(sp)
    e63c:	dc000617 	ldw	r16,24(sp)
    e640:	dec00a04 	addi	sp,sp,40
    e644:	f800283a 	ret
    e648:	0009bcc0 	call	9bcc <__locale_charset>
    e64c:	100f883a 	mov	r7,r2
    e650:	dc400015 	stw	r17,0(sp)
    e654:	000d883a 	mov	r6,zero
    e658:	d9400104 	addi	r5,sp,4
    e65c:	8009883a 	mov	r4,r16
    e660:	903ee83a 	callr	r18
    e664:	003fed06 	br	e61c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e61c>

0000e668 <wcrtomb>:
    e668:	defff604 	addi	sp,sp,-40
    e66c:	008000b4 	movhi	r2,2
    e670:	dc800615 	stw	r18,24(sp)
    e674:	dc400515 	stw	r17,20(sp)
    e678:	10b71304 	addi	r2,r2,-9140
    e67c:	dfc00915 	stw	ra,36(sp)
    e680:	dd000815 	stw	r20,32(sp)
    e684:	dcc00715 	stw	r19,28(sp)
    e688:	dc000415 	stw	r16,16(sp)
    e68c:	3025883a 	mov	r18,r6
    e690:	14400017 	ldw	r17,0(r2)
    e694:	20001926 	beq	r4,zero,e6fc <wcrtomb+0x94>
    e698:	008000b4 	movhi	r2,2
    e69c:	10b71704 	addi	r2,r2,-9124
    e6a0:	15000017 	ldw	r20,0(r2)
    e6a4:	2021883a 	mov	r16,r4
    e6a8:	2827883a 	mov	r19,r5
    e6ac:	0009bcc0 	call	9bcc <__locale_charset>
    e6b0:	100f883a 	mov	r7,r2
    e6b4:	dc800015 	stw	r18,0(sp)
    e6b8:	980d883a 	mov	r6,r19
    e6bc:	800b883a 	mov	r5,r16
    e6c0:	8809883a 	mov	r4,r17
    e6c4:	a03ee83a 	callr	r20
    e6c8:	00ffffc4 	movi	r3,-1
    e6cc:	10c0031e 	bne	r2,r3,e6dc <wcrtomb+0x74>
    e6d0:	90000015 	stw	zero,0(r18)
    e6d4:	00c02284 	movi	r3,138
    e6d8:	88c00015 	stw	r3,0(r17)
    e6dc:	dfc00917 	ldw	ra,36(sp)
    e6e0:	dd000817 	ldw	r20,32(sp)
    e6e4:	dcc00717 	ldw	r19,28(sp)
    e6e8:	dc800617 	ldw	r18,24(sp)
    e6ec:	dc400517 	ldw	r17,20(sp)
    e6f0:	dc000417 	ldw	r16,16(sp)
    e6f4:	dec00a04 	addi	sp,sp,40
    e6f8:	f800283a 	ret
    e6fc:	008000b4 	movhi	r2,2
    e700:	10b71704 	addi	r2,r2,-9124
    e704:	14000017 	ldw	r16,0(r2)
    e708:	0009bcc0 	call	9bcc <__locale_charset>
    e70c:	100f883a 	mov	r7,r2
    e710:	dc800015 	stw	r18,0(sp)
    e714:	000d883a 	mov	r6,zero
    e718:	d9400104 	addi	r5,sp,4
    e71c:	8809883a 	mov	r4,r17
    e720:	803ee83a 	callr	r16
    e724:	003fe806 	br	e6c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e6c8>

0000e728 <__ascii_wctomb>:
    e728:	28000526 	beq	r5,zero,e740 <__ascii_wctomb+0x18>
    e72c:	00803fc4 	movi	r2,255
    e730:	11800536 	bltu	r2,r6,e748 <__ascii_wctomb+0x20>
    e734:	29800005 	stb	r6,0(r5)
    e738:	00800044 	movi	r2,1
    e73c:	f800283a 	ret
    e740:	0005883a 	mov	r2,zero
    e744:	f800283a 	ret
    e748:	00802284 	movi	r2,138
    e74c:	20800015 	stw	r2,0(r4)
    e750:	00bfffc4 	movi	r2,-1
    e754:	f800283a 	ret

0000e758 <_wctomb_r>:
    e758:	008000b4 	movhi	r2,2
    e75c:	defff904 	addi	sp,sp,-28
    e760:	10b71704 	addi	r2,r2,-9124
    e764:	dfc00615 	stw	ra,24(sp)
    e768:	dc400515 	stw	r17,20(sp)
    e76c:	dc000415 	stw	r16,16(sp)
    e770:	3823883a 	mov	r17,r7
    e774:	14000017 	ldw	r16,0(r2)
    e778:	d9000115 	stw	r4,4(sp)
    e77c:	d9400215 	stw	r5,8(sp)
    e780:	d9800315 	stw	r6,12(sp)
    e784:	0009bcc0 	call	9bcc <__locale_charset>
    e788:	d9800317 	ldw	r6,12(sp)
    e78c:	d9400217 	ldw	r5,8(sp)
    e790:	d9000117 	ldw	r4,4(sp)
    e794:	100f883a 	mov	r7,r2
    e798:	dc400015 	stw	r17,0(sp)
    e79c:	803ee83a 	callr	r16
    e7a0:	dfc00617 	ldw	ra,24(sp)
    e7a4:	dc400517 	ldw	r17,20(sp)
    e7a8:	dc000417 	ldw	r16,16(sp)
    e7ac:	dec00704 	addi	sp,sp,28
    e7b0:	f800283a 	ret

0000e7b4 <__udivdi3>:
    e7b4:	defff504 	addi	sp,sp,-44
    e7b8:	dcc00415 	stw	r19,16(sp)
    e7bc:	dc000115 	stw	r16,4(sp)
    e7c0:	dfc00a15 	stw	ra,40(sp)
    e7c4:	df000915 	stw	fp,36(sp)
    e7c8:	ddc00815 	stw	r23,32(sp)
    e7cc:	dd800715 	stw	r22,28(sp)
    e7d0:	dd400615 	stw	r21,24(sp)
    e7d4:	dd000515 	stw	r20,20(sp)
    e7d8:	dc800315 	stw	r18,12(sp)
    e7dc:	dc400215 	stw	r17,8(sp)
    e7e0:	2027883a 	mov	r19,r4
    e7e4:	2821883a 	mov	r16,r5
    e7e8:	3800411e 	bne	r7,zero,e8f0 <__udivdi3+0x13c>
    e7ec:	3023883a 	mov	r17,r6
    e7f0:	2025883a 	mov	r18,r4
    e7f4:	2980522e 	bgeu	r5,r6,e940 <__udivdi3+0x18c>
    e7f8:	00bfffd4 	movui	r2,65535
    e7fc:	282d883a 	mov	r22,r5
    e800:	1180a836 	bltu	r2,r6,eaa4 <__udivdi3+0x2f0>
    e804:	00803fc4 	movi	r2,255
    e808:	1185803a 	cmpltu	r2,r2,r6
    e80c:	100490fa 	slli	r2,r2,3
    e810:	3086d83a 	srl	r3,r6,r2
    e814:	010000b4 	movhi	r4,2
    e818:	212df904 	addi	r4,r4,-18460
    e81c:	20c7883a 	add	r3,r4,r3
    e820:	18c00003 	ldbu	r3,0(r3)
    e824:	1885883a 	add	r2,r3,r2
    e828:	00c00804 	movi	r3,32
    e82c:	1887c83a 	sub	r3,r3,r2
    e830:	18000526 	beq	r3,zero,e848 <__udivdi3+0x94>
    e834:	80e0983a 	sll	r16,r16,r3
    e838:	9884d83a 	srl	r2,r19,r2
    e83c:	30e2983a 	sll	r17,r6,r3
    e840:	98e4983a 	sll	r18,r19,r3
    e844:	142cb03a 	or	r22,r2,r16
    e848:	882ad43a 	srli	r21,r17,16
    e84c:	b009883a 	mov	r4,r22
    e850:	8d3fffcc 	andi	r20,r17,65535
    e854:	a80b883a 	mov	r5,r21
    e858:	00028c40 	call	28c4 <__umodsi3>
    e85c:	b009883a 	mov	r4,r22
    e860:	a80b883a 	mov	r5,r21
    e864:	1027883a 	mov	r19,r2
    e868:	00028600 	call	2860 <__udivsi3>
    e86c:	102d883a 	mov	r22,r2
    e870:	9826943a 	slli	r19,r19,16
    e874:	9004d43a 	srli	r2,r18,16
    e878:	a5a1383a 	mul	r16,r20,r22
    e87c:	14c4b03a 	or	r2,r2,r19
    e880:	1400052e 	bgeu	r2,r16,e898 <__udivdi3+0xe4>
    e884:	1445883a 	add	r2,r2,r17
    e888:	b0ffffc4 	addi	r3,r22,-1
    e88c:	14400136 	bltu	r2,r17,e894 <__udivdi3+0xe0>
    e890:	14012336 	bltu	r2,r16,ed20 <__udivdi3+0x56c>
    e894:	182d883a 	mov	r22,r3
    e898:	1421c83a 	sub	r16,r2,r16
    e89c:	a80b883a 	mov	r5,r21
    e8a0:	8009883a 	mov	r4,r16
    e8a4:	00028c40 	call	28c4 <__umodsi3>
    e8a8:	1027883a 	mov	r19,r2
    e8ac:	a80b883a 	mov	r5,r21
    e8b0:	8009883a 	mov	r4,r16
    e8b4:	00028600 	call	2860 <__udivsi3>
    e8b8:	9826943a 	slli	r19,r19,16
    e8bc:	a0a9383a 	mul	r20,r20,r2
    e8c0:	94bfffcc 	andi	r18,r18,65535
    e8c4:	94e4b03a 	or	r18,r18,r19
    e8c8:	9500052e 	bgeu	r18,r20,e8e0 <__udivdi3+0x12c>
    e8cc:	8ca5883a 	add	r18,r17,r18
    e8d0:	10ffffc4 	addi	r3,r2,-1
    e8d4:	9440f136 	bltu	r18,r17,ec9c <__udivdi3+0x4e8>
    e8d8:	9500f02e 	bgeu	r18,r20,ec9c <__udivdi3+0x4e8>
    e8dc:	10bfff84 	addi	r2,r2,-2
    e8e0:	b00c943a 	slli	r6,r22,16
    e8e4:	0007883a 	mov	r3,zero
    e8e8:	3084b03a 	or	r2,r6,r2
    e8ec:	00005906 	br	ea54 <__udivdi3+0x2a0>
    e8f0:	29c05636 	bltu	r5,r7,ea4c <__udivdi3+0x298>
    e8f4:	00bfffd4 	movui	r2,65535
    e8f8:	11c0622e 	bgeu	r2,r7,ea84 <__udivdi3+0x2d0>
    e8fc:	00804034 	movhi	r2,256
    e900:	10bfffc4 	addi	r2,r2,-1
    e904:	11c0ee36 	bltu	r2,r7,ecc0 <__udivdi3+0x50c>
    e908:	00800404 	movi	r2,16
    e90c:	3886d83a 	srl	r3,r7,r2
    e910:	010000b4 	movhi	r4,2
    e914:	212df904 	addi	r4,r4,-18460
    e918:	20c7883a 	add	r3,r4,r3
    e91c:	18c00003 	ldbu	r3,0(r3)
    e920:	05400804 	movi	r21,32
    e924:	1885883a 	add	r2,r3,r2
    e928:	a8abc83a 	sub	r21,r21,r2
    e92c:	a800621e 	bne	r21,zero,eab8 <__udivdi3+0x304>
    e930:	3c00e936 	bltu	r7,r16,ecd8 <__udivdi3+0x524>
    e934:	9985403a 	cmpgeu	r2,r19,r6
    e938:	0007883a 	mov	r3,zero
    e93c:	00004506 	br	ea54 <__udivdi3+0x2a0>
    e940:	3000041e 	bne	r6,zero,e954 <__udivdi3+0x1a0>
    e944:	000b883a 	mov	r5,zero
    e948:	01000044 	movi	r4,1
    e94c:	00028600 	call	2860 <__udivsi3>
    e950:	1023883a 	mov	r17,r2
    e954:	00bfffd4 	movui	r2,65535
    e958:	14404e2e 	bgeu	r2,r17,ea94 <__udivdi3+0x2e0>
    e95c:	00804034 	movhi	r2,256
    e960:	10bfffc4 	addi	r2,r2,-1
    e964:	1440d836 	bltu	r2,r17,ecc8 <__udivdi3+0x514>
    e968:	00800404 	movi	r2,16
    e96c:	8886d83a 	srl	r3,r17,r2
    e970:	010000b4 	movhi	r4,2
    e974:	212df904 	addi	r4,r4,-18460
    e978:	20c7883a 	add	r3,r4,r3
    e97c:	18c00003 	ldbu	r3,0(r3)
    e980:	1885883a 	add	r2,r3,r2
    e984:	00c00804 	movi	r3,32
    e988:	1887c83a 	sub	r3,r3,r2
    e98c:	18008f1e 	bne	r3,zero,ebcc <__udivdi3+0x418>
    e990:	882ad43a 	srli	r21,r17,16
    e994:	8461c83a 	sub	r16,r16,r17
    e998:	8d3fffcc 	andi	r20,r17,65535
    e99c:	00c00044 	movi	r3,1
    e9a0:	8009883a 	mov	r4,r16
    e9a4:	a80b883a 	mov	r5,r21
    e9a8:	d8c00015 	stw	r3,0(sp)
    e9ac:	00028c40 	call	28c4 <__umodsi3>
    e9b0:	8009883a 	mov	r4,r16
    e9b4:	a80b883a 	mov	r5,r21
    e9b8:	1027883a 	mov	r19,r2
    e9bc:	00028600 	call	2860 <__udivsi3>
    e9c0:	9826943a 	slli	r19,r19,16
    e9c4:	9008d43a 	srli	r4,r18,16
    e9c8:	1521383a 	mul	r16,r2,r20
    e9cc:	102d883a 	mov	r22,r2
    e9d0:	24c8b03a 	or	r4,r4,r19
    e9d4:	d8c00017 	ldw	r3,0(sp)
    e9d8:	2400052e 	bgeu	r4,r16,e9f0 <__udivdi3+0x23c>
    e9dc:	2449883a 	add	r4,r4,r17
    e9e0:	b0bfffc4 	addi	r2,r22,-1
    e9e4:	24400136 	bltu	r4,r17,e9ec <__udivdi3+0x238>
    e9e8:	2400ca36 	bltu	r4,r16,ed14 <__udivdi3+0x560>
    e9ec:	102d883a 	mov	r22,r2
    e9f0:	2421c83a 	sub	r16,r4,r16
    e9f4:	a80b883a 	mov	r5,r21
    e9f8:	8009883a 	mov	r4,r16
    e9fc:	d8c00015 	stw	r3,0(sp)
    ea00:	00028c40 	call	28c4 <__umodsi3>
    ea04:	1027883a 	mov	r19,r2
    ea08:	a80b883a 	mov	r5,r21
    ea0c:	8009883a 	mov	r4,r16
    ea10:	00028600 	call	2860 <__udivsi3>
    ea14:	9826943a 	slli	r19,r19,16
    ea18:	1529383a 	mul	r20,r2,r20
    ea1c:	94bfffcc 	andi	r18,r18,65535
    ea20:	94e4b03a 	or	r18,r18,r19
    ea24:	d8c00017 	ldw	r3,0(sp)
    ea28:	9500052e 	bgeu	r18,r20,ea40 <__udivdi3+0x28c>
    ea2c:	8ca5883a 	add	r18,r17,r18
    ea30:	113fffc4 	addi	r4,r2,-1
    ea34:	94409736 	bltu	r18,r17,ec94 <__udivdi3+0x4e0>
    ea38:	9500962e 	bgeu	r18,r20,ec94 <__udivdi3+0x4e0>
    ea3c:	10bfff84 	addi	r2,r2,-2
    ea40:	b00c943a 	slli	r6,r22,16
    ea44:	3084b03a 	or	r2,r6,r2
    ea48:	00000206 	br	ea54 <__udivdi3+0x2a0>
    ea4c:	0007883a 	mov	r3,zero
    ea50:	0005883a 	mov	r2,zero
    ea54:	dfc00a17 	ldw	ra,40(sp)
    ea58:	df000917 	ldw	fp,36(sp)
    ea5c:	ddc00817 	ldw	r23,32(sp)
    ea60:	dd800717 	ldw	r22,28(sp)
    ea64:	dd400617 	ldw	r21,24(sp)
    ea68:	dd000517 	ldw	r20,20(sp)
    ea6c:	dcc00417 	ldw	r19,16(sp)
    ea70:	dc800317 	ldw	r18,12(sp)
    ea74:	dc400217 	ldw	r17,8(sp)
    ea78:	dc000117 	ldw	r16,4(sp)
    ea7c:	dec00b04 	addi	sp,sp,44
    ea80:	f800283a 	ret
    ea84:	00803fc4 	movi	r2,255
    ea88:	11c5803a 	cmpltu	r2,r2,r7
    ea8c:	100490fa 	slli	r2,r2,3
    ea90:	003f9e06 	br	e90c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e90c>
    ea94:	00803fc4 	movi	r2,255
    ea98:	1445803a 	cmpltu	r2,r2,r17
    ea9c:	100490fa 	slli	r2,r2,3
    eaa0:	003fb206 	br	e96c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e96c>
    eaa4:	00804034 	movhi	r2,256
    eaa8:	10bfffc4 	addi	r2,r2,-1
    eaac:	11808836 	bltu	r2,r6,ecd0 <__udivdi3+0x51c>
    eab0:	00800404 	movi	r2,16
    eab4:	003f5606 	br	e810 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e810>
    eab8:	30aed83a 	srl	r23,r6,r2
    eabc:	3d4e983a 	sll	r7,r7,r21
    eac0:	80acd83a 	srl	r22,r16,r2
    eac4:	9884d83a 	srl	r2,r19,r2
    eac8:	3deeb03a 	or	r23,r7,r23
    eacc:	b824d43a 	srli	r18,r23,16
    ead0:	8560983a 	sll	r16,r16,r21
    ead4:	b009883a 	mov	r4,r22
    ead8:	900b883a 	mov	r5,r18
    eadc:	3568983a 	sll	r20,r6,r21
    eae0:	1420b03a 	or	r16,r2,r16
    eae4:	00028c40 	call	28c4 <__umodsi3>
    eae8:	b009883a 	mov	r4,r22
    eaec:	900b883a 	mov	r5,r18
    eaf0:	1023883a 	mov	r17,r2
    eaf4:	00028600 	call	2860 <__udivsi3>
    eaf8:	8808943a 	slli	r4,r17,16
    eafc:	bf3fffcc 	andi	fp,r23,65535
    eb00:	8006d43a 	srli	r3,r16,16
    eb04:	e0a3383a 	mul	r17,fp,r2
    eb08:	100d883a 	mov	r6,r2
    eb0c:	1906b03a 	or	r3,r3,r4
    eb10:	1c40042e 	bgeu	r3,r17,eb24 <__udivdi3+0x370>
    eb14:	1dc7883a 	add	r3,r3,r23
    eb18:	10bfffc4 	addi	r2,r2,-1
    eb1c:	1dc0752e 	bgeu	r3,r23,ecf4 <__udivdi3+0x540>
    eb20:	100d883a 	mov	r6,r2
    eb24:	1c63c83a 	sub	r17,r3,r17
    eb28:	900b883a 	mov	r5,r18
    eb2c:	8809883a 	mov	r4,r17
    eb30:	d9800015 	stw	r6,0(sp)
    eb34:	00028c40 	call	28c4 <__umodsi3>
    eb38:	102d883a 	mov	r22,r2
    eb3c:	8809883a 	mov	r4,r17
    eb40:	900b883a 	mov	r5,r18
    eb44:	00028600 	call	2860 <__udivsi3>
    eb48:	b02c943a 	slli	r22,r22,16
    eb4c:	e089383a 	mul	r4,fp,r2
    eb50:	843fffcc 	andi	r16,r16,65535
    eb54:	85a0b03a 	or	r16,r16,r22
    eb58:	d9800017 	ldw	r6,0(sp)
    eb5c:	8100042e 	bgeu	r16,r4,eb70 <__udivdi3+0x3bc>
    eb60:	85e1883a 	add	r16,r16,r23
    eb64:	10ffffc4 	addi	r3,r2,-1
    eb68:	85c05e2e 	bgeu	r16,r23,ece4 <__udivdi3+0x530>
    eb6c:	1805883a 	mov	r2,r3
    eb70:	300c943a 	slli	r6,r6,16
    eb74:	a17fffcc 	andi	r5,r20,65535
    eb78:	a028d43a 	srli	r20,r20,16
    eb7c:	3084b03a 	or	r2,r6,r2
    eb80:	10ffffcc 	andi	r3,r2,65535
    eb84:	100cd43a 	srli	r6,r2,16
    eb88:	194f383a 	mul	r7,r3,r5
    eb8c:	1d07383a 	mul	r3,r3,r20
    eb90:	314b383a 	mul	r5,r6,r5
    eb94:	3810d43a 	srli	r8,r7,16
    eb98:	8121c83a 	sub	r16,r16,r4
    eb9c:	1947883a 	add	r3,r3,r5
    eba0:	40c7883a 	add	r3,r8,r3
    eba4:	350d383a 	mul	r6,r6,r20
    eba8:	1940022e 	bgeu	r3,r5,ebb4 <__udivdi3+0x400>
    ebac:	01000074 	movhi	r4,1
    ebb0:	310d883a 	add	r6,r6,r4
    ebb4:	1828d43a 	srli	r20,r3,16
    ebb8:	a18d883a 	add	r6,r20,r6
    ebbc:	81803e36 	bltu	r16,r6,ecb8 <__udivdi3+0x504>
    ebc0:	81803826 	beq	r16,r6,eca4 <__udivdi3+0x4f0>
    ebc4:	0007883a 	mov	r3,zero
    ebc8:	003fa206 	br	ea54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea54>
    ebcc:	88e2983a 	sll	r17,r17,r3
    ebd0:	80a8d83a 	srl	r20,r16,r2
    ebd4:	80e0983a 	sll	r16,r16,r3
    ebd8:	882ad43a 	srli	r21,r17,16
    ebdc:	9884d83a 	srl	r2,r19,r2
    ebe0:	a009883a 	mov	r4,r20
    ebe4:	a80b883a 	mov	r5,r21
    ebe8:	142eb03a 	or	r23,r2,r16
    ebec:	98e4983a 	sll	r18,r19,r3
    ebf0:	00028c40 	call	28c4 <__umodsi3>
    ebf4:	a009883a 	mov	r4,r20
    ebf8:	a80b883a 	mov	r5,r21
    ebfc:	1021883a 	mov	r16,r2
    ec00:	00028600 	call	2860 <__udivsi3>
    ec04:	1039883a 	mov	fp,r2
    ec08:	8d3fffcc 	andi	r20,r17,65535
    ec0c:	8020943a 	slli	r16,r16,16
    ec10:	b804d43a 	srli	r2,r23,16
    ec14:	a72d383a 	mul	r22,r20,fp
    ec18:	1404b03a 	or	r2,r2,r16
    ec1c:	1580062e 	bgeu	r2,r22,ec38 <__udivdi3+0x484>
    ec20:	1445883a 	add	r2,r2,r17
    ec24:	e0ffffc4 	addi	r3,fp,-1
    ec28:	14403836 	bltu	r2,r17,ed0c <__udivdi3+0x558>
    ec2c:	1580372e 	bgeu	r2,r22,ed0c <__udivdi3+0x558>
    ec30:	e73fff84 	addi	fp,fp,-2
    ec34:	1445883a 	add	r2,r2,r17
    ec38:	15adc83a 	sub	r22,r2,r22
    ec3c:	a80b883a 	mov	r5,r21
    ec40:	b009883a 	mov	r4,r22
    ec44:	00028c40 	call	28c4 <__umodsi3>
    ec48:	1027883a 	mov	r19,r2
    ec4c:	b009883a 	mov	r4,r22
    ec50:	a80b883a 	mov	r5,r21
    ec54:	00028600 	call	2860 <__udivsi3>
    ec58:	9826943a 	slli	r19,r19,16
    ec5c:	a0a1383a 	mul	r16,r20,r2
    ec60:	b93fffcc 	andi	r4,r23,65535
    ec64:	24c8b03a 	or	r4,r4,r19
    ec68:	2400062e 	bgeu	r4,r16,ec84 <__udivdi3+0x4d0>
    ec6c:	2449883a 	add	r4,r4,r17
    ec70:	10ffffc4 	addi	r3,r2,-1
    ec74:	24402336 	bltu	r4,r17,ed04 <__udivdi3+0x550>
    ec78:	2400222e 	bgeu	r4,r16,ed04 <__udivdi3+0x550>
    ec7c:	10bfff84 	addi	r2,r2,-2
    ec80:	2449883a 	add	r4,r4,r17
    ec84:	e038943a 	slli	fp,fp,16
    ec88:	2421c83a 	sub	r16,r4,r16
    ec8c:	e086b03a 	or	r3,fp,r2
    ec90:	003f4306 	br	e9a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e9a0>
    ec94:	2005883a 	mov	r2,r4
    ec98:	003f6906 	br	ea40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea40>
    ec9c:	1805883a 	mov	r2,r3
    eca0:	003f0f06 	br	e8e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e8e0>
    eca4:	1806943a 	slli	r3,r3,16
    eca8:	9d66983a 	sll	r19,r19,r21
    ecac:	39ffffcc 	andi	r7,r7,65535
    ecb0:	19c7883a 	add	r3,r3,r7
    ecb4:	98ffc32e 	bgeu	r19,r3,ebc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ebc4>
    ecb8:	10bfffc4 	addi	r2,r2,-1
    ecbc:	003fc106 	br	ebc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ebc4>
    ecc0:	00800604 	movi	r2,24
    ecc4:	003f1106 	br	e90c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e90c>
    ecc8:	00800604 	movi	r2,24
    eccc:	003f2706 	br	e96c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e96c>
    ecd0:	00800604 	movi	r2,24
    ecd4:	003ece06 	br	e810 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e810>
    ecd8:	0007883a 	mov	r3,zero
    ecdc:	00800044 	movi	r2,1
    ece0:	003f5c06 	br	ea54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea54>
    ece4:	813fa12e 	bgeu	r16,r4,eb6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eb6c>
    ece8:	10bfff84 	addi	r2,r2,-2
    ecec:	85e1883a 	add	r16,r16,r23
    ecf0:	003f9f06 	br	eb70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eb70>
    ecf4:	1c7f8a2e 	bgeu	r3,r17,eb20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eb20>
    ecf8:	31bfff84 	addi	r6,r6,-2
    ecfc:	1dc7883a 	add	r3,r3,r23
    ed00:	003f8806 	br	eb24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eb24>
    ed04:	1805883a 	mov	r2,r3
    ed08:	003fde06 	br	ec84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec84>
    ed0c:	1839883a 	mov	fp,r3
    ed10:	003fc906 	br	ec38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec38>
    ed14:	b5bfff84 	addi	r22,r22,-2
    ed18:	2449883a 	add	r4,r4,r17
    ed1c:	003f3406 	br	e9f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e9f0>
    ed20:	b5bfff84 	addi	r22,r22,-2
    ed24:	1445883a 	add	r2,r2,r17
    ed28:	003edb06 	br	e898 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e898>

0000ed2c <__umoddi3>:
    ed2c:	defff404 	addi	sp,sp,-48
    ed30:	df000a15 	stw	fp,40(sp)
    ed34:	dc400315 	stw	r17,12(sp)
    ed38:	dc000215 	stw	r16,8(sp)
    ed3c:	dfc00b15 	stw	ra,44(sp)
    ed40:	ddc00915 	stw	r23,36(sp)
    ed44:	dd800815 	stw	r22,32(sp)
    ed48:	dd400715 	stw	r21,28(sp)
    ed4c:	dd000615 	stw	r20,24(sp)
    ed50:	dcc00515 	stw	r19,20(sp)
    ed54:	dc800415 	stw	r18,16(sp)
    ed58:	2021883a 	mov	r16,r4
    ed5c:	2823883a 	mov	r17,r5
    ed60:	2839883a 	mov	fp,r5
    ed64:	38003c1e 	bne	r7,zero,ee58 <__umoddi3+0x12c>
    ed68:	3027883a 	mov	r19,r6
    ed6c:	2029883a 	mov	r20,r4
    ed70:	2980512e 	bgeu	r5,r6,eeb8 <__umoddi3+0x18c>
    ed74:	00bfffd4 	movui	r2,65535
    ed78:	11809a36 	bltu	r2,r6,efe4 <__umoddi3+0x2b8>
    ed7c:	01003fc4 	movi	r4,255
    ed80:	2189803a 	cmpltu	r4,r4,r6
    ed84:	200890fa 	slli	r4,r4,3
    ed88:	3104d83a 	srl	r2,r6,r4
    ed8c:	00c000b4 	movhi	r3,2
    ed90:	18edf904 	addi	r3,r3,-18460
    ed94:	1885883a 	add	r2,r3,r2
    ed98:	10c00003 	ldbu	r3,0(r2)
    ed9c:	00800804 	movi	r2,32
    eda0:	1909883a 	add	r4,r3,r4
    eda4:	1125c83a 	sub	r18,r2,r4
    eda8:	90000526 	beq	r18,zero,edc0 <__umoddi3+0x94>
    edac:	8ca2983a 	sll	r17,r17,r18
    edb0:	8108d83a 	srl	r4,r16,r4
    edb4:	34a6983a 	sll	r19,r6,r18
    edb8:	84a8983a 	sll	r20,r16,r18
    edbc:	2478b03a 	or	fp,r4,r17
    edc0:	982ed43a 	srli	r23,r19,16
    edc4:	e009883a 	mov	r4,fp
    edc8:	9dbfffcc 	andi	r22,r19,65535
    edcc:	b80b883a 	mov	r5,r23
    edd0:	00028c40 	call	28c4 <__umodsi3>
    edd4:	e009883a 	mov	r4,fp
    edd8:	b80b883a 	mov	r5,r23
    eddc:	102b883a 	mov	r21,r2
    ede0:	00028600 	call	2860 <__udivsi3>
    ede4:	a806943a 	slli	r3,r21,16
    ede8:	a008d43a 	srli	r4,r20,16
    edec:	b085383a 	mul	r2,r22,r2
    edf0:	20c8b03a 	or	r4,r4,r3
    edf4:	2080032e 	bgeu	r4,r2,ee04 <__umoddi3+0xd8>
    edf8:	24c9883a 	add	r4,r4,r19
    edfc:	24c00136 	bltu	r4,r19,ee04 <__umoddi3+0xd8>
    ee00:	20811036 	bltu	r4,r2,f244 <__umoddi3+0x518>
    ee04:	20abc83a 	sub	r21,r4,r2
    ee08:	b80b883a 	mov	r5,r23
    ee0c:	a809883a 	mov	r4,r21
    ee10:	00028c40 	call	28c4 <__umodsi3>
    ee14:	1023883a 	mov	r17,r2
    ee18:	b80b883a 	mov	r5,r23
    ee1c:	a809883a 	mov	r4,r21
    ee20:	00028600 	call	2860 <__udivsi3>
    ee24:	8822943a 	slli	r17,r17,16
    ee28:	b085383a 	mul	r2,r22,r2
    ee2c:	a0ffffcc 	andi	r3,r20,65535
    ee30:	1c46b03a 	or	r3,r3,r17
    ee34:	1880042e 	bgeu	r3,r2,ee48 <__umoddi3+0x11c>
    ee38:	1cc7883a 	add	r3,r3,r19
    ee3c:	1cc00236 	bltu	r3,r19,ee48 <__umoddi3+0x11c>
    ee40:	1880012e 	bgeu	r3,r2,ee48 <__umoddi3+0x11c>
    ee44:	1cc7883a 	add	r3,r3,r19
    ee48:	1885c83a 	sub	r2,r3,r2
    ee4c:	1484d83a 	srl	r2,r2,r18
    ee50:	0007883a 	mov	r3,zero
    ee54:	00004f06 	br	ef94 <__umoddi3+0x268>
    ee58:	29c04c36 	bltu	r5,r7,ef8c <__umoddi3+0x260>
    ee5c:	00bfffd4 	movui	r2,65535
    ee60:	11c0582e 	bgeu	r2,r7,efc4 <__umoddi3+0x298>
    ee64:	00804034 	movhi	r2,256
    ee68:	10bfffc4 	addi	r2,r2,-1
    ee6c:	11c0e736 	bltu	r2,r7,f20c <__umoddi3+0x4e0>
    ee70:	01000404 	movi	r4,16
    ee74:	3904d83a 	srl	r2,r7,r4
    ee78:	00c000b4 	movhi	r3,2
    ee7c:	18edf904 	addi	r3,r3,-18460
    ee80:	1885883a 	add	r2,r3,r2
    ee84:	14c00003 	ldbu	r19,0(r2)
    ee88:	00c00804 	movi	r3,32
    ee8c:	9927883a 	add	r19,r19,r4
    ee90:	1ce9c83a 	sub	r20,r3,r19
    ee94:	a000581e 	bne	r20,zero,eff8 <__umoddi3+0x2cc>
    ee98:	3c400136 	bltu	r7,r17,eea0 <__umoddi3+0x174>
    ee9c:	8180eb36 	bltu	r16,r6,f24c <__umoddi3+0x520>
    eea0:	8185c83a 	sub	r2,r16,r6
    eea4:	89e3c83a 	sub	r17,r17,r7
    eea8:	8089803a 	cmpltu	r4,r16,r2
    eeac:	8939c83a 	sub	fp,r17,r4
    eeb0:	e007883a 	mov	r3,fp
    eeb4:	00003706 	br	ef94 <__umoddi3+0x268>
    eeb8:	3000041e 	bne	r6,zero,eecc <__umoddi3+0x1a0>
    eebc:	000b883a 	mov	r5,zero
    eec0:	01000044 	movi	r4,1
    eec4:	00028600 	call	2860 <__udivsi3>
    eec8:	1027883a 	mov	r19,r2
    eecc:	00bfffd4 	movui	r2,65535
    eed0:	14c0402e 	bgeu	r2,r19,efd4 <__umoddi3+0x2a8>
    eed4:	00804034 	movhi	r2,256
    eed8:	10bfffc4 	addi	r2,r2,-1
    eedc:	14c0cd36 	bltu	r2,r19,f214 <__umoddi3+0x4e8>
    eee0:	00800404 	movi	r2,16
    eee4:	9886d83a 	srl	r3,r19,r2
    eee8:	010000b4 	movhi	r4,2
    eeec:	212df904 	addi	r4,r4,-18460
    eef0:	20c7883a 	add	r3,r4,r3
    eef4:	18c00003 	ldbu	r3,0(r3)
    eef8:	1887883a 	add	r3,r3,r2
    eefc:	00800804 	movi	r2,32
    ef00:	10e5c83a 	sub	r18,r2,r3
    ef04:	9000901e 	bne	r18,zero,f148 <__umoddi3+0x41c>
    ef08:	982cd43a 	srli	r22,r19,16
    ef0c:	8ce3c83a 	sub	r17,r17,r19
    ef10:	9d7fffcc 	andi	r21,r19,65535
    ef14:	b00b883a 	mov	r5,r22
    ef18:	8809883a 	mov	r4,r17
    ef1c:	00028c40 	call	28c4 <__umodsi3>
    ef20:	8809883a 	mov	r4,r17
    ef24:	b00b883a 	mov	r5,r22
    ef28:	1021883a 	mov	r16,r2
    ef2c:	00028600 	call	2860 <__udivsi3>
    ef30:	8006943a 	slli	r3,r16,16
    ef34:	a008d43a 	srli	r4,r20,16
    ef38:	1545383a 	mul	r2,r2,r21
    ef3c:	20c8b03a 	or	r4,r4,r3
    ef40:	2080042e 	bgeu	r4,r2,ef54 <__umoddi3+0x228>
    ef44:	24c9883a 	add	r4,r4,r19
    ef48:	24c00236 	bltu	r4,r19,ef54 <__umoddi3+0x228>
    ef4c:	2080012e 	bgeu	r4,r2,ef54 <__umoddi3+0x228>
    ef50:	24c9883a 	add	r4,r4,r19
    ef54:	20a1c83a 	sub	r16,r4,r2
    ef58:	b00b883a 	mov	r5,r22
    ef5c:	8009883a 	mov	r4,r16
    ef60:	00028c40 	call	28c4 <__umodsi3>
    ef64:	1023883a 	mov	r17,r2
    ef68:	b00b883a 	mov	r5,r22
    ef6c:	8009883a 	mov	r4,r16
    ef70:	00028600 	call	2860 <__udivsi3>
    ef74:	8822943a 	slli	r17,r17,16
    ef78:	1545383a 	mul	r2,r2,r21
    ef7c:	a53fffcc 	andi	r20,r20,65535
    ef80:	a446b03a 	or	r3,r20,r17
    ef84:	18bfb02e 	bgeu	r3,r2,ee48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee48>
    ef88:	003fab06 	br	ee38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee38>
    ef8c:	2005883a 	mov	r2,r4
    ef90:	2807883a 	mov	r3,r5
    ef94:	dfc00b17 	ldw	ra,44(sp)
    ef98:	df000a17 	ldw	fp,40(sp)
    ef9c:	ddc00917 	ldw	r23,36(sp)
    efa0:	dd800817 	ldw	r22,32(sp)
    efa4:	dd400717 	ldw	r21,28(sp)
    efa8:	dd000617 	ldw	r20,24(sp)
    efac:	dcc00517 	ldw	r19,20(sp)
    efb0:	dc800417 	ldw	r18,16(sp)
    efb4:	dc400317 	ldw	r17,12(sp)
    efb8:	dc000217 	ldw	r16,8(sp)
    efbc:	dec00c04 	addi	sp,sp,48
    efc0:	f800283a 	ret
    efc4:	04c03fc4 	movi	r19,255
    efc8:	99c9803a 	cmpltu	r4,r19,r7
    efcc:	200890fa 	slli	r4,r4,3
    efd0:	003fa806 	br	ee74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee74>
    efd4:	00803fc4 	movi	r2,255
    efd8:	14c5803a 	cmpltu	r2,r2,r19
    efdc:	100490fa 	slli	r2,r2,3
    efe0:	003fc006 	br	eee4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eee4>
    efe4:	00804034 	movhi	r2,256
    efe8:	10bfffc4 	addi	r2,r2,-1
    efec:	11808b36 	bltu	r2,r6,f21c <__umoddi3+0x4f0>
    eff0:	01000404 	movi	r4,16
    eff4:	003f6406 	br	ed88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ed88>
    eff8:	34c4d83a 	srl	r2,r6,r19
    effc:	3d0e983a 	sll	r7,r7,r20
    f000:	8cf8d83a 	srl	fp,r17,r19
    f004:	8d10983a 	sll	r8,r17,r20
    f008:	38aab03a 	or	r21,r7,r2
    f00c:	a82cd43a 	srli	r22,r21,16
    f010:	84e2d83a 	srl	r17,r16,r19
    f014:	e009883a 	mov	r4,fp
    f018:	b00b883a 	mov	r5,r22
    f01c:	8a22b03a 	or	r17,r17,r8
    f020:	3524983a 	sll	r18,r6,r20
    f024:	00028c40 	call	28c4 <__umodsi3>
    f028:	e009883a 	mov	r4,fp
    f02c:	b00b883a 	mov	r5,r22
    f030:	102f883a 	mov	r23,r2
    f034:	00028600 	call	2860 <__udivsi3>
    f038:	100d883a 	mov	r6,r2
    f03c:	b808943a 	slli	r4,r23,16
    f040:	aa3fffcc 	andi	r8,r21,65535
    f044:	8804d43a 	srli	r2,r17,16
    f048:	41af383a 	mul	r23,r8,r6
    f04c:	8520983a 	sll	r16,r16,r20
    f050:	1104b03a 	or	r2,r2,r4
    f054:	15c0042e 	bgeu	r2,r23,f068 <__umoddi3+0x33c>
    f058:	1545883a 	add	r2,r2,r21
    f05c:	30ffffc4 	addi	r3,r6,-1
    f060:	1540742e 	bgeu	r2,r21,f234 <__umoddi3+0x508>
    f064:	180d883a 	mov	r6,r3
    f068:	15efc83a 	sub	r23,r2,r23
    f06c:	b00b883a 	mov	r5,r22
    f070:	b809883a 	mov	r4,r23
    f074:	d9800115 	stw	r6,4(sp)
    f078:	da000015 	stw	r8,0(sp)
    f07c:	00028c40 	call	28c4 <__umodsi3>
    f080:	b00b883a 	mov	r5,r22
    f084:	b809883a 	mov	r4,r23
    f088:	1039883a 	mov	fp,r2
    f08c:	00028600 	call	2860 <__udivsi3>
    f090:	da000017 	ldw	r8,0(sp)
    f094:	e038943a 	slli	fp,fp,16
    f098:	100b883a 	mov	r5,r2
    f09c:	4089383a 	mul	r4,r8,r2
    f0a0:	8a3fffcc 	andi	r8,r17,65535
    f0a4:	4710b03a 	or	r8,r8,fp
    f0a8:	d9800117 	ldw	r6,4(sp)
    f0ac:	4100042e 	bgeu	r8,r4,f0c0 <__umoddi3+0x394>
    f0b0:	4551883a 	add	r8,r8,r21
    f0b4:	10bfffc4 	addi	r2,r2,-1
    f0b8:	45405a2e 	bgeu	r8,r21,f224 <__umoddi3+0x4f8>
    f0bc:	100b883a 	mov	r5,r2
    f0c0:	300c943a 	slli	r6,r6,16
    f0c4:	91ffffcc 	andi	r7,r18,65535
    f0c8:	9004d43a 	srli	r2,r18,16
    f0cc:	314cb03a 	or	r6,r6,r5
    f0d0:	317fffcc 	andi	r5,r6,65535
    f0d4:	300cd43a 	srli	r6,r6,16
    f0d8:	29d3383a 	mul	r9,r5,r7
    f0dc:	288b383a 	mul	r5,r5,r2
    f0e0:	31cf383a 	mul	r7,r6,r7
    f0e4:	4806d43a 	srli	r3,r9,16
    f0e8:	4111c83a 	sub	r8,r8,r4
    f0ec:	29cb883a 	add	r5,r5,r7
    f0f0:	194b883a 	add	r5,r3,r5
    f0f4:	3085383a 	mul	r2,r6,r2
    f0f8:	29c0022e 	bgeu	r5,r7,f104 <__umoddi3+0x3d8>
    f0fc:	00c00074 	movhi	r3,1
    f100:	10c5883a 	add	r2,r2,r3
    f104:	2808d43a 	srli	r4,r5,16
    f108:	280a943a 	slli	r5,r5,16
    f10c:	4a7fffcc 	andi	r9,r9,65535
    f110:	2085883a 	add	r2,r4,r2
    f114:	2a4b883a 	add	r5,r5,r9
    f118:	40803636 	bltu	r8,r2,f1f4 <__umoddi3+0x4c8>
    f11c:	40804d26 	beq	r8,r2,f254 <__umoddi3+0x528>
    f120:	4089c83a 	sub	r4,r8,r2
    f124:	280f883a 	mov	r7,r5
    f128:	81cfc83a 	sub	r7,r16,r7
    f12c:	81c7803a 	cmpltu	r3,r16,r7
    f130:	20c7c83a 	sub	r3,r4,r3
    f134:	1cc4983a 	sll	r2,r3,r19
    f138:	3d0ed83a 	srl	r7,r7,r20
    f13c:	1d06d83a 	srl	r3,r3,r20
    f140:	11c4b03a 	or	r2,r2,r7
    f144:	003f9306 	br	ef94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef94>
    f148:	9ca6983a 	sll	r19,r19,r18
    f14c:	88e8d83a 	srl	r20,r17,r3
    f150:	80c4d83a 	srl	r2,r16,r3
    f154:	982cd43a 	srli	r22,r19,16
    f158:	8ca2983a 	sll	r17,r17,r18
    f15c:	a009883a 	mov	r4,r20
    f160:	b00b883a 	mov	r5,r22
    f164:	1478b03a 	or	fp,r2,r17
    f168:	00028c40 	call	28c4 <__umodsi3>
    f16c:	a009883a 	mov	r4,r20
    f170:	b00b883a 	mov	r5,r22
    f174:	1023883a 	mov	r17,r2
    f178:	00028600 	call	2860 <__udivsi3>
    f17c:	9d7fffcc 	andi	r21,r19,65535
    f180:	880a943a 	slli	r5,r17,16
    f184:	e008d43a 	srli	r4,fp,16
    f188:	a885383a 	mul	r2,r21,r2
    f18c:	84a8983a 	sll	r20,r16,r18
    f190:	2148b03a 	or	r4,r4,r5
    f194:	2080042e 	bgeu	r4,r2,f1a8 <__umoddi3+0x47c>
    f198:	24c9883a 	add	r4,r4,r19
    f19c:	24c00236 	bltu	r4,r19,f1a8 <__umoddi3+0x47c>
    f1a0:	2080012e 	bgeu	r4,r2,f1a8 <__umoddi3+0x47c>
    f1a4:	24c9883a 	add	r4,r4,r19
    f1a8:	20a3c83a 	sub	r17,r4,r2
    f1ac:	b00b883a 	mov	r5,r22
    f1b0:	8809883a 	mov	r4,r17
    f1b4:	00028c40 	call	28c4 <__umodsi3>
    f1b8:	102f883a 	mov	r23,r2
    f1bc:	8809883a 	mov	r4,r17
    f1c0:	b00b883a 	mov	r5,r22
    f1c4:	00028600 	call	2860 <__udivsi3>
    f1c8:	b82e943a 	slli	r23,r23,16
    f1cc:	a885383a 	mul	r2,r21,r2
    f1d0:	e13fffcc 	andi	r4,fp,65535
    f1d4:	25c8b03a 	or	r4,r4,r23
    f1d8:	2080042e 	bgeu	r4,r2,f1ec <__umoddi3+0x4c0>
    f1dc:	24c9883a 	add	r4,r4,r19
    f1e0:	24c00236 	bltu	r4,r19,f1ec <__umoddi3+0x4c0>
    f1e4:	2080012e 	bgeu	r4,r2,f1ec <__umoddi3+0x4c0>
    f1e8:	24c9883a 	add	r4,r4,r19
    f1ec:	20a3c83a 	sub	r17,r4,r2
    f1f0:	003f4806 	br	ef14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef14>
    f1f4:	2c8fc83a 	sub	r7,r5,r18
    f1f8:	1545c83a 	sub	r2,r2,r21
    f1fc:	29cb803a 	cmpltu	r5,r5,r7
    f200:	1145c83a 	sub	r2,r2,r5
    f204:	4089c83a 	sub	r4,r8,r2
    f208:	003fc706 	br	f128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f128>
    f20c:	01000604 	movi	r4,24
    f210:	003f1806 	br	ee74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee74>
    f214:	00800604 	movi	r2,24
    f218:	003f3206 	br	eee4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eee4>
    f21c:	01000604 	movi	r4,24
    f220:	003ed906 	br	ed88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ed88>
    f224:	413fa52e 	bgeu	r8,r4,f0bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f0bc>
    f228:	297fff84 	addi	r5,r5,-2
    f22c:	4551883a 	add	r8,r8,r21
    f230:	003fa306 	br	f0c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f0c0>
    f234:	15ff8b2e 	bgeu	r2,r23,f064 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f064>
    f238:	31bfff84 	addi	r6,r6,-2
    f23c:	1545883a 	add	r2,r2,r21
    f240:	003f8906 	br	f068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f068>
    f244:	24c9883a 	add	r4,r4,r19
    f248:	003eee06 	br	ee04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee04>
    f24c:	8005883a 	mov	r2,r16
    f250:	003f1706 	br	eeb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eeb0>
    f254:	817fe736 	bltu	r16,r5,f1f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f1f4>
    f258:	280f883a 	mov	r7,r5
    f25c:	0009883a 	mov	r4,zero
    f260:	003fb106 	br	f128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f128>

0000f264 <__ledf2>:
    f264:	2804d53a 	srli	r2,r5,20
    f268:	3810d53a 	srli	r8,r7,20
    f26c:	00c00434 	movhi	r3,16
    f270:	18ffffc4 	addi	r3,r3,-1
    f274:	1081ffcc 	andi	r2,r2,2047
    f278:	0241ffc4 	movi	r9,2047
    f27c:	28d4703a 	and	r10,r5,r3
    f280:	4201ffcc 	andi	r8,r8,2047
    f284:	38c6703a 	and	r3,r7,r3
    f288:	280ad7fa 	srli	r5,r5,31
    f28c:	380ed7fa 	srli	r7,r7,31
    f290:	12401f26 	beq	r2,r9,f310 <__ledf2+0xac>
    f294:	0241ffc4 	movi	r9,2047
    f298:	42401426 	beq	r8,r9,f2ec <__ledf2+0x88>
    f29c:	1000091e 	bne	r2,zero,f2c4 <__ledf2+0x60>
    f2a0:	2296b03a 	or	r11,r4,r10
    f2a4:	5813003a 	cmpeq	r9,r11,zero
    f2a8:	29403fcc 	andi	r5,r5,255
    f2ac:	40000a1e 	bne	r8,zero,f2d8 <__ledf2+0x74>
    f2b0:	30d8b03a 	or	r12,r6,r3
    f2b4:	6000081e 	bne	r12,zero,f2d8 <__ledf2+0x74>
    f2b8:	0005883a 	mov	r2,zero
    f2bc:	5800111e 	bne	r11,zero,f304 <__ledf2+0xa0>
    f2c0:	f800283a 	ret
    f2c4:	29403fcc 	andi	r5,r5,255
    f2c8:	40000c1e 	bne	r8,zero,f2fc <__ledf2+0x98>
    f2cc:	30d2b03a 	or	r9,r6,r3
    f2d0:	48000c26 	beq	r9,zero,f304 <__ledf2+0xa0>
    f2d4:	0013883a 	mov	r9,zero
    f2d8:	39c03fcc 	andi	r7,r7,255
    f2dc:	48000826 	beq	r9,zero,f300 <__ledf2+0x9c>
    f2e0:	38001126 	beq	r7,zero,f328 <__ledf2+0xc4>
    f2e4:	00800044 	movi	r2,1
    f2e8:	f800283a 	ret
    f2ec:	30d2b03a 	or	r9,r6,r3
    f2f0:	483fea26 	beq	r9,zero,f29c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f29c>
    f2f4:	00800084 	movi	r2,2
    f2f8:	f800283a 	ret
    f2fc:	39c03fcc 	andi	r7,r7,255
    f300:	39400726 	beq	r7,r5,f320 <__ledf2+0xbc>
    f304:	2800081e 	bne	r5,zero,f328 <__ledf2+0xc4>
    f308:	00800044 	movi	r2,1
    f30c:	f800283a 	ret
    f310:	2292b03a 	or	r9,r4,r10
    f314:	483fdf26 	beq	r9,zero,f294 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f294>
    f318:	00800084 	movi	r2,2
    f31c:	f800283a 	ret
    f320:	4080030e 	bge	r8,r2,f330 <__ledf2+0xcc>
    f324:	383fef26 	beq	r7,zero,f2e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f2e4>
    f328:	00bfffc4 	movi	r2,-1
    f32c:	f800283a 	ret
    f330:	123feb16 	blt	r2,r8,f2e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f2e0>
    f334:	1abff336 	bltu	r3,r10,f304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f304>
    f338:	50c00326 	beq	r10,r3,f348 <__ledf2+0xe4>
    f33c:	50c0042e 	bgeu	r10,r3,f350 <__ledf2+0xec>
    f340:	283fe81e 	bne	r5,zero,f2e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f2e4>
    f344:	003ff806 	br	f328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f328>
    f348:	313fee36 	bltu	r6,r4,f304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f304>
    f34c:	21bffc36 	bltu	r4,r6,f340 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f340>
    f350:	0005883a 	mov	r2,zero
    f354:	f800283a 	ret

0000f358 <__floatunsidf>:
    f358:	defffe04 	addi	sp,sp,-8
    f35c:	dc000015 	stw	r16,0(sp)
    f360:	dfc00115 	stw	ra,4(sp)
    f364:	2021883a 	mov	r16,r4
    f368:	20002226 	beq	r4,zero,f3f4 <__floatunsidf+0x9c>
    f36c:	00051d00 	call	51d0 <__clzsi2>
    f370:	01010784 	movi	r4,1054
    f374:	2089c83a 	sub	r4,r4,r2
    f378:	01810cc4 	movi	r6,1075
    f37c:	310dc83a 	sub	r6,r6,r4
    f380:	00c007c4 	movi	r3,31
    f384:	1980120e 	bge	r3,r6,f3d0 <__floatunsidf+0x78>
    f388:	00c104c4 	movi	r3,1043
    f38c:	1907c83a 	sub	r3,r3,r4
    f390:	80ca983a 	sll	r5,r16,r3
    f394:	00800434 	movhi	r2,16
    f398:	10bfffc4 	addi	r2,r2,-1
    f39c:	2101ffcc 	andi	r4,r4,2047
    f3a0:	0021883a 	mov	r16,zero
    f3a4:	288a703a 	and	r5,r5,r2
    f3a8:	2008953a 	slli	r4,r4,20
    f3ac:	00c00434 	movhi	r3,16
    f3b0:	18ffffc4 	addi	r3,r3,-1
    f3b4:	28c6703a 	and	r3,r5,r3
    f3b8:	8005883a 	mov	r2,r16
    f3bc:	1906b03a 	or	r3,r3,r4
    f3c0:	dfc00117 	ldw	ra,4(sp)
    f3c4:	dc000017 	ldw	r16,0(sp)
    f3c8:	dec00204 	addi	sp,sp,8
    f3cc:	f800283a 	ret
    f3d0:	00c002c4 	movi	r3,11
    f3d4:	188bc83a 	sub	r5,r3,r2
    f3d8:	814ad83a 	srl	r5,r16,r5
    f3dc:	00c00434 	movhi	r3,16
    f3e0:	18ffffc4 	addi	r3,r3,-1
    f3e4:	81a0983a 	sll	r16,r16,r6
    f3e8:	2101ffcc 	andi	r4,r4,2047
    f3ec:	28ca703a 	and	r5,r5,r3
    f3f0:	003fed06 	br	f3a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f3a8>
    f3f4:	0009883a 	mov	r4,zero
    f3f8:	000b883a 	mov	r5,zero
    f3fc:	003fea06 	br	f3a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f3a8>

0000f400 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f400:	defffe04 	addi	sp,sp,-8
    f404:	dfc00115 	stw	ra,4(sp)
    f408:	df000015 	stw	fp,0(sp)
    f40c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f410:	d0a00b17 	ldw	r2,-32724(gp)
    f414:	10000326 	beq	r2,zero,f424 <alt_get_errno+0x24>
    f418:	d0a00b17 	ldw	r2,-32724(gp)
    f41c:	103ee83a 	callr	r2
    f420:	00000106 	br	f428 <alt_get_errno+0x28>
    f424:	d0a80f04 	addi	r2,gp,-24516
}
    f428:	e037883a 	mov	sp,fp
    f42c:	dfc00117 	ldw	ra,4(sp)
    f430:	df000017 	ldw	fp,0(sp)
    f434:	dec00204 	addi	sp,sp,8
    f438:	f800283a 	ret

0000f43c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f43c:	defffb04 	addi	sp,sp,-20
    f440:	dfc00415 	stw	ra,16(sp)
    f444:	df000315 	stw	fp,12(sp)
    f448:	df000304 	addi	fp,sp,12
    f44c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f450:	e0bfff17 	ldw	r2,-4(fp)
    f454:	10000616 	blt	r2,zero,f470 <close+0x34>
    f458:	e0bfff17 	ldw	r2,-4(fp)
    f45c:	10c00324 	muli	r3,r2,12
    f460:	008000b4 	movhi	r2,2
    f464:	10b19a04 	addi	r2,r2,-14744
    f468:	1885883a 	add	r2,r3,r2
    f46c:	00000106 	br	f474 <close+0x38>
    f470:	0005883a 	mov	r2,zero
    f474:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f478:	e0bffd17 	ldw	r2,-12(fp)
    f47c:	10001926 	beq	r2,zero,f4e4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f480:	e0bffd17 	ldw	r2,-12(fp)
    f484:	10800017 	ldw	r2,0(r2)
    f488:	10800417 	ldw	r2,16(r2)
    f48c:	10000626 	beq	r2,zero,f4a8 <close+0x6c>
    f490:	e0bffd17 	ldw	r2,-12(fp)
    f494:	10800017 	ldw	r2,0(r2)
    f498:	10800417 	ldw	r2,16(r2)
    f49c:	e13ffd17 	ldw	r4,-12(fp)
    f4a0:	103ee83a 	callr	r2
    f4a4:	00000106 	br	f4ac <close+0x70>
    f4a8:	0005883a 	mov	r2,zero
    f4ac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f4b0:	e13fff17 	ldw	r4,-4(fp)
    f4b4:	000faf40 	call	faf4 <alt_release_fd>
    if (rval < 0)
    f4b8:	e0bffe17 	ldw	r2,-8(fp)
    f4bc:	1000070e 	bge	r2,zero,f4dc <close+0xa0>
    {
      ALT_ERRNO = -rval;
    f4c0:	000f4000 	call	f400 <alt_get_errno>
    f4c4:	1007883a 	mov	r3,r2
    f4c8:	e0bffe17 	ldw	r2,-8(fp)
    f4cc:	0085c83a 	sub	r2,zero,r2
    f4d0:	18800015 	stw	r2,0(r3)
      return -1;
    f4d4:	00bfffc4 	movi	r2,-1
    f4d8:	00000706 	br	f4f8 <close+0xbc>
    }
    return 0;
    f4dc:	0005883a 	mov	r2,zero
    f4e0:	00000506 	br	f4f8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f4e4:	000f4000 	call	f400 <alt_get_errno>
    f4e8:	1007883a 	mov	r3,r2
    f4ec:	00801444 	movi	r2,81
    f4f0:	18800015 	stw	r2,0(r3)
    return -1;
    f4f4:	00bfffc4 	movi	r2,-1
  }
}
    f4f8:	e037883a 	mov	sp,fp
    f4fc:	dfc00117 	ldw	ra,4(sp)
    f500:	df000017 	ldw	fp,0(sp)
    f504:	dec00204 	addi	sp,sp,8
    f508:	f800283a 	ret

0000f50c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f50c:	defffc04 	addi	sp,sp,-16
    f510:	df000315 	stw	fp,12(sp)
    f514:	df000304 	addi	fp,sp,12
    f518:	e13ffd15 	stw	r4,-12(fp)
    f51c:	e17ffe15 	stw	r5,-8(fp)
    f520:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f524:	e0bfff17 	ldw	r2,-4(fp)
}
    f528:	e037883a 	mov	sp,fp
    f52c:	df000017 	ldw	fp,0(sp)
    f530:	dec00104 	addi	sp,sp,4
    f534:	f800283a 	ret

0000f538 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f538:	defffe04 	addi	sp,sp,-8
    f53c:	dfc00115 	stw	ra,4(sp)
    f540:	df000015 	stw	fp,0(sp)
    f544:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f548:	d0a00b17 	ldw	r2,-32724(gp)
    f54c:	10000326 	beq	r2,zero,f55c <alt_get_errno+0x24>
    f550:	d0a00b17 	ldw	r2,-32724(gp)
    f554:	103ee83a 	callr	r2
    f558:	00000106 	br	f560 <alt_get_errno+0x28>
    f55c:	d0a80f04 	addi	r2,gp,-24516
}
    f560:	e037883a 	mov	sp,fp
    f564:	dfc00117 	ldw	ra,4(sp)
    f568:	df000017 	ldw	fp,0(sp)
    f56c:	dec00204 	addi	sp,sp,8
    f570:	f800283a 	ret

0000f574 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f574:	defffb04 	addi	sp,sp,-20
    f578:	dfc00415 	stw	ra,16(sp)
    f57c:	df000315 	stw	fp,12(sp)
    f580:	df000304 	addi	fp,sp,12
    f584:	e13ffe15 	stw	r4,-8(fp)
    f588:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f58c:	e0bffe17 	ldw	r2,-8(fp)
    f590:	10000616 	blt	r2,zero,f5ac <fstat+0x38>
    f594:	e0bffe17 	ldw	r2,-8(fp)
    f598:	10c00324 	muli	r3,r2,12
    f59c:	008000b4 	movhi	r2,2
    f5a0:	10b19a04 	addi	r2,r2,-14744
    f5a4:	1885883a 	add	r2,r3,r2
    f5a8:	00000106 	br	f5b0 <fstat+0x3c>
    f5ac:	0005883a 	mov	r2,zero
    f5b0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f5b4:	e0bffd17 	ldw	r2,-12(fp)
    f5b8:	10001026 	beq	r2,zero,f5fc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f5bc:	e0bffd17 	ldw	r2,-12(fp)
    f5c0:	10800017 	ldw	r2,0(r2)
    f5c4:	10800817 	ldw	r2,32(r2)
    f5c8:	10000726 	beq	r2,zero,f5e8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    f5cc:	e0bffd17 	ldw	r2,-12(fp)
    f5d0:	10800017 	ldw	r2,0(r2)
    f5d4:	10800817 	ldw	r2,32(r2)
    f5d8:	e17fff17 	ldw	r5,-4(fp)
    f5dc:	e13ffd17 	ldw	r4,-12(fp)
    f5e0:	103ee83a 	callr	r2
    f5e4:	00000a06 	br	f610 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f5e8:	e0bfff17 	ldw	r2,-4(fp)
    f5ec:	00c80004 	movi	r3,8192
    f5f0:	10c00115 	stw	r3,4(r2)
      return 0;
    f5f4:	0005883a 	mov	r2,zero
    f5f8:	00000506 	br	f610 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f5fc:	000f5380 	call	f538 <alt_get_errno>
    f600:	1007883a 	mov	r3,r2
    f604:	00801444 	movi	r2,81
    f608:	18800015 	stw	r2,0(r3)
    return -1;
    f60c:	00bfffc4 	movi	r2,-1
  }
}
    f610:	e037883a 	mov	sp,fp
    f614:	dfc00117 	ldw	ra,4(sp)
    f618:	df000017 	ldw	fp,0(sp)
    f61c:	dec00204 	addi	sp,sp,8
    f620:	f800283a 	ret

0000f624 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f624:	defffe04 	addi	sp,sp,-8
    f628:	dfc00115 	stw	ra,4(sp)
    f62c:	df000015 	stw	fp,0(sp)
    f630:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f634:	d0a00b17 	ldw	r2,-32724(gp)
    f638:	10000326 	beq	r2,zero,f648 <alt_get_errno+0x24>
    f63c:	d0a00b17 	ldw	r2,-32724(gp)
    f640:	103ee83a 	callr	r2
    f644:	00000106 	br	f64c <alt_get_errno+0x28>
    f648:	d0a80f04 	addi	r2,gp,-24516
}
    f64c:	e037883a 	mov	sp,fp
    f650:	dfc00117 	ldw	ra,4(sp)
    f654:	df000017 	ldw	fp,0(sp)
    f658:	dec00204 	addi	sp,sp,8
    f65c:	f800283a 	ret

0000f660 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f660:	deffed04 	addi	sp,sp,-76
    f664:	dfc01215 	stw	ra,72(sp)
    f668:	df001115 	stw	fp,68(sp)
    f66c:	df001104 	addi	fp,sp,68
    f670:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f674:	e0bfff17 	ldw	r2,-4(fp)
    f678:	10000616 	blt	r2,zero,f694 <isatty+0x34>
    f67c:	e0bfff17 	ldw	r2,-4(fp)
    f680:	10c00324 	muli	r3,r2,12
    f684:	008000b4 	movhi	r2,2
    f688:	10b19a04 	addi	r2,r2,-14744
    f68c:	1885883a 	add	r2,r3,r2
    f690:	00000106 	br	f698 <isatty+0x38>
    f694:	0005883a 	mov	r2,zero
    f698:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f69c:	e0bfef17 	ldw	r2,-68(fp)
    f6a0:	10000e26 	beq	r2,zero,f6dc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f6a4:	e0bfef17 	ldw	r2,-68(fp)
    f6a8:	10800017 	ldw	r2,0(r2)
    f6ac:	10800817 	ldw	r2,32(r2)
    f6b0:	1000021e 	bne	r2,zero,f6bc <isatty+0x5c>
    {
      return 1;
    f6b4:	00800044 	movi	r2,1
    f6b8:	00000d06 	br	f6f0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f6bc:	e0bff004 	addi	r2,fp,-64
    f6c0:	100b883a 	mov	r5,r2
    f6c4:	e13fff17 	ldw	r4,-4(fp)
    f6c8:	000f5740 	call	f574 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f6cc:	e0bff117 	ldw	r2,-60(fp)
    f6d0:	10880020 	cmpeqi	r2,r2,8192
    f6d4:	10803fcc 	andi	r2,r2,255
    f6d8:	00000506 	br	f6f0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f6dc:	000f6240 	call	f624 <alt_get_errno>
    f6e0:	1007883a 	mov	r3,r2
    f6e4:	00801444 	movi	r2,81
    f6e8:	18800015 	stw	r2,0(r3)
    return 0;
    f6ec:	0005883a 	mov	r2,zero
  }
}
    f6f0:	e037883a 	mov	sp,fp
    f6f4:	dfc00117 	ldw	ra,4(sp)
    f6f8:	df000017 	ldw	fp,0(sp)
    f6fc:	dec00204 	addi	sp,sp,8
    f700:	f800283a 	ret

0000f704 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f704:	defffc04 	addi	sp,sp,-16
    f708:	df000315 	stw	fp,12(sp)
    f70c:	df000304 	addi	fp,sp,12
    f710:	e13ffd15 	stw	r4,-12(fp)
    f714:	e17ffe15 	stw	r5,-8(fp)
    f718:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f71c:	e0fffe17 	ldw	r3,-8(fp)
    f720:	e0bffd17 	ldw	r2,-12(fp)
    f724:	18800c26 	beq	r3,r2,f758 <alt_load_section+0x54>
  {
    while( to != end )
    f728:	00000806 	br	f74c <alt_load_section+0x48>
    {
      *to++ = *from++;
    f72c:	e0bffe17 	ldw	r2,-8(fp)
    f730:	10c00104 	addi	r3,r2,4
    f734:	e0fffe15 	stw	r3,-8(fp)
    f738:	e0fffd17 	ldw	r3,-12(fp)
    f73c:	19000104 	addi	r4,r3,4
    f740:	e13ffd15 	stw	r4,-12(fp)
    f744:	18c00017 	ldw	r3,0(r3)
    f748:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f74c:	e0fffe17 	ldw	r3,-8(fp)
    f750:	e0bfff17 	ldw	r2,-4(fp)
    f754:	18bff51e 	bne	r3,r2,f72c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f72c>
    {
      *to++ = *from++;
    }
  }
}
    f758:	0001883a 	nop
    f75c:	e037883a 	mov	sp,fp
    f760:	df000017 	ldw	fp,0(sp)
    f764:	dec00104 	addi	sp,sp,4
    f768:	f800283a 	ret

0000f76c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f76c:	defffe04 	addi	sp,sp,-8
    f770:	dfc00115 	stw	ra,4(sp)
    f774:	df000015 	stw	fp,0(sp)
    f778:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f77c:	018000b4 	movhi	r6,2
    f780:	31b74104 	addi	r6,r6,-8956
    f784:	014000b4 	movhi	r5,2
    f788:	296f6704 	addi	r5,r5,-16996
    f78c:	010000b4 	movhi	r4,2
    f790:	21374104 	addi	r4,r4,-8956
    f794:	000f7040 	call	f704 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f798:	01800034 	movhi	r6,0
    f79c:	31809204 	addi	r6,r6,584
    f7a0:	01400034 	movhi	r5,0
    f7a4:	29400804 	addi	r5,r5,32
    f7a8:	01000034 	movhi	r4,0
    f7ac:	21000804 	addi	r4,r4,32
    f7b0:	000f7040 	call	f704 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f7b4:	018000b4 	movhi	r6,2
    f7b8:	31af6704 	addi	r6,r6,-16996
    f7bc:	014000b4 	movhi	r5,2
    f7c0:	296d8204 	addi	r5,r5,-18936
    f7c4:	010000b4 	movhi	r4,2
    f7c8:	212d8204 	addi	r4,r4,-18936
    f7cc:	000f7040 	call	f704 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f7d0:	001a2ac0 	call	1a2ac <alt_dcache_flush_all>
  alt_icache_flush_all();
    f7d4:	001a4fc0 	call	1a4fc <alt_icache_flush_all>
}
    f7d8:	0001883a 	nop
    f7dc:	e037883a 	mov	sp,fp
    f7e0:	dfc00117 	ldw	ra,4(sp)
    f7e4:	df000017 	ldw	fp,0(sp)
    f7e8:	dec00204 	addi	sp,sp,8
    f7ec:	f800283a 	ret

0000f7f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f7f0:	defffe04 	addi	sp,sp,-8
    f7f4:	dfc00115 	stw	ra,4(sp)
    f7f8:	df000015 	stw	fp,0(sp)
    f7fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f800:	d0a00b17 	ldw	r2,-32724(gp)
    f804:	10000326 	beq	r2,zero,f814 <alt_get_errno+0x24>
    f808:	d0a00b17 	ldw	r2,-32724(gp)
    f80c:	103ee83a 	callr	r2
    f810:	00000106 	br	f818 <alt_get_errno+0x28>
    f814:	d0a80f04 	addi	r2,gp,-24516
}
    f818:	e037883a 	mov	sp,fp
    f81c:	dfc00117 	ldw	ra,4(sp)
    f820:	df000017 	ldw	fp,0(sp)
    f824:	dec00204 	addi	sp,sp,8
    f828:	f800283a 	ret

0000f82c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f82c:	defff904 	addi	sp,sp,-28
    f830:	dfc00615 	stw	ra,24(sp)
    f834:	df000515 	stw	fp,20(sp)
    f838:	df000504 	addi	fp,sp,20
    f83c:	e13ffd15 	stw	r4,-12(fp)
    f840:	e17ffe15 	stw	r5,-8(fp)
    f844:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f848:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f84c:	e0bffd17 	ldw	r2,-12(fp)
    f850:	10000616 	blt	r2,zero,f86c <lseek+0x40>
    f854:	e0bffd17 	ldw	r2,-12(fp)
    f858:	10c00324 	muli	r3,r2,12
    f85c:	008000b4 	movhi	r2,2
    f860:	10b19a04 	addi	r2,r2,-14744
    f864:	1885883a 	add	r2,r3,r2
    f868:	00000106 	br	f870 <lseek+0x44>
    f86c:	0005883a 	mov	r2,zero
    f870:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f874:	e0bffc17 	ldw	r2,-16(fp)
    f878:	10001026 	beq	r2,zero,f8bc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f87c:	e0bffc17 	ldw	r2,-16(fp)
    f880:	10800017 	ldw	r2,0(r2)
    f884:	10800717 	ldw	r2,28(r2)
    f888:	10000926 	beq	r2,zero,f8b0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f88c:	e0bffc17 	ldw	r2,-16(fp)
    f890:	10800017 	ldw	r2,0(r2)
    f894:	10800717 	ldw	r2,28(r2)
    f898:	e1bfff17 	ldw	r6,-4(fp)
    f89c:	e17ffe17 	ldw	r5,-8(fp)
    f8a0:	e13ffc17 	ldw	r4,-16(fp)
    f8a4:	103ee83a 	callr	r2
    f8a8:	e0bffb15 	stw	r2,-20(fp)
    f8ac:	00000506 	br	f8c4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f8b0:	00bfde84 	movi	r2,-134
    f8b4:	e0bffb15 	stw	r2,-20(fp)
    f8b8:	00000206 	br	f8c4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    f8bc:	00bfebc4 	movi	r2,-81
    f8c0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f8c4:	e0bffb17 	ldw	r2,-20(fp)
    f8c8:	1000070e 	bge	r2,zero,f8e8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    f8cc:	000f7f00 	call	f7f0 <alt_get_errno>
    f8d0:	1007883a 	mov	r3,r2
    f8d4:	e0bffb17 	ldw	r2,-20(fp)
    f8d8:	0085c83a 	sub	r2,zero,r2
    f8dc:	18800015 	stw	r2,0(r3)
    rc = -1;
    f8e0:	00bfffc4 	movi	r2,-1
    f8e4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f8e8:	e0bffb17 	ldw	r2,-20(fp)
}
    f8ec:	e037883a 	mov	sp,fp
    f8f0:	dfc00117 	ldw	ra,4(sp)
    f8f4:	df000017 	ldw	fp,0(sp)
    f8f8:	dec00204 	addi	sp,sp,8
    f8fc:	f800283a 	ret

0000f900 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f900:	defff904 	addi	sp,sp,-28
    f904:	dfc00615 	stw	ra,24(sp)
    f908:	df000515 	stw	fp,20(sp)
    f90c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f910:	0009883a 	mov	r4,zero
    f914:	00178600 	call	17860 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f918:	00108bc0 	call	108bc <OSInit>
    f91c:	01000044 	movi	r4,1
    f920:	001521c0 	call	1521c <OSSemCreate>
    f924:	d0a81515 	stw	r2,-24492(gp)
    f928:	01000044 	movi	r4,1
    f92c:	001521c0 	call	1521c <OSSemCreate>
    f930:	d0a81715 	stw	r2,-24484(gp)
    f934:	d0a81004 	addi	r2,gp,-24512
    f938:	e0bffc15 	stw	r2,-16(fp)
    f93c:	00800044 	movi	r2,1
    f940:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    f944:	e0bffd0b 	ldhu	r2,-12(fp)
    f948:	1009883a 	mov	r4,r2
    f94c:	001521c0 	call	1521c <OSSemCreate>
    f950:	1007883a 	mov	r3,r2
    f954:	e0bffc17 	ldw	r2,-16(fp)
    f958:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f95c:	00178980 	call	17898 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f960:	018000b4 	movhi	r6,2
    f964:	31aeae04 	addi	r6,r6,-17736
    f968:	014000b4 	movhi	r5,2
    f96c:	296eae04 	addi	r5,r5,-17736
    f970:	010000b4 	movhi	r4,2
    f974:	212eae04 	addi	r4,r4,-17736
    f978:	001a5f40 	call	1a5f4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f97c:	001a3ac0 	call	1a3ac <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f980:	010000b4 	movhi	r4,2
    f984:	21290304 	addi	r4,r4,-23540
    f988:	001b2740 	call	1b274 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f98c:	d0a81117 	ldw	r2,-24508(gp)
    f990:	d0e81217 	ldw	r3,-24504(gp)
    f994:	d1281317 	ldw	r4,-24500(gp)
    f998:	200d883a 	mov	r6,r4
    f99c:	180b883a 	mov	r5,r3
    f9a0:	1009883a 	mov	r4,r2
    f9a4:	00002840 	call	284 <main>
    f9a8:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    f9ac:	01000044 	movi	r4,1
    f9b0:	000f43c0 	call	f43c <close>
  exit (result);
    f9b4:	e13ffb17 	ldw	r4,-20(fp)
    f9b8:	001b2880 	call	1b288 <exit>

0000f9bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f9bc:	defffe04 	addi	sp,sp,-8
    f9c0:	dfc00115 	stw	ra,4(sp)
    f9c4:	df000015 	stw	fp,0(sp)
    f9c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f9cc:	d0a00b17 	ldw	r2,-32724(gp)
    f9d0:	10000326 	beq	r2,zero,f9e0 <alt_get_errno+0x24>
    f9d4:	d0a00b17 	ldw	r2,-32724(gp)
    f9d8:	103ee83a 	callr	r2
    f9dc:	00000106 	br	f9e4 <alt_get_errno+0x28>
    f9e0:	d0a80f04 	addi	r2,gp,-24516
}
    f9e4:	e037883a 	mov	sp,fp
    f9e8:	dfc00117 	ldw	ra,4(sp)
    f9ec:	df000017 	ldw	fp,0(sp)
    f9f0:	dec00204 	addi	sp,sp,8
    f9f4:	f800283a 	ret

0000f9f8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f9f8:	defff904 	addi	sp,sp,-28
    f9fc:	dfc00615 	stw	ra,24(sp)
    fa00:	df000515 	stw	fp,20(sp)
    fa04:	df000504 	addi	fp,sp,20
    fa08:	e13ffd15 	stw	r4,-12(fp)
    fa0c:	e17ffe15 	stw	r5,-8(fp)
    fa10:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fa14:	e0bffd17 	ldw	r2,-12(fp)
    fa18:	10000616 	blt	r2,zero,fa34 <read+0x3c>
    fa1c:	e0bffd17 	ldw	r2,-12(fp)
    fa20:	10c00324 	muli	r3,r2,12
    fa24:	008000b4 	movhi	r2,2
    fa28:	10b19a04 	addi	r2,r2,-14744
    fa2c:	1885883a 	add	r2,r3,r2
    fa30:	00000106 	br	fa38 <read+0x40>
    fa34:	0005883a 	mov	r2,zero
    fa38:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fa3c:	e0bffb17 	ldw	r2,-20(fp)
    fa40:	10002226 	beq	r2,zero,facc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fa44:	e0bffb17 	ldw	r2,-20(fp)
    fa48:	10800217 	ldw	r2,8(r2)
    fa4c:	108000cc 	andi	r2,r2,3
    fa50:	10800060 	cmpeqi	r2,r2,1
    fa54:	1000181e 	bne	r2,zero,fab8 <read+0xc0>
        (fd->dev->read))
    fa58:	e0bffb17 	ldw	r2,-20(fp)
    fa5c:	10800017 	ldw	r2,0(r2)
    fa60:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fa64:	10001426 	beq	r2,zero,fab8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fa68:	e0bffb17 	ldw	r2,-20(fp)
    fa6c:	10800017 	ldw	r2,0(r2)
    fa70:	10800517 	ldw	r2,20(r2)
    fa74:	e0ffff17 	ldw	r3,-4(fp)
    fa78:	180d883a 	mov	r6,r3
    fa7c:	e17ffe17 	ldw	r5,-8(fp)
    fa80:	e13ffb17 	ldw	r4,-20(fp)
    fa84:	103ee83a 	callr	r2
    fa88:	e0bffc15 	stw	r2,-16(fp)
    fa8c:	e0bffc17 	ldw	r2,-16(fp)
    fa90:	1000070e 	bge	r2,zero,fab0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    fa94:	000f9bc0 	call	f9bc <alt_get_errno>
    fa98:	1007883a 	mov	r3,r2
    fa9c:	e0bffc17 	ldw	r2,-16(fp)
    faa0:	0085c83a 	sub	r2,zero,r2
    faa4:	18800015 	stw	r2,0(r3)
          return -1;
    faa8:	00bfffc4 	movi	r2,-1
    faac:	00000c06 	br	fae0 <read+0xe8>
        }
        return rval;
    fab0:	e0bffc17 	ldw	r2,-16(fp)
    fab4:	00000a06 	br	fae0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fab8:	000f9bc0 	call	f9bc <alt_get_errno>
    fabc:	1007883a 	mov	r3,r2
    fac0:	00800344 	movi	r2,13
    fac4:	18800015 	stw	r2,0(r3)
    fac8:	00000406 	br	fadc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    facc:	000f9bc0 	call	f9bc <alt_get_errno>
    fad0:	1007883a 	mov	r3,r2
    fad4:	00801444 	movi	r2,81
    fad8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fadc:	00bfffc4 	movi	r2,-1
}
    fae0:	e037883a 	mov	sp,fp
    fae4:	dfc00117 	ldw	ra,4(sp)
    fae8:	df000017 	ldw	fp,0(sp)
    faec:	dec00204 	addi	sp,sp,8
    faf0:	f800283a 	ret

0000faf4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    faf4:	defffe04 	addi	sp,sp,-8
    faf8:	df000115 	stw	fp,4(sp)
    fafc:	df000104 	addi	fp,sp,4
    fb00:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    fb04:	e0bfff17 	ldw	r2,-4(fp)
    fb08:	108000d0 	cmplti	r2,r2,3
    fb0c:	10000d1e 	bne	r2,zero,fb44 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    fb10:	008000b4 	movhi	r2,2
    fb14:	10b19a04 	addi	r2,r2,-14744
    fb18:	e0ffff17 	ldw	r3,-4(fp)
    fb1c:	18c00324 	muli	r3,r3,12
    fb20:	10c5883a 	add	r2,r2,r3
    fb24:	10800204 	addi	r2,r2,8
    fb28:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    fb2c:	008000b4 	movhi	r2,2
    fb30:	10b19a04 	addi	r2,r2,-14744
    fb34:	e0ffff17 	ldw	r3,-4(fp)
    fb38:	18c00324 	muli	r3,r3,12
    fb3c:	10c5883a 	add	r2,r2,r3
    fb40:	10000015 	stw	zero,0(r2)
  }
}
    fb44:	0001883a 	nop
    fb48:	e037883a 	mov	sp,fp
    fb4c:	df000017 	ldw	fp,0(sp)
    fb50:	dec00104 	addi	sp,sp,4
    fb54:	f800283a 	ret

0000fb58 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    fb58:	defff904 	addi	sp,sp,-28
    fb5c:	df000615 	stw	fp,24(sp)
    fb60:	df000604 	addi	fp,sp,24
    fb64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb68:	0005303a 	rdctl	r2,status
    fb6c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb70:	e0fffe17 	ldw	r3,-8(fp)
    fb74:	00bfff84 	movi	r2,-2
    fb78:	1884703a 	and	r2,r3,r2
    fb7c:	1001703a 	wrctl	status,r2
  
  return context;
    fb80:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    fb84:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fb88:	d0a00c17 	ldw	r2,-32720(gp)
    fb8c:	10c000c4 	addi	r3,r2,3
    fb90:	00bfff04 	movi	r2,-4
    fb94:	1884703a 	and	r2,r3,r2
    fb98:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fb9c:	d0e00c17 	ldw	r3,-32720(gp)
    fba0:	e0bfff17 	ldw	r2,-4(fp)
    fba4:	1887883a 	add	r3,r3,r2
    fba8:	00810034 	movhi	r2,1024
    fbac:	10800004 	addi	r2,r2,0
    fbb0:	10c0062e 	bgeu	r2,r3,fbcc <sbrk+0x74>
    fbb4:	e0bffb17 	ldw	r2,-20(fp)
    fbb8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fbbc:	e0bffa17 	ldw	r2,-24(fp)
    fbc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fbc4:	00bfffc4 	movi	r2,-1
    fbc8:	00000b06 	br	fbf8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fbcc:	d0a00c17 	ldw	r2,-32720(gp)
    fbd0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    fbd4:	d0e00c17 	ldw	r3,-32720(gp)
    fbd8:	e0bfff17 	ldw	r2,-4(fp)
    fbdc:	1885883a 	add	r2,r3,r2
    fbe0:	d0a00c15 	stw	r2,-32720(gp)
    fbe4:	e0bffb17 	ldw	r2,-20(fp)
    fbe8:	e0bffc15 	stw	r2,-16(fp)
    fbec:	e0bffc17 	ldw	r2,-16(fp)
    fbf0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fbf4:	e0bffd17 	ldw	r2,-12(fp)
} 
    fbf8:	e037883a 	mov	sp,fp
    fbfc:	df000017 	ldw	fp,0(sp)
    fc00:	dec00104 	addi	sp,sp,4
    fc04:	f800283a 	ret

0000fc08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fc08:	defffe04 	addi	sp,sp,-8
    fc0c:	dfc00115 	stw	ra,4(sp)
    fc10:	df000015 	stw	fp,0(sp)
    fc14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fc18:	d0a00b17 	ldw	r2,-32724(gp)
    fc1c:	10000326 	beq	r2,zero,fc2c <alt_get_errno+0x24>
    fc20:	d0a00b17 	ldw	r2,-32724(gp)
    fc24:	103ee83a 	callr	r2
    fc28:	00000106 	br	fc30 <alt_get_errno+0x28>
    fc2c:	d0a80f04 	addi	r2,gp,-24516
}
    fc30:	e037883a 	mov	sp,fp
    fc34:	dfc00117 	ldw	ra,4(sp)
    fc38:	df000017 	ldw	fp,0(sp)
    fc3c:	dec00204 	addi	sp,sp,8
    fc40:	f800283a 	ret

0000fc44 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fc44:	defff904 	addi	sp,sp,-28
    fc48:	dfc00615 	stw	ra,24(sp)
    fc4c:	df000515 	stw	fp,20(sp)
    fc50:	df000504 	addi	fp,sp,20
    fc54:	e13ffd15 	stw	r4,-12(fp)
    fc58:	e17ffe15 	stw	r5,-8(fp)
    fc5c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fc60:	e0bffd17 	ldw	r2,-12(fp)
    fc64:	10000616 	blt	r2,zero,fc80 <write+0x3c>
    fc68:	e0bffd17 	ldw	r2,-12(fp)
    fc6c:	10c00324 	muli	r3,r2,12
    fc70:	008000b4 	movhi	r2,2
    fc74:	10b19a04 	addi	r2,r2,-14744
    fc78:	1885883a 	add	r2,r3,r2
    fc7c:	00000106 	br	fc84 <write+0x40>
    fc80:	0005883a 	mov	r2,zero
    fc84:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fc88:	e0bffb17 	ldw	r2,-20(fp)
    fc8c:	10002126 	beq	r2,zero,fd14 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fc90:	e0bffb17 	ldw	r2,-20(fp)
    fc94:	10800217 	ldw	r2,8(r2)
    fc98:	108000cc 	andi	r2,r2,3
    fc9c:	10001826 	beq	r2,zero,fd00 <write+0xbc>
    fca0:	e0bffb17 	ldw	r2,-20(fp)
    fca4:	10800017 	ldw	r2,0(r2)
    fca8:	10800617 	ldw	r2,24(r2)
    fcac:	10001426 	beq	r2,zero,fd00 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fcb0:	e0bffb17 	ldw	r2,-20(fp)
    fcb4:	10800017 	ldw	r2,0(r2)
    fcb8:	10800617 	ldw	r2,24(r2)
    fcbc:	e0ffff17 	ldw	r3,-4(fp)
    fcc0:	180d883a 	mov	r6,r3
    fcc4:	e17ffe17 	ldw	r5,-8(fp)
    fcc8:	e13ffb17 	ldw	r4,-20(fp)
    fccc:	103ee83a 	callr	r2
    fcd0:	e0bffc15 	stw	r2,-16(fp)
    fcd4:	e0bffc17 	ldw	r2,-16(fp)
    fcd8:	1000070e 	bge	r2,zero,fcf8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    fcdc:	000fc080 	call	fc08 <alt_get_errno>
    fce0:	1007883a 	mov	r3,r2
    fce4:	e0bffc17 	ldw	r2,-16(fp)
    fce8:	0085c83a 	sub	r2,zero,r2
    fcec:	18800015 	stw	r2,0(r3)
        return -1;
    fcf0:	00bfffc4 	movi	r2,-1
    fcf4:	00000c06 	br	fd28 <write+0xe4>
      }
      return rval;
    fcf8:	e0bffc17 	ldw	r2,-16(fp)
    fcfc:	00000a06 	br	fd28 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fd00:	000fc080 	call	fc08 <alt_get_errno>
    fd04:	1007883a 	mov	r3,r2
    fd08:	00800344 	movi	r2,13
    fd0c:	18800015 	stw	r2,0(r3)
    fd10:	00000406 	br	fd24 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fd14:	000fc080 	call	fc08 <alt_get_errno>
    fd18:	1007883a 	mov	r3,r2
    fd1c:	00801444 	movi	r2,81
    fd20:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fd24:	00bfffc4 	movi	r2,-1
}
    fd28:	e037883a 	mov	sp,fp
    fd2c:	dfc00117 	ldw	ra,4(sp)
    fd30:	df000017 	ldw	fp,0(sp)
    fd34:	dec00204 	addi	sp,sp,8
    fd38:	f800283a 	ret

0000fd3c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    fd3c:	deffdf04 	addi	sp,sp,-132
    fd40:	dfc02015 	stw	ra,128(sp)
    fd44:	df001f15 	stw	fp,124(sp)
    fd48:	df001f04 	addi	fp,sp,124
    fd4c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    fd50:	e0bfe204 	addi	r2,fp,-120
    fd54:	100b883a 	mov	r5,r2
    fd58:	01003fc4 	movi	r4,255
    fd5c:	00171a40 	call	171a4 <OSTaskQuery>
    fd60:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    fd64:	e0bffe83 	ldbu	r2,-6(fp)
    fd68:	10803fcc 	andi	r2,r2,255
    fd6c:	10001e1e 	bne	r2,zero,fde8 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    fd70:	e0bfee83 	ldbu	r2,-70(fp)
    fd74:	10803fcc 	andi	r2,r2,255
    fd78:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    fd7c:	d0a81517 	ldw	r2,-24492(gp)
    fd80:	e0fffd04 	addi	r3,fp,-12
    fd84:	180b883a 	mov	r5,r3
    fd88:	1009883a 	mov	r4,r2
    fd8c:	00159bc0 	call	159bc <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    fd90:	e0bffe43 	ldbu	r2,-7(fp)
    fd94:	10803fcc 	andi	r2,r2,255
    fd98:	10000726 	beq	r2,zero,fdb8 <__env_lock+0x7c>
    fd9c:	d0a00d17 	ldw	r2,-32716(gp)
    fda0:	e0ffe117 	ldw	r3,-124(fp)
    fda4:	1880041e 	bne	r3,r2,fdb8 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    fda8:	d0a81417 	ldw	r2,-24496(gp)
    fdac:	10800044 	addi	r2,r2,1
    fdb0:	d0a81415 	stw	r2,-24496(gp)
    fdb4:	00000a06 	br	fde0 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    fdb8:	d0a81517 	ldw	r2,-24492(gp)
    fdbc:	e0fffe84 	addi	r3,fp,-6
    fdc0:	180d883a 	mov	r6,r3
    fdc4:	000b883a 	mov	r5,zero
    fdc8:	1009883a 	mov	r4,r2
    fdcc:	00155340 	call	15534 <OSSemPend>
    locks  = 1;
    fdd0:	00800044 	movi	r2,1
    fdd4:	d0a81415 	stw	r2,-24496(gp)
    lockid = id;
    fdd8:	e0bfe117 	ldw	r2,-124(fp)
    fddc:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    fde0:	0001883a 	nop
    fde4:	00000106 	br	fdec <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    fde8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    fdec:	e037883a 	mov	sp,fp
    fdf0:	dfc00117 	ldw	ra,4(sp)
    fdf4:	df000017 	ldw	fp,0(sp)
    fdf8:	dec00204 	addi	sp,sp,8
    fdfc:	f800283a 	ret

0000fe00 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    fe00:	defffd04 	addi	sp,sp,-12
    fe04:	dfc00215 	stw	ra,8(sp)
    fe08:	df000115 	stw	fp,4(sp)
    fe0c:	df000104 	addi	fp,sp,4
    fe10:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    fe14:	d0a81417 	ldw	r2,-24496(gp)
    fe18:	10000b26 	beq	r2,zero,fe48 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    fe1c:	d0a81417 	ldw	r2,-24496(gp)
    fe20:	10bfffc4 	addi	r2,r2,-1
    fe24:	d0a81415 	stw	r2,-24496(gp)
    fe28:	d0a81417 	ldw	r2,-24496(gp)
    fe2c:	1000071e 	bne	r2,zero,fe4c <__env_unlock+0x4c>
  {
    lockid = -1;
    fe30:	00bfffc4 	movi	r2,-1
    fe34:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
    fe38:	d0a81517 	ldw	r2,-24492(gp)
    fe3c:	1009883a 	mov	r4,r2
    fe40:	00158ac0 	call	158ac <OSSemPost>
    fe44:	00000106 	br	fe4c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    fe48:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    fe4c:	e037883a 	mov	sp,fp
    fe50:	dfc00117 	ldw	ra,4(sp)
    fe54:	df000017 	ldw	fp,0(sp)
    fe58:	dec00204 	addi	sp,sp,8
    fe5c:	f800283a 	ret

0000fe60 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    fe60:	deffdb04 	addi	sp,sp,-148
    fe64:	dfc02415 	stw	ra,144(sp)
    fe68:	df002315 	stw	fp,140(sp)
    fe6c:	df002304 	addi	fp,sp,140
    fe70:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fe74:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    fe78:	d0a81843 	ldbu	r2,-24479(gp)
    fe7c:	10803fcc 	andi	r2,r2,255
    fe80:	10800060 	cmpeqi	r2,r2,1
    fe84:	10003626 	beq	r2,zero,ff60 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    fe88:	e0bfe204 	addi	r2,fp,-120
    fe8c:	100b883a 	mov	r5,r2
    fe90:	01003fc4 	movi	r4,255
    fe94:	00171a40 	call	171a4 <OSTaskQuery>
    fe98:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    fe9c:	e0bffe83 	ldbu	r2,-6(fp)
    fea0:	10803fcc 	andi	r2,r2,255
    fea4:	1000301e 	bne	r2,zero,ff68 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    fea8:	e0bfee83 	ldbu	r2,-70(fp)
    feac:	10803fcc 	andi	r2,r2,255
    feb0:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    feb4:	d0a81717 	ldw	r2,-24484(gp)
    feb8:	e0fffd04 	addi	r3,fp,-12
    febc:	180b883a 	mov	r5,r3
    fec0:	1009883a 	mov	r4,r2
    fec4:	00159bc0 	call	159bc <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fec8:	0005303a 	rdctl	r2,status
    fecc:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fed0:	e0ffe117 	ldw	r3,-124(fp)
    fed4:	00bfff84 	movi	r2,-2
    fed8:	1884703a 	and	r2,r3,r2
    fedc:	1001703a 	wrctl	status,r2
  
  return context;
    fee0:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    fee4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    fee8:	e0bffd0b 	ldhu	r2,-12(fp)
    feec:	10bfffcc 	andi	r2,r2,65535
    fef0:	10000b1e 	bne	r2,zero,ff20 <__malloc_lock+0xc0>
    fef4:	d0a00e17 	ldw	r2,-32712(gp)
    fef8:	e0ffde17 	ldw	r3,-136(fp)
    fefc:	1880081e 	bne	r3,r2,ff20 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    ff00:	d0a81617 	ldw	r2,-24488(gp)
    ff04:	10800044 	addi	r2,r2,1
    ff08:	d0a81615 	stw	r2,-24488(gp)
    ff0c:	e0bfdd17 	ldw	r2,-140(fp)
    ff10:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff14:	e0bfdf17 	ldw	r2,-132(fp)
    ff18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    ff1c:	00000e06 	br	ff58 <__malloc_lock+0xf8>
    ff20:	e0bfdd17 	ldw	r2,-140(fp)
    ff24:	e0bfe015 	stw	r2,-128(fp)
    ff28:	e0bfe017 	ldw	r2,-128(fp)
    ff2c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    ff30:	d0a81717 	ldw	r2,-24484(gp)
    ff34:	e0fffe84 	addi	r3,fp,-6
    ff38:	180d883a 	mov	r6,r3
    ff3c:	000b883a 	mov	r5,zero
    ff40:	1009883a 	mov	r4,r2
    ff44:	00155340 	call	15534 <OSSemPend>
    locks  = 1;
    ff48:	00800044 	movi	r2,1
    ff4c:	d0a81615 	stw	r2,-24488(gp)
    lockid = id;
    ff50:	e0bfde17 	ldw	r2,-136(fp)
    ff54:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    ff58:	0001883a 	nop
    ff5c:	00000306 	br	ff6c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    ff60:	0001883a 	nop
    ff64:	00000106 	br	ff6c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    ff68:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    ff6c:	e037883a 	mov	sp,fp
    ff70:	dfc00117 	ldw	ra,4(sp)
    ff74:	df000017 	ldw	fp,0(sp)
    ff78:	dec00204 	addi	sp,sp,8
    ff7c:	f800283a 	ret

0000ff80 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ff80:	defff804 	addi	sp,sp,-32
    ff84:	dfc00715 	stw	ra,28(sp)
    ff88:	df000615 	stw	fp,24(sp)
    ff8c:	df000604 	addi	fp,sp,24
    ff90:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ff94:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    ff98:	d0a81843 	ldbu	r2,-24479(gp)
    ff9c:	10803fcc 	andi	r2,r2,255
    ffa0:	10800060 	cmpeqi	r2,r2,1
    ffa4:	10002326 	beq	r2,zero,10034 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ffa8:	0005303a 	rdctl	r2,status
    ffac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ffb0:	e0fffe17 	ldw	r3,-8(fp)
    ffb4:	00bfff84 	movi	r2,-2
    ffb8:	1884703a 	and	r2,r3,r2
    ffbc:	1001703a 	wrctl	status,r2
  
  return context;
    ffc0:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    ffc4:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    ffc8:	d0a81617 	ldw	r2,-24488(gp)
    ffcc:	1000051e 	bne	r2,zero,ffe4 <__malloc_unlock+0x64>
    ffd0:	e0bffa17 	ldw	r2,-24(fp)
    ffd4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ffd8:	e0bffb17 	ldw	r2,-20(fp)
    ffdc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    ffe0:	00001506 	br	10038 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    ffe4:	d0a81617 	ldw	r2,-24488(gp)
    ffe8:	10bfffc4 	addi	r2,r2,-1
    ffec:	d0a81615 	stw	r2,-24488(gp)
    fff0:	d0a81617 	ldw	r2,-24488(gp)
    fff4:	10000a1e 	bne	r2,zero,10020 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    fff8:	00bfffc4 	movi	r2,-1
    fffc:	d0a00e15 	stw	r2,-32712(gp)
   10000:	e0bffa17 	ldw	r2,-24(fp)
   10004:	e0bffc15 	stw	r2,-16(fp)
   10008:	e0bffc17 	ldw	r2,-16(fp)
   1000c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   10010:	d0a81717 	ldw	r2,-24484(gp)
   10014:	1009883a 	mov	r4,r2
   10018:	00158ac0 	call	158ac <OSSemPost>
   1001c:	00000606 	br	10038 <__malloc_unlock+0xb8>
   10020:	e0bffa17 	ldw	r2,-24(fp)
   10024:	e0bffd15 	stw	r2,-12(fp)
   10028:	e0bffd17 	ldw	r2,-12(fp)
   1002c:	1001703a 	wrctl	status,r2
   10030:	00000106 	br	10038 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   10034:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   10038:	e037883a 	mov	sp,fp
   1003c:	dfc00117 	ldw	ra,4(sp)
   10040:	df000017 	ldw	fp,0(sp)
   10044:	dec00204 	addi	sp,sp,8
   10048:	f800283a 	ret

0001004c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   1004c:	defff704 	addi	sp,sp,-36
   10050:	dfc00815 	stw	ra,32(sp)
   10054:	df000715 	stw	fp,28(sp)
   10058:	df000704 	addi	fp,sp,28
   1005c:	e13ffd15 	stw	r4,-12(fp)
   10060:	e17ffe15 	stw	r5,-8(fp)
   10064:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10068:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1006c:	e0bfff17 	ldw	r2,-4(fp)
   10070:	1000021e 	bne	r2,zero,1007c <OSEventNameGet+0x30>
        return (0);
   10074:	0005883a 	mov	r2,zero
   10078:	00003706 	br	10158 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   1007c:	e0bffd17 	ldw	r2,-12(fp)
   10080:	1000051e 	bne	r2,zero,10098 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   10084:	e0bfff17 	ldw	r2,-4(fp)
   10088:	00c00104 	movi	r3,4
   1008c:	10c00005 	stb	r3,0(r2)
        return (0);
   10090:	0005883a 	mov	r2,zero
   10094:	00003006 	br	10158 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10098:	e0bffe17 	ldw	r2,-8(fp)
   1009c:	1000051e 	bne	r2,zero,100b4 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   100a0:	e0bfff17 	ldw	r2,-4(fp)
   100a4:	00c00304 	movi	r3,12
   100a8:	10c00005 	stb	r3,0(r2)
        return (0);
   100ac:	0005883a 	mov	r2,zero
   100b0:	00002906 	br	10158 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   100b4:	d0a82603 	ldbu	r2,-24424(gp)
   100b8:	10803fcc 	andi	r2,r2,255
   100bc:	10000526 	beq	r2,zero,100d4 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   100c0:	e0bfff17 	ldw	r2,-4(fp)
   100c4:	00c00444 	movi	r3,17
   100c8:	10c00005 	stb	r3,0(r2)
        return (0);
   100cc:	0005883a 	mov	r2,zero
   100d0:	00002106 	br	10158 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   100d4:	e0bffd17 	ldw	r2,-12(fp)
   100d8:	10800003 	ldbu	r2,0(r2)
   100dc:	10803fcc 	andi	r2,r2,255
   100e0:	10bfffc4 	addi	r2,r2,-1
   100e4:	10800128 	cmpgeui	r2,r2,4
   100e8:	10000526 	beq	r2,zero,10100 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   100ec:	e0bfff17 	ldw	r2,-4(fp)
   100f0:	00c00044 	movi	r3,1
   100f4:	10c00005 	stb	r3,0(r2)
             return (0);
   100f8:	0005883a 	mov	r2,zero
   100fc:	00001606 	br	10158 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   10100:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10104:	0005303a 	rdctl	r2,status
   10108:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1010c:	e0fffb17 	ldw	r3,-20(fp)
   10110:	00bfff84 	movi	r2,-2
   10114:	1884703a 	and	r2,r3,r2
   10118:	1001703a 	wrctl	status,r2
  
  return context;
   1011c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   10120:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   10124:	e0bffd17 	ldw	r2,-12(fp)
   10128:	10800384 	addi	r2,r2,14
   1012c:	100b883a 	mov	r5,r2
   10130:	e13ffe17 	ldw	r4,-8(fp)
   10134:	0011ad00 	call	11ad0 <OS_StrCopy>
   10138:	e0bffa05 	stb	r2,-24(fp)
   1013c:	e0bff917 	ldw	r2,-28(fp)
   10140:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10144:	e0bffc17 	ldw	r2,-16(fp)
   10148:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1014c:	e0bfff17 	ldw	r2,-4(fp)
   10150:	10000005 	stb	zero,0(r2)
    return (len);
   10154:	e0bffa03 	ldbu	r2,-24(fp)
}
   10158:	e037883a 	mov	sp,fp
   1015c:	dfc00117 	ldw	ra,4(sp)
   10160:	df000017 	ldw	fp,0(sp)
   10164:	dec00204 	addi	sp,sp,8
   10168:	f800283a 	ret

0001016c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   1016c:	defff604 	addi	sp,sp,-40
   10170:	dfc00915 	stw	ra,36(sp)
   10174:	df000815 	stw	fp,32(sp)
   10178:	df000804 	addi	fp,sp,32
   1017c:	e13ffd15 	stw	r4,-12(fp)
   10180:	e17ffe15 	stw	r5,-8(fp)
   10184:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10188:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1018c:	e0bfff17 	ldw	r2,-4(fp)
   10190:	10004026 	beq	r2,zero,10294 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   10194:	e0bffd17 	ldw	r2,-12(fp)
   10198:	1000041e 	bne	r2,zero,101ac <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   1019c:	e0bfff17 	ldw	r2,-4(fp)
   101a0:	00c00104 	movi	r3,4
   101a4:	10c00005 	stb	r3,0(r2)
        return;
   101a8:	00003b06 	br	10298 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   101ac:	e0bffe17 	ldw	r2,-8(fp)
   101b0:	1000041e 	bne	r2,zero,101c4 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   101b4:	e0bfff17 	ldw	r2,-4(fp)
   101b8:	00c00304 	movi	r3,12
   101bc:	10c00005 	stb	r3,0(r2)
        return;
   101c0:	00003506 	br	10298 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   101c4:	d0a82603 	ldbu	r2,-24424(gp)
   101c8:	10803fcc 	andi	r2,r2,255
   101cc:	10000426 	beq	r2,zero,101e0 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   101d0:	e0bfff17 	ldw	r2,-4(fp)
   101d4:	00c00484 	movi	r3,18
   101d8:	10c00005 	stb	r3,0(r2)
        return;
   101dc:	00002e06 	br	10298 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   101e0:	e0bffd17 	ldw	r2,-12(fp)
   101e4:	10800003 	ldbu	r2,0(r2)
   101e8:	10803fcc 	andi	r2,r2,255
   101ec:	10bfffc4 	addi	r2,r2,-1
   101f0:	10800128 	cmpgeui	r2,r2,4
   101f4:	10000426 	beq	r2,zero,10208 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   101f8:	e0bfff17 	ldw	r2,-4(fp)
   101fc:	00c00044 	movi	r3,1
   10200:	10c00005 	stb	r3,0(r2)
             return;
   10204:	00002406 	br	10298 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   10208:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1020c:	0005303a 	rdctl	r2,status
   10210:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10214:	e0fffc17 	ldw	r3,-16(fp)
   10218:	00bfff84 	movi	r2,-2
   1021c:	1884703a 	and	r2,r3,r2
   10220:	1001703a 	wrctl	status,r2
  
  return context;
   10224:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   10228:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   1022c:	e13ffe17 	ldw	r4,-8(fp)
   10230:	0011b440 	call	11b44 <OS_StrLen>
   10234:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   10238:	e0bffa03 	ldbu	r2,-24(fp)
   1023c:	10800830 	cmpltui	r2,r2,32
   10240:	1000081e 	bne	r2,zero,10264 <OSEventNameSet+0xf8>
   10244:	e0bff817 	ldw	r2,-32(fp)
   10248:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1024c:	e0bff917 	ldw	r2,-28(fp)
   10250:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   10254:	e0bfff17 	ldw	r2,-4(fp)
   10258:	00c002c4 	movi	r3,11
   1025c:	10c00005 	stb	r3,0(r2)
        return;
   10260:	00000d06 	br	10298 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   10264:	e0bffd17 	ldw	r2,-12(fp)
   10268:	10800384 	addi	r2,r2,14
   1026c:	e17ffe17 	ldw	r5,-8(fp)
   10270:	1009883a 	mov	r4,r2
   10274:	0011ad00 	call	11ad0 <OS_StrCopy>
   10278:	e0bff817 	ldw	r2,-32(fp)
   1027c:	e0bffb15 	stw	r2,-20(fp)
   10280:	e0bffb17 	ldw	r2,-20(fp)
   10284:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10288:	e0bfff17 	ldw	r2,-4(fp)
   1028c:	10000005 	stb	zero,0(r2)
   10290:	00000106 	br	10298 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   10294:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   10298:	e037883a 	mov	sp,fp
   1029c:	dfc00117 	ldw	ra,4(sp)
   102a0:	df000017 	ldw	fp,0(sp)
   102a4:	dec00204 	addi	sp,sp,8
   102a8:	f800283a 	ret

000102ac <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   102ac:	deffed04 	addi	sp,sp,-76
   102b0:	dfc01215 	stw	ra,72(sp)
   102b4:	df001115 	stw	fp,68(sp)
   102b8:	df001104 	addi	fp,sp,68
   102bc:	e13ffc15 	stw	r4,-16(fp)
   102c0:	e17ffd15 	stw	r5,-12(fp)
   102c4:	e1bffe15 	stw	r6,-8(fp)
   102c8:	3805883a 	mov	r2,r7
   102cc:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   102d0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   102d4:	e0800217 	ldw	r2,8(fp)
   102d8:	1000021e 	bne	r2,zero,102e4 <OSEventPendMulti+0x38>
        return (0);
   102dc:	0005883a 	mov	r2,zero
   102e0:	00017106 	br	108a8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   102e4:	e0bffc17 	ldw	r2,-16(fp)
   102e8:	1000051e 	bne	r2,zero,10300 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   102ec:	e0800217 	ldw	r2,8(fp)
   102f0:	00c00104 	movi	r3,4
   102f4:	10c00005 	stb	r3,0(r2)
        return (0);
   102f8:	0005883a 	mov	r2,zero
   102fc:	00016a06 	br	108a8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   10300:	e0bffd17 	ldw	r2,-12(fp)
   10304:	1000051e 	bne	r2,zero,1031c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   10308:	e0800217 	ldw	r2,8(fp)
   1030c:	00c00104 	movi	r3,4
   10310:	10c00005 	stb	r3,0(r2)
        return (0);
   10314:	0005883a 	mov	r2,zero
   10318:	00016306 	br	108a8 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   1031c:	e0bffe17 	ldw	r2,-8(fp)
   10320:	1000051e 	bne	r2,zero,10338 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   10324:	e0800217 	ldw	r2,8(fp)
   10328:	00c00104 	movi	r3,4
   1032c:	10c00005 	stb	r3,0(r2)
        return (0);
   10330:	0005883a 	mov	r2,zero
   10334:	00015c06 	br	108a8 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   10338:	e0bffd17 	ldw	r2,-12(fp)
   1033c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   10340:	e0bffc17 	ldw	r2,-16(fp)
   10344:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   10348:	e0bfef17 	ldw	r2,-68(fp)
   1034c:	10800017 	ldw	r2,0(r2)
   10350:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   10354:	00001906 	br	103bc <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   10358:	e0bff017 	ldw	r2,-64(fp)
   1035c:	10800003 	ldbu	r2,0(r2)
   10360:	10803fcc 	andi	r2,r2,255
   10364:	10c000a0 	cmpeqi	r3,r2,2
   10368:	1800091e 	bne	r3,zero,10390 <OSEventPendMulti+0xe4>
   1036c:	10c000e0 	cmpeqi	r3,r2,3
   10370:	1800091e 	bne	r3,zero,10398 <OSEventPendMulti+0xec>
   10374:	10800060 	cmpeqi	r2,r2,1
   10378:	1000091e 	bne	r2,zero,103a0 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   1037c:	e0800217 	ldw	r2,8(fp)
   10380:	00c00044 	movi	r3,1
   10384:	10c00005 	stb	r3,0(r2)
                 return (0);
   10388:	0005883a 	mov	r2,zero
   1038c:	00014606 	br	108a8 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   10390:	0001883a 	nop
   10394:	00000306 	br	103a4 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   10398:	0001883a 	nop
   1039c:	00000106 	br	103a4 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   103a0:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   103a4:	e0bfef17 	ldw	r2,-68(fp)
   103a8:	10800104 	addi	r2,r2,4
   103ac:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   103b0:	e0bfef17 	ldw	r2,-68(fp)
   103b4:	10800017 	ldw	r2,0(r2)
   103b8:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   103bc:	e0bff017 	ldw	r2,-64(fp)
   103c0:	103fe51e 	bne	r2,zero,10358 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010358>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   103c4:	d0a82603 	ldbu	r2,-24424(gp)
   103c8:	10803fcc 	andi	r2,r2,255
   103cc:	10000526 	beq	r2,zero,103e4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   103d0:	e0800217 	ldw	r2,8(fp)
   103d4:	00c00084 	movi	r3,2
   103d8:	10c00005 	stb	r3,0(r2)
        return (0);
   103dc:	0005883a 	mov	r2,zero
   103e0:	00013106 	br	108a8 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   103e4:	d0a81803 	ldbu	r2,-24480(gp)
   103e8:	10803fcc 	andi	r2,r2,255
   103ec:	10000526 	beq	r2,zero,10404 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   103f0:	e0800217 	ldw	r2,8(fp)
   103f4:	00c00344 	movi	r3,13
   103f8:	10c00005 	stb	r3,0(r2)
        return (0);
   103fc:	0005883a 	mov	r2,zero
   10400:	00012906 	br	108a8 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10404:	0005303a 	rdctl	r2,status
   10408:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1040c:	e0fffb17 	ldw	r3,-20(fp)
   10410:	00bfff84 	movi	r2,-2
   10414:	1884703a 	and	r2,r3,r2
   10418:	1001703a 	wrctl	status,r2
  
  return context;
   1041c:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   10420:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   10424:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   10428:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   1042c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   10430:	e0bffc17 	ldw	r2,-16(fp)
   10434:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   10438:	e0bfef17 	ldw	r2,-68(fp)
   1043c:	10800017 	ldw	r2,0(r2)
   10440:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   10444:	00008106 	br	1064c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   10448:	e0bff017 	ldw	r2,-64(fp)
   1044c:	10800003 	ldbu	r2,0(r2)
   10450:	10803fcc 	andi	r2,r2,255
   10454:	10c000a0 	cmpeqi	r3,r2,2
   10458:	18003c1e 	bne	r3,zero,1054c <OSEventPendMulti+0x2a0>
   1045c:	10c000e0 	cmpeqi	r3,r2,3
   10460:	1800031e 	bne	r3,zero,10470 <OSEventPendMulti+0x1c4>
   10464:	10800060 	cmpeqi	r2,r2,1
   10468:	10001e1e 	bne	r2,zero,104e4 <OSEventPendMulti+0x238>
   1046c:	00006606 	br	10608 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   10470:	e0bff017 	ldw	r2,-64(fp)
   10474:	1080020b 	ldhu	r2,8(r2)
   10478:	10bfffcc 	andi	r2,r2,65535
   1047c:	10001526 	beq	r2,zero,104d4 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   10480:	e0bff017 	ldw	r2,-64(fp)
   10484:	1080020b 	ldhu	r2,8(r2)
   10488:	10bfffc4 	addi	r2,r2,-1
   1048c:	1007883a 	mov	r3,r2
   10490:	e0bff017 	ldw	r2,-64(fp)
   10494:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   10498:	e0bffd17 	ldw	r2,-12(fp)
   1049c:	10c00104 	addi	r3,r2,4
   104a0:	e0fffd15 	stw	r3,-12(fp)
   104a4:	e0fff017 	ldw	r3,-64(fp)
   104a8:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   104ac:	00800044 	movi	r2,1
   104b0:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   104b4:	e0bffe17 	ldw	r2,-8(fp)
   104b8:	10c00104 	addi	r3,r2,4
   104bc:	e0fffe15 	stw	r3,-8(fp)
   104c0:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   104c4:	e0bff18b 	ldhu	r2,-58(fp)
   104c8:	10800044 	addi	r2,r2,1
   104cc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   104d0:	00005806 	br	10634 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   104d4:	e0bff203 	ldbu	r2,-56(fp)
   104d8:	10800054 	ori	r2,r2,1
   104dc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   104e0:	00005406 	br	10634 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   104e4:	e0bff017 	ldw	r2,-64(fp)
   104e8:	10800117 	ldw	r2,4(r2)
   104ec:	10001326 	beq	r2,zero,1053c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   104f0:	e0bffe17 	ldw	r2,-8(fp)
   104f4:	10c00104 	addi	r3,r2,4
   104f8:	e0fffe15 	stw	r3,-8(fp)
   104fc:	e0fff017 	ldw	r3,-64(fp)
   10500:	18c00117 	ldw	r3,4(r3)
   10504:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   10508:	e0bff017 	ldw	r2,-64(fp)
   1050c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   10510:	e0bffd17 	ldw	r2,-12(fp)
   10514:	10c00104 	addi	r3,r2,4
   10518:	e0fffd15 	stw	r3,-12(fp)
   1051c:	e0fff017 	ldw	r3,-64(fp)
   10520:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   10524:	00800044 	movi	r2,1
   10528:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1052c:	e0bff18b 	ldhu	r2,-58(fp)
   10530:	10800044 	addi	r2,r2,1
   10534:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   10538:	00003e06 	br	10634 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   1053c:	e0bff203 	ldbu	r2,-56(fp)
   10540:	10800094 	ori	r2,r2,2
   10544:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   10548:	00003a06 	br	10634 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   1054c:	e0bff017 	ldw	r2,-64(fp)
   10550:	10800117 	ldw	r2,4(r2)
   10554:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   10558:	e0bff517 	ldw	r2,-44(fp)
   1055c:	1080058b 	ldhu	r2,22(r2)
   10560:	10bfffcc 	andi	r2,r2,65535
   10564:	10002426 	beq	r2,zero,105f8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   10568:	e0bffe17 	ldw	r2,-8(fp)
   1056c:	10c00104 	addi	r3,r2,4
   10570:	e0fffe15 	stw	r3,-8(fp)
   10574:	e0fff517 	ldw	r3,-44(fp)
   10578:	18c00417 	ldw	r3,16(r3)
   1057c:	19400104 	addi	r5,r3,4
   10580:	e13ff517 	ldw	r4,-44(fp)
   10584:	21400415 	stw	r5,16(r4)
   10588:	18c00017 	ldw	r3,0(r3)
   1058c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   10590:	e0bff517 	ldw	r2,-44(fp)
   10594:	10c00417 	ldw	r3,16(r2)
   10598:	e0bff517 	ldw	r2,-44(fp)
   1059c:	10800217 	ldw	r2,8(r2)
   105a0:	1880041e 	bne	r3,r2,105b4 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   105a4:	e0bff517 	ldw	r2,-44(fp)
   105a8:	10c00117 	ldw	r3,4(r2)
   105ac:	e0bff517 	ldw	r2,-44(fp)
   105b0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   105b4:	e0bff517 	ldw	r2,-44(fp)
   105b8:	1080058b 	ldhu	r2,22(r2)
   105bc:	10bfffc4 	addi	r2,r2,-1
   105c0:	1007883a 	mov	r3,r2
   105c4:	e0bff517 	ldw	r2,-44(fp)
   105c8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   105cc:	e0bffd17 	ldw	r2,-12(fp)
   105d0:	10c00104 	addi	r3,r2,4
   105d4:	e0fffd15 	stw	r3,-12(fp)
   105d8:	e0fff017 	ldw	r3,-64(fp)
   105dc:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   105e0:	00800044 	movi	r2,1
   105e4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   105e8:	e0bff18b 	ldhu	r2,-58(fp)
   105ec:	10800044 	addi	r2,r2,1
   105f0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   105f4:	00000f06 	br	10634 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   105f8:	e0bff203 	ldbu	r2,-56(fp)
   105fc:	10800114 	ori	r2,r2,4
   10600:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   10604:	00000b06 	br	10634 <OSEventPendMulti+0x388>
   10608:	e0bff317 	ldw	r2,-52(fp)
   1060c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10610:	e0bff417 	ldw	r2,-48(fp)
   10614:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   10618:	e0bffd17 	ldw	r2,-12(fp)
   1061c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   10620:	e0800217 	ldw	r2,8(fp)
   10624:	00c00044 	movi	r3,1
   10628:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   1062c:	e0bff18b 	ldhu	r2,-58(fp)
   10630:	00009d06 	br	108a8 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   10634:	e0bfef17 	ldw	r2,-68(fp)
   10638:	10800104 	addi	r2,r2,4
   1063c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   10640:	e0bfef17 	ldw	r2,-68(fp)
   10644:	10800017 	ldw	r2,0(r2)
   10648:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   1064c:	e0bff017 	ldw	r2,-64(fp)
   10650:	103f7d1e 	bne	r2,zero,10448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010448>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   10654:	e0bff103 	ldbu	r2,-60(fp)
   10658:	10800058 	cmpnei	r2,r2,1
   1065c:	10000a1e 	bne	r2,zero,10688 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   10660:	e0bffd17 	ldw	r2,-12(fp)
   10664:	10000015 	stw	zero,0(r2)
   10668:	e0bff317 	ldw	r2,-52(fp)
   1066c:	e0bff615 	stw	r2,-40(fp)
   10670:	e0bff617 	ldw	r2,-40(fp)
   10674:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   10678:	e0800217 	ldw	r2,8(fp)
   1067c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   10680:	e0bff18b 	ldhu	r2,-58(fp)
   10684:	00008806 	br	108a8 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   10688:	d0a82717 	ldw	r2,-24420(gp)
   1068c:	d0e82717 	ldw	r3,-24420(gp)
   10690:	19000c03 	ldbu	r4,48(r3)
   10694:	e0fff203 	ldbu	r3,-56(fp)
   10698:	20c6b03a 	or	r3,r4,r3
   1069c:	1809883a 	mov	r4,r3
   106a0:	00ffe004 	movi	r3,-128
   106a4:	20c6b03a 	or	r3,r4,r3
   106a8:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   106ac:	d0a82717 	ldw	r2,-24420(gp)
   106b0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   106b4:	d0a82717 	ldw	r2,-24420(gp)
   106b8:	e0ffff0b 	ldhu	r3,-4(fp)
   106bc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   106c0:	e13ffc17 	ldw	r4,-16(fp)
   106c4:	00111e80 	call	111e8 <OS_EventTaskWaitMulti>
   106c8:	e0bff317 	ldw	r2,-52(fp)
   106cc:	e0bff915 	stw	r2,-28(fp)
   106d0:	e0bff917 	ldw	r2,-28(fp)
   106d4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   106d8:	001198c0 	call	1198c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106dc:	0005303a 	rdctl	r2,status
   106e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106e4:	e0fff717 	ldw	r3,-36(fp)
   106e8:	00bfff84 	movi	r2,-2
   106ec:	1884703a 	and	r2,r3,r2
   106f0:	1001703a 	wrctl	status,r2
  
  return context;
   106f4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   106f8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   106fc:	d0a82717 	ldw	r2,-24420(gp)
   10700:	10800c43 	ldbu	r2,49(r2)
   10704:	10803fcc 	andi	r2,r2,255
   10708:	10000226 	beq	r2,zero,10714 <OSEventPendMulti+0x468>
   1070c:	108000a0 	cmpeqi	r2,r2,2
   10710:	10001826 	beq	r2,zero,10774 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   10714:	d0a82717 	ldw	r2,-24420(gp)
   10718:	10800717 	ldw	r2,28(r2)
   1071c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   10720:	e0bff017 	ldw	r2,-64(fp)
   10724:	10000b26 	beq	r2,zero,10754 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   10728:	e0bffd17 	ldw	r2,-12(fp)
   1072c:	10c00104 	addi	r3,r2,4
   10730:	e0fffd15 	stw	r3,-12(fp)
   10734:	e0fff017 	ldw	r3,-64(fp)
   10738:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   1073c:	e0bffd17 	ldw	r2,-12(fp)
   10740:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   10744:	e0bff18b 	ldhu	r2,-58(fp)
   10748:	10800044 	addi	r2,r2,1
   1074c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   10750:	00000d06 	br	10788 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   10754:	d0a82717 	ldw	r2,-24420(gp)
   10758:	00c00044 	movi	r3,1
   1075c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   10760:	d0a82717 	ldw	r2,-24420(gp)
   10764:	e17ffc17 	ldw	r5,-16(fp)
   10768:	1009883a 	mov	r4,r2
   1076c:	00113f00 	call	113f0 <OS_EventTaskRemoveMulti>
             }
			 break;
   10770:	00000506 	br	10788 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   10774:	d0a82717 	ldw	r2,-24420(gp)
   10778:	e17ffc17 	ldw	r5,-16(fp)
   1077c:	1009883a 	mov	r4,r2
   10780:	00113f00 	call	113f0 <OS_EventTaskRemoveMulti>
             break;
   10784:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   10788:	d0a82717 	ldw	r2,-24420(gp)
   1078c:	10800c43 	ldbu	r2,49(r2)
   10790:	10803fcc 	andi	r2,r2,255
   10794:	10000326 	beq	r2,zero,107a4 <OSEventPendMulti+0x4f8>
   10798:	108000a0 	cmpeqi	r2,r2,2
   1079c:	1000231e 	bne	r2,zero,1082c <OSEventPendMulti+0x580>
   107a0:	00002a06 	br	1084c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   107a4:	e0bff017 	ldw	r2,-64(fp)
   107a8:	10800003 	ldbu	r2,0(r2)
   107ac:	10803fcc 	andi	r2,r2,255
   107b0:	0080100e 	bge	zero,r2,107f4 <OSEventPendMulti+0x548>
   107b4:	10c000d0 	cmplti	r3,r2,3
   107b8:	1800071e 	bne	r3,zero,107d8 <OSEventPendMulti+0x52c>
   107bc:	108000e0 	cmpeqi	r2,r2,3
   107c0:	10000c26 	beq	r2,zero,107f4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   107c4:	e0bffe17 	ldw	r2,-8(fp)
   107c8:	10c00104 	addi	r3,r2,4
   107cc:	e0fffe15 	stw	r3,-8(fp)
   107d0:	10000015 	stw	zero,0(r2)
                      break;
   107d4:	00001206 	br	10820 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   107d8:	e0bffe17 	ldw	r2,-8(fp)
   107dc:	10c00104 	addi	r3,r2,4
   107e0:	e0fffe15 	stw	r3,-8(fp)
   107e4:	d0e82717 	ldw	r3,-24420(gp)
   107e8:	18c00917 	ldw	r3,36(r3)
   107ec:	10c00015 	stw	r3,0(r2)
                      break;
   107f0:	00000b06 	br	10820 <OSEventPendMulti+0x574>
   107f4:	e0bff317 	ldw	r2,-52(fp)
   107f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107fc:	e0bff817 	ldw	r2,-32(fp)
   10800:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   10804:	e0bffd17 	ldw	r2,-12(fp)
   10808:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   1080c:	e0800217 	ldw	r2,8(fp)
   10810:	00c00044 	movi	r3,1
   10814:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   10818:	e0bff18b 	ldhu	r2,-58(fp)
   1081c:	00002206 	br	108a8 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   10820:	e0800217 	ldw	r2,8(fp)
   10824:	10000005 	stb	zero,0(r2)
             break;
   10828:	00001006 	br	1086c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   1082c:	e0bffe17 	ldw	r2,-8(fp)
   10830:	10c00104 	addi	r3,r2,4
   10834:	e0fffe15 	stw	r3,-8(fp)
   10838:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   1083c:	e0800217 	ldw	r2,8(fp)
   10840:	00c00384 	movi	r3,14
   10844:	10c00005 	stb	r3,0(r2)
             break;
   10848:	00000806 	br	1086c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   1084c:	e0bffe17 	ldw	r2,-8(fp)
   10850:	10c00104 	addi	r3,r2,4
   10854:	e0fffe15 	stw	r3,-8(fp)
   10858:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   1085c:	e0800217 	ldw	r2,8(fp)
   10860:	00c00284 	movi	r3,10
   10864:	10c00005 	stb	r3,0(r2)
             break;
   10868:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   1086c:	d0a82717 	ldw	r2,-24420(gp)
   10870:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   10874:	d0a82717 	ldw	r2,-24420(gp)
   10878:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   1087c:	d0a82717 	ldw	r2,-24420(gp)
   10880:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   10884:	d0a82717 	ldw	r2,-24420(gp)
   10888:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   1088c:	d0a82717 	ldw	r2,-24420(gp)
   10890:	10000915 	stw	zero,36(r2)
   10894:	e0bff317 	ldw	r2,-52(fp)
   10898:	e0bffa15 	stw	r2,-24(fp)
   1089c:	e0bffa17 	ldw	r2,-24(fp)
   108a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   108a4:	e0bff18b 	ldhu	r2,-58(fp)
}
   108a8:	e037883a 	mov	sp,fp
   108ac:	dfc00117 	ldw	ra,4(sp)
   108b0:	df000017 	ldw	fp,0(sp)
   108b4:	dec00204 	addi	sp,sp,8
   108b8:	f800283a 	ret

000108bc <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   108bc:	defffe04 	addi	sp,sp,-8
   108c0:	dfc00115 	stw	ra,4(sp)
   108c4:	df000015 	stw	fp,0(sp)
   108c8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   108cc:	001aee00 	call	1aee0 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   108d0:	00116380 	call	11638 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   108d4:	00116800 	call	11680 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   108d8:	00117ec0 	call	117ec <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   108dc:	00115580 	call	11558 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   108e0:	001369c0 	call	1369c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   108e4:	0013f9c0 	call	13f9c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   108e8:	00150c40 	call	150c4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   108ec:	00116ec0 	call	116ec <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   108f0:	001176c0 	call	1176c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   108f4:	001af000 	call	1af00 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   108f8:	00120700 	call	12070 <OSDebugInit>
#endif
}
   108fc:	0001883a 	nop
   10900:	e037883a 	mov	sp,fp
   10904:	dfc00117 	ldw	ra,4(sp)
   10908:	df000017 	ldw	fp,0(sp)
   1090c:	dec00204 	addi	sp,sp,8
   10910:	f800283a 	ret

00010914 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   10914:	deffff04 	addi	sp,sp,-4
   10918:	df000015 	stw	fp,0(sp)
   1091c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   10920:	d0a81843 	ldbu	r2,-24479(gp)
   10924:	10803fcc 	andi	r2,r2,255
   10928:	10800058 	cmpnei	r2,r2,1
   1092c:	1000071e 	bne	r2,zero,1094c <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   10930:	d0a82603 	ldbu	r2,-24424(gp)
   10934:	10803fcc 	andi	r2,r2,255
   10938:	10803fe0 	cmpeqi	r2,r2,255
   1093c:	1000031e 	bne	r2,zero,1094c <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   10940:	d0a82603 	ldbu	r2,-24424(gp)
   10944:	10800044 	addi	r2,r2,1
   10948:	d0a82605 	stb	r2,-24424(gp)
        }
    }
}
   1094c:	0001883a 	nop
   10950:	e037883a 	mov	sp,fp
   10954:	df000017 	ldw	fp,0(sp)
   10958:	dec00104 	addi	sp,sp,4
   1095c:	f800283a 	ret

00010960 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   10960:	defffb04 	addi	sp,sp,-20
   10964:	dfc00415 	stw	ra,16(sp)
   10968:	df000315 	stw	fp,12(sp)
   1096c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   10970:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   10974:	d0a81843 	ldbu	r2,-24479(gp)
   10978:	10803fcc 	andi	r2,r2,255
   1097c:	10800058 	cmpnei	r2,r2,1
   10980:	10002f1e 	bne	r2,zero,10a40 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10984:	0005303a 	rdctl	r2,status
   10988:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1098c:	e0ffff17 	ldw	r3,-4(fp)
   10990:	00bfff84 	movi	r2,-2
   10994:	1884703a 	and	r2,r3,r2
   10998:	1001703a 	wrctl	status,r2
  
  return context;
   1099c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   109a0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   109a4:	d0a82603 	ldbu	r2,-24424(gp)
   109a8:	10803fcc 	andi	r2,r2,255
   109ac:	10000326 	beq	r2,zero,109bc <OSIntExit+0x5c>
            OSIntNesting--;
   109b0:	d0a82603 	ldbu	r2,-24424(gp)
   109b4:	10bfffc4 	addi	r2,r2,-1
   109b8:	d0a82605 	stb	r2,-24424(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   109bc:	d0a82603 	ldbu	r2,-24424(gp)
   109c0:	10803fcc 	andi	r2,r2,255
   109c4:	10001a1e 	bne	r2,zero,10a30 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   109c8:	d0a81803 	ldbu	r2,-24480(gp)
   109cc:	10803fcc 	andi	r2,r2,255
   109d0:	1000171e 	bne	r2,zero,10a30 <OSIntExit+0xd0>
                OS_SchedNew();
   109d4:	0011a5c0 	call	11a5c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   109d8:	d0e81a03 	ldbu	r3,-24472(gp)
   109dc:	d0a81a43 	ldbu	r2,-24471(gp)
   109e0:	18c03fcc 	andi	r3,r3,255
   109e4:	10803fcc 	andi	r2,r2,255
   109e8:	18801126 	beq	r3,r2,10a30 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   109ec:	d0a81a03 	ldbu	r2,-24472(gp)
   109f0:	10c03fcc 	andi	r3,r2,255
   109f4:	008000b4 	movhi	r2,2
   109f8:	108bc004 	addi	r2,r2,12032
   109fc:	18c7883a 	add	r3,r3,r3
   10a00:	18c7883a 	add	r3,r3,r3
   10a04:	10c5883a 	add	r2,r2,r3
   10a08:	10800017 	ldw	r2,0(r2)
   10a0c:	d0a82215 	stw	r2,-24440(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   10a10:	d0a82217 	ldw	r2,-24440(gp)
   10a14:	10c00e17 	ldw	r3,56(r2)
   10a18:	18c00044 	addi	r3,r3,1
   10a1c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   10a20:	d0a81d17 	ldw	r2,-24460(gp)
   10a24:	10800044 	addi	r2,r2,1
   10a28:	d0a81d15 	stw	r2,-24460(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   10a2c:	001ac0c0 	call	1ac0c <OSCtxSw>
   10a30:	e0bffd17 	ldw	r2,-12(fp)
   10a34:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a38:	e0bffe17 	ldw	r2,-8(fp)
   10a3c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   10a40:	0001883a 	nop
   10a44:	e037883a 	mov	sp,fp
   10a48:	dfc00117 	ldw	ra,4(sp)
   10a4c:	df000017 	ldw	fp,0(sp)
   10a50:	dec00204 	addi	sp,sp,8
   10a54:	f800283a 	ret

00010a58 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   10a58:	defffc04 	addi	sp,sp,-16
   10a5c:	df000315 	stw	fp,12(sp)
   10a60:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10a64:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   10a68:	d0a81843 	ldbu	r2,-24479(gp)
   10a6c:	10803fcc 	andi	r2,r2,255
   10a70:	10800058 	cmpnei	r2,r2,1
   10a74:	1000161e 	bne	r2,zero,10ad0 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a78:	0005303a 	rdctl	r2,status
   10a7c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a80:	e0ffff17 	ldw	r3,-4(fp)
   10a84:	00bfff84 	movi	r2,-2
   10a88:	1884703a 	and	r2,r3,r2
   10a8c:	1001703a 	wrctl	status,r2
  
  return context;
   10a90:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   10a94:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   10a98:	d0a82603 	ldbu	r2,-24424(gp)
   10a9c:	10803fcc 	andi	r2,r2,255
   10aa0:	1000071e 	bne	r2,zero,10ac0 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   10aa4:	d0a81803 	ldbu	r2,-24480(gp)
   10aa8:	10803fcc 	andi	r2,r2,255
   10aac:	10803fe0 	cmpeqi	r2,r2,255
   10ab0:	1000031e 	bne	r2,zero,10ac0 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   10ab4:	d0a81803 	ldbu	r2,-24480(gp)
   10ab8:	10800044 	addi	r2,r2,1
   10abc:	d0a81805 	stb	r2,-24480(gp)
   10ac0:	e0bffd17 	ldw	r2,-12(fp)
   10ac4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ac8:	e0bffe17 	ldw	r2,-8(fp)
   10acc:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   10ad0:	0001883a 	nop
   10ad4:	e037883a 	mov	sp,fp
   10ad8:	df000017 	ldw	fp,0(sp)
   10adc:	dec00104 	addi	sp,sp,4
   10ae0:	f800283a 	ret

00010ae4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   10ae4:	defff804 	addi	sp,sp,-32
   10ae8:	dfc00715 	stw	ra,28(sp)
   10aec:	df000615 	stw	fp,24(sp)
   10af0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   10af4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   10af8:	d0a81843 	ldbu	r2,-24479(gp)
   10afc:	10803fcc 	andi	r2,r2,255
   10b00:	10800058 	cmpnei	r2,r2,1
   10b04:	1000281e 	bne	r2,zero,10ba8 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b08:	0005303a 	rdctl	r2,status
   10b0c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b10:	e0ffff17 	ldw	r3,-4(fp)
   10b14:	00bfff84 	movi	r2,-2
   10b18:	1884703a 	and	r2,r3,r2
   10b1c:	1001703a 	wrctl	status,r2
  
  return context;
   10b20:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   10b24:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   10b28:	d0a81803 	ldbu	r2,-24480(gp)
   10b2c:	10803fcc 	andi	r2,r2,255
   10b30:	10001926 	beq	r2,zero,10b98 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   10b34:	d0a81803 	ldbu	r2,-24480(gp)
   10b38:	10bfffc4 	addi	r2,r2,-1
   10b3c:	d0a81805 	stb	r2,-24480(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   10b40:	d0a81803 	ldbu	r2,-24480(gp)
   10b44:	10803fcc 	andi	r2,r2,255
   10b48:	10000e1e 	bne	r2,zero,10b84 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   10b4c:	d0a82603 	ldbu	r2,-24424(gp)
   10b50:	10803fcc 	andi	r2,r2,255
   10b54:	1000061e 	bne	r2,zero,10b70 <OSSchedUnlock+0x8c>
   10b58:	e0bffa17 	ldw	r2,-24(fp)
   10b5c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b60:	e0bffb17 	ldw	r2,-20(fp)
   10b64:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   10b68:	001198c0 	call	1198c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   10b6c:	00000e06 	br	10ba8 <OSSchedUnlock+0xc4>
   10b70:	e0bffa17 	ldw	r2,-24(fp)
   10b74:	e0bffc15 	stw	r2,-16(fp)
   10b78:	e0bffc17 	ldw	r2,-16(fp)
   10b7c:	1001703a 	wrctl	status,r2
   10b80:	00000906 	br	10ba8 <OSSchedUnlock+0xc4>
   10b84:	e0bffa17 	ldw	r2,-24(fp)
   10b88:	e0bffd15 	stw	r2,-12(fp)
   10b8c:	e0bffd17 	ldw	r2,-12(fp)
   10b90:	1001703a 	wrctl	status,r2
   10b94:	00000406 	br	10ba8 <OSSchedUnlock+0xc4>
   10b98:	e0bffa17 	ldw	r2,-24(fp)
   10b9c:	e0bffe15 	stw	r2,-8(fp)
   10ba0:	e0bffe17 	ldw	r2,-8(fp)
   10ba4:	1001703a 	wrctl	status,r2
   10ba8:	0001883a 	nop
   10bac:	e037883a 	mov	sp,fp
   10bb0:	dfc00117 	ldw	ra,4(sp)
   10bb4:	df000017 	ldw	fp,0(sp)
   10bb8:	dec00204 	addi	sp,sp,8
   10bbc:	f800283a 	ret

00010bc0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   10bc0:	defffe04 	addi	sp,sp,-8
   10bc4:	dfc00115 	stw	ra,4(sp)
   10bc8:	df000015 	stw	fp,0(sp)
   10bcc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   10bd0:	d0a81843 	ldbu	r2,-24479(gp)
   10bd4:	10803fcc 	andi	r2,r2,255
   10bd8:	10000f1e 	bne	r2,zero,10c18 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   10bdc:	0011a5c0 	call	11a5c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   10be0:	d0a81a03 	ldbu	r2,-24472(gp)
   10be4:	d0a81a45 	stb	r2,-24471(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   10be8:	d0a81a03 	ldbu	r2,-24472(gp)
   10bec:	10c03fcc 	andi	r3,r2,255
   10bf0:	008000b4 	movhi	r2,2
   10bf4:	108bc004 	addi	r2,r2,12032
   10bf8:	18c7883a 	add	r3,r3,r3
   10bfc:	18c7883a 	add	r3,r3,r3
   10c00:	10c5883a 	add	r2,r2,r3
   10c04:	10800017 	ldw	r2,0(r2)
   10c08:	d0a82215 	stw	r2,-24440(gp)
        OSTCBCur      = OSTCBHighRdy;
   10c0c:	d0a82217 	ldw	r2,-24440(gp)
   10c10:	d0a82715 	stw	r2,-24420(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   10c14:	001ac980 	call	1ac98 <OSStartHighRdy>
    }
}
   10c18:	0001883a 	nop
   10c1c:	e037883a 	mov	sp,fp
   10c20:	dfc00117 	ldw	ra,4(sp)
   10c24:	df000017 	ldw	fp,0(sp)
   10c28:	dec00204 	addi	sp,sp,8
   10c2c:	f800283a 	ret

00010c30 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   10c30:	defff904 	addi	sp,sp,-28
   10c34:	dfc00615 	stw	ra,24(sp)
   10c38:	df000515 	stw	fp,20(sp)
   10c3c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10c40:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   10c44:	01000084 	movi	r4,2
   10c48:	00173380 	call	17338 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c4c:	0005303a 	rdctl	r2,status
   10c50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c54:	e0fffc17 	ldw	r3,-16(fp)
   10c58:	00bfff84 	movi	r2,-2
   10c5c:	1884703a 	and	r2,r3,r2
   10c60:	1001703a 	wrctl	status,r2
  
  return context;
   10c64:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   10c68:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   10c6c:	d0281915 	stw	zero,-24476(gp)
   10c70:	e0bffb17 	ldw	r2,-20(fp)
   10c74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c78:	e0bffd17 	ldw	r2,-12(fp)
   10c7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   10c80:	0009883a 	mov	r4,zero
   10c84:	00173380 	call	17338 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c88:	0005303a 	rdctl	r2,status
   10c8c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c90:	e0fffe17 	ldw	r3,-8(fp)
   10c94:	00bfff84 	movi	r2,-2
   10c98:	1884703a 	and	r2,r3,r2
   10c9c:	1001703a 	wrctl	status,r2
  
  return context;
   10ca0:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   10ca4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   10ca8:	d0a81917 	ldw	r2,-24476(gp)
   10cac:	d0a81e15 	stw	r2,-24456(gp)
    OSStatRdy    = OS_TRUE;
   10cb0:	00800044 	movi	r2,1
   10cb4:	d0a82a05 	stb	r2,-24408(gp)
   10cb8:	e0bffb17 	ldw	r2,-20(fp)
   10cbc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10cc0:	e0bfff17 	ldw	r2,-4(fp)
   10cc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   10cc8:	0001883a 	nop
   10ccc:	e037883a 	mov	sp,fp
   10cd0:	dfc00117 	ldw	ra,4(sp)
   10cd4:	df000017 	ldw	fp,0(sp)
   10cd8:	dec00204 	addi	sp,sp,8
   10cdc:	f800283a 	ret

00010ce0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   10ce0:	defff704 	addi	sp,sp,-36
   10ce4:	dfc00815 	stw	ra,32(sp)
   10ce8:	df000715 	stw	fp,28(sp)
   10cec:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   10cf0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   10cf4:	001aec00 	call	1aec0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10cf8:	0005303a 	rdctl	r2,status
   10cfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d00:	e0fffd17 	ldw	r3,-12(fp)
   10d04:	00bfff84 	movi	r2,-2
   10d08:	1884703a 	and	r2,r3,r2
   10d0c:	1001703a 	wrctl	status,r2
  
  return context;
   10d10:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   10d14:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   10d18:	d0a82817 	ldw	r2,-24416(gp)
   10d1c:	10800044 	addi	r2,r2,1
   10d20:	d0a82815 	stw	r2,-24416(gp)
   10d24:	e0bffb17 	ldw	r2,-20(fp)
   10d28:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d2c:	e0bfff17 	ldw	r2,-4(fp)
   10d30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   10d34:	d0a81843 	ldbu	r2,-24479(gp)
   10d38:	10803fcc 	andi	r2,r2,255
   10d3c:	10800058 	cmpnei	r2,r2,1
   10d40:	10006a1e 	bne	r2,zero,10eec <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   10d44:	d0a81c03 	ldbu	r2,-24464(gp)
   10d48:	10803fcc 	andi	r2,r2,255
   10d4c:	10c00060 	cmpeqi	r3,r2,1
   10d50:	1800061e 	bne	r3,zero,10d6c <OSTimeTick+0x8c>
   10d54:	10c000a0 	cmpeqi	r3,r2,2
   10d58:	1800061e 	bne	r3,zero,10d74 <OSTimeTick+0x94>
   10d5c:	10000a1e 	bne	r2,zero,10d88 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   10d60:	00800044 	movi	r2,1
   10d64:	e0bffa05 	stb	r2,-24(fp)
                 break;
   10d68:	00000b06 	br	10d98 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   10d6c:	e03ffa05 	stb	zero,-24(fp)
                 break;
   10d70:	00000906 	br	10d98 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   10d74:	00800044 	movi	r2,1
   10d78:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   10d7c:	00800044 	movi	r2,1
   10d80:	d0a81c05 	stb	r2,-24464(gp)
                 break;
   10d84:	00000406 	br	10d98 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   10d88:	00800044 	movi	r2,1
   10d8c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   10d90:	d0281c05 	stb	zero,-24464(gp)
                 break;
   10d94:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   10d98:	e0bffa03 	ldbu	r2,-24(fp)
   10d9c:	10005226 	beq	r2,zero,10ee8 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   10da0:	d0a81b17 	ldw	r2,-24468(gp)
   10da4:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   10da8:	00004906 	br	10ed0 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10dac:	0005303a 	rdctl	r2,status
   10db0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10db4:	e0fffc17 	ldw	r3,-16(fp)
   10db8:	00bfff84 	movi	r2,-2
   10dbc:	1884703a 	and	r2,r3,r2
   10dc0:	1001703a 	wrctl	status,r2
  
  return context;
   10dc4:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   10dc8:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   10dcc:	e0bff917 	ldw	r2,-28(fp)
   10dd0:	10800b8b 	ldhu	r2,46(r2)
   10dd4:	10bfffcc 	andi	r2,r2,65535
   10dd8:	10003626 	beq	r2,zero,10eb4 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   10ddc:	e0bff917 	ldw	r2,-28(fp)
   10de0:	10800b8b 	ldhu	r2,46(r2)
   10de4:	10bfffc4 	addi	r2,r2,-1
   10de8:	1007883a 	mov	r3,r2
   10dec:	e0bff917 	ldw	r2,-28(fp)
   10df0:	10c00b8d 	sth	r3,46(r2)
   10df4:	e0bff917 	ldw	r2,-28(fp)
   10df8:	10800b8b 	ldhu	r2,46(r2)
   10dfc:	10bfffcc 	andi	r2,r2,65535
   10e00:	10002c1e 	bne	r2,zero,10eb4 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   10e04:	e0bff917 	ldw	r2,-28(fp)
   10e08:	10800c03 	ldbu	r2,48(r2)
   10e0c:	10803fcc 	andi	r2,r2,255
   10e10:	10800dcc 	andi	r2,r2,55
   10e14:	10000b26 	beq	r2,zero,10e44 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   10e18:	e0bff917 	ldw	r2,-28(fp)
   10e1c:	10c00c03 	ldbu	r3,48(r2)
   10e20:	00bff204 	movi	r2,-56
   10e24:	1884703a 	and	r2,r3,r2
   10e28:	1007883a 	mov	r3,r2
   10e2c:	e0bff917 	ldw	r2,-28(fp)
   10e30:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   10e34:	e0bff917 	ldw	r2,-28(fp)
   10e38:	00c00044 	movi	r3,1
   10e3c:	10c00c45 	stb	r3,49(r2)
   10e40:	00000206 	br	10e4c <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   10e44:	e0bff917 	ldw	r2,-28(fp)
   10e48:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   10e4c:	e0bff917 	ldw	r2,-28(fp)
   10e50:	10800c03 	ldbu	r2,48(r2)
   10e54:	10803fcc 	andi	r2,r2,255
   10e58:	1080020c 	andi	r2,r2,8
   10e5c:	1000151e 	bne	r2,zero,10eb4 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   10e60:	e0bff917 	ldw	r2,-28(fp)
   10e64:	10c00d83 	ldbu	r3,54(r2)
   10e68:	d0a82403 	ldbu	r2,-24432(gp)
   10e6c:	1884b03a 	or	r2,r3,r2
   10e70:	d0a82405 	stb	r2,-24432(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   10e74:	e0bff917 	ldw	r2,-28(fp)
   10e78:	10800d03 	ldbu	r2,52(r2)
   10e7c:	10c03fcc 	andi	r3,r2,255
   10e80:	e0bff917 	ldw	r2,-28(fp)
   10e84:	10800d03 	ldbu	r2,52(r2)
   10e88:	11003fcc 	andi	r4,r2,255
   10e8c:	d0a82444 	addi	r2,gp,-24431
   10e90:	2085883a 	add	r2,r4,r2
   10e94:	11000003 	ldbu	r4,0(r2)
   10e98:	e0bff917 	ldw	r2,-28(fp)
   10e9c:	10800d43 	ldbu	r2,53(r2)
   10ea0:	2084b03a 	or	r2,r4,r2
   10ea4:	1009883a 	mov	r4,r2
   10ea8:	d0a82444 	addi	r2,gp,-24431
   10eac:	1885883a 	add	r2,r3,r2
   10eb0:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   10eb4:	e0bff917 	ldw	r2,-28(fp)
   10eb8:	10800517 	ldw	r2,20(r2)
   10ebc:	e0bff915 	stw	r2,-28(fp)
   10ec0:	e0bffb17 	ldw	r2,-20(fp)
   10ec4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ec8:	e0bffe17 	ldw	r2,-8(fp)
   10ecc:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   10ed0:	e0bff917 	ldw	r2,-28(fp)
   10ed4:	10800c83 	ldbu	r2,50(r2)
   10ed8:	10803fcc 	andi	r2,r2,255
   10edc:	10800518 	cmpnei	r2,r2,20
   10ee0:	103fb21e 	bne	r2,zero,10dac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010dac>
   10ee4:	00000106 	br	10eec <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   10ee8:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   10eec:	e037883a 	mov	sp,fp
   10ef0:	dfc00117 	ldw	ra,4(sp)
   10ef4:	df000017 	ldw	fp,0(sp)
   10ef8:	dec00204 	addi	sp,sp,8
   10efc:	f800283a 	ret

00010f00 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   10f00:	deffff04 	addi	sp,sp,-4
   10f04:	df000015 	stw	fp,0(sp)
   10f08:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   10f0c:	00804784 	movi	r2,286
}
   10f10:	e037883a 	mov	sp,fp
   10f14:	df000017 	ldw	fp,0(sp)
   10f18:	dec00104 	addi	sp,sp,4
   10f1c:	f800283a 	ret

00010f20 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   10f20:	deffff04 	addi	sp,sp,-4
   10f24:	df000015 	stw	fp,0(sp)
   10f28:	d839883a 	mov	fp,sp
}
   10f2c:	0001883a 	nop
   10f30:	e037883a 	mov	sp,fp
   10f34:	df000017 	ldw	fp,0(sp)
   10f38:	dec00104 	addi	sp,sp,4
   10f3c:	f800283a 	ret

00010f40 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   10f40:	defff804 	addi	sp,sp,-32
   10f44:	dfc00715 	stw	ra,28(sp)
   10f48:	df000615 	stw	fp,24(sp)
   10f4c:	df000604 	addi	fp,sp,24
   10f50:	e13ffc15 	stw	r4,-16(fp)
   10f54:	e17ffd15 	stw	r5,-12(fp)
   10f58:	3007883a 	mov	r3,r6
   10f5c:	3805883a 	mov	r2,r7
   10f60:	e0fffe05 	stb	r3,-8(fp)
   10f64:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   10f68:	e0bffc17 	ldw	r2,-16(fp)
   10f6c:	10800283 	ldbu	r2,10(r2)
   10f70:	10c03fcc 	andi	r3,r2,255
   10f74:	008000b4 	movhi	r2,2
   10f78:	10aeb204 	addi	r2,r2,-17720
   10f7c:	10c5883a 	add	r2,r2,r3
   10f80:	10800003 	ldbu	r2,0(r2)
   10f84:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   10f88:	e0bffa03 	ldbu	r2,-24(fp)
   10f8c:	e0fffc17 	ldw	r3,-16(fp)
   10f90:	1885883a 	add	r2,r3,r2
   10f94:	108002c4 	addi	r2,r2,11
   10f98:	10800003 	ldbu	r2,0(r2)
   10f9c:	10c03fcc 	andi	r3,r2,255
   10fa0:	008000b4 	movhi	r2,2
   10fa4:	10aeb204 	addi	r2,r2,-17720
   10fa8:	10c5883a 	add	r2,r2,r3
   10fac:	10800003 	ldbu	r2,0(r2)
   10fb0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   10fb4:	e0bffa03 	ldbu	r2,-24(fp)
   10fb8:	100490fa 	slli	r2,r2,3
   10fbc:	1007883a 	mov	r3,r2
   10fc0:	e0bffa43 	ldbu	r2,-23(fp)
   10fc4:	1885883a 	add	r2,r3,r2
   10fc8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   10fcc:	e0fffa83 	ldbu	r3,-22(fp)
   10fd0:	008000b4 	movhi	r2,2
   10fd4:	108bc004 	addi	r2,r2,12032
   10fd8:	18c7883a 	add	r3,r3,r3
   10fdc:	18c7883a 	add	r3,r3,r3
   10fe0:	10c5883a 	add	r2,r2,r3
   10fe4:	10800017 	ldw	r2,0(r2)
   10fe8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   10fec:	e0bffb17 	ldw	r2,-20(fp)
   10ff0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   10ff4:	e0bffb17 	ldw	r2,-20(fp)
   10ff8:	e0fffd17 	ldw	r3,-12(fp)
   10ffc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   11000:	e0bffb17 	ldw	r2,-20(fp)
   11004:	10800c03 	ldbu	r2,48(r2)
   11008:	1007883a 	mov	r3,r2
   1100c:	e0bffe03 	ldbu	r2,-8(fp)
   11010:	0084303a 	nor	r2,zero,r2
   11014:	1884703a 	and	r2,r3,r2
   11018:	1007883a 	mov	r3,r2
   1101c:	e0bffb17 	ldw	r2,-20(fp)
   11020:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   11024:	e0bffb17 	ldw	r2,-20(fp)
   11028:	e0ffff03 	ldbu	r3,-4(fp)
   1102c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   11030:	e0bffb17 	ldw	r2,-20(fp)
   11034:	10800c03 	ldbu	r2,48(r2)
   11038:	10803fcc 	andi	r2,r2,255
   1103c:	1080020c 	andi	r2,r2,8
   11040:	1000111e 	bne	r2,zero,11088 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   11044:	e0bffb17 	ldw	r2,-20(fp)
   11048:	10c00d83 	ldbu	r3,54(r2)
   1104c:	d0a82403 	ldbu	r2,-24432(gp)
   11050:	1884b03a 	or	r2,r3,r2
   11054:	d0a82405 	stb	r2,-24432(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   11058:	e0fffa03 	ldbu	r3,-24(fp)
   1105c:	e13ffa03 	ldbu	r4,-24(fp)
   11060:	d0a82444 	addi	r2,gp,-24431
   11064:	2085883a 	add	r2,r4,r2
   11068:	11000003 	ldbu	r4,0(r2)
   1106c:	e0bffb17 	ldw	r2,-20(fp)
   11070:	10800d43 	ldbu	r2,53(r2)
   11074:	2084b03a 	or	r2,r4,r2
   11078:	1009883a 	mov	r4,r2
   1107c:	d0a82444 	addi	r2,gp,-24431
   11080:	1885883a 	add	r2,r3,r2
   11084:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   11088:	e17ffc17 	ldw	r5,-16(fp)
   1108c:	e13ffb17 	ldw	r4,-20(fp)
   11090:	00113380 	call	11338 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   11094:	e0bffb17 	ldw	r2,-20(fp)
   11098:	10800817 	ldw	r2,32(r2)
   1109c:	10000826 	beq	r2,zero,110c0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   110a0:	e0bffb17 	ldw	r2,-20(fp)
   110a4:	10800817 	ldw	r2,32(r2)
   110a8:	100b883a 	mov	r5,r2
   110ac:	e13ffb17 	ldw	r4,-20(fp)
   110b0:	00113f00 	call	113f0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   110b4:	e0bffb17 	ldw	r2,-20(fp)
   110b8:	e0fffc17 	ldw	r3,-16(fp)
   110bc:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   110c0:	e0bffa83 	ldbu	r2,-22(fp)
}
   110c4:	e037883a 	mov	sp,fp
   110c8:	dfc00117 	ldw	ra,4(sp)
   110cc:	df000017 	ldw	fp,0(sp)
   110d0:	dec00204 	addi	sp,sp,8
   110d4:	f800283a 	ret

000110d8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   110d8:	defffd04 	addi	sp,sp,-12
   110dc:	df000215 	stw	fp,8(sp)
   110e0:	df000204 	addi	fp,sp,8
   110e4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   110e8:	d0a82717 	ldw	r2,-24420(gp)
   110ec:	e0ffff17 	ldw	r3,-4(fp)
   110f0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   110f4:	d0a82717 	ldw	r2,-24420(gp)
   110f8:	10800d03 	ldbu	r2,52(r2)
   110fc:	10803fcc 	andi	r2,r2,255
   11100:	d0e82717 	ldw	r3,-24420(gp)
   11104:	18c00d03 	ldbu	r3,52(r3)
   11108:	18c03fcc 	andi	r3,r3,255
   1110c:	e13fff17 	ldw	r4,-4(fp)
   11110:	20c7883a 	add	r3,r4,r3
   11114:	18c002c4 	addi	r3,r3,11
   11118:	19000003 	ldbu	r4,0(r3)
   1111c:	d0e82717 	ldw	r3,-24420(gp)
   11120:	18c00d43 	ldbu	r3,53(r3)
   11124:	20c6b03a 	or	r3,r4,r3
   11128:	1809883a 	mov	r4,r3
   1112c:	e0ffff17 	ldw	r3,-4(fp)
   11130:	1885883a 	add	r2,r3,r2
   11134:	108002c4 	addi	r2,r2,11
   11138:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   1113c:	e0bfff17 	ldw	r2,-4(fp)
   11140:	10c00283 	ldbu	r3,10(r2)
   11144:	d0a82717 	ldw	r2,-24420(gp)
   11148:	10800d83 	ldbu	r2,54(r2)
   1114c:	1884b03a 	or	r2,r3,r2
   11150:	1007883a 	mov	r3,r2
   11154:	e0bfff17 	ldw	r2,-4(fp)
   11158:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   1115c:	d0a82717 	ldw	r2,-24420(gp)
   11160:	10800d03 	ldbu	r2,52(r2)
   11164:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   11168:	e0fffe03 	ldbu	r3,-8(fp)
   1116c:	e13ffe03 	ldbu	r4,-8(fp)
   11170:	d0a82444 	addi	r2,gp,-24431
   11174:	2085883a 	add	r2,r4,r2
   11178:	10800003 	ldbu	r2,0(r2)
   1117c:	1009883a 	mov	r4,r2
   11180:	d0a82717 	ldw	r2,-24420(gp)
   11184:	10800d43 	ldbu	r2,53(r2)
   11188:	0084303a 	nor	r2,zero,r2
   1118c:	2084703a 	and	r2,r4,r2
   11190:	1009883a 	mov	r4,r2
   11194:	d0a82444 	addi	r2,gp,-24431
   11198:	1885883a 	add	r2,r3,r2
   1119c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   111a0:	e0fffe03 	ldbu	r3,-8(fp)
   111a4:	d0a82444 	addi	r2,gp,-24431
   111a8:	1885883a 	add	r2,r3,r2
   111ac:	10800003 	ldbu	r2,0(r2)
   111b0:	10803fcc 	andi	r2,r2,255
   111b4:	1000071e 	bne	r2,zero,111d4 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   111b8:	d0a82717 	ldw	r2,-24420(gp)
   111bc:	10800d83 	ldbu	r2,54(r2)
   111c0:	0084303a 	nor	r2,zero,r2
   111c4:	1007883a 	mov	r3,r2
   111c8:	d0a82403 	ldbu	r2,-24432(gp)
   111cc:	1884703a 	and	r2,r3,r2
   111d0:	d0a82405 	stb	r2,-24432(gp)
    }
}
   111d4:	0001883a 	nop
   111d8:	e037883a 	mov	sp,fp
   111dc:	df000017 	ldw	fp,0(sp)
   111e0:	dec00104 	addi	sp,sp,4
   111e4:	f800283a 	ret

000111e8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   111e8:	defffb04 	addi	sp,sp,-20
   111ec:	df000415 	stw	fp,16(sp)
   111f0:	df000404 	addi	fp,sp,16
   111f4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   111f8:	d0a82717 	ldw	r2,-24420(gp)
   111fc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   11200:	d0a82717 	ldw	r2,-24420(gp)
   11204:	e0ffff17 	ldw	r3,-4(fp)
   11208:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   1120c:	e0bfff17 	ldw	r2,-4(fp)
   11210:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   11214:	e0bffc17 	ldw	r2,-16(fp)
   11218:	10800017 	ldw	r2,0(r2)
   1121c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   11220:	00002006 	br	112a4 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   11224:	d0a82717 	ldw	r2,-24420(gp)
   11228:	10800d03 	ldbu	r2,52(r2)
   1122c:	10803fcc 	andi	r2,r2,255
   11230:	d0e82717 	ldw	r3,-24420(gp)
   11234:	18c00d03 	ldbu	r3,52(r3)
   11238:	18c03fcc 	andi	r3,r3,255
   1123c:	e13ffd17 	ldw	r4,-12(fp)
   11240:	20c7883a 	add	r3,r4,r3
   11244:	18c002c4 	addi	r3,r3,11
   11248:	19000003 	ldbu	r4,0(r3)
   1124c:	d0e82717 	ldw	r3,-24420(gp)
   11250:	18c00d43 	ldbu	r3,53(r3)
   11254:	20c6b03a 	or	r3,r4,r3
   11258:	1809883a 	mov	r4,r3
   1125c:	e0fffd17 	ldw	r3,-12(fp)
   11260:	1885883a 	add	r2,r3,r2
   11264:	108002c4 	addi	r2,r2,11
   11268:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   1126c:	e0bffd17 	ldw	r2,-12(fp)
   11270:	10c00283 	ldbu	r3,10(r2)
   11274:	d0a82717 	ldw	r2,-24420(gp)
   11278:	10800d83 	ldbu	r2,54(r2)
   1127c:	1884b03a 	or	r2,r3,r2
   11280:	1007883a 	mov	r3,r2
   11284:	e0bffd17 	ldw	r2,-12(fp)
   11288:	10c00285 	stb	r3,10(r2)
        pevents++;
   1128c:	e0bffc17 	ldw	r2,-16(fp)
   11290:	10800104 	addi	r2,r2,4
   11294:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   11298:	e0bffc17 	ldw	r2,-16(fp)
   1129c:	10800017 	ldw	r2,0(r2)
   112a0:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   112a4:	e0bffd17 	ldw	r2,-12(fp)
   112a8:	103fde1e 	bne	r2,zero,11224 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011224>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   112ac:	d0a82717 	ldw	r2,-24420(gp)
   112b0:	10800d03 	ldbu	r2,52(r2)
   112b4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   112b8:	e0fffe03 	ldbu	r3,-8(fp)
   112bc:	e13ffe03 	ldbu	r4,-8(fp)
   112c0:	d0a82444 	addi	r2,gp,-24431
   112c4:	2085883a 	add	r2,r4,r2
   112c8:	10800003 	ldbu	r2,0(r2)
   112cc:	1009883a 	mov	r4,r2
   112d0:	d0a82717 	ldw	r2,-24420(gp)
   112d4:	10800d43 	ldbu	r2,53(r2)
   112d8:	0084303a 	nor	r2,zero,r2
   112dc:	2084703a 	and	r2,r4,r2
   112e0:	1009883a 	mov	r4,r2
   112e4:	d0a82444 	addi	r2,gp,-24431
   112e8:	1885883a 	add	r2,r3,r2
   112ec:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   112f0:	e0fffe03 	ldbu	r3,-8(fp)
   112f4:	d0a82444 	addi	r2,gp,-24431
   112f8:	1885883a 	add	r2,r3,r2
   112fc:	10800003 	ldbu	r2,0(r2)
   11300:	10803fcc 	andi	r2,r2,255
   11304:	1000071e 	bne	r2,zero,11324 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   11308:	d0a82717 	ldw	r2,-24420(gp)
   1130c:	10800d83 	ldbu	r2,54(r2)
   11310:	0084303a 	nor	r2,zero,r2
   11314:	1007883a 	mov	r3,r2
   11318:	d0a82403 	ldbu	r2,-24432(gp)
   1131c:	1884703a 	and	r2,r3,r2
   11320:	d0a82405 	stb	r2,-24432(gp)
    }
}
   11324:	0001883a 	nop
   11328:	e037883a 	mov	sp,fp
   1132c:	df000017 	ldw	fp,0(sp)
   11330:	dec00104 	addi	sp,sp,4
   11334:	f800283a 	ret

00011338 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   11338:	defffc04 	addi	sp,sp,-16
   1133c:	df000315 	stw	fp,12(sp)
   11340:	df000304 	addi	fp,sp,12
   11344:	e13ffe15 	stw	r4,-8(fp)
   11348:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   1134c:	e0bffe17 	ldw	r2,-8(fp)
   11350:	10800d03 	ldbu	r2,52(r2)
   11354:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   11358:	e0bffd03 	ldbu	r2,-12(fp)
   1135c:	e0fffd03 	ldbu	r3,-12(fp)
   11360:	e13fff17 	ldw	r4,-4(fp)
   11364:	20c7883a 	add	r3,r4,r3
   11368:	18c002c4 	addi	r3,r3,11
   1136c:	18c00003 	ldbu	r3,0(r3)
   11370:	1809883a 	mov	r4,r3
   11374:	e0fffe17 	ldw	r3,-8(fp)
   11378:	18c00d43 	ldbu	r3,53(r3)
   1137c:	00c6303a 	nor	r3,zero,r3
   11380:	20c6703a 	and	r3,r4,r3
   11384:	1809883a 	mov	r4,r3
   11388:	e0ffff17 	ldw	r3,-4(fp)
   1138c:	1885883a 	add	r2,r3,r2
   11390:	108002c4 	addi	r2,r2,11
   11394:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   11398:	e0bffd03 	ldbu	r2,-12(fp)
   1139c:	e0ffff17 	ldw	r3,-4(fp)
   113a0:	1885883a 	add	r2,r3,r2
   113a4:	108002c4 	addi	r2,r2,11
   113a8:	10800003 	ldbu	r2,0(r2)
   113ac:	10803fcc 	andi	r2,r2,255
   113b0:	10000a1e 	bne	r2,zero,113dc <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   113b4:	e0bfff17 	ldw	r2,-4(fp)
   113b8:	10800283 	ldbu	r2,10(r2)
   113bc:	1007883a 	mov	r3,r2
   113c0:	e0bffe17 	ldw	r2,-8(fp)
   113c4:	10800d83 	ldbu	r2,54(r2)
   113c8:	0084303a 	nor	r2,zero,r2
   113cc:	1884703a 	and	r2,r3,r2
   113d0:	1007883a 	mov	r3,r2
   113d4:	e0bfff17 	ldw	r2,-4(fp)
   113d8:	10c00285 	stb	r3,10(r2)
    }
}
   113dc:	0001883a 	nop
   113e0:	e037883a 	mov	sp,fp
   113e4:	df000017 	ldw	fp,0(sp)
   113e8:	dec00104 	addi	sp,sp,4
   113ec:	f800283a 	ret

000113f0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   113f0:	defffa04 	addi	sp,sp,-24
   113f4:	df000515 	stw	fp,20(sp)
   113f8:	df000504 	addi	fp,sp,20
   113fc:	e13ffe15 	stw	r4,-8(fp)
   11400:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   11404:	e0bffe17 	ldw	r2,-8(fp)
   11408:	10800d03 	ldbu	r2,52(r2)
   1140c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   11410:	e0bffe17 	ldw	r2,-8(fp)
   11414:	10800d83 	ldbu	r2,54(r2)
   11418:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   1141c:	e0bffe17 	ldw	r2,-8(fp)
   11420:	10800d43 	ldbu	r2,53(r2)
   11424:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   11428:	e0bfff17 	ldw	r2,-4(fp)
   1142c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   11430:	e0bffb17 	ldw	r2,-20(fp)
   11434:	10800017 	ldw	r2,0(r2)
   11438:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   1143c:	00002506 	br	114d4 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   11440:	e0bffd03 	ldbu	r2,-12(fp)
   11444:	e0fffd03 	ldbu	r3,-12(fp)
   11448:	e13ffc17 	ldw	r4,-16(fp)
   1144c:	20c7883a 	add	r3,r4,r3
   11450:	18c002c4 	addi	r3,r3,11
   11454:	18c00003 	ldbu	r3,0(r3)
   11458:	1809883a 	mov	r4,r3
   1145c:	e0fffd83 	ldbu	r3,-10(fp)
   11460:	00c6303a 	nor	r3,zero,r3
   11464:	20c6703a 	and	r3,r4,r3
   11468:	1809883a 	mov	r4,r3
   1146c:	e0fffc17 	ldw	r3,-16(fp)
   11470:	1885883a 	add	r2,r3,r2
   11474:	108002c4 	addi	r2,r2,11
   11478:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   1147c:	e0bffd03 	ldbu	r2,-12(fp)
   11480:	e0fffc17 	ldw	r3,-16(fp)
   11484:	1885883a 	add	r2,r3,r2
   11488:	108002c4 	addi	r2,r2,11
   1148c:	10800003 	ldbu	r2,0(r2)
   11490:	10803fcc 	andi	r2,r2,255
   11494:	1000091e 	bne	r2,zero,114bc <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   11498:	e0bffc17 	ldw	r2,-16(fp)
   1149c:	10800283 	ldbu	r2,10(r2)
   114a0:	1007883a 	mov	r3,r2
   114a4:	e0bffd43 	ldbu	r2,-11(fp)
   114a8:	0084303a 	nor	r2,zero,r2
   114ac:	1884703a 	and	r2,r3,r2
   114b0:	1007883a 	mov	r3,r2
   114b4:	e0bffc17 	ldw	r2,-16(fp)
   114b8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   114bc:	e0bffb17 	ldw	r2,-20(fp)
   114c0:	10800104 	addi	r2,r2,4
   114c4:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   114c8:	e0bffb17 	ldw	r2,-20(fp)
   114cc:	10800017 	ldw	r2,0(r2)
   114d0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   114d4:	e0bffc17 	ldw	r2,-16(fp)
   114d8:	103fd91e 	bne	r2,zero,11440 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011440>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   114dc:	0001883a 	nop
   114e0:	e037883a 	mov	sp,fp
   114e4:	df000017 	ldw	fp,0(sp)
   114e8:	dec00104 	addi	sp,sp,4
   114ec:	f800283a 	ret

000114f0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   114f0:	defffc04 	addi	sp,sp,-16
   114f4:	df000315 	stw	fp,12(sp)
   114f8:	df000304 	addi	fp,sp,12
   114fc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   11500:	e0bfff17 	ldw	r2,-4(fp)
   11504:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   11508:	e0bfff17 	ldw	r2,-4(fp)
   1150c:	108002c4 	addi	r2,r2,11
   11510:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   11514:	e03ffe05 	stb	zero,-8(fp)
   11518:	00000706 	br	11538 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   1151c:	e0bffd17 	ldw	r2,-12(fp)
   11520:	10c00044 	addi	r3,r2,1
   11524:	e0fffd15 	stw	r3,-12(fp)
   11528:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1152c:	e0bffe03 	ldbu	r2,-8(fp)
   11530:	10800044 	addi	r2,r2,1
   11534:	e0bffe05 	stb	r2,-8(fp)
   11538:	e0bffe03 	ldbu	r2,-8(fp)
   1153c:	108000f0 	cmpltui	r2,r2,3
   11540:	103ff61e 	bne	r2,zero,1151c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701151c>
        *ptbl++ = 0;
    }
}
   11544:	0001883a 	nop
   11548:	e037883a 	mov	sp,fp
   1154c:	df000017 	ldw	fp,0(sp)
   11550:	dec00104 	addi	sp,sp,4
   11554:	f800283a 	ret

00011558 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   11558:	defffb04 	addi	sp,sp,-20
   1155c:	dfc00415 	stw	ra,16(sp)
   11560:	df000315 	stw	fp,12(sp)
   11564:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   11568:	0142d004 	movi	r5,2880
   1156c:	010000b4 	movhi	r4,2
   11570:	2107ac04 	addi	r4,r4,7856
   11574:	00118d00 	call	118d0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   11578:	008000b4 	movhi	r2,2
   1157c:	1087ac04 	addi	r2,r2,7856
   11580:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   11584:	008000b4 	movhi	r2,2
   11588:	1087b804 	addi	r2,r2,7904
   1158c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   11590:	e03ffd0d 	sth	zero,-12(fp)
   11594:	00001306 	br	115e4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   11598:	e0bffe17 	ldw	r2,-8(fp)
   1159c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   115a0:	e0bffe17 	ldw	r2,-8(fp)
   115a4:	e0ffff17 	ldw	r3,-4(fp)
   115a8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   115ac:	e0bffe17 	ldw	r2,-8(fp)
   115b0:	00c00fc4 	movi	r3,63
   115b4:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   115b8:	e0bffe17 	ldw	r2,-8(fp)
   115bc:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   115c0:	e0bffe17 	ldw	r2,-8(fp)
   115c4:	10800c04 	addi	r2,r2,48
   115c8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   115cc:	e0bfff17 	ldw	r2,-4(fp)
   115d0:	10800c04 	addi	r2,r2,48
   115d4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   115d8:	e0bffd0b 	ldhu	r2,-12(fp)
   115dc:	10800044 	addi	r2,r2,1
   115e0:	e0bffd0d 	sth	r2,-12(fp)
   115e4:	e0bffd0b 	ldhu	r2,-12(fp)
   115e8:	10800ef0 	cmpltui	r2,r2,59
   115ec:	103fea1e 	bne	r2,zero,11598 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011598>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   115f0:	e0bffe17 	ldw	r2,-8(fp)
   115f4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   115f8:	e0bffe17 	ldw	r2,-8(fp)
   115fc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   11600:	e0bffe17 	ldw	r2,-8(fp)
   11604:	00c00fc4 	movi	r3,63
   11608:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   1160c:	e0bffe17 	ldw	r2,-8(fp)
   11610:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   11614:	008000b4 	movhi	r2,2
   11618:	1087ac04 	addi	r2,r2,7856
   1161c:	d0a82515 	stw	r2,-24428(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   11620:	0001883a 	nop
   11624:	e037883a 	mov	sp,fp
   11628:	dfc00117 	ldw	ra,4(sp)
   1162c:	df000017 	ldw	fp,0(sp)
   11630:	dec00204 	addi	sp,sp,8
   11634:	f800283a 	ret

00011638 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   11638:	deffff04 	addi	sp,sp,-4
   1163c:	df000015 	stw	fp,0(sp)
   11640:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   11644:	d0282815 	stw	zero,-24416(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   11648:	d0282605 	stb	zero,-24424(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   1164c:	d0281805 	stb	zero,-24480(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   11650:	d0282045 	stb	zero,-24447(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   11654:	d0281845 	stb	zero,-24479(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   11658:	d0281d15 	stw	zero,-24460(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   1165c:	d0281915 	stw	zero,-24476(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   11660:	d0282b15 	stw	zero,-24404(gp)
    OSIdleCtrMax  = 0L;
   11664:	d0281e15 	stw	zero,-24456(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   11668:	d0282a05 	stb	zero,-24408(gp)
#endif
}
   1166c:	0001883a 	nop
   11670:	e037883a 	mov	sp,fp
   11674:	df000017 	ldw	fp,0(sp)
   11678:	dec00104 	addi	sp,sp,4
   1167c:	f800283a 	ret

00011680 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   11680:	defffd04 	addi	sp,sp,-12
   11684:	df000215 	stw	fp,8(sp)
   11688:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   1168c:	d0282405 	stb	zero,-24432(gp)
    prdytbl       = &OSRdyTbl[0];
   11690:	d0a82444 	addi	r2,gp,-24431
   11694:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   11698:	e03ffe05 	stb	zero,-8(fp)
   1169c:	00000706 	br	116bc <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   116a0:	e0bfff17 	ldw	r2,-4(fp)
   116a4:	10c00044 	addi	r3,r2,1
   116a8:	e0ffff15 	stw	r3,-4(fp)
   116ac:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   116b0:	e0bffe03 	ldbu	r2,-8(fp)
   116b4:	10800044 	addi	r2,r2,1
   116b8:	e0bffe05 	stb	r2,-8(fp)
   116bc:	e0bffe03 	ldbu	r2,-8(fp)
   116c0:	108000f0 	cmpltui	r2,r2,3
   116c4:	103ff61e 	bne	r2,zero,116a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116a0>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   116c8:	d0281a45 	stb	zero,-24471(gp)
    OSPrioHighRdy = 0;
   116cc:	d0281a05 	stb	zero,-24472(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   116d0:	d0282215 	stw	zero,-24440(gp)
    OSTCBCur      = (OS_TCB *)0;
   116d4:	d0282715 	stw	zero,-24420(gp)
}
   116d8:	0001883a 	nop
   116dc:	e037883a 	mov	sp,fp
   116e0:	df000017 	ldw	fp,0(sp)
   116e4:	dec00104 	addi	sp,sp,4
   116e8:	f800283a 	ret

000116ec <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   116ec:	defff804 	addi	sp,sp,-32
   116f0:	dfc00715 	stw	ra,28(sp)
   116f4:	df000615 	stw	fp,24(sp)
   116f8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   116fc:	008000c4 	movi	r2,3
   11700:	d8800415 	stw	r2,16(sp)
   11704:	d8000315 	stw	zero,12(sp)
   11708:	00808004 	movi	r2,512
   1170c:	d8800215 	stw	r2,8(sp)
   11710:	008000b4 	movhi	r2,2
   11714:	1085ac04 	addi	r2,r2,5808
   11718:	d8800115 	stw	r2,4(sp)
   1171c:	00bfffd4 	movui	r2,65535
   11720:	d8800015 	stw	r2,0(sp)
   11724:	01c00504 	movi	r7,20
   11728:	018000b4 	movhi	r6,2
   1172c:	3187ab04 	addi	r6,r6,7852
   11730:	000b883a 	mov	r5,zero
   11734:	01000074 	movhi	r4,1
   11738:	2106e604 	addi	r4,r4,7064
   1173c:	00162680 	call	16268 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   11740:	e1bfff04 	addi	r6,fp,-4
   11744:	014000b4 	movhi	r5,2
   11748:	296ef204 	addi	r5,r5,-17464
   1174c:	01000504 	movi	r4,20
   11750:	0016a780 	call	16a78 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   11754:	0001883a 	nop
   11758:	e037883a 	mov	sp,fp
   1175c:	dfc00117 	ldw	ra,4(sp)
   11760:	df000017 	ldw	fp,0(sp)
   11764:	dec00204 	addi	sp,sp,8
   11768:	f800283a 	ret

0001176c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   1176c:	defff804 	addi	sp,sp,-32
   11770:	dfc00715 	stw	ra,28(sp)
   11774:	df000615 	stw	fp,24(sp)
   11778:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   1177c:	008000c4 	movi	r2,3
   11780:	d8800415 	stw	r2,16(sp)
   11784:	d8000315 	stw	zero,12(sp)
   11788:	00808004 	movi	r2,512
   1178c:	d8800215 	stw	r2,8(sp)
   11790:	008000b4 	movhi	r2,2
   11794:	10833404 	addi	r2,r2,3280
   11798:	d8800115 	stw	r2,4(sp)
   1179c:	00bfff94 	movui	r2,65534
   117a0:	d8800015 	stw	r2,0(sp)
   117a4:	01c004c4 	movi	r7,19
   117a8:	018000b4 	movhi	r6,2
   117ac:	31853304 	addi	r6,r6,5324
   117b0:	000b883a 	mov	r5,zero
   117b4:	01000074 	movhi	r4,1
   117b8:	2106fd04 	addi	r4,r4,7156
   117bc:	00162680 	call	16268 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   117c0:	e1bfff04 	addi	r6,fp,-4
   117c4:	014000b4 	movhi	r5,2
   117c8:	296ef604 	addi	r5,r5,-17448
   117cc:	010004c4 	movi	r4,19
   117d0:	0016a780 	call	16a78 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   117d4:	0001883a 	nop
   117d8:	e037883a 	mov	sp,fp
   117dc:	dfc00117 	ldw	ra,4(sp)
   117e0:	df000017 	ldw	fp,0(sp)
   117e4:	dec00204 	addi	sp,sp,8
   117e8:	f800283a 	ret

000117ec <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   117ec:	defffb04 	addi	sp,sp,-20
   117f0:	dfc00415 	stw	ra,16(sp)
   117f4:	df000315 	stw	fp,12(sp)
   117f8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   117fc:	01414404 	movi	r5,1296
   11800:	010000b4 	movhi	r4,2
   11804:	210a7c04 	addi	r4,r4,10736
   11808:	00118d00 	call	118d0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   1180c:	01401504 	movi	r5,84
   11810:	010000b4 	movhi	r4,2
   11814:	210bc004 	addi	r4,r4,12032
   11818:	00118d00 	call	118d0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   1181c:	008000b4 	movhi	r2,2
   11820:	108a7c04 	addi	r2,r2,10736
   11824:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   11828:	008000b4 	movhi	r2,2
   1182c:	108a9704 	addi	r2,r2,10844
   11830:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   11834:	e03ffd05 	stb	zero,-12(fp)
   11838:	00001106 	br	11880 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   1183c:	e0bffe17 	ldw	r2,-8(fp)
   11840:	e0ffff17 	ldw	r3,-4(fp)
   11844:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   11848:	e0bffe17 	ldw	r2,-8(fp)
   1184c:	00c00fc4 	movi	r3,63
   11850:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   11854:	e0bffe17 	ldw	r2,-8(fp)
   11858:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   1185c:	e0bffe17 	ldw	r2,-8(fp)
   11860:	10801b04 	addi	r2,r2,108
   11864:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   11868:	e0bfff17 	ldw	r2,-4(fp)
   1186c:	10801b04 	addi	r2,r2,108
   11870:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   11874:	e0bffd03 	ldbu	r2,-12(fp)
   11878:	10800044 	addi	r2,r2,1
   1187c:	e0bffd05 	stb	r2,-12(fp)
   11880:	e0bffd03 	ldbu	r2,-12(fp)
   11884:	108002f0 	cmpltui	r2,r2,11
   11888:	103fec1e 	bne	r2,zero,1183c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701183c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   1188c:	e0bffe17 	ldw	r2,-8(fp)
   11890:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   11894:	e0bffe17 	ldw	r2,-8(fp)
   11898:	00c00fc4 	movi	r3,63
   1189c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   118a0:	e0bffe17 	ldw	r2,-8(fp)
   118a4:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   118a8:	d0281b15 	stw	zero,-24468(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   118ac:	008000b4 	movhi	r2,2
   118b0:	108a7c04 	addi	r2,r2,10736
   118b4:	d0a81f15 	stw	r2,-24452(gp)
}
   118b8:	0001883a 	nop
   118bc:	e037883a 	mov	sp,fp
   118c0:	dfc00117 	ldw	ra,4(sp)
   118c4:	df000017 	ldw	fp,0(sp)
   118c8:	dec00204 	addi	sp,sp,8
   118cc:	f800283a 	ret

000118d0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   118d0:	defffd04 	addi	sp,sp,-12
   118d4:	df000215 	stw	fp,8(sp)
   118d8:	df000204 	addi	fp,sp,8
   118dc:	e13ffe15 	stw	r4,-8(fp)
   118e0:	2805883a 	mov	r2,r5
   118e4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   118e8:	00000706 	br	11908 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   118ec:	e0bffe17 	ldw	r2,-8(fp)
   118f0:	10c00044 	addi	r3,r2,1
   118f4:	e0fffe15 	stw	r3,-8(fp)
   118f8:	10000005 	stb	zero,0(r2)
        size--;
   118fc:	e0bfff0b 	ldhu	r2,-4(fp)
   11900:	10bfffc4 	addi	r2,r2,-1
   11904:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   11908:	e0bfff0b 	ldhu	r2,-4(fp)
   1190c:	103ff71e 	bne	r2,zero,118ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70118ec>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   11910:	0001883a 	nop
   11914:	e037883a 	mov	sp,fp
   11918:	df000017 	ldw	fp,0(sp)
   1191c:	dec00104 	addi	sp,sp,4
   11920:	f800283a 	ret

00011924 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   11924:	defffc04 	addi	sp,sp,-16
   11928:	df000315 	stw	fp,12(sp)
   1192c:	df000304 	addi	fp,sp,12
   11930:	e13ffd15 	stw	r4,-12(fp)
   11934:	e17ffe15 	stw	r5,-8(fp)
   11938:	3005883a 	mov	r2,r6
   1193c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   11940:	00000b06 	br	11970 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   11944:	e0bffd17 	ldw	r2,-12(fp)
   11948:	10c00044 	addi	r3,r2,1
   1194c:	e0fffd15 	stw	r3,-12(fp)
   11950:	e0fffe17 	ldw	r3,-8(fp)
   11954:	19000044 	addi	r4,r3,1
   11958:	e13ffe15 	stw	r4,-8(fp)
   1195c:	18c00003 	ldbu	r3,0(r3)
   11960:	10c00005 	stb	r3,0(r2)
        size--;
   11964:	e0bfff0b 	ldhu	r2,-4(fp)
   11968:	10bfffc4 	addi	r2,r2,-1
   1196c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   11970:	e0bfff0b 	ldhu	r2,-4(fp)
   11974:	103ff31e 	bne	r2,zero,11944 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011944>
        *pdest++ = *psrc++;
        size--;
    }
}
   11978:	0001883a 	nop
   1197c:	e037883a 	mov	sp,fp
   11980:	df000017 	ldw	fp,0(sp)
   11984:	dec00104 	addi	sp,sp,4
   11988:	f800283a 	ret

0001198c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   1198c:	defffb04 	addi	sp,sp,-20
   11990:	dfc00415 	stw	ra,16(sp)
   11994:	df000315 	stw	fp,12(sp)
   11998:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1199c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   119a0:	0005303a 	rdctl	r2,status
   119a4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119a8:	e0ffff17 	ldw	r3,-4(fp)
   119ac:	00bfff84 	movi	r2,-2
   119b0:	1884703a 	and	r2,r3,r2
   119b4:	1001703a 	wrctl	status,r2
  
  return context;
   119b8:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   119bc:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   119c0:	d0a82603 	ldbu	r2,-24424(gp)
   119c4:	10803fcc 	andi	r2,r2,255
   119c8:	10001a1e 	bne	r2,zero,11a34 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   119cc:	d0a81803 	ldbu	r2,-24480(gp)
   119d0:	10803fcc 	andi	r2,r2,255
   119d4:	1000171e 	bne	r2,zero,11a34 <OS_Sched+0xa8>
            OS_SchedNew();
   119d8:	0011a5c0 	call	11a5c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   119dc:	d0e81a03 	ldbu	r3,-24472(gp)
   119e0:	d0a81a43 	ldbu	r2,-24471(gp)
   119e4:	18c03fcc 	andi	r3,r3,255
   119e8:	10803fcc 	andi	r2,r2,255
   119ec:	18801126 	beq	r3,r2,11a34 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   119f0:	d0a81a03 	ldbu	r2,-24472(gp)
   119f4:	10c03fcc 	andi	r3,r2,255
   119f8:	008000b4 	movhi	r2,2
   119fc:	108bc004 	addi	r2,r2,12032
   11a00:	18c7883a 	add	r3,r3,r3
   11a04:	18c7883a 	add	r3,r3,r3
   11a08:	10c5883a 	add	r2,r2,r3
   11a0c:	10800017 	ldw	r2,0(r2)
   11a10:	d0a82215 	stw	r2,-24440(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   11a14:	d0a82217 	ldw	r2,-24440(gp)
   11a18:	10c00e17 	ldw	r3,56(r2)
   11a1c:	18c00044 	addi	r3,r3,1
   11a20:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   11a24:	d0a81d17 	ldw	r2,-24460(gp)
   11a28:	10800044 	addi	r2,r2,1
   11a2c:	d0a81d15 	stw	r2,-24460(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   11a30:	001ac0c0 	call	1ac0c <OSCtxSw>
   11a34:	e0bffd17 	ldw	r2,-12(fp)
   11a38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a3c:	e0bffe17 	ldw	r2,-8(fp)
   11a40:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   11a44:	0001883a 	nop
   11a48:	e037883a 	mov	sp,fp
   11a4c:	dfc00117 	ldw	ra,4(sp)
   11a50:	df000017 	ldw	fp,0(sp)
   11a54:	dec00204 	addi	sp,sp,8
   11a58:	f800283a 	ret

00011a5c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   11a5c:	defffe04 	addi	sp,sp,-8
   11a60:	df000115 	stw	fp,4(sp)
   11a64:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   11a68:	d0a82403 	ldbu	r2,-24432(gp)
   11a6c:	10c03fcc 	andi	r3,r2,255
   11a70:	008000b4 	movhi	r2,2
   11a74:	10aeb204 	addi	r2,r2,-17720
   11a78:	10c5883a 	add	r2,r2,r3
   11a7c:	10800003 	ldbu	r2,0(r2)
   11a80:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   11a84:	e0bfff03 	ldbu	r2,-4(fp)
   11a88:	100490fa 	slli	r2,r2,3
   11a8c:	1009883a 	mov	r4,r2
   11a90:	e0ffff03 	ldbu	r3,-4(fp)
   11a94:	d0a82444 	addi	r2,gp,-24431
   11a98:	1885883a 	add	r2,r3,r2
   11a9c:	10800003 	ldbu	r2,0(r2)
   11aa0:	10c03fcc 	andi	r3,r2,255
   11aa4:	008000b4 	movhi	r2,2
   11aa8:	10aeb204 	addi	r2,r2,-17720
   11aac:	10c5883a 	add	r2,r2,r3
   11ab0:	10800003 	ldbu	r2,0(r2)
   11ab4:	2085883a 	add	r2,r4,r2
   11ab8:	d0a81a05 	stb	r2,-24472(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   11abc:	0001883a 	nop
   11ac0:	e037883a 	mov	sp,fp
   11ac4:	df000017 	ldw	fp,0(sp)
   11ac8:	dec00104 	addi	sp,sp,4
   11acc:	f800283a 	ret

00011ad0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   11ad0:	defffc04 	addi	sp,sp,-16
   11ad4:	df000315 	stw	fp,12(sp)
   11ad8:	df000304 	addi	fp,sp,12
   11adc:	e13ffe15 	stw	r4,-8(fp)
   11ae0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   11ae4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   11ae8:	00000b06 	br	11b18 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   11aec:	e0bffe17 	ldw	r2,-8(fp)
   11af0:	10c00044 	addi	r3,r2,1
   11af4:	e0fffe15 	stw	r3,-8(fp)
   11af8:	e0ffff17 	ldw	r3,-4(fp)
   11afc:	19000044 	addi	r4,r3,1
   11b00:	e13fff15 	stw	r4,-4(fp)
   11b04:	18c00003 	ldbu	r3,0(r3)
   11b08:	10c00005 	stb	r3,0(r2)
        len++;
   11b0c:	e0bffd03 	ldbu	r2,-12(fp)
   11b10:	10800044 	addi	r2,r2,1
   11b14:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   11b18:	e0bfff17 	ldw	r2,-4(fp)
   11b1c:	10800003 	ldbu	r2,0(r2)
   11b20:	10803fcc 	andi	r2,r2,255
   11b24:	103ff11e 	bne	r2,zero,11aec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011aec>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   11b28:	e0bffe17 	ldw	r2,-8(fp)
   11b2c:	10000005 	stb	zero,0(r2)
    return (len);
   11b30:	e0bffd03 	ldbu	r2,-12(fp)
}
   11b34:	e037883a 	mov	sp,fp
   11b38:	df000017 	ldw	fp,0(sp)
   11b3c:	dec00104 	addi	sp,sp,4
   11b40:	f800283a 	ret

00011b44 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   11b44:	defffd04 	addi	sp,sp,-12
   11b48:	df000215 	stw	fp,8(sp)
   11b4c:	df000204 	addi	fp,sp,8
   11b50:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   11b54:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   11b58:	00000606 	br	11b74 <OS_StrLen+0x30>
        psrc++;
   11b5c:	e0bfff17 	ldw	r2,-4(fp)
   11b60:	10800044 	addi	r2,r2,1
   11b64:	e0bfff15 	stw	r2,-4(fp)
        len++;
   11b68:	e0bffe03 	ldbu	r2,-8(fp)
   11b6c:	10800044 	addi	r2,r2,1
   11b70:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   11b74:	e0bfff17 	ldw	r2,-4(fp)
   11b78:	10800003 	ldbu	r2,0(r2)
   11b7c:	10803fcc 	andi	r2,r2,255
   11b80:	103ff61e 	bne	r2,zero,11b5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b5c>
        psrc++;
        len++;
    }
    return (len);
   11b84:	e0bffe03 	ldbu	r2,-8(fp)
}
   11b88:	e037883a 	mov	sp,fp
   11b8c:	df000017 	ldw	fp,0(sp)
   11b90:	dec00104 	addi	sp,sp,4
   11b94:	f800283a 	ret

00011b98 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   11b98:	defffa04 	addi	sp,sp,-24
   11b9c:	dfc00515 	stw	ra,20(sp)
   11ba0:	df000415 	stw	fp,16(sp)
   11ba4:	df000404 	addi	fp,sp,16
   11ba8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11bac:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11bb0:	0005303a 	rdctl	r2,status
   11bb4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11bb8:	e0fffd17 	ldw	r3,-12(fp)
   11bbc:	00bfff84 	movi	r2,-2
   11bc0:	1884703a 	and	r2,r3,r2
   11bc4:	1001703a 	wrctl	status,r2
  
  return context;
   11bc8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   11bcc:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   11bd0:	d0a81917 	ldw	r2,-24476(gp)
   11bd4:	10800044 	addi	r2,r2,1
   11bd8:	d0a81915 	stw	r2,-24476(gp)
   11bdc:	e0bffc17 	ldw	r2,-16(fp)
   11be0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11be4:	e0bffe17 	ldw	r2,-8(fp)
   11be8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   11bec:	001af200 	call	1af20 <OSTaskIdleHook>
    }
   11bf0:	003fef06 	br	11bb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011bb0>

00011bf4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   11bf4:	defff804 	addi	sp,sp,-32
   11bf8:	dfc00715 	stw	ra,28(sp)
   11bfc:	df000615 	stw	fp,24(sp)
   11c00:	dc400515 	stw	r17,20(sp)
   11c04:	dc000415 	stw	r16,16(sp)
   11c08:	df000604 	addi	fp,sp,24
   11c0c:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11c10:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   11c14:	00000206 	br	11c20 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   11c18:	01000044 	movi	r4,1
   11c1c:	00173380 	call	17338 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   11c20:	d0a82a03 	ldbu	r2,-24408(gp)
   11c24:	10803fcc 	andi	r2,r2,255
   11c28:	103ffb26 	beq	r2,zero,11c18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011c18>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   11c2c:	d0e81e17 	ldw	r3,-24456(gp)
   11c30:	00947b34 	movhi	r2,20972
   11c34:	10a147c4 	addi	r2,r2,-31457
   11c38:	1888383a 	mulxuu	r4,r3,r2
   11c3c:	1885383a 	mul	r2,r3,r2
   11c40:	1021883a 	mov	r16,r2
   11c44:	2023883a 	mov	r17,r4
   11c48:	8804d17a 	srli	r2,r17,5
   11c4c:	d0a81e15 	stw	r2,-24456(gp)
    if (OSIdleCtrMax == 0L) {
   11c50:	d0a81e17 	ldw	r2,-24456(gp)
   11c54:	1000031e 	bne	r2,zero,11c64 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   11c58:	d0282005 	stb	zero,-24448(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   11c5c:	01003fc4 	movi	r4,255
   11c60:	0016fc00 	call	16fc0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c64:	0005303a 	rdctl	r2,status
   11c68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c6c:	e0fffb17 	ldw	r3,-20(fp)
   11c70:	00bfff84 	movi	r2,-2
   11c74:	1884703a 	and	r2,r3,r2
   11c78:	1001703a 	wrctl	status,r2
  
  return context;
   11c7c:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   11c80:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   11c84:	d0a81917 	ldw	r2,-24476(gp)
   11c88:	d0a82b15 	stw	r2,-24404(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   11c8c:	d0281915 	stw	zero,-24476(gp)
   11c90:	e0bffa17 	ldw	r2,-24(fp)
   11c94:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c98:	e0bffc17 	ldw	r2,-16(fp)
   11c9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   11ca0:	d0e82b17 	ldw	r3,-24404(gp)
   11ca4:	d0a81e17 	ldw	r2,-24456(gp)
   11ca8:	1885203a 	divu	r2,r3,r2
   11cac:	1007883a 	mov	r3,r2
   11cb0:	00801904 	movi	r2,100
   11cb4:	10c5c83a 	sub	r2,r2,r3
   11cb8:	d0a82005 	stb	r2,-24448(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   11cbc:	001aea00 	call	1aea0 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   11cc0:	0011cd00 	call	11cd0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   11cc4:	0009883a 	mov	r4,zero
   11cc8:	00173380 	call	17338 <OSTimeDly>
    }
   11ccc:	003fe506 	br	11c64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011c64>

00011cd0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   11cd0:	defffa04 	addi	sp,sp,-24
   11cd4:	dfc00515 	stw	ra,20(sp)
   11cd8:	df000415 	stw	fp,16(sp)
   11cdc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   11ce0:	e03ffc05 	stb	zero,-16(fp)
   11ce4:	00002406 	br	11d78 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   11ce8:	e0bffc03 	ldbu	r2,-16(fp)
   11cec:	e0fffe04 	addi	r3,fp,-8
   11cf0:	180b883a 	mov	r5,r3
   11cf4:	1009883a 	mov	r4,r2
   11cf8:	0016e000 	call	16e00 <OSTaskStkChk>
   11cfc:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   11d00:	e0bffc43 	ldbu	r2,-15(fp)
   11d04:	1000191e 	bne	r2,zero,11d6c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   11d08:	e0fffc03 	ldbu	r3,-16(fp)
   11d0c:	008000b4 	movhi	r2,2
   11d10:	108bc004 	addi	r2,r2,12032
   11d14:	18c7883a 	add	r3,r3,r3
   11d18:	18c7883a 	add	r3,r3,r3
   11d1c:	10c5883a 	add	r2,r2,r3
   11d20:	10800017 	ldw	r2,0(r2)
   11d24:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   11d28:	e0bffd17 	ldw	r2,-12(fp)
   11d2c:	10000f26 	beq	r2,zero,11d6c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   11d30:	e0bffd17 	ldw	r2,-12(fp)
   11d34:	10800060 	cmpeqi	r2,r2,1
   11d38:	10000c1e 	bne	r2,zero,11d6c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   11d3c:	e0bffd17 	ldw	r2,-12(fp)
   11d40:	10c00217 	ldw	r3,8(r2)
   11d44:	e0bffd17 	ldw	r2,-12(fp)
   11d48:	10800317 	ldw	r2,12(r2)
   11d4c:	1085883a 	add	r2,r2,r2
   11d50:	1085883a 	add	r2,r2,r2
   11d54:	1887883a 	add	r3,r3,r2
   11d58:	e0bffd17 	ldw	r2,-12(fp)
   11d5c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   11d60:	e0ffff17 	ldw	r3,-4(fp)
   11d64:	e0bffd17 	ldw	r2,-12(fp)
   11d68:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   11d6c:	e0bffc03 	ldbu	r2,-16(fp)
   11d70:	10800044 	addi	r2,r2,1
   11d74:	e0bffc05 	stb	r2,-16(fp)
   11d78:	e0bffc03 	ldbu	r2,-16(fp)
   11d7c:	10800570 	cmpltui	r2,r2,21
   11d80:	103fd91e 	bne	r2,zero,11ce8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011ce8>
#endif
                }
            }
        }
    }
}
   11d84:	0001883a 	nop
   11d88:	e037883a 	mov	sp,fp
   11d8c:	dfc00117 	ldw	ra,4(sp)
   11d90:	df000017 	ldw	fp,0(sp)
   11d94:	dec00204 	addi	sp,sp,8
   11d98:	f800283a 	ret

00011d9c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   11d9c:	defff204 	addi	sp,sp,-56
   11da0:	dfc00d15 	stw	ra,52(sp)
   11da4:	df000c15 	stw	fp,48(sp)
   11da8:	df000c04 	addi	fp,sp,48
   11dac:	e17ffc15 	stw	r5,-16(fp)
   11db0:	e1bffd15 	stw	r6,-12(fp)
   11db4:	3807883a 	mov	r3,r7
   11db8:	e0800417 	ldw	r2,16(fp)
   11dbc:	e13ffb05 	stb	r4,-20(fp)
   11dc0:	e0fffe0d 	sth	r3,-8(fp)
   11dc4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11dc8:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11dcc:	0005303a 	rdctl	r2,status
   11dd0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11dd4:	e0fffa17 	ldw	r3,-24(fp)
   11dd8:	00bfff84 	movi	r2,-2
   11ddc:	1884703a 	and	r2,r3,r2
   11de0:	1001703a 	wrctl	status,r2
  
  return context;
   11de4:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   11de8:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   11dec:	d0a81f17 	ldw	r2,-24452(gp)
   11df0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   11df4:	e0bff617 	ldw	r2,-40(fp)
   11df8:	10009326 	beq	r2,zero,12048 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   11dfc:	e0bff617 	ldw	r2,-40(fp)
   11e00:	10800517 	ldw	r2,20(r2)
   11e04:	d0a81f15 	stw	r2,-24452(gp)
   11e08:	e0bff417 	ldw	r2,-48(fp)
   11e0c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e10:	e0bff817 	ldw	r2,-32(fp)
   11e14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   11e18:	e0bff617 	ldw	r2,-40(fp)
   11e1c:	e0fffc17 	ldw	r3,-16(fp)
   11e20:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   11e24:	e0bff617 	ldw	r2,-40(fp)
   11e28:	e0fffb03 	ldbu	r3,-20(fp)
   11e2c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   11e30:	e0bff617 	ldw	r2,-40(fp)
   11e34:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   11e38:	e0bff617 	ldw	r2,-40(fp)
   11e3c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   11e40:	e0bff617 	ldw	r2,-40(fp)
   11e44:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   11e48:	e0bff617 	ldw	r2,-40(fp)
   11e4c:	e0c00317 	ldw	r3,12(fp)
   11e50:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   11e54:	e0bff617 	ldw	r2,-40(fp)
   11e58:	e0c00217 	ldw	r3,8(fp)
   11e5c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   11e60:	e0bff617 	ldw	r2,-40(fp)
   11e64:	e0fffd17 	ldw	r3,-12(fp)
   11e68:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   11e6c:	e0bff617 	ldw	r2,-40(fp)
   11e70:	e0ffff0b 	ldhu	r3,-4(fp)
   11e74:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   11e78:	e0bff617 	ldw	r2,-40(fp)
   11e7c:	e0fffe0b 	ldhu	r3,-8(fp)
   11e80:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   11e84:	e0bff617 	ldw	r2,-40(fp)
   11e88:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   11e8c:	e0bffb03 	ldbu	r2,-20(fp)
   11e90:	1004d0fa 	srli	r2,r2,3
   11e94:	1007883a 	mov	r3,r2
   11e98:	e0bff617 	ldw	r2,-40(fp)
   11e9c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   11ea0:	e0bffb03 	ldbu	r2,-20(fp)
   11ea4:	108001cc 	andi	r2,r2,7
   11ea8:	1007883a 	mov	r3,r2
   11eac:	e0bff617 	ldw	r2,-40(fp)
   11eb0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   11eb4:	e0bff617 	ldw	r2,-40(fp)
   11eb8:	10800d03 	ldbu	r2,52(r2)
   11ebc:	10803fcc 	andi	r2,r2,255
   11ec0:	00c00044 	movi	r3,1
   11ec4:	1884983a 	sll	r2,r3,r2
   11ec8:	1007883a 	mov	r3,r2
   11ecc:	e0bff617 	ldw	r2,-40(fp)
   11ed0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   11ed4:	e0bff617 	ldw	r2,-40(fp)
   11ed8:	10800cc3 	ldbu	r2,51(r2)
   11edc:	10803fcc 	andi	r2,r2,255
   11ee0:	00c00044 	movi	r3,1
   11ee4:	1884983a 	sll	r2,r3,r2
   11ee8:	1007883a 	mov	r3,r2
   11eec:	e0bff617 	ldw	r2,-40(fp)
   11ef0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   11ef4:	e0bff617 	ldw	r2,-40(fp)
   11ef8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   11efc:	e0bff617 	ldw	r2,-40(fp)
   11f00:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   11f04:	e0bff617 	ldw	r2,-40(fp)
   11f08:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   11f0c:	e0bff617 	ldw	r2,-40(fp)
   11f10:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   11f14:	e0bff617 	ldw	r2,-40(fp)
   11f18:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   11f1c:	e0bff617 	ldw	r2,-40(fp)
   11f20:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   11f24:	e0bff617 	ldw	r2,-40(fp)
   11f28:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   11f2c:	e0bff617 	ldw	r2,-40(fp)
   11f30:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   11f34:	e0bff617 	ldw	r2,-40(fp)
   11f38:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   11f3c:	e0bff617 	ldw	r2,-40(fp)
   11f40:	00c00fc4 	movi	r3,63
   11f44:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   11f48:	e0bff617 	ldw	r2,-40(fp)
   11f4c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   11f50:	e13ff617 	ldw	r4,-40(fp)
   11f54:	001af400 	call	1af40 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   11f58:	e13ff617 	ldw	r4,-40(fp)
   11f5c:	001ae380 	call	1ae38 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f60:	0005303a 	rdctl	r2,status
   11f64:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f68:	e0fff517 	ldw	r3,-44(fp)
   11f6c:	00bfff84 	movi	r2,-2
   11f70:	1884703a 	and	r2,r3,r2
   11f74:	1001703a 	wrctl	status,r2
  
  return context;
   11f78:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   11f7c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   11f80:	e0fffb03 	ldbu	r3,-20(fp)
   11f84:	008000b4 	movhi	r2,2
   11f88:	108bc004 	addi	r2,r2,12032
   11f8c:	18c7883a 	add	r3,r3,r3
   11f90:	18c7883a 	add	r3,r3,r3
   11f94:	10c5883a 	add	r2,r2,r3
   11f98:	e0fff617 	ldw	r3,-40(fp)
   11f9c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   11fa0:	d0e81b17 	ldw	r3,-24468(gp)
   11fa4:	e0bff617 	ldw	r2,-40(fp)
   11fa8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   11fac:	e0bff617 	ldw	r2,-40(fp)
   11fb0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   11fb4:	d0a81b17 	ldw	r2,-24468(gp)
   11fb8:	10000326 	beq	r2,zero,11fc8 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   11fbc:	d0a81b17 	ldw	r2,-24468(gp)
   11fc0:	e0fff617 	ldw	r3,-40(fp)
   11fc4:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   11fc8:	e0bff617 	ldw	r2,-40(fp)
   11fcc:	d0a81b15 	stw	r2,-24468(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   11fd0:	e0bff617 	ldw	r2,-40(fp)
   11fd4:	10c00d83 	ldbu	r3,54(r2)
   11fd8:	d0a82403 	ldbu	r2,-24432(gp)
   11fdc:	1884b03a 	or	r2,r3,r2
   11fe0:	d0a82405 	stb	r2,-24432(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   11fe4:	e0bff617 	ldw	r2,-40(fp)
   11fe8:	10800d03 	ldbu	r2,52(r2)
   11fec:	10c03fcc 	andi	r3,r2,255
   11ff0:	e0bff617 	ldw	r2,-40(fp)
   11ff4:	10800d03 	ldbu	r2,52(r2)
   11ff8:	11003fcc 	andi	r4,r2,255
   11ffc:	d0a82444 	addi	r2,gp,-24431
   12000:	2085883a 	add	r2,r4,r2
   12004:	11000003 	ldbu	r4,0(r2)
   12008:	e0bff617 	ldw	r2,-40(fp)
   1200c:	10800d43 	ldbu	r2,53(r2)
   12010:	2084b03a 	or	r2,r4,r2
   12014:	1009883a 	mov	r4,r2
   12018:	d0a82444 	addi	r2,gp,-24431
   1201c:	1885883a 	add	r2,r3,r2
   12020:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   12024:	d0a82043 	ldbu	r2,-24447(gp)
   12028:	10800044 	addi	r2,r2,1
   1202c:	d0a82045 	stb	r2,-24447(gp)
   12030:	e0bff417 	ldw	r2,-48(fp)
   12034:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12038:	e0bff717 	ldw	r2,-36(fp)
   1203c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   12040:	0005883a 	mov	r2,zero
   12044:	00000506 	br	1205c <OS_TCBInit+0x2c0>
   12048:	e0bff417 	ldw	r2,-48(fp)
   1204c:	e0bff915 	stw	r2,-28(fp)
   12050:	e0bff917 	ldw	r2,-28(fp)
   12054:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   12058:	00801084 	movi	r2,66
}
   1205c:	e037883a 	mov	sp,fp
   12060:	dfc00117 	ldw	ra,4(sp)
   12064:	df000017 	ldw	fp,0(sp)
   12068:	dec00204 	addi	sp,sp,8
   1206c:	f800283a 	ret

00012070 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   12070:	defffe04 	addi	sp,sp,-8
   12074:	df000115 	stw	fp,4(sp)
   12078:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   1207c:	d0a00f04 	addi	r2,gp,-32708
   12080:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   12084:	d0a01004 	addi	r2,gp,-32704
   12088:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   1208c:	d0a01184 	addi	r2,gp,-32698
   12090:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   12094:	d0a01204 	addi	r2,gp,-32696
   12098:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   1209c:	d0a01104 	addi	r2,gp,-32700
   120a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   120a4:	d0a01284 	addi	r2,gp,-32694
   120a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   120ac:	d0a01304 	addi	r2,gp,-32692
   120b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   120b4:	d0a01384 	addi	r2,gp,-32690
   120b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   120bc:	d0a01404 	addi	r2,gp,-32688
   120c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   120c4:	d0a01484 	addi	r2,gp,-32686
   120c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   120cc:	d0a01504 	addi	r2,gp,-32684
   120d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   120d4:	d0a01584 	addi	r2,gp,-32682
   120d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   120dc:	d0a01604 	addi	r2,gp,-32680
   120e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   120e4:	d0a01684 	addi	r2,gp,-32678
   120e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   120ec:	d0a01704 	addi	r2,gp,-32676
   120f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   120f4:	d0a01784 	addi	r2,gp,-32674
   120f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   120fc:	d0a01804 	addi	r2,gp,-32672
   12100:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   12104:	d0a01884 	addi	r2,gp,-32670
   12108:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   1210c:	d0a01904 	addi	r2,gp,-32668
   12110:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   12114:	d0a01984 	addi	r2,gp,-32666
   12118:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   1211c:	d0a01a04 	addi	r2,gp,-32664
   12120:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   12124:	d0a01a84 	addi	r2,gp,-32662
   12128:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   1212c:	d0a01b04 	addi	r2,gp,-32660
   12130:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   12134:	d0a01b84 	addi	r2,gp,-32658
   12138:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   1213c:	d0a01c04 	addi	r2,gp,-32656
   12140:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   12144:	d0a01c84 	addi	r2,gp,-32654
   12148:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   1214c:	d0a01d04 	addi	r2,gp,-32652
   12150:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   12154:	d0a01d84 	addi	r2,gp,-32650
   12158:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   1215c:	d0a01e04 	addi	r2,gp,-32648
   12160:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   12164:	d0a01e84 	addi	r2,gp,-32646
   12168:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   1216c:	d0a01f04 	addi	r2,gp,-32644
   12170:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   12174:	d0a01f84 	addi	r2,gp,-32642
   12178:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   1217c:	d0a02004 	addi	r2,gp,-32640
   12180:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   12184:	d0a02084 	addi	r2,gp,-32638
   12188:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   1218c:	d0a02104 	addi	r2,gp,-32636
   12190:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   12194:	d0a02184 	addi	r2,gp,-32634
   12198:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   1219c:	d0a02204 	addi	r2,gp,-32632
   121a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   121a4:	d0a02284 	addi	r2,gp,-32630
   121a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   121ac:	d0a02304 	addi	r2,gp,-32628
   121b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   121b4:	d0a02384 	addi	r2,gp,-32626
   121b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   121bc:	d0a02404 	addi	r2,gp,-32624
   121c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   121c4:	d0a02484 	addi	r2,gp,-32622
   121c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   121cc:	d0a02504 	addi	r2,gp,-32620
   121d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   121d4:	d0a02584 	addi	r2,gp,-32618
   121d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   121dc:	d0a02604 	addi	r2,gp,-32616
   121e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   121e4:	d0a02b04 	addi	r2,gp,-32596
   121e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   121ec:	0001883a 	nop
   121f0:	e037883a 	mov	sp,fp
   121f4:	df000017 	ldw	fp,0(sp)
   121f8:	dec00104 	addi	sp,sp,4
   121fc:	f800283a 	ret

00012200 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   12200:	defff204 	addi	sp,sp,-56
   12204:	df000d15 	stw	fp,52(sp)
   12208:	df000d04 	addi	fp,sp,52
   1220c:	e13ffc15 	stw	r4,-16(fp)
   12210:	2807883a 	mov	r3,r5
   12214:	3005883a 	mov	r2,r6
   12218:	e1ffff15 	stw	r7,-4(fp)
   1221c:	e0fffd0d 	sth	r3,-12(fp)
   12220:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   12224:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12228:	e0bfff17 	ldw	r2,-4(fp)
   1222c:	1000021e 	bne	r2,zero,12238 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   12230:	0005883a 	mov	r2,zero
   12234:	0000b006 	br	124f8 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   12238:	e0bffc17 	ldw	r2,-16(fp)
   1223c:	1000051e 	bne	r2,zero,12254 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12240:	e0bfff17 	ldw	r2,-4(fp)
   12244:	00c01b84 	movi	r3,110
   12248:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1224c:	0005883a 	mov	r2,zero
   12250:	0000a906 	br	124f8 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   12254:	e0bffc17 	ldw	r2,-16(fp)
   12258:	10800003 	ldbu	r2,0(r2)
   1225c:	10803fcc 	andi	r2,r2,255
   12260:	10800160 	cmpeqi	r2,r2,5
   12264:	1000051e 	bne	r2,zero,1227c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   12268:	e0bfff17 	ldw	r2,-4(fp)
   1226c:	00c00044 	movi	r3,1
   12270:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12274:	0005883a 	mov	r2,zero
   12278:	00009f06 	br	124f8 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1227c:	e0fffe03 	ldbu	r3,-8(fp)
   12280:	00bfe004 	movi	r2,-128
   12284:	1884703a 	and	r2,r3,r2
   12288:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   1228c:	e0bff503 	ldbu	r2,-44(fp)
   12290:	10000626 	beq	r2,zero,122ac <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   12294:	e0bffe03 	ldbu	r2,-8(fp)
   12298:	10801fcc 	andi	r2,r2,127
   1229c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   122a0:	00800044 	movi	r2,1
   122a4:	e0bff385 	stb	r2,-50(fp)
   122a8:	00000106 	br	122b0 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   122ac:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   122b0:	e0bfff17 	ldw	r2,-4(fp)
   122b4:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   122b8:	0005303a 	rdctl	r2,status
   122bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   122c0:	e0fffb17 	ldw	r3,-20(fp)
   122c4:	00bfff84 	movi	r2,-2
   122c8:	1884703a 	and	r2,r3,r2
   122cc:	1001703a 	wrctl	status,r2
  
  return context;
   122d0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   122d4:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   122d8:	e0bffe03 	ldbu	r2,-8(fp)
   122dc:	10c00060 	cmpeqi	r3,r2,1
   122e0:	18005f1e 	bne	r3,zero,12460 <OSFlagAccept+0x260>
   122e4:	10c00088 	cmpgei	r3,r2,2
   122e8:	1800021e 	bne	r3,zero,122f4 <OSFlagAccept+0xf4>
   122ec:	10003f26 	beq	r2,zero,123ec <OSFlagAccept+0x1ec>
   122f0:	00007706 	br	124d0 <OSFlagAccept+0x2d0>
   122f4:	10c000a0 	cmpeqi	r3,r2,2
   122f8:	1800031e 	bne	r3,zero,12308 <OSFlagAccept+0x108>
   122fc:	108000e0 	cmpeqi	r2,r2,3
   12300:	10001e1e 	bne	r2,zero,1237c <OSFlagAccept+0x17c>
   12304:	00007206 	br	124d0 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   12308:	e0bffc17 	ldw	r2,-16(fp)
   1230c:	10c0020b 	ldhu	r3,8(r2)
   12310:	e0bffd0b 	ldhu	r2,-12(fp)
   12314:	1884703a 	and	r2,r3,r2
   12318:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1231c:	e0fff30b 	ldhu	r3,-52(fp)
   12320:	e0bffd0b 	ldhu	r2,-12(fp)
   12324:	18800d1e 	bne	r3,r2,1235c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12328:	e0bff383 	ldbu	r2,-50(fp)
   1232c:	10800058 	cmpnei	r2,r2,1
   12330:	10000d1e 	bne	r2,zero,12368 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   12334:	e0bffc17 	ldw	r2,-16(fp)
   12338:	1080020b 	ldhu	r2,8(r2)
   1233c:	1007883a 	mov	r3,r2
   12340:	e0bff30b 	ldhu	r2,-52(fp)
   12344:	0084303a 	nor	r2,zero,r2
   12348:	1884703a 	and	r2,r3,r2
   1234c:	1007883a 	mov	r3,r2
   12350:	e0bffc17 	ldw	r2,-16(fp)
   12354:	10c0020d 	sth	r3,8(r2)
   12358:	00000306 	br	12368 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1235c:	e0bfff17 	ldw	r2,-4(fp)
   12360:	00c01c04 	movi	r3,112
   12364:	10c00005 	stb	r3,0(r2)
   12368:	e0bff417 	ldw	r2,-48(fp)
   1236c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12370:	e0bff617 	ldw	r2,-40(fp)
   12374:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12378:	00005e06 	br	124f4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1237c:	e0bffc17 	ldw	r2,-16(fp)
   12380:	10c0020b 	ldhu	r3,8(r2)
   12384:	e0bffd0b 	ldhu	r2,-12(fp)
   12388:	1884703a 	and	r2,r3,r2
   1238c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   12390:	e0bff30b 	ldhu	r2,-52(fp)
   12394:	10000d26 	beq	r2,zero,123cc <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12398:	e0bff383 	ldbu	r2,-50(fp)
   1239c:	10800058 	cmpnei	r2,r2,1
   123a0:	10000d1e 	bne	r2,zero,123d8 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   123a4:	e0bffc17 	ldw	r2,-16(fp)
   123a8:	1080020b 	ldhu	r2,8(r2)
   123ac:	1007883a 	mov	r3,r2
   123b0:	e0bff30b 	ldhu	r2,-52(fp)
   123b4:	0084303a 	nor	r2,zero,r2
   123b8:	1884703a 	and	r2,r3,r2
   123bc:	1007883a 	mov	r3,r2
   123c0:	e0bffc17 	ldw	r2,-16(fp)
   123c4:	10c0020d 	sth	r3,8(r2)
   123c8:	00000306 	br	123d8 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   123cc:	e0bfff17 	ldw	r2,-4(fp)
   123d0:	00c01c04 	movi	r3,112
   123d4:	10c00005 	stb	r3,0(r2)
   123d8:	e0bff417 	ldw	r2,-48(fp)
   123dc:	e0bff715 	stw	r2,-36(fp)
   123e0:	e0bff717 	ldw	r2,-36(fp)
   123e4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   123e8:	00004206 	br	124f4 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   123ec:	e0bffc17 	ldw	r2,-16(fp)
   123f0:	1080020b 	ldhu	r2,8(r2)
   123f4:	0084303a 	nor	r2,zero,r2
   123f8:	1007883a 	mov	r3,r2
   123fc:	e0bffd0b 	ldhu	r2,-12(fp)
   12400:	1884703a 	and	r2,r3,r2
   12404:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12408:	e0fff30b 	ldhu	r3,-52(fp)
   1240c:	e0bffd0b 	ldhu	r2,-12(fp)
   12410:	18800b1e 	bne	r3,r2,12440 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12414:	e0bff383 	ldbu	r2,-50(fp)
   12418:	10800058 	cmpnei	r2,r2,1
   1241c:	10000b1e 	bne	r2,zero,1244c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   12420:	e0bffc17 	ldw	r2,-16(fp)
   12424:	10c0020b 	ldhu	r3,8(r2)
   12428:	e0bff30b 	ldhu	r2,-52(fp)
   1242c:	1884b03a 	or	r2,r3,r2
   12430:	1007883a 	mov	r3,r2
   12434:	e0bffc17 	ldw	r2,-16(fp)
   12438:	10c0020d 	sth	r3,8(r2)
   1243c:	00000306 	br	1244c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12440:	e0bfff17 	ldw	r2,-4(fp)
   12444:	00c01c04 	movi	r3,112
   12448:	10c00005 	stb	r3,0(r2)
   1244c:	e0bff417 	ldw	r2,-48(fp)
   12450:	e0bff815 	stw	r2,-32(fp)
   12454:	e0bff817 	ldw	r2,-32(fp)
   12458:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1245c:	00002506 	br	124f4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   12460:	e0bffc17 	ldw	r2,-16(fp)
   12464:	1080020b 	ldhu	r2,8(r2)
   12468:	0084303a 	nor	r2,zero,r2
   1246c:	1007883a 	mov	r3,r2
   12470:	e0bffd0b 	ldhu	r2,-12(fp)
   12474:	1884703a 	and	r2,r3,r2
   12478:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1247c:	e0bff30b 	ldhu	r2,-52(fp)
   12480:	10000b26 	beq	r2,zero,124b0 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12484:	e0bff383 	ldbu	r2,-50(fp)
   12488:	10800058 	cmpnei	r2,r2,1
   1248c:	10000b1e 	bne	r2,zero,124bc <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   12490:	e0bffc17 	ldw	r2,-16(fp)
   12494:	10c0020b 	ldhu	r3,8(r2)
   12498:	e0bff30b 	ldhu	r2,-52(fp)
   1249c:	1884b03a 	or	r2,r3,r2
   124a0:	1007883a 	mov	r3,r2
   124a4:	e0bffc17 	ldw	r2,-16(fp)
   124a8:	10c0020d 	sth	r3,8(r2)
   124ac:	00000306 	br	124bc <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   124b0:	e0bfff17 	ldw	r2,-4(fp)
   124b4:	00c01c04 	movi	r3,112
   124b8:	10c00005 	stb	r3,0(r2)
   124bc:	e0bff417 	ldw	r2,-48(fp)
   124c0:	e0bff915 	stw	r2,-28(fp)
   124c4:	e0bff917 	ldw	r2,-28(fp)
   124c8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   124cc:	00000906 	br	124f4 <OSFlagAccept+0x2f4>
   124d0:	e0bff417 	ldw	r2,-48(fp)
   124d4:	e0bffa15 	stw	r2,-24(fp)
   124d8:	e0bffa17 	ldw	r2,-24(fp)
   124dc:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   124e0:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   124e4:	e0bfff17 	ldw	r2,-4(fp)
   124e8:	00c01bc4 	movi	r3,111
   124ec:	10c00005 	stb	r3,0(r2)
             break;
   124f0:	0001883a 	nop
    }
    return (flags_rdy);
   124f4:	e0bff30b 	ldhu	r2,-52(fp)
}
   124f8:	e037883a 	mov	sp,fp
   124fc:	df000017 	ldw	fp,0(sp)
   12500:	dec00104 	addi	sp,sp,4
   12504:	f800283a 	ret

00012508 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   12508:	defff804 	addi	sp,sp,-32
   1250c:	df000715 	stw	fp,28(sp)
   12510:	df000704 	addi	fp,sp,28
   12514:	2005883a 	mov	r2,r4
   12518:	e17fff15 	stw	r5,-4(fp)
   1251c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   12520:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   12524:	e0bfff17 	ldw	r2,-4(fp)
   12528:	1000021e 	bne	r2,zero,12534 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   1252c:	0005883a 	mov	r2,zero
   12530:	00003306 	br	12600 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   12534:	d0a82603 	ldbu	r2,-24424(gp)
   12538:	10803fcc 	andi	r2,r2,255
   1253c:	10000526 	beq	r2,zero,12554 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   12540:	e0bfff17 	ldw	r2,-4(fp)
   12544:	00c00404 	movi	r3,16
   12548:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   1254c:	0005883a 	mov	r2,zero
   12550:	00002b06 	br	12600 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12554:	0005303a 	rdctl	r2,status
   12558:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1255c:	e0fffd17 	ldw	r3,-12(fp)
   12560:	00bfff84 	movi	r2,-2
   12564:	1884703a 	and	r2,r3,r2
   12568:	1001703a 	wrctl	status,r2
  
  return context;
   1256c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12570:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   12574:	d0a82917 	ldw	r2,-24412(gp)
   12578:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   1257c:	e0bffb17 	ldw	r2,-20(fp)
   12580:	10001726 	beq	r2,zero,125e0 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   12584:	d0a82917 	ldw	r2,-24412(gp)
   12588:	10800117 	ldw	r2,4(r2)
   1258c:	d0a82915 	stw	r2,-24412(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   12590:	e0bffb17 	ldw	r2,-20(fp)
   12594:	00c00144 	movi	r3,5
   12598:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   1259c:	e0bffb17 	ldw	r2,-20(fp)
   125a0:	e0fffe0b 	ldhu	r3,-8(fp)
   125a4:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   125a8:	e0bffb17 	ldw	r2,-20(fp)
   125ac:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   125b0:	e0bffb17 	ldw	r2,-20(fp)
   125b4:	00c00fc4 	movi	r3,63
   125b8:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   125bc:	e0bffb17 	ldw	r2,-20(fp)
   125c0:	100002c5 	stb	zero,11(r2)
   125c4:	e0bff917 	ldw	r2,-28(fp)
   125c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   125cc:	e0bffa17 	ldw	r2,-24(fp)
   125d0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   125d4:	e0bfff17 	ldw	r2,-4(fp)
   125d8:	10000005 	stb	zero,0(r2)
   125dc:	00000706 	br	125fc <OSFlagCreate+0xf4>
   125e0:	e0bff917 	ldw	r2,-28(fp)
   125e4:	e0bffc15 	stw	r2,-16(fp)
   125e8:	e0bffc17 	ldw	r2,-16(fp)
   125ec:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   125f0:	e0bfff17 	ldw	r2,-4(fp)
   125f4:	00c01c84 	movi	r3,114
   125f8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   125fc:	e0bffb17 	ldw	r2,-20(fp)
}
   12600:	e037883a 	mov	sp,fp
   12604:	df000017 	ldw	fp,0(sp)
   12608:	dec00104 	addi	sp,sp,4
   1260c:	f800283a 	ret

00012610 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   12610:	defff204 	addi	sp,sp,-56
   12614:	dfc00d15 	stw	ra,52(sp)
   12618:	df000c15 	stw	fp,48(sp)
   1261c:	df000c04 	addi	fp,sp,48
   12620:	e13ffd15 	stw	r4,-12(fp)
   12624:	2805883a 	mov	r2,r5
   12628:	e1bfff15 	stw	r6,-4(fp)
   1262c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   12630:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12634:	e0bfff17 	ldw	r2,-4(fp)
   12638:	1000021e 	bne	r2,zero,12644 <OSFlagDel+0x34>
        return (pgrp);
   1263c:	e0bffd17 	ldw	r2,-12(fp)
   12640:	00008006 	br	12844 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   12644:	e0bffd17 	ldw	r2,-12(fp)
   12648:	1000051e 	bne	r2,zero,12660 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1264c:	e0bfff17 	ldw	r2,-4(fp)
   12650:	00c01b84 	movi	r3,110
   12654:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   12658:	e0bffd17 	ldw	r2,-12(fp)
   1265c:	00007906 	br	12844 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12660:	d0a82603 	ldbu	r2,-24424(gp)
   12664:	10803fcc 	andi	r2,r2,255
   12668:	10000526 	beq	r2,zero,12680 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1266c:	e0bfff17 	ldw	r2,-4(fp)
   12670:	00c003c4 	movi	r3,15
   12674:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   12678:	e0bffd17 	ldw	r2,-12(fp)
   1267c:	00007106 	br	12844 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   12680:	e0bffd17 	ldw	r2,-12(fp)
   12684:	10800003 	ldbu	r2,0(r2)
   12688:	10803fcc 	andi	r2,r2,255
   1268c:	10800160 	cmpeqi	r2,r2,5
   12690:	1000051e 	bne	r2,zero,126a8 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   12694:	e0bfff17 	ldw	r2,-4(fp)
   12698:	00c00044 	movi	r3,1
   1269c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   126a0:	e0bffd17 	ldw	r2,-12(fp)
   126a4:	00006706 	br	12844 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   126a8:	0005303a 	rdctl	r2,status
   126ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   126b0:	e0fffc17 	ldw	r3,-16(fp)
   126b4:	00bfff84 	movi	r2,-2
   126b8:	1884703a 	and	r2,r3,r2
   126bc:	1001703a 	wrctl	status,r2
  
  return context;
   126c0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   126c4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   126c8:	e0bffd17 	ldw	r2,-12(fp)
   126cc:	10800117 	ldw	r2,4(r2)
   126d0:	10000326 	beq	r2,zero,126e0 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   126d4:	00800044 	movi	r2,1
   126d8:	e0bff405 	stb	r2,-48(fp)
   126dc:	00000106 	br	126e4 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   126e0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   126e4:	e0bffe03 	ldbu	r2,-8(fp)
   126e8:	10000326 	beq	r2,zero,126f8 <OSFlagDel+0xe8>
   126ec:	10800060 	cmpeqi	r2,r2,1
   126f0:	1000231e 	bne	r2,zero,12780 <OSFlagDel+0x170>
   126f4:	00004806 	br	12818 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   126f8:	e0bff403 	ldbu	r2,-48(fp)
   126fc:	1000161e 	bne	r2,zero,12758 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   12700:	e0bffd17 	ldw	r2,-12(fp)
   12704:	00c00fc4 	movi	r3,63
   12708:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1270c:	e0bffd17 	ldw	r2,-12(fp)
   12710:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   12714:	e0bffd17 	ldw	r2,-12(fp)
   12718:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   1271c:	d0e82917 	ldw	r3,-24412(gp)
   12720:	e0bffd17 	ldw	r2,-12(fp)
   12724:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   12728:	e0bffd17 	ldw	r2,-12(fp)
   1272c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   12730:	e0bffd17 	ldw	r2,-12(fp)
   12734:	d0a82915 	stw	r2,-24412(gp)
   12738:	e0bff717 	ldw	r2,-36(fp)
   1273c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12740:	e0bff817 	ldw	r2,-32(fp)
   12744:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   12748:	e0bfff17 	ldw	r2,-4(fp)
   1274c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   12750:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   12754:	00003a06 	br	12840 <OSFlagDel+0x230>
   12758:	e0bff717 	ldw	r2,-36(fp)
   1275c:	e0bff915 	stw	r2,-28(fp)
   12760:	e0bff917 	ldw	r2,-28(fp)
   12764:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   12768:	e0bfff17 	ldw	r2,-4(fp)
   1276c:	00c01244 	movi	r3,73
   12770:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   12774:	e0bffd17 	ldw	r2,-12(fp)
   12778:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1277c:	00003006 	br	12840 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   12780:	e0bffd17 	ldw	r2,-12(fp)
   12784:	10800117 	ldw	r2,4(r2)
   12788:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1278c:	00000606 	br	127a8 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   12790:	000b883a 	mov	r5,zero
   12794:	e13ff517 	ldw	r4,-44(fp)
   12798:	001377c0 	call	1377c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1279c:	e0bff517 	ldw	r2,-44(fp)
   127a0:	10800017 	ldw	r2,0(r2)
   127a4:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   127a8:	e0bff517 	ldw	r2,-44(fp)
   127ac:	103ff81e 	bne	r2,zero,12790 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012790>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   127b0:	e0bffd17 	ldw	r2,-12(fp)
   127b4:	00c00fc4 	movi	r3,63
   127b8:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   127bc:	e0bffd17 	ldw	r2,-12(fp)
   127c0:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   127c4:	e0bffd17 	ldw	r2,-12(fp)
   127c8:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   127cc:	d0e82917 	ldw	r3,-24412(gp)
   127d0:	e0bffd17 	ldw	r2,-12(fp)
   127d4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   127d8:	e0bffd17 	ldw	r2,-12(fp)
   127dc:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   127e0:	e0bffd17 	ldw	r2,-12(fp)
   127e4:	d0a82915 	stw	r2,-24412(gp)
   127e8:	e0bff717 	ldw	r2,-36(fp)
   127ec:	e0bffa15 	stw	r2,-24(fp)
   127f0:	e0bffa17 	ldw	r2,-24(fp)
   127f4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   127f8:	e0bff403 	ldbu	r2,-48(fp)
   127fc:	10800058 	cmpnei	r2,r2,1
   12800:	1000011e 	bne	r2,zero,12808 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12804:	001198c0 	call	1198c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   12808:	e0bfff17 	ldw	r2,-4(fp)
   1280c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   12810:	e03ff615 	stw	zero,-40(fp)
             break;
   12814:	00000a06 	br	12840 <OSFlagDel+0x230>
   12818:	e0bff717 	ldw	r2,-36(fp)
   1281c:	e0bffb15 	stw	r2,-20(fp)
   12820:	e0bffb17 	ldw	r2,-20(fp)
   12824:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   12828:	e0bfff17 	ldw	r2,-4(fp)
   1282c:	00c001c4 	movi	r3,7
   12830:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   12834:	e0bffd17 	ldw	r2,-12(fp)
   12838:	e0bff615 	stw	r2,-40(fp)
             break;
   1283c:	0001883a 	nop
    }
    return (pgrp_return);
   12840:	e0bff617 	ldw	r2,-40(fp)
}
   12844:	e037883a 	mov	sp,fp
   12848:	dfc00117 	ldw	ra,4(sp)
   1284c:	df000017 	ldw	fp,0(sp)
   12850:	dec00204 	addi	sp,sp,8
   12854:	f800283a 	ret

00012858 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   12858:	defff604 	addi	sp,sp,-40
   1285c:	dfc00915 	stw	ra,36(sp)
   12860:	df000815 	stw	fp,32(sp)
   12864:	df000804 	addi	fp,sp,32
   12868:	e13ffd15 	stw	r4,-12(fp)
   1286c:	e17ffe15 	stw	r5,-8(fp)
   12870:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12874:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12878:	e0bfff17 	ldw	r2,-4(fp)
   1287c:	1000021e 	bne	r2,zero,12888 <OSFlagNameGet+0x30>
        return (0);
   12880:	0005883a 	mov	r2,zero
   12884:	00003906 	br	1296c <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   12888:	e0bffd17 	ldw	r2,-12(fp)
   1288c:	1000051e 	bne	r2,zero,128a4 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12890:	e0bfff17 	ldw	r2,-4(fp)
   12894:	00c01b84 	movi	r3,110
   12898:	10c00005 	stb	r3,0(r2)
        return (0);
   1289c:	0005883a 	mov	r2,zero
   128a0:	00003206 	br	1296c <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   128a4:	e0bffe17 	ldw	r2,-8(fp)
   128a8:	1000051e 	bne	r2,zero,128c0 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   128ac:	e0bfff17 	ldw	r2,-4(fp)
   128b0:	00c00304 	movi	r3,12
   128b4:	10c00005 	stb	r3,0(r2)
        return (0);
   128b8:	0005883a 	mov	r2,zero
   128bc:	00002b06 	br	1296c <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   128c0:	d0a82603 	ldbu	r2,-24424(gp)
   128c4:	10803fcc 	andi	r2,r2,255
   128c8:	10000526 	beq	r2,zero,128e0 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   128cc:	e0bfff17 	ldw	r2,-4(fp)
   128d0:	00c00444 	movi	r3,17
   128d4:	10c00005 	stb	r3,0(r2)
        return (0);
   128d8:	0005883a 	mov	r2,zero
   128dc:	00002306 	br	1296c <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   128e0:	0005303a 	rdctl	r2,status
   128e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   128e8:	e0fffc17 	ldw	r3,-16(fp)
   128ec:	00bfff84 	movi	r2,-2
   128f0:	1884703a 	and	r2,r3,r2
   128f4:	1001703a 	wrctl	status,r2
  
  return context;
   128f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   128fc:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   12900:	e0bffd17 	ldw	r2,-12(fp)
   12904:	10800003 	ldbu	r2,0(r2)
   12908:	10803fcc 	andi	r2,r2,255
   1290c:	10800160 	cmpeqi	r2,r2,5
   12910:	1000091e 	bne	r2,zero,12938 <OSFlagNameGet+0xe0>
   12914:	e0bff817 	ldw	r2,-32(fp)
   12918:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1291c:	e0bff917 	ldw	r2,-28(fp)
   12920:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   12924:	e0bfff17 	ldw	r2,-4(fp)
   12928:	00c00044 	movi	r3,1
   1292c:	10c00005 	stb	r3,0(r2)
        return (0);
   12930:	0005883a 	mov	r2,zero
   12934:	00000d06 	br	1296c <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   12938:	e0bffd17 	ldw	r2,-12(fp)
   1293c:	10800284 	addi	r2,r2,10
   12940:	100b883a 	mov	r5,r2
   12944:	e13ffe17 	ldw	r4,-8(fp)
   12948:	0011ad00 	call	11ad0 <OS_StrCopy>
   1294c:	e0bffb05 	stb	r2,-20(fp)
   12950:	e0bff817 	ldw	r2,-32(fp)
   12954:	e0bffa15 	stw	r2,-24(fp)
   12958:	e0bffa17 	ldw	r2,-24(fp)
   1295c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12960:	e0bfff17 	ldw	r2,-4(fp)
   12964:	10000005 	stb	zero,0(r2)
    return (len);
   12968:	e0bffb03 	ldbu	r2,-20(fp)
}
   1296c:	e037883a 	mov	sp,fp
   12970:	dfc00117 	ldw	ra,4(sp)
   12974:	df000017 	ldw	fp,0(sp)
   12978:	dec00204 	addi	sp,sp,8
   1297c:	f800283a 	ret

00012980 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   12980:	defff504 	addi	sp,sp,-44
   12984:	dfc00a15 	stw	ra,40(sp)
   12988:	df000915 	stw	fp,36(sp)
   1298c:	df000904 	addi	fp,sp,36
   12990:	e13ffd15 	stw	r4,-12(fp)
   12994:	e17ffe15 	stw	r5,-8(fp)
   12998:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1299c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   129a0:	e0bfff17 	ldw	r2,-4(fp)
   129a4:	10004326 	beq	r2,zero,12ab4 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   129a8:	e0bffd17 	ldw	r2,-12(fp)
   129ac:	1000041e 	bne	r2,zero,129c0 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   129b0:	e0bfff17 	ldw	r2,-4(fp)
   129b4:	00c01b84 	movi	r3,110
   129b8:	10c00005 	stb	r3,0(r2)
        return;
   129bc:	00003e06 	br	12ab8 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   129c0:	e0bffe17 	ldw	r2,-8(fp)
   129c4:	1000041e 	bne	r2,zero,129d8 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   129c8:	e0bfff17 	ldw	r2,-4(fp)
   129cc:	00c00304 	movi	r3,12
   129d0:	10c00005 	stb	r3,0(r2)
        return;
   129d4:	00003806 	br	12ab8 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   129d8:	d0a82603 	ldbu	r2,-24424(gp)
   129dc:	10803fcc 	andi	r2,r2,255
   129e0:	10000426 	beq	r2,zero,129f4 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   129e4:	e0bfff17 	ldw	r2,-4(fp)
   129e8:	00c00484 	movi	r3,18
   129ec:	10c00005 	stb	r3,0(r2)
        return;
   129f0:	00003106 	br	12ab8 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   129f4:	0005303a 	rdctl	r2,status
   129f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   129fc:	e0fffc17 	ldw	r3,-16(fp)
   12a00:	00bfff84 	movi	r2,-2
   12a04:	1884703a 	and	r2,r3,r2
   12a08:	1001703a 	wrctl	status,r2
  
  return context;
   12a0c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12a10:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   12a14:	e0bffd17 	ldw	r2,-12(fp)
   12a18:	10800003 	ldbu	r2,0(r2)
   12a1c:	10803fcc 	andi	r2,r2,255
   12a20:	10800160 	cmpeqi	r2,r2,5
   12a24:	1000081e 	bne	r2,zero,12a48 <OSFlagNameSet+0xc8>
   12a28:	e0bff717 	ldw	r2,-36(fp)
   12a2c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12a30:	e0bff817 	ldw	r2,-32(fp)
   12a34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   12a38:	e0bfff17 	ldw	r2,-4(fp)
   12a3c:	00c00044 	movi	r3,1
   12a40:	10c00005 	stb	r3,0(r2)
        return;
   12a44:	00001c06 	br	12ab8 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   12a48:	e13ffe17 	ldw	r4,-8(fp)
   12a4c:	0011b440 	call	11b44 <OS_StrLen>
   12a50:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   12a54:	e0bffa03 	ldbu	r2,-24(fp)
   12a58:	10800830 	cmpltui	r2,r2,32
   12a5c:	1000081e 	bne	r2,zero,12a80 <OSFlagNameSet+0x100>
   12a60:	e0bff717 	ldw	r2,-36(fp)
   12a64:	e0bff915 	stw	r2,-28(fp)
   12a68:	e0bff917 	ldw	r2,-28(fp)
   12a6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   12a70:	e0bfff17 	ldw	r2,-4(fp)
   12a74:	00c01cc4 	movi	r3,115
   12a78:	10c00005 	stb	r3,0(r2)
        return;
   12a7c:	00000e06 	br	12ab8 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   12a80:	e0bffd17 	ldw	r2,-12(fp)
   12a84:	10800284 	addi	r2,r2,10
   12a88:	e17ffe17 	ldw	r5,-8(fp)
   12a8c:	1009883a 	mov	r4,r2
   12a90:	0011ad00 	call	11ad0 <OS_StrCopy>
   12a94:	e0bff717 	ldw	r2,-36(fp)
   12a98:	e0bffb15 	stw	r2,-20(fp)
   12a9c:	e0bffb17 	ldw	r2,-20(fp)
   12aa0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12aa4:	e0bfff17 	ldw	r2,-4(fp)
   12aa8:	10000005 	stb	zero,0(r2)
    return;
   12aac:	0001883a 	nop
   12ab0:	00000106 	br	12ab8 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   12ab4:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   12ab8:	e037883a 	mov	sp,fp
   12abc:	dfc00117 	ldw	ra,4(sp)
   12ac0:	df000017 	ldw	fp,0(sp)
   12ac4:	dec00204 	addi	sp,sp,8
   12ac8:	f800283a 	ret

00012acc <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   12acc:	deffe104 	addi	sp,sp,-124
   12ad0:	dfc01e15 	stw	ra,120(sp)
   12ad4:	df001d15 	stw	fp,116(sp)
   12ad8:	df001d04 	addi	fp,sp,116
   12adc:	e13ffc15 	stw	r4,-16(fp)
   12ae0:	2809883a 	mov	r4,r5
   12ae4:	3007883a 	mov	r3,r6
   12ae8:	3805883a 	mov	r2,r7
   12aec:	e13ffd0d 	sth	r4,-12(fp)
   12af0:	e0fffe05 	stb	r3,-8(fp)
   12af4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   12af8:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12afc:	e0800217 	ldw	r2,8(fp)
   12b00:	1000021e 	bne	r2,zero,12b0c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   12b04:	0005883a 	mov	r2,zero
   12b08:	00015906 	br	13070 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   12b0c:	e0bffc17 	ldw	r2,-16(fp)
   12b10:	1000051e 	bne	r2,zero,12b28 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12b14:	e0800217 	ldw	r2,8(fp)
   12b18:	00c01b84 	movi	r3,110
   12b1c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12b20:	0005883a 	mov	r2,zero
   12b24:	00015206 	br	13070 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12b28:	d0a82603 	ldbu	r2,-24424(gp)
   12b2c:	10803fcc 	andi	r2,r2,255
   12b30:	10000526 	beq	r2,zero,12b48 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   12b34:	e0800217 	ldw	r2,8(fp)
   12b38:	00c00084 	movi	r3,2
   12b3c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12b40:	0005883a 	mov	r2,zero
   12b44:	00014a06 	br	13070 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   12b48:	d0a81803 	ldbu	r2,-24480(gp)
   12b4c:	10803fcc 	andi	r2,r2,255
   12b50:	10000526 	beq	r2,zero,12b68 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   12b54:	e0800217 	ldw	r2,8(fp)
   12b58:	00c00344 	movi	r3,13
   12b5c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12b60:	0005883a 	mov	r2,zero
   12b64:	00014206 	br	13070 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   12b68:	e0bffc17 	ldw	r2,-16(fp)
   12b6c:	10800003 	ldbu	r2,0(r2)
   12b70:	10803fcc 	andi	r2,r2,255
   12b74:	10800160 	cmpeqi	r2,r2,5
   12b78:	1000051e 	bne	r2,zero,12b90 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   12b7c:	e0800217 	ldw	r2,8(fp)
   12b80:	00c00044 	movi	r3,1
   12b84:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12b88:	0005883a 	mov	r2,zero
   12b8c:	00013806 	br	13070 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   12b90:	e0fffe03 	ldbu	r3,-8(fp)
   12b94:	00bfe004 	movi	r2,-128
   12b98:	1884703a 	and	r2,r3,r2
   12b9c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   12ba0:	e0bfe603 	ldbu	r2,-104(fp)
   12ba4:	10000626 	beq	r2,zero,12bc0 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   12ba8:	e0bffe03 	ldbu	r2,-8(fp)
   12bac:	10801fcc 	andi	r2,r2,127
   12bb0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   12bb4:	00800044 	movi	r2,1
   12bb8:	e0bfe405 	stb	r2,-112(fp)
   12bbc:	00000106 	br	12bc4 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   12bc0:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12bc4:	0005303a 	rdctl	r2,status
   12bc8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12bcc:	e0fff617 	ldw	r3,-40(fp)
   12bd0:	00bfff84 	movi	r2,-2
   12bd4:	1884703a 	and	r2,r3,r2
   12bd8:	1001703a 	wrctl	status,r2
  
  return context;
   12bdc:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   12be0:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   12be4:	e0bffe03 	ldbu	r2,-8(fp)
   12be8:	10c00060 	cmpeqi	r3,r2,1
   12bec:	1800921e 	bne	r3,zero,12e38 <OSFlagPend+0x36c>
   12bf0:	10c00088 	cmpgei	r3,r2,2
   12bf4:	1800021e 	bne	r3,zero,12c00 <OSFlagPend+0x134>
   12bf8:	10006126 	beq	r2,zero,12d80 <OSFlagPend+0x2b4>
   12bfc:	0000bb06 	br	12eec <OSFlagPend+0x420>
   12c00:	10c000a0 	cmpeqi	r3,r2,2
   12c04:	1800031e 	bne	r3,zero,12c14 <OSFlagPend+0x148>
   12c08:	108000e0 	cmpeqi	r2,r2,3
   12c0c:	10002f1e 	bne	r2,zero,12ccc <OSFlagPend+0x200>
   12c10:	0000b606 	br	12eec <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   12c14:	e0bffc17 	ldw	r2,-16(fp)
   12c18:	10c0020b 	ldhu	r3,8(r2)
   12c1c:	e0bffd0b 	ldhu	r2,-12(fp)
   12c20:	1884703a 	and	r2,r3,r2
   12c24:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12c28:	e0ffe80b 	ldhu	r3,-96(fp)
   12c2c:	e0bffd0b 	ldhu	r2,-12(fp)
   12c30:	1880171e 	bne	r3,r2,12c90 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12c34:	e0bfe403 	ldbu	r2,-112(fp)
   12c38:	10800058 	cmpnei	r2,r2,1
   12c3c:	1000091e 	bne	r2,zero,12c64 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   12c40:	e0bffc17 	ldw	r2,-16(fp)
   12c44:	1080020b 	ldhu	r2,8(r2)
   12c48:	1007883a 	mov	r3,r2
   12c4c:	e0bfe80b 	ldhu	r2,-96(fp)
   12c50:	0084303a 	nor	r2,zero,r2
   12c54:	1884703a 	and	r2,r3,r2
   12c58:	1007883a 	mov	r3,r2
   12c5c:	e0bffc17 	ldw	r2,-16(fp)
   12c60:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12c64:	d0a82717 	ldw	r2,-24420(gp)
   12c68:	e0ffe80b 	ldhu	r3,-96(fp)
   12c6c:	10c00b0d 	sth	r3,44(r2)
   12c70:	e0bfe517 	ldw	r2,-108(fp)
   12c74:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c78:	e0bfe717 	ldw	r2,-100(fp)
   12c7c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12c80:	e0800217 	ldw	r2,8(fp)
   12c84:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12c88:	e0bfe80b 	ldhu	r2,-96(fp)
   12c8c:	0000f806 	br	13070 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12c90:	e13ffd0b 	ldhu	r4,-12(fp)
   12c94:	e17ffe03 	ldbu	r5,-8(fp)
   12c98:	e0bfff0b 	ldhu	r2,-4(fp)
   12c9c:	e0fff704 	addi	r3,fp,-36
   12ca0:	d8800015 	stw	r2,0(sp)
   12ca4:	280f883a 	mov	r7,r5
   12ca8:	200d883a 	mov	r6,r4
   12cac:	180b883a 	mov	r5,r3
   12cb0:	e13ffc17 	ldw	r4,-16(fp)
   12cb4:	001353c0 	call	1353c <OS_FlagBlock>
   12cb8:	e0bfe517 	ldw	r2,-108(fp)
   12cbc:	e0bfe915 	stw	r2,-92(fp)
   12cc0:	e0bfe917 	ldw	r2,-92(fp)
   12cc4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12cc8:	00009206 	br	12f14 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   12ccc:	e0bffc17 	ldw	r2,-16(fp)
   12cd0:	10c0020b 	ldhu	r3,8(r2)
   12cd4:	e0bffd0b 	ldhu	r2,-12(fp)
   12cd8:	1884703a 	and	r2,r3,r2
   12cdc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   12ce0:	e0bfe80b 	ldhu	r2,-96(fp)
   12ce4:	10001726 	beq	r2,zero,12d44 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12ce8:	e0bfe403 	ldbu	r2,-112(fp)
   12cec:	10800058 	cmpnei	r2,r2,1
   12cf0:	1000091e 	bne	r2,zero,12d18 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   12cf4:	e0bffc17 	ldw	r2,-16(fp)
   12cf8:	1080020b 	ldhu	r2,8(r2)
   12cfc:	1007883a 	mov	r3,r2
   12d00:	e0bfe80b 	ldhu	r2,-96(fp)
   12d04:	0084303a 	nor	r2,zero,r2
   12d08:	1884703a 	and	r2,r3,r2
   12d0c:	1007883a 	mov	r3,r2
   12d10:	e0bffc17 	ldw	r2,-16(fp)
   12d14:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12d18:	d0a82717 	ldw	r2,-24420(gp)
   12d1c:	e0ffe80b 	ldhu	r3,-96(fp)
   12d20:	10c00b0d 	sth	r3,44(r2)
   12d24:	e0bfe517 	ldw	r2,-108(fp)
   12d28:	e0bfea15 	stw	r2,-88(fp)
   12d2c:	e0bfea17 	ldw	r2,-88(fp)
   12d30:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12d34:	e0800217 	ldw	r2,8(fp)
   12d38:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12d3c:	e0bfe80b 	ldhu	r2,-96(fp)
   12d40:	0000cb06 	br	13070 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12d44:	e13ffd0b 	ldhu	r4,-12(fp)
   12d48:	e17ffe03 	ldbu	r5,-8(fp)
   12d4c:	e0bfff0b 	ldhu	r2,-4(fp)
   12d50:	e0fff704 	addi	r3,fp,-36
   12d54:	d8800015 	stw	r2,0(sp)
   12d58:	280f883a 	mov	r7,r5
   12d5c:	200d883a 	mov	r6,r4
   12d60:	180b883a 	mov	r5,r3
   12d64:	e13ffc17 	ldw	r4,-16(fp)
   12d68:	001353c0 	call	1353c <OS_FlagBlock>
   12d6c:	e0bfe517 	ldw	r2,-108(fp)
   12d70:	e0bfeb15 	stw	r2,-84(fp)
   12d74:	e0bfeb17 	ldw	r2,-84(fp)
   12d78:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12d7c:	00006506 	br	12f14 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   12d80:	e0bffc17 	ldw	r2,-16(fp)
   12d84:	1080020b 	ldhu	r2,8(r2)
   12d88:	0084303a 	nor	r2,zero,r2
   12d8c:	1007883a 	mov	r3,r2
   12d90:	e0bffd0b 	ldhu	r2,-12(fp)
   12d94:	1884703a 	and	r2,r3,r2
   12d98:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12d9c:	e0ffe80b 	ldhu	r3,-96(fp)
   12da0:	e0bffd0b 	ldhu	r2,-12(fp)
   12da4:	1880151e 	bne	r3,r2,12dfc <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12da8:	e0bfe403 	ldbu	r2,-112(fp)
   12dac:	10800058 	cmpnei	r2,r2,1
   12db0:	1000071e 	bne	r2,zero,12dd0 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   12db4:	e0bffc17 	ldw	r2,-16(fp)
   12db8:	10c0020b 	ldhu	r3,8(r2)
   12dbc:	e0bfe80b 	ldhu	r2,-96(fp)
   12dc0:	1884b03a 	or	r2,r3,r2
   12dc4:	1007883a 	mov	r3,r2
   12dc8:	e0bffc17 	ldw	r2,-16(fp)
   12dcc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12dd0:	d0a82717 	ldw	r2,-24420(gp)
   12dd4:	e0ffe80b 	ldhu	r3,-96(fp)
   12dd8:	10c00b0d 	sth	r3,44(r2)
   12ddc:	e0bfe517 	ldw	r2,-108(fp)
   12de0:	e0bfec15 	stw	r2,-80(fp)
   12de4:	e0bfec17 	ldw	r2,-80(fp)
   12de8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12dec:	e0800217 	ldw	r2,8(fp)
   12df0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12df4:	e0bfe80b 	ldhu	r2,-96(fp)
   12df8:	00009d06 	br	13070 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12dfc:	e13ffd0b 	ldhu	r4,-12(fp)
   12e00:	e17ffe03 	ldbu	r5,-8(fp)
   12e04:	e0bfff0b 	ldhu	r2,-4(fp)
   12e08:	e0fff704 	addi	r3,fp,-36
   12e0c:	d8800015 	stw	r2,0(sp)
   12e10:	280f883a 	mov	r7,r5
   12e14:	200d883a 	mov	r6,r4
   12e18:	180b883a 	mov	r5,r3
   12e1c:	e13ffc17 	ldw	r4,-16(fp)
   12e20:	001353c0 	call	1353c <OS_FlagBlock>
   12e24:	e0bfe517 	ldw	r2,-108(fp)
   12e28:	e0bfed15 	stw	r2,-76(fp)
   12e2c:	e0bfed17 	ldw	r2,-76(fp)
   12e30:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12e34:	00003706 	br	12f14 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   12e38:	e0bffc17 	ldw	r2,-16(fp)
   12e3c:	1080020b 	ldhu	r2,8(r2)
   12e40:	0084303a 	nor	r2,zero,r2
   12e44:	1007883a 	mov	r3,r2
   12e48:	e0bffd0b 	ldhu	r2,-12(fp)
   12e4c:	1884703a 	and	r2,r3,r2
   12e50:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   12e54:	e0bfe80b 	ldhu	r2,-96(fp)
   12e58:	10001526 	beq	r2,zero,12eb0 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12e5c:	e0bfe403 	ldbu	r2,-112(fp)
   12e60:	10800058 	cmpnei	r2,r2,1
   12e64:	1000071e 	bne	r2,zero,12e84 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   12e68:	e0bffc17 	ldw	r2,-16(fp)
   12e6c:	10c0020b 	ldhu	r3,8(r2)
   12e70:	e0bfe80b 	ldhu	r2,-96(fp)
   12e74:	1884b03a 	or	r2,r3,r2
   12e78:	1007883a 	mov	r3,r2
   12e7c:	e0bffc17 	ldw	r2,-16(fp)
   12e80:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12e84:	d0a82717 	ldw	r2,-24420(gp)
   12e88:	e0ffe80b 	ldhu	r3,-96(fp)
   12e8c:	10c00b0d 	sth	r3,44(r2)
   12e90:	e0bfe517 	ldw	r2,-108(fp)
   12e94:	e0bfee15 	stw	r2,-72(fp)
   12e98:	e0bfee17 	ldw	r2,-72(fp)
   12e9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12ea0:	e0800217 	ldw	r2,8(fp)
   12ea4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12ea8:	e0bfe80b 	ldhu	r2,-96(fp)
   12eac:	00007006 	br	13070 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12eb0:	e13ffd0b 	ldhu	r4,-12(fp)
   12eb4:	e17ffe03 	ldbu	r5,-8(fp)
   12eb8:	e0bfff0b 	ldhu	r2,-4(fp)
   12ebc:	e0fff704 	addi	r3,fp,-36
   12ec0:	d8800015 	stw	r2,0(sp)
   12ec4:	280f883a 	mov	r7,r5
   12ec8:	200d883a 	mov	r6,r4
   12ecc:	180b883a 	mov	r5,r3
   12ed0:	e13ffc17 	ldw	r4,-16(fp)
   12ed4:	001353c0 	call	1353c <OS_FlagBlock>
   12ed8:	e0bfe517 	ldw	r2,-108(fp)
   12edc:	e0bfef15 	stw	r2,-68(fp)
   12ee0:	e0bfef17 	ldw	r2,-68(fp)
   12ee4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12ee8:	00000a06 	br	12f14 <OSFlagPend+0x448>
   12eec:	e0bfe517 	ldw	r2,-108(fp)
   12ef0:	e0bff015 	stw	r2,-64(fp)
   12ef4:	e0bff017 	ldw	r2,-64(fp)
   12ef8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   12efc:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   12f00:	e0800217 	ldw	r2,8(fp)
   12f04:	00c01bc4 	movi	r3,111
   12f08:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   12f0c:	e0bfe80b 	ldhu	r2,-96(fp)
   12f10:	00005706 	br	13070 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   12f14:	001198c0 	call	1198c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12f18:	0005303a 	rdctl	r2,status
   12f1c:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f20:	e0fff117 	ldw	r3,-60(fp)
   12f24:	00bfff84 	movi	r2,-2
   12f28:	1884703a 	and	r2,r3,r2
   12f2c:	1001703a 	wrctl	status,r2
  
  return context;
   12f30:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   12f34:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   12f38:	d0a82717 	ldw	r2,-24420(gp)
   12f3c:	10800c43 	ldbu	r2,49(r2)
   12f40:	10803fcc 	andi	r2,r2,255
   12f44:	10001c26 	beq	r2,zero,12fb8 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   12f48:	d0a82717 	ldw	r2,-24420(gp)
   12f4c:	10800c43 	ldbu	r2,49(r2)
   12f50:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12f54:	d0a82717 	ldw	r2,-24420(gp)
   12f58:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   12f5c:	e0bff704 	addi	r2,fp,-36
   12f60:	1009883a 	mov	r4,r2
   12f64:	00138700 	call	13870 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   12f68:	d0a82717 	ldw	r2,-24420(gp)
   12f6c:	10000c05 	stb	zero,48(r2)
   12f70:	e0bfe517 	ldw	r2,-108(fp)
   12f74:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f78:	e0bff217 	ldw	r2,-56(fp)
   12f7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   12f80:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   12f84:	e0bff303 	ldbu	r2,-52(fp)
   12f88:	108000a0 	cmpeqi	r2,r2,2
   12f8c:	10000426 	beq	r2,zero,12fa0 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   12f90:	e0800217 	ldw	r2,8(fp)
   12f94:	00c00384 	movi	r3,14
   12f98:	10c00005 	stb	r3,0(r2)
                 break;
   12f9c:	00000406 	br	12fb0 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   12fa0:	e0800217 	ldw	r2,8(fp)
   12fa4:	00c00284 	movi	r3,10
   12fa8:	10c00005 	stb	r3,0(r2)
                 break;
   12fac:	0001883a 	nop
        }
        return (flags_rdy);
   12fb0:	e0bfe80b 	ldhu	r2,-96(fp)
   12fb4:	00002e06 	br	13070 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   12fb8:	d0a82717 	ldw	r2,-24420(gp)
   12fbc:	10800b0b 	ldhu	r2,44(r2)
   12fc0:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   12fc4:	e0bfe403 	ldbu	r2,-112(fp)
   12fc8:	10800058 	cmpnei	r2,r2,1
   12fcc:	1000211e 	bne	r2,zero,13054 <OSFlagPend+0x588>
        switch (wait_type) {
   12fd0:	e0bffe03 	ldbu	r2,-8(fp)
   12fd4:	10001616 	blt	r2,zero,13030 <OSFlagPend+0x564>
   12fd8:	10c00090 	cmplti	r3,r2,2
   12fdc:	18000c1e 	bne	r3,zero,13010 <OSFlagPend+0x544>
   12fe0:	10800108 	cmpgei	r2,r2,4
   12fe4:	1000121e 	bne	r2,zero,13030 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   12fe8:	e0bffc17 	ldw	r2,-16(fp)
   12fec:	1080020b 	ldhu	r2,8(r2)
   12ff0:	1007883a 	mov	r3,r2
   12ff4:	e0bfe80b 	ldhu	r2,-96(fp)
   12ff8:	0084303a 	nor	r2,zero,r2
   12ffc:	1884703a 	and	r2,r3,r2
   13000:	1007883a 	mov	r3,r2
   13004:	e0bffc17 	ldw	r2,-16(fp)
   13008:	10c0020d 	sth	r3,8(r2)
                 break;
   1300c:	00001106 	br	13054 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   13010:	e0bffc17 	ldw	r2,-16(fp)
   13014:	10c0020b 	ldhu	r3,8(r2)
   13018:	e0bfe80b 	ldhu	r2,-96(fp)
   1301c:	1884b03a 	or	r2,r3,r2
   13020:	1007883a 	mov	r3,r2
   13024:	e0bffc17 	ldw	r2,-16(fp)
   13028:	10c0020d 	sth	r3,8(r2)
                 break;
   1302c:	00000906 	br	13054 <OSFlagPend+0x588>
   13030:	e0bfe517 	ldw	r2,-108(fp)
   13034:	e0bff415 	stw	r2,-48(fp)
   13038:	e0bff417 	ldw	r2,-48(fp)
   1303c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   13040:	e0800217 	ldw	r2,8(fp)
   13044:	00c01bc4 	movi	r3,111
   13048:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1304c:	0005883a 	mov	r2,zero
   13050:	00000706 	br	13070 <OSFlagPend+0x5a4>
   13054:	e0bfe517 	ldw	r2,-108(fp)
   13058:	e0bff515 	stw	r2,-44(fp)
   1305c:	e0bff517 	ldw	r2,-44(fp)
   13060:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   13064:	e0800217 	ldw	r2,8(fp)
   13068:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   1306c:	e0bfe80b 	ldhu	r2,-96(fp)
}
   13070:	e037883a 	mov	sp,fp
   13074:	dfc00117 	ldw	ra,4(sp)
   13078:	df000017 	ldw	fp,0(sp)
   1307c:	dec00204 	addi	sp,sp,8
   13080:	f800283a 	ret

00013084 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   13084:	defffb04 	addi	sp,sp,-20
   13088:	df000415 	stw	fp,16(sp)
   1308c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13090:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13094:	0005303a 	rdctl	r2,status
   13098:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1309c:	e0fffe17 	ldw	r3,-8(fp)
   130a0:	00bfff84 	movi	r2,-2
   130a4:	1884703a 	and	r2,r3,r2
   130a8:	1001703a 	wrctl	status,r2
  
  return context;
   130ac:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   130b0:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   130b4:	d0a82717 	ldw	r2,-24420(gp)
   130b8:	10800b0b 	ldhu	r2,44(r2)
   130bc:	e0bffd0d 	sth	r2,-12(fp)
   130c0:	e0bffc17 	ldw	r2,-16(fp)
   130c4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   130c8:	e0bfff17 	ldw	r2,-4(fp)
   130cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   130d0:	e0bffd0b 	ldhu	r2,-12(fp)
}
   130d4:	e037883a 	mov	sp,fp
   130d8:	df000017 	ldw	fp,0(sp)
   130dc:	dec00104 	addi	sp,sp,4
   130e0:	f800283a 	ret

000130e4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   130e4:	deffef04 	addi	sp,sp,-68
   130e8:	dfc01015 	stw	ra,64(sp)
   130ec:	df000f15 	stw	fp,60(sp)
   130f0:	df000f04 	addi	fp,sp,60
   130f4:	e13ffc15 	stw	r4,-16(fp)
   130f8:	2807883a 	mov	r3,r5
   130fc:	3005883a 	mov	r2,r6
   13100:	e1ffff15 	stw	r7,-4(fp)
   13104:	e0fffd0d 	sth	r3,-12(fp)
   13108:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   1310c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   13110:	e0bfff17 	ldw	r2,-4(fp)
   13114:	1000021e 	bne	r2,zero,13120 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   13118:	0005883a 	mov	r2,zero
   1311c:	0000d106 	br	13464 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   13120:	e0bffc17 	ldw	r2,-16(fp)
   13124:	1000051e 	bne	r2,zero,1313c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13128:	e0bfff17 	ldw	r2,-4(fp)
   1312c:	00c01b84 	movi	r3,110
   13130:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13134:	0005883a 	mov	r2,zero
   13138:	0000ca06 	br	13464 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   1313c:	e0bffc17 	ldw	r2,-16(fp)
   13140:	10800003 	ldbu	r2,0(r2)
   13144:	10803fcc 	andi	r2,r2,255
   13148:	10800160 	cmpeqi	r2,r2,5
   1314c:	1000051e 	bne	r2,zero,13164 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   13150:	e0bfff17 	ldw	r2,-4(fp)
   13154:	00c00044 	movi	r3,1
   13158:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1315c:	0005883a 	mov	r2,zero
   13160:	0000c006 	br	13464 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13164:	0005303a 	rdctl	r2,status
   13168:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1316c:	e0fffb17 	ldw	r3,-20(fp)
   13170:	00bfff84 	movi	r2,-2
   13174:	1884703a 	and	r2,r3,r2
   13178:	1001703a 	wrctl	status,r2
  
  return context;
   1317c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   13180:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   13184:	e0bffe03 	ldbu	r2,-8(fp)
   13188:	10000326 	beq	r2,zero,13198 <OSFlagPost+0xb4>
   1318c:	10800060 	cmpeqi	r2,r2,1
   13190:	10000b1e 	bne	r2,zero,131c0 <OSFlagPost+0xdc>
   13194:	00001206 	br	131e0 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   13198:	e0bffc17 	ldw	r2,-16(fp)
   1319c:	1080020b 	ldhu	r2,8(r2)
   131a0:	1007883a 	mov	r3,r2
   131a4:	e0bffd0b 	ldhu	r2,-12(fp)
   131a8:	0084303a 	nor	r2,zero,r2
   131ac:	1884703a 	and	r2,r3,r2
   131b0:	1007883a 	mov	r3,r2
   131b4:	e0bffc17 	ldw	r2,-16(fp)
   131b8:	10c0020d 	sth	r3,8(r2)
             break;
   131bc:	00001106 	br	13204 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   131c0:	e0bffc17 	ldw	r2,-16(fp)
   131c4:	10c0020b 	ldhu	r3,8(r2)
   131c8:	e0bffd0b 	ldhu	r2,-12(fp)
   131cc:	1884b03a 	or	r2,r3,r2
   131d0:	1007883a 	mov	r3,r2
   131d4:	e0bffc17 	ldw	r2,-16(fp)
   131d8:	10c0020d 	sth	r3,8(r2)
             break;
   131dc:	00000906 	br	13204 <OSFlagPost+0x120>
   131e0:	e0bff317 	ldw	r2,-52(fp)
   131e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131e8:	e0bff417 	ldw	r2,-48(fp)
   131ec:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   131f0:	e0bfff17 	ldw	r2,-4(fp)
   131f4:	00c01c44 	movi	r3,113
   131f8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   131fc:	0005883a 	mov	r2,zero
   13200:	00009806 	br	13464 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   13204:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   13208:	e0bffc17 	ldw	r2,-16(fp)
   1320c:	10800117 	ldw	r2,4(r2)
   13210:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   13214:	00007706 	br	133f4 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   13218:	e0bff117 	ldw	r2,-60(fp)
   1321c:	10800483 	ldbu	r2,18(r2)
   13220:	10803fcc 	andi	r2,r2,255
   13224:	10c00060 	cmpeqi	r3,r2,1
   13228:	18004a1e 	bne	r3,zero,13354 <OSFlagPost+0x270>
   1322c:	10c00088 	cmpgei	r3,r2,2
   13230:	1800021e 	bne	r3,zero,1323c <OSFlagPost+0x158>
   13234:	10002f26 	beq	r2,zero,132f4 <OSFlagPost+0x210>
   13238:	00005b06 	br	133a8 <OSFlagPost+0x2c4>
   1323c:	10c000a0 	cmpeqi	r3,r2,2
   13240:	1800031e 	bne	r3,zero,13250 <OSFlagPost+0x16c>
   13244:	108000e0 	cmpeqi	r2,r2,3
   13248:	1000171e 	bne	r2,zero,132a8 <OSFlagPost+0x1c4>
   1324c:	00005606 	br	133a8 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13250:	e0bffc17 	ldw	r2,-16(fp)
   13254:	10c0020b 	ldhu	r3,8(r2)
   13258:	e0bff117 	ldw	r2,-60(fp)
   1325c:	1080040b 	ldhu	r2,16(r2)
   13260:	1884703a 	and	r2,r3,r2
   13264:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   13268:	e0bff117 	ldw	r2,-60(fp)
   1326c:	1080040b 	ldhu	r2,16(r2)
   13270:	10ffffcc 	andi	r3,r2,65535
   13274:	e0bff60b 	ldhu	r2,-40(fp)
   13278:	1880541e 	bne	r3,r2,133cc <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1327c:	e0bff60b 	ldhu	r2,-40(fp)
   13280:	100b883a 	mov	r5,r2
   13284:	e13ff117 	ldw	r4,-60(fp)
   13288:	001377c0 	call	1377c <OS_FlagTaskRdy>
   1328c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   13290:	e0bff683 	ldbu	r2,-38(fp)
   13294:	10800058 	cmpnei	r2,r2,1
   13298:	10004c1e 	bne	r2,zero,133cc <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1329c:	00800044 	movi	r2,1
   132a0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   132a4:	00004906 	br	133cc <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   132a8:	e0bffc17 	ldw	r2,-16(fp)
   132ac:	10c0020b 	ldhu	r3,8(r2)
   132b0:	e0bff117 	ldw	r2,-60(fp)
   132b4:	1080040b 	ldhu	r2,16(r2)
   132b8:	1884703a 	and	r2,r3,r2
   132bc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   132c0:	e0bff60b 	ldhu	r2,-40(fp)
   132c4:	10004326 	beq	r2,zero,133d4 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   132c8:	e0bff60b 	ldhu	r2,-40(fp)
   132cc:	100b883a 	mov	r5,r2
   132d0:	e13ff117 	ldw	r4,-60(fp)
   132d4:	001377c0 	call	1377c <OS_FlagTaskRdy>
   132d8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   132dc:	e0bff683 	ldbu	r2,-38(fp)
   132e0:	10800058 	cmpnei	r2,r2,1
   132e4:	10003b1e 	bne	r2,zero,133d4 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   132e8:	00800044 	movi	r2,1
   132ec:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   132f0:	00003806 	br	133d4 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   132f4:	e0bffc17 	ldw	r2,-16(fp)
   132f8:	1080020b 	ldhu	r2,8(r2)
   132fc:	0084303a 	nor	r2,zero,r2
   13300:	1007883a 	mov	r3,r2
   13304:	e0bff117 	ldw	r2,-60(fp)
   13308:	1080040b 	ldhu	r2,16(r2)
   1330c:	1884703a 	and	r2,r3,r2
   13310:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   13314:	e0bff117 	ldw	r2,-60(fp)
   13318:	1080040b 	ldhu	r2,16(r2)
   1331c:	10ffffcc 	andi	r3,r2,65535
   13320:	e0bff60b 	ldhu	r2,-40(fp)
   13324:	18802d1e 	bne	r3,r2,133dc <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13328:	e0bff60b 	ldhu	r2,-40(fp)
   1332c:	100b883a 	mov	r5,r2
   13330:	e13ff117 	ldw	r4,-60(fp)
   13334:	001377c0 	call	1377c <OS_FlagTaskRdy>
   13338:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1333c:	e0bff683 	ldbu	r2,-38(fp)
   13340:	10800058 	cmpnei	r2,r2,1
   13344:	1000251e 	bne	r2,zero,133dc <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13348:	00800044 	movi	r2,1
   1334c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13350:	00002206 	br	133dc <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13354:	e0bffc17 	ldw	r2,-16(fp)
   13358:	1080020b 	ldhu	r2,8(r2)
   1335c:	0084303a 	nor	r2,zero,r2
   13360:	1007883a 	mov	r3,r2
   13364:	e0bff117 	ldw	r2,-60(fp)
   13368:	1080040b 	ldhu	r2,16(r2)
   1336c:	1884703a 	and	r2,r3,r2
   13370:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   13374:	e0bff60b 	ldhu	r2,-40(fp)
   13378:	10001a26 	beq	r2,zero,133e4 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1337c:	e0bff60b 	ldhu	r2,-40(fp)
   13380:	100b883a 	mov	r5,r2
   13384:	e13ff117 	ldw	r4,-60(fp)
   13388:	001377c0 	call	1377c <OS_FlagTaskRdy>
   1338c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   13390:	e0bff683 	ldbu	r2,-38(fp)
   13394:	10800058 	cmpnei	r2,r2,1
   13398:	1000121e 	bne	r2,zero,133e4 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1339c:	00800044 	movi	r2,1
   133a0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   133a4:	00000f06 	br	133e4 <OSFlagPost+0x300>
   133a8:	e0bff317 	ldw	r2,-52(fp)
   133ac:	e0bff515 	stw	r2,-44(fp)
   133b0:	e0bff517 	ldw	r2,-44(fp)
   133b4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   133b8:	e0bfff17 	ldw	r2,-4(fp)
   133bc:	00c01bc4 	movi	r3,111
   133c0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   133c4:	0005883a 	mov	r2,zero
   133c8:	00002606 	br	13464 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   133cc:	0001883a 	nop
   133d0:	00000506 	br	133e8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   133d4:	0001883a 	nop
   133d8:	00000306 	br	133e8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   133dc:	0001883a 	nop
   133e0:	00000106 	br	133e8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   133e4:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   133e8:	e0bff117 	ldw	r2,-60(fp)
   133ec:	10800017 	ldw	r2,0(r2)
   133f0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   133f4:	e0bff117 	ldw	r2,-60(fp)
   133f8:	103f871e 	bne	r2,zero,13218 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013218>
   133fc:	e0bff317 	ldw	r2,-52(fp)
   13400:	e0bff715 	stw	r2,-36(fp)
   13404:	e0bff717 	ldw	r2,-36(fp)
   13408:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   1340c:	e0bff203 	ldbu	r2,-56(fp)
   13410:	10800058 	cmpnei	r2,r2,1
   13414:	1000011e 	bne	r2,zero,1341c <OSFlagPost+0x338>
        OS_Sched();
   13418:	001198c0 	call	1198c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1341c:	0005303a 	rdctl	r2,status
   13420:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13424:	e0fffa17 	ldw	r3,-24(fp)
   13428:	00bfff84 	movi	r2,-2
   1342c:	1884703a 	and	r2,r3,r2
   13430:	1001703a 	wrctl	status,r2
  
  return context;
   13434:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   13438:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   1343c:	e0bffc17 	ldw	r2,-16(fp)
   13440:	1080020b 	ldhu	r2,8(r2)
   13444:	e0bff90d 	sth	r2,-28(fp)
   13448:	e0bff317 	ldw	r2,-52(fp)
   1344c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13450:	e0bff817 	ldw	r2,-32(fp)
   13454:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   13458:	e0bfff17 	ldw	r2,-4(fp)
   1345c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   13460:	e0bff90b 	ldhu	r2,-28(fp)
}
   13464:	e037883a 	mov	sp,fp
   13468:	dfc00117 	ldw	ra,4(sp)
   1346c:	df000017 	ldw	fp,0(sp)
   13470:	dec00204 	addi	sp,sp,8
   13474:	f800283a 	ret

00013478 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   13478:	defff904 	addi	sp,sp,-28
   1347c:	df000615 	stw	fp,24(sp)
   13480:	df000604 	addi	fp,sp,24
   13484:	e13ffe15 	stw	r4,-8(fp)
   13488:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   1348c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   13490:	e0bfff17 	ldw	r2,-4(fp)
   13494:	1000021e 	bne	r2,zero,134a0 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   13498:	0005883a 	mov	r2,zero
   1349c:	00002306 	br	1352c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   134a0:	e0bffe17 	ldw	r2,-8(fp)
   134a4:	1000051e 	bne	r2,zero,134bc <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   134a8:	e0bfff17 	ldw	r2,-4(fp)
   134ac:	00c01b84 	movi	r3,110
   134b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   134b4:	0005883a 	mov	r2,zero
   134b8:	00001c06 	br	1352c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   134bc:	e0bffe17 	ldw	r2,-8(fp)
   134c0:	10800003 	ldbu	r2,0(r2)
   134c4:	10803fcc 	andi	r2,r2,255
   134c8:	10800160 	cmpeqi	r2,r2,5
   134cc:	1000051e 	bne	r2,zero,134e4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   134d0:	e0bfff17 	ldw	r2,-4(fp)
   134d4:	00c00044 	movi	r3,1
   134d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   134dc:	0005883a 	mov	r2,zero
   134e0:	00001206 	br	1352c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134e4:	0005303a 	rdctl	r2,status
   134e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134ec:	e0fffc17 	ldw	r3,-16(fp)
   134f0:	00bfff84 	movi	r2,-2
   134f4:	1884703a 	and	r2,r3,r2
   134f8:	1001703a 	wrctl	status,r2
  
  return context;
   134fc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13500:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   13504:	e0bffe17 	ldw	r2,-8(fp)
   13508:	1080020b 	ldhu	r2,8(r2)
   1350c:	e0bffb0d 	sth	r2,-20(fp)
   13510:	e0bffa17 	ldw	r2,-24(fp)
   13514:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13518:	e0bffd17 	ldw	r2,-12(fp)
   1351c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13520:	e0bfff17 	ldw	r2,-4(fp)
   13524:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   13528:	e0bffb0b 	ldhu	r2,-20(fp)
}
   1352c:	e037883a 	mov	sp,fp
   13530:	df000017 	ldw	fp,0(sp)
   13534:	dec00104 	addi	sp,sp,4
   13538:	f800283a 	ret

0001353c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   1353c:	defff804 	addi	sp,sp,-32
   13540:	df000715 	stw	fp,28(sp)
   13544:	df000704 	addi	fp,sp,28
   13548:	e13ffb15 	stw	r4,-20(fp)
   1354c:	e17ffc15 	stw	r5,-16(fp)
   13550:	3009883a 	mov	r4,r6
   13554:	3807883a 	mov	r3,r7
   13558:	e0800117 	ldw	r2,4(fp)
   1355c:	e13ffd0d 	sth	r4,-12(fp)
   13560:	e0fffe05 	stb	r3,-8(fp)
   13564:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   13568:	d0a82717 	ldw	r2,-24420(gp)
   1356c:	d0e82717 	ldw	r3,-24420(gp)
   13570:	18c00c03 	ldbu	r3,48(r3)
   13574:	18c00814 	ori	r3,r3,32
   13578:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   1357c:	d0a82717 	ldw	r2,-24420(gp)
   13580:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   13584:	d0a82717 	ldw	r2,-24420(gp)
   13588:	e0ffff0b 	ldhu	r3,-4(fp)
   1358c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   13590:	d0a82717 	ldw	r2,-24420(gp)
   13594:	e0fffc17 	ldw	r3,-16(fp)
   13598:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   1359c:	e0bffc17 	ldw	r2,-16(fp)
   135a0:	e0fffd0b 	ldhu	r3,-12(fp)
   135a4:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   135a8:	e0bffc17 	ldw	r2,-16(fp)
   135ac:	e0fffe03 	ldbu	r3,-8(fp)
   135b0:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   135b4:	d0e82717 	ldw	r3,-24420(gp)
   135b8:	e0bffc17 	ldw	r2,-16(fp)
   135bc:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   135c0:	e0bffb17 	ldw	r2,-20(fp)
   135c4:	10c00117 	ldw	r3,4(r2)
   135c8:	e0bffc17 	ldw	r2,-16(fp)
   135cc:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   135d0:	e0bffc17 	ldw	r2,-16(fp)
   135d4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   135d8:	e0bffc17 	ldw	r2,-16(fp)
   135dc:	e0fffb17 	ldw	r3,-20(fp)
   135e0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   135e4:	e0bffb17 	ldw	r2,-20(fp)
   135e8:	10800117 	ldw	r2,4(r2)
   135ec:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   135f0:	e0bff917 	ldw	r2,-28(fp)
   135f4:	10000326 	beq	r2,zero,13604 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   135f8:	e0bff917 	ldw	r2,-28(fp)
   135fc:	e0fffc17 	ldw	r3,-16(fp)
   13600:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   13604:	e0bffb17 	ldw	r2,-20(fp)
   13608:	e0fffc17 	ldw	r3,-16(fp)
   1360c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   13610:	d0a82717 	ldw	r2,-24420(gp)
   13614:	10800d03 	ldbu	r2,52(r2)
   13618:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1361c:	e0fffa03 	ldbu	r3,-24(fp)
   13620:	e13ffa03 	ldbu	r4,-24(fp)
   13624:	d0a82444 	addi	r2,gp,-24431
   13628:	2085883a 	add	r2,r4,r2
   1362c:	10800003 	ldbu	r2,0(r2)
   13630:	1009883a 	mov	r4,r2
   13634:	d0a82717 	ldw	r2,-24420(gp)
   13638:	10800d43 	ldbu	r2,53(r2)
   1363c:	0084303a 	nor	r2,zero,r2
   13640:	2084703a 	and	r2,r4,r2
   13644:	1009883a 	mov	r4,r2
   13648:	d0a82444 	addi	r2,gp,-24431
   1364c:	1885883a 	add	r2,r3,r2
   13650:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   13654:	e0fffa03 	ldbu	r3,-24(fp)
   13658:	d0a82444 	addi	r2,gp,-24431
   1365c:	1885883a 	add	r2,r3,r2
   13660:	10800003 	ldbu	r2,0(r2)
   13664:	10803fcc 	andi	r2,r2,255
   13668:	1000071e 	bne	r2,zero,13688 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1366c:	d0a82717 	ldw	r2,-24420(gp)
   13670:	10800d83 	ldbu	r2,54(r2)
   13674:	0084303a 	nor	r2,zero,r2
   13678:	1007883a 	mov	r3,r2
   1367c:	d0a82403 	ldbu	r2,-24432(gp)
   13680:	1884703a 	and	r2,r3,r2
   13684:	d0a82405 	stb	r2,-24432(gp)
    }
}
   13688:	0001883a 	nop
   1368c:	e037883a 	mov	sp,fp
   13690:	df000017 	ldw	fp,0(sp)
   13694:	dec00104 	addi	sp,sp,4
   13698:	f800283a 	ret

0001369c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   1369c:	defffb04 	addi	sp,sp,-20
   136a0:	dfc00415 	stw	ra,16(sp)
   136a4:	df000315 	stw	fp,12(sp)
   136a8:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   136ac:	0140dc04 	movi	r5,880
   136b0:	010000b4 	movhi	r4,2
   136b4:	213f4c04 	addi	r4,r4,-720
   136b8:	00118d00 	call	118d0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   136bc:	008000b4 	movhi	r2,2
   136c0:	10bf4c04 	addi	r2,r2,-720
   136c4:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   136c8:	008000b4 	movhi	r2,2
   136cc:	10bf5704 	addi	r2,r2,-676
   136d0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   136d4:	e03ffd0d 	sth	zero,-12(fp)
   136d8:	00001306 	br	13728 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   136dc:	e0bffe17 	ldw	r2,-8(fp)
   136e0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   136e4:	e0bffe17 	ldw	r2,-8(fp)
   136e8:	e0ffff17 	ldw	r3,-4(fp)
   136ec:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   136f0:	e0bffe17 	ldw	r2,-8(fp)
   136f4:	00c00fc4 	movi	r3,63
   136f8:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   136fc:	e0bffe17 	ldw	r2,-8(fp)
   13700:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   13704:	e0bffe17 	ldw	r2,-8(fp)
   13708:	10800b04 	addi	r2,r2,44
   1370c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   13710:	e0bfff17 	ldw	r2,-4(fp)
   13714:	10800b04 	addi	r2,r2,44
   13718:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1371c:	e0bffd0b 	ldhu	r2,-12(fp)
   13720:	10800044 	addi	r2,r2,1
   13724:	e0bffd0d 	sth	r2,-12(fp)
   13728:	e0bffd0b 	ldhu	r2,-12(fp)
   1372c:	108004f0 	cmpltui	r2,r2,19
   13730:	103fea1e 	bne	r2,zero,136dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70136dc>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   13734:	e0bffe17 	ldw	r2,-8(fp)
   13738:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   1373c:	e0bffe17 	ldw	r2,-8(fp)
   13740:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   13744:	e0bffe17 	ldw	r2,-8(fp)
   13748:	00c00fc4 	movi	r3,63
   1374c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   13750:	e0bffe17 	ldw	r2,-8(fp)
   13754:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   13758:	008000b4 	movhi	r2,2
   1375c:	10bf4c04 	addi	r2,r2,-720
   13760:	d0a82915 	stw	r2,-24412(gp)
#endif
}
   13764:	0001883a 	nop
   13768:	e037883a 	mov	sp,fp
   1376c:	dfc00117 	ldw	ra,4(sp)
   13770:	df000017 	ldw	fp,0(sp)
   13774:	dec00204 	addi	sp,sp,8
   13778:	f800283a 	ret

0001377c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   1377c:	defffa04 	addi	sp,sp,-24
   13780:	dfc00515 	stw	ra,20(sp)
   13784:	df000415 	stw	fp,16(sp)
   13788:	df000404 	addi	fp,sp,16
   1378c:	e13ffe15 	stw	r4,-8(fp)
   13790:	2805883a 	mov	r2,r5
   13794:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   13798:	e0bffe17 	ldw	r2,-8(fp)
   1379c:	10800217 	ldw	r2,8(r2)
   137a0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   137a4:	e0bffd17 	ldw	r2,-12(fp)
   137a8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   137ac:	e0bffd17 	ldw	r2,-12(fp)
   137b0:	e0ffff0b 	ldhu	r3,-4(fp)
   137b4:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   137b8:	e0bffd17 	ldw	r2,-12(fp)
   137bc:	10c00c03 	ldbu	r3,48(r2)
   137c0:	00bff7c4 	movi	r2,-33
   137c4:	1884703a 	and	r2,r3,r2
   137c8:	1007883a 	mov	r3,r2
   137cc:	e0bffd17 	ldw	r2,-12(fp)
   137d0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   137d4:	e0bffd17 	ldw	r2,-12(fp)
   137d8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   137dc:	e0bffd17 	ldw	r2,-12(fp)
   137e0:	10800c03 	ldbu	r2,48(r2)
   137e4:	10803fcc 	andi	r2,r2,255
   137e8:	1000181e 	bne	r2,zero,1384c <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   137ec:	e0bffd17 	ldw	r2,-12(fp)
   137f0:	10c00d83 	ldbu	r3,54(r2)
   137f4:	d0a82403 	ldbu	r2,-24432(gp)
   137f8:	1884b03a 	or	r2,r3,r2
   137fc:	d0a82405 	stb	r2,-24432(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   13800:	e0bffd17 	ldw	r2,-12(fp)
   13804:	10800d03 	ldbu	r2,52(r2)
   13808:	10c03fcc 	andi	r3,r2,255
   1380c:	e0bffd17 	ldw	r2,-12(fp)
   13810:	10800d03 	ldbu	r2,52(r2)
   13814:	11003fcc 	andi	r4,r2,255
   13818:	d0a82444 	addi	r2,gp,-24431
   1381c:	2085883a 	add	r2,r4,r2
   13820:	11000003 	ldbu	r4,0(r2)
   13824:	e0bffd17 	ldw	r2,-12(fp)
   13828:	10800d43 	ldbu	r2,53(r2)
   1382c:	2084b03a 	or	r2,r4,r2
   13830:	1009883a 	mov	r4,r2
   13834:	d0a82444 	addi	r2,gp,-24431
   13838:	1885883a 	add	r2,r3,r2
   1383c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   13840:	00800044 	movi	r2,1
   13844:	e0bffc05 	stb	r2,-16(fp)
   13848:	00000106 	br	13850 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   1384c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   13850:	e13ffe17 	ldw	r4,-8(fp)
   13854:	00138700 	call	13870 <OS_FlagUnlink>
    return (sched);
   13858:	e0bffc03 	ldbu	r2,-16(fp)
}
   1385c:	e037883a 	mov	sp,fp
   13860:	dfc00117 	ldw	ra,4(sp)
   13864:	df000017 	ldw	fp,0(sp)
   13868:	dec00204 	addi	sp,sp,8
   1386c:	f800283a 	ret

00013870 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   13870:	defffa04 	addi	sp,sp,-24
   13874:	df000515 	stw	fp,20(sp)
   13878:	df000504 	addi	fp,sp,20
   1387c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   13880:	e0bfff17 	ldw	r2,-4(fp)
   13884:	10800117 	ldw	r2,4(r2)
   13888:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1388c:	e0bfff17 	ldw	r2,-4(fp)
   13890:	10800017 	ldw	r2,0(r2)
   13894:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   13898:	e0bffb17 	ldw	r2,-20(fp)
   1389c:	10000b1e 	bne	r2,zero,138cc <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   138a0:	e0bfff17 	ldw	r2,-4(fp)
   138a4:	10800317 	ldw	r2,12(r2)
   138a8:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   138ac:	e0bffd17 	ldw	r2,-12(fp)
   138b0:	e0fffc17 	ldw	r3,-16(fp)
   138b4:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   138b8:	e0bffc17 	ldw	r2,-16(fp)
   138bc:	10000b26 	beq	r2,zero,138ec <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   138c0:	e0bffc17 	ldw	r2,-16(fp)
   138c4:	10000115 	stw	zero,4(r2)
   138c8:	00000806 	br	138ec <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   138cc:	e0bffb17 	ldw	r2,-20(fp)
   138d0:	e0fffc17 	ldw	r3,-16(fp)
   138d4:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   138d8:	e0bffc17 	ldw	r2,-16(fp)
   138dc:	10000326 	beq	r2,zero,138ec <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   138e0:	e0bffc17 	ldw	r2,-16(fp)
   138e4:	e0fffb17 	ldw	r3,-20(fp)
   138e8:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   138ec:	e0bfff17 	ldw	r2,-4(fp)
   138f0:	10800217 	ldw	r2,8(r2)
   138f4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   138f8:	e0bffe17 	ldw	r2,-8(fp)
   138fc:	10000a15 	stw	zero,40(r2)
#endif
}
   13900:	0001883a 	nop
   13904:	e037883a 	mov	sp,fp
   13908:	df000017 	ldw	fp,0(sp)
   1390c:	dec00104 	addi	sp,sp,4
   13910:	f800283a 	ret

00013914 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   13914:	defff404 	addi	sp,sp,-48
   13918:	df000b15 	stw	fp,44(sp)
   1391c:	df000b04 	addi	fp,sp,44
   13920:	e13ffc15 	stw	r4,-16(fp)
   13924:	e17ffd15 	stw	r5,-12(fp)
   13928:	e1bffe15 	stw	r6,-8(fp)
   1392c:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13930:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13934:	e0bfff17 	ldw	r2,-4(fp)
   13938:	1000021e 	bne	r2,zero,13944 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   1393c:	0005883a 	mov	r2,zero
   13940:	00006506 	br	13ad8 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   13944:	e0bffc17 	ldw	r2,-16(fp)
   13948:	1000051e 	bne	r2,zero,13960 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1394c:	e0bfff17 	ldw	r2,-4(fp)
   13950:	00c01884 	movi	r3,98
   13954:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   13958:	0005883a 	mov	r2,zero
   1395c:	00005e06 	br	13ad8 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   13960:	e0bffc17 	ldw	r2,-16(fp)
   13964:	108000cc 	andi	r2,r2,3
   13968:	10000526 	beq	r2,zero,13980 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1396c:	e0bfff17 	ldw	r2,-4(fp)
   13970:	00c01884 	movi	r3,98
   13974:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   13978:	0005883a 	mov	r2,zero
   1397c:	00005606 	br	13ad8 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   13980:	e0bffd17 	ldw	r2,-12(fp)
   13984:	108000a8 	cmpgeui	r2,r2,2
   13988:	1000051e 	bne	r2,zero,139a0 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   1398c:	e0bfff17 	ldw	r2,-4(fp)
   13990:	00c016c4 	movi	r3,91
   13994:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   13998:	0005883a 	mov	r2,zero
   1399c:	00004e06 	br	13ad8 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   139a0:	e0bffe17 	ldw	r2,-8(fp)
   139a4:	10800128 	cmpgeui	r2,r2,4
   139a8:	1000051e 	bne	r2,zero,139c0 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   139ac:	e0bfff17 	ldw	r2,-4(fp)
   139b0:	00c01704 	movi	r3,92
   139b4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   139b8:	0005883a 	mov	r2,zero
   139bc:	00004606 	br	13ad8 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   139c0:	0005303a 	rdctl	r2,status
   139c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   139c8:	e0fffb17 	ldw	r3,-20(fp)
   139cc:	00bfff84 	movi	r2,-2
   139d0:	1884703a 	and	r2,r3,r2
   139d4:	1001703a 	wrctl	status,r2
  
  return context;
   139d8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   139dc:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   139e0:	d0a82117 	ldw	r2,-24444(gp)
   139e4:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   139e8:	d0a82117 	ldw	r2,-24444(gp)
   139ec:	10000326 	beq	r2,zero,139fc <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   139f0:	d0a82117 	ldw	r2,-24444(gp)
   139f4:	10800117 	ldw	r2,4(r2)
   139f8:	d0a82115 	stw	r2,-24444(gp)
   139fc:	e0bff817 	ldw	r2,-32(fp)
   13a00:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a04:	e0bff917 	ldw	r2,-28(fp)
   13a08:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   13a0c:	e0bffa17 	ldw	r2,-24(fp)
   13a10:	1000051e 	bne	r2,zero,13a28 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   13a14:	e0bfff17 	ldw	r2,-4(fp)
   13a18:	00c01684 	movi	r3,90
   13a1c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   13a20:	0005883a 	mov	r2,zero
   13a24:	00002c06 	br	13ad8 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   13a28:	e0bffc17 	ldw	r2,-16(fp)
   13a2c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   13a30:	e0fffc17 	ldw	r3,-16(fp)
   13a34:	e0bffe17 	ldw	r2,-8(fp)
   13a38:	1885883a 	add	r2,r3,r2
   13a3c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   13a40:	e03ff715 	stw	zero,-36(fp)
   13a44:	00000c06 	br	13a78 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   13a48:	e0bff617 	ldw	r2,-40(fp)
   13a4c:	e0fff517 	ldw	r3,-44(fp)
   13a50:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   13a54:	e0bff517 	ldw	r2,-44(fp)
   13a58:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   13a5c:	e0fff517 	ldw	r3,-44(fp)
   13a60:	e0bffe17 	ldw	r2,-8(fp)
   13a64:	1885883a 	add	r2,r3,r2
   13a68:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   13a6c:	e0bff717 	ldw	r2,-36(fp)
   13a70:	10800044 	addi	r2,r2,1
   13a74:	e0bff715 	stw	r2,-36(fp)
   13a78:	e0bffd17 	ldw	r2,-12(fp)
   13a7c:	10bfffc4 	addi	r2,r2,-1
   13a80:	e0fff717 	ldw	r3,-36(fp)
   13a84:	18bff036 	bltu	r3,r2,13a48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013a48>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   13a88:	e0bff617 	ldw	r2,-40(fp)
   13a8c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   13a90:	e0bffa17 	ldw	r2,-24(fp)
   13a94:	e0fffc17 	ldw	r3,-16(fp)
   13a98:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   13a9c:	e0bffa17 	ldw	r2,-24(fp)
   13aa0:	e0fffc17 	ldw	r3,-16(fp)
   13aa4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   13aa8:	e0bffa17 	ldw	r2,-24(fp)
   13aac:	e0fffd17 	ldw	r3,-12(fp)
   13ab0:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   13ab4:	e0bffa17 	ldw	r2,-24(fp)
   13ab8:	e0fffd17 	ldw	r3,-12(fp)
   13abc:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   13ac0:	e0bffa17 	ldw	r2,-24(fp)
   13ac4:	e0fffe17 	ldw	r3,-8(fp)
   13ac8:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   13acc:	e0bfff17 	ldw	r2,-4(fp)
   13ad0:	10000005 	stb	zero,0(r2)
    return (pmem);
   13ad4:	e0bffa17 	ldw	r2,-24(fp)
}
   13ad8:	e037883a 	mov	sp,fp
   13adc:	df000017 	ldw	fp,0(sp)
   13ae0:	dec00104 	addi	sp,sp,4
   13ae4:	f800283a 	ret

00013ae8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   13ae8:	defff804 	addi	sp,sp,-32
   13aec:	df000715 	stw	fp,28(sp)
   13af0:	df000704 	addi	fp,sp,28
   13af4:	e13ffe15 	stw	r4,-8(fp)
   13af8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13afc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13b00:	e0bfff17 	ldw	r2,-4(fp)
   13b04:	1000021e 	bne	r2,zero,13b10 <OSMemGet+0x28>
        return ((void *)0);
   13b08:	0005883a 	mov	r2,zero
   13b0c:	00002e06 	br	13bc8 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   13b10:	e0bffe17 	ldw	r2,-8(fp)
   13b14:	1000051e 	bne	r2,zero,13b2c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   13b18:	e0bfff17 	ldw	r2,-4(fp)
   13b1c:	00c01804 	movi	r3,96
   13b20:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13b24:	0005883a 	mov	r2,zero
   13b28:	00002706 	br	13bc8 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b2c:	0005303a 	rdctl	r2,status
   13b30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b34:	e0fffd17 	ldw	r3,-12(fp)
   13b38:	00bfff84 	movi	r2,-2
   13b3c:	1884703a 	and	r2,r3,r2
   13b40:	1001703a 	wrctl	status,r2
  
  return context;
   13b44:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13b48:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   13b4c:	e0bffe17 	ldw	r2,-8(fp)
   13b50:	10800417 	ldw	r2,16(r2)
   13b54:	10001426 	beq	r2,zero,13ba8 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   13b58:	e0bffe17 	ldw	r2,-8(fp)
   13b5c:	10800117 	ldw	r2,4(r2)
   13b60:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   13b64:	e0bffb17 	ldw	r2,-20(fp)
   13b68:	10c00017 	ldw	r3,0(r2)
   13b6c:	e0bffe17 	ldw	r2,-8(fp)
   13b70:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   13b74:	e0bffe17 	ldw	r2,-8(fp)
   13b78:	10800417 	ldw	r2,16(r2)
   13b7c:	10ffffc4 	addi	r3,r2,-1
   13b80:	e0bffe17 	ldw	r2,-8(fp)
   13b84:	10c00415 	stw	r3,16(r2)
   13b88:	e0bff917 	ldw	r2,-28(fp)
   13b8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b90:	e0bffa17 	ldw	r2,-24(fp)
   13b94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   13b98:	e0bfff17 	ldw	r2,-4(fp)
   13b9c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   13ba0:	e0bffb17 	ldw	r2,-20(fp)
   13ba4:	00000806 	br	13bc8 <OSMemGet+0xe0>
   13ba8:	e0bff917 	ldw	r2,-28(fp)
   13bac:	e0bffc15 	stw	r2,-16(fp)
   13bb0:	e0bffc17 	ldw	r2,-16(fp)
   13bb4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   13bb8:	e0bfff17 	ldw	r2,-4(fp)
   13bbc:	00c01744 	movi	r3,93
   13bc0:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   13bc4:	0005883a 	mov	r2,zero
}
   13bc8:	e037883a 	mov	sp,fp
   13bcc:	df000017 	ldw	fp,0(sp)
   13bd0:	dec00104 	addi	sp,sp,4
   13bd4:	f800283a 	ret

00013bd8 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   13bd8:	defff704 	addi	sp,sp,-36
   13bdc:	dfc00815 	stw	ra,32(sp)
   13be0:	df000715 	stw	fp,28(sp)
   13be4:	df000704 	addi	fp,sp,28
   13be8:	e13ffd15 	stw	r4,-12(fp)
   13bec:	e17ffe15 	stw	r5,-8(fp)
   13bf0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13bf4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13bf8:	e0bfff17 	ldw	r2,-4(fp)
   13bfc:	1000021e 	bne	r2,zero,13c08 <OSMemNameGet+0x30>
        return (0);
   13c00:	0005883a 	mov	r2,zero
   13c04:	00002b06 	br	13cb4 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   13c08:	e0bffd17 	ldw	r2,-12(fp)
   13c0c:	1000051e 	bne	r2,zero,13c24 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   13c10:	e0bfff17 	ldw	r2,-4(fp)
   13c14:	00c01804 	movi	r3,96
   13c18:	10c00005 	stb	r3,0(r2)
        return (0);
   13c1c:	0005883a 	mov	r2,zero
   13c20:	00002406 	br	13cb4 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13c24:	e0bffe17 	ldw	r2,-8(fp)
   13c28:	1000051e 	bne	r2,zero,13c40 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   13c2c:	e0bfff17 	ldw	r2,-4(fp)
   13c30:	00c00304 	movi	r3,12
   13c34:	10c00005 	stb	r3,0(r2)
        return (0);
   13c38:	0005883a 	mov	r2,zero
   13c3c:	00001d06 	br	13cb4 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13c40:	d0a82603 	ldbu	r2,-24424(gp)
   13c44:	10803fcc 	andi	r2,r2,255
   13c48:	10000526 	beq	r2,zero,13c60 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   13c4c:	e0bfff17 	ldw	r2,-4(fp)
   13c50:	00c00444 	movi	r3,17
   13c54:	10c00005 	stb	r3,0(r2)
        return (0);
   13c58:	0005883a 	mov	r2,zero
   13c5c:	00001506 	br	13cb4 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c60:	0005303a 	rdctl	r2,status
   13c64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c68:	e0fffb17 	ldw	r3,-20(fp)
   13c6c:	00bfff84 	movi	r2,-2
   13c70:	1884703a 	and	r2,r3,r2
   13c74:	1001703a 	wrctl	status,r2
  
  return context;
   13c78:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   13c7c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   13c80:	e0bffd17 	ldw	r2,-12(fp)
   13c84:	10800504 	addi	r2,r2,20
   13c88:	100b883a 	mov	r5,r2
   13c8c:	e13ffe17 	ldw	r4,-8(fp)
   13c90:	0011ad00 	call	11ad0 <OS_StrCopy>
   13c94:	e0bffa05 	stb	r2,-24(fp)
   13c98:	e0bff917 	ldw	r2,-28(fp)
   13c9c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ca0:	e0bffc17 	ldw	r2,-16(fp)
   13ca4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13ca8:	e0bfff17 	ldw	r2,-4(fp)
   13cac:	10000005 	stb	zero,0(r2)
    return (len);
   13cb0:	e0bffa03 	ldbu	r2,-24(fp)
}
   13cb4:	e037883a 	mov	sp,fp
   13cb8:	dfc00117 	ldw	ra,4(sp)
   13cbc:	df000017 	ldw	fp,0(sp)
   13cc0:	dec00204 	addi	sp,sp,8
   13cc4:	f800283a 	ret

00013cc8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   13cc8:	defff604 	addi	sp,sp,-40
   13ccc:	dfc00915 	stw	ra,36(sp)
   13cd0:	df000815 	stw	fp,32(sp)
   13cd4:	df000804 	addi	fp,sp,32
   13cd8:	e13ffd15 	stw	r4,-12(fp)
   13cdc:	e17ffe15 	stw	r5,-8(fp)
   13ce0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13ce4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13ce8:	e0bfff17 	ldw	r2,-4(fp)
   13cec:	10003526 	beq	r2,zero,13dc4 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   13cf0:	e0bffd17 	ldw	r2,-12(fp)
   13cf4:	1000041e 	bne	r2,zero,13d08 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   13cf8:	e0bfff17 	ldw	r2,-4(fp)
   13cfc:	00c01804 	movi	r3,96
   13d00:	10c00005 	stb	r3,0(r2)
        return;
   13d04:	00003006 	br	13dc8 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13d08:	e0bffe17 	ldw	r2,-8(fp)
   13d0c:	1000041e 	bne	r2,zero,13d20 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   13d10:	e0bfff17 	ldw	r2,-4(fp)
   13d14:	00c00304 	movi	r3,12
   13d18:	10c00005 	stb	r3,0(r2)
        return;
   13d1c:	00002a06 	br	13dc8 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13d20:	d0a82603 	ldbu	r2,-24424(gp)
   13d24:	10803fcc 	andi	r2,r2,255
   13d28:	10000426 	beq	r2,zero,13d3c <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   13d2c:	e0bfff17 	ldw	r2,-4(fp)
   13d30:	00c00484 	movi	r3,18
   13d34:	10c00005 	stb	r3,0(r2)
        return;
   13d38:	00002306 	br	13dc8 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d3c:	0005303a 	rdctl	r2,status
   13d40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d44:	e0fffc17 	ldw	r3,-16(fp)
   13d48:	00bfff84 	movi	r2,-2
   13d4c:	1884703a 	and	r2,r3,r2
   13d50:	1001703a 	wrctl	status,r2
  
  return context;
   13d54:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13d58:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   13d5c:	e13ffe17 	ldw	r4,-8(fp)
   13d60:	0011b440 	call	11b44 <OS_StrLen>
   13d64:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   13d68:	e0bffa03 	ldbu	r2,-24(fp)
   13d6c:	10800830 	cmpltui	r2,r2,32
   13d70:	1000081e 	bne	r2,zero,13d94 <OSMemNameSet+0xcc>
   13d74:	e0bff817 	ldw	r2,-32(fp)
   13d78:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d7c:	e0bff917 	ldw	r2,-28(fp)
   13d80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   13d84:	e0bfff17 	ldw	r2,-4(fp)
   13d88:	00c018c4 	movi	r3,99
   13d8c:	10c00005 	stb	r3,0(r2)
        return;
   13d90:	00000d06 	br	13dc8 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   13d94:	e0bffd17 	ldw	r2,-12(fp)
   13d98:	10800504 	addi	r2,r2,20
   13d9c:	e17ffe17 	ldw	r5,-8(fp)
   13da0:	1009883a 	mov	r4,r2
   13da4:	0011ad00 	call	11ad0 <OS_StrCopy>
   13da8:	e0bff817 	ldw	r2,-32(fp)
   13dac:	e0bffb15 	stw	r2,-20(fp)
   13db0:	e0bffb17 	ldw	r2,-20(fp)
   13db4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13db8:	e0bfff17 	ldw	r2,-4(fp)
   13dbc:	10000005 	stb	zero,0(r2)
   13dc0:	00000106 	br	13dc8 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   13dc4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   13dc8:	e037883a 	mov	sp,fp
   13dcc:	dfc00117 	ldw	ra,4(sp)
   13dd0:	df000017 	ldw	fp,0(sp)
   13dd4:	dec00204 	addi	sp,sp,8
   13dd8:	f800283a 	ret

00013ddc <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   13ddc:	defff904 	addi	sp,sp,-28
   13de0:	df000615 	stw	fp,24(sp)
   13de4:	df000604 	addi	fp,sp,24
   13de8:	e13ffe15 	stw	r4,-8(fp)
   13dec:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13df0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   13df4:	e0bffe17 	ldw	r2,-8(fp)
   13df8:	1000021e 	bne	r2,zero,13e04 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   13dfc:	00801804 	movi	r2,96
   13e00:	00002806 	br	13ea4 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   13e04:	e0bfff17 	ldw	r2,-4(fp)
   13e08:	1000021e 	bne	r2,zero,13e14 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   13e0c:	008017c4 	movi	r2,95
   13e10:	00002406 	br	13ea4 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e14:	0005303a 	rdctl	r2,status
   13e18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e1c:	e0fffd17 	ldw	r3,-12(fp)
   13e20:	00bfff84 	movi	r2,-2
   13e24:	1884703a 	and	r2,r3,r2
   13e28:	1001703a 	wrctl	status,r2
  
  return context;
   13e2c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13e30:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   13e34:	e0bffe17 	ldw	r2,-8(fp)
   13e38:	10c00417 	ldw	r3,16(r2)
   13e3c:	e0bffe17 	ldw	r2,-8(fp)
   13e40:	10800317 	ldw	r2,12(r2)
   13e44:	18800636 	bltu	r3,r2,13e60 <OSMemPut+0x84>
   13e48:	e0bffa17 	ldw	r2,-24(fp)
   13e4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e50:	e0bffb17 	ldw	r2,-20(fp)
   13e54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   13e58:	00801784 	movi	r2,94
   13e5c:	00001106 	br	13ea4 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   13e60:	e0bffe17 	ldw	r2,-8(fp)
   13e64:	10c00117 	ldw	r3,4(r2)
   13e68:	e0bfff17 	ldw	r2,-4(fp)
   13e6c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   13e70:	e0bffe17 	ldw	r2,-8(fp)
   13e74:	e0ffff17 	ldw	r3,-4(fp)
   13e78:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   13e7c:	e0bffe17 	ldw	r2,-8(fp)
   13e80:	10800417 	ldw	r2,16(r2)
   13e84:	10c00044 	addi	r3,r2,1
   13e88:	e0bffe17 	ldw	r2,-8(fp)
   13e8c:	10c00415 	stw	r3,16(r2)
   13e90:	e0bffa17 	ldw	r2,-24(fp)
   13e94:	e0bffc15 	stw	r2,-16(fp)
   13e98:	e0bffc17 	ldw	r2,-16(fp)
   13e9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   13ea0:	0005883a 	mov	r2,zero
}
   13ea4:	e037883a 	mov	sp,fp
   13ea8:	df000017 	ldw	fp,0(sp)
   13eac:	dec00104 	addi	sp,sp,4
   13eb0:	f800283a 	ret

00013eb4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   13eb4:	defffa04 	addi	sp,sp,-24
   13eb8:	df000515 	stw	fp,20(sp)
   13ebc:	df000504 	addi	fp,sp,20
   13ec0:	e13ffe15 	stw	r4,-8(fp)
   13ec4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13ec8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   13ecc:	e0bffe17 	ldw	r2,-8(fp)
   13ed0:	1000021e 	bne	r2,zero,13edc <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   13ed4:	00801804 	movi	r2,96
   13ed8:	00002c06 	br	13f8c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   13edc:	e0bfff17 	ldw	r2,-4(fp)
   13ee0:	1000021e 	bne	r2,zero,13eec <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   13ee4:	00801844 	movi	r2,97
   13ee8:	00002806 	br	13f8c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13eec:	0005303a 	rdctl	r2,status
   13ef0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ef4:	e0fffc17 	ldw	r3,-16(fp)
   13ef8:	00bfff84 	movi	r2,-2
   13efc:	1884703a 	and	r2,r3,r2
   13f00:	1001703a 	wrctl	status,r2
  
  return context;
   13f04:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13f08:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   13f0c:	e0bffe17 	ldw	r2,-8(fp)
   13f10:	10c00017 	ldw	r3,0(r2)
   13f14:	e0bfff17 	ldw	r2,-4(fp)
   13f18:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   13f1c:	e0bffe17 	ldw	r2,-8(fp)
   13f20:	10c00117 	ldw	r3,4(r2)
   13f24:	e0bfff17 	ldw	r2,-4(fp)
   13f28:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   13f2c:	e0bffe17 	ldw	r2,-8(fp)
   13f30:	10c00217 	ldw	r3,8(r2)
   13f34:	e0bfff17 	ldw	r2,-4(fp)
   13f38:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   13f3c:	e0bffe17 	ldw	r2,-8(fp)
   13f40:	10c00317 	ldw	r3,12(r2)
   13f44:	e0bfff17 	ldw	r2,-4(fp)
   13f48:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   13f4c:	e0bffe17 	ldw	r2,-8(fp)
   13f50:	10c00417 	ldw	r3,16(r2)
   13f54:	e0bfff17 	ldw	r2,-4(fp)
   13f58:	10c00415 	stw	r3,16(r2)
   13f5c:	e0bffb17 	ldw	r2,-20(fp)
   13f60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f64:	e0bffd17 	ldw	r2,-12(fp)
   13f68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   13f6c:	e0bfff17 	ldw	r2,-4(fp)
   13f70:	10c00317 	ldw	r3,12(r2)
   13f74:	e0bfff17 	ldw	r2,-4(fp)
   13f78:	10800417 	ldw	r2,16(r2)
   13f7c:	1887c83a 	sub	r3,r3,r2
   13f80:	e0bfff17 	ldw	r2,-4(fp)
   13f84:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   13f88:	0005883a 	mov	r2,zero
}
   13f8c:	e037883a 	mov	sp,fp
   13f90:	df000017 	ldw	fp,0(sp)
   13f94:	dec00104 	addi	sp,sp,4
   13f98:	f800283a 	ret

00013f9c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   13f9c:	defffc04 	addi	sp,sp,-16
   13fa0:	dfc00315 	stw	ra,12(sp)
   13fa4:	df000215 	stw	fp,8(sp)
   13fa8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   13fac:	01430c04 	movi	r5,3120
   13fb0:	010000b4 	movhi	r4,2
   13fb4:	21002804 	addi	r4,r4,160
   13fb8:	00118d00 	call	118d0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   13fbc:	008000b4 	movhi	r2,2
   13fc0:	10802804 	addi	r2,r2,160
   13fc4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   13fc8:	e03fff0d 	sth	zero,-4(fp)
   13fcc:	00001306 	br	1401c <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   13fd0:	e0bfff0b 	ldhu	r2,-4(fp)
   13fd4:	10800044 	addi	r2,r2,1
   13fd8:	10c00d24 	muli	r3,r2,52
   13fdc:	008000b4 	movhi	r2,2
   13fe0:	10802804 	addi	r2,r2,160
   13fe4:	1887883a 	add	r3,r3,r2
   13fe8:	e0bffe17 	ldw	r2,-8(fp)
   13fec:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   13ff0:	e0bffe17 	ldw	r2,-8(fp)
   13ff4:	00c00fc4 	movi	r3,63
   13ff8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   13ffc:	e0bffe17 	ldw	r2,-8(fp)
   14000:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   14004:	e0bffe17 	ldw	r2,-8(fp)
   14008:	10800d04 	addi	r2,r2,52
   1400c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   14010:	e0bfff0b 	ldhu	r2,-4(fp)
   14014:	10800044 	addi	r2,r2,1
   14018:	e0bfff0d 	sth	r2,-4(fp)
   1401c:	e0bfff0b 	ldhu	r2,-4(fp)
   14020:	10800ef0 	cmpltui	r2,r2,59
   14024:	103fea1e 	bne	r2,zero,13fd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013fd0>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   14028:	e0bffe17 	ldw	r2,-8(fp)
   1402c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   14030:	e0bffe17 	ldw	r2,-8(fp)
   14034:	00c00fc4 	movi	r3,63
   14038:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   1403c:	e0bffe17 	ldw	r2,-8(fp)
   14040:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   14044:	008000b4 	movhi	r2,2
   14048:	10802804 	addi	r2,r2,160
   1404c:	d0a82115 	stw	r2,-24444(gp)
#endif
}
   14050:	0001883a 	nop
   14054:	e037883a 	mov	sp,fp
   14058:	dfc00117 	ldw	ra,4(sp)
   1405c:	df000017 	ldw	fp,0(sp)
   14060:	dec00204 	addi	sp,sp,8
   14064:	f800283a 	ret

00014068 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   14068:	defff804 	addi	sp,sp,-32
   1406c:	df000715 	stw	fp,28(sp)
   14070:	df000704 	addi	fp,sp,28
   14074:	e13ffe15 	stw	r4,-8(fp)
   14078:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1407c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14080:	e0bfff17 	ldw	r2,-4(fp)
   14084:	1000021e 	bne	r2,zero,14090 <OSQAccept+0x28>
        return ((void *)0);
   14088:	0005883a 	mov	r2,zero
   1408c:	00004206 	br	14198 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   14090:	e0bffe17 	ldw	r2,-8(fp)
   14094:	1000051e 	bne	r2,zero,140ac <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   14098:	e0bfff17 	ldw	r2,-4(fp)
   1409c:	00c00104 	movi	r3,4
   140a0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   140a4:	0005883a 	mov	r2,zero
   140a8:	00003b06 	br	14198 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   140ac:	e0bffe17 	ldw	r2,-8(fp)
   140b0:	10800003 	ldbu	r2,0(r2)
   140b4:	10803fcc 	andi	r2,r2,255
   140b8:	108000a0 	cmpeqi	r2,r2,2
   140bc:	1000051e 	bne	r2,zero,140d4 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   140c0:	e0bfff17 	ldw	r2,-4(fp)
   140c4:	00c00044 	movi	r3,1
   140c8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   140cc:	0005883a 	mov	r2,zero
   140d0:	00003106 	br	14198 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   140d4:	0005303a 	rdctl	r2,status
   140d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   140dc:	e0fffd17 	ldw	r3,-12(fp)
   140e0:	00bfff84 	movi	r2,-2
   140e4:	1884703a 	and	r2,r3,r2
   140e8:	1001703a 	wrctl	status,r2
  
  return context;
   140ec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   140f0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   140f4:	e0bffe17 	ldw	r2,-8(fp)
   140f8:	10800117 	ldw	r2,4(r2)
   140fc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   14100:	e0bffc17 	ldw	r2,-16(fp)
   14104:	1080058b 	ldhu	r2,22(r2)
   14108:	10bfffcc 	andi	r2,r2,65535
   1410c:	10001926 	beq	r2,zero,14174 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   14110:	e0bffc17 	ldw	r2,-16(fp)
   14114:	10800417 	ldw	r2,16(r2)
   14118:	11000104 	addi	r4,r2,4
   1411c:	e0fffc17 	ldw	r3,-16(fp)
   14120:	19000415 	stw	r4,16(r3)
   14124:	10800017 	ldw	r2,0(r2)
   14128:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1412c:	e0bffc17 	ldw	r2,-16(fp)
   14130:	1080058b 	ldhu	r2,22(r2)
   14134:	10bfffc4 	addi	r2,r2,-1
   14138:	1007883a 	mov	r3,r2
   1413c:	e0bffc17 	ldw	r2,-16(fp)
   14140:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   14144:	e0bffc17 	ldw	r2,-16(fp)
   14148:	10c00417 	ldw	r3,16(r2)
   1414c:	e0bffc17 	ldw	r2,-16(fp)
   14150:	10800217 	ldw	r2,8(r2)
   14154:	1880041e 	bne	r3,r2,14168 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   14158:	e0bffc17 	ldw	r2,-16(fp)
   1415c:	10c00117 	ldw	r3,4(r2)
   14160:	e0bffc17 	ldw	r2,-16(fp)
   14164:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   14168:	e0bfff17 	ldw	r2,-4(fp)
   1416c:	10000005 	stb	zero,0(r2)
   14170:	00000406 	br	14184 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   14174:	e0bfff17 	ldw	r2,-4(fp)
   14178:	00c007c4 	movi	r3,31
   1417c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   14180:	e03ff915 	stw	zero,-28(fp)
   14184:	e0bffa17 	ldw	r2,-24(fp)
   14188:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1418c:	e0bffb17 	ldw	r2,-20(fp)
   14190:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   14194:	e0bff917 	ldw	r2,-28(fp)
}
   14198:	e037883a 	mov	sp,fp
   1419c:	df000017 	ldw	fp,0(sp)
   141a0:	dec00104 	addi	sp,sp,4
   141a4:	f800283a 	ret

000141a8 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   141a8:	defff404 	addi	sp,sp,-48
   141ac:	dfc00b15 	stw	ra,44(sp)
   141b0:	df000a15 	stw	fp,40(sp)
   141b4:	df000a04 	addi	fp,sp,40
   141b8:	e13ffe15 	stw	r4,-8(fp)
   141bc:	2805883a 	mov	r2,r5
   141c0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   141c4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   141c8:	d0a82603 	ldbu	r2,-24424(gp)
   141cc:	10803fcc 	andi	r2,r2,255
   141d0:	10000226 	beq	r2,zero,141dc <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   141d4:	0005883a 	mov	r2,zero
   141d8:	00005906 	br	14340 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   141dc:	0005303a 	rdctl	r2,status
   141e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   141e4:	e0fffd17 	ldw	r3,-12(fp)
   141e8:	00bfff84 	movi	r2,-2
   141ec:	1884703a 	and	r2,r3,r2
   141f0:	1001703a 	wrctl	status,r2
  
  return context;
   141f4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   141f8:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   141fc:	d0a82517 	ldw	r2,-24428(gp)
   14200:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   14204:	d0a82517 	ldw	r2,-24428(gp)
   14208:	10000326 	beq	r2,zero,14218 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1420c:	d0a82517 	ldw	r2,-24428(gp)
   14210:	10800117 	ldw	r2,4(r2)
   14214:	d0a82515 	stw	r2,-24428(gp)
   14218:	e0bff717 	ldw	r2,-36(fp)
   1421c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14220:	e0bff817 	ldw	r2,-32(fp)
   14224:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   14228:	e0bff617 	ldw	r2,-40(fp)
   1422c:	10004326 	beq	r2,zero,1433c <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14230:	0005303a 	rdctl	r2,status
   14234:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14238:	e0fff917 	ldw	r3,-28(fp)
   1423c:	00bfff84 	movi	r2,-2
   14240:	1884703a 	and	r2,r3,r2
   14244:	1001703a 	wrctl	status,r2
  
  return context;
   14248:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   1424c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   14250:	d0a82317 	ldw	r2,-24436(gp)
   14254:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   14258:	e0bffb17 	ldw	r2,-20(fp)
   1425c:	10002d26 	beq	r2,zero,14314 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   14260:	d0a82317 	ldw	r2,-24436(gp)
   14264:	10800017 	ldw	r2,0(r2)
   14268:	d0a82315 	stw	r2,-24436(gp)
   1426c:	e0bff717 	ldw	r2,-36(fp)
   14270:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14274:	e0bffa17 	ldw	r2,-24(fp)
   14278:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   1427c:	e0bffb17 	ldw	r2,-20(fp)
   14280:	e0fffe17 	ldw	r3,-8(fp)
   14284:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   14288:	e0bfff0b 	ldhu	r2,-4(fp)
   1428c:	1085883a 	add	r2,r2,r2
   14290:	1085883a 	add	r2,r2,r2
   14294:	1007883a 	mov	r3,r2
   14298:	e0bffe17 	ldw	r2,-8(fp)
   1429c:	10c7883a 	add	r3,r2,r3
   142a0:	e0bffb17 	ldw	r2,-20(fp)
   142a4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   142a8:	e0bffb17 	ldw	r2,-20(fp)
   142ac:	e0fffe17 	ldw	r3,-8(fp)
   142b0:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   142b4:	e0bffb17 	ldw	r2,-20(fp)
   142b8:	e0fffe17 	ldw	r3,-8(fp)
   142bc:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   142c0:	e0bffb17 	ldw	r2,-20(fp)
   142c4:	e0ffff0b 	ldhu	r3,-4(fp)
   142c8:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   142cc:	e0bffb17 	ldw	r2,-20(fp)
   142d0:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   142d4:	e0bff617 	ldw	r2,-40(fp)
   142d8:	00c00084 	movi	r3,2
   142dc:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   142e0:	e0bff617 	ldw	r2,-40(fp)
   142e4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   142e8:	e0bff617 	ldw	r2,-40(fp)
   142ec:	e0fffb17 	ldw	r3,-20(fp)
   142f0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   142f4:	e0bff617 	ldw	r2,-40(fp)
   142f8:	00c00fc4 	movi	r3,63
   142fc:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   14300:	e0bff617 	ldw	r2,-40(fp)
   14304:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   14308:	e13ff617 	ldw	r4,-40(fp)
   1430c:	00114f00 	call	114f0 <OS_EventWaitListInit>
   14310:	00000a06 	br	1433c <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   14314:	d0e82517 	ldw	r3,-24428(gp)
   14318:	e0bff617 	ldw	r2,-40(fp)
   1431c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   14320:	e0bff617 	ldw	r2,-40(fp)
   14324:	d0a82515 	stw	r2,-24428(gp)
   14328:	e0bff717 	ldw	r2,-36(fp)
   1432c:	e0bffc15 	stw	r2,-16(fp)
   14330:	e0bffc17 	ldw	r2,-16(fp)
   14334:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   14338:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   1433c:	e0bff617 	ldw	r2,-40(fp)
}
   14340:	e037883a 	mov	sp,fp
   14344:	dfc00117 	ldw	ra,4(sp)
   14348:	df000017 	ldw	fp,0(sp)
   1434c:	dec00204 	addi	sp,sp,8
   14350:	f800283a 	ret

00014354 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14354:	defff204 	addi	sp,sp,-56
   14358:	dfc00d15 	stw	ra,52(sp)
   1435c:	df000c15 	stw	fp,48(sp)
   14360:	df000c04 	addi	fp,sp,48
   14364:	e13ffd15 	stw	r4,-12(fp)
   14368:	2805883a 	mov	r2,r5
   1436c:	e1bfff15 	stw	r6,-4(fp)
   14370:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14374:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   14378:	e0bfff17 	ldw	r2,-4(fp)
   1437c:	1000021e 	bne	r2,zero,14388 <OSQDel+0x34>
        return (pevent);
   14380:	e0bffd17 	ldw	r2,-12(fp)
   14384:	00008e06 	br	145c0 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   14388:	e0bffd17 	ldw	r2,-12(fp)
   1438c:	1000051e 	bne	r2,zero,143a4 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14390:	e0bfff17 	ldw	r2,-4(fp)
   14394:	00c00104 	movi	r3,4
   14398:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1439c:	e0bffd17 	ldw	r2,-12(fp)
   143a0:	00008706 	br	145c0 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   143a4:	e0bffd17 	ldw	r2,-12(fp)
   143a8:	10800003 	ldbu	r2,0(r2)
   143ac:	10803fcc 	andi	r2,r2,255
   143b0:	108000a0 	cmpeqi	r2,r2,2
   143b4:	1000051e 	bne	r2,zero,143cc <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   143b8:	e0bfff17 	ldw	r2,-4(fp)
   143bc:	00c00044 	movi	r3,1
   143c0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   143c4:	e0bffd17 	ldw	r2,-12(fp)
   143c8:	00007d06 	br	145c0 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   143cc:	d0a82603 	ldbu	r2,-24424(gp)
   143d0:	10803fcc 	andi	r2,r2,255
   143d4:	10000526 	beq	r2,zero,143ec <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   143d8:	e0bfff17 	ldw	r2,-4(fp)
   143dc:	00c003c4 	movi	r3,15
   143e0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   143e4:	e0bffd17 	ldw	r2,-12(fp)
   143e8:	00007506 	br	145c0 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   143ec:	0005303a 	rdctl	r2,status
   143f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   143f4:	e0fffc17 	ldw	r3,-16(fp)
   143f8:	00bfff84 	movi	r2,-2
   143fc:	1884703a 	and	r2,r3,r2
   14400:	1001703a 	wrctl	status,r2
  
  return context;
   14404:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14408:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   1440c:	e0bffd17 	ldw	r2,-12(fp)
   14410:	10800283 	ldbu	r2,10(r2)
   14414:	10803fcc 	andi	r2,r2,255
   14418:	10000326 	beq	r2,zero,14428 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1441c:	00800044 	movi	r2,1
   14420:	e0bff405 	stb	r2,-48(fp)
   14424:	00000106 	br	1442c <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   14428:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1442c:	e0bffe03 	ldbu	r2,-8(fp)
   14430:	10000326 	beq	r2,zero,14440 <OSQDel+0xec>
   14434:	10800060 	cmpeqi	r2,r2,1
   14438:	1000301e 	bne	r2,zero,144fc <OSQDel+0x1a8>
   1443c:	00005506 	br	14594 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   14440:	e0bff403 	ldbu	r2,-48(fp)
   14444:	10001e1e 	bne	r2,zero,144c0 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   14448:	e0bffd17 	ldw	r2,-12(fp)
   1444c:	00c00fc4 	movi	r3,63
   14450:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   14454:	e0bffd17 	ldw	r2,-12(fp)
   14458:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   1445c:	e0bffd17 	ldw	r2,-12(fp)
   14460:	10800117 	ldw	r2,4(r2)
   14464:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   14468:	d0e82317 	ldw	r3,-24436(gp)
   1446c:	e0bff817 	ldw	r2,-32(fp)
   14470:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   14474:	e0bff817 	ldw	r2,-32(fp)
   14478:	d0a82315 	stw	r2,-24436(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1447c:	e0bffd17 	ldw	r2,-12(fp)
   14480:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   14484:	d0e82517 	ldw	r3,-24428(gp)
   14488:	e0bffd17 	ldw	r2,-12(fp)
   1448c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   14490:	e0bffd17 	ldw	r2,-12(fp)
   14494:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   14498:	e0bffd17 	ldw	r2,-12(fp)
   1449c:	d0a82515 	stw	r2,-24428(gp)
   144a0:	e0bff617 	ldw	r2,-40(fp)
   144a4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   144a8:	e0bff717 	ldw	r2,-36(fp)
   144ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   144b0:	e0bfff17 	ldw	r2,-4(fp)
   144b4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   144b8:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   144bc:	00003f06 	br	145bc <OSQDel+0x268>
   144c0:	e0bff617 	ldw	r2,-40(fp)
   144c4:	e0bff915 	stw	r2,-28(fp)
   144c8:	e0bff917 	ldw	r2,-28(fp)
   144cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   144d0:	e0bfff17 	ldw	r2,-4(fp)
   144d4:	00c01244 	movi	r3,73
   144d8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   144dc:	e0bffd17 	ldw	r2,-12(fp)
   144e0:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   144e4:	00003506 	br	145bc <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   144e8:	000f883a 	mov	r7,zero
   144ec:	01800104 	movi	r6,4
   144f0:	000b883a 	mov	r5,zero
   144f4:	e13ffd17 	ldw	r4,-12(fp)
   144f8:	0010f400 	call	10f40 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   144fc:	e0bffd17 	ldw	r2,-12(fp)
   14500:	10800283 	ldbu	r2,10(r2)
   14504:	10803fcc 	andi	r2,r2,255
   14508:	103ff71e 	bne	r2,zero,144e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70144e8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1450c:	e0bffd17 	ldw	r2,-12(fp)
   14510:	00c00fc4 	movi	r3,63
   14514:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   14518:	e0bffd17 	ldw	r2,-12(fp)
   1451c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   14520:	e0bffd17 	ldw	r2,-12(fp)
   14524:	10800117 	ldw	r2,4(r2)
   14528:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   1452c:	d0e82317 	ldw	r3,-24436(gp)
   14530:	e0bff817 	ldw	r2,-32(fp)
   14534:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   14538:	e0bff817 	ldw	r2,-32(fp)
   1453c:	d0a82315 	stw	r2,-24436(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   14540:	e0bffd17 	ldw	r2,-12(fp)
   14544:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   14548:	d0e82517 	ldw	r3,-24428(gp)
   1454c:	e0bffd17 	ldw	r2,-12(fp)
   14550:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   14554:	e0bffd17 	ldw	r2,-12(fp)
   14558:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1455c:	e0bffd17 	ldw	r2,-12(fp)
   14560:	d0a82515 	stw	r2,-24428(gp)
   14564:	e0bff617 	ldw	r2,-40(fp)
   14568:	e0bffa15 	stw	r2,-24(fp)
   1456c:	e0bffa17 	ldw	r2,-24(fp)
   14570:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   14574:	e0bff403 	ldbu	r2,-48(fp)
   14578:	10800058 	cmpnei	r2,r2,1
   1457c:	1000011e 	bne	r2,zero,14584 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   14580:	001198c0 	call	1198c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   14584:	e0bfff17 	ldw	r2,-4(fp)
   14588:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1458c:	e03ff515 	stw	zero,-44(fp)
             break;
   14590:	00000a06 	br	145bc <OSQDel+0x268>
   14594:	e0bff617 	ldw	r2,-40(fp)
   14598:	e0bffb15 	stw	r2,-20(fp)
   1459c:	e0bffb17 	ldw	r2,-20(fp)
   145a0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   145a4:	e0bfff17 	ldw	r2,-4(fp)
   145a8:	00c001c4 	movi	r3,7
   145ac:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   145b0:	e0bffd17 	ldw	r2,-12(fp)
   145b4:	e0bff515 	stw	r2,-44(fp)
             break;
   145b8:	0001883a 	nop
    }
    return (pevent_return);
   145bc:	e0bff517 	ldw	r2,-44(fp)
}
   145c0:	e037883a 	mov	sp,fp
   145c4:	dfc00117 	ldw	ra,4(sp)
   145c8:	df000017 	ldw	fp,0(sp)
   145cc:	dec00204 	addi	sp,sp,8
   145d0:	f800283a 	ret

000145d4 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   145d4:	defffa04 	addi	sp,sp,-24
   145d8:	df000515 	stw	fp,20(sp)
   145dc:	df000504 	addi	fp,sp,20
   145e0:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   145e4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   145e8:	e0bfff17 	ldw	r2,-4(fp)
   145ec:	1000021e 	bne	r2,zero,145f8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   145f0:	00800104 	movi	r2,4
   145f4:	00002106 	br	1467c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   145f8:	e0bfff17 	ldw	r2,-4(fp)
   145fc:	10800003 	ldbu	r2,0(r2)
   14600:	10803fcc 	andi	r2,r2,255
   14604:	108000a0 	cmpeqi	r2,r2,2
   14608:	1000021e 	bne	r2,zero,14614 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   1460c:	00800044 	movi	r2,1
   14610:	00001a06 	br	1467c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14614:	0005303a 	rdctl	r2,status
   14618:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1461c:	e0fffd17 	ldw	r3,-12(fp)
   14620:	00bfff84 	movi	r2,-2
   14624:	1884703a 	and	r2,r3,r2
   14628:	1001703a 	wrctl	status,r2
  
  return context;
   1462c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14630:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   14634:	e0bfff17 	ldw	r2,-4(fp)
   14638:	10800117 	ldw	r2,4(r2)
   1463c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   14640:	e0bffc17 	ldw	r2,-16(fp)
   14644:	10c00117 	ldw	r3,4(r2)
   14648:	e0bffc17 	ldw	r2,-16(fp)
   1464c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   14650:	e0bffc17 	ldw	r2,-16(fp)
   14654:	10c00117 	ldw	r3,4(r2)
   14658:	e0bffc17 	ldw	r2,-16(fp)
   1465c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   14660:	e0bffc17 	ldw	r2,-16(fp)
   14664:	1000058d 	sth	zero,22(r2)
   14668:	e0bffb17 	ldw	r2,-20(fp)
   1466c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14670:	e0bffe17 	ldw	r2,-8(fp)
   14674:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14678:	0005883a 	mov	r2,zero
}
   1467c:	e037883a 	mov	sp,fp
   14680:	df000017 	ldw	fp,0(sp)
   14684:	dec00104 	addi	sp,sp,4
   14688:	f800283a 	ret

0001468c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1468c:	defff304 	addi	sp,sp,-52
   14690:	dfc00c15 	stw	ra,48(sp)
   14694:	df000b15 	stw	fp,44(sp)
   14698:	df000b04 	addi	fp,sp,44
   1469c:	e13ffd15 	stw	r4,-12(fp)
   146a0:	2805883a 	mov	r2,r5
   146a4:	e1bfff15 	stw	r6,-4(fp)
   146a8:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   146ac:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   146b0:	e0bfff17 	ldw	r2,-4(fp)
   146b4:	1000021e 	bne	r2,zero,146c0 <OSQPend+0x34>
        return ((void *)0);
   146b8:	0005883a 	mov	r2,zero
   146bc:	00009106 	br	14904 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   146c0:	e0bffd17 	ldw	r2,-12(fp)
   146c4:	1000051e 	bne	r2,zero,146dc <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   146c8:	e0bfff17 	ldw	r2,-4(fp)
   146cc:	00c00104 	movi	r3,4
   146d0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   146d4:	0005883a 	mov	r2,zero
   146d8:	00008a06 	br	14904 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   146dc:	e0bffd17 	ldw	r2,-12(fp)
   146e0:	10800003 	ldbu	r2,0(r2)
   146e4:	10803fcc 	andi	r2,r2,255
   146e8:	108000a0 	cmpeqi	r2,r2,2
   146ec:	1000051e 	bne	r2,zero,14704 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   146f0:	e0bfff17 	ldw	r2,-4(fp)
   146f4:	00c00044 	movi	r3,1
   146f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   146fc:	0005883a 	mov	r2,zero
   14700:	00008006 	br	14904 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   14704:	d0a82603 	ldbu	r2,-24424(gp)
   14708:	10803fcc 	andi	r2,r2,255
   1470c:	10000526 	beq	r2,zero,14724 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   14710:	e0bfff17 	ldw	r2,-4(fp)
   14714:	00c00084 	movi	r3,2
   14718:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1471c:	0005883a 	mov	r2,zero
   14720:	00007806 	br	14904 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   14724:	d0a81803 	ldbu	r2,-24480(gp)
   14728:	10803fcc 	andi	r2,r2,255
   1472c:	10000526 	beq	r2,zero,14744 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   14730:	e0bfff17 	ldw	r2,-4(fp)
   14734:	00c00344 	movi	r3,13
   14738:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1473c:	0005883a 	mov	r2,zero
   14740:	00007006 	br	14904 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14744:	0005303a 	rdctl	r2,status
   14748:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1474c:	e0fffc17 	ldw	r3,-16(fp)
   14750:	00bfff84 	movi	r2,-2
   14754:	1884703a 	and	r2,r3,r2
   14758:	1001703a 	wrctl	status,r2
  
  return context;
   1475c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14760:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   14764:	e0bffd17 	ldw	r2,-12(fp)
   14768:	10800117 	ldw	r2,4(r2)
   1476c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   14770:	e0bff817 	ldw	r2,-32(fp)
   14774:	1080058b 	ldhu	r2,22(r2)
   14778:	10bfffcc 	andi	r2,r2,65535
   1477c:	10001e26 	beq	r2,zero,147f8 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   14780:	e0bff817 	ldw	r2,-32(fp)
   14784:	10800417 	ldw	r2,16(r2)
   14788:	11000104 	addi	r4,r2,4
   1478c:	e0fff817 	ldw	r3,-32(fp)
   14790:	19000415 	stw	r4,16(r3)
   14794:	10800017 	ldw	r2,0(r2)
   14798:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1479c:	e0bff817 	ldw	r2,-32(fp)
   147a0:	1080058b 	ldhu	r2,22(r2)
   147a4:	10bfffc4 	addi	r2,r2,-1
   147a8:	1007883a 	mov	r3,r2
   147ac:	e0bff817 	ldw	r2,-32(fp)
   147b0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   147b4:	e0bff817 	ldw	r2,-32(fp)
   147b8:	10c00417 	ldw	r3,16(r2)
   147bc:	e0bff817 	ldw	r2,-32(fp)
   147c0:	10800217 	ldw	r2,8(r2)
   147c4:	1880041e 	bne	r3,r2,147d8 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   147c8:	e0bff817 	ldw	r2,-32(fp)
   147cc:	10c00117 	ldw	r3,4(r2)
   147d0:	e0bff817 	ldw	r2,-32(fp)
   147d4:	10c00415 	stw	r3,16(r2)
   147d8:	e0bff617 	ldw	r2,-40(fp)
   147dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   147e0:	e0bff717 	ldw	r2,-36(fp)
   147e4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   147e8:	e0bfff17 	ldw	r2,-4(fp)
   147ec:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   147f0:	e0bff517 	ldw	r2,-44(fp)
   147f4:	00004306 	br	14904 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   147f8:	d0a82717 	ldw	r2,-24420(gp)
   147fc:	d0e82717 	ldw	r3,-24420(gp)
   14800:	18c00c03 	ldbu	r3,48(r3)
   14804:	18c00114 	ori	r3,r3,4
   14808:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1480c:	d0a82717 	ldw	r2,-24420(gp)
   14810:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   14814:	d0a82717 	ldw	r2,-24420(gp)
   14818:	e0fffe0b 	ldhu	r3,-8(fp)
   1481c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   14820:	e13ffd17 	ldw	r4,-12(fp)
   14824:	00110d80 	call	110d8 <OS_EventTaskWait>
   14828:	e0bff617 	ldw	r2,-40(fp)
   1482c:	e0bffb15 	stw	r2,-20(fp)
   14830:	e0bffb17 	ldw	r2,-20(fp)
   14834:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   14838:	001198c0 	call	1198c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1483c:	0005303a 	rdctl	r2,status
   14840:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14844:	e0fff917 	ldw	r3,-28(fp)
   14848:	00bfff84 	movi	r2,-2
   1484c:	1884703a 	and	r2,r3,r2
   14850:	1001703a 	wrctl	status,r2
  
  return context;
   14854:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   14858:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1485c:	d0a82717 	ldw	r2,-24420(gp)
   14860:	10800c43 	ldbu	r2,49(r2)
   14864:	10803fcc 	andi	r2,r2,255
   14868:	10000326 	beq	r2,zero,14878 <OSQPend+0x1ec>
   1486c:	108000a0 	cmpeqi	r2,r2,2
   14870:	1000071e 	bne	r2,zero,14890 <OSQPend+0x204>
   14874:	00000b06 	br	148a4 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   14878:	d0a82717 	ldw	r2,-24420(gp)
   1487c:	10800917 	ldw	r2,36(r2)
   14880:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   14884:	e0bfff17 	ldw	r2,-4(fp)
   14888:	10000005 	stb	zero,0(r2)
             break;
   1488c:	00000e06 	br	148c8 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   14890:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   14894:	e0bfff17 	ldw	r2,-4(fp)
   14898:	00c00384 	movi	r3,14
   1489c:	10c00005 	stb	r3,0(r2)
             break;
   148a0:	00000906 	br	148c8 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   148a4:	d0a82717 	ldw	r2,-24420(gp)
   148a8:	e17ffd17 	ldw	r5,-12(fp)
   148ac:	1009883a 	mov	r4,r2
   148b0:	00113380 	call	11338 <OS_EventTaskRemove>
             pmsg = (void *)0;
   148b4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   148b8:	e0bfff17 	ldw	r2,-4(fp)
   148bc:	00c00284 	movi	r3,10
   148c0:	10c00005 	stb	r3,0(r2)
             break;
   148c4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   148c8:	d0a82717 	ldw	r2,-24420(gp)
   148cc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   148d0:	d0a82717 	ldw	r2,-24420(gp)
   148d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   148d8:	d0a82717 	ldw	r2,-24420(gp)
   148dc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   148e0:	d0a82717 	ldw	r2,-24420(gp)
   148e4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   148e8:	d0a82717 	ldw	r2,-24420(gp)
   148ec:	10000915 	stw	zero,36(r2)
   148f0:	e0bff617 	ldw	r2,-40(fp)
   148f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   148f8:	e0bffa17 	ldw	r2,-24(fp)
   148fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   14900:	e0bff517 	ldw	r2,-44(fp)
}
   14904:	e037883a 	mov	sp,fp
   14908:	dfc00117 	ldw	ra,4(sp)
   1490c:	df000017 	ldw	fp,0(sp)
   14910:	dec00204 	addi	sp,sp,8
   14914:	f800283a 	ret

00014918 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14918:	defff604 	addi	sp,sp,-40
   1491c:	dfc00915 	stw	ra,36(sp)
   14920:	df000815 	stw	fp,32(sp)
   14924:	df000804 	addi	fp,sp,32
   14928:	e13ffd15 	stw	r4,-12(fp)
   1492c:	2805883a 	mov	r2,r5
   14930:	e1bfff15 	stw	r6,-4(fp)
   14934:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14938:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1493c:	e0bfff17 	ldw	r2,-4(fp)
   14940:	1000021e 	bne	r2,zero,1494c <OSQPendAbort+0x34>
        return (0);
   14944:	0005883a 	mov	r2,zero
   14948:	00004906 	br	14a70 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1494c:	e0bffd17 	ldw	r2,-12(fp)
   14950:	1000051e 	bne	r2,zero,14968 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14954:	e0bfff17 	ldw	r2,-4(fp)
   14958:	00c00104 	movi	r3,4
   1495c:	10c00005 	stb	r3,0(r2)
        return (0);
   14960:	0005883a 	mov	r2,zero
   14964:	00004206 	br	14a70 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   14968:	e0bffd17 	ldw	r2,-12(fp)
   1496c:	10800003 	ldbu	r2,0(r2)
   14970:	10803fcc 	andi	r2,r2,255
   14974:	108000a0 	cmpeqi	r2,r2,2
   14978:	1000051e 	bne	r2,zero,14990 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1497c:	e0bfff17 	ldw	r2,-4(fp)
   14980:	00c00044 	movi	r3,1
   14984:	10c00005 	stb	r3,0(r2)
        return (0);
   14988:	0005883a 	mov	r2,zero
   1498c:	00003806 	br	14a70 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14990:	0005303a 	rdctl	r2,status
   14994:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14998:	e0fffc17 	ldw	r3,-16(fp)
   1499c:	00bfff84 	movi	r2,-2
   149a0:	1884703a 	and	r2,r3,r2
   149a4:	1001703a 	wrctl	status,r2
  
  return context;
   149a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   149ac:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   149b0:	e0bffd17 	ldw	r2,-12(fp)
   149b4:	10800283 	ldbu	r2,10(r2)
   149b8:	10803fcc 	andi	r2,r2,255
   149bc:	10002526 	beq	r2,zero,14a54 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   149c0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   149c4:	e0bffe03 	ldbu	r2,-8(fp)
   149c8:	10800060 	cmpeqi	r2,r2,1
   149cc:	10000e26 	beq	r2,zero,14a08 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   149d0:	00000806 	br	149f4 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   149d4:	01c00084 	movi	r7,2
   149d8:	01800104 	movi	r6,4
   149dc:	000b883a 	mov	r5,zero
   149e0:	e13ffd17 	ldw	r4,-12(fp)
   149e4:	0010f400 	call	10f40 <OS_EventTaskRdy>
                     nbr_tasks++;
   149e8:	e0bff803 	ldbu	r2,-32(fp)
   149ec:	10800044 	addi	r2,r2,1
   149f0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   149f4:	e0bffd17 	ldw	r2,-12(fp)
   149f8:	10800283 	ldbu	r2,10(r2)
   149fc:	10803fcc 	andi	r2,r2,255
   14a00:	103ff41e 	bne	r2,zero,149d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70149d4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   14a04:	00000906 	br	14a2c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   14a08:	01c00084 	movi	r7,2
   14a0c:	01800104 	movi	r6,4
   14a10:	000b883a 	mov	r5,zero
   14a14:	e13ffd17 	ldw	r4,-12(fp)
   14a18:	0010f400 	call	10f40 <OS_EventTaskRdy>
                 nbr_tasks++;
   14a1c:	e0bff803 	ldbu	r2,-32(fp)
   14a20:	10800044 	addi	r2,r2,1
   14a24:	e0bff805 	stb	r2,-32(fp)
                 break;
   14a28:	0001883a 	nop
   14a2c:	e0bff917 	ldw	r2,-28(fp)
   14a30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a34:	e0bffa17 	ldw	r2,-24(fp)
   14a38:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   14a3c:	001198c0 	call	1198c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   14a40:	e0bfff17 	ldw	r2,-4(fp)
   14a44:	00c00384 	movi	r3,14
   14a48:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   14a4c:	e0bff803 	ldbu	r2,-32(fp)
   14a50:	00000706 	br	14a70 <OSQPendAbort+0x158>
   14a54:	e0bff917 	ldw	r2,-28(fp)
   14a58:	e0bffb15 	stw	r2,-20(fp)
   14a5c:	e0bffb17 	ldw	r2,-20(fp)
   14a60:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14a64:	e0bfff17 	ldw	r2,-4(fp)
   14a68:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   14a6c:	0005883a 	mov	r2,zero
}
   14a70:	e037883a 	mov	sp,fp
   14a74:	dfc00117 	ldw	ra,4(sp)
   14a78:	df000017 	ldw	fp,0(sp)
   14a7c:	dec00204 	addi	sp,sp,8
   14a80:	f800283a 	ret

00014a84 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   14a84:	defff604 	addi	sp,sp,-40
   14a88:	dfc00915 	stw	ra,36(sp)
   14a8c:	df000815 	stw	fp,32(sp)
   14a90:	df000804 	addi	fp,sp,32
   14a94:	e13ffe15 	stw	r4,-8(fp)
   14a98:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14a9c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   14aa0:	e0bffe17 	ldw	r2,-8(fp)
   14aa4:	1000021e 	bne	r2,zero,14ab0 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   14aa8:	00800104 	movi	r2,4
   14aac:	00004a06 	br	14bd8 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   14ab0:	e0bffe17 	ldw	r2,-8(fp)
   14ab4:	10800003 	ldbu	r2,0(r2)
   14ab8:	10803fcc 	andi	r2,r2,255
   14abc:	108000a0 	cmpeqi	r2,r2,2
   14ac0:	1000021e 	bne	r2,zero,14acc <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   14ac4:	00800044 	movi	r2,1
   14ac8:	00004306 	br	14bd8 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14acc:	0005303a 	rdctl	r2,status
   14ad0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ad4:	e0fffd17 	ldw	r3,-12(fp)
   14ad8:	00bfff84 	movi	r2,-2
   14adc:	1884703a 	and	r2,r3,r2
   14ae0:	1001703a 	wrctl	status,r2
  
  return context;
   14ae4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14ae8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   14aec:	e0bffe17 	ldw	r2,-8(fp)
   14af0:	10800283 	ldbu	r2,10(r2)
   14af4:	10803fcc 	andi	r2,r2,255
   14af8:	10000c26 	beq	r2,zero,14b2c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14afc:	000f883a 	mov	r7,zero
   14b00:	01800104 	movi	r6,4
   14b04:	e17fff17 	ldw	r5,-4(fp)
   14b08:	e13ffe17 	ldw	r4,-8(fp)
   14b0c:	0010f400 	call	10f40 <OS_EventTaskRdy>
   14b10:	e0bff817 	ldw	r2,-32(fp)
   14b14:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b18:	e0bff917 	ldw	r2,-28(fp)
   14b1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   14b20:	001198c0 	call	1198c <OS_Sched>
        return (OS_ERR_NONE);
   14b24:	0005883a 	mov	r2,zero
   14b28:	00002b06 	br	14bd8 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   14b2c:	e0bffe17 	ldw	r2,-8(fp)
   14b30:	10800117 	ldw	r2,4(r2)
   14b34:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   14b38:	e0bffb17 	ldw	r2,-20(fp)
   14b3c:	10c0058b 	ldhu	r3,22(r2)
   14b40:	e0bffb17 	ldw	r2,-20(fp)
   14b44:	1080050b 	ldhu	r2,20(r2)
   14b48:	18ffffcc 	andi	r3,r3,65535
   14b4c:	10bfffcc 	andi	r2,r2,65535
   14b50:	18800636 	bltu	r3,r2,14b6c <OSQPost+0xe8>
   14b54:	e0bff817 	ldw	r2,-32(fp)
   14b58:	e0bffa15 	stw	r2,-24(fp)
   14b5c:	e0bffa17 	ldw	r2,-24(fp)
   14b60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   14b64:	00800784 	movi	r2,30
   14b68:	00001b06 	br	14bd8 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   14b6c:	e0bffb17 	ldw	r2,-20(fp)
   14b70:	10800317 	ldw	r2,12(r2)
   14b74:	11000104 	addi	r4,r2,4
   14b78:	e0fffb17 	ldw	r3,-20(fp)
   14b7c:	19000315 	stw	r4,12(r3)
   14b80:	e0ffff17 	ldw	r3,-4(fp)
   14b84:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   14b88:	e0bffb17 	ldw	r2,-20(fp)
   14b8c:	1080058b 	ldhu	r2,22(r2)
   14b90:	10800044 	addi	r2,r2,1
   14b94:	1007883a 	mov	r3,r2
   14b98:	e0bffb17 	ldw	r2,-20(fp)
   14b9c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   14ba0:	e0bffb17 	ldw	r2,-20(fp)
   14ba4:	10c00317 	ldw	r3,12(r2)
   14ba8:	e0bffb17 	ldw	r2,-20(fp)
   14bac:	10800217 	ldw	r2,8(r2)
   14bb0:	1880041e 	bne	r3,r2,14bc4 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   14bb4:	e0bffb17 	ldw	r2,-20(fp)
   14bb8:	10c00117 	ldw	r3,4(r2)
   14bbc:	e0bffb17 	ldw	r2,-20(fp)
   14bc0:	10c00315 	stw	r3,12(r2)
   14bc4:	e0bff817 	ldw	r2,-32(fp)
   14bc8:	e0bffc15 	stw	r2,-16(fp)
   14bcc:	e0bffc17 	ldw	r2,-16(fp)
   14bd0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14bd4:	0005883a 	mov	r2,zero
}
   14bd8:	e037883a 	mov	sp,fp
   14bdc:	dfc00117 	ldw	ra,4(sp)
   14be0:	df000017 	ldw	fp,0(sp)
   14be4:	dec00204 	addi	sp,sp,8
   14be8:	f800283a 	ret

00014bec <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   14bec:	defff604 	addi	sp,sp,-40
   14bf0:	dfc00915 	stw	ra,36(sp)
   14bf4:	df000815 	stw	fp,32(sp)
   14bf8:	df000804 	addi	fp,sp,32
   14bfc:	e13ffe15 	stw	r4,-8(fp)
   14c00:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14c04:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14c08:	e0bffe17 	ldw	r2,-8(fp)
   14c0c:	1000021e 	bne	r2,zero,14c18 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   14c10:	00800104 	movi	r2,4
   14c14:	00004c06 	br	14d48 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   14c18:	e0bffe17 	ldw	r2,-8(fp)
   14c1c:	10800003 	ldbu	r2,0(r2)
   14c20:	10803fcc 	andi	r2,r2,255
   14c24:	108000a0 	cmpeqi	r2,r2,2
   14c28:	1000021e 	bne	r2,zero,14c34 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   14c2c:	00800044 	movi	r2,1
   14c30:	00004506 	br	14d48 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c34:	0005303a 	rdctl	r2,status
   14c38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c3c:	e0fffd17 	ldw	r3,-12(fp)
   14c40:	00bfff84 	movi	r2,-2
   14c44:	1884703a 	and	r2,r3,r2
   14c48:	1001703a 	wrctl	status,r2
  
  return context;
   14c4c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14c50:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   14c54:	e0bffe17 	ldw	r2,-8(fp)
   14c58:	10800283 	ldbu	r2,10(r2)
   14c5c:	10803fcc 	andi	r2,r2,255
   14c60:	10000c26 	beq	r2,zero,14c94 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14c64:	000f883a 	mov	r7,zero
   14c68:	01800104 	movi	r6,4
   14c6c:	e17fff17 	ldw	r5,-4(fp)
   14c70:	e13ffe17 	ldw	r4,-8(fp)
   14c74:	0010f400 	call	10f40 <OS_EventTaskRdy>
   14c78:	e0bff817 	ldw	r2,-32(fp)
   14c7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c80:	e0bff917 	ldw	r2,-28(fp)
   14c84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   14c88:	001198c0 	call	1198c <OS_Sched>
        return (OS_ERR_NONE);
   14c8c:	0005883a 	mov	r2,zero
   14c90:	00002d06 	br	14d48 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   14c94:	e0bffe17 	ldw	r2,-8(fp)
   14c98:	10800117 	ldw	r2,4(r2)
   14c9c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   14ca0:	e0bffb17 	ldw	r2,-20(fp)
   14ca4:	10c0058b 	ldhu	r3,22(r2)
   14ca8:	e0bffb17 	ldw	r2,-20(fp)
   14cac:	1080050b 	ldhu	r2,20(r2)
   14cb0:	18ffffcc 	andi	r3,r3,65535
   14cb4:	10bfffcc 	andi	r2,r2,65535
   14cb8:	18800636 	bltu	r3,r2,14cd4 <OSQPostFront+0xe8>
   14cbc:	e0bff817 	ldw	r2,-32(fp)
   14cc0:	e0bffa15 	stw	r2,-24(fp)
   14cc4:	e0bffa17 	ldw	r2,-24(fp)
   14cc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   14ccc:	00800784 	movi	r2,30
   14cd0:	00001d06 	br	14d48 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   14cd4:	e0bffb17 	ldw	r2,-20(fp)
   14cd8:	10c00417 	ldw	r3,16(r2)
   14cdc:	e0bffb17 	ldw	r2,-20(fp)
   14ce0:	10800117 	ldw	r2,4(r2)
   14ce4:	1880041e 	bne	r3,r2,14cf8 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   14ce8:	e0bffb17 	ldw	r2,-20(fp)
   14cec:	10c00217 	ldw	r3,8(r2)
   14cf0:	e0bffb17 	ldw	r2,-20(fp)
   14cf4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   14cf8:	e0bffb17 	ldw	r2,-20(fp)
   14cfc:	10800417 	ldw	r2,16(r2)
   14d00:	10ffff04 	addi	r3,r2,-4
   14d04:	e0bffb17 	ldw	r2,-20(fp)
   14d08:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   14d0c:	e0bffb17 	ldw	r2,-20(fp)
   14d10:	10800417 	ldw	r2,16(r2)
   14d14:	e0ffff17 	ldw	r3,-4(fp)
   14d18:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   14d1c:	e0bffb17 	ldw	r2,-20(fp)
   14d20:	1080058b 	ldhu	r2,22(r2)
   14d24:	10800044 	addi	r2,r2,1
   14d28:	1007883a 	mov	r3,r2
   14d2c:	e0bffb17 	ldw	r2,-20(fp)
   14d30:	10c0058d 	sth	r3,22(r2)
   14d34:	e0bff817 	ldw	r2,-32(fp)
   14d38:	e0bffc15 	stw	r2,-16(fp)
   14d3c:	e0bffc17 	ldw	r2,-16(fp)
   14d40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14d44:	0005883a 	mov	r2,zero
}
   14d48:	e037883a 	mov	sp,fp
   14d4c:	dfc00117 	ldw	ra,4(sp)
   14d50:	df000017 	ldw	fp,0(sp)
   14d54:	dec00204 	addi	sp,sp,8
   14d58:	f800283a 	ret

00014d5c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   14d5c:	defff504 	addi	sp,sp,-44
   14d60:	dfc00a15 	stw	ra,40(sp)
   14d64:	df000915 	stw	fp,36(sp)
   14d68:	df000904 	addi	fp,sp,36
   14d6c:	e13ffd15 	stw	r4,-12(fp)
   14d70:	e17ffe15 	stw	r5,-8(fp)
   14d74:	3005883a 	mov	r2,r6
   14d78:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14d7c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14d80:	e0bffd17 	ldw	r2,-12(fp)
   14d84:	1000021e 	bne	r2,zero,14d90 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   14d88:	00800104 	movi	r2,4
   14d8c:	00007106 	br	14f54 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   14d90:	e0bffd17 	ldw	r2,-12(fp)
   14d94:	10800003 	ldbu	r2,0(r2)
   14d98:	10803fcc 	andi	r2,r2,255
   14d9c:	108000a0 	cmpeqi	r2,r2,2
   14da0:	1000021e 	bne	r2,zero,14dac <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   14da4:	00800044 	movi	r2,1
   14da8:	00006a06 	br	14f54 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14dac:	0005303a 	rdctl	r2,status
   14db0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14db4:	e0fffc17 	ldw	r3,-16(fp)
   14db8:	00bfff84 	movi	r2,-2
   14dbc:	1884703a 	and	r2,r3,r2
   14dc0:	1001703a 	wrctl	status,r2
  
  return context;
   14dc4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14dc8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   14dcc:	e0bffd17 	ldw	r2,-12(fp)
   14dd0:	10800283 	ldbu	r2,10(r2)
   14dd4:	10803fcc 	andi	r2,r2,255
   14dd8:	10001d26 	beq	r2,zero,14e50 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   14ddc:	e0bfff03 	ldbu	r2,-4(fp)
   14de0:	1080004c 	andi	r2,r2,1
   14de4:	10000b26 	beq	r2,zero,14e14 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   14de8:	00000506 	br	14e00 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14dec:	000f883a 	mov	r7,zero
   14df0:	01800104 	movi	r6,4
   14df4:	e17ffe17 	ldw	r5,-8(fp)
   14df8:	e13ffd17 	ldw	r4,-12(fp)
   14dfc:	0010f400 	call	10f40 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   14e00:	e0bffd17 	ldw	r2,-12(fp)
   14e04:	10800283 	ldbu	r2,10(r2)
   14e08:	10803fcc 	andi	r2,r2,255
   14e0c:	103ff71e 	bne	r2,zero,14dec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014dec>
   14e10:	00000506 	br	14e28 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14e14:	000f883a 	mov	r7,zero
   14e18:	01800104 	movi	r6,4
   14e1c:	e17ffe17 	ldw	r5,-8(fp)
   14e20:	e13ffd17 	ldw	r4,-12(fp)
   14e24:	0010f400 	call	10f40 <OS_EventTaskRdy>
   14e28:	e0bff717 	ldw	r2,-36(fp)
   14e2c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e30:	e0bff817 	ldw	r2,-32(fp)
   14e34:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   14e38:	e0bfff03 	ldbu	r2,-4(fp)
   14e3c:	1080010c 	andi	r2,r2,4
   14e40:	1000011e 	bne	r2,zero,14e48 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   14e44:	001198c0 	call	1198c <OS_Sched>
        }
        return (OS_ERR_NONE);
   14e48:	0005883a 	mov	r2,zero
   14e4c:	00004106 	br	14f54 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   14e50:	e0bffd17 	ldw	r2,-12(fp)
   14e54:	10800117 	ldw	r2,4(r2)
   14e58:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   14e5c:	e0bffa17 	ldw	r2,-24(fp)
   14e60:	10c0058b 	ldhu	r3,22(r2)
   14e64:	e0bffa17 	ldw	r2,-24(fp)
   14e68:	1080050b 	ldhu	r2,20(r2)
   14e6c:	18ffffcc 	andi	r3,r3,65535
   14e70:	10bfffcc 	andi	r2,r2,65535
   14e74:	18800636 	bltu	r3,r2,14e90 <OSQPostOpt+0x134>
   14e78:	e0bff717 	ldw	r2,-36(fp)
   14e7c:	e0bff915 	stw	r2,-28(fp)
   14e80:	e0bff917 	ldw	r2,-28(fp)
   14e84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   14e88:	00800784 	movi	r2,30
   14e8c:	00003106 	br	14f54 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   14e90:	e0bfff03 	ldbu	r2,-4(fp)
   14e94:	1080008c 	andi	r2,r2,2
   14e98:	10001326 	beq	r2,zero,14ee8 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   14e9c:	e0bffa17 	ldw	r2,-24(fp)
   14ea0:	10c00417 	ldw	r3,16(r2)
   14ea4:	e0bffa17 	ldw	r2,-24(fp)
   14ea8:	10800117 	ldw	r2,4(r2)
   14eac:	1880041e 	bne	r3,r2,14ec0 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   14eb0:	e0bffa17 	ldw	r2,-24(fp)
   14eb4:	10c00217 	ldw	r3,8(r2)
   14eb8:	e0bffa17 	ldw	r2,-24(fp)
   14ebc:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   14ec0:	e0bffa17 	ldw	r2,-24(fp)
   14ec4:	10800417 	ldw	r2,16(r2)
   14ec8:	10ffff04 	addi	r3,r2,-4
   14ecc:	e0bffa17 	ldw	r2,-24(fp)
   14ed0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   14ed4:	e0bffa17 	ldw	r2,-24(fp)
   14ed8:	10800417 	ldw	r2,16(r2)
   14edc:	e0fffe17 	ldw	r3,-8(fp)
   14ee0:	10c00015 	stw	r3,0(r2)
   14ee4:	00001006 	br	14f28 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   14ee8:	e0bffa17 	ldw	r2,-24(fp)
   14eec:	10800317 	ldw	r2,12(r2)
   14ef0:	11000104 	addi	r4,r2,4
   14ef4:	e0fffa17 	ldw	r3,-24(fp)
   14ef8:	19000315 	stw	r4,12(r3)
   14efc:	e0fffe17 	ldw	r3,-8(fp)
   14f00:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   14f04:	e0bffa17 	ldw	r2,-24(fp)
   14f08:	10c00317 	ldw	r3,12(r2)
   14f0c:	e0bffa17 	ldw	r2,-24(fp)
   14f10:	10800217 	ldw	r2,8(r2)
   14f14:	1880041e 	bne	r3,r2,14f28 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   14f18:	e0bffa17 	ldw	r2,-24(fp)
   14f1c:	10c00117 	ldw	r3,4(r2)
   14f20:	e0bffa17 	ldw	r2,-24(fp)
   14f24:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   14f28:	e0bffa17 	ldw	r2,-24(fp)
   14f2c:	1080058b 	ldhu	r2,22(r2)
   14f30:	10800044 	addi	r2,r2,1
   14f34:	1007883a 	mov	r3,r2
   14f38:	e0bffa17 	ldw	r2,-24(fp)
   14f3c:	10c0058d 	sth	r3,22(r2)
   14f40:	e0bff717 	ldw	r2,-36(fp)
   14f44:	e0bffb15 	stw	r2,-20(fp)
   14f48:	e0bffb17 	ldw	r2,-20(fp)
   14f4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14f50:	0005883a 	mov	r2,zero
}
   14f54:	e037883a 	mov	sp,fp
   14f58:	dfc00117 	ldw	ra,4(sp)
   14f5c:	df000017 	ldw	fp,0(sp)
   14f60:	dec00204 	addi	sp,sp,8
   14f64:	f800283a 	ret

00014f68 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   14f68:	defff604 	addi	sp,sp,-40
   14f6c:	df000915 	stw	fp,36(sp)
   14f70:	df000904 	addi	fp,sp,36
   14f74:	e13ffe15 	stw	r4,-8(fp)
   14f78:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14f7c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   14f80:	e0bffe17 	ldw	r2,-8(fp)
   14f84:	1000021e 	bne	r2,zero,14f90 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   14f88:	00800104 	movi	r2,4
   14f8c:	00004906 	br	150b4 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   14f90:	e0bfff17 	ldw	r2,-4(fp)
   14f94:	1000021e 	bne	r2,zero,14fa0 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   14f98:	00800244 	movi	r2,9
   14f9c:	00004506 	br	150b4 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   14fa0:	e0bffe17 	ldw	r2,-8(fp)
   14fa4:	10800003 	ldbu	r2,0(r2)
   14fa8:	10803fcc 	andi	r2,r2,255
   14fac:	108000a0 	cmpeqi	r2,r2,2
   14fb0:	1000021e 	bne	r2,zero,14fbc <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   14fb4:	00800044 	movi	r2,1
   14fb8:	00003e06 	br	150b4 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14fbc:	0005303a 	rdctl	r2,status
   14fc0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14fc4:	e0fffd17 	ldw	r3,-12(fp)
   14fc8:	00bfff84 	movi	r2,-2
   14fcc:	1884703a 	and	r2,r3,r2
   14fd0:	1001703a 	wrctl	status,r2
  
  return context;
   14fd4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14fd8:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   14fdc:	e0bffe17 	ldw	r2,-8(fp)
   14fe0:	10c00283 	ldbu	r3,10(r2)
   14fe4:	e0bfff17 	ldw	r2,-4(fp)
   14fe8:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   14fec:	e0bffe17 	ldw	r2,-8(fp)
   14ff0:	108002c4 	addi	r2,r2,11
   14ff4:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   14ff8:	e0bfff17 	ldw	r2,-4(fp)
   14ffc:	10800204 	addi	r2,r2,8
   15000:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15004:	e03ff705 	stb	zero,-36(fp)
   15008:	00000b06 	br	15038 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   1500c:	e0bff917 	ldw	r2,-28(fp)
   15010:	10c00044 	addi	r3,r2,1
   15014:	e0fff915 	stw	r3,-28(fp)
   15018:	e0fff817 	ldw	r3,-32(fp)
   1501c:	19000044 	addi	r4,r3,1
   15020:	e13ff815 	stw	r4,-32(fp)
   15024:	18c00003 	ldbu	r3,0(r3)
   15028:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1502c:	e0bff703 	ldbu	r2,-36(fp)
   15030:	10800044 	addi	r2,r2,1
   15034:	e0bff705 	stb	r2,-36(fp)
   15038:	e0bff703 	ldbu	r2,-36(fp)
   1503c:	108000f0 	cmpltui	r2,r2,3
   15040:	103ff21e 	bne	r2,zero,1500c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701500c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   15044:	e0bffe17 	ldw	r2,-8(fp)
   15048:	10800117 	ldw	r2,4(r2)
   1504c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   15050:	e0bffc17 	ldw	r2,-16(fp)
   15054:	1080058b 	ldhu	r2,22(r2)
   15058:	10bfffcc 	andi	r2,r2,65535
   1505c:	10000626 	beq	r2,zero,15078 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   15060:	e0bffc17 	ldw	r2,-16(fp)
   15064:	10800417 	ldw	r2,16(r2)
   15068:	10c00017 	ldw	r3,0(r2)
   1506c:	e0bfff17 	ldw	r2,-4(fp)
   15070:	10c00015 	stw	r3,0(r2)
   15074:	00000206 	br	15080 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   15078:	e0bfff17 	ldw	r2,-4(fp)
   1507c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   15080:	e0bffc17 	ldw	r2,-16(fp)
   15084:	10c0058b 	ldhu	r3,22(r2)
   15088:	e0bfff17 	ldw	r2,-4(fp)
   1508c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   15090:	e0bffc17 	ldw	r2,-16(fp)
   15094:	10c0050b 	ldhu	r3,20(r2)
   15098:	e0bfff17 	ldw	r2,-4(fp)
   1509c:	10c0018d 	sth	r3,6(r2)
   150a0:	e0bffa17 	ldw	r2,-24(fp)
   150a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150a8:	e0bffb17 	ldw	r2,-20(fp)
   150ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   150b0:	0005883a 	mov	r2,zero
}
   150b4:	e037883a 	mov	sp,fp
   150b8:	df000017 	ldw	fp,0(sp)
   150bc:	dec00104 	addi	sp,sp,4
   150c0:	f800283a 	ret

000150c4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   150c4:	defffb04 	addi	sp,sp,-20
   150c8:	dfc00415 	stw	ra,16(sp)
   150cc:	df000315 	stw	fp,12(sp)
   150d0:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   150d4:	01407804 	movi	r5,480
   150d8:	010000b4 	movhi	r4,2
   150dc:	21053404 	addi	r4,r4,5328
   150e0:	00118d00 	call	118d0 <OS_MemClr>
    pq1 = &OSQTbl[0];
   150e4:	008000b4 	movhi	r2,2
   150e8:	10853404 	addi	r2,r2,5328
   150ec:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   150f0:	008000b4 	movhi	r2,2
   150f4:	10853a04 	addi	r2,r2,5352
   150f8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   150fc:	e03ffd0d 	sth	zero,-12(fp)
   15100:	00000c06 	br	15134 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   15104:	e0bffe17 	ldw	r2,-8(fp)
   15108:	e0ffff17 	ldw	r3,-4(fp)
   1510c:	10c00015 	stw	r3,0(r2)
        pq1++;
   15110:	e0bffe17 	ldw	r2,-8(fp)
   15114:	10800604 	addi	r2,r2,24
   15118:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   1511c:	e0bfff17 	ldw	r2,-4(fp)
   15120:	10800604 	addi	r2,r2,24
   15124:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   15128:	e0bffd0b 	ldhu	r2,-12(fp)
   1512c:	10800044 	addi	r2,r2,1
   15130:	e0bffd0d 	sth	r2,-12(fp)
   15134:	e0bffd0b 	ldhu	r2,-12(fp)
   15138:	108004f0 	cmpltui	r2,r2,19
   1513c:	103ff11e 	bne	r2,zero,15104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015104>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   15140:	e0bffe17 	ldw	r2,-8(fp)
   15144:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   15148:	008000b4 	movhi	r2,2
   1514c:	10853404 	addi	r2,r2,5328
   15150:	d0a82315 	stw	r2,-24436(gp)
#endif
}
   15154:	0001883a 	nop
   15158:	e037883a 	mov	sp,fp
   1515c:	dfc00117 	ldw	ra,4(sp)
   15160:	df000017 	ldw	fp,0(sp)
   15164:	dec00204 	addi	sp,sp,8
   15168:	f800283a 	ret

0001516c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   1516c:	defffa04 	addi	sp,sp,-24
   15170:	df000515 	stw	fp,20(sp)
   15174:	df000504 	addi	fp,sp,20
   15178:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1517c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15180:	e0bfff17 	ldw	r2,-4(fp)
   15184:	1000021e 	bne	r2,zero,15190 <OSSemAccept+0x24>
        return (0);
   15188:	0005883a 	mov	r2,zero
   1518c:	00001f06 	br	1520c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15190:	e0bfff17 	ldw	r2,-4(fp)
   15194:	10800003 	ldbu	r2,0(r2)
   15198:	10803fcc 	andi	r2,r2,255
   1519c:	108000e0 	cmpeqi	r2,r2,3
   151a0:	1000021e 	bne	r2,zero,151ac <OSSemAccept+0x40>
        return (0);
   151a4:	0005883a 	mov	r2,zero
   151a8:	00001806 	br	1520c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   151ac:	0005303a 	rdctl	r2,status
   151b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   151b4:	e0fffe17 	ldw	r3,-8(fp)
   151b8:	00bfff84 	movi	r2,-2
   151bc:	1884703a 	and	r2,r3,r2
   151c0:	1001703a 	wrctl	status,r2
  
  return context;
   151c4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   151c8:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   151cc:	e0bfff17 	ldw	r2,-4(fp)
   151d0:	1080020b 	ldhu	r2,8(r2)
   151d4:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   151d8:	e0bffd0b 	ldhu	r2,-12(fp)
   151dc:	10000626 	beq	r2,zero,151f8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   151e0:	e0bfff17 	ldw	r2,-4(fp)
   151e4:	1080020b 	ldhu	r2,8(r2)
   151e8:	10bfffc4 	addi	r2,r2,-1
   151ec:	1007883a 	mov	r3,r2
   151f0:	e0bfff17 	ldw	r2,-4(fp)
   151f4:	10c0020d 	sth	r3,8(r2)
   151f8:	e0bffb17 	ldw	r2,-20(fp)
   151fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15200:	e0bffc17 	ldw	r2,-16(fp)
   15204:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   15208:	e0bffd0b 	ldhu	r2,-12(fp)
}
   1520c:	e037883a 	mov	sp,fp
   15210:	df000017 	ldw	fp,0(sp)
   15214:	dec00104 	addi	sp,sp,4
   15218:	f800283a 	ret

0001521c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   1521c:	defff904 	addi	sp,sp,-28
   15220:	dfc00615 	stw	ra,24(sp)
   15224:	df000515 	stw	fp,20(sp)
   15228:	df000504 	addi	fp,sp,20
   1522c:	2005883a 	mov	r2,r4
   15230:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15234:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15238:	d0a82603 	ldbu	r2,-24424(gp)
   1523c:	10803fcc 	andi	r2,r2,255
   15240:	10000226 	beq	r2,zero,1524c <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   15244:	0005883a 	mov	r2,zero
   15248:	00002506 	br	152e0 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1524c:	0005303a 	rdctl	r2,status
   15250:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15254:	e0fffe17 	ldw	r3,-8(fp)
   15258:	00bfff84 	movi	r2,-2
   1525c:	1884703a 	and	r2,r3,r2
   15260:	1001703a 	wrctl	status,r2
  
  return context;
   15264:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   15268:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   1526c:	d0a82517 	ldw	r2,-24428(gp)
   15270:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   15274:	d0a82517 	ldw	r2,-24428(gp)
   15278:	10000326 	beq	r2,zero,15288 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1527c:	d0a82517 	ldw	r2,-24428(gp)
   15280:	10800117 	ldw	r2,4(r2)
   15284:	d0a82515 	stw	r2,-24428(gp)
   15288:	e0bffb17 	ldw	r2,-20(fp)
   1528c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15290:	e0bffc17 	ldw	r2,-16(fp)
   15294:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   15298:	e0bffd17 	ldw	r2,-12(fp)
   1529c:	10000f26 	beq	r2,zero,152dc <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   152a0:	e0bffd17 	ldw	r2,-12(fp)
   152a4:	00c000c4 	movi	r3,3
   152a8:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   152ac:	e0bffd17 	ldw	r2,-12(fp)
   152b0:	e0ffff0b 	ldhu	r3,-4(fp)
   152b4:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   152b8:	e0bffd17 	ldw	r2,-12(fp)
   152bc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   152c0:	e0bffd17 	ldw	r2,-12(fp)
   152c4:	00c00fc4 	movi	r3,63
   152c8:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   152cc:	e0bffd17 	ldw	r2,-12(fp)
   152d0:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   152d4:	e13ffd17 	ldw	r4,-12(fp)
   152d8:	00114f00 	call	114f0 <OS_EventWaitListInit>
    }
    return (pevent);
   152dc:	e0bffd17 	ldw	r2,-12(fp)
}
   152e0:	e037883a 	mov	sp,fp
   152e4:	dfc00117 	ldw	ra,4(sp)
   152e8:	df000017 	ldw	fp,0(sp)
   152ec:	dec00204 	addi	sp,sp,8
   152f0:	f800283a 	ret

000152f4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   152f4:	defff304 	addi	sp,sp,-52
   152f8:	dfc00c15 	stw	ra,48(sp)
   152fc:	df000b15 	stw	fp,44(sp)
   15300:	df000b04 	addi	fp,sp,44
   15304:	e13ffd15 	stw	r4,-12(fp)
   15308:	2805883a 	mov	r2,r5
   1530c:	e1bfff15 	stw	r6,-4(fp)
   15310:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15314:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15318:	e0bfff17 	ldw	r2,-4(fp)
   1531c:	1000021e 	bne	r2,zero,15328 <OSSemDel+0x34>
        return (pevent);
   15320:	e0bffd17 	ldw	r2,-12(fp)
   15324:	00007e06 	br	15520 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15328:	e0bffd17 	ldw	r2,-12(fp)
   1532c:	1000051e 	bne	r2,zero,15344 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15330:	e0bfff17 	ldw	r2,-4(fp)
   15334:	00c00104 	movi	r3,4
   15338:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1533c:	e0bffd17 	ldw	r2,-12(fp)
   15340:	00007706 	br	15520 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   15344:	e0bffd17 	ldw	r2,-12(fp)
   15348:	10800003 	ldbu	r2,0(r2)
   1534c:	10803fcc 	andi	r2,r2,255
   15350:	108000e0 	cmpeqi	r2,r2,3
   15354:	1000051e 	bne	r2,zero,1536c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15358:	e0bfff17 	ldw	r2,-4(fp)
   1535c:	00c00044 	movi	r3,1
   15360:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15364:	e0bffd17 	ldw	r2,-12(fp)
   15368:	00006d06 	br	15520 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1536c:	d0a82603 	ldbu	r2,-24424(gp)
   15370:	10803fcc 	andi	r2,r2,255
   15374:	10000526 	beq	r2,zero,1538c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   15378:	e0bfff17 	ldw	r2,-4(fp)
   1537c:	00c003c4 	movi	r3,15
   15380:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15384:	e0bffd17 	ldw	r2,-12(fp)
   15388:	00006506 	br	15520 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1538c:	0005303a 	rdctl	r2,status
   15390:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15394:	e0fffc17 	ldw	r3,-16(fp)
   15398:	00bfff84 	movi	r2,-2
   1539c:	1884703a 	and	r2,r3,r2
   153a0:	1001703a 	wrctl	status,r2
  
  return context;
   153a4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   153a8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   153ac:	e0bffd17 	ldw	r2,-12(fp)
   153b0:	10800283 	ldbu	r2,10(r2)
   153b4:	10803fcc 	andi	r2,r2,255
   153b8:	10000326 	beq	r2,zero,153c8 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   153bc:	00800044 	movi	r2,1
   153c0:	e0bff505 	stb	r2,-44(fp)
   153c4:	00000106 	br	153cc <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   153c8:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   153cc:	e0bffe03 	ldbu	r2,-8(fp)
   153d0:	10000326 	beq	r2,zero,153e0 <OSSemDel+0xec>
   153d4:	10800060 	cmpeqi	r2,r2,1
   153d8:	1000281e 	bne	r2,zero,1547c <OSSemDel+0x188>
   153dc:	00004506 	br	154f4 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   153e0:	e0bff503 	ldbu	r2,-44(fp)
   153e4:	1000161e 	bne	r2,zero,15440 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   153e8:	e0bffd17 	ldw	r2,-12(fp)
   153ec:	00c00fc4 	movi	r3,63
   153f0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   153f4:	e0bffd17 	ldw	r2,-12(fp)
   153f8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   153fc:	e0bffd17 	ldw	r2,-12(fp)
   15400:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   15404:	d0e82517 	ldw	r3,-24428(gp)
   15408:	e0bffd17 	ldw	r2,-12(fp)
   1540c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   15410:	e0bffd17 	ldw	r2,-12(fp)
   15414:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   15418:	e0bffd17 	ldw	r2,-12(fp)
   1541c:	d0a82515 	stw	r2,-24428(gp)
   15420:	e0bff717 	ldw	r2,-36(fp)
   15424:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15428:	e0bff817 	ldw	r2,-32(fp)
   1542c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   15430:	e0bfff17 	ldw	r2,-4(fp)
   15434:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   15438:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1543c:	00003706 	br	1551c <OSSemDel+0x228>
   15440:	e0bff717 	ldw	r2,-36(fp)
   15444:	e0bff915 	stw	r2,-28(fp)
   15448:	e0bff917 	ldw	r2,-28(fp)
   1544c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   15450:	e0bfff17 	ldw	r2,-4(fp)
   15454:	00c01244 	movi	r3,73
   15458:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1545c:	e0bffd17 	ldw	r2,-12(fp)
   15460:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   15464:	00002d06 	br	1551c <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   15468:	000f883a 	mov	r7,zero
   1546c:	01800044 	movi	r6,1
   15470:	000b883a 	mov	r5,zero
   15474:	e13ffd17 	ldw	r4,-12(fp)
   15478:	0010f400 	call	10f40 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   1547c:	e0bffd17 	ldw	r2,-12(fp)
   15480:	10800283 	ldbu	r2,10(r2)
   15484:	10803fcc 	andi	r2,r2,255
   15488:	103ff71e 	bne	r2,zero,15468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015468>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1548c:	e0bffd17 	ldw	r2,-12(fp)
   15490:	00c00fc4 	movi	r3,63
   15494:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   15498:	e0bffd17 	ldw	r2,-12(fp)
   1549c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   154a0:	e0bffd17 	ldw	r2,-12(fp)
   154a4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   154a8:	d0e82517 	ldw	r3,-24428(gp)
   154ac:	e0bffd17 	ldw	r2,-12(fp)
   154b0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   154b4:	e0bffd17 	ldw	r2,-12(fp)
   154b8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   154bc:	e0bffd17 	ldw	r2,-12(fp)
   154c0:	d0a82515 	stw	r2,-24428(gp)
   154c4:	e0bff717 	ldw	r2,-36(fp)
   154c8:	e0bffa15 	stw	r2,-24(fp)
   154cc:	e0bffa17 	ldw	r2,-24(fp)
   154d0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   154d4:	e0bff503 	ldbu	r2,-44(fp)
   154d8:	10800058 	cmpnei	r2,r2,1
   154dc:	1000011e 	bne	r2,zero,154e4 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   154e0:	001198c0 	call	1198c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   154e4:	e0bfff17 	ldw	r2,-4(fp)
   154e8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   154ec:	e03ff615 	stw	zero,-40(fp)
             break;
   154f0:	00000a06 	br	1551c <OSSemDel+0x228>
   154f4:	e0bff717 	ldw	r2,-36(fp)
   154f8:	e0bffb15 	stw	r2,-20(fp)
   154fc:	e0bffb17 	ldw	r2,-20(fp)
   15500:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   15504:	e0bfff17 	ldw	r2,-4(fp)
   15508:	00c001c4 	movi	r3,7
   1550c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   15510:	e0bffd17 	ldw	r2,-12(fp)
   15514:	e0bff615 	stw	r2,-40(fp)
             break;
   15518:	0001883a 	nop
    }
    return (pevent_return);
   1551c:	e0bff617 	ldw	r2,-40(fp)
}
   15520:	e037883a 	mov	sp,fp
   15524:	dfc00117 	ldw	ra,4(sp)
   15528:	df000017 	ldw	fp,0(sp)
   1552c:	dec00204 	addi	sp,sp,8
   15530:	f800283a 	ret

00015534 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   15534:	defff504 	addi	sp,sp,-44
   15538:	dfc00a15 	stw	ra,40(sp)
   1553c:	df000915 	stw	fp,36(sp)
   15540:	df000904 	addi	fp,sp,36
   15544:	e13ffd15 	stw	r4,-12(fp)
   15548:	2805883a 	mov	r2,r5
   1554c:	e1bfff15 	stw	r6,-4(fp)
   15550:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15554:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   15558:	e0bfff17 	ldw	r2,-4(fp)
   1555c:	10007226 	beq	r2,zero,15728 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15560:	e0bffd17 	ldw	r2,-12(fp)
   15564:	1000041e 	bne	r2,zero,15578 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   15568:	e0bfff17 	ldw	r2,-4(fp)
   1556c:	00c00104 	movi	r3,4
   15570:	10c00005 	stb	r3,0(r2)
        return;
   15574:	00006d06 	br	1572c <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15578:	e0bffd17 	ldw	r2,-12(fp)
   1557c:	10800003 	ldbu	r2,0(r2)
   15580:	10803fcc 	andi	r2,r2,255
   15584:	108000e0 	cmpeqi	r2,r2,3
   15588:	1000041e 	bne	r2,zero,1559c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   1558c:	e0bfff17 	ldw	r2,-4(fp)
   15590:	00c00044 	movi	r3,1
   15594:	10c00005 	stb	r3,0(r2)
        return;
   15598:	00006406 	br	1572c <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1559c:	d0a82603 	ldbu	r2,-24424(gp)
   155a0:	10803fcc 	andi	r2,r2,255
   155a4:	10000426 	beq	r2,zero,155b8 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   155a8:	e0bfff17 	ldw	r2,-4(fp)
   155ac:	00c00084 	movi	r3,2
   155b0:	10c00005 	stb	r3,0(r2)
        return;
   155b4:	00005d06 	br	1572c <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   155b8:	d0a81803 	ldbu	r2,-24480(gp)
   155bc:	10803fcc 	andi	r2,r2,255
   155c0:	10000426 	beq	r2,zero,155d4 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   155c4:	e0bfff17 	ldw	r2,-4(fp)
   155c8:	00c00344 	movi	r3,13
   155cc:	10c00005 	stb	r3,0(r2)
        return;
   155d0:	00005606 	br	1572c <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   155d4:	0005303a 	rdctl	r2,status
   155d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   155dc:	e0fffc17 	ldw	r3,-16(fp)
   155e0:	00bfff84 	movi	r2,-2
   155e4:	1884703a 	and	r2,r3,r2
   155e8:	1001703a 	wrctl	status,r2
  
  return context;
   155ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   155f0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   155f4:	e0bffd17 	ldw	r2,-12(fp)
   155f8:	1080020b 	ldhu	r2,8(r2)
   155fc:	10bfffcc 	andi	r2,r2,65535
   15600:	10000d26 	beq	r2,zero,15638 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   15604:	e0bffd17 	ldw	r2,-12(fp)
   15608:	1080020b 	ldhu	r2,8(r2)
   1560c:	10bfffc4 	addi	r2,r2,-1
   15610:	1007883a 	mov	r3,r2
   15614:	e0bffd17 	ldw	r2,-12(fp)
   15618:	10c0020d 	sth	r3,8(r2)
   1561c:	e0bff717 	ldw	r2,-36(fp)
   15620:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15624:	e0bff817 	ldw	r2,-32(fp)
   15628:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1562c:	e0bfff17 	ldw	r2,-4(fp)
   15630:	10000005 	stb	zero,0(r2)
        return;
   15634:	00003d06 	br	1572c <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   15638:	d0a82717 	ldw	r2,-24420(gp)
   1563c:	d0e82717 	ldw	r3,-24420(gp)
   15640:	18c00c03 	ldbu	r3,48(r3)
   15644:	18c00054 	ori	r3,r3,1
   15648:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1564c:	d0a82717 	ldw	r2,-24420(gp)
   15650:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   15654:	d0a82717 	ldw	r2,-24420(gp)
   15658:	e0fffe0b 	ldhu	r3,-8(fp)
   1565c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   15660:	e13ffd17 	ldw	r4,-12(fp)
   15664:	00110d80 	call	110d8 <OS_EventTaskWait>
   15668:	e0bff717 	ldw	r2,-36(fp)
   1566c:	e0bffb15 	stw	r2,-20(fp)
   15670:	e0bffb17 	ldw	r2,-20(fp)
   15674:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   15678:	001198c0 	call	1198c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1567c:	0005303a 	rdctl	r2,status
   15680:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15684:	e0fff917 	ldw	r3,-28(fp)
   15688:	00bfff84 	movi	r2,-2
   1568c:	1884703a 	and	r2,r3,r2
   15690:	1001703a 	wrctl	status,r2
  
  return context;
   15694:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   15698:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1569c:	d0a82717 	ldw	r2,-24420(gp)
   156a0:	10800c43 	ldbu	r2,49(r2)
   156a4:	10803fcc 	andi	r2,r2,255
   156a8:	10000326 	beq	r2,zero,156b8 <OSSemPend+0x184>
   156ac:	108000a0 	cmpeqi	r2,r2,2
   156b0:	1000041e 	bne	r2,zero,156c4 <OSSemPend+0x190>
   156b4:	00000706 	br	156d4 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   156b8:	e0bfff17 	ldw	r2,-4(fp)
   156bc:	10000005 	stb	zero,0(r2)
             break;
   156c0:	00000c06 	br	156f4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   156c4:	e0bfff17 	ldw	r2,-4(fp)
   156c8:	00c00384 	movi	r3,14
   156cc:	10c00005 	stb	r3,0(r2)
             break;
   156d0:	00000806 	br	156f4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   156d4:	d0a82717 	ldw	r2,-24420(gp)
   156d8:	e17ffd17 	ldw	r5,-12(fp)
   156dc:	1009883a 	mov	r4,r2
   156e0:	00113380 	call	11338 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   156e4:	e0bfff17 	ldw	r2,-4(fp)
   156e8:	00c00284 	movi	r3,10
   156ec:	10c00005 	stb	r3,0(r2)
             break;
   156f0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   156f4:	d0a82717 	ldw	r2,-24420(gp)
   156f8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   156fc:	d0a82717 	ldw	r2,-24420(gp)
   15700:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   15704:	d0a82717 	ldw	r2,-24420(gp)
   15708:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1570c:	d0a82717 	ldw	r2,-24420(gp)
   15710:	10000815 	stw	zero,32(r2)
   15714:	e0bff717 	ldw	r2,-36(fp)
   15718:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1571c:	e0bffa17 	ldw	r2,-24(fp)
   15720:	1001703a 	wrctl	status,r2
   15724:	00000106 	br	1572c <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   15728:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   1572c:	e037883a 	mov	sp,fp
   15730:	dfc00117 	ldw	ra,4(sp)
   15734:	df000017 	ldw	fp,0(sp)
   15738:	dec00204 	addi	sp,sp,8
   1573c:	f800283a 	ret

00015740 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   15740:	defff604 	addi	sp,sp,-40
   15744:	dfc00915 	stw	ra,36(sp)
   15748:	df000815 	stw	fp,32(sp)
   1574c:	df000804 	addi	fp,sp,32
   15750:	e13ffd15 	stw	r4,-12(fp)
   15754:	2805883a 	mov	r2,r5
   15758:	e1bfff15 	stw	r6,-4(fp)
   1575c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15760:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   15764:	e0bfff17 	ldw	r2,-4(fp)
   15768:	1000021e 	bne	r2,zero,15774 <OSSemPendAbort+0x34>
        return (0);
   1576c:	0005883a 	mov	r2,zero
   15770:	00004906 	br	15898 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15774:	e0bffd17 	ldw	r2,-12(fp)
   15778:	1000051e 	bne	r2,zero,15790 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1577c:	e0bfff17 	ldw	r2,-4(fp)
   15780:	00c00104 	movi	r3,4
   15784:	10c00005 	stb	r3,0(r2)
        return (0);
   15788:	0005883a 	mov	r2,zero
   1578c:	00004206 	br	15898 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15790:	e0bffd17 	ldw	r2,-12(fp)
   15794:	10800003 	ldbu	r2,0(r2)
   15798:	10803fcc 	andi	r2,r2,255
   1579c:	108000e0 	cmpeqi	r2,r2,3
   157a0:	1000051e 	bne	r2,zero,157b8 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   157a4:	e0bfff17 	ldw	r2,-4(fp)
   157a8:	00c00044 	movi	r3,1
   157ac:	10c00005 	stb	r3,0(r2)
        return (0);
   157b0:	0005883a 	mov	r2,zero
   157b4:	00003806 	br	15898 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157b8:	0005303a 	rdctl	r2,status
   157bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157c0:	e0fffc17 	ldw	r3,-16(fp)
   157c4:	00bfff84 	movi	r2,-2
   157c8:	1884703a 	and	r2,r3,r2
   157cc:	1001703a 	wrctl	status,r2
  
  return context;
   157d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   157d4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   157d8:	e0bffd17 	ldw	r2,-12(fp)
   157dc:	10800283 	ldbu	r2,10(r2)
   157e0:	10803fcc 	andi	r2,r2,255
   157e4:	10002526 	beq	r2,zero,1587c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   157e8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   157ec:	e0bffe03 	ldbu	r2,-8(fp)
   157f0:	10800060 	cmpeqi	r2,r2,1
   157f4:	10000e26 	beq	r2,zero,15830 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   157f8:	00000806 	br	1581c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   157fc:	01c00084 	movi	r7,2
   15800:	01800044 	movi	r6,1
   15804:	000b883a 	mov	r5,zero
   15808:	e13ffd17 	ldw	r4,-12(fp)
   1580c:	0010f400 	call	10f40 <OS_EventTaskRdy>
                     nbr_tasks++;
   15810:	e0bff803 	ldbu	r2,-32(fp)
   15814:	10800044 	addi	r2,r2,1
   15818:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1581c:	e0bffd17 	ldw	r2,-12(fp)
   15820:	10800283 	ldbu	r2,10(r2)
   15824:	10803fcc 	andi	r2,r2,255
   15828:	103ff41e 	bne	r2,zero,157fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70157fc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1582c:	00000906 	br	15854 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   15830:	01c00084 	movi	r7,2
   15834:	01800044 	movi	r6,1
   15838:	000b883a 	mov	r5,zero
   1583c:	e13ffd17 	ldw	r4,-12(fp)
   15840:	0010f400 	call	10f40 <OS_EventTaskRdy>
                 nbr_tasks++;
   15844:	e0bff803 	ldbu	r2,-32(fp)
   15848:	10800044 	addi	r2,r2,1
   1584c:	e0bff805 	stb	r2,-32(fp)
                 break;
   15850:	0001883a 	nop
   15854:	e0bff917 	ldw	r2,-28(fp)
   15858:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1585c:	e0bffa17 	ldw	r2,-24(fp)
   15860:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   15864:	001198c0 	call	1198c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   15868:	e0bfff17 	ldw	r2,-4(fp)
   1586c:	00c00384 	movi	r3,14
   15870:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   15874:	e0bff803 	ldbu	r2,-32(fp)
   15878:	00000706 	br	15898 <OSSemPendAbort+0x158>
   1587c:	e0bff917 	ldw	r2,-28(fp)
   15880:	e0bffb15 	stw	r2,-20(fp)
   15884:	e0bffb17 	ldw	r2,-20(fp)
   15888:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1588c:	e0bfff17 	ldw	r2,-4(fp)
   15890:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   15894:	0005883a 	mov	r2,zero
}
   15898:	e037883a 	mov	sp,fp
   1589c:	dfc00117 	ldw	ra,4(sp)
   158a0:	df000017 	ldw	fp,0(sp)
   158a4:	dec00204 	addi	sp,sp,8
   158a8:	f800283a 	ret

000158ac <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   158ac:	defff804 	addi	sp,sp,-32
   158b0:	dfc00715 	stw	ra,28(sp)
   158b4:	df000615 	stw	fp,24(sp)
   158b8:	df000604 	addi	fp,sp,24
   158bc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   158c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   158c4:	e0bfff17 	ldw	r2,-4(fp)
   158c8:	1000021e 	bne	r2,zero,158d4 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   158cc:	00800104 	movi	r2,4
   158d0:	00003506 	br	159a8 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   158d4:	e0bfff17 	ldw	r2,-4(fp)
   158d8:	10800003 	ldbu	r2,0(r2)
   158dc:	10803fcc 	andi	r2,r2,255
   158e0:	108000e0 	cmpeqi	r2,r2,3
   158e4:	1000021e 	bne	r2,zero,158f0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   158e8:	00800044 	movi	r2,1
   158ec:	00002e06 	br	159a8 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   158f0:	0005303a 	rdctl	r2,status
   158f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158f8:	e0fffe17 	ldw	r3,-8(fp)
   158fc:	00bfff84 	movi	r2,-2
   15900:	1884703a 	and	r2,r3,r2
   15904:	1001703a 	wrctl	status,r2
  
  return context;
   15908:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1590c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   15910:	e0bfff17 	ldw	r2,-4(fp)
   15914:	10800283 	ldbu	r2,10(r2)
   15918:	10803fcc 	andi	r2,r2,255
   1591c:	10000c26 	beq	r2,zero,15950 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   15920:	000f883a 	mov	r7,zero
   15924:	01800044 	movi	r6,1
   15928:	000b883a 	mov	r5,zero
   1592c:	e13fff17 	ldw	r4,-4(fp)
   15930:	0010f400 	call	10f40 <OS_EventTaskRdy>
   15934:	e0bffa17 	ldw	r2,-24(fp)
   15938:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1593c:	e0bffb17 	ldw	r2,-20(fp)
   15940:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   15944:	001198c0 	call	1198c <OS_Sched>
        return (OS_ERR_NONE);
   15948:	0005883a 	mov	r2,zero
   1594c:	00001606 	br	159a8 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   15950:	e0bfff17 	ldw	r2,-4(fp)
   15954:	1080020b 	ldhu	r2,8(r2)
   15958:	10ffffcc 	andi	r3,r2,65535
   1595c:	00bfffd4 	movui	r2,65535
   15960:	18800c26 	beq	r3,r2,15994 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   15964:	e0bfff17 	ldw	r2,-4(fp)
   15968:	1080020b 	ldhu	r2,8(r2)
   1596c:	10800044 	addi	r2,r2,1
   15970:	1007883a 	mov	r3,r2
   15974:	e0bfff17 	ldw	r2,-4(fp)
   15978:	10c0020d 	sth	r3,8(r2)
   1597c:	e0bffa17 	ldw	r2,-24(fp)
   15980:	e0bffc15 	stw	r2,-16(fp)
   15984:	e0bffc17 	ldw	r2,-16(fp)
   15988:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1598c:	0005883a 	mov	r2,zero
   15990:	00000506 	br	159a8 <OSSemPost+0xfc>
   15994:	e0bffa17 	ldw	r2,-24(fp)
   15998:	e0bffd15 	stw	r2,-12(fp)
   1599c:	e0bffd17 	ldw	r2,-12(fp)
   159a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   159a4:	00800c84 	movi	r2,50
}
   159a8:	e037883a 	mov	sp,fp
   159ac:	dfc00117 	ldw	ra,4(sp)
   159b0:	df000017 	ldw	fp,0(sp)
   159b4:	dec00204 	addi	sp,sp,8
   159b8:	f800283a 	ret

000159bc <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   159bc:	defff704 	addi	sp,sp,-36
   159c0:	df000815 	stw	fp,32(sp)
   159c4:	df000804 	addi	fp,sp,32
   159c8:	e13ffe15 	stw	r4,-8(fp)
   159cc:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   159d0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   159d4:	e0bffe17 	ldw	r2,-8(fp)
   159d8:	1000021e 	bne	r2,zero,159e4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   159dc:	00800104 	movi	r2,4
   159e0:	00003606 	br	15abc <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   159e4:	e0bfff17 	ldw	r2,-4(fp)
   159e8:	1000021e 	bne	r2,zero,159f4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   159ec:	00800244 	movi	r2,9
   159f0:	00003206 	br	15abc <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   159f4:	e0bffe17 	ldw	r2,-8(fp)
   159f8:	10800003 	ldbu	r2,0(r2)
   159fc:	10803fcc 	andi	r2,r2,255
   15a00:	108000e0 	cmpeqi	r2,r2,3
   15a04:	1000021e 	bne	r2,zero,15a10 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   15a08:	00800044 	movi	r2,1
   15a0c:	00002b06 	br	15abc <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a10:	0005303a 	rdctl	r2,status
   15a14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a18:	e0fffd17 	ldw	r3,-12(fp)
   15a1c:	00bfff84 	movi	r2,-2
   15a20:	1884703a 	and	r2,r3,r2
   15a24:	1001703a 	wrctl	status,r2
  
  return context;
   15a28:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15a2c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   15a30:	e0bffe17 	ldw	r2,-8(fp)
   15a34:	10c00283 	ldbu	r3,10(r2)
   15a38:	e0bfff17 	ldw	r2,-4(fp)
   15a3c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   15a40:	e0bffe17 	ldw	r2,-8(fp)
   15a44:	108002c4 	addi	r2,r2,11
   15a48:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   15a4c:	e0bfff17 	ldw	r2,-4(fp)
   15a50:	10800084 	addi	r2,r2,2
   15a54:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15a58:	e03ffa05 	stb	zero,-24(fp)
   15a5c:	00000b06 	br	15a8c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   15a60:	e0bff917 	ldw	r2,-28(fp)
   15a64:	10c00044 	addi	r3,r2,1
   15a68:	e0fff915 	stw	r3,-28(fp)
   15a6c:	e0fff817 	ldw	r3,-32(fp)
   15a70:	19000044 	addi	r4,r3,1
   15a74:	e13ff815 	stw	r4,-32(fp)
   15a78:	18c00003 	ldbu	r3,0(r3)
   15a7c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15a80:	e0bffa03 	ldbu	r2,-24(fp)
   15a84:	10800044 	addi	r2,r2,1
   15a88:	e0bffa05 	stb	r2,-24(fp)
   15a8c:	e0bffa03 	ldbu	r2,-24(fp)
   15a90:	108000f0 	cmpltui	r2,r2,3
   15a94:	103ff21e 	bne	r2,zero,15a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015a60>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   15a98:	e0bffe17 	ldw	r2,-8(fp)
   15a9c:	10c0020b 	ldhu	r3,8(r2)
   15aa0:	e0bfff17 	ldw	r2,-4(fp)
   15aa4:	10c0000d 	sth	r3,0(r2)
   15aa8:	e0bffb17 	ldw	r2,-20(fp)
   15aac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15ab0:	e0bffc17 	ldw	r2,-16(fp)
   15ab4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15ab8:	0005883a 	mov	r2,zero
}
   15abc:	e037883a 	mov	sp,fp
   15ac0:	df000017 	ldw	fp,0(sp)
   15ac4:	dec00104 	addi	sp,sp,4
   15ac8:	f800283a 	ret

00015acc <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   15acc:	defff904 	addi	sp,sp,-28
   15ad0:	df000615 	stw	fp,24(sp)
   15ad4:	df000604 	addi	fp,sp,24
   15ad8:	e13ffd15 	stw	r4,-12(fp)
   15adc:	2805883a 	mov	r2,r5
   15ae0:	e1bfff15 	stw	r6,-4(fp)
   15ae4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15ae8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   15aec:	e0bfff17 	ldw	r2,-4(fp)
   15af0:	10003126 	beq	r2,zero,15bb8 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15af4:	e0bffd17 	ldw	r2,-12(fp)
   15af8:	1000041e 	bne	r2,zero,15b0c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   15afc:	e0bfff17 	ldw	r2,-4(fp)
   15b00:	00c00104 	movi	r3,4
   15b04:	10c00005 	stb	r3,0(r2)
        return;
   15b08:	00002c06 	br	15bbc <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15b0c:	e0bffd17 	ldw	r2,-12(fp)
   15b10:	10800003 	ldbu	r2,0(r2)
   15b14:	10803fcc 	andi	r2,r2,255
   15b18:	108000e0 	cmpeqi	r2,r2,3
   15b1c:	1000041e 	bne	r2,zero,15b30 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   15b20:	e0bfff17 	ldw	r2,-4(fp)
   15b24:	00c00044 	movi	r3,1
   15b28:	10c00005 	stb	r3,0(r2)
        return;
   15b2c:	00002306 	br	15bbc <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15b30:	0005303a 	rdctl	r2,status
   15b34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b38:	e0fffc17 	ldw	r3,-16(fp)
   15b3c:	00bfff84 	movi	r2,-2
   15b40:	1884703a 	and	r2,r3,r2
   15b44:	1001703a 	wrctl	status,r2
  
  return context;
   15b48:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15b4c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   15b50:	e0bfff17 	ldw	r2,-4(fp)
   15b54:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   15b58:	e0bffd17 	ldw	r2,-12(fp)
   15b5c:	1080020b 	ldhu	r2,8(r2)
   15b60:	10bfffcc 	andi	r2,r2,65535
   15b64:	10000426 	beq	r2,zero,15b78 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   15b68:	e0bffd17 	ldw	r2,-12(fp)
   15b6c:	e0fffe0b 	ldhu	r3,-8(fp)
   15b70:	10c0020d 	sth	r3,8(r2)
   15b74:	00000b06 	br	15ba4 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   15b78:	e0bffd17 	ldw	r2,-12(fp)
   15b7c:	10800283 	ldbu	r2,10(r2)
   15b80:	10803fcc 	andi	r2,r2,255
   15b84:	1000041e 	bne	r2,zero,15b98 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   15b88:	e0bffd17 	ldw	r2,-12(fp)
   15b8c:	e0fffe0b 	ldhu	r3,-8(fp)
   15b90:	10c0020d 	sth	r3,8(r2)
   15b94:	00000306 	br	15ba4 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   15b98:	e0bfff17 	ldw	r2,-4(fp)
   15b9c:	00c01244 	movi	r3,73
   15ba0:	10c00005 	stb	r3,0(r2)
   15ba4:	e0bffa17 	ldw	r2,-24(fp)
   15ba8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15bac:	e0bffb17 	ldw	r2,-20(fp)
   15bb0:	1001703a 	wrctl	status,r2
   15bb4:	00000106 	br	15bbc <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   15bb8:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   15bbc:	e037883a 	mov	sp,fp
   15bc0:	df000017 	ldw	fp,0(sp)
   15bc4:	dec00104 	addi	sp,sp,4
   15bc8:	f800283a 	ret

00015bcc <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   15bcc:	defff104 	addi	sp,sp,-60
   15bd0:	dfc00e15 	stw	ra,56(sp)
   15bd4:	df000d15 	stw	fp,52(sp)
   15bd8:	df000d04 	addi	fp,sp,52
   15bdc:	2007883a 	mov	r3,r4
   15be0:	2805883a 	mov	r2,r5
   15be4:	e0fffe05 	stb	r3,-8(fp)
   15be8:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   15bec:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   15bf0:	e0bffe03 	ldbu	r2,-8(fp)
   15bf4:	10800530 	cmpltui	r2,r2,20
   15bf8:	1000051e 	bne	r2,zero,15c10 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   15bfc:	e0bffe03 	ldbu	r2,-8(fp)
   15c00:	10803fe0 	cmpeqi	r2,r2,255
   15c04:	1000021e 	bne	r2,zero,15c10 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   15c08:	00800a84 	movi	r2,42
   15c0c:	00012606 	br	160a8 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   15c10:	e0bfff03 	ldbu	r2,-4(fp)
   15c14:	10800530 	cmpltui	r2,r2,20
   15c18:	1000021e 	bne	r2,zero,15c24 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   15c1c:	00800a84 	movi	r2,42
   15c20:	00012106 	br	160a8 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15c24:	0005303a 	rdctl	r2,status
   15c28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15c2c:	e0fffd17 	ldw	r3,-12(fp)
   15c30:	00bfff84 	movi	r2,-2
   15c34:	1884703a 	and	r2,r3,r2
   15c38:	1001703a 	wrctl	status,r2
  
  return context;
   15c3c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15c40:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   15c44:	e0ffff03 	ldbu	r3,-4(fp)
   15c48:	008000b4 	movhi	r2,2
   15c4c:	108bc004 	addi	r2,r2,12032
   15c50:	18c7883a 	add	r3,r3,r3
   15c54:	18c7883a 	add	r3,r3,r3
   15c58:	10c5883a 	add	r2,r2,r3
   15c5c:	10800017 	ldw	r2,0(r2)
   15c60:	10000626 	beq	r2,zero,15c7c <OSTaskChangePrio+0xb0>
   15c64:	e0bff517 	ldw	r2,-44(fp)
   15c68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15c6c:	e0bff617 	ldw	r2,-40(fp)
   15c70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   15c74:	00800a04 	movi	r2,40
   15c78:	00010b06 	br	160a8 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   15c7c:	e0bffe03 	ldbu	r2,-8(fp)
   15c80:	10803fd8 	cmpnei	r2,r2,255
   15c84:	1000031e 	bne	r2,zero,15c94 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   15c88:	d0a82717 	ldw	r2,-24420(gp)
   15c8c:	10800c83 	ldbu	r2,50(r2)
   15c90:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   15c94:	e0fffe03 	ldbu	r3,-8(fp)
   15c98:	008000b4 	movhi	r2,2
   15c9c:	108bc004 	addi	r2,r2,12032
   15ca0:	18c7883a 	add	r3,r3,r3
   15ca4:	18c7883a 	add	r3,r3,r3
   15ca8:	10c5883a 	add	r2,r2,r3
   15cac:	10800017 	ldw	r2,0(r2)
   15cb0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   15cb4:	e0bff817 	ldw	r2,-32(fp)
   15cb8:	1000061e 	bne	r2,zero,15cd4 <OSTaskChangePrio+0x108>
   15cbc:	e0bff517 	ldw	r2,-44(fp)
   15cc0:	e0bff715 	stw	r2,-36(fp)
   15cc4:	e0bff717 	ldw	r2,-36(fp)
   15cc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   15ccc:	00800a44 	movi	r2,41
   15cd0:	0000f506 	br	160a8 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   15cd4:	e0bff817 	ldw	r2,-32(fp)
   15cd8:	10800058 	cmpnei	r2,r2,1
   15cdc:	1000061e 	bne	r2,zero,15cf8 <OSTaskChangePrio+0x12c>
   15ce0:	e0bff517 	ldw	r2,-44(fp)
   15ce4:	e0bff915 	stw	r2,-28(fp)
   15ce8:	e0bff917 	ldw	r2,-28(fp)
   15cec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   15cf0:	008010c4 	movi	r2,67
   15cf4:	0000ec06 	br	160a8 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   15cf8:	e0bfff03 	ldbu	r2,-4(fp)
   15cfc:	1004d0fa 	srli	r2,r2,3
   15d00:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   15d04:	e0bfff03 	ldbu	r2,-4(fp)
   15d08:	108001cc 	andi	r2,r2,7
   15d0c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   15d10:	e0bffb03 	ldbu	r2,-20(fp)
   15d14:	00c00044 	movi	r3,1
   15d18:	1884983a 	sll	r2,r3,r2
   15d1c:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   15d20:	e0bffb43 	ldbu	r2,-19(fp)
   15d24:	00c00044 	movi	r3,1
   15d28:	1884983a 	sll	r2,r3,r2
   15d2c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   15d30:	e0fffe03 	ldbu	r3,-8(fp)
   15d34:	008000b4 	movhi	r2,2
   15d38:	108bc004 	addi	r2,r2,12032
   15d3c:	18c7883a 	add	r3,r3,r3
   15d40:	18c7883a 	add	r3,r3,r3
   15d44:	10c5883a 	add	r2,r2,r3
   15d48:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   15d4c:	e0ffff03 	ldbu	r3,-4(fp)
   15d50:	008000b4 	movhi	r2,2
   15d54:	108bc004 	addi	r2,r2,12032
   15d58:	18c7883a 	add	r3,r3,r3
   15d5c:	18c7883a 	add	r3,r3,r3
   15d60:	10c5883a 	add	r2,r2,r3
   15d64:	e0fff817 	ldw	r3,-32(fp)
   15d68:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   15d6c:	e0bff817 	ldw	r2,-32(fp)
   15d70:	10800d03 	ldbu	r2,52(r2)
   15d74:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   15d78:	e0bff817 	ldw	r2,-32(fp)
   15d7c:	10800d83 	ldbu	r2,54(r2)
   15d80:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   15d84:	e0bff817 	ldw	r2,-32(fp)
   15d88:	10800d43 	ldbu	r2,53(r2)
   15d8c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   15d90:	e0fffc03 	ldbu	r3,-16(fp)
   15d94:	d0a82444 	addi	r2,gp,-24431
   15d98:	1885883a 	add	r2,r3,r2
   15d9c:	10c00003 	ldbu	r3,0(r2)
   15da0:	e0bffc83 	ldbu	r2,-14(fp)
   15da4:	1884703a 	and	r2,r3,r2
   15da8:	10803fcc 	andi	r2,r2,255
   15dac:	10002826 	beq	r2,zero,15e50 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   15db0:	e0fffc03 	ldbu	r3,-16(fp)
   15db4:	e13ffc03 	ldbu	r4,-16(fp)
   15db8:	d0a82444 	addi	r2,gp,-24431
   15dbc:	2085883a 	add	r2,r4,r2
   15dc0:	10800003 	ldbu	r2,0(r2)
   15dc4:	1009883a 	mov	r4,r2
   15dc8:	e0bffc83 	ldbu	r2,-14(fp)
   15dcc:	0084303a 	nor	r2,zero,r2
   15dd0:	2084703a 	and	r2,r4,r2
   15dd4:	1009883a 	mov	r4,r2
   15dd8:	d0a82444 	addi	r2,gp,-24431
   15ddc:	1885883a 	add	r2,r3,r2
   15de0:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   15de4:	e0fffc03 	ldbu	r3,-16(fp)
   15de8:	d0a82444 	addi	r2,gp,-24431
   15dec:	1885883a 	add	r2,r3,r2
   15df0:	10800003 	ldbu	r2,0(r2)
   15df4:	10803fcc 	andi	r2,r2,255
   15df8:	1000061e 	bne	r2,zero,15e14 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   15dfc:	e0bffc43 	ldbu	r2,-15(fp)
   15e00:	0084303a 	nor	r2,zero,r2
   15e04:	1007883a 	mov	r3,r2
   15e08:	d0a82403 	ldbu	r2,-24432(gp)
   15e0c:	1884703a 	and	r2,r3,r2
   15e10:	d0a82405 	stb	r2,-24432(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   15e14:	d0e82403 	ldbu	r3,-24432(gp)
   15e18:	e0bffb83 	ldbu	r2,-18(fp)
   15e1c:	1884b03a 	or	r2,r3,r2
   15e20:	d0a82405 	stb	r2,-24432(gp)
         OSRdyTbl[y_new] |= bitx_new;
   15e24:	e0fffb03 	ldbu	r3,-20(fp)
   15e28:	e13ffb03 	ldbu	r4,-20(fp)
   15e2c:	d0a82444 	addi	r2,gp,-24431
   15e30:	2085883a 	add	r2,r4,r2
   15e34:	11000003 	ldbu	r4,0(r2)
   15e38:	e0bffbc3 	ldbu	r2,-17(fp)
   15e3c:	2084b03a 	or	r2,r4,r2
   15e40:	1009883a 	mov	r4,r2
   15e44:	d0a82444 	addi	r2,gp,-24431
   15e48:	1885883a 	add	r2,r3,r2
   15e4c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   15e50:	e0bff817 	ldw	r2,-32(fp)
   15e54:	10800717 	ldw	r2,28(r2)
   15e58:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   15e5c:	e0bff317 	ldw	r2,-52(fp)
   15e60:	10003326 	beq	r2,zero,15f30 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   15e64:	e0bffc03 	ldbu	r2,-16(fp)
   15e68:	e0fffc03 	ldbu	r3,-16(fp)
   15e6c:	e13ff317 	ldw	r4,-52(fp)
   15e70:	20c7883a 	add	r3,r4,r3
   15e74:	18c002c4 	addi	r3,r3,11
   15e78:	18c00003 	ldbu	r3,0(r3)
   15e7c:	1809883a 	mov	r4,r3
   15e80:	e0fffc83 	ldbu	r3,-14(fp)
   15e84:	00c6303a 	nor	r3,zero,r3
   15e88:	20c6703a 	and	r3,r4,r3
   15e8c:	1809883a 	mov	r4,r3
   15e90:	e0fff317 	ldw	r3,-52(fp)
   15e94:	1885883a 	add	r2,r3,r2
   15e98:	108002c4 	addi	r2,r2,11
   15e9c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   15ea0:	e0bffc03 	ldbu	r2,-16(fp)
   15ea4:	e0fff317 	ldw	r3,-52(fp)
   15ea8:	1885883a 	add	r2,r3,r2
   15eac:	108002c4 	addi	r2,r2,11
   15eb0:	10800003 	ldbu	r2,0(r2)
   15eb4:	10803fcc 	andi	r2,r2,255
   15eb8:	1000091e 	bne	r2,zero,15ee0 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   15ebc:	e0bff317 	ldw	r2,-52(fp)
   15ec0:	10800283 	ldbu	r2,10(r2)
   15ec4:	1007883a 	mov	r3,r2
   15ec8:	e0bffc43 	ldbu	r2,-15(fp)
   15ecc:	0084303a 	nor	r2,zero,r2
   15ed0:	1884703a 	and	r2,r3,r2
   15ed4:	1007883a 	mov	r3,r2
   15ed8:	e0bff317 	ldw	r2,-52(fp)
   15edc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   15ee0:	e0bff317 	ldw	r2,-52(fp)
   15ee4:	10c00283 	ldbu	r3,10(r2)
   15ee8:	e0bffb83 	ldbu	r2,-18(fp)
   15eec:	1884b03a 	or	r2,r3,r2
   15ef0:	1007883a 	mov	r3,r2
   15ef4:	e0bff317 	ldw	r2,-52(fp)
   15ef8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   15efc:	e0bffb03 	ldbu	r2,-20(fp)
   15f00:	e0fffb03 	ldbu	r3,-20(fp)
   15f04:	e13ff317 	ldw	r4,-52(fp)
   15f08:	20c7883a 	add	r3,r4,r3
   15f0c:	18c002c4 	addi	r3,r3,11
   15f10:	19000003 	ldbu	r4,0(r3)
   15f14:	e0fffbc3 	ldbu	r3,-17(fp)
   15f18:	20c6b03a 	or	r3,r4,r3
   15f1c:	1809883a 	mov	r4,r3
   15f20:	e0fff317 	ldw	r3,-52(fp)
   15f24:	1885883a 	add	r2,r3,r2
   15f28:	108002c4 	addi	r2,r2,11
   15f2c:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   15f30:	e0bff817 	ldw	r2,-32(fp)
   15f34:	10800817 	ldw	r2,32(r2)
   15f38:	10004226 	beq	r2,zero,16044 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   15f3c:	e0bff817 	ldw	r2,-32(fp)
   15f40:	10800817 	ldw	r2,32(r2)
   15f44:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   15f48:	e0bff417 	ldw	r2,-48(fp)
   15f4c:	10800017 	ldw	r2,0(r2)
   15f50:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   15f54:	00003906 	br	1603c <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   15f58:	e0bffc03 	ldbu	r2,-16(fp)
   15f5c:	e0fffc03 	ldbu	r3,-16(fp)
   15f60:	e13ff317 	ldw	r4,-52(fp)
   15f64:	20c7883a 	add	r3,r4,r3
   15f68:	18c002c4 	addi	r3,r3,11
   15f6c:	18c00003 	ldbu	r3,0(r3)
   15f70:	1809883a 	mov	r4,r3
   15f74:	e0fffc83 	ldbu	r3,-14(fp)
   15f78:	00c6303a 	nor	r3,zero,r3
   15f7c:	20c6703a 	and	r3,r4,r3
   15f80:	1809883a 	mov	r4,r3
   15f84:	e0fff317 	ldw	r3,-52(fp)
   15f88:	1885883a 	add	r2,r3,r2
   15f8c:	108002c4 	addi	r2,r2,11
   15f90:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   15f94:	e0bffc03 	ldbu	r2,-16(fp)
   15f98:	e0fff317 	ldw	r3,-52(fp)
   15f9c:	1885883a 	add	r2,r3,r2
   15fa0:	108002c4 	addi	r2,r2,11
   15fa4:	10800003 	ldbu	r2,0(r2)
   15fa8:	10803fcc 	andi	r2,r2,255
   15fac:	1000091e 	bne	r2,zero,15fd4 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   15fb0:	e0bff317 	ldw	r2,-52(fp)
   15fb4:	10800283 	ldbu	r2,10(r2)
   15fb8:	1007883a 	mov	r3,r2
   15fbc:	e0bffc43 	ldbu	r2,-15(fp)
   15fc0:	0084303a 	nor	r2,zero,r2
   15fc4:	1884703a 	and	r2,r3,r2
   15fc8:	1007883a 	mov	r3,r2
   15fcc:	e0bff317 	ldw	r2,-52(fp)
   15fd0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   15fd4:	e0bff317 	ldw	r2,-52(fp)
   15fd8:	10c00283 	ldbu	r3,10(r2)
   15fdc:	e0bffb83 	ldbu	r2,-18(fp)
   15fe0:	1884b03a 	or	r2,r3,r2
   15fe4:	1007883a 	mov	r3,r2
   15fe8:	e0bff317 	ldw	r2,-52(fp)
   15fec:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   15ff0:	e0bffb03 	ldbu	r2,-20(fp)
   15ff4:	e0fffb03 	ldbu	r3,-20(fp)
   15ff8:	e13ff317 	ldw	r4,-52(fp)
   15ffc:	20c7883a 	add	r3,r4,r3
   16000:	18c002c4 	addi	r3,r3,11
   16004:	19000003 	ldbu	r4,0(r3)
   16008:	e0fffbc3 	ldbu	r3,-17(fp)
   1600c:	20c6b03a 	or	r3,r4,r3
   16010:	1809883a 	mov	r4,r3
   16014:	e0fff317 	ldw	r3,-52(fp)
   16018:	1885883a 	add	r2,r3,r2
   1601c:	108002c4 	addi	r2,r2,11
   16020:	11000005 	stb	r4,0(r2)
            pevents++;
   16024:	e0bff417 	ldw	r2,-48(fp)
   16028:	10800104 	addi	r2,r2,4
   1602c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   16030:	e0bff417 	ldw	r2,-48(fp)
   16034:	10800017 	ldw	r2,0(r2)
   16038:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   1603c:	e0bff317 	ldw	r2,-52(fp)
   16040:	103fc51e 	bne	r2,zero,15f58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015f58>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   16044:	e0bff817 	ldw	r2,-32(fp)
   16048:	e0ffff03 	ldbu	r3,-4(fp)
   1604c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   16050:	e0bff817 	ldw	r2,-32(fp)
   16054:	e0fffb03 	ldbu	r3,-20(fp)
   16058:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   1605c:	e0bff817 	ldw	r2,-32(fp)
   16060:	e0fffb43 	ldbu	r3,-19(fp)
   16064:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   16068:	e0bff817 	ldw	r2,-32(fp)
   1606c:	e0fffb83 	ldbu	r3,-18(fp)
   16070:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   16074:	e0bff817 	ldw	r2,-32(fp)
   16078:	e0fffbc3 	ldbu	r3,-17(fp)
   1607c:	10c00d45 	stb	r3,53(r2)
   16080:	e0bff517 	ldw	r2,-44(fp)
   16084:	e0bffa15 	stw	r2,-24(fp)
   16088:	e0bffa17 	ldw	r2,-24(fp)
   1608c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   16090:	d0a81843 	ldbu	r2,-24479(gp)
   16094:	10803fcc 	andi	r2,r2,255
   16098:	10800058 	cmpnei	r2,r2,1
   1609c:	1000011e 	bne	r2,zero,160a4 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   160a0:	001198c0 	call	1198c <OS_Sched>
    }
    return (OS_ERR_NONE);
   160a4:	0005883a 	mov	r2,zero
}
   160a8:	e037883a 	mov	sp,fp
   160ac:	dfc00117 	ldw	ra,4(sp)
   160b0:	df000017 	ldw	fp,0(sp)
   160b4:	dec00204 	addi	sp,sp,8
   160b8:	f800283a 	ret

000160bc <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   160bc:	deffee04 	addi	sp,sp,-72
   160c0:	dfc01115 	stw	ra,68(sp)
   160c4:	df001015 	stw	fp,64(sp)
   160c8:	df001004 	addi	fp,sp,64
   160cc:	e13ffc15 	stw	r4,-16(fp)
   160d0:	e17ffd15 	stw	r5,-12(fp)
   160d4:	e1bffe15 	stw	r6,-8(fp)
   160d8:	3805883a 	mov	r2,r7
   160dc:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   160e0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   160e4:	e0bfff03 	ldbu	r2,-4(fp)
   160e8:	10800570 	cmpltui	r2,r2,21
   160ec:	1000021e 	bne	r2,zero,160f8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   160f0:	00800a84 	movi	r2,42
   160f4:	00005706 	br	16254 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   160f8:	0005303a 	rdctl	r2,status
   160fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16100:	e0fffb17 	ldw	r3,-20(fp)
   16104:	00bfff84 	movi	r2,-2
   16108:	1884703a 	and	r2,r3,r2
   1610c:	1001703a 	wrctl	status,r2
  
  return context;
   16110:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16114:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   16118:	d0a82603 	ldbu	r2,-24424(gp)
   1611c:	10803fcc 	andi	r2,r2,255
   16120:	10000626 	beq	r2,zero,1613c <OSTaskCreate+0x80>
   16124:	e0bff317 	ldw	r2,-52(fp)
   16128:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1612c:	e0bff417 	ldw	r2,-48(fp)
   16130:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   16134:	00800f04 	movi	r2,60
   16138:	00004606 	br	16254 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1613c:	e0ffff03 	ldbu	r3,-4(fp)
   16140:	008000b4 	movhi	r2,2
   16144:	108bc004 	addi	r2,r2,12032
   16148:	18c7883a 	add	r3,r3,r3
   1614c:	18c7883a 	add	r3,r3,r3
   16150:	10c5883a 	add	r2,r2,r3
   16154:	10800017 	ldw	r2,0(r2)
   16158:	1000391e 	bne	r2,zero,16240 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1615c:	e0ffff03 	ldbu	r3,-4(fp)
   16160:	008000b4 	movhi	r2,2
   16164:	108bc004 	addi	r2,r2,12032
   16168:	18c7883a 	add	r3,r3,r3
   1616c:	18c7883a 	add	r3,r3,r3
   16170:	10c5883a 	add	r2,r2,r3
   16174:	00c00044 	movi	r3,1
   16178:	10c00015 	stw	r3,0(r2)
   1617c:	e0bff317 	ldw	r2,-52(fp)
   16180:	e0bff515 	stw	r2,-44(fp)
   16184:	e0bff517 	ldw	r2,-44(fp)
   16188:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   1618c:	000f883a 	mov	r7,zero
   16190:	e1bffe17 	ldw	r6,-8(fp)
   16194:	e17ffd17 	ldw	r5,-12(fp)
   16198:	e13ffc17 	ldw	r4,-16(fp)
   1619c:	001acdc0 	call	1acdc <OSTaskStkInit>
   161a0:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   161a4:	e0bfff03 	ldbu	r2,-4(fp)
   161a8:	d8000215 	stw	zero,8(sp)
   161ac:	d8000115 	stw	zero,4(sp)
   161b0:	d8000015 	stw	zero,0(sp)
   161b4:	000f883a 	mov	r7,zero
   161b8:	000d883a 	mov	r6,zero
   161bc:	e17ff717 	ldw	r5,-36(fp)
   161c0:	1009883a 	mov	r4,r2
   161c4:	0011d9c0 	call	11d9c <OS_TCBInit>
   161c8:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   161cc:	e0bff803 	ldbu	r2,-32(fp)
   161d0:	1000061e 	bne	r2,zero,161ec <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   161d4:	d0a81843 	ldbu	r2,-24479(gp)
   161d8:	10803fcc 	andi	r2,r2,255
   161dc:	10800058 	cmpnei	r2,r2,1
   161e0:	1000151e 	bne	r2,zero,16238 <OSTaskCreate+0x17c>
                OS_Sched();
   161e4:	001198c0 	call	1198c <OS_Sched>
   161e8:	00001306 	br	16238 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161ec:	0005303a 	rdctl	r2,status
   161f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161f4:	e0fffa17 	ldw	r3,-24(fp)
   161f8:	00bfff84 	movi	r2,-2
   161fc:	1884703a 	and	r2,r3,r2
   16200:	1001703a 	wrctl	status,r2
  
  return context;
   16204:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   16208:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1620c:	e0ffff03 	ldbu	r3,-4(fp)
   16210:	008000b4 	movhi	r2,2
   16214:	108bc004 	addi	r2,r2,12032
   16218:	18c7883a 	add	r3,r3,r3
   1621c:	18c7883a 	add	r3,r3,r3
   16220:	10c5883a 	add	r2,r2,r3
   16224:	10000015 	stw	zero,0(r2)
   16228:	e0bff317 	ldw	r2,-52(fp)
   1622c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16230:	e0bff617 	ldw	r2,-40(fp)
   16234:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   16238:	e0bff803 	ldbu	r2,-32(fp)
   1623c:	00000506 	br	16254 <OSTaskCreate+0x198>
   16240:	e0bff317 	ldw	r2,-52(fp)
   16244:	e0bff915 	stw	r2,-28(fp)
   16248:	e0bff917 	ldw	r2,-28(fp)
   1624c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   16250:	00800a04 	movi	r2,40
}
   16254:	e037883a 	mov	sp,fp
   16258:	dfc00117 	ldw	ra,4(sp)
   1625c:	df000017 	ldw	fp,0(sp)
   16260:	dec00204 	addi	sp,sp,8
   16264:	f800283a 	ret

00016268 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   16268:	deffec04 	addi	sp,sp,-80
   1626c:	dfc01315 	stw	ra,76(sp)
   16270:	df001215 	stw	fp,72(sp)
   16274:	df001204 	addi	fp,sp,72
   16278:	e13ffa15 	stw	r4,-24(fp)
   1627c:	e17ffb15 	stw	r5,-20(fp)
   16280:	e1bffc15 	stw	r6,-16(fp)
   16284:	3809883a 	mov	r4,r7
   16288:	e0c00217 	ldw	r3,8(fp)
   1628c:	e0800617 	ldw	r2,24(fp)
   16290:	e13ffd05 	stb	r4,-12(fp)
   16294:	e0fffe0d 	sth	r3,-8(fp)
   16298:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1629c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   162a0:	e0bffd03 	ldbu	r2,-12(fp)
   162a4:	10800570 	cmpltui	r2,r2,21
   162a8:	1000021e 	bne	r2,zero,162b4 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   162ac:	00800a84 	movi	r2,42
   162b0:	00006106 	br	16438 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   162b4:	0005303a 	rdctl	r2,status
   162b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   162bc:	e0fff917 	ldw	r3,-28(fp)
   162c0:	00bfff84 	movi	r2,-2
   162c4:	1884703a 	and	r2,r3,r2
   162c8:	1001703a 	wrctl	status,r2
  
  return context;
   162cc:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   162d0:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   162d4:	d0a82603 	ldbu	r2,-24424(gp)
   162d8:	10803fcc 	andi	r2,r2,255
   162dc:	10000626 	beq	r2,zero,162f8 <OSTaskCreateExt+0x90>
   162e0:	e0bff117 	ldw	r2,-60(fp)
   162e4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   162e8:	e0bff217 	ldw	r2,-56(fp)
   162ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   162f0:	00800f04 	movi	r2,60
   162f4:	00005006 	br	16438 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   162f8:	e0fffd03 	ldbu	r3,-12(fp)
   162fc:	008000b4 	movhi	r2,2
   16300:	108bc004 	addi	r2,r2,12032
   16304:	18c7883a 	add	r3,r3,r3
   16308:	18c7883a 	add	r3,r3,r3
   1630c:	10c5883a 	add	r2,r2,r3
   16310:	10800017 	ldw	r2,0(r2)
   16314:	1000431e 	bne	r2,zero,16424 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   16318:	e0fffd03 	ldbu	r3,-12(fp)
   1631c:	008000b4 	movhi	r2,2
   16320:	108bc004 	addi	r2,r2,12032
   16324:	18c7883a 	add	r3,r3,r3
   16328:	18c7883a 	add	r3,r3,r3
   1632c:	10c5883a 	add	r2,r2,r3
   16330:	00c00044 	movi	r3,1
   16334:	10c00015 	stw	r3,0(r2)
   16338:	e0bff117 	ldw	r2,-60(fp)
   1633c:	e0bff315 	stw	r2,-52(fp)
   16340:	e0bff317 	ldw	r2,-52(fp)
   16344:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   16348:	e0bfff0b 	ldhu	r2,-4(fp)
   1634c:	100d883a 	mov	r6,r2
   16350:	e1400417 	ldw	r5,16(fp)
   16354:	e1000317 	ldw	r4,12(fp)
   16358:	00172c80 	call	172c8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1635c:	e0bfff0b 	ldhu	r2,-4(fp)
   16360:	100f883a 	mov	r7,r2
   16364:	e1bffc17 	ldw	r6,-16(fp)
   16368:	e17ffb17 	ldw	r5,-20(fp)
   1636c:	e13ffa17 	ldw	r4,-24(fp)
   16370:	001acdc0 	call	1acdc <OSTaskStkInit>
   16374:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   16378:	e0fffd03 	ldbu	r3,-12(fp)
   1637c:	e13ffe0b 	ldhu	r4,-8(fp)
   16380:	e0bfff0b 	ldhu	r2,-4(fp)
   16384:	d8800215 	stw	r2,8(sp)
   16388:	e0800517 	ldw	r2,20(fp)
   1638c:	d8800115 	stw	r2,4(sp)
   16390:	e0800417 	ldw	r2,16(fp)
   16394:	d8800015 	stw	r2,0(sp)
   16398:	200f883a 	mov	r7,r4
   1639c:	e1800317 	ldw	r6,12(fp)
   163a0:	e17ff517 	ldw	r5,-44(fp)
   163a4:	1809883a 	mov	r4,r3
   163a8:	0011d9c0 	call	11d9c <OS_TCBInit>
   163ac:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   163b0:	e0bff603 	ldbu	r2,-40(fp)
   163b4:	1000061e 	bne	r2,zero,163d0 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   163b8:	d0a81843 	ldbu	r2,-24479(gp)
   163bc:	10803fcc 	andi	r2,r2,255
   163c0:	10800058 	cmpnei	r2,r2,1
   163c4:	1000151e 	bne	r2,zero,1641c <OSTaskCreateExt+0x1b4>
                OS_Sched();
   163c8:	001198c0 	call	1198c <OS_Sched>
   163cc:	00001306 	br	1641c <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   163d0:	0005303a 	rdctl	r2,status
   163d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   163d8:	e0fff817 	ldw	r3,-32(fp)
   163dc:	00bfff84 	movi	r2,-2
   163e0:	1884703a 	and	r2,r3,r2
   163e4:	1001703a 	wrctl	status,r2
  
  return context;
   163e8:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   163ec:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   163f0:	e0fffd03 	ldbu	r3,-12(fp)
   163f4:	008000b4 	movhi	r2,2
   163f8:	108bc004 	addi	r2,r2,12032
   163fc:	18c7883a 	add	r3,r3,r3
   16400:	18c7883a 	add	r3,r3,r3
   16404:	10c5883a 	add	r2,r2,r3
   16408:	10000015 	stw	zero,0(r2)
   1640c:	e0bff117 	ldw	r2,-60(fp)
   16410:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16414:	e0bff417 	ldw	r2,-48(fp)
   16418:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1641c:	e0bff603 	ldbu	r2,-40(fp)
   16420:	00000506 	br	16438 <OSTaskCreateExt+0x1d0>
   16424:	e0bff117 	ldw	r2,-60(fp)
   16428:	e0bff715 	stw	r2,-36(fp)
   1642c:	e0bff717 	ldw	r2,-36(fp)
   16430:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   16434:	00800a04 	movi	r2,40
}
   16438:	e037883a 	mov	sp,fp
   1643c:	dfc00117 	ldw	ra,4(sp)
   16440:	df000017 	ldw	fp,0(sp)
   16444:	dec00204 	addi	sp,sp,8
   16448:	f800283a 	ret

0001644c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1644c:	defff404 	addi	sp,sp,-48
   16450:	dfc00b15 	stw	ra,44(sp)
   16454:	df000a15 	stw	fp,40(sp)
   16458:	df000a04 	addi	fp,sp,40
   1645c:	2005883a 	mov	r2,r4
   16460:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   16464:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   16468:	d0a82603 	ldbu	r2,-24424(gp)
   1646c:	10803fcc 	andi	r2,r2,255
   16470:	10000226 	beq	r2,zero,1647c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   16474:	00801004 	movi	r2,64
   16478:	0000c006 	br	1677c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1647c:	e0bfff03 	ldbu	r2,-4(fp)
   16480:	10800518 	cmpnei	r2,r2,20
   16484:	1000021e 	bne	r2,zero,16490 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   16488:	00800f84 	movi	r2,62
   1648c:	0000bb06 	br	1677c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   16490:	e0bfff03 	ldbu	r2,-4(fp)
   16494:	10800530 	cmpltui	r2,r2,20
   16498:	1000051e 	bne	r2,zero,164b0 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   1649c:	e0bfff03 	ldbu	r2,-4(fp)
   164a0:	10803fe0 	cmpeqi	r2,r2,255
   164a4:	1000021e 	bne	r2,zero,164b0 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   164a8:	00800a84 	movi	r2,42
   164ac:	0000b306 	br	1677c <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   164b0:	0005303a 	rdctl	r2,status
   164b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   164b8:	e0fffe17 	ldw	r3,-8(fp)
   164bc:	00bfff84 	movi	r2,-2
   164c0:	1884703a 	and	r2,r3,r2
   164c4:	1001703a 	wrctl	status,r2
  
  return context;
   164c8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   164cc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   164d0:	e0bfff03 	ldbu	r2,-4(fp)
   164d4:	10803fd8 	cmpnei	r2,r2,255
   164d8:	1000031e 	bne	r2,zero,164e8 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   164dc:	d0a82717 	ldw	r2,-24420(gp)
   164e0:	10800c83 	ldbu	r2,50(r2)
   164e4:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   164e8:	e0ffff03 	ldbu	r3,-4(fp)
   164ec:	008000b4 	movhi	r2,2
   164f0:	108bc004 	addi	r2,r2,12032
   164f4:	18c7883a 	add	r3,r3,r3
   164f8:	18c7883a 	add	r3,r3,r3
   164fc:	10c5883a 	add	r2,r2,r3
   16500:	10800017 	ldw	r2,0(r2)
   16504:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   16508:	e0bff817 	ldw	r2,-32(fp)
   1650c:	1000061e 	bne	r2,zero,16528 <OSTaskDel+0xdc>
   16510:	e0bff617 	ldw	r2,-40(fp)
   16514:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16518:	e0bff717 	ldw	r2,-36(fp)
   1651c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16520:	008010c4 	movi	r2,67
   16524:	00009506 	br	1677c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   16528:	e0bff817 	ldw	r2,-32(fp)
   1652c:	10800058 	cmpnei	r2,r2,1
   16530:	1000061e 	bne	r2,zero,1654c <OSTaskDel+0x100>
   16534:	e0bff617 	ldw	r2,-40(fp)
   16538:	e0bff915 	stw	r2,-28(fp)
   1653c:	e0bff917 	ldw	r2,-28(fp)
   16540:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   16544:	00800f44 	movi	r2,61
   16548:	00008c06 	br	1677c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1654c:	e0bff817 	ldw	r2,-32(fp)
   16550:	10800d03 	ldbu	r2,52(r2)
   16554:	10c03fcc 	andi	r3,r2,255
   16558:	e0bff817 	ldw	r2,-32(fp)
   1655c:	10800d03 	ldbu	r2,52(r2)
   16560:	11003fcc 	andi	r4,r2,255
   16564:	d0a82444 	addi	r2,gp,-24431
   16568:	2085883a 	add	r2,r4,r2
   1656c:	10800003 	ldbu	r2,0(r2)
   16570:	1009883a 	mov	r4,r2
   16574:	e0bff817 	ldw	r2,-32(fp)
   16578:	10800d43 	ldbu	r2,53(r2)
   1657c:	0084303a 	nor	r2,zero,r2
   16580:	2084703a 	and	r2,r4,r2
   16584:	1009883a 	mov	r4,r2
   16588:	d0a82444 	addi	r2,gp,-24431
   1658c:	1885883a 	add	r2,r3,r2
   16590:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   16594:	e0bff817 	ldw	r2,-32(fp)
   16598:	10800d03 	ldbu	r2,52(r2)
   1659c:	10c03fcc 	andi	r3,r2,255
   165a0:	d0a82444 	addi	r2,gp,-24431
   165a4:	1885883a 	add	r2,r3,r2
   165a8:	10800003 	ldbu	r2,0(r2)
   165ac:	10803fcc 	andi	r2,r2,255
   165b0:	1000071e 	bne	r2,zero,165d0 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   165b4:	e0bff817 	ldw	r2,-32(fp)
   165b8:	10800d83 	ldbu	r2,54(r2)
   165bc:	0084303a 	nor	r2,zero,r2
   165c0:	1007883a 	mov	r3,r2
   165c4:	d0a82403 	ldbu	r2,-24432(gp)
   165c8:	1884703a 	and	r2,r3,r2
   165cc:	d0a82405 	stb	r2,-24432(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   165d0:	e0bff817 	ldw	r2,-32(fp)
   165d4:	10800717 	ldw	r2,28(r2)
   165d8:	10000526 	beq	r2,zero,165f0 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   165dc:	e0bff817 	ldw	r2,-32(fp)
   165e0:	10800717 	ldw	r2,28(r2)
   165e4:	100b883a 	mov	r5,r2
   165e8:	e13ff817 	ldw	r4,-32(fp)
   165ec:	00113380 	call	11338 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   165f0:	e0bff817 	ldw	r2,-32(fp)
   165f4:	10800817 	ldw	r2,32(r2)
   165f8:	10000526 	beq	r2,zero,16610 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   165fc:	e0bff817 	ldw	r2,-32(fp)
   16600:	10800817 	ldw	r2,32(r2)
   16604:	100b883a 	mov	r5,r2
   16608:	e13ff817 	ldw	r4,-32(fp)
   1660c:	00113f00 	call	113f0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   16610:	e0bff817 	ldw	r2,-32(fp)
   16614:	10800a17 	ldw	r2,40(r2)
   16618:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1661c:	e0bffb17 	ldw	r2,-20(fp)
   16620:	10000226 	beq	r2,zero,1662c <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   16624:	e13ffb17 	ldw	r4,-20(fp)
   16628:	00138700 	call	13870 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1662c:	e0bff817 	ldw	r2,-32(fp)
   16630:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   16634:	e0bff817 	ldw	r2,-32(fp)
   16638:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1663c:	e0bff817 	ldw	r2,-32(fp)
   16640:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   16644:	d0a81803 	ldbu	r2,-24480(gp)
   16648:	10803fcc 	andi	r2,r2,255
   1664c:	10803fe0 	cmpeqi	r2,r2,255
   16650:	1000031e 	bne	r2,zero,16660 <OSTaskDel+0x214>
        OSLockNesting++;
   16654:	d0a81803 	ldbu	r2,-24480(gp)
   16658:	10800044 	addi	r2,r2,1
   1665c:	d0a81805 	stb	r2,-24480(gp)
   16660:	e0bff617 	ldw	r2,-40(fp)
   16664:	e0bffd15 	stw	r2,-12(fp)
   16668:	e0bffd17 	ldw	r2,-12(fp)
   1666c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   16670:	0010f200 	call	10f20 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16674:	0005303a 	rdctl	r2,status
   16678:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1667c:	e0fffa17 	ldw	r3,-24(fp)
   16680:	00bfff84 	movi	r2,-2
   16684:	1884703a 	and	r2,r3,r2
   16688:	1001703a 	wrctl	status,r2
  
  return context;
   1668c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   16690:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   16694:	d0a81803 	ldbu	r2,-24480(gp)
   16698:	10803fcc 	andi	r2,r2,255
   1669c:	10000326 	beq	r2,zero,166ac <OSTaskDel+0x260>
        OSLockNesting--;
   166a0:	d0a81803 	ldbu	r2,-24480(gp)
   166a4:	10bfffc4 	addi	r2,r2,-1
   166a8:	d0a81805 	stb	r2,-24480(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   166ac:	e13ff817 	ldw	r4,-32(fp)
   166b0:	001ae5c0 	call	1ae5c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   166b4:	d0a82043 	ldbu	r2,-24447(gp)
   166b8:	10bfffc4 	addi	r2,r2,-1
   166bc:	d0a82045 	stb	r2,-24447(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   166c0:	e0ffff03 	ldbu	r3,-4(fp)
   166c4:	008000b4 	movhi	r2,2
   166c8:	108bc004 	addi	r2,r2,12032
   166cc:	18c7883a 	add	r3,r3,r3
   166d0:	18c7883a 	add	r3,r3,r3
   166d4:	10c5883a 	add	r2,r2,r3
   166d8:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   166dc:	e0bff817 	ldw	r2,-32(fp)
   166e0:	10800617 	ldw	r2,24(r2)
   166e4:	1000071e 	bne	r2,zero,16704 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   166e8:	e0bff817 	ldw	r2,-32(fp)
   166ec:	10800517 	ldw	r2,20(r2)
   166f0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   166f4:	e0bff817 	ldw	r2,-32(fp)
   166f8:	10800517 	ldw	r2,20(r2)
   166fc:	d0a81b15 	stw	r2,-24468(gp)
   16700:	00000a06 	br	1672c <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   16704:	e0bff817 	ldw	r2,-32(fp)
   16708:	10800617 	ldw	r2,24(r2)
   1670c:	e0fff817 	ldw	r3,-32(fp)
   16710:	18c00517 	ldw	r3,20(r3)
   16714:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   16718:	e0bff817 	ldw	r2,-32(fp)
   1671c:	10800517 	ldw	r2,20(r2)
   16720:	e0fff817 	ldw	r3,-32(fp)
   16724:	18c00617 	ldw	r3,24(r3)
   16728:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1672c:	d0e81f17 	ldw	r3,-24452(gp)
   16730:	e0bff817 	ldw	r2,-32(fp)
   16734:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   16738:	e0bff817 	ldw	r2,-32(fp)
   1673c:	d0a81f15 	stw	r2,-24452(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   16740:	e0bff817 	ldw	r2,-32(fp)
   16744:	00c00fc4 	movi	r3,63
   16748:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1674c:	e0bff817 	ldw	r2,-32(fp)
   16750:	10001345 	stb	zero,77(r2)
   16754:	e0bff617 	ldw	r2,-40(fp)
   16758:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1675c:	e0bffc17 	ldw	r2,-16(fp)
   16760:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   16764:	d0a81843 	ldbu	r2,-24479(gp)
   16768:	10803fcc 	andi	r2,r2,255
   1676c:	10800058 	cmpnei	r2,r2,1
   16770:	1000011e 	bne	r2,zero,16778 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   16774:	001198c0 	call	1198c <OS_Sched>
    }
    return (OS_ERR_NONE);
   16778:	0005883a 	mov	r2,zero
}
   1677c:	e037883a 	mov	sp,fp
   16780:	dfc00117 	ldw	ra,4(sp)
   16784:	df000017 	ldw	fp,0(sp)
   16788:	dec00204 	addi	sp,sp,8
   1678c:	f800283a 	ret

00016790 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   16790:	defff504 	addi	sp,sp,-44
   16794:	df000a15 	stw	fp,40(sp)
   16798:	df000a04 	addi	fp,sp,40
   1679c:	2005883a 	mov	r2,r4
   167a0:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   167a4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   167a8:	e0bfff03 	ldbu	r2,-4(fp)
   167ac:	10800518 	cmpnei	r2,r2,20
   167b0:	1000021e 	bne	r2,zero,167bc <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   167b4:	00800f84 	movi	r2,62
   167b8:	00004506 	br	168d0 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   167bc:	e0bfff03 	ldbu	r2,-4(fp)
   167c0:	10800530 	cmpltui	r2,r2,20
   167c4:	1000051e 	bne	r2,zero,167dc <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   167c8:	e0bfff03 	ldbu	r2,-4(fp)
   167cc:	10803fe0 	cmpeqi	r2,r2,255
   167d0:	1000021e 	bne	r2,zero,167dc <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   167d4:	00800a84 	movi	r2,42
   167d8:	00003d06 	br	168d0 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   167dc:	e0bfff03 	ldbu	r2,-4(fp)
   167e0:	10803fd8 	cmpnei	r2,r2,255
   167e4:	1000111e 	bne	r2,zero,1682c <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   167e8:	0005303a 	rdctl	r2,status
   167ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167f0:	e0fff917 	ldw	r3,-28(fp)
   167f4:	00bfff84 	movi	r2,-2
   167f8:	1884703a 	and	r2,r3,r2
   167fc:	1001703a 	wrctl	status,r2
  
  return context;
   16800:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   16804:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   16808:	d0a82717 	ldw	r2,-24420(gp)
   1680c:	10800dc3 	ldbu	r2,55(r2)
   16810:	e0bff805 	stb	r2,-32(fp)
   16814:	e0bff617 	ldw	r2,-40(fp)
   16818:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1681c:	e0bffe17 	ldw	r2,-8(fp)
   16820:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   16824:	e0bff803 	ldbu	r2,-32(fp)
   16828:	00002906 	br	168d0 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1682c:	0005303a 	rdctl	r2,status
   16830:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16834:	e0fff717 	ldw	r3,-36(fp)
   16838:	00bfff84 	movi	r2,-2
   1683c:	1884703a 	and	r2,r3,r2
   16840:	1001703a 	wrctl	status,r2
  
  return context;
   16844:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   16848:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1684c:	e0ffff03 	ldbu	r3,-4(fp)
   16850:	008000b4 	movhi	r2,2
   16854:	108bc004 	addi	r2,r2,12032
   16858:	18c7883a 	add	r3,r3,r3
   1685c:	18c7883a 	add	r3,r3,r3
   16860:	10c5883a 	add	r2,r2,r3
   16864:	10800017 	ldw	r2,0(r2)
   16868:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1686c:	e0bffb17 	ldw	r2,-20(fp)
   16870:	1000061e 	bne	r2,zero,1688c <OSTaskDelReq+0xfc>
   16874:	e0bff617 	ldw	r2,-40(fp)
   16878:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1687c:	e0bffa17 	ldw	r2,-24(fp)
   16880:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   16884:	008010c4 	movi	r2,67
   16888:	00001106 	br	168d0 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1688c:	e0bffb17 	ldw	r2,-20(fp)
   16890:	10800058 	cmpnei	r2,r2,1
   16894:	1000061e 	bne	r2,zero,168b0 <OSTaskDelReq+0x120>
   16898:	e0bff617 	ldw	r2,-40(fp)
   1689c:	e0bffc15 	stw	r2,-16(fp)
   168a0:	e0bffc17 	ldw	r2,-16(fp)
   168a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   168a8:	00800f44 	movi	r2,61
   168ac:	00000806 	br	168d0 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   168b0:	e0bffb17 	ldw	r2,-20(fp)
   168b4:	00c00fc4 	movi	r3,63
   168b8:	10c00dc5 	stb	r3,55(r2)
   168bc:	e0bff617 	ldw	r2,-40(fp)
   168c0:	e0bffd15 	stw	r2,-12(fp)
   168c4:	e0bffd17 	ldw	r2,-12(fp)
   168c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   168cc:	0005883a 	mov	r2,zero
}
   168d0:	e037883a 	mov	sp,fp
   168d4:	df000017 	ldw	fp,0(sp)
   168d8:	dec00104 	addi	sp,sp,4
   168dc:	f800283a 	ret

000168e0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   168e0:	defff404 	addi	sp,sp,-48
   168e4:	dfc00b15 	stw	ra,44(sp)
   168e8:	df000a15 	stw	fp,40(sp)
   168ec:	df000a04 	addi	fp,sp,40
   168f0:	2005883a 	mov	r2,r4
   168f4:	e17ffe15 	stw	r5,-8(fp)
   168f8:	e1bfff15 	stw	r6,-4(fp)
   168fc:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   16900:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   16904:	e0bfff17 	ldw	r2,-4(fp)
   16908:	1000021e 	bne	r2,zero,16914 <OSTaskNameGet+0x34>
        return (0);
   1690c:	0005883a 	mov	r2,zero
   16910:	00005406 	br	16a64 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   16914:	e0bffd03 	ldbu	r2,-12(fp)
   16918:	10800570 	cmpltui	r2,r2,21
   1691c:	1000081e 	bne	r2,zero,16940 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   16920:	e0bffd03 	ldbu	r2,-12(fp)
   16924:	10803fe0 	cmpeqi	r2,r2,255
   16928:	1000051e 	bne	r2,zero,16940 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1692c:	e0bfff17 	ldw	r2,-4(fp)
   16930:	00c00a84 	movi	r3,42
   16934:	10c00005 	stb	r3,0(r2)
            return (0);
   16938:	0005883a 	mov	r2,zero
   1693c:	00004906 	br	16a64 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   16940:	e0bffe17 	ldw	r2,-8(fp)
   16944:	1000051e 	bne	r2,zero,1695c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   16948:	e0bfff17 	ldw	r2,-4(fp)
   1694c:	00c00304 	movi	r3,12
   16950:	10c00005 	stb	r3,0(r2)
        return (0);
   16954:	0005883a 	mov	r2,zero
   16958:	00004206 	br	16a64 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   1695c:	d0a82603 	ldbu	r2,-24424(gp)
   16960:	10803fcc 	andi	r2,r2,255
   16964:	10000526 	beq	r2,zero,1697c <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   16968:	e0bfff17 	ldw	r2,-4(fp)
   1696c:	00c00444 	movi	r3,17
   16970:	10c00005 	stb	r3,0(r2)
        return (0);
   16974:	0005883a 	mov	r2,zero
   16978:	00003a06 	br	16a64 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1697c:	0005303a 	rdctl	r2,status
   16980:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16984:	e0fffc17 	ldw	r3,-16(fp)
   16988:	00bfff84 	movi	r2,-2
   1698c:	1884703a 	and	r2,r3,r2
   16990:	1001703a 	wrctl	status,r2
  
  return context;
   16994:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16998:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1699c:	e0bffd03 	ldbu	r2,-12(fp)
   169a0:	10803fd8 	cmpnei	r2,r2,255
   169a4:	1000031e 	bne	r2,zero,169b4 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   169a8:	d0a82717 	ldw	r2,-24420(gp)
   169ac:	10800c83 	ldbu	r2,50(r2)
   169b0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   169b4:	e0fffd03 	ldbu	r3,-12(fp)
   169b8:	008000b4 	movhi	r2,2
   169bc:	108bc004 	addi	r2,r2,12032
   169c0:	18c7883a 	add	r3,r3,r3
   169c4:	18c7883a 	add	r3,r3,r3
   169c8:	10c5883a 	add	r2,r2,r3
   169cc:	10800017 	ldw	r2,0(r2)
   169d0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   169d4:	e0bff817 	ldw	r2,-32(fp)
   169d8:	1000091e 	bne	r2,zero,16a00 <OSTaskNameGet+0x120>
   169dc:	e0bff617 	ldw	r2,-40(fp)
   169e0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   169e4:	e0bff717 	ldw	r2,-36(fp)
   169e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   169ec:	e0bfff17 	ldw	r2,-4(fp)
   169f0:	00c010c4 	movi	r3,67
   169f4:	10c00005 	stb	r3,0(r2)
        return (0);
   169f8:	0005883a 	mov	r2,zero
   169fc:	00001906 	br	16a64 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   16a00:	e0bff817 	ldw	r2,-32(fp)
   16a04:	10800058 	cmpnei	r2,r2,1
   16a08:	1000091e 	bne	r2,zero,16a30 <OSTaskNameGet+0x150>
   16a0c:	e0bff617 	ldw	r2,-40(fp)
   16a10:	e0bff915 	stw	r2,-28(fp)
   16a14:	e0bff917 	ldw	r2,-28(fp)
   16a18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16a1c:	e0bfff17 	ldw	r2,-4(fp)
   16a20:	00c010c4 	movi	r3,67
   16a24:	10c00005 	stb	r3,0(r2)
        return (0);
   16a28:	0005883a 	mov	r2,zero
   16a2c:	00000d06 	br	16a64 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   16a30:	e0bff817 	ldw	r2,-32(fp)
   16a34:	10801304 	addi	r2,r2,76
   16a38:	100b883a 	mov	r5,r2
   16a3c:	e13ffe17 	ldw	r4,-8(fp)
   16a40:	0011ad00 	call	11ad0 <OS_StrCopy>
   16a44:	e0bffb05 	stb	r2,-20(fp)
   16a48:	e0bff617 	ldw	r2,-40(fp)
   16a4c:	e0bffa15 	stw	r2,-24(fp)
   16a50:	e0bffa17 	ldw	r2,-24(fp)
   16a54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16a58:	e0bfff17 	ldw	r2,-4(fp)
   16a5c:	10000005 	stb	zero,0(r2)
    return (len);
   16a60:	e0bffb03 	ldbu	r2,-20(fp)
}
   16a64:	e037883a 	mov	sp,fp
   16a68:	dfc00117 	ldw	ra,4(sp)
   16a6c:	df000017 	ldw	fp,0(sp)
   16a70:	dec00204 	addi	sp,sp,8
   16a74:	f800283a 	ret

00016a78 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   16a78:	defff304 	addi	sp,sp,-52
   16a7c:	dfc00c15 	stw	ra,48(sp)
   16a80:	df000b15 	stw	fp,44(sp)
   16a84:	df000b04 	addi	fp,sp,44
   16a88:	2005883a 	mov	r2,r4
   16a8c:	e17ffe15 	stw	r5,-8(fp)
   16a90:	e1bfff15 	stw	r6,-4(fp)
   16a94:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   16a98:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   16a9c:	e0bfff17 	ldw	r2,-4(fp)
   16aa0:	10005c26 	beq	r2,zero,16c14 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   16aa4:	e0bffd03 	ldbu	r2,-12(fp)
   16aa8:	10800570 	cmpltui	r2,r2,21
   16aac:	1000071e 	bne	r2,zero,16acc <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   16ab0:	e0bffd03 	ldbu	r2,-12(fp)
   16ab4:	10803fe0 	cmpeqi	r2,r2,255
   16ab8:	1000041e 	bne	r2,zero,16acc <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   16abc:	e0bfff17 	ldw	r2,-4(fp)
   16ac0:	00c00a84 	movi	r3,42
   16ac4:	10c00005 	stb	r3,0(r2)
            return;
   16ac8:	00005306 	br	16c18 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   16acc:	e0bffe17 	ldw	r2,-8(fp)
   16ad0:	1000041e 	bne	r2,zero,16ae4 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   16ad4:	e0bfff17 	ldw	r2,-4(fp)
   16ad8:	00c00304 	movi	r3,12
   16adc:	10c00005 	stb	r3,0(r2)
        return;
   16ae0:	00004d06 	br	16c18 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   16ae4:	d0a82603 	ldbu	r2,-24424(gp)
   16ae8:	10803fcc 	andi	r2,r2,255
   16aec:	10000426 	beq	r2,zero,16b00 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   16af0:	e0bfff17 	ldw	r2,-4(fp)
   16af4:	00c00484 	movi	r3,18
   16af8:	10c00005 	stb	r3,0(r2)
        return;
   16afc:	00004606 	br	16c18 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16b00:	0005303a 	rdctl	r2,status
   16b04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b08:	e0fffc17 	ldw	r3,-16(fp)
   16b0c:	00bfff84 	movi	r2,-2
   16b10:	1884703a 	and	r2,r3,r2
   16b14:	1001703a 	wrctl	status,r2
  
  return context;
   16b18:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16b1c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   16b20:	e0bffd03 	ldbu	r2,-12(fp)
   16b24:	10803fd8 	cmpnei	r2,r2,255
   16b28:	1000031e 	bne	r2,zero,16b38 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   16b2c:	d0a82717 	ldw	r2,-24420(gp)
   16b30:	10800c83 	ldbu	r2,50(r2)
   16b34:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16b38:	e0fffd03 	ldbu	r3,-12(fp)
   16b3c:	008000b4 	movhi	r2,2
   16b40:	108bc004 	addi	r2,r2,12032
   16b44:	18c7883a 	add	r3,r3,r3
   16b48:	18c7883a 	add	r3,r3,r3
   16b4c:	10c5883a 	add	r2,r2,r3
   16b50:	10800017 	ldw	r2,0(r2)
   16b54:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   16b58:	e0bff717 	ldw	r2,-36(fp)
   16b5c:	1000081e 	bne	r2,zero,16b80 <OSTaskNameSet+0x108>
   16b60:	e0bff517 	ldw	r2,-44(fp)
   16b64:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16b68:	e0bff617 	ldw	r2,-40(fp)
   16b6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16b70:	e0bfff17 	ldw	r2,-4(fp)
   16b74:	00c010c4 	movi	r3,67
   16b78:	10c00005 	stb	r3,0(r2)
        return;
   16b7c:	00002606 	br	16c18 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   16b80:	e0bff717 	ldw	r2,-36(fp)
   16b84:	10800058 	cmpnei	r2,r2,1
   16b88:	1000081e 	bne	r2,zero,16bac <OSTaskNameSet+0x134>
   16b8c:	e0bff517 	ldw	r2,-44(fp)
   16b90:	e0bff815 	stw	r2,-32(fp)
   16b94:	e0bff817 	ldw	r2,-32(fp)
   16b98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16b9c:	e0bfff17 	ldw	r2,-4(fp)
   16ba0:	00c010c4 	movi	r3,67
   16ba4:	10c00005 	stb	r3,0(r2)
        return;
   16ba8:	00001b06 	br	16c18 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   16bac:	e13ffe17 	ldw	r4,-8(fp)
   16bb0:	0011b440 	call	11b44 <OS_StrLen>
   16bb4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   16bb8:	e0bffa03 	ldbu	r2,-24(fp)
   16bbc:	10800830 	cmpltui	r2,r2,32
   16bc0:	1000081e 	bne	r2,zero,16be4 <OSTaskNameSet+0x16c>
   16bc4:	e0bff517 	ldw	r2,-44(fp)
   16bc8:	e0bff915 	stw	r2,-28(fp)
   16bcc:	e0bff917 	ldw	r2,-28(fp)
   16bd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   16bd4:	e0bfff17 	ldw	r2,-4(fp)
   16bd8:	00c01044 	movi	r3,65
   16bdc:	10c00005 	stb	r3,0(r2)
        return;
   16be0:	00000d06 	br	16c18 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   16be4:	e0bff717 	ldw	r2,-36(fp)
   16be8:	10801304 	addi	r2,r2,76
   16bec:	e17ffe17 	ldw	r5,-8(fp)
   16bf0:	1009883a 	mov	r4,r2
   16bf4:	0011ad00 	call	11ad0 <OS_StrCopy>
   16bf8:	e0bff517 	ldw	r2,-44(fp)
   16bfc:	e0bffb15 	stw	r2,-20(fp)
   16c00:	e0bffb17 	ldw	r2,-20(fp)
   16c04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16c08:	e0bfff17 	ldw	r2,-4(fp)
   16c0c:	10000005 	stb	zero,0(r2)
   16c10:	00000106 	br	16c18 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   16c14:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   16c18:	e037883a 	mov	sp,fp
   16c1c:	dfc00117 	ldw	ra,4(sp)
   16c20:	df000017 	ldw	fp,0(sp)
   16c24:	dec00204 	addi	sp,sp,8
   16c28:	f800283a 	ret

00016c2c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   16c2c:	defff404 	addi	sp,sp,-48
   16c30:	dfc00b15 	stw	ra,44(sp)
   16c34:	df000a15 	stw	fp,40(sp)
   16c38:	df000a04 	addi	fp,sp,40
   16c3c:	2005883a 	mov	r2,r4
   16c40:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   16c44:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   16c48:	e0bfff03 	ldbu	r2,-4(fp)
   16c4c:	10800530 	cmpltui	r2,r2,20
   16c50:	1000021e 	bne	r2,zero,16c5c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   16c54:	00800a84 	movi	r2,42
   16c58:	00006406 	br	16dec <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c5c:	0005303a 	rdctl	r2,status
   16c60:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c64:	e0fffe17 	ldw	r3,-8(fp)
   16c68:	00bfff84 	movi	r2,-2
   16c6c:	1884703a 	and	r2,r3,r2
   16c70:	1001703a 	wrctl	status,r2
  
  return context;
   16c74:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16c78:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   16c7c:	e0ffff03 	ldbu	r3,-4(fp)
   16c80:	008000b4 	movhi	r2,2
   16c84:	108bc004 	addi	r2,r2,12032
   16c88:	18c7883a 	add	r3,r3,r3
   16c8c:	18c7883a 	add	r3,r3,r3
   16c90:	10c5883a 	add	r2,r2,r3
   16c94:	10800017 	ldw	r2,0(r2)
   16c98:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   16c9c:	e0bff817 	ldw	r2,-32(fp)
   16ca0:	1000061e 	bne	r2,zero,16cbc <OSTaskResume+0x90>
   16ca4:	e0bff617 	ldw	r2,-40(fp)
   16ca8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16cac:	e0bff717 	ldw	r2,-36(fp)
   16cb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   16cb4:	00801184 	movi	r2,70
   16cb8:	00004c06 	br	16dec <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   16cbc:	e0bff817 	ldw	r2,-32(fp)
   16cc0:	10800058 	cmpnei	r2,r2,1
   16cc4:	1000061e 	bne	r2,zero,16ce0 <OSTaskResume+0xb4>
   16cc8:	e0bff617 	ldw	r2,-40(fp)
   16ccc:	e0bff915 	stw	r2,-28(fp)
   16cd0:	e0bff917 	ldw	r2,-28(fp)
   16cd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16cd8:	008010c4 	movi	r2,67
   16cdc:	00004306 	br	16dec <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   16ce0:	e0bff817 	ldw	r2,-32(fp)
   16ce4:	10800c03 	ldbu	r2,48(r2)
   16ce8:	10803fcc 	andi	r2,r2,255
   16cec:	1080020c 	andi	r2,r2,8
   16cf0:	10003926 	beq	r2,zero,16dd8 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   16cf4:	e0bff817 	ldw	r2,-32(fp)
   16cf8:	10c00c03 	ldbu	r3,48(r2)
   16cfc:	00bffdc4 	movi	r2,-9
   16d00:	1884703a 	and	r2,r3,r2
   16d04:	1007883a 	mov	r3,r2
   16d08:	e0bff817 	ldw	r2,-32(fp)
   16d0c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   16d10:	e0bff817 	ldw	r2,-32(fp)
   16d14:	10800c03 	ldbu	r2,48(r2)
   16d18:	10803fcc 	andi	r2,r2,255
   16d1c:	1000281e 	bne	r2,zero,16dc0 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   16d20:	e0bff817 	ldw	r2,-32(fp)
   16d24:	10800b8b 	ldhu	r2,46(r2)
   16d28:	10bfffcc 	andi	r2,r2,65535
   16d2c:	10001f1e 	bne	r2,zero,16dac <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   16d30:	e0bff817 	ldw	r2,-32(fp)
   16d34:	10c00d83 	ldbu	r3,54(r2)
   16d38:	d0a82403 	ldbu	r2,-24432(gp)
   16d3c:	1884b03a 	or	r2,r3,r2
   16d40:	d0a82405 	stb	r2,-24432(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   16d44:	e0bff817 	ldw	r2,-32(fp)
   16d48:	10800d03 	ldbu	r2,52(r2)
   16d4c:	10c03fcc 	andi	r3,r2,255
   16d50:	e0bff817 	ldw	r2,-32(fp)
   16d54:	10800d03 	ldbu	r2,52(r2)
   16d58:	11003fcc 	andi	r4,r2,255
   16d5c:	d0a82444 	addi	r2,gp,-24431
   16d60:	2085883a 	add	r2,r4,r2
   16d64:	11000003 	ldbu	r4,0(r2)
   16d68:	e0bff817 	ldw	r2,-32(fp)
   16d6c:	10800d43 	ldbu	r2,53(r2)
   16d70:	2084b03a 	or	r2,r4,r2
   16d74:	1009883a 	mov	r4,r2
   16d78:	d0a82444 	addi	r2,gp,-24431
   16d7c:	1885883a 	add	r2,r3,r2
   16d80:	11000005 	stb	r4,0(r2)
   16d84:	e0bff617 	ldw	r2,-40(fp)
   16d88:	e0bffa15 	stw	r2,-24(fp)
   16d8c:	e0bffa17 	ldw	r2,-24(fp)
   16d90:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   16d94:	d0a81843 	ldbu	r2,-24479(gp)
   16d98:	10803fcc 	andi	r2,r2,255
   16d9c:	10800058 	cmpnei	r2,r2,1
   16da0:	10000b1e 	bne	r2,zero,16dd0 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   16da4:	001198c0 	call	1198c <OS_Sched>
   16da8:	00000906 	br	16dd0 <OSTaskResume+0x1a4>
   16dac:	e0bff617 	ldw	r2,-40(fp)
   16db0:	e0bffb15 	stw	r2,-20(fp)
   16db4:	e0bffb17 	ldw	r2,-20(fp)
   16db8:	1001703a 	wrctl	status,r2
   16dbc:	00000406 	br	16dd0 <OSTaskResume+0x1a4>
   16dc0:	e0bff617 	ldw	r2,-40(fp)
   16dc4:	e0bffc15 	stw	r2,-16(fp)
   16dc8:	e0bffc17 	ldw	r2,-16(fp)
   16dcc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   16dd0:	0005883a 	mov	r2,zero
   16dd4:	00000506 	br	16dec <OSTaskResume+0x1c0>
   16dd8:	e0bff617 	ldw	r2,-40(fp)
   16ddc:	e0bffd15 	stw	r2,-12(fp)
   16de0:	e0bffd17 	ldw	r2,-12(fp)
   16de4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   16de8:	00801104 	movi	r2,68
}
   16dec:	e037883a 	mov	sp,fp
   16df0:	dfc00117 	ldw	ra,4(sp)
   16df4:	df000017 	ldw	fp,0(sp)
   16df8:	dec00204 	addi	sp,sp,8
   16dfc:	f800283a 	ret

00016e00 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   16e00:	defff304 	addi	sp,sp,-52
   16e04:	df000c15 	stw	fp,48(sp)
   16e08:	df000c04 	addi	fp,sp,48
   16e0c:	2005883a 	mov	r2,r4
   16e10:	e17fff15 	stw	r5,-4(fp)
   16e14:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   16e18:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   16e1c:	e0bffe03 	ldbu	r2,-8(fp)
   16e20:	10800570 	cmpltui	r2,r2,21
   16e24:	1000051e 	bne	r2,zero,16e3c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   16e28:	e0bffe03 	ldbu	r2,-8(fp)
   16e2c:	10803fe0 	cmpeqi	r2,r2,255
   16e30:	1000021e 	bne	r2,zero,16e3c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   16e34:	00800a84 	movi	r2,42
   16e38:	00005d06 	br	16fb0 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   16e3c:	e0bfff17 	ldw	r2,-4(fp)
   16e40:	1000021e 	bne	r2,zero,16e4c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   16e44:	00800244 	movi	r2,9
   16e48:	00005906 	br	16fb0 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   16e4c:	e0bfff17 	ldw	r2,-4(fp)
   16e50:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   16e54:	e0bfff17 	ldw	r2,-4(fp)
   16e58:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16e5c:	0005303a 	rdctl	r2,status
   16e60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16e64:	e0fffd17 	ldw	r3,-12(fp)
   16e68:	00bfff84 	movi	r2,-2
   16e6c:	1884703a 	and	r2,r3,r2
   16e70:	1001703a 	wrctl	status,r2
  
  return context;
   16e74:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   16e78:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   16e7c:	e0bffe03 	ldbu	r2,-8(fp)
   16e80:	10803fd8 	cmpnei	r2,r2,255
   16e84:	1000031e 	bne	r2,zero,16e94 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   16e88:	d0a82717 	ldw	r2,-24420(gp)
   16e8c:	10800c83 	ldbu	r2,50(r2)
   16e90:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16e94:	e0fffe03 	ldbu	r3,-8(fp)
   16e98:	008000b4 	movhi	r2,2
   16e9c:	108bc004 	addi	r2,r2,12032
   16ea0:	18c7883a 	add	r3,r3,r3
   16ea4:	18c7883a 	add	r3,r3,r3
   16ea8:	10c5883a 	add	r2,r2,r3
   16eac:	10800017 	ldw	r2,0(r2)
   16eb0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   16eb4:	e0bff817 	ldw	r2,-32(fp)
   16eb8:	1000061e 	bne	r2,zero,16ed4 <OSTaskStkChk+0xd4>
   16ebc:	e0bff617 	ldw	r2,-40(fp)
   16ec0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16ec4:	e0bff717 	ldw	r2,-36(fp)
   16ec8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16ecc:	008010c4 	movi	r2,67
   16ed0:	00003706 	br	16fb0 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   16ed4:	e0bff817 	ldw	r2,-32(fp)
   16ed8:	10800058 	cmpnei	r2,r2,1
   16edc:	1000061e 	bne	r2,zero,16ef8 <OSTaskStkChk+0xf8>
   16ee0:	e0bff617 	ldw	r2,-40(fp)
   16ee4:	e0bff915 	stw	r2,-28(fp)
   16ee8:	e0bff917 	ldw	r2,-28(fp)
   16eec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16ef0:	008010c4 	movi	r2,67
   16ef4:	00002e06 	br	16fb0 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   16ef8:	e0bff817 	ldw	r2,-32(fp)
   16efc:	1080040b 	ldhu	r2,16(r2)
   16f00:	10bfffcc 	andi	r2,r2,65535
   16f04:	1080004c 	andi	r2,r2,1
   16f08:	1000061e 	bne	r2,zero,16f24 <OSTaskStkChk+0x124>
   16f0c:	e0bff617 	ldw	r2,-40(fp)
   16f10:	e0bffa15 	stw	r2,-24(fp)
   16f14:	e0bffa17 	ldw	r2,-24(fp)
   16f18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   16f1c:	00801144 	movi	r2,69
   16f20:	00002306 	br	16fb0 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   16f24:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   16f28:	e0bff817 	ldw	r2,-32(fp)
   16f2c:	10800317 	ldw	r2,12(r2)
   16f30:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   16f34:	e0bff817 	ldw	r2,-32(fp)
   16f38:	10800217 	ldw	r2,8(r2)
   16f3c:	e0bff415 	stw	r2,-48(fp)
   16f40:	e0bff617 	ldw	r2,-40(fp)
   16f44:	e0bffb15 	stw	r2,-20(fp)
   16f48:	e0bffb17 	ldw	r2,-20(fp)
   16f4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   16f50:	00000306 	br	16f60 <OSTaskStkChk+0x160>
        nfree++;
   16f54:	e0bff517 	ldw	r2,-44(fp)
   16f58:	10800044 	addi	r2,r2,1
   16f5c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   16f60:	e0bff417 	ldw	r2,-48(fp)
   16f64:	10c00104 	addi	r3,r2,4
   16f68:	e0fff415 	stw	r3,-48(fp)
   16f6c:	10800017 	ldw	r2,0(r2)
   16f70:	103ff826 	beq	r2,zero,16f54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016f54>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   16f74:	e0bff517 	ldw	r2,-44(fp)
   16f78:	1085883a 	add	r2,r2,r2
   16f7c:	1085883a 	add	r2,r2,r2
   16f80:	1007883a 	mov	r3,r2
   16f84:	e0bfff17 	ldw	r2,-4(fp)
   16f88:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   16f8c:	e0fffc17 	ldw	r3,-16(fp)
   16f90:	e0bff517 	ldw	r2,-44(fp)
   16f94:	1885c83a 	sub	r2,r3,r2
   16f98:	1085883a 	add	r2,r2,r2
   16f9c:	1085883a 	add	r2,r2,r2
   16fa0:	1007883a 	mov	r3,r2
   16fa4:	e0bfff17 	ldw	r2,-4(fp)
   16fa8:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   16fac:	0005883a 	mov	r2,zero
}
   16fb0:	e037883a 	mov	sp,fp
   16fb4:	df000017 	ldw	fp,0(sp)
   16fb8:	dec00104 	addi	sp,sp,4
   16fbc:	f800283a 	ret

00016fc0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   16fc0:	defff504 	addi	sp,sp,-44
   16fc4:	dfc00a15 	stw	ra,40(sp)
   16fc8:	df000915 	stw	fp,36(sp)
   16fcc:	df000904 	addi	fp,sp,36
   16fd0:	2005883a 	mov	r2,r4
   16fd4:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16fd8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   16fdc:	e0bfff03 	ldbu	r2,-4(fp)
   16fe0:	10800518 	cmpnei	r2,r2,20
   16fe4:	1000021e 	bne	r2,zero,16ff0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   16fe8:	008011c4 	movi	r2,71
   16fec:	00006806 	br	17190 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   16ff0:	e0bfff03 	ldbu	r2,-4(fp)
   16ff4:	10800530 	cmpltui	r2,r2,20
   16ff8:	1000051e 	bne	r2,zero,17010 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   16ffc:	e0bfff03 	ldbu	r2,-4(fp)
   17000:	10803fe0 	cmpeqi	r2,r2,255
   17004:	1000021e 	bne	r2,zero,17010 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   17008:	00800a84 	movi	r2,42
   1700c:	00006006 	br	17190 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17010:	0005303a 	rdctl	r2,status
   17014:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17018:	e0fffe17 	ldw	r3,-8(fp)
   1701c:	00bfff84 	movi	r2,-2
   17020:	1884703a 	and	r2,r3,r2
   17024:	1001703a 	wrctl	status,r2
  
  return context;
   17028:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1702c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   17030:	e0bfff03 	ldbu	r2,-4(fp)
   17034:	10803fd8 	cmpnei	r2,r2,255
   17038:	1000061e 	bne	r2,zero,17054 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   1703c:	d0a82717 	ldw	r2,-24420(gp)
   17040:	10800c83 	ldbu	r2,50(r2)
   17044:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   17048:	00800044 	movi	r2,1
   1704c:	e0bff705 	stb	r2,-36(fp)
   17050:	00000906 	br	17078 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   17054:	d0a82717 	ldw	r2,-24420(gp)
   17058:	10800c83 	ldbu	r2,50(r2)
   1705c:	10c03fcc 	andi	r3,r2,255
   17060:	e0bfff03 	ldbu	r2,-4(fp)
   17064:	1880031e 	bne	r3,r2,17074 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   17068:	00800044 	movi	r2,1
   1706c:	e0bff705 	stb	r2,-36(fp)
   17070:	00000106 	br	17078 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   17074:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17078:	e0ffff03 	ldbu	r3,-4(fp)
   1707c:	008000b4 	movhi	r2,2
   17080:	108bc004 	addi	r2,r2,12032
   17084:	18c7883a 	add	r3,r3,r3
   17088:	18c7883a 	add	r3,r3,r3
   1708c:	10c5883a 	add	r2,r2,r3
   17090:	10800017 	ldw	r2,0(r2)
   17094:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   17098:	e0bffa17 	ldw	r2,-24(fp)
   1709c:	1000061e 	bne	r2,zero,170b8 <OSTaskSuspend+0xf8>
   170a0:	e0bff817 	ldw	r2,-32(fp)
   170a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   170a8:	e0bff917 	ldw	r2,-28(fp)
   170ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   170b0:	00801204 	movi	r2,72
   170b4:	00003606 	br	17190 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   170b8:	e0bffa17 	ldw	r2,-24(fp)
   170bc:	10800058 	cmpnei	r2,r2,1
   170c0:	1000061e 	bne	r2,zero,170dc <OSTaskSuspend+0x11c>
   170c4:	e0bff817 	ldw	r2,-32(fp)
   170c8:	e0bffb15 	stw	r2,-20(fp)
   170cc:	e0bffb17 	ldw	r2,-20(fp)
   170d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   170d4:	008010c4 	movi	r2,67
   170d8:	00002d06 	br	17190 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   170dc:	e0bffa17 	ldw	r2,-24(fp)
   170e0:	10800d03 	ldbu	r2,52(r2)
   170e4:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   170e8:	e0fffd03 	ldbu	r3,-12(fp)
   170ec:	e13ffd03 	ldbu	r4,-12(fp)
   170f0:	d0a82444 	addi	r2,gp,-24431
   170f4:	2085883a 	add	r2,r4,r2
   170f8:	10800003 	ldbu	r2,0(r2)
   170fc:	1009883a 	mov	r4,r2
   17100:	e0bffa17 	ldw	r2,-24(fp)
   17104:	10800d43 	ldbu	r2,53(r2)
   17108:	0084303a 	nor	r2,zero,r2
   1710c:	2084703a 	and	r2,r4,r2
   17110:	1009883a 	mov	r4,r2
   17114:	d0a82444 	addi	r2,gp,-24431
   17118:	1885883a 	add	r2,r3,r2
   1711c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   17120:	e0fffd03 	ldbu	r3,-12(fp)
   17124:	d0a82444 	addi	r2,gp,-24431
   17128:	1885883a 	add	r2,r3,r2
   1712c:	10800003 	ldbu	r2,0(r2)
   17130:	10803fcc 	andi	r2,r2,255
   17134:	1000071e 	bne	r2,zero,17154 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   17138:	e0bffa17 	ldw	r2,-24(fp)
   1713c:	10800d83 	ldbu	r2,54(r2)
   17140:	0084303a 	nor	r2,zero,r2
   17144:	1007883a 	mov	r3,r2
   17148:	d0a82403 	ldbu	r2,-24432(gp)
   1714c:	1884703a 	and	r2,r3,r2
   17150:	d0a82405 	stb	r2,-24432(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   17154:	e0bffa17 	ldw	r2,-24(fp)
   17158:	10800c03 	ldbu	r2,48(r2)
   1715c:	10800214 	ori	r2,r2,8
   17160:	1007883a 	mov	r3,r2
   17164:	e0bffa17 	ldw	r2,-24(fp)
   17168:	10c00c05 	stb	r3,48(r2)
   1716c:	e0bff817 	ldw	r2,-32(fp)
   17170:	e0bffc15 	stw	r2,-16(fp)
   17174:	e0bffc17 	ldw	r2,-16(fp)
   17178:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1717c:	e0bff703 	ldbu	r2,-36(fp)
   17180:	10800058 	cmpnei	r2,r2,1
   17184:	1000011e 	bne	r2,zero,1718c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   17188:	001198c0 	call	1198c <OS_Sched>
    }
    return (OS_ERR_NONE);
   1718c:	0005883a 	mov	r2,zero
}
   17190:	e037883a 	mov	sp,fp
   17194:	dfc00117 	ldw	ra,4(sp)
   17198:	df000017 	ldw	fp,0(sp)
   1719c:	dec00204 	addi	sp,sp,8
   171a0:	f800283a 	ret

000171a4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   171a4:	defff604 	addi	sp,sp,-40
   171a8:	dfc00915 	stw	ra,36(sp)
   171ac:	df000815 	stw	fp,32(sp)
   171b0:	df000804 	addi	fp,sp,32
   171b4:	2005883a 	mov	r2,r4
   171b8:	e17fff15 	stw	r5,-4(fp)
   171bc:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   171c0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   171c4:	e0bffe03 	ldbu	r2,-8(fp)
   171c8:	10800570 	cmpltui	r2,r2,21
   171cc:	1000051e 	bne	r2,zero,171e4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   171d0:	e0bffe03 	ldbu	r2,-8(fp)
   171d4:	10803fe0 	cmpeqi	r2,r2,255
   171d8:	1000021e 	bne	r2,zero,171e4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   171dc:	00800a84 	movi	r2,42
   171e0:	00003406 	br	172b4 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   171e4:	e0bfff17 	ldw	r2,-4(fp)
   171e8:	1000021e 	bne	r2,zero,171f4 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   171ec:	00800244 	movi	r2,9
   171f0:	00003006 	br	172b4 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   171f4:	0005303a 	rdctl	r2,status
   171f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   171fc:	e0fffd17 	ldw	r3,-12(fp)
   17200:	00bfff84 	movi	r2,-2
   17204:	1884703a 	and	r2,r3,r2
   17208:	1001703a 	wrctl	status,r2
  
  return context;
   1720c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17210:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   17214:	e0bffe03 	ldbu	r2,-8(fp)
   17218:	10803fd8 	cmpnei	r2,r2,255
   1721c:	1000031e 	bne	r2,zero,1722c <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   17220:	d0a82717 	ldw	r2,-24420(gp)
   17224:	10800c83 	ldbu	r2,50(r2)
   17228:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1722c:	e0fffe03 	ldbu	r3,-8(fp)
   17230:	008000b4 	movhi	r2,2
   17234:	108bc004 	addi	r2,r2,12032
   17238:	18c7883a 	add	r3,r3,r3
   1723c:	18c7883a 	add	r3,r3,r3
   17240:	10c5883a 	add	r2,r2,r3
   17244:	10800017 	ldw	r2,0(r2)
   17248:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1724c:	e0bffa17 	ldw	r2,-24(fp)
   17250:	1000061e 	bne	r2,zero,1726c <OSTaskQuery+0xc8>
   17254:	e0bff817 	ldw	r2,-32(fp)
   17258:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1725c:	e0bff917 	ldw	r2,-28(fp)
   17260:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   17264:	00800a44 	movi	r2,41
   17268:	00001206 	br	172b4 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1726c:	e0bffa17 	ldw	r2,-24(fp)
   17270:	10800058 	cmpnei	r2,r2,1
   17274:	1000061e 	bne	r2,zero,17290 <OSTaskQuery+0xec>
   17278:	e0bff817 	ldw	r2,-32(fp)
   1727c:	e0bffb15 	stw	r2,-20(fp)
   17280:	e0bffb17 	ldw	r2,-20(fp)
   17284:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17288:	008010c4 	movi	r2,67
   1728c:	00000906 	br	172b4 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   17290:	01801b04 	movi	r6,108
   17294:	e17ffa17 	ldw	r5,-24(fp)
   17298:	e13fff17 	ldw	r4,-4(fp)
   1729c:	00119240 	call	11924 <OS_MemCopy>
   172a0:	e0bff817 	ldw	r2,-32(fp)
   172a4:	e0bffc15 	stw	r2,-16(fp)
   172a8:	e0bffc17 	ldw	r2,-16(fp)
   172ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   172b0:	0005883a 	mov	r2,zero
}
   172b4:	e037883a 	mov	sp,fp
   172b8:	dfc00117 	ldw	ra,4(sp)
   172bc:	df000017 	ldw	fp,0(sp)
   172c0:	dec00204 	addi	sp,sp,8
   172c4:	f800283a 	ret

000172c8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   172c8:	defffc04 	addi	sp,sp,-16
   172cc:	df000315 	stw	fp,12(sp)
   172d0:	df000304 	addi	fp,sp,12
   172d4:	e13ffd15 	stw	r4,-12(fp)
   172d8:	e17ffe15 	stw	r5,-8(fp)
   172dc:	3005883a 	mov	r2,r6
   172e0:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   172e4:	e0bfff0b 	ldhu	r2,-4(fp)
   172e8:	1080004c 	andi	r2,r2,1
   172ec:	10000d26 	beq	r2,zero,17324 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   172f0:	e0bfff0b 	ldhu	r2,-4(fp)
   172f4:	1080008c 	andi	r2,r2,2
   172f8:	10000a26 	beq	r2,zero,17324 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   172fc:	00000706 	br	1731c <OS_TaskStkClr+0x54>
                size--;
   17300:	e0bffe17 	ldw	r2,-8(fp)
   17304:	10bfffc4 	addi	r2,r2,-1
   17308:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1730c:	e0bffd17 	ldw	r2,-12(fp)
   17310:	10c00104 	addi	r3,r2,4
   17314:	e0fffd15 	stw	r3,-12(fp)
   17318:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1731c:	e0bffe17 	ldw	r2,-8(fp)
   17320:	103ff71e 	bne	r2,zero,17300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017300>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   17324:	0001883a 	nop
   17328:	e037883a 	mov	sp,fp
   1732c:	df000017 	ldw	fp,0(sp)
   17330:	dec00104 	addi	sp,sp,4
   17334:	f800283a 	ret

00017338 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   17338:	defff904 	addi	sp,sp,-28
   1733c:	dfc00615 	stw	ra,24(sp)
   17340:	df000515 	stw	fp,20(sp)
   17344:	df000504 	addi	fp,sp,20
   17348:	2005883a 	mov	r2,r4
   1734c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17350:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17354:	d0a82603 	ldbu	r2,-24424(gp)
   17358:	10803fcc 	andi	r2,r2,255
   1735c:	1000311e 	bne	r2,zero,17424 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   17360:	e0bfff0b 	ldhu	r2,-4(fp)
   17364:	10003026 	beq	r2,zero,17428 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17368:	0005303a 	rdctl	r2,status
   1736c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17370:	e0fffe17 	ldw	r3,-8(fp)
   17374:	00bfff84 	movi	r2,-2
   17378:	1884703a 	and	r2,r3,r2
   1737c:	1001703a 	wrctl	status,r2
  
  return context;
   17380:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   17384:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   17388:	d0a82717 	ldw	r2,-24420(gp)
   1738c:	10800d03 	ldbu	r2,52(r2)
   17390:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   17394:	e0fffd03 	ldbu	r3,-12(fp)
   17398:	e13ffd03 	ldbu	r4,-12(fp)
   1739c:	d0a82444 	addi	r2,gp,-24431
   173a0:	2085883a 	add	r2,r4,r2
   173a4:	10800003 	ldbu	r2,0(r2)
   173a8:	1009883a 	mov	r4,r2
   173ac:	d0a82717 	ldw	r2,-24420(gp)
   173b0:	10800d43 	ldbu	r2,53(r2)
   173b4:	0084303a 	nor	r2,zero,r2
   173b8:	2084703a 	and	r2,r4,r2
   173bc:	1009883a 	mov	r4,r2
   173c0:	d0a82444 	addi	r2,gp,-24431
   173c4:	1885883a 	add	r2,r3,r2
   173c8:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   173cc:	e0fffd03 	ldbu	r3,-12(fp)
   173d0:	d0a82444 	addi	r2,gp,-24431
   173d4:	1885883a 	add	r2,r3,r2
   173d8:	10800003 	ldbu	r2,0(r2)
   173dc:	10803fcc 	andi	r2,r2,255
   173e0:	1000071e 	bne	r2,zero,17400 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   173e4:	d0a82717 	ldw	r2,-24420(gp)
   173e8:	10800d83 	ldbu	r2,54(r2)
   173ec:	0084303a 	nor	r2,zero,r2
   173f0:	1007883a 	mov	r3,r2
   173f4:	d0a82403 	ldbu	r2,-24432(gp)
   173f8:	1884703a 	and	r2,r3,r2
   173fc:	d0a82405 	stb	r2,-24432(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   17400:	d0a82717 	ldw	r2,-24420(gp)
   17404:	e0ffff0b 	ldhu	r3,-4(fp)
   17408:	10c00b8d 	sth	r3,46(r2)
   1740c:	e0bffb17 	ldw	r2,-20(fp)
   17410:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17414:	e0bffc17 	ldw	r2,-16(fp)
   17418:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1741c:	001198c0 	call	1198c <OS_Sched>
   17420:	00000106 	br	17428 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   17424:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   17428:	e037883a 	mov	sp,fp
   1742c:	dfc00117 	ldw	ra,4(sp)
   17430:	df000017 	ldw	fp,0(sp)
   17434:	dec00204 	addi	sp,sp,8
   17438:	f800283a 	ret

0001743c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1743c:	defff804 	addi	sp,sp,-32
   17440:	dfc00715 	stw	ra,28(sp)
   17444:	df000615 	stw	fp,24(sp)
   17448:	df000604 	addi	fp,sp,24
   1744c:	2015883a 	mov	r10,r4
   17450:	2809883a 	mov	r4,r5
   17454:	3007883a 	mov	r3,r6
   17458:	3805883a 	mov	r2,r7
   1745c:	e2bffc05 	stb	r10,-16(fp)
   17460:	e13ffd05 	stb	r4,-12(fp)
   17464:	e0fffe05 	stb	r3,-8(fp)
   17468:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1746c:	d0a82603 	ldbu	r2,-24424(gp)
   17470:	10803fcc 	andi	r2,r2,255
   17474:	10000226 	beq	r2,zero,17480 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   17478:	00801544 	movi	r2,85
   1747c:	00004206 	br	17588 <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   17480:	e0bffc03 	ldbu	r2,-16(fp)
   17484:	1000081e 	bne	r2,zero,174a8 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   17488:	e0bffd03 	ldbu	r2,-12(fp)
   1748c:	1000061e 	bne	r2,zero,174a8 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   17490:	e0bffe03 	ldbu	r2,-8(fp)
   17494:	1000041e 	bne	r2,zero,174a8 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   17498:	e0bfff0b 	ldhu	r2,-4(fp)
   1749c:	1000021e 	bne	r2,zero,174a8 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   174a0:	00801504 	movi	r2,84
   174a4:	00003806 	br	17588 <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   174a8:	e0bffd03 	ldbu	r2,-12(fp)
   174ac:	10800f30 	cmpltui	r2,r2,60
   174b0:	1000021e 	bne	r2,zero,174bc <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   174b4:	00801444 	movi	r2,81
   174b8:	00003306 	br	17588 <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   174bc:	e0bffe03 	ldbu	r2,-8(fp)
   174c0:	10800f30 	cmpltui	r2,r2,60
   174c4:	1000021e 	bne	r2,zero,174d0 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   174c8:	00801484 	movi	r2,82
   174cc:	00002e06 	br	17588 <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   174d0:	e0bfff0b 	ldhu	r2,-4(fp)
   174d4:	1080fa30 	cmpltui	r2,r2,1000
   174d8:	1000021e 	bne	r2,zero,174e4 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   174dc:	008014c4 	movi	r2,83
   174e0:	00002906 	br	17588 <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   174e4:	e0bffc03 	ldbu	r2,-16(fp)
   174e8:	10c38424 	muli	r3,r2,3600
   174ec:	e0bffd03 	ldbu	r2,-12(fp)
   174f0:	10800f24 	muli	r2,r2,60
   174f4:	1887883a 	add	r3,r3,r2
   174f8:	e0bffe03 	ldbu	r2,-8(fp)
   174fc:	1885883a 	add	r2,r3,r2
   17500:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   17504:	e0bfff0b 	ldhu	r2,-4(fp)
   17508:	10800f84 	addi	r2,r2,62
   1750c:	100690fa 	slli	r3,r2,3
   17510:	008418b4 	movhi	r2,4194
   17514:	109374c4 	addi	r2,r2,19923
   17518:	188a383a 	mulxuu	r5,r3,r2
   1751c:	1885383a 	mul	r2,r3,r2
   17520:	1011883a 	mov	r8,r2
   17524:	2813883a 	mov	r9,r5
   17528:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1752c:	2085883a 	add	r2,r4,r2
   17530:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   17534:	e0bffb17 	ldw	r2,-20(fp)
   17538:	1004d43a 	srli	r2,r2,16
   1753c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   17540:	e0bffb17 	ldw	r2,-20(fp)
   17544:	10bfffcc 	andi	r2,r2,65535
   17548:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1754c:	e0bffb17 	ldw	r2,-20(fp)
   17550:	10bfffcc 	andi	r2,r2,65535
   17554:	1009883a 	mov	r4,r2
   17558:	00173380 	call	17338 <OSTimeDly>
    while (loops > 0) {
   1755c:	00000706 	br	1757c <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   17560:	01200014 	movui	r4,32768
   17564:	00173380 	call	17338 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   17568:	01200014 	movui	r4,32768
   1756c:	00173380 	call	17338 <OSTimeDly>
        loops--;
   17570:	e0bffa0b 	ldhu	r2,-24(fp)
   17574:	10bfffc4 	addi	r2,r2,-1
   17578:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1757c:	e0bffa0b 	ldhu	r2,-24(fp)
   17580:	103ff71e 	bne	r2,zero,17560 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017560>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   17584:	0005883a 	mov	r2,zero
}
   17588:	e037883a 	mov	sp,fp
   1758c:	dfc00117 	ldw	ra,4(sp)
   17590:	df000017 	ldw	fp,0(sp)
   17594:	dec00204 	addi	sp,sp,8
   17598:	f800283a 	ret

0001759c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1759c:	defff504 	addi	sp,sp,-44
   175a0:	dfc00a15 	stw	ra,40(sp)
   175a4:	df000915 	stw	fp,36(sp)
   175a8:	df000904 	addi	fp,sp,36
   175ac:	2005883a 	mov	r2,r4
   175b0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   175b4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   175b8:	e0bfff03 	ldbu	r2,-4(fp)
   175bc:	10800530 	cmpltui	r2,r2,20
   175c0:	1000021e 	bne	r2,zero,175cc <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   175c4:	00800a84 	movi	r2,42
   175c8:	00006406 	br	1775c <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   175cc:	0005303a 	rdctl	r2,status
   175d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   175d4:	e0fffe17 	ldw	r3,-8(fp)
   175d8:	00bfff84 	movi	r2,-2
   175dc:	1884703a 	and	r2,r3,r2
   175e0:	1001703a 	wrctl	status,r2
  
  return context;
   175e4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   175e8:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   175ec:	e0ffff03 	ldbu	r3,-4(fp)
   175f0:	008000b4 	movhi	r2,2
   175f4:	108bc004 	addi	r2,r2,12032
   175f8:	18c7883a 	add	r3,r3,r3
   175fc:	18c7883a 	add	r3,r3,r3
   17600:	10c5883a 	add	r2,r2,r3
   17604:	10800017 	ldw	r2,0(r2)
   17608:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   1760c:	e0bff917 	ldw	r2,-28(fp)
   17610:	1000061e 	bne	r2,zero,1762c <OSTimeDlyResume+0x90>
   17614:	e0bff717 	ldw	r2,-36(fp)
   17618:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1761c:	e0bff817 	ldw	r2,-32(fp)
   17620:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   17624:	008010c4 	movi	r2,67
   17628:	00004c06 	br	1775c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1762c:	e0bff917 	ldw	r2,-28(fp)
   17630:	10800058 	cmpnei	r2,r2,1
   17634:	1000061e 	bne	r2,zero,17650 <OSTimeDlyResume+0xb4>
   17638:	e0bff717 	ldw	r2,-36(fp)
   1763c:	e0bffa15 	stw	r2,-24(fp)
   17640:	e0bffa17 	ldw	r2,-24(fp)
   17644:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   17648:	008010c4 	movi	r2,67
   1764c:	00004306 	br	1775c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   17650:	e0bff917 	ldw	r2,-28(fp)
   17654:	10800b8b 	ldhu	r2,46(r2)
   17658:	10bfffcc 	andi	r2,r2,65535
   1765c:	1000061e 	bne	r2,zero,17678 <OSTimeDlyResume+0xdc>
   17660:	e0bff717 	ldw	r2,-36(fp)
   17664:	e0bffb15 	stw	r2,-20(fp)
   17668:	e0bffb17 	ldw	r2,-20(fp)
   1766c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   17670:	00801404 	movi	r2,80
   17674:	00003906 	br	1775c <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   17678:	e0bff917 	ldw	r2,-28(fp)
   1767c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   17680:	e0bff917 	ldw	r2,-28(fp)
   17684:	10800c03 	ldbu	r2,48(r2)
   17688:	10803fcc 	andi	r2,r2,255
   1768c:	10800dcc 	andi	r2,r2,55
   17690:	10000b26 	beq	r2,zero,176c0 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   17694:	e0bff917 	ldw	r2,-28(fp)
   17698:	10c00c03 	ldbu	r3,48(r2)
   1769c:	00bff204 	movi	r2,-56
   176a0:	1884703a 	and	r2,r3,r2
   176a4:	1007883a 	mov	r3,r2
   176a8:	e0bff917 	ldw	r2,-28(fp)
   176ac:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   176b0:	e0bff917 	ldw	r2,-28(fp)
   176b4:	00c00044 	movi	r3,1
   176b8:	10c00c45 	stb	r3,49(r2)
   176bc:	00000206 	br	176c8 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   176c0:	e0bff917 	ldw	r2,-28(fp)
   176c4:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   176c8:	e0bff917 	ldw	r2,-28(fp)
   176cc:	10800c03 	ldbu	r2,48(r2)
   176d0:	10803fcc 	andi	r2,r2,255
   176d4:	1080020c 	andi	r2,r2,8
   176d8:	10001b1e 	bne	r2,zero,17748 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   176dc:	e0bff917 	ldw	r2,-28(fp)
   176e0:	10c00d83 	ldbu	r3,54(r2)
   176e4:	d0a82403 	ldbu	r2,-24432(gp)
   176e8:	1884b03a 	or	r2,r3,r2
   176ec:	d0a82405 	stb	r2,-24432(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   176f0:	e0bff917 	ldw	r2,-28(fp)
   176f4:	10800d03 	ldbu	r2,52(r2)
   176f8:	10c03fcc 	andi	r3,r2,255
   176fc:	e0bff917 	ldw	r2,-28(fp)
   17700:	10800d03 	ldbu	r2,52(r2)
   17704:	11003fcc 	andi	r4,r2,255
   17708:	d0a82444 	addi	r2,gp,-24431
   1770c:	2085883a 	add	r2,r4,r2
   17710:	11000003 	ldbu	r4,0(r2)
   17714:	e0bff917 	ldw	r2,-28(fp)
   17718:	10800d43 	ldbu	r2,53(r2)
   1771c:	2084b03a 	or	r2,r4,r2
   17720:	1009883a 	mov	r4,r2
   17724:	d0a82444 	addi	r2,gp,-24431
   17728:	1885883a 	add	r2,r3,r2
   1772c:	11000005 	stb	r4,0(r2)
   17730:	e0bff717 	ldw	r2,-36(fp)
   17734:	e0bffc15 	stw	r2,-16(fp)
   17738:	e0bffc17 	ldw	r2,-16(fp)
   1773c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   17740:	001198c0 	call	1198c <OS_Sched>
   17744:	00000406 	br	17758 <OSTimeDlyResume+0x1bc>
   17748:	e0bff717 	ldw	r2,-36(fp)
   1774c:	e0bffd15 	stw	r2,-12(fp)
   17750:	e0bffd17 	ldw	r2,-12(fp)
   17754:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   17758:	0005883a 	mov	r2,zero
}
   1775c:	e037883a 	mov	sp,fp
   17760:	dfc00117 	ldw	ra,4(sp)
   17764:	df000017 	ldw	fp,0(sp)
   17768:	dec00204 	addi	sp,sp,8
   1776c:	f800283a 	ret

00017770 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   17770:	defffb04 	addi	sp,sp,-20
   17774:	df000415 	stw	fp,16(sp)
   17778:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1777c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17780:	0005303a 	rdctl	r2,status
   17784:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17788:	e0fffe17 	ldw	r3,-8(fp)
   1778c:	00bfff84 	movi	r2,-2
   17790:	1884703a 	and	r2,r3,r2
   17794:	1001703a 	wrctl	status,r2
  
  return context;
   17798:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1779c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   177a0:	d0a82817 	ldw	r2,-24416(gp)
   177a4:	e0bffd15 	stw	r2,-12(fp)
   177a8:	e0bffc17 	ldw	r2,-16(fp)
   177ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   177b0:	e0bfff17 	ldw	r2,-4(fp)
   177b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   177b8:	e0bffd17 	ldw	r2,-12(fp)
}
   177bc:	e037883a 	mov	sp,fp
   177c0:	df000017 	ldw	fp,0(sp)
   177c4:	dec00104 	addi	sp,sp,4
   177c8:	f800283a 	ret

000177cc <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   177cc:	defffb04 	addi	sp,sp,-20
   177d0:	df000415 	stw	fp,16(sp)
   177d4:	df000404 	addi	fp,sp,16
   177d8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   177dc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   177e0:	0005303a 	rdctl	r2,status
   177e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   177e8:	e0fffd17 	ldw	r3,-12(fp)
   177ec:	00bfff84 	movi	r2,-2
   177f0:	1884703a 	and	r2,r3,r2
   177f4:	1001703a 	wrctl	status,r2
  
  return context;
   177f8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   177fc:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   17800:	e0bfff17 	ldw	r2,-4(fp)
   17804:	d0a82815 	stw	r2,-24416(gp)
   17808:	e0bffc17 	ldw	r2,-16(fp)
   1780c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17810:	e0bffe17 	ldw	r2,-8(fp)
   17814:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   17818:	0001883a 	nop
   1781c:	e037883a 	mov	sp,fp
   17820:	df000017 	ldw	fp,0(sp)
   17824:	dec00104 	addi	sp,sp,4
   17828:	f800283a 	ret

0001782c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1782c:	defffd04 	addi	sp,sp,-12
   17830:	dfc00215 	stw	ra,8(sp)
   17834:	df000115 	stw	fp,4(sp)
   17838:	df000104 	addi	fp,sp,4
   1783c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   17840:	d1600804 	addi	r5,gp,-32736
   17844:	e13fff17 	ldw	r4,-4(fp)
   17848:	001a3080 	call	1a308 <alt_dev_llist_insert>
}
   1784c:	e037883a 	mov	sp,fp
   17850:	dfc00117 	ldw	ra,4(sp)
   17854:	df000017 	ldw	fp,0(sp)
   17858:	dec00204 	addi	sp,sp,8
   1785c:	f800283a 	ret

00017860 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   17860:	defffd04 	addi	sp,sp,-12
   17864:	dfc00215 	stw	ra,8(sp)
   17868:	df000115 	stw	fp,4(sp)
   1786c:	df000104 	addi	fp,sp,4
   17870:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   17874:	001abe80 	call	1abe8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   17878:	00800044 	movi	r2,1
   1787c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   17880:	0001883a 	nop
   17884:	e037883a 	mov	sp,fp
   17888:	dfc00117 	ldw	ra,4(sp)
   1788c:	df000017 	ldw	fp,0(sp)
   17890:	dec00204 	addi	sp,sp,8
   17894:	f800283a 	ret

00017898 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   17898:	defffc04 	addi	sp,sp,-16
   1789c:	dfc00315 	stw	ra,12(sp)
   178a0:	df000215 	stw	fp,8(sp)
   178a4:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   178a8:	01c00204 	movi	r7,8
   178ac:	000d883a 	mov	r6,zero
   178b0:	000b883a 	mov	r5,zero
   178b4:	01040034 	movhi	r4,4096
   178b8:	21080004 	addi	r4,r4,8192
   178bc:	0018e4c0 	call	18e4c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   178c0:	01800204 	movi	r6,8
   178c4:	000b883a 	mov	r5,zero
   178c8:	010000b4 	movhi	r4,2
   178cc:	21320404 	addi	r4,r4,-14320
   178d0:	00182100 	call	18210 <altera_avalon_jtag_uart_init>
   178d4:	010000b4 	movhi	r4,2
   178d8:	2131fa04 	addi	r4,r4,-14360
   178dc:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   178e0:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   178e4:	010000b4 	movhi	r4,2
   178e8:	21361504 	addi	r4,r4,-10156
   178ec:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   178f0:	010000b4 	movhi	r4,2
   178f4:	21362104 	addi	r4,r4,-10108
   178f8:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   178fc:	010000b4 	movhi	r4,2
   17900:	21362d04 	addi	r4,r4,-10060
   17904:	0018f740 	call	18f74 <alt_up_character_lcd_init>
   17908:	010000b4 	movhi	r4,2
   1790c:	21362d04 	addi	r4,r4,-10060
   17910:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   17914:	010000b4 	movhi	r4,2
   17918:	21363804 	addi	r4,r4,-10016
   1791c:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   17920:	010000b4 	movhi	r4,2
   17924:	21364304 	addi	r4,r4,-9972
   17928:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   1792c:	010000b4 	movhi	r4,2
   17930:	21364e04 	addi	r4,r4,-9928
   17934:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   17938:	010000b4 	movhi	r4,2
   1793c:	21365904 	addi	r4,r4,-9884
   17940:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   17944:	010000b4 	movhi	r4,2
   17948:	21366404 	addi	r4,r4,-9840
   1794c:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   17950:	010000b4 	movhi	r4,2
   17954:	21366f04 	addi	r4,r4,-9796
   17958:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   1795c:	010000b4 	movhi	r4,2
   17960:	21367a04 	addi	r4,r4,-9752
   17964:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   17968:	010000b4 	movhi	r4,2
   1796c:	21368504 	addi	r4,r4,-9708
   17970:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   17974:	010000b4 	movhi	r4,2
   17978:	21369004 	addi	r4,r4,-9664
   1797c:	00198680 	call	19868 <alt_up_ps2_init>
   17980:	010000b4 	movhi	r4,2
   17984:	21369004 	addi	r4,r4,-9664
   17988:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1798c:	010000b4 	movhi	r4,2
   17990:	21369e04 	addi	r4,r4,-9608
   17994:	00198680 	call	19868 <alt_up_ps2_init>
   17998:	010000b4 	movhi	r4,2
   1799c:	21369e04 	addi	r4,r4,-9608
   179a0:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   179a4:	010000b4 	movhi	r4,2
   179a8:	2136ac04 	addi	r4,r4,-9552
   179ac:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   179b0:	010000b4 	movhi	r4,2
   179b4:	2136b704 	addi	r4,r4,-9508
   179b8:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   179bc:	008000b4 	movhi	r2,2
   179c0:	10b6c404 	addi	r2,r2,-9456
   179c4:	10800a17 	ldw	r2,40(r2)
   179c8:	10800017 	ldw	r2,0(r2)
   179cc:	1007883a 	mov	r3,r2
   179d0:	008000b4 	movhi	r2,2
   179d4:	10b6c404 	addi	r2,r2,-9456
   179d8:	10c00b15 	stw	r3,44(r2)
   179dc:	008000b4 	movhi	r2,2
   179e0:	10b6c404 	addi	r2,r2,-9456
   179e4:	10800a17 	ldw	r2,40(r2)
   179e8:	10800104 	addi	r2,r2,4
   179ec:	10800017 	ldw	r2,0(r2)
   179f0:	1007883a 	mov	r3,r2
   179f4:	008000b4 	movhi	r2,2
   179f8:	10b6c404 	addi	r2,r2,-9456
   179fc:	10c00c15 	stw	r3,48(r2)
   17a00:	008000b4 	movhi	r2,2
   17a04:	10b6c404 	addi	r2,r2,-9456
   17a08:	10800a17 	ldw	r2,40(r2)
   17a0c:	10800204 	addi	r2,r2,8
   17a10:	10800017 	ldw	r2,0(r2)
   17a14:	10ffffcc 	andi	r3,r2,65535
   17a18:	008000b4 	movhi	r2,2
   17a1c:	10b6c404 	addi	r2,r2,-9456
   17a20:	10c01115 	stw	r3,68(r2)
   17a24:	008000b4 	movhi	r2,2
   17a28:	10b6c404 	addi	r2,r2,-9456
   17a2c:	10800a17 	ldw	r2,40(r2)
   17a30:	10800204 	addi	r2,r2,8
   17a34:	10800017 	ldw	r2,0(r2)
   17a38:	1006d43a 	srli	r3,r2,16
   17a3c:	008000b4 	movhi	r2,2
   17a40:	10b6c404 	addi	r2,r2,-9456
   17a44:	10c01215 	stw	r3,72(r2)
   17a48:	008000b4 	movhi	r2,2
   17a4c:	10b6c404 	addi	r2,r2,-9456
   17a50:	10800a17 	ldw	r2,40(r2)
   17a54:	10800304 	addi	r2,r2,12
   17a58:	10800017 	ldw	r2,0(r2)
   17a5c:	1005d07a 	srai	r2,r2,1
   17a60:	10c0004c 	andi	r3,r2,1
   17a64:	008000b4 	movhi	r2,2
   17a68:	10b6c404 	addi	r2,r2,-9456
   17a6c:	10c00d15 	stw	r3,52(r2)
   17a70:	008000b4 	movhi	r2,2
   17a74:	10b6c404 	addi	r2,r2,-9456
   17a78:	10800a17 	ldw	r2,40(r2)
   17a7c:	10800304 	addi	r2,r2,12
   17a80:	10800017 	ldw	r2,0(r2)
   17a84:	1005d23a 	srai	r2,r2,8
   17a88:	10c003cc 	andi	r3,r2,15
   17a8c:	008000b4 	movhi	r2,2
   17a90:	10b6c404 	addi	r2,r2,-9456
   17a94:	10c00e15 	stw	r3,56(r2)
   17a98:	008000b4 	movhi	r2,2
   17a9c:	10b6c404 	addi	r2,r2,-9456
   17aa0:	10800a17 	ldw	r2,40(r2)
   17aa4:	10800304 	addi	r2,r2,12
   17aa8:	10800017 	ldw	r2,0(r2)
   17aac:	1005d1ba 	srai	r2,r2,6
   17ab0:	10c000cc 	andi	r3,r2,3
   17ab4:	008000b4 	movhi	r2,2
   17ab8:	10b6c404 	addi	r2,r2,-9456
   17abc:	10c00f15 	stw	r3,60(r2)
   17ac0:	008000b4 	movhi	r2,2
   17ac4:	10b6c404 	addi	r2,r2,-9456
   17ac8:	10800e17 	ldw	r2,56(r2)
   17acc:	1007883a 	mov	r3,r2
   17ad0:	008000b4 	movhi	r2,2
   17ad4:	10b6c404 	addi	r2,r2,-9456
   17ad8:	10800f17 	ldw	r2,60(r2)
   17adc:	1885383a 	mul	r2,r3,r2
   17ae0:	e0bffe05 	stb	r2,-8(fp)
   17ae4:	e0bffe03 	ldbu	r2,-8(fp)
   17ae8:	10800268 	cmpgeui	r2,r2,9
   17aec:	1000051e 	bne	r2,zero,17b04 <alt_sys_init+0x26c>
   17af0:	008000b4 	movhi	r2,2
   17af4:	10b6c404 	addi	r2,r2,-9456
   17af8:	00c00044 	movi	r3,1
   17afc:	10c01015 	stw	r3,64(r2)
   17b00:	00000c06 	br	17b34 <alt_sys_init+0x29c>
   17b04:	e0bffe03 	ldbu	r2,-8(fp)
   17b08:	10800468 	cmpgeui	r2,r2,17
   17b0c:	1000051e 	bne	r2,zero,17b24 <alt_sys_init+0x28c>
   17b10:	008000b4 	movhi	r2,2
   17b14:	10b6c404 	addi	r2,r2,-9456
   17b18:	00c00084 	movi	r3,2
   17b1c:	10c01015 	stw	r3,64(r2)
   17b20:	00000406 	br	17b34 <alt_sys_init+0x29c>
   17b24:	008000b4 	movhi	r2,2
   17b28:	10b6c404 	addi	r2,r2,-9456
   17b2c:	00c00104 	movi	r3,4
   17b30:	10c01015 	stw	r3,64(r2)
   17b34:	008000b4 	movhi	r2,2
   17b38:	10b6c404 	addi	r2,r2,-9456
   17b3c:	10800a17 	ldw	r2,40(r2)
   17b40:	10800304 	addi	r2,r2,12
   17b44:	10800017 	ldw	r2,0(r2)
   17b48:	1005d43a 	srai	r2,r2,16
   17b4c:	e0bffe45 	stb	r2,-7(fp)
   17b50:	008000b4 	movhi	r2,2
   17b54:	10b6c404 	addi	r2,r2,-9456
   17b58:	10800a17 	ldw	r2,40(r2)
   17b5c:	10800304 	addi	r2,r2,12
   17b60:	10800017 	ldw	r2,0(r2)
   17b64:	1004d63a 	srli	r2,r2,24
   17b68:	e0bffe85 	stb	r2,-6(fp)
   17b6c:	008000b4 	movhi	r2,2
   17b70:	10b6c404 	addi	r2,r2,-9456
   17b74:	10801017 	ldw	r2,64(r2)
   17b78:	10800058 	cmpnei	r2,r2,1
   17b7c:	1000041e 	bne	r2,zero,17b90 <alt_sys_init+0x2f8>
   17b80:	008000b4 	movhi	r2,2
   17b84:	10b6c404 	addi	r2,r2,-9456
   17b88:	10001315 	stw	zero,76(r2)
   17b8c:	00000e06 	br	17bc8 <alt_sys_init+0x330>
   17b90:	008000b4 	movhi	r2,2
   17b94:	10b6c404 	addi	r2,r2,-9456
   17b98:	10801017 	ldw	r2,64(r2)
   17b9c:	10800098 	cmpnei	r2,r2,2
   17ba0:	1000051e 	bne	r2,zero,17bb8 <alt_sys_init+0x320>
   17ba4:	008000b4 	movhi	r2,2
   17ba8:	10b6c404 	addi	r2,r2,-9456
   17bac:	00c00044 	movi	r3,1
   17bb0:	10c01315 	stw	r3,76(r2)
   17bb4:	00000406 	br	17bc8 <alt_sys_init+0x330>
   17bb8:	008000b4 	movhi	r2,2
   17bbc:	10b6c404 	addi	r2,r2,-9456
   17bc0:	00c00084 	movi	r3,2
   17bc4:	10c01315 	stw	r3,76(r2)
   17bc8:	e0bffe43 	ldbu	r2,-7(fp)
   17bcc:	00c00804 	movi	r3,32
   17bd0:	1885c83a 	sub	r2,r3,r2
   17bd4:	00ffffc4 	movi	r3,-1
   17bd8:	1886d83a 	srl	r3,r3,r2
   17bdc:	008000b4 	movhi	r2,2
   17be0:	10b6c404 	addi	r2,r2,-9456
   17be4:	10c01415 	stw	r3,80(r2)
   17be8:	e0fffe43 	ldbu	r3,-7(fp)
   17bec:	008000b4 	movhi	r2,2
   17bf0:	10b6c404 	addi	r2,r2,-9456
   17bf4:	10801317 	ldw	r2,76(r2)
   17bf8:	1887883a 	add	r3,r3,r2
   17bfc:	008000b4 	movhi	r2,2
   17c00:	10b6c404 	addi	r2,r2,-9456
   17c04:	10c01515 	stw	r3,84(r2)
   17c08:	e0bffe83 	ldbu	r2,-6(fp)
   17c0c:	00c00804 	movi	r3,32
   17c10:	1885c83a 	sub	r2,r3,r2
   17c14:	00ffffc4 	movi	r3,-1
   17c18:	1886d83a 	srl	r3,r3,r2
   17c1c:	008000b4 	movhi	r2,2
   17c20:	10b6c404 	addi	r2,r2,-9456
   17c24:	10c01615 	stw	r3,88(r2)
   17c28:	010000b4 	movhi	r4,2
   17c2c:	2136c404 	addi	r4,r4,-9456
   17c30:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   17c34:	008000b4 	movhi	r2,2
   17c38:	10b6db04 	addi	r2,r2,-9364
   17c3c:	10800a17 	ldw	r2,40(r2)
   17c40:	10800017 	ldw	r2,0(r2)
   17c44:	1007883a 	mov	r3,r2
   17c48:	008000b4 	movhi	r2,2
   17c4c:	10b6db04 	addi	r2,r2,-9364
   17c50:	10c00b15 	stw	r3,44(r2)
   17c54:	008000b4 	movhi	r2,2
   17c58:	10b6db04 	addi	r2,r2,-9364
   17c5c:	10800a17 	ldw	r2,40(r2)
   17c60:	10800104 	addi	r2,r2,4
   17c64:	10800017 	ldw	r2,0(r2)
   17c68:	1007883a 	mov	r3,r2
   17c6c:	008000b4 	movhi	r2,2
   17c70:	10b6db04 	addi	r2,r2,-9364
   17c74:	10c00c15 	stw	r3,48(r2)
   17c78:	008000b4 	movhi	r2,2
   17c7c:	10b6db04 	addi	r2,r2,-9364
   17c80:	10800a17 	ldw	r2,40(r2)
   17c84:	10800204 	addi	r2,r2,8
   17c88:	10800017 	ldw	r2,0(r2)
   17c8c:	10ffffcc 	andi	r3,r2,65535
   17c90:	008000b4 	movhi	r2,2
   17c94:	10b6db04 	addi	r2,r2,-9364
   17c98:	10c01115 	stw	r3,68(r2)
   17c9c:	008000b4 	movhi	r2,2
   17ca0:	10b6db04 	addi	r2,r2,-9364
   17ca4:	10800a17 	ldw	r2,40(r2)
   17ca8:	10800204 	addi	r2,r2,8
   17cac:	10800017 	ldw	r2,0(r2)
   17cb0:	1006d43a 	srli	r3,r2,16
   17cb4:	008000b4 	movhi	r2,2
   17cb8:	10b6db04 	addi	r2,r2,-9364
   17cbc:	10c01215 	stw	r3,72(r2)
   17cc0:	008000b4 	movhi	r2,2
   17cc4:	10b6db04 	addi	r2,r2,-9364
   17cc8:	10800a17 	ldw	r2,40(r2)
   17ccc:	10800304 	addi	r2,r2,12
   17cd0:	10800017 	ldw	r2,0(r2)
   17cd4:	1005d07a 	srai	r2,r2,1
   17cd8:	10c0004c 	andi	r3,r2,1
   17cdc:	008000b4 	movhi	r2,2
   17ce0:	10b6db04 	addi	r2,r2,-9364
   17ce4:	10c00d15 	stw	r3,52(r2)
   17ce8:	008000b4 	movhi	r2,2
   17cec:	10b6db04 	addi	r2,r2,-9364
   17cf0:	10800a17 	ldw	r2,40(r2)
   17cf4:	10800304 	addi	r2,r2,12
   17cf8:	10800017 	ldw	r2,0(r2)
   17cfc:	1005d23a 	srai	r2,r2,8
   17d00:	10c003cc 	andi	r3,r2,15
   17d04:	008000b4 	movhi	r2,2
   17d08:	10b6db04 	addi	r2,r2,-9364
   17d0c:	10c00e15 	stw	r3,56(r2)
   17d10:	008000b4 	movhi	r2,2
   17d14:	10b6db04 	addi	r2,r2,-9364
   17d18:	10800a17 	ldw	r2,40(r2)
   17d1c:	10800304 	addi	r2,r2,12
   17d20:	10800017 	ldw	r2,0(r2)
   17d24:	1005d1ba 	srai	r2,r2,6
   17d28:	10c000cc 	andi	r3,r2,3
   17d2c:	008000b4 	movhi	r2,2
   17d30:	10b6db04 	addi	r2,r2,-9364
   17d34:	10c00f15 	stw	r3,60(r2)
   17d38:	008000b4 	movhi	r2,2
   17d3c:	10b6db04 	addi	r2,r2,-9364
   17d40:	10800e17 	ldw	r2,56(r2)
   17d44:	1007883a 	mov	r3,r2
   17d48:	008000b4 	movhi	r2,2
   17d4c:	10b6db04 	addi	r2,r2,-9364
   17d50:	10800f17 	ldw	r2,60(r2)
   17d54:	1885383a 	mul	r2,r3,r2
   17d58:	e0bffec5 	stb	r2,-5(fp)
   17d5c:	e0bffec3 	ldbu	r2,-5(fp)
   17d60:	10800268 	cmpgeui	r2,r2,9
   17d64:	1000051e 	bne	r2,zero,17d7c <alt_sys_init+0x4e4>
   17d68:	008000b4 	movhi	r2,2
   17d6c:	10b6db04 	addi	r2,r2,-9364
   17d70:	00c00044 	movi	r3,1
   17d74:	10c01015 	stw	r3,64(r2)
   17d78:	00000c06 	br	17dac <alt_sys_init+0x514>
   17d7c:	e0bffec3 	ldbu	r2,-5(fp)
   17d80:	10800468 	cmpgeui	r2,r2,17
   17d84:	1000051e 	bne	r2,zero,17d9c <alt_sys_init+0x504>
   17d88:	008000b4 	movhi	r2,2
   17d8c:	10b6db04 	addi	r2,r2,-9364
   17d90:	00c00084 	movi	r3,2
   17d94:	10c01015 	stw	r3,64(r2)
   17d98:	00000406 	br	17dac <alt_sys_init+0x514>
   17d9c:	008000b4 	movhi	r2,2
   17da0:	10b6db04 	addi	r2,r2,-9364
   17da4:	00c00104 	movi	r3,4
   17da8:	10c01015 	stw	r3,64(r2)
   17dac:	008000b4 	movhi	r2,2
   17db0:	10b6db04 	addi	r2,r2,-9364
   17db4:	10800a17 	ldw	r2,40(r2)
   17db8:	10800304 	addi	r2,r2,12
   17dbc:	10800017 	ldw	r2,0(r2)
   17dc0:	1005d43a 	srai	r2,r2,16
   17dc4:	e0bfff05 	stb	r2,-4(fp)
   17dc8:	008000b4 	movhi	r2,2
   17dcc:	10b6db04 	addi	r2,r2,-9364
   17dd0:	10800a17 	ldw	r2,40(r2)
   17dd4:	10800304 	addi	r2,r2,12
   17dd8:	10800017 	ldw	r2,0(r2)
   17ddc:	1004d63a 	srli	r2,r2,24
   17de0:	e0bfff45 	stb	r2,-3(fp)
   17de4:	008000b4 	movhi	r2,2
   17de8:	10b6db04 	addi	r2,r2,-9364
   17dec:	10801017 	ldw	r2,64(r2)
   17df0:	10800058 	cmpnei	r2,r2,1
   17df4:	1000041e 	bne	r2,zero,17e08 <alt_sys_init+0x570>
   17df8:	008000b4 	movhi	r2,2
   17dfc:	10b6db04 	addi	r2,r2,-9364
   17e00:	10001315 	stw	zero,76(r2)
   17e04:	00000e06 	br	17e40 <alt_sys_init+0x5a8>
   17e08:	008000b4 	movhi	r2,2
   17e0c:	10b6db04 	addi	r2,r2,-9364
   17e10:	10801017 	ldw	r2,64(r2)
   17e14:	10800098 	cmpnei	r2,r2,2
   17e18:	1000051e 	bne	r2,zero,17e30 <alt_sys_init+0x598>
   17e1c:	008000b4 	movhi	r2,2
   17e20:	10b6db04 	addi	r2,r2,-9364
   17e24:	00c00044 	movi	r3,1
   17e28:	10c01315 	stw	r3,76(r2)
   17e2c:	00000406 	br	17e40 <alt_sys_init+0x5a8>
   17e30:	008000b4 	movhi	r2,2
   17e34:	10b6db04 	addi	r2,r2,-9364
   17e38:	00c00084 	movi	r3,2
   17e3c:	10c01315 	stw	r3,76(r2)
   17e40:	e0bfff03 	ldbu	r2,-4(fp)
   17e44:	00c00804 	movi	r3,32
   17e48:	1885c83a 	sub	r2,r3,r2
   17e4c:	00ffffc4 	movi	r3,-1
   17e50:	1886d83a 	srl	r3,r3,r2
   17e54:	008000b4 	movhi	r2,2
   17e58:	10b6db04 	addi	r2,r2,-9364
   17e5c:	10c01415 	stw	r3,80(r2)
   17e60:	e0ffff03 	ldbu	r3,-4(fp)
   17e64:	008000b4 	movhi	r2,2
   17e68:	10b6db04 	addi	r2,r2,-9364
   17e6c:	10801317 	ldw	r2,76(r2)
   17e70:	1887883a 	add	r3,r3,r2
   17e74:	008000b4 	movhi	r2,2
   17e78:	10b6db04 	addi	r2,r2,-9364
   17e7c:	10c01515 	stw	r3,84(r2)
   17e80:	e0bfff43 	ldbu	r2,-3(fp)
   17e84:	00c00804 	movi	r3,32
   17e88:	1885c83a 	sub	r2,r3,r2
   17e8c:	00ffffc4 	movi	r3,-1
   17e90:	1886d83a 	srl	r3,r3,r2
   17e94:	008000b4 	movhi	r2,2
   17e98:	10b6db04 	addi	r2,r2,-9364
   17e9c:	10c01615 	stw	r3,88(r2)
   17ea0:	010000b4 	movhi	r4,2
   17ea4:	2136db04 	addi	r4,r4,-9364
   17ea8:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   17eac:	008000b4 	movhi	r2,2
   17eb0:	10b6f204 	addi	r2,r2,-9272
   17eb4:	10800a17 	ldw	r2,40(r2)
   17eb8:	10800017 	ldw	r2,0(r2)
   17ebc:	1007883a 	mov	r3,r2
   17ec0:	008000b4 	movhi	r2,2
   17ec4:	10b6f204 	addi	r2,r2,-9272
   17ec8:	10c00b15 	stw	r3,44(r2)
   17ecc:	008000b4 	movhi	r2,2
   17ed0:	10b6f204 	addi	r2,r2,-9272
   17ed4:	10800a17 	ldw	r2,40(r2)
   17ed8:	10800104 	addi	r2,r2,4
   17edc:	10800017 	ldw	r2,0(r2)
   17ee0:	1007883a 	mov	r3,r2
   17ee4:	008000b4 	movhi	r2,2
   17ee8:	10b6f204 	addi	r2,r2,-9272
   17eec:	10c00c15 	stw	r3,48(r2)
   17ef0:	008000b4 	movhi	r2,2
   17ef4:	10b6f204 	addi	r2,r2,-9272
   17ef8:	10800a17 	ldw	r2,40(r2)
   17efc:	10800204 	addi	r2,r2,8
   17f00:	10800017 	ldw	r2,0(r2)
   17f04:	10ffffcc 	andi	r3,r2,65535
   17f08:	008000b4 	movhi	r2,2
   17f0c:	10b6f204 	addi	r2,r2,-9272
   17f10:	10c00f15 	stw	r3,60(r2)
   17f14:	008000b4 	movhi	r2,2
   17f18:	10b6f204 	addi	r2,r2,-9272
   17f1c:	10800a17 	ldw	r2,40(r2)
   17f20:	10800204 	addi	r2,r2,8
   17f24:	10800017 	ldw	r2,0(r2)
   17f28:	1006d43a 	srli	r3,r2,16
   17f2c:	008000b4 	movhi	r2,2
   17f30:	10b6f204 	addi	r2,r2,-9272
   17f34:	10c01015 	stw	r3,64(r2)
   17f38:	008000b4 	movhi	r2,2
   17f3c:	10b6f204 	addi	r2,r2,-9272
   17f40:	10800a17 	ldw	r2,40(r2)
   17f44:	10800304 	addi	r2,r2,12
   17f48:	10800017 	ldw	r2,0(r2)
   17f4c:	1005d07a 	srai	r2,r2,1
   17f50:	10c0004c 	andi	r3,r2,1
   17f54:	008000b4 	movhi	r2,2
   17f58:	10b6f204 	addi	r2,r2,-9272
   17f5c:	10c00d15 	stw	r3,52(r2)
   17f60:	008000b4 	movhi	r2,2
   17f64:	10b6f204 	addi	r2,r2,-9272
   17f68:	10800a17 	ldw	r2,40(r2)
   17f6c:	10800304 	addi	r2,r2,12
   17f70:	10800017 	ldw	r2,0(r2)
   17f74:	1005d13a 	srai	r2,r2,4
   17f78:	10c003cc 	andi	r3,r2,15
   17f7c:	008000b4 	movhi	r2,2
   17f80:	10b6f204 	addi	r2,r2,-9272
   17f84:	10c00e15 	stw	r3,56(r2)
   17f88:	008000b4 	movhi	r2,2
   17f8c:	10b6f204 	addi	r2,r2,-9272
   17f90:	10800a17 	ldw	r2,40(r2)
   17f94:	10800304 	addi	r2,r2,12
   17f98:	10800017 	ldw	r2,0(r2)
   17f9c:	1005d43a 	srai	r2,r2,16
   17fa0:	e0bfff85 	stb	r2,-2(fp)
   17fa4:	008000b4 	movhi	r2,2
   17fa8:	10b6f204 	addi	r2,r2,-9272
   17fac:	10800a17 	ldw	r2,40(r2)
   17fb0:	10800304 	addi	r2,r2,12
   17fb4:	10800017 	ldw	r2,0(r2)
   17fb8:	1004d63a 	srli	r2,r2,24
   17fbc:	e0bfffc5 	stb	r2,-1(fp)
   17fc0:	008000b4 	movhi	r2,2
   17fc4:	10b6f204 	addi	r2,r2,-9272
   17fc8:	10800e17 	ldw	r2,56(r2)
   17fcc:	10800058 	cmpnei	r2,r2,1
   17fd0:	1000041e 	bne	r2,zero,17fe4 <alt_sys_init+0x74c>
   17fd4:	008000b4 	movhi	r2,2
   17fd8:	10b6f204 	addi	r2,r2,-9272
   17fdc:	10001115 	stw	zero,68(r2)
   17fe0:	00000e06 	br	1801c <alt_sys_init+0x784>
   17fe4:	008000b4 	movhi	r2,2
   17fe8:	10b6f204 	addi	r2,r2,-9272
   17fec:	10800e17 	ldw	r2,56(r2)
   17ff0:	10800098 	cmpnei	r2,r2,2
   17ff4:	1000051e 	bne	r2,zero,1800c <alt_sys_init+0x774>
   17ff8:	008000b4 	movhi	r2,2
   17ffc:	10b6f204 	addi	r2,r2,-9272
   18000:	00c00044 	movi	r3,1
   18004:	10c01115 	stw	r3,68(r2)
   18008:	00000406 	br	1801c <alt_sys_init+0x784>
   1800c:	008000b4 	movhi	r2,2
   18010:	10b6f204 	addi	r2,r2,-9272
   18014:	00c00084 	movi	r3,2
   18018:	10c01115 	stw	r3,68(r2)
   1801c:	e0bfff83 	ldbu	r2,-2(fp)
   18020:	00c00804 	movi	r3,32
   18024:	1885c83a 	sub	r2,r3,r2
   18028:	00ffffc4 	movi	r3,-1
   1802c:	1886d83a 	srl	r3,r3,r2
   18030:	008000b4 	movhi	r2,2
   18034:	10b6f204 	addi	r2,r2,-9272
   18038:	10c01215 	stw	r3,72(r2)
   1803c:	e0ffff83 	ldbu	r3,-2(fp)
   18040:	008000b4 	movhi	r2,2
   18044:	10b6f204 	addi	r2,r2,-9272
   18048:	10801117 	ldw	r2,68(r2)
   1804c:	1887883a 	add	r3,r3,r2
   18050:	008000b4 	movhi	r2,2
   18054:	10b6f204 	addi	r2,r2,-9272
   18058:	10c01315 	stw	r3,76(r2)
   1805c:	e0bfffc3 	ldbu	r2,-1(fp)
   18060:	00c00804 	movi	r3,32
   18064:	1885c83a 	sub	r2,r3,r2
   18068:	00ffffc4 	movi	r3,-1
   1806c:	1886d83a 	srl	r3,r3,r2
   18070:	008000b4 	movhi	r2,2
   18074:	10b6f204 	addi	r2,r2,-9272
   18078:	10c01415 	stw	r3,80(r2)
   1807c:	010000b4 	movhi	r4,2
   18080:	2136f204 	addi	r4,r4,-9272
   18084:	001782c0 	call	1782c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   18088:	010000b4 	movhi	r4,2
   1808c:	21370704 	addi	r4,r4,-9188
   18090:	001782c0 	call	1782c <alt_dev_reg>
}
   18094:	0001883a 	nop
   18098:	e037883a 	mov	sp,fp
   1809c:	dfc00117 	ldw	ra,4(sp)
   180a0:	df000017 	ldw	fp,0(sp)
   180a4:	dec00204 	addi	sp,sp,8
   180a8:	f800283a 	ret

000180ac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   180ac:	defffa04 	addi	sp,sp,-24
   180b0:	dfc00515 	stw	ra,20(sp)
   180b4:	df000415 	stw	fp,16(sp)
   180b8:	df000404 	addi	fp,sp,16
   180bc:	e13ffd15 	stw	r4,-12(fp)
   180c0:	e17ffe15 	stw	r5,-8(fp)
   180c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   180c8:	e0bffd17 	ldw	r2,-12(fp)
   180cc:	10800017 	ldw	r2,0(r2)
   180d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   180d4:	e0bffc17 	ldw	r2,-16(fp)
   180d8:	10c00a04 	addi	r3,r2,40
   180dc:	e0bffd17 	ldw	r2,-12(fp)
   180e0:	10800217 	ldw	r2,8(r2)
   180e4:	100f883a 	mov	r7,r2
   180e8:	e1bfff17 	ldw	r6,-4(fp)
   180ec:	e17ffe17 	ldw	r5,-8(fp)
   180f0:	1809883a 	mov	r4,r3
   180f4:	00188500 	call	18850 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   180f8:	e037883a 	mov	sp,fp
   180fc:	dfc00117 	ldw	ra,4(sp)
   18100:	df000017 	ldw	fp,0(sp)
   18104:	dec00204 	addi	sp,sp,8
   18108:	f800283a 	ret

0001810c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1810c:	defffa04 	addi	sp,sp,-24
   18110:	dfc00515 	stw	ra,20(sp)
   18114:	df000415 	stw	fp,16(sp)
   18118:	df000404 	addi	fp,sp,16
   1811c:	e13ffd15 	stw	r4,-12(fp)
   18120:	e17ffe15 	stw	r5,-8(fp)
   18124:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18128:	e0bffd17 	ldw	r2,-12(fp)
   1812c:	10800017 	ldw	r2,0(r2)
   18130:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   18134:	e0bffc17 	ldw	r2,-16(fp)
   18138:	10c00a04 	addi	r3,r2,40
   1813c:	e0bffd17 	ldw	r2,-12(fp)
   18140:	10800217 	ldw	r2,8(r2)
   18144:	100f883a 	mov	r7,r2
   18148:	e1bfff17 	ldw	r6,-4(fp)
   1814c:	e17ffe17 	ldw	r5,-8(fp)
   18150:	1809883a 	mov	r4,r3
   18154:	0018b0c0 	call	18b0c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   18158:	e037883a 	mov	sp,fp
   1815c:	dfc00117 	ldw	ra,4(sp)
   18160:	df000017 	ldw	fp,0(sp)
   18164:	dec00204 	addi	sp,sp,8
   18168:	f800283a 	ret

0001816c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1816c:	defffc04 	addi	sp,sp,-16
   18170:	dfc00315 	stw	ra,12(sp)
   18174:	df000215 	stw	fp,8(sp)
   18178:	df000204 	addi	fp,sp,8
   1817c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18180:	e0bfff17 	ldw	r2,-4(fp)
   18184:	10800017 	ldw	r2,0(r2)
   18188:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1818c:	e0bffe17 	ldw	r2,-8(fp)
   18190:	10c00a04 	addi	r3,r2,40
   18194:	e0bfff17 	ldw	r2,-4(fp)
   18198:	10800217 	ldw	r2,8(r2)
   1819c:	100b883a 	mov	r5,r2
   181a0:	1809883a 	mov	r4,r3
   181a4:	00186f80 	call	186f8 <altera_avalon_jtag_uart_close>
}
   181a8:	e037883a 	mov	sp,fp
   181ac:	dfc00117 	ldw	ra,4(sp)
   181b0:	df000017 	ldw	fp,0(sp)
   181b4:	dec00204 	addi	sp,sp,8
   181b8:	f800283a 	ret

000181bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   181bc:	defffa04 	addi	sp,sp,-24
   181c0:	dfc00515 	stw	ra,20(sp)
   181c4:	df000415 	stw	fp,16(sp)
   181c8:	df000404 	addi	fp,sp,16
   181cc:	e13ffd15 	stw	r4,-12(fp)
   181d0:	e17ffe15 	stw	r5,-8(fp)
   181d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   181d8:	e0bffd17 	ldw	r2,-12(fp)
   181dc:	10800017 	ldw	r2,0(r2)
   181e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   181e4:	e0bffc17 	ldw	r2,-16(fp)
   181e8:	10800a04 	addi	r2,r2,40
   181ec:	e1bfff17 	ldw	r6,-4(fp)
   181f0:	e17ffe17 	ldw	r5,-8(fp)
   181f4:	1009883a 	mov	r4,r2
   181f8:	00187600 	call	18760 <altera_avalon_jtag_uart_ioctl>
}
   181fc:	e037883a 	mov	sp,fp
   18200:	dfc00117 	ldw	ra,4(sp)
   18204:	df000017 	ldw	fp,0(sp)
   18208:	dec00204 	addi	sp,sp,8
   1820c:	f800283a 	ret

00018210 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   18210:	defff204 	addi	sp,sp,-56
   18214:	dfc00d15 	stw	ra,52(sp)
   18218:	df000c15 	stw	fp,48(sp)
   1821c:	df000c04 	addi	fp,sp,48
   18220:	e13ff915 	stw	r4,-28(fp)
   18224:	e17ffa15 	stw	r5,-24(fp)
   18228:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1822c:	e0bff917 	ldw	r2,-28(fp)
   18230:	10800c04 	addi	r2,r2,48
   18234:	e0bff415 	stw	r2,-48(fp)
   18238:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1823c:	e0bff80b 	ldhu	r2,-32(fp)
   18240:	e0fff884 	addi	r3,fp,-30
   18244:	180b883a 	mov	r5,r3
   18248:	1009883a 	mov	r4,r2
   1824c:	00125080 	call	12508 <OSFlagCreate>
   18250:	1007883a 	mov	r3,r2
   18254:	e0bff417 	ldw	r2,-48(fp)
   18258:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1825c:	e0bff917 	ldw	r2,-28(fp)
   18260:	10800a04 	addi	r2,r2,40
   18264:	e0bff515 	stw	r2,-44(fp)
   18268:	00800044 	movi	r2,1
   1826c:	e0bff78d 	sth	r2,-34(fp)
   18270:	e0bff78b 	ldhu	r2,-34(fp)
   18274:	1009883a 	mov	r4,r2
   18278:	001521c0 	call	1521c <OSSemCreate>
   1827c:	1007883a 	mov	r3,r2
   18280:	e0bff517 	ldw	r2,-44(fp)
   18284:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   18288:	e0bff917 	ldw	r2,-28(fp)
   1828c:	10800b04 	addi	r2,r2,44
   18290:	e0bff615 	stw	r2,-40(fp)
   18294:	00800044 	movi	r2,1
   18298:	e0bff70d 	sth	r2,-36(fp)
   1829c:	e0bff70b 	ldhu	r2,-36(fp)
   182a0:	1009883a 	mov	r4,r2
   182a4:	001521c0 	call	1521c <OSSemCreate>
   182a8:	1007883a 	mov	r3,r2
   182ac:	e0bff617 	ldw	r2,-40(fp)
   182b0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   182b4:	e0bff917 	ldw	r2,-28(fp)
   182b8:	00c00044 	movi	r3,1
   182bc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   182c0:	e0bff917 	ldw	r2,-28(fp)
   182c4:	10800017 	ldw	r2,0(r2)
   182c8:	10800104 	addi	r2,r2,4
   182cc:	1007883a 	mov	r3,r2
   182d0:	e0bff917 	ldw	r2,-28(fp)
   182d4:	10800817 	ldw	r2,32(r2)
   182d8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   182dc:	e0bffb17 	ldw	r2,-20(fp)
   182e0:	018000b4 	movhi	r6,2
   182e4:	31a0d304 	addi	r6,r6,-31924
   182e8:	e17ff917 	ldw	r5,-28(fp)
   182ec:	1009883a 	mov	r4,r2
   182f0:	001a6700 	call	1a670 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   182f4:	e0bff917 	ldw	r2,-28(fp)
   182f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   182fc:	e0bff917 	ldw	r2,-28(fp)
   18300:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   18304:	d0e82d17 	ldw	r3,-24396(gp)
   18308:	e1fff917 	ldw	r7,-28(fp)
   1830c:	018000b4 	movhi	r6,2
   18310:	31a17d04 	addi	r6,r6,-31244
   18314:	180b883a 	mov	r5,r3
   18318:	1009883a 	mov	r4,r2
   1831c:	001a1800 	call	1a180 <alt_alarm_start>
   18320:	1000040e 	bge	r2,zero,18334 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   18324:	e0fff917 	ldw	r3,-28(fp)
   18328:	00a00034 	movhi	r2,32768
   1832c:	10bfffc4 	addi	r2,r2,-1
   18330:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   18334:	0001883a 	nop
   18338:	e037883a 	mov	sp,fp
   1833c:	dfc00117 	ldw	ra,4(sp)
   18340:	df000017 	ldw	fp,0(sp)
   18344:	dec00204 	addi	sp,sp,8
   18348:	f800283a 	ret

0001834c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1834c:	defff104 	addi	sp,sp,-60
   18350:	dfc00e15 	stw	ra,56(sp)
   18354:	df000d15 	stw	fp,52(sp)
   18358:	df000d04 	addi	fp,sp,52
   1835c:	e13ffe15 	stw	r4,-8(fp)
   18360:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   18364:	e0bffe17 	ldw	r2,-8(fp)
   18368:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1836c:	e0bff517 	ldw	r2,-44(fp)
   18370:	10800017 	ldw	r2,0(r2)
   18374:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   18378:	e0bff617 	ldw	r2,-40(fp)
   1837c:	10800104 	addi	r2,r2,4
   18380:	10800037 	ldwio	r2,0(r2)
   18384:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   18388:	e0bff717 	ldw	r2,-36(fp)
   1838c:	1080c00c 	andi	r2,r2,768
   18390:	10009126 	beq	r2,zero,185d8 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   18394:	e0bff717 	ldw	r2,-36(fp)
   18398:	1080400c 	andi	r2,r2,256
   1839c:	10004726 	beq	r2,zero,184bc <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   183a0:	00800074 	movhi	r2,1
   183a4:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   183a8:	e0bff517 	ldw	r2,-44(fp)
   183ac:	10800d17 	ldw	r2,52(r2)
   183b0:	10800044 	addi	r2,r2,1
   183b4:	1081ffcc 	andi	r2,r2,2047
   183b8:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   183bc:	e0bff517 	ldw	r2,-44(fp)
   183c0:	10c00e17 	ldw	r3,56(r2)
   183c4:	e0bff817 	ldw	r2,-32(fp)
   183c8:	18802726 	beq	r3,r2,18468 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   183cc:	e0bff617 	ldw	r2,-40(fp)
   183d0:	10800037 	ldwio	r2,0(r2)
   183d4:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   183d8:	e0bff317 	ldw	r2,-52(fp)
   183dc:	10a0000c 	andi	r2,r2,32768
   183e0:	10002326 	beq	r2,zero,18470 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   183e4:	e0bff517 	ldw	r2,-44(fp)
   183e8:	10800d17 	ldw	r2,52(r2)
   183ec:	e0fff317 	ldw	r3,-52(fp)
   183f0:	1809883a 	mov	r4,r3
   183f4:	e0fff517 	ldw	r3,-44(fp)
   183f8:	1885883a 	add	r2,r3,r2
   183fc:	10801104 	addi	r2,r2,68
   18400:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   18404:	e0bff517 	ldw	r2,-44(fp)
   18408:	10800d17 	ldw	r2,52(r2)
   1840c:	10800044 	addi	r2,r2,1
   18410:	10c1ffcc 	andi	r3,r2,2047
   18414:	e0bff517 	ldw	r2,-44(fp)
   18418:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1841c:	e0bff517 	ldw	r2,-44(fp)
   18420:	10800c17 	ldw	r2,48(r2)
   18424:	e0bffa15 	stw	r2,-24(fp)
   18428:	00800044 	movi	r2,1
   1842c:	e0bffb0d 	sth	r2,-20(fp)
   18430:	00800044 	movi	r2,1
   18434:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   18438:	d0a81843 	ldbu	r2,-24479(gp)
   1843c:	10803fcc 	andi	r2,r2,255
   18440:	103fd926 	beq	r2,zero,183a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70183a8>
  {
    OSFlagPost (group, flags, opt, &err);
   18444:	e0bffb0b 	ldhu	r2,-20(fp)
   18448:	e0fffb83 	ldbu	r3,-18(fp)
   1844c:	e13ffcc4 	addi	r4,fp,-13
   18450:	200f883a 	mov	r7,r4
   18454:	180d883a 	mov	r6,r3
   18458:	100b883a 	mov	r5,r2
   1845c:	e13ffa17 	ldw	r4,-24(fp)
   18460:	00130e40 	call	130e4 <OSFlagPost>
      }
   18464:	003fd006 	br	183a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70183a8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   18468:	0001883a 	nop
   1846c:	00000106 	br	18474 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   18470:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   18474:	e0bff317 	ldw	r2,-52(fp)
   18478:	10bfffec 	andhi	r2,r2,65535
   1847c:	10000f26 	beq	r2,zero,184bc <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   18480:	e0bff517 	ldw	r2,-44(fp)
   18484:	10c00817 	ldw	r3,32(r2)
   18488:	00bfff84 	movi	r2,-2
   1848c:	1886703a 	and	r3,r3,r2
   18490:	e0bff517 	ldw	r2,-44(fp)
   18494:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   18498:	e0bff617 	ldw	r2,-40(fp)
   1849c:	10800104 	addi	r2,r2,4
   184a0:	1007883a 	mov	r3,r2
   184a4:	e0bff517 	ldw	r2,-44(fp)
   184a8:	10800817 	ldw	r2,32(r2)
   184ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   184b0:	e0bff617 	ldw	r2,-40(fp)
   184b4:	10800104 	addi	r2,r2,4
   184b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   184bc:	e0bff717 	ldw	r2,-36(fp)
   184c0:	1080800c 	andi	r2,r2,512
   184c4:	103fac26 	beq	r2,zero,18378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018378>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   184c8:	e0bff717 	ldw	r2,-36(fp)
   184cc:	1004d43a 	srli	r2,r2,16
   184d0:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   184d4:	00002606 	br	18570 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   184d8:	e0bff617 	ldw	r2,-40(fp)
   184dc:	e0fff517 	ldw	r3,-44(fp)
   184e0:	18c01017 	ldw	r3,64(r3)
   184e4:	e13ff517 	ldw	r4,-44(fp)
   184e8:	20c7883a 	add	r3,r4,r3
   184ec:	18c21104 	addi	r3,r3,2116
   184f0:	18c00003 	ldbu	r3,0(r3)
   184f4:	18c03fcc 	andi	r3,r3,255
   184f8:	18c0201c 	xori	r3,r3,128
   184fc:	18ffe004 	addi	r3,r3,-128
   18500:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   18504:	e0bff517 	ldw	r2,-44(fp)
   18508:	10801017 	ldw	r2,64(r2)
   1850c:	10800044 	addi	r2,r2,1
   18510:	10c1ffcc 	andi	r3,r2,2047
   18514:	e0bff517 	ldw	r2,-44(fp)
   18518:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1851c:	e0bff517 	ldw	r2,-44(fp)
   18520:	10800c17 	ldw	r2,48(r2)
   18524:	e0bff915 	stw	r2,-28(fp)
   18528:	00800084 	movi	r2,2
   1852c:	e0bffc0d 	sth	r2,-16(fp)
   18530:	00800044 	movi	r2,1
   18534:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   18538:	d0a81843 	ldbu	r2,-24479(gp)
   1853c:	10803fcc 	andi	r2,r2,255
   18540:	10000826 	beq	r2,zero,18564 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   18544:	e0bffc0b 	ldhu	r2,-16(fp)
   18548:	e0fffc83 	ldbu	r3,-14(fp)
   1854c:	e13ffd04 	addi	r4,fp,-12
   18550:	200f883a 	mov	r7,r4
   18554:	180d883a 	mov	r6,r3
   18558:	100b883a 	mov	r5,r2
   1855c:	e13ff917 	ldw	r4,-28(fp)
   18560:	00130e40 	call	130e4 <OSFlagPost>

        space--;
   18564:	e0bff417 	ldw	r2,-48(fp)
   18568:	10bfffc4 	addi	r2,r2,-1
   1856c:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   18570:	e0bff417 	ldw	r2,-48(fp)
   18574:	10000526 	beq	r2,zero,1858c <altera_avalon_jtag_uart_irq+0x240>
   18578:	e0bff517 	ldw	r2,-44(fp)
   1857c:	10c01017 	ldw	r3,64(r2)
   18580:	e0bff517 	ldw	r2,-44(fp)
   18584:	10800f17 	ldw	r2,60(r2)
   18588:	18bfd31e 	bne	r3,r2,184d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70184d8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1858c:	e0bff417 	ldw	r2,-48(fp)
   18590:	103f7926 	beq	r2,zero,18378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018378>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   18594:	e0bff517 	ldw	r2,-44(fp)
   18598:	10c00817 	ldw	r3,32(r2)
   1859c:	00bfff44 	movi	r2,-3
   185a0:	1886703a 	and	r3,r3,r2
   185a4:	e0bff517 	ldw	r2,-44(fp)
   185a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   185ac:	e0bff517 	ldw	r2,-44(fp)
   185b0:	10800017 	ldw	r2,0(r2)
   185b4:	10800104 	addi	r2,r2,4
   185b8:	1007883a 	mov	r3,r2
   185bc:	e0bff517 	ldw	r2,-44(fp)
   185c0:	10800817 	ldw	r2,32(r2)
   185c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   185c8:	e0bff617 	ldw	r2,-40(fp)
   185cc:	10800104 	addi	r2,r2,4
   185d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   185d4:	003f6806 	br	18378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018378>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   185d8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   185dc:	0001883a 	nop
   185e0:	e037883a 	mov	sp,fp
   185e4:	dfc00117 	ldw	ra,4(sp)
   185e8:	df000017 	ldw	fp,0(sp)
   185ec:	dec00204 	addi	sp,sp,8
   185f0:	f800283a 	ret

000185f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   185f4:	defff904 	addi	sp,sp,-28
   185f8:	dfc00615 	stw	ra,24(sp)
   185fc:	df000515 	stw	fp,20(sp)
   18600:	df000504 	addi	fp,sp,20
   18604:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   18608:	e0bfff17 	ldw	r2,-4(fp)
   1860c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   18610:	e0bffb17 	ldw	r2,-20(fp)
   18614:	10800017 	ldw	r2,0(r2)
   18618:	10800104 	addi	r2,r2,4
   1861c:	10800037 	ldwio	r2,0(r2)
   18620:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   18624:	e0bffc17 	ldw	r2,-16(fp)
   18628:	1081000c 	andi	r2,r2,1024
   1862c:	10000b26 	beq	r2,zero,1865c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   18630:	e0bffb17 	ldw	r2,-20(fp)
   18634:	10800017 	ldw	r2,0(r2)
   18638:	10800104 	addi	r2,r2,4
   1863c:	1007883a 	mov	r3,r2
   18640:	e0bffb17 	ldw	r2,-20(fp)
   18644:	10800817 	ldw	r2,32(r2)
   18648:	10810014 	ori	r2,r2,1024
   1864c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   18650:	e0bffb17 	ldw	r2,-20(fp)
   18654:	10000915 	stw	zero,36(r2)
   18658:	00002106 	br	186e0 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1865c:	e0bffb17 	ldw	r2,-20(fp)
   18660:	10c00917 	ldw	r3,36(r2)
   18664:	00a00034 	movhi	r2,32768
   18668:	10bfff04 	addi	r2,r2,-4
   1866c:	10c01c36 	bltu	r2,r3,186e0 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   18670:	e0bffb17 	ldw	r2,-20(fp)
   18674:	10800917 	ldw	r2,36(r2)
   18678:	10c00044 	addi	r3,r2,1
   1867c:	e0bffb17 	ldw	r2,-20(fp)
   18680:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   18684:	e0bffb17 	ldw	r2,-20(fp)
   18688:	10c00917 	ldw	r3,36(r2)
   1868c:	e0bffb17 	ldw	r2,-20(fp)
   18690:	10800117 	ldw	r2,4(r2)
   18694:	18801236 	bltu	r3,r2,186e0 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   18698:	e0bffb17 	ldw	r2,-20(fp)
   1869c:	10800c17 	ldw	r2,48(r2)
   186a0:	e0bffd15 	stw	r2,-12(fp)
   186a4:	00800104 	movi	r2,4
   186a8:	e0bffe0d 	sth	r2,-8(fp)
   186ac:	00800044 	movi	r2,1
   186b0:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   186b4:	d0a81843 	ldbu	r2,-24479(gp)
   186b8:	10803fcc 	andi	r2,r2,255
   186bc:	10000826 	beq	r2,zero,186e0 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   186c0:	e0bffe0b 	ldhu	r2,-8(fp)
   186c4:	e0fffe83 	ldbu	r3,-6(fp)
   186c8:	e13ffec4 	addi	r4,fp,-5
   186cc:	200f883a 	mov	r7,r4
   186d0:	180d883a 	mov	r6,r3
   186d4:	100b883a 	mov	r5,r2
   186d8:	e13ffd17 	ldw	r4,-12(fp)
   186dc:	00130e40 	call	130e4 <OSFlagPost>
   186e0:	d0a82d17 	ldw	r2,-24396(gp)
    }
  }

  return alt_ticks_per_second();
}
   186e4:	e037883a 	mov	sp,fp
   186e8:	dfc00117 	ldw	ra,4(sp)
   186ec:	df000017 	ldw	fp,0(sp)
   186f0:	dec00204 	addi	sp,sp,8
   186f4:	f800283a 	ret

000186f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   186f8:	defffd04 	addi	sp,sp,-12
   186fc:	df000215 	stw	fp,8(sp)
   18700:	df000204 	addi	fp,sp,8
   18704:	e13ffe15 	stw	r4,-8(fp)
   18708:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1870c:	00000506 	br	18724 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   18710:	e0bfff17 	ldw	r2,-4(fp)
   18714:	1090000c 	andi	r2,r2,16384
   18718:	10000226 	beq	r2,zero,18724 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1871c:	00bffd44 	movi	r2,-11
   18720:	00000b06 	br	18750 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   18724:	e0bffe17 	ldw	r2,-8(fp)
   18728:	10c01017 	ldw	r3,64(r2)
   1872c:	e0bffe17 	ldw	r2,-8(fp)
   18730:	10800f17 	ldw	r2,60(r2)
   18734:	18800526 	beq	r3,r2,1874c <altera_avalon_jtag_uart_close+0x54>
   18738:	e0bffe17 	ldw	r2,-8(fp)
   1873c:	10c00917 	ldw	r3,36(r2)
   18740:	e0bffe17 	ldw	r2,-8(fp)
   18744:	10800117 	ldw	r2,4(r2)
   18748:	18bff136 	bltu	r3,r2,18710 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018710>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1874c:	0005883a 	mov	r2,zero
}
   18750:	e037883a 	mov	sp,fp
   18754:	df000017 	ldw	fp,0(sp)
   18758:	dec00104 	addi	sp,sp,4
   1875c:	f800283a 	ret

00018760 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   18760:	defffa04 	addi	sp,sp,-24
   18764:	df000515 	stw	fp,20(sp)
   18768:	df000504 	addi	fp,sp,20
   1876c:	e13ffd15 	stw	r4,-12(fp)
   18770:	e17ffe15 	stw	r5,-8(fp)
   18774:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   18778:	00bff9c4 	movi	r2,-25
   1877c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   18780:	e0bffe17 	ldw	r2,-8(fp)
   18784:	10da8060 	cmpeqi	r3,r2,27137
   18788:	1800031e 	bne	r3,zero,18798 <altera_avalon_jtag_uart_ioctl+0x38>
   1878c:	109a80a0 	cmpeqi	r2,r2,27138
   18790:	1000181e 	bne	r2,zero,187f4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   18794:	00002906 	br	1883c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   18798:	e0bffd17 	ldw	r2,-12(fp)
   1879c:	10c00117 	ldw	r3,4(r2)
   187a0:	00a00034 	movhi	r2,32768
   187a4:	10bfffc4 	addi	r2,r2,-1
   187a8:	18802126 	beq	r3,r2,18830 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   187ac:	e0bfff17 	ldw	r2,-4(fp)
   187b0:	10800017 	ldw	r2,0(r2)
   187b4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   187b8:	e0bffc17 	ldw	r2,-16(fp)
   187bc:	10800090 	cmplti	r2,r2,2
   187c0:	1000061e 	bne	r2,zero,187dc <altera_avalon_jtag_uart_ioctl+0x7c>
   187c4:	e0fffc17 	ldw	r3,-16(fp)
   187c8:	00a00034 	movhi	r2,32768
   187cc:	10bfffc4 	addi	r2,r2,-1
   187d0:	18800226 	beq	r3,r2,187dc <altera_avalon_jtag_uart_ioctl+0x7c>
   187d4:	e0bffc17 	ldw	r2,-16(fp)
   187d8:	00000206 	br	187e4 <altera_avalon_jtag_uart_ioctl+0x84>
   187dc:	00a00034 	movhi	r2,32768
   187e0:	10bfff84 	addi	r2,r2,-2
   187e4:	e0fffd17 	ldw	r3,-12(fp)
   187e8:	18800115 	stw	r2,4(r3)
      rc = 0;
   187ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   187f0:	00000f06 	br	18830 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   187f4:	e0bffd17 	ldw	r2,-12(fp)
   187f8:	10c00117 	ldw	r3,4(r2)
   187fc:	00a00034 	movhi	r2,32768
   18800:	10bfffc4 	addi	r2,r2,-1
   18804:	18800c26 	beq	r3,r2,18838 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   18808:	e0bffd17 	ldw	r2,-12(fp)
   1880c:	10c00917 	ldw	r3,36(r2)
   18810:	e0bffd17 	ldw	r2,-12(fp)
   18814:	10800117 	ldw	r2,4(r2)
   18818:	1885803a 	cmpltu	r2,r3,r2
   1881c:	10c03fcc 	andi	r3,r2,255
   18820:	e0bfff17 	ldw	r2,-4(fp)
   18824:	10c00015 	stw	r3,0(r2)
      rc = 0;
   18828:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1882c:	00000206 	br	18838 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   18830:	0001883a 	nop
   18834:	00000106 	br	1883c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   18838:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1883c:	e0bffb17 	ldw	r2,-20(fp)
}
   18840:	e037883a 	mov	sp,fp
   18844:	df000017 	ldw	fp,0(sp)
   18848:	dec00104 	addi	sp,sp,4
   1884c:	f800283a 	ret

00018850 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   18850:	deffed04 	addi	sp,sp,-76
   18854:	dfc01215 	stw	ra,72(sp)
   18858:	df001115 	stw	fp,68(sp)
   1885c:	df001104 	addi	fp,sp,68
   18860:	e13ffc15 	stw	r4,-16(fp)
   18864:	e17ffd15 	stw	r5,-12(fp)
   18868:	e1bffe15 	stw	r6,-8(fp)
   1886c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   18870:	e0bffd17 	ldw	r2,-12(fp)
   18874:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   18878:	e0bffc17 	ldw	r2,-16(fp)
   1887c:	10800a17 	ldw	r2,40(r2)
   18880:	e0bff815 	stw	r2,-32(fp)
   18884:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   18888:	e0bff90b 	ldhu	r2,-28(fp)
   1888c:	e0fffb04 	addi	r3,fp,-20
   18890:	180d883a 	mov	r6,r3
   18894:	100b883a 	mov	r5,r2
   18898:	e13ff817 	ldw	r4,-32(fp)
   1889c:	00155340 	call	15534 <OSSemPend>

  while (space > 0)
   188a0:	00006106 	br	18a28 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   188a4:	e0bffc17 	ldw	r2,-16(fp)
   188a8:	10800d17 	ldw	r2,52(r2)
   188ac:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   188b0:	e0bffc17 	ldw	r2,-16(fp)
   188b4:	10800e17 	ldw	r2,56(r2)
   188b8:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   188bc:	e0fff317 	ldw	r3,-52(fp)
   188c0:	e0bff417 	ldw	r2,-48(fp)
   188c4:	18800536 	bltu	r3,r2,188dc <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   188c8:	e0fff317 	ldw	r3,-52(fp)
   188cc:	e0bff417 	ldw	r2,-48(fp)
   188d0:	1885c83a 	sub	r2,r3,r2
   188d4:	e0bff115 	stw	r2,-60(fp)
   188d8:	00000406 	br	188ec <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   188dc:	00c20004 	movi	r3,2048
   188e0:	e0bff417 	ldw	r2,-48(fp)
   188e4:	1885c83a 	sub	r2,r3,r2
   188e8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   188ec:	e0bff117 	ldw	r2,-60(fp)
   188f0:	10001e26 	beq	r2,zero,1896c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   188f4:	e0fffe17 	ldw	r3,-8(fp)
   188f8:	e0bff117 	ldw	r2,-60(fp)
   188fc:	1880022e 	bgeu	r3,r2,18908 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   18900:	e0bffe17 	ldw	r2,-8(fp)
   18904:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   18908:	e0bffc17 	ldw	r2,-16(fp)
   1890c:	10c01104 	addi	r3,r2,68
   18910:	e0bff417 	ldw	r2,-48(fp)
   18914:	1885883a 	add	r2,r3,r2
   18918:	e1bff117 	ldw	r6,-60(fp)
   1891c:	100b883a 	mov	r5,r2
   18920:	e13ff017 	ldw	r4,-64(fp)
   18924:	000a6d80 	call	a6d8 <memcpy>
      ptr   += n;
   18928:	e0fff017 	ldw	r3,-64(fp)
   1892c:	e0bff117 	ldw	r2,-60(fp)
   18930:	1885883a 	add	r2,r3,r2
   18934:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   18938:	e0fffe17 	ldw	r3,-8(fp)
   1893c:	e0bff117 	ldw	r2,-60(fp)
   18940:	1885c83a 	sub	r2,r3,r2
   18944:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   18948:	e0fff417 	ldw	r3,-48(fp)
   1894c:	e0bff117 	ldw	r2,-60(fp)
   18950:	1885883a 	add	r2,r3,r2
   18954:	10c1ffcc 	andi	r3,r2,2047
   18958:	e0bffc17 	ldw	r2,-16(fp)
   1895c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   18960:	e0bffe17 	ldw	r2,-8(fp)
   18964:	00bfcf16 	blt	zero,r2,188a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70188a4>
   18968:	00000106 	br	18970 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1896c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   18970:	e0fff017 	ldw	r3,-64(fp)
   18974:	e0bffd17 	ldw	r2,-12(fp)
   18978:	18802e1e 	bne	r3,r2,18a34 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1897c:	e0bfff17 	ldw	r2,-4(fp)
   18980:	1090000c 	andi	r2,r2,16384
   18984:	10002d1e 	bne	r2,zero,18a3c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   18988:	d0a81843 	ldbu	r2,-24479(gp)
   1898c:	10803fcc 	andi	r2,r2,255
   18990:	10800058 	cmpnei	r2,r2,1
   18994:	1000161e 	bne	r2,zero,189f0 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   18998:	e0bffc17 	ldw	r2,-16(fp)
   1899c:	10800c17 	ldw	r2,48(r2)
   189a0:	e0bff215 	stw	r2,-56(fp)
   189a4:	00800144 	movi	r2,5
   189a8:	e0bff98d 	sth	r2,-26(fp)
   189ac:	00bfe0c4 	movi	r2,-125
   189b0:	e0bffa05 	stb	r2,-24(fp)
   189b4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   189b8:	d0a81843 	ldbu	r2,-24479(gp)
   189bc:	10803fcc 	andi	r2,r2,255
   189c0:	10001526 	beq	r2,zero,18a18 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   189c4:	e0fff98b 	ldhu	r3,-26(fp)
   189c8:	e13ffa03 	ldbu	r4,-24(fp)
   189cc:	e17ffa8b 	ldhu	r5,-22(fp)
   189d0:	e0bffb44 	addi	r2,fp,-19
   189d4:	d8800015 	stw	r2,0(sp)
   189d8:	280f883a 	mov	r7,r5
   189dc:	200d883a 	mov	r6,r4
   189e0:	180b883a 	mov	r5,r3
   189e4:	e13ff217 	ldw	r4,-56(fp)
   189e8:	0012acc0 	call	12acc <OSFlagPend>
   189ec:	00000a06 	br	18a18 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   189f0:	0001883a 	nop
   189f4:	e0bffc17 	ldw	r2,-16(fp)
   189f8:	10c00d17 	ldw	r3,52(r2)
   189fc:	e0bff317 	ldw	r2,-52(fp)
   18a00:	1880051e 	bne	r3,r2,18a18 <altera_avalon_jtag_uart_read+0x1c8>
   18a04:	e0bffc17 	ldw	r2,-16(fp)
   18a08:	10c00917 	ldw	r3,36(r2)
   18a0c:	e0bffc17 	ldw	r2,-16(fp)
   18a10:	10800117 	ldw	r2,4(r2)
   18a14:	18bff736 	bltu	r3,r2,189f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70189f4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   18a18:	e0bffc17 	ldw	r2,-16(fp)
   18a1c:	10c00d17 	ldw	r3,52(r2)
   18a20:	e0bff317 	ldw	r2,-52(fp)
   18a24:	18800726 	beq	r3,r2,18a44 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   18a28:	e0bffe17 	ldw	r2,-8(fp)
   18a2c:	00bf9d16 	blt	zero,r2,188a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70188a4>
   18a30:	00000506 	br	18a48 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   18a34:	0001883a 	nop
   18a38:	00000306 	br	18a48 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   18a3c:	0001883a 	nop
   18a40:	00000106 	br	18a48 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   18a44:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   18a48:	e0bffc17 	ldw	r2,-16(fp)
   18a4c:	10800a17 	ldw	r2,40(r2)
   18a50:	1009883a 	mov	r4,r2
   18a54:	00158ac0 	call	158ac <OSSemPost>

  if (ptr != buffer)
   18a58:	e0fff017 	ldw	r3,-64(fp)
   18a5c:	e0bffd17 	ldw	r2,-12(fp)
   18a60:	18801826 	beq	r3,r2,18ac4 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a64:	0005303a 	rdctl	r2,status
   18a68:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18a6c:	e0fff717 	ldw	r3,-36(fp)
   18a70:	00bfff84 	movi	r2,-2
   18a74:	1884703a 	and	r2,r3,r2
   18a78:	1001703a 	wrctl	status,r2
  
  return context;
   18a7c:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   18a80:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   18a84:	e0bffc17 	ldw	r2,-16(fp)
   18a88:	10800817 	ldw	r2,32(r2)
   18a8c:	10c00054 	ori	r3,r2,1
   18a90:	e0bffc17 	ldw	r2,-16(fp)
   18a94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   18a98:	e0bffc17 	ldw	r2,-16(fp)
   18a9c:	10800017 	ldw	r2,0(r2)
   18aa0:	10800104 	addi	r2,r2,4
   18aa4:	1007883a 	mov	r3,r2
   18aa8:	e0bffc17 	ldw	r2,-16(fp)
   18aac:	10800817 	ldw	r2,32(r2)
   18ab0:	18800035 	stwio	r2,0(r3)
   18ab4:	e0bff617 	ldw	r2,-40(fp)
   18ab8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18abc:	e0bff517 	ldw	r2,-44(fp)
   18ac0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   18ac4:	e0fff017 	ldw	r3,-64(fp)
   18ac8:	e0bffd17 	ldw	r2,-12(fp)
   18acc:	18800426 	beq	r3,r2,18ae0 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   18ad0:	e0fff017 	ldw	r3,-64(fp)
   18ad4:	e0bffd17 	ldw	r2,-12(fp)
   18ad8:	1885c83a 	sub	r2,r3,r2
   18adc:	00000606 	br	18af8 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   18ae0:	e0bfff17 	ldw	r2,-4(fp)
   18ae4:	1090000c 	andi	r2,r2,16384
   18ae8:	10000226 	beq	r2,zero,18af4 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   18aec:	00bffd44 	movi	r2,-11
   18af0:	00000106 	br	18af8 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   18af4:	00bffec4 	movi	r2,-5
}
   18af8:	e037883a 	mov	sp,fp
   18afc:	dfc00117 	ldw	ra,4(sp)
   18b00:	df000017 	ldw	fp,0(sp)
   18b04:	dec00204 	addi	sp,sp,8
   18b08:	f800283a 	ret

00018b0c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   18b0c:	deffed04 	addi	sp,sp,-76
   18b10:	dfc01215 	stw	ra,72(sp)
   18b14:	df001115 	stw	fp,68(sp)
   18b18:	df001104 	addi	fp,sp,68
   18b1c:	e13ffc15 	stw	r4,-16(fp)
   18b20:	e17ffd15 	stw	r5,-12(fp)
   18b24:	e1bffe15 	stw	r6,-8(fp)
   18b28:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   18b2c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   18b30:	e0bffd17 	ldw	r2,-12(fp)
   18b34:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   18b38:	e0bffc17 	ldw	r2,-16(fp)
   18b3c:	10800b17 	ldw	r2,44(r2)
   18b40:	e0bff815 	stw	r2,-32(fp)
   18b44:	e03ff90d 	sth	zero,-28(fp)
   18b48:	e0bff90b 	ldhu	r2,-28(fp)
   18b4c:	e0fffb44 	addi	r3,fp,-19
   18b50:	180d883a 	mov	r6,r3
   18b54:	100b883a 	mov	r5,r2
   18b58:	e13ff817 	ldw	r4,-32(fp)
   18b5c:	00155340 	call	15534 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   18b60:	00003706 	br	18c40 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   18b64:	e0bffc17 	ldw	r2,-16(fp)
   18b68:	10800f17 	ldw	r2,60(r2)
   18b6c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   18b70:	e0bffc17 	ldw	r2,-16(fp)
   18b74:	10801017 	ldw	r2,64(r2)
   18b78:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   18b7c:	e0fff417 	ldw	r3,-48(fp)
   18b80:	e0bff017 	ldw	r2,-64(fp)
   18b84:	1880062e 	bgeu	r3,r2,18ba0 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   18b88:	e0fff017 	ldw	r3,-64(fp)
   18b8c:	e0bff417 	ldw	r2,-48(fp)
   18b90:	1885c83a 	sub	r2,r3,r2
   18b94:	10bfffc4 	addi	r2,r2,-1
   18b98:	e0bff115 	stw	r2,-60(fp)
   18b9c:	00000b06 	br	18bcc <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   18ba0:	e0bff017 	ldw	r2,-64(fp)
   18ba4:	10000526 	beq	r2,zero,18bbc <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   18ba8:	00c20004 	movi	r3,2048
   18bac:	e0bff417 	ldw	r2,-48(fp)
   18bb0:	1885c83a 	sub	r2,r3,r2
   18bb4:	e0bff115 	stw	r2,-60(fp)
   18bb8:	00000406 	br	18bcc <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   18bbc:	00c1ffc4 	movi	r3,2047
   18bc0:	e0bff417 	ldw	r2,-48(fp)
   18bc4:	1885c83a 	sub	r2,r3,r2
   18bc8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   18bcc:	e0bff117 	ldw	r2,-60(fp)
   18bd0:	10001e26 	beq	r2,zero,18c4c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   18bd4:	e0fffe17 	ldw	r3,-8(fp)
   18bd8:	e0bff117 	ldw	r2,-60(fp)
   18bdc:	1880022e 	bgeu	r3,r2,18be8 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   18be0:	e0bffe17 	ldw	r2,-8(fp)
   18be4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   18be8:	e0bffc17 	ldw	r2,-16(fp)
   18bec:	10c21104 	addi	r3,r2,2116
   18bf0:	e0bff417 	ldw	r2,-48(fp)
   18bf4:	1885883a 	add	r2,r3,r2
   18bf8:	e1bff117 	ldw	r6,-60(fp)
   18bfc:	e17ffd17 	ldw	r5,-12(fp)
   18c00:	1009883a 	mov	r4,r2
   18c04:	000a6d80 	call	a6d8 <memcpy>
      ptr   += n;
   18c08:	e0fffd17 	ldw	r3,-12(fp)
   18c0c:	e0bff117 	ldw	r2,-60(fp)
   18c10:	1885883a 	add	r2,r3,r2
   18c14:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   18c18:	e0fffe17 	ldw	r3,-8(fp)
   18c1c:	e0bff117 	ldw	r2,-60(fp)
   18c20:	1885c83a 	sub	r2,r3,r2
   18c24:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   18c28:	e0fff417 	ldw	r3,-48(fp)
   18c2c:	e0bff117 	ldw	r2,-60(fp)
   18c30:	1885883a 	add	r2,r3,r2
   18c34:	10c1ffcc 	andi	r3,r2,2047
   18c38:	e0bffc17 	ldw	r2,-16(fp)
   18c3c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   18c40:	e0bffe17 	ldw	r2,-8(fp)
   18c44:	00bfc716 	blt	zero,r2,18b64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018b64>
   18c48:	00000106 	br	18c50 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   18c4c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18c50:	0005303a 	rdctl	r2,status
   18c54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18c58:	e0fff717 	ldw	r3,-36(fp)
   18c5c:	00bfff84 	movi	r2,-2
   18c60:	1884703a 	and	r2,r3,r2
   18c64:	1001703a 	wrctl	status,r2
  
  return context;
   18c68:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   18c6c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   18c70:	e0bffc17 	ldw	r2,-16(fp)
   18c74:	10800817 	ldw	r2,32(r2)
   18c78:	10c00094 	ori	r3,r2,2
   18c7c:	e0bffc17 	ldw	r2,-16(fp)
   18c80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   18c84:	e0bffc17 	ldw	r2,-16(fp)
   18c88:	10800017 	ldw	r2,0(r2)
   18c8c:	10800104 	addi	r2,r2,4
   18c90:	1007883a 	mov	r3,r2
   18c94:	e0bffc17 	ldw	r2,-16(fp)
   18c98:	10800817 	ldw	r2,32(r2)
   18c9c:	18800035 	stwio	r2,0(r3)
   18ca0:	e0bff617 	ldw	r2,-40(fp)
   18ca4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18ca8:	e0bff317 	ldw	r2,-52(fp)
   18cac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   18cb0:	e0bffe17 	ldw	r2,-8(fp)
   18cb4:	00802a0e 	bge	zero,r2,18d60 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   18cb8:	e0bfff17 	ldw	r2,-4(fp)
   18cbc:	1090000c 	andi	r2,r2,16384
   18cc0:	10002a1e 	bne	r2,zero,18d6c <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   18cc4:	d0a81843 	ldbu	r2,-24479(gp)
   18cc8:	10803fcc 	andi	r2,r2,255
   18ccc:	10800058 	cmpnei	r2,r2,1
   18cd0:	1000161e 	bne	r2,zero,18d2c <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   18cd4:	e0bffc17 	ldw	r2,-16(fp)
   18cd8:	10800c17 	ldw	r2,48(r2)
   18cdc:	e0bff515 	stw	r2,-44(fp)
   18ce0:	00800184 	movi	r2,6
   18ce4:	e0bff98d 	sth	r2,-26(fp)
   18ce8:	00bfe0c4 	movi	r2,-125
   18cec:	e0bffa05 	stb	r2,-24(fp)
   18cf0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   18cf4:	d0a81843 	ldbu	r2,-24479(gp)
   18cf8:	10803fcc 	andi	r2,r2,255
   18cfc:	10001526 	beq	r2,zero,18d54 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   18d00:	e0fff98b 	ldhu	r3,-26(fp)
   18d04:	e13ffa03 	ldbu	r4,-24(fp)
   18d08:	e17ffa8b 	ldhu	r5,-22(fp)
   18d0c:	e0bffb04 	addi	r2,fp,-20
   18d10:	d8800015 	stw	r2,0(sp)
   18d14:	280f883a 	mov	r7,r5
   18d18:	200d883a 	mov	r6,r4
   18d1c:	180b883a 	mov	r5,r3
   18d20:	e13ff517 	ldw	r4,-44(fp)
   18d24:	0012acc0 	call	12acc <OSFlagPend>
   18d28:	00000a06 	br	18d54 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   18d2c:	0001883a 	nop
   18d30:	e0bffc17 	ldw	r2,-16(fp)
   18d34:	10c01017 	ldw	r3,64(r2)
   18d38:	e0bff017 	ldw	r2,-64(fp)
   18d3c:	1880051e 	bne	r3,r2,18d54 <altera_avalon_jtag_uart_write+0x248>
   18d40:	e0bffc17 	ldw	r2,-16(fp)
   18d44:	10c00917 	ldw	r3,36(r2)
   18d48:	e0bffc17 	ldw	r2,-16(fp)
   18d4c:	10800117 	ldw	r2,4(r2)
   18d50:	18bff736 	bltu	r3,r2,18d30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018d30>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   18d54:	e0bffc17 	ldw	r2,-16(fp)
   18d58:	10800917 	ldw	r2,36(r2)
   18d5c:	1000051e 	bne	r2,zero,18d74 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   18d60:	e0bffe17 	ldw	r2,-8(fp)
   18d64:	00bfb616 	blt	zero,r2,18c40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018c40>
   18d68:	00000306 	br	18d78 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   18d6c:	0001883a 	nop
   18d70:	00000106 	br	18d78 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   18d74:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   18d78:	e0bffc17 	ldw	r2,-16(fp)
   18d7c:	10800b17 	ldw	r2,44(r2)
   18d80:	1009883a 	mov	r4,r2
   18d84:	00158ac0 	call	158ac <OSSemPost>

  if (ptr != start)
   18d88:	e0fffd17 	ldw	r3,-12(fp)
   18d8c:	e0bff217 	ldw	r2,-56(fp)
   18d90:	18800426 	beq	r3,r2,18da4 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   18d94:	e0fffd17 	ldw	r3,-12(fp)
   18d98:	e0bff217 	ldw	r2,-56(fp)
   18d9c:	1885c83a 	sub	r2,r3,r2
   18da0:	00000606 	br	18dbc <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   18da4:	e0bfff17 	ldw	r2,-4(fp)
   18da8:	1090000c 	andi	r2,r2,16384
   18dac:	10000226 	beq	r2,zero,18db8 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   18db0:	00bffd44 	movi	r2,-11
   18db4:	00000106 	br	18dbc <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   18db8:	00bffec4 	movi	r2,-5
}
   18dbc:	e037883a 	mov	sp,fp
   18dc0:	dfc00117 	ldw	ra,4(sp)
   18dc4:	df000017 	ldw	fp,0(sp)
   18dc8:	dec00204 	addi	sp,sp,8
   18dcc:	f800283a 	ret

00018dd0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   18dd0:	defff904 	addi	sp,sp,-28
   18dd4:	dfc00615 	stw	ra,24(sp)
   18dd8:	df000515 	stw	fp,20(sp)
   18ddc:	df000504 	addi	fp,sp,20
   18de0:	e13ffe15 	stw	r4,-8(fp)
   18de4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   18de8:	0007883a 	mov	r3,zero
   18dec:	e0bffe17 	ldw	r2,-8(fp)
   18df0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   18df4:	e0bffe17 	ldw	r2,-8(fp)
   18df8:	10800104 	addi	r2,r2,4
   18dfc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18e00:	0005303a 	rdctl	r2,status
   18e04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18e08:	e0fffc17 	ldw	r3,-16(fp)
   18e0c:	00bfff84 	movi	r2,-2
   18e10:	1884703a 	and	r2,r3,r2
   18e14:	1001703a 	wrctl	status,r2
  
  return context;
   18e18:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   18e1c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   18e20:	001aae00 	call	1aae0 <alt_tick>
   18e24:	e0bffb17 	ldw	r2,-20(fp)
   18e28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18e2c:	e0bffd17 	ldw	r2,-12(fp)
   18e30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   18e34:	0001883a 	nop
   18e38:	e037883a 	mov	sp,fp
   18e3c:	dfc00117 	ldw	ra,4(sp)
   18e40:	df000017 	ldw	fp,0(sp)
   18e44:	dec00204 	addi	sp,sp,8
   18e48:	f800283a 	ret

00018e4c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   18e4c:	defff904 	addi	sp,sp,-28
   18e50:	dfc00615 	stw	ra,24(sp)
   18e54:	df000515 	stw	fp,20(sp)
   18e58:	df000504 	addi	fp,sp,20
   18e5c:	e13ffc15 	stw	r4,-16(fp)
   18e60:	e17ffd15 	stw	r5,-12(fp)
   18e64:	e1bffe15 	stw	r6,-8(fp)
   18e68:	e1ffff15 	stw	r7,-4(fp)
   18e6c:	e0bfff17 	ldw	r2,-4(fp)
   18e70:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   18e74:	d0a82d17 	ldw	r2,-24396(gp)
   18e78:	1000021e 	bne	r2,zero,18e84 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   18e7c:	e0bffb17 	ldw	r2,-20(fp)
   18e80:	d0a82d15 	stw	r2,-24396(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   18e84:	e0bffc17 	ldw	r2,-16(fp)
   18e88:	10800104 	addi	r2,r2,4
   18e8c:	00c001c4 	movi	r3,7
   18e90:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   18e94:	018000b4 	movhi	r6,2
   18e98:	31a37404 	addi	r6,r6,-29232
   18e9c:	e17ffc17 	ldw	r5,-16(fp)
   18ea0:	e13ffe17 	ldw	r4,-8(fp)
   18ea4:	001a6700 	call	1a670 <alt_irq_register>
#endif  
}
   18ea8:	0001883a 	nop
   18eac:	e037883a 	mov	sp,fp
   18eb0:	dfc00117 	ldw	ra,4(sp)
   18eb4:	df000017 	ldw	fp,0(sp)
   18eb8:	dec00204 	addi	sp,sp,8
   18ebc:	f800283a 	ret

00018ec0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   18ec0:	defffc04 	addi	sp,sp,-16
   18ec4:	df000315 	stw	fp,12(sp)
   18ec8:	df000304 	addi	fp,sp,12
   18ecc:	e13ffe15 	stw	r4,-8(fp)
   18ed0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   18ed4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   18ed8:	e0bfff17 	ldw	r2,-4(fp)
   18edc:	1000061e 	bne	r2,zero,18ef8 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   18ee0:	e0bffe17 	ldw	r2,-8(fp)
   18ee4:	1007883a 	mov	r3,r2
   18ee8:	e0bffd03 	ldbu	r2,-12(fp)
   18eec:	1884b03a 	or	r2,r3,r2
   18ef0:	e0bffd05 	stb	r2,-12(fp)
   18ef4:	00000806 	br	18f18 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   18ef8:	e0bffe17 	ldw	r2,-8(fp)
   18efc:	1007883a 	mov	r3,r2
   18f00:	e0bffd03 	ldbu	r2,-12(fp)
   18f04:	1884b03a 	or	r2,r3,r2
   18f08:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   18f0c:	e0bffd03 	ldbu	r2,-12(fp)
   18f10:	10801014 	ori	r2,r2,64
   18f14:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   18f18:	e0fffd03 	ldbu	r3,-12(fp)
   18f1c:	00bfe004 	movi	r2,-128
   18f20:	1884b03a 	or	r2,r3,r2
}
   18f24:	e037883a 	mov	sp,fp
   18f28:	df000017 	ldw	fp,0(sp)
   18f2c:	dec00104 	addi	sp,sp,4
   18f30:	f800283a 	ret

00018f34 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   18f34:	defffd04 	addi	sp,sp,-12
   18f38:	df000215 	stw	fp,8(sp)
   18f3c:	df000204 	addi	fp,sp,8
   18f40:	e13ffe15 	stw	r4,-8(fp)
   18f44:	2805883a 	mov	r2,r5
   18f48:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   18f4c:	e0bffe17 	ldw	r2,-8(fp)
   18f50:	10800a17 	ldw	r2,40(r2)
   18f54:	1007883a 	mov	r3,r2
   18f58:	e0bfff03 	ldbu	r2,-4(fp)
   18f5c:	18800025 	stbio	r2,0(r3)
}
   18f60:	0001883a 	nop
   18f64:	e037883a 	mov	sp,fp
   18f68:	df000017 	ldw	fp,0(sp)
   18f6c:	dec00104 	addi	sp,sp,4
   18f70:	f800283a 	ret

00018f74 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   18f74:	defffe04 	addi	sp,sp,-8
   18f78:	df000115 	stw	fp,4(sp)
   18f7c:	df000104 	addi	fp,sp,4
   18f80:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   18f84:	e0bfff17 	ldw	r2,-4(fp)
   18f88:	10800a17 	ldw	r2,40(r2)
   18f8c:	1007883a 	mov	r3,r2
   18f90:	00800044 	movi	r2,1
   18f94:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   18f98:	0001883a 	nop
   18f9c:	e037883a 	mov	sp,fp
   18fa0:	df000017 	ldw	fp,0(sp)
   18fa4:	dec00104 	addi	sp,sp,4
   18fa8:	f800283a 	ret

00018fac <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   18fac:	defffc04 	addi	sp,sp,-16
   18fb0:	dfc00315 	stw	ra,12(sp)
   18fb4:	df000215 	stw	fp,8(sp)
   18fb8:	df000204 	addi	fp,sp,8
   18fbc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   18fc0:	d1600804 	addi	r5,gp,-32736
   18fc4:	e13fff17 	ldw	r4,-4(fp)
   18fc8:	001a46c0 	call	1a46c <alt_find_dev>
   18fcc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   18fd0:	e0bffe17 	ldw	r2,-8(fp)
}
   18fd4:	e037883a 	mov	sp,fp
   18fd8:	dfc00117 	ldw	ra,4(sp)
   18fdc:	df000017 	ldw	fp,0(sp)
   18fe0:	dec00204 	addi	sp,sp,8
   18fe4:	f800283a 	ret

00018fe8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   18fe8:	defffb04 	addi	sp,sp,-20
   18fec:	df000415 	stw	fp,16(sp)
   18ff0:	df000404 	addi	fp,sp,16
   18ff4:	e13ffd15 	stw	r4,-12(fp)
   18ff8:	e17ffe15 	stw	r5,-8(fp)
   18ffc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   19000:	e03ffc15 	stw	zero,-16(fp)
   19004:	00000f06 	br	19044 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   19008:	e0bffd17 	ldw	r2,-12(fp)
   1900c:	10800a17 	ldw	r2,40(r2)
   19010:	10800044 	addi	r2,r2,1
   19014:	1009883a 	mov	r4,r2
   19018:	e0fffe17 	ldw	r3,-8(fp)
   1901c:	e0bffc17 	ldw	r2,-16(fp)
   19020:	1885883a 	add	r2,r3,r2
   19024:	10800003 	ldbu	r2,0(r2)
   19028:	10803fcc 	andi	r2,r2,255
   1902c:	1080201c 	xori	r2,r2,128
   19030:	10bfe004 	addi	r2,r2,-128
   19034:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   19038:	e0bffc17 	ldw	r2,-16(fp)
   1903c:	10800044 	addi	r2,r2,1
   19040:	e0bffc15 	stw	r2,-16(fp)
   19044:	e0fffc17 	ldw	r3,-16(fp)
   19048:	e0bfff17 	ldw	r2,-4(fp)
   1904c:	18bfee36 	bltu	r3,r2,19008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019008>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   19050:	0001883a 	nop
   19054:	e037883a 	mov	sp,fp
   19058:	df000017 	ldw	fp,0(sp)
   1905c:	dec00104 	addi	sp,sp,4
   19060:	f800283a 	ret

00019064 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   19064:	defffd04 	addi	sp,sp,-12
   19068:	df000215 	stw	fp,8(sp)
   1906c:	df000204 	addi	fp,sp,8
   19070:	e13ffe15 	stw	r4,-8(fp)
   19074:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   19078:	00000d06 	br	190b0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1907c:	e0bffe17 	ldw	r2,-8(fp)
   19080:	10800a17 	ldw	r2,40(r2)
   19084:	10800044 	addi	r2,r2,1
   19088:	1007883a 	mov	r3,r2
   1908c:	e0bfff17 	ldw	r2,-4(fp)
   19090:	10800003 	ldbu	r2,0(r2)
   19094:	10803fcc 	andi	r2,r2,255
   19098:	1080201c 	xori	r2,r2,128
   1909c:	10bfe004 	addi	r2,r2,-128
   190a0:	18800025 	stbio	r2,0(r3)
		++ptr;
   190a4:	e0bfff17 	ldw	r2,-4(fp)
   190a8:	10800044 	addi	r2,r2,1
   190ac:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   190b0:	e0bfff17 	ldw	r2,-4(fp)
   190b4:	10800003 	ldbu	r2,0(r2)
   190b8:	10803fcc 	andi	r2,r2,255
   190bc:	1080201c 	xori	r2,r2,128
   190c0:	10bfe004 	addi	r2,r2,-128
   190c4:	103fed1e 	bne	r2,zero,1907c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701907c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   190c8:	0001883a 	nop
   190cc:	e037883a 	mov	sp,fp
   190d0:	df000017 	ldw	fp,0(sp)
   190d4:	dec00104 	addi	sp,sp,4
   190d8:	f800283a 	ret

000190dc <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   190dc:	defffb04 	addi	sp,sp,-20
   190e0:	dfc00415 	stw	ra,16(sp)
   190e4:	df000315 	stw	fp,12(sp)
   190e8:	df000304 	addi	fp,sp,12
   190ec:	e13ffd15 	stw	r4,-12(fp)
   190f0:	e17ffe15 	stw	r5,-8(fp)
   190f4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   190f8:	e0bffd17 	ldw	r2,-12(fp)
   190fc:	10800017 	ldw	r2,0(r2)
   19100:	e0ffff17 	ldw	r3,-4(fp)
   19104:	180d883a 	mov	r6,r3
   19108:	e17ffe17 	ldw	r5,-8(fp)
   1910c:	1009883a 	mov	r4,r2
   19110:	0018fe80 	call	18fe8 <alt_up_character_lcd_write>
	return 0;
   19114:	0005883a 	mov	r2,zero
}
   19118:	e037883a 	mov	sp,fp
   1911c:	dfc00117 	ldw	ra,4(sp)
   19120:	df000017 	ldw	fp,0(sp)
   19124:	dec00204 	addi	sp,sp,8
   19128:	f800283a 	ret

0001912c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1912c:	defffa04 	addi	sp,sp,-24
   19130:	dfc00515 	stw	ra,20(sp)
   19134:	df000415 	stw	fp,16(sp)
   19138:	df000404 	addi	fp,sp,16
   1913c:	e13ffd15 	stw	r4,-12(fp)
   19140:	e17ffe15 	stw	r5,-8(fp)
   19144:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   19148:	e0bffe17 	ldw	r2,-8(fp)
   1914c:	10800a28 	cmpgeui	r2,r2,40
   19150:	1000031e 	bne	r2,zero,19160 <alt_up_character_lcd_set_cursor_pos+0x34>
   19154:	e0bfff17 	ldw	r2,-4(fp)
   19158:	108000b0 	cmpltui	r2,r2,2
   1915c:	1000021e 	bne	r2,zero,19168 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   19160:	00bfffc4 	movi	r2,-1
   19164:	00000906 	br	1918c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   19168:	e17fff17 	ldw	r5,-4(fp)
   1916c:	e13ffe17 	ldw	r4,-8(fp)
   19170:	0018ec00 	call	18ec0 <get_DDRAM_addr>
   19174:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   19178:	e0bffc03 	ldbu	r2,-16(fp)
   1917c:	100b883a 	mov	r5,r2
   19180:	e13ffd17 	ldw	r4,-12(fp)
   19184:	0018f340 	call	18f34 <alt_up_character_lcd_send_cmd>
	return 0;
   19188:	0005883a 	mov	r2,zero
}
   1918c:	e037883a 	mov	sp,fp
   19190:	dfc00117 	ldw	ra,4(sp)
   19194:	df000017 	ldw	fp,0(sp)
   19198:	dec00204 	addi	sp,sp,8
   1919c:	f800283a 	ret

000191a0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   191a0:	defffb04 	addi	sp,sp,-20
   191a4:	dfc00415 	stw	ra,16(sp)
   191a8:	df000315 	stw	fp,12(sp)
   191ac:	df000304 	addi	fp,sp,12
   191b0:	e13ffe15 	stw	r4,-8(fp)
   191b4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   191b8:	e0bfff17 	ldw	r2,-4(fp)
   191bc:	10001526 	beq	r2,zero,19214 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   191c0:	e0bfff17 	ldw	r2,-4(fp)
   191c4:	0080020e 	bge	zero,r2,191d0 <alt_up_character_lcd_shift_cursor+0x30>
   191c8:	00800504 	movi	r2,20
   191cc:	00000106 	br	191d4 <alt_up_character_lcd_shift_cursor+0x34>
   191d0:	00800404 	movi	r2,16
   191d4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   191d8:	e0bfff17 	ldw	r2,-4(fp)
   191dc:	1000010e 	bge	r2,zero,191e4 <alt_up_character_lcd_shift_cursor+0x44>
   191e0:	0085c83a 	sub	r2,zero,r2
   191e4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   191e8:	00000406 	br	191fc <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   191ec:	e0bffd43 	ldbu	r2,-11(fp)
   191f0:	100b883a 	mov	r5,r2
   191f4:	e13ffe17 	ldw	r4,-8(fp)
   191f8:	0018f340 	call	18f34 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   191fc:	e0bffd03 	ldbu	r2,-12(fp)
   19200:	10ffffc4 	addi	r3,r2,-1
   19204:	e0fffd05 	stb	r3,-12(fp)
   19208:	10803fcc 	andi	r2,r2,255
   1920c:	103ff71e 	bne	r2,zero,191ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70191ec>
   19210:	00000106 	br	19218 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   19214:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   19218:	e037883a 	mov	sp,fp
   1921c:	dfc00117 	ldw	ra,4(sp)
   19220:	df000017 	ldw	fp,0(sp)
   19224:	dec00204 	addi	sp,sp,8
   19228:	f800283a 	ret

0001922c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1922c:	defffb04 	addi	sp,sp,-20
   19230:	dfc00415 	stw	ra,16(sp)
   19234:	df000315 	stw	fp,12(sp)
   19238:	df000304 	addi	fp,sp,12
   1923c:	e13ffe15 	stw	r4,-8(fp)
   19240:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   19244:	e0bfff17 	ldw	r2,-4(fp)
   19248:	10001526 	beq	r2,zero,192a0 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1924c:	e0bfff17 	ldw	r2,-4(fp)
   19250:	0080020e 	bge	zero,r2,1925c <alt_up_character_lcd_shift_display+0x30>
   19254:	00800704 	movi	r2,28
   19258:	00000106 	br	19260 <alt_up_character_lcd_shift_display+0x34>
   1925c:	00800604 	movi	r2,24
   19260:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   19264:	e0bfff17 	ldw	r2,-4(fp)
   19268:	1000010e 	bge	r2,zero,19270 <alt_up_character_lcd_shift_display+0x44>
   1926c:	0085c83a 	sub	r2,zero,r2
   19270:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19274:	00000406 	br	19288 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   19278:	e0bffd43 	ldbu	r2,-11(fp)
   1927c:	100b883a 	mov	r5,r2
   19280:	e13ffe17 	ldw	r4,-8(fp)
   19284:	0018f340 	call	18f34 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19288:	e0bffd03 	ldbu	r2,-12(fp)
   1928c:	10ffffc4 	addi	r3,r2,-1
   19290:	e0fffd05 	stb	r3,-12(fp)
   19294:	10803fcc 	andi	r2,r2,255
   19298:	103ff71e 	bne	r2,zero,19278 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019278>
   1929c:	00000106 	br	192a4 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   192a0:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   192a4:	e037883a 	mov	sp,fp
   192a8:	dfc00117 	ldw	ra,4(sp)
   192ac:	df000017 	ldw	fp,0(sp)
   192b0:	dec00204 	addi	sp,sp,8
   192b4:	f800283a 	ret

000192b8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   192b8:	defffa04 	addi	sp,sp,-24
   192bc:	dfc00515 	stw	ra,20(sp)
   192c0:	df000415 	stw	fp,16(sp)
   192c4:	df000404 	addi	fp,sp,16
   192c8:	e13ffd15 	stw	r4,-12(fp)
   192cc:	e17ffe15 	stw	r5,-8(fp)
   192d0:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   192d4:	e0bffe17 	ldw	r2,-8(fp)
   192d8:	10800a28 	cmpgeui	r2,r2,40
   192dc:	1000031e 	bne	r2,zero,192ec <alt_up_character_lcd_erase_pos+0x34>
   192e0:	e0bfff17 	ldw	r2,-4(fp)
   192e4:	108000b0 	cmpltui	r2,r2,2
   192e8:	1000021e 	bne	r2,zero,192f4 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   192ec:	00bfffc4 	movi	r2,-1
   192f0:	00000f06 	br	19330 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   192f4:	e17fff17 	ldw	r5,-4(fp)
   192f8:	e13ffe17 	ldw	r4,-8(fp)
   192fc:	0018ec00 	call	18ec0 <get_DDRAM_addr>
   19300:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   19304:	e0bffc03 	ldbu	r2,-16(fp)
   19308:	100b883a 	mov	r5,r2
   1930c:	e13ffd17 	ldw	r4,-12(fp)
   19310:	0018f340 	call	18f34 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   19314:	e0bffd17 	ldw	r2,-12(fp)
   19318:	10800a17 	ldw	r2,40(r2)
   1931c:	10800044 	addi	r2,r2,1
   19320:	1007883a 	mov	r3,r2
   19324:	00800084 	movi	r2,2
   19328:	18800025 	stbio	r2,0(r3)
	return 0;
   1932c:	0005883a 	mov	r2,zero
}
   19330:	e037883a 	mov	sp,fp
   19334:	dfc00117 	ldw	ra,4(sp)
   19338:	df000017 	ldw	fp,0(sp)
   1933c:	dec00204 	addi	sp,sp,8
   19340:	f800283a 	ret

00019344 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   19344:	defffd04 	addi	sp,sp,-12
   19348:	dfc00215 	stw	ra,8(sp)
   1934c:	df000115 	stw	fp,4(sp)
   19350:	df000104 	addi	fp,sp,4
   19354:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   19358:	01400304 	movi	r5,12
   1935c:	e13fff17 	ldw	r4,-4(fp)
   19360:	0018f340 	call	18f34 <alt_up_character_lcd_send_cmd>
}
   19364:	0001883a 	nop
   19368:	e037883a 	mov	sp,fp
   1936c:	dfc00117 	ldw	ra,4(sp)
   19370:	df000017 	ldw	fp,0(sp)
   19374:	dec00204 	addi	sp,sp,8
   19378:	f800283a 	ret

0001937c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1937c:	defffd04 	addi	sp,sp,-12
   19380:	dfc00215 	stw	ra,8(sp)
   19384:	df000115 	stw	fp,4(sp)
   19388:	df000104 	addi	fp,sp,4
   1938c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   19390:	014003c4 	movi	r5,15
   19394:	e13fff17 	ldw	r4,-4(fp)
   19398:	0018f340 	call	18f34 <alt_up_character_lcd_send_cmd>
}
   1939c:	0001883a 	nop
   193a0:	e037883a 	mov	sp,fp
   193a4:	dfc00117 	ldw	ra,4(sp)
   193a8:	df000017 	ldw	fp,0(sp)
   193ac:	dec00204 	addi	sp,sp,8
   193b0:	f800283a 	ret

000193b4 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   193b4:	defffd04 	addi	sp,sp,-12
   193b8:	df000215 	stw	fp,8(sp)
   193bc:	df000204 	addi	fp,sp,8
   193c0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   193c4:	e0bfff17 	ldw	r2,-4(fp)
   193c8:	10800a17 	ldw	r2,40(r2)
   193cc:	10800104 	addi	r2,r2,4
   193d0:	10800037 	ldwio	r2,0(r2)
   193d4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   193d8:	e0bffe17 	ldw	r2,-8(fp)
   193dc:	10800054 	ori	r2,r2,1
   193e0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   193e4:	e0bfff17 	ldw	r2,-4(fp)
   193e8:	10800a17 	ldw	r2,40(r2)
   193ec:	10800104 	addi	r2,r2,4
   193f0:	1007883a 	mov	r3,r2
   193f4:	e0bffe17 	ldw	r2,-8(fp)
   193f8:	18800035 	stwio	r2,0(r3)
}
   193fc:	0001883a 	nop
   19400:	e037883a 	mov	sp,fp
   19404:	df000017 	ldw	fp,0(sp)
   19408:	dec00104 	addi	sp,sp,4
   1940c:	f800283a 	ret

00019410 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   19410:	defffd04 	addi	sp,sp,-12
   19414:	df000215 	stw	fp,8(sp)
   19418:	df000204 	addi	fp,sp,8
   1941c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   19420:	e0bfff17 	ldw	r2,-4(fp)
   19424:	10800a17 	ldw	r2,40(r2)
   19428:	10800104 	addi	r2,r2,4
   1942c:	10800037 	ldwio	r2,0(r2)
   19430:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   19434:	e0fffe17 	ldw	r3,-8(fp)
   19438:	00bfff84 	movi	r2,-2
   1943c:	1884703a 	and	r2,r3,r2
   19440:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   19444:	e0bfff17 	ldw	r2,-4(fp)
   19448:	10800a17 	ldw	r2,40(r2)
   1944c:	10800104 	addi	r2,r2,4
   19450:	1007883a 	mov	r3,r2
   19454:	e0bffe17 	ldw	r2,-8(fp)
   19458:	18800035 	stwio	r2,0(r3)
}
   1945c:	0001883a 	nop
   19460:	e037883a 	mov	sp,fp
   19464:	df000017 	ldw	fp,0(sp)
   19468:	dec00104 	addi	sp,sp,4
   1946c:	f800283a 	ret

00019470 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   19470:	defffd04 	addi	sp,sp,-12
   19474:	df000215 	stw	fp,8(sp)
   19478:	df000204 	addi	fp,sp,8
   1947c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   19480:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   19484:	e0bfff17 	ldw	r2,-4(fp)
   19488:	10800a17 	ldw	r2,40(r2)
   1948c:	10800084 	addi	r2,r2,2
   19490:	1080002b 	ldhuio	r2,0(r2)
   19494:	10bfffcc 	andi	r2,r2,65535
   19498:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1949c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   194a0:	e037883a 	mov	sp,fp
   194a4:	df000017 	ldw	fp,0(sp)
   194a8:	dec00104 	addi	sp,sp,4
   194ac:	f800283a 	ret

000194b0 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   194b0:	defffd04 	addi	sp,sp,-12
   194b4:	df000215 	stw	fp,8(sp)
   194b8:	df000204 	addi	fp,sp,8
   194bc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   194c0:	e0bfff17 	ldw	r2,-4(fp)
   194c4:	10800a17 	ldw	r2,40(r2)
   194c8:	10800104 	addi	r2,r2,4
   194cc:	10800037 	ldwio	r2,0(r2)
   194d0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   194d4:	e0bffe17 	ldw	r2,-8(fp)
   194d8:	1004d43a 	srli	r2,r2,16
}
   194dc:	e037883a 	mov	sp,fp
   194e0:	df000017 	ldw	fp,0(sp)
   194e4:	dec00104 	addi	sp,sp,4
   194e8:	f800283a 	ret

000194ec <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   194ec:	defffd04 	addi	sp,sp,-12
   194f0:	df000215 	stw	fp,8(sp)
   194f4:	df000204 	addi	fp,sp,8
   194f8:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   194fc:	e0bfff17 	ldw	r2,-4(fp)
   19500:	1080800c 	andi	r2,r2,512
   19504:	1004d27a 	srli	r2,r2,9
   19508:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1950c:	e0bffe17 	ldw	r2,-8(fp)
   19510:	10000226 	beq	r2,zero,1951c <alt_up_irda_check_parity+0x30>
   19514:	00bfffc4 	movi	r2,-1
   19518:	00000106 	br	19520 <alt_up_irda_check_parity+0x34>
   1951c:	0005883a 	mov	r2,zero
}
   19520:	e037883a 	mov	sp,fp
   19524:	df000017 	ldw	fp,0(sp)
   19528:	dec00104 	addi	sp,sp,4
   1952c:	f800283a 	ret

00019530 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   19530:	defffd04 	addi	sp,sp,-12
   19534:	df000215 	stw	fp,8(sp)
   19538:	df000204 	addi	fp,sp,8
   1953c:	e13ffe15 	stw	r4,-8(fp)
   19540:	2805883a 	mov	r2,r5
   19544:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   19548:	e0bffe17 	ldw	r2,-8(fp)
   1954c:	10800a17 	ldw	r2,40(r2)
   19550:	1007883a 	mov	r3,r2
   19554:	e0bfff03 	ldbu	r2,-4(fp)
   19558:	18800035 	stwio	r2,0(r3)
	return 0;
   1955c:	0005883a 	mov	r2,zero
}
   19560:	e037883a 	mov	sp,fp
   19564:	df000017 	ldw	fp,0(sp)
   19568:	dec00104 	addi	sp,sp,4
   1956c:	f800283a 	ret

00019570 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   19570:	defffa04 	addi	sp,sp,-24
   19574:	dfc00515 	stw	ra,20(sp)
   19578:	df000415 	stw	fp,16(sp)
   1957c:	df000404 	addi	fp,sp,16
   19580:	e13ffd15 	stw	r4,-12(fp)
   19584:	e17ffe15 	stw	r5,-8(fp)
   19588:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1958c:	e0bffd17 	ldw	r2,-12(fp)
   19590:	10800a17 	ldw	r2,40(r2)
   19594:	10800037 	ldwio	r2,0(r2)
   19598:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1959c:	e0bffc17 	ldw	r2,-16(fp)
   195a0:	1007883a 	mov	r3,r2
   195a4:	e0bffe17 	ldw	r2,-8(fp)
   195a8:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   195ac:	e13ffc17 	ldw	r4,-16(fp)
   195b0:	00194ec0 	call	194ec <alt_up_irda_check_parity>
   195b4:	1007883a 	mov	r3,r2
   195b8:	e0bfff17 	ldw	r2,-4(fp)
   195bc:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   195c0:	e0bffc17 	ldw	r2,-16(fp)
   195c4:	10a0000c 	andi	r2,r2,32768
   195c8:	1004d3fa 	srli	r2,r2,15
   195cc:	10bfffc4 	addi	r2,r2,-1
}
   195d0:	e037883a 	mov	sp,fp
   195d4:	dfc00117 	ldw	ra,4(sp)
   195d8:	df000017 	ldw	fp,0(sp)
   195dc:	dec00204 	addi	sp,sp,8
   195e0:	f800283a 	ret

000195e4 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   195e4:	defff804 	addi	sp,sp,-32
   195e8:	dfc00715 	stw	ra,28(sp)
   195ec:	df000615 	stw	fp,24(sp)
   195f0:	df000604 	addi	fp,sp,24
   195f4:	e13ffd15 	stw	r4,-12(fp)
   195f8:	e17ffe15 	stw	r5,-8(fp)
   195fc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   19600:	e0bffd17 	ldw	r2,-12(fp)
   19604:	10800017 	ldw	r2,0(r2)
   19608:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1960c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   19610:	00000c06 	br	19644 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   19614:	e0bffe17 	ldw	r2,-8(fp)
   19618:	10c00044 	addi	r3,r2,1
   1961c:	e0fffe15 	stw	r3,-8(fp)
   19620:	e0fffc04 	addi	r3,fp,-16
   19624:	180d883a 	mov	r6,r3
   19628:	100b883a 	mov	r5,r2
   1962c:	e13ffb17 	ldw	r4,-20(fp)
   19630:	00195700 	call	19570 <alt_up_irda_read_data>
   19634:	1000081e 	bne	r2,zero,19658 <alt_up_irda_read_fd+0x74>
			count++;
   19638:	e0bffa17 	ldw	r2,-24(fp)
   1963c:	10800044 	addi	r2,r2,1
   19640:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   19644:	e0bfff17 	ldw	r2,-4(fp)
   19648:	10ffffc4 	addi	r3,r2,-1
   1964c:	e0ffff15 	stw	r3,-4(fp)
   19650:	103ff01e 	bne	r2,zero,19614 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019614>
   19654:	00000106 	br	1965c <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   19658:	0001883a 	nop
	}
	return count;
   1965c:	e0bffa17 	ldw	r2,-24(fp)
}
   19660:	e037883a 	mov	sp,fp
   19664:	dfc00117 	ldw	ra,4(sp)
   19668:	df000017 	ldw	fp,0(sp)
   1966c:	dec00204 	addi	sp,sp,8
   19670:	f800283a 	ret

00019674 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   19674:	defff904 	addi	sp,sp,-28
   19678:	dfc00615 	stw	ra,24(sp)
   1967c:	df000515 	stw	fp,20(sp)
   19680:	df000504 	addi	fp,sp,20
   19684:	e13ffd15 	stw	r4,-12(fp)
   19688:	e17ffe15 	stw	r5,-8(fp)
   1968c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   19690:	e0bffd17 	ldw	r2,-12(fp)
   19694:	10800017 	ldw	r2,0(r2)
   19698:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1969c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   196a0:	00000c06 	br	196d4 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   196a4:	e0bffe17 	ldw	r2,-8(fp)
   196a8:	10c00044 	addi	r3,r2,1
   196ac:	e0fffe15 	stw	r3,-8(fp)
   196b0:	10800003 	ldbu	r2,0(r2)
   196b4:	10803fcc 	andi	r2,r2,255
   196b8:	100b883a 	mov	r5,r2
   196bc:	e13ffc17 	ldw	r4,-16(fp)
   196c0:	00195300 	call	19530 <alt_up_irda_write_data>
   196c4:	1000081e 	bne	r2,zero,196e8 <alt_up_irda_write_fd+0x74>
			count++;
   196c8:	e0bffb17 	ldw	r2,-20(fp)
   196cc:	10800044 	addi	r2,r2,1
   196d0:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   196d4:	e0bfff17 	ldw	r2,-4(fp)
   196d8:	10ffffc4 	addi	r3,r2,-1
   196dc:	e0ffff15 	stw	r3,-4(fp)
   196e0:	103ff01e 	bne	r2,zero,196a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70196a4>
   196e4:	00000106 	br	196ec <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   196e8:	0001883a 	nop
	}
	return count;
   196ec:	e0bffb17 	ldw	r2,-20(fp)
}
   196f0:	e037883a 	mov	sp,fp
   196f4:	dfc00117 	ldw	ra,4(sp)
   196f8:	df000017 	ldw	fp,0(sp)
   196fc:	dec00204 	addi	sp,sp,8
   19700:	f800283a 	ret

00019704 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   19704:	defffc04 	addi	sp,sp,-16
   19708:	dfc00315 	stw	ra,12(sp)
   1970c:	df000215 	stw	fp,8(sp)
   19710:	df000204 	addi	fp,sp,8
   19714:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   19718:	d1600804 	addi	r5,gp,-32736
   1971c:	e13fff17 	ldw	r4,-4(fp)
   19720:	001a46c0 	call	1a46c <alt_find_dev>
   19724:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   19728:	e0bffe17 	ldw	r2,-8(fp)
}
   1972c:	e037883a 	mov	sp,fp
   19730:	dfc00117 	ldw	ra,4(sp)
   19734:	df000017 	ldw	fp,0(sp)
   19738:	dec00204 	addi	sp,sp,8
   1973c:	f800283a 	ret

00019740 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   19740:	defffd04 	addi	sp,sp,-12
   19744:	df000215 	stw	fp,8(sp)
   19748:	df000204 	addi	fp,sp,8
   1974c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   19750:	e0bfff17 	ldw	r2,-4(fp)
   19754:	1080400c 	andi	r2,r2,256
   19758:	1004d23a 	srli	r2,r2,8
   1975c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   19760:	e0bffe03 	ldbu	r2,-8(fp)
}
   19764:	e037883a 	mov	sp,fp
   19768:	df000017 	ldw	fp,0(sp)
   1976c:	dec00104 	addi	sp,sp,4
   19770:	f800283a 	ret

00019774 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   19774:	defffd04 	addi	sp,sp,-12
   19778:	df000215 	stw	fp,8(sp)
   1977c:	df000204 	addi	fp,sp,8
   19780:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   19784:	e0bfff17 	ldw	r2,-4(fp)
   19788:	1080004c 	andi	r2,r2,1
   1978c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   19790:	e0bffe03 	ldbu	r2,-8(fp)
}
   19794:	e037883a 	mov	sp,fp
   19798:	df000017 	ldw	fp,0(sp)
   1979c:	dec00104 	addi	sp,sp,4
   197a0:	f800283a 	ret

000197a4 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   197a4:	defffd04 	addi	sp,sp,-12
   197a8:	df000215 	stw	fp,8(sp)
   197ac:	df000204 	addi	fp,sp,8
   197b0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   197b4:	e0bfff17 	ldw	r2,-4(fp)
   197b8:	1081000c 	andi	r2,r2,1024
   197bc:	1004d2ba 	srli	r2,r2,10
   197c0:	e0bffe05 	stb	r2,-8(fp)
	return re;
   197c4:	e0bffe03 	ldbu	r2,-8(fp)
}
   197c8:	e037883a 	mov	sp,fp
   197cc:	df000017 	ldw	fp,0(sp)
   197d0:	dec00104 	addi	sp,sp,4
   197d4:	f800283a 	ret

000197d8 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   197d8:	defffd04 	addi	sp,sp,-12
   197dc:	df000215 	stw	fp,8(sp)
   197e0:	df000204 	addi	fp,sp,8
   197e4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   197e8:	e0bfff17 	ldw	r2,-4(fp)
   197ec:	1004d43a 	srli	r2,r2,16
   197f0:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   197f4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   197f8:	e037883a 	mov	sp,fp
   197fc:	df000017 	ldw	fp,0(sp)
   19800:	dec00104 	addi	sp,sp,4
   19804:	f800283a 	ret

00019808 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   19808:	defffd04 	addi	sp,sp,-12
   1980c:	df000215 	stw	fp,8(sp)
   19810:	df000204 	addi	fp,sp,8
   19814:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   19818:	e0bfff17 	ldw	r2,-4(fp)
   1981c:	10a0000c 	andi	r2,r2,32768
   19820:	1004d3fa 	srli	r2,r2,15
   19824:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   19828:	e0bffe03 	ldbu	r2,-8(fp)
}
   1982c:	e037883a 	mov	sp,fp
   19830:	df000017 	ldw	fp,0(sp)
   19834:	dec00104 	addi	sp,sp,4
   19838:	f800283a 	ret

0001983c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1983c:	defffd04 	addi	sp,sp,-12
   19840:	df000215 	stw	fp,8(sp)
   19844:	df000204 	addi	fp,sp,8
   19848:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1984c:	e0bfff17 	ldw	r2,-4(fp)
   19850:	e0bffe05 	stb	r2,-8(fp)
	return data;
   19854:	e0bffe03 	ldbu	r2,-8(fp)
}
   19858:	e037883a 	mov	sp,fp
   1985c:	df000017 	ldw	fp,0(sp)
   19860:	dec00104 	addi	sp,sp,4
   19864:	f800283a 	ret

00019868 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   19868:	defffb04 	addi	sp,sp,-20
   1986c:	dfc00415 	stw	ra,16(sp)
   19870:	df000315 	stw	fp,12(sp)
   19874:	df000304 	addi	fp,sp,12
   19878:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1987c:	01403fc4 	movi	r5,255
   19880:	e13fff17 	ldw	r4,-4(fp)
   19884:	0019ac80 	call	19ac8 <alt_up_ps2_write_data_byte_with_ack>
   19888:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1988c:	e0bffd17 	ldw	r2,-12(fp)
   19890:	1000211e 	bne	r2,zero,19918 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   19894:	e0bffe04 	addi	r2,fp,-8
   19898:	100b883a 	mov	r5,r2
   1989c:	e13fff17 	ldw	r4,-4(fp)
   198a0:	0019b2c0 	call	19b2c <alt_up_ps2_read_data_byte_timeout>
   198a4:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   198a8:	e0bffd17 	ldw	r2,-12(fp)
   198ac:	10001a1e 	bne	r2,zero,19918 <alt_up_ps2_init+0xb0>
   198b0:	e0bffe03 	ldbu	r2,-8(fp)
   198b4:	10803fcc 	andi	r2,r2,255
   198b8:	10802a98 	cmpnei	r2,r2,170
   198bc:	1000161e 	bne	r2,zero,19918 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   198c0:	e0bffe04 	addi	r2,fp,-8
   198c4:	100b883a 	mov	r5,r2
   198c8:	e13fff17 	ldw	r4,-4(fp)
   198cc:	0019b2c0 	call	19b2c <alt_up_ps2_read_data_byte_timeout>
   198d0:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   198d4:	e0bffd17 	ldw	r2,-12(fp)
   198d8:	10bfe318 	cmpnei	r2,r2,-116
   198dc:	1000041e 	bne	r2,zero,198f0 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   198e0:	e0bfff17 	ldw	r2,-4(fp)
   198e4:	00c00044 	movi	r3,1
   198e8:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   198ec:	00000a06 	br	19918 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   198f0:	e0bffd17 	ldw	r2,-12(fp)
   198f4:	1000081e 	bne	r2,zero,19918 <alt_up_ps2_init+0xb0>
   198f8:	e0bffe03 	ldbu	r2,-8(fp)
   198fc:	10803fcc 	andi	r2,r2,255
   19900:	1000051e 	bne	r2,zero,19918 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   19904:	e0bfff17 	ldw	r2,-4(fp)
   19908:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1990c:	01403d04 	movi	r5,244
   19910:	e13fff17 	ldw	r4,-4(fp)
   19914:	00199ec0 	call	199ec <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   19918:	0001883a 	nop
   1991c:	e037883a 	mov	sp,fp
   19920:	dfc00117 	ldw	ra,4(sp)
   19924:	df000017 	ldw	fp,0(sp)
   19928:	dec00204 	addi	sp,sp,8
   1992c:	f800283a 	ret

00019930 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   19930:	defffd04 	addi	sp,sp,-12
   19934:	df000215 	stw	fp,8(sp)
   19938:	df000204 	addi	fp,sp,8
   1993c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   19940:	e0bfff17 	ldw	r2,-4(fp)
   19944:	10800a17 	ldw	r2,40(r2)
   19948:	10800104 	addi	r2,r2,4
   1994c:	10800037 	ldwio	r2,0(r2)
   19950:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   19954:	e0bffe17 	ldw	r2,-8(fp)
   19958:	10800054 	ori	r2,r2,1
   1995c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   19960:	e0bfff17 	ldw	r2,-4(fp)
   19964:	10800a17 	ldw	r2,40(r2)
   19968:	10800104 	addi	r2,r2,4
   1996c:	1007883a 	mov	r3,r2
   19970:	e0bffe17 	ldw	r2,-8(fp)
   19974:	18800035 	stwio	r2,0(r3)
}
   19978:	0001883a 	nop
   1997c:	e037883a 	mov	sp,fp
   19980:	df000017 	ldw	fp,0(sp)
   19984:	dec00104 	addi	sp,sp,4
   19988:	f800283a 	ret

0001998c <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1998c:	defffd04 	addi	sp,sp,-12
   19990:	df000215 	stw	fp,8(sp)
   19994:	df000204 	addi	fp,sp,8
   19998:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1999c:	e0bfff17 	ldw	r2,-4(fp)
   199a0:	10800a17 	ldw	r2,40(r2)
   199a4:	10800104 	addi	r2,r2,4
   199a8:	10800037 	ldwio	r2,0(r2)
   199ac:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   199b0:	e0fffe17 	ldw	r3,-8(fp)
   199b4:	00bfff84 	movi	r2,-2
   199b8:	1884703a 	and	r2,r3,r2
   199bc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   199c0:	e0bfff17 	ldw	r2,-4(fp)
   199c4:	10800a17 	ldw	r2,40(r2)
   199c8:	10800104 	addi	r2,r2,4
   199cc:	1007883a 	mov	r3,r2
   199d0:	e0bffe17 	ldw	r2,-8(fp)
   199d4:	18800035 	stwio	r2,0(r3)
}
   199d8:	0001883a 	nop
   199dc:	e037883a 	mov	sp,fp
   199e0:	df000017 	ldw	fp,0(sp)
   199e4:	dec00104 	addi	sp,sp,4
   199e8:	f800283a 	ret

000199ec <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   199ec:	defffb04 	addi	sp,sp,-20
   199f0:	dfc00415 	stw	ra,16(sp)
   199f4:	df000315 	stw	fp,12(sp)
   199f8:	df000304 	addi	fp,sp,12
   199fc:	e13ffe15 	stw	r4,-8(fp)
   19a00:	2805883a 	mov	r2,r5
   19a04:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   19a08:	e0bffe17 	ldw	r2,-8(fp)
   19a0c:	10800a17 	ldw	r2,40(r2)
   19a10:	1007883a 	mov	r3,r2
   19a14:	e0bfff03 	ldbu	r2,-4(fp)
   19a18:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   19a1c:	e0bffe17 	ldw	r2,-8(fp)
   19a20:	10800a17 	ldw	r2,40(r2)
   19a24:	10800104 	addi	r2,r2,4
   19a28:	10800037 	ldwio	r2,0(r2)
   19a2c:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   19a30:	e13ffd17 	ldw	r4,-12(fp)
   19a34:	00197a40 	call	197a4 <read_CE_bit>
   19a38:	10803fcc 	andi	r2,r2,255
   19a3c:	10000226 	beq	r2,zero,19a48 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   19a40:	00bffec4 	movi	r2,-5
   19a44:	00000106 	br	19a4c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   19a48:	0005883a 	mov	r2,zero
}
   19a4c:	e037883a 	mov	sp,fp
   19a50:	dfc00117 	ldw	ra,4(sp)
   19a54:	df000017 	ldw	fp,0(sp)
   19a58:	dec00204 	addi	sp,sp,8
   19a5c:	f800283a 	ret

00019a60 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   19a60:	defffc04 	addi	sp,sp,-16
   19a64:	dfc00315 	stw	ra,12(sp)
   19a68:	df000215 	stw	fp,8(sp)
   19a6c:	df000204 	addi	fp,sp,8
   19a70:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   19a74:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   19a78:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   19a7c:	e0bffe44 	addi	r2,fp,-7
   19a80:	100b883a 	mov	r5,r2
   19a84:	e13fff17 	ldw	r4,-4(fp)
   19a88:	0019b2c0 	call	19b2c <alt_up_ps2_read_data_byte_timeout>
   19a8c:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   19a90:	e0bffe03 	ldbu	r2,-8(fp)
   19a94:	1000061e 	bne	r2,zero,19ab0 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   19a98:	e0bffe43 	ldbu	r2,-7(fp)
   19a9c:	10803fcc 	andi	r2,r2,255
   19aa0:	10803e98 	cmpnei	r2,r2,250
   19aa4:	103ff51e 	bne	r2,zero,19a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019a7c>
				return 0;
   19aa8:	0005883a 	mov	r2,zero
   19aac:	00000106 	br	19ab4 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   19ab0:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   19ab4:	e037883a 	mov	sp,fp
   19ab8:	dfc00117 	ldw	ra,4(sp)
   19abc:	df000017 	ldw	fp,0(sp)
   19ac0:	dec00204 	addi	sp,sp,8
   19ac4:	f800283a 	ret

00019ac8 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   19ac8:	defffa04 	addi	sp,sp,-24
   19acc:	dfc00515 	stw	ra,20(sp)
   19ad0:	df000415 	stw	fp,16(sp)
   19ad4:	df000404 	addi	fp,sp,16
   19ad8:	e13ffe15 	stw	r4,-8(fp)
   19adc:	2805883a 	mov	r2,r5
   19ae0:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   19ae4:	e0bfff03 	ldbu	r2,-4(fp)
   19ae8:	100b883a 	mov	r5,r2
   19aec:	e13ffe17 	ldw	r4,-8(fp)
   19af0:	00199ec0 	call	199ec <alt_up_ps2_write_data_byte>
   19af4:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   19af8:	e0bffc17 	ldw	r2,-16(fp)
   19afc:	10000226 	beq	r2,zero,19b08 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   19b00:	e0bffc17 	ldw	r2,-16(fp)
   19b04:	00000406 	br	19b18 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   19b08:	e13ffe17 	ldw	r4,-8(fp)
   19b0c:	0019a600 	call	19a60 <alt_up_ps2_wait_for_ack>
   19b10:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   19b14:	e0bffd17 	ldw	r2,-12(fp)
}
   19b18:	e037883a 	mov	sp,fp
   19b1c:	dfc00117 	ldw	ra,4(sp)
   19b20:	df000017 	ldw	fp,0(sp)
   19b24:	dec00204 	addi	sp,sp,8
   19b28:	f800283a 	ret

00019b2c <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   19b2c:	defffa04 	addi	sp,sp,-24
   19b30:	dfc00515 	stw	ra,20(sp)
   19b34:	df000415 	stw	fp,16(sp)
   19b38:	df000404 	addi	fp,sp,16
   19b3c:	e13ffe15 	stw	r4,-8(fp)
   19b40:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   19b44:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   19b48:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   19b4c:	e0bffc17 	ldw	r2,-16(fp)
   19b50:	10800044 	addi	r2,r2,1
   19b54:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   19b58:	e0bffe17 	ldw	r2,-8(fp)
   19b5c:	10800a17 	ldw	r2,40(r2)
   19b60:	10800037 	ldwio	r2,0(r2)
   19b64:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   19b68:	e13ffd17 	ldw	r4,-12(fp)
   19b6c:	00198080 	call	19808 <read_data_valid>
   19b70:	10803fcc 	andi	r2,r2,255
   19b74:	10000726 	beq	r2,zero,19b94 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   19b78:	e13ffd17 	ldw	r4,-12(fp)
   19b7c:	001983c0 	call	1983c <read_data_byte>
   19b80:	1007883a 	mov	r3,r2
   19b84:	e0bfff17 	ldw	r2,-4(fp)
   19b88:	10c00005 	stb	r3,0(r2)
			return 0;
   19b8c:	0005883a 	mov	r2,zero
   19b90:	00000806 	br	19bb4 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   19b94:	e0bffe17 	ldw	r2,-8(fp)
   19b98:	10800c17 	ldw	r2,48(r2)
   19b9c:	103feb26 	beq	r2,zero,19b4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019b4c>
   19ba0:	e0bffe17 	ldw	r2,-8(fp)
   19ba4:	10c00c17 	ldw	r3,48(r2)
   19ba8:	e0bffc17 	ldw	r2,-16(fp)
   19bac:	18bfe72e 	bgeu	r3,r2,19b4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019b4c>
		{
			return -ETIMEDOUT;
   19bb0:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   19bb4:	e037883a 	mov	sp,fp
   19bb8:	dfc00117 	ldw	ra,4(sp)
   19bbc:	df000017 	ldw	fp,0(sp)
   19bc0:	dec00204 	addi	sp,sp,8
   19bc4:	f800283a 	ret

00019bc8 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   19bc8:	defffb04 	addi	sp,sp,-20
   19bcc:	dfc00415 	stw	ra,16(sp)
   19bd0:	df000315 	stw	fp,12(sp)
   19bd4:	df000304 	addi	fp,sp,12
   19bd8:	e13ffe15 	stw	r4,-8(fp)
   19bdc:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   19be0:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   19be4:	e0bffe17 	ldw	r2,-8(fp)
   19be8:	10800a17 	ldw	r2,40(r2)
   19bec:	10800037 	ldwio	r2,0(r2)
   19bf0:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   19bf4:	e13ffd17 	ldw	r4,-12(fp)
   19bf8:	00198080 	call	19808 <read_data_valid>
   19bfc:	10803fcc 	andi	r2,r2,255
   19c00:	10000726 	beq	r2,zero,19c20 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   19c04:	e13ffd17 	ldw	r4,-12(fp)
   19c08:	001983c0 	call	1983c <read_data_byte>
   19c0c:	1007883a 	mov	r3,r2
   19c10:	e0bfff17 	ldw	r2,-4(fp)
   19c14:	10c00005 	stb	r3,0(r2)
		return 0;
   19c18:	0005883a 	mov	r2,zero
   19c1c:	00000106 	br	19c24 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   19c20:	00bfffc4 	movi	r2,-1
}
   19c24:	e037883a 	mov	sp,fp
   19c28:	dfc00117 	ldw	ra,4(sp)
   19c2c:	df000017 	ldw	fp,0(sp)
   19c30:	dec00204 	addi	sp,sp,8
   19c34:	f800283a 	ret

00019c38 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   19c38:	defffb04 	addi	sp,sp,-20
   19c3c:	dfc00415 	stw	ra,16(sp)
   19c40:	df000315 	stw	fp,12(sp)
   19c44:	df000304 	addi	fp,sp,12
   19c48:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   19c4c:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   19c50:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   19c54:	e0bfff17 	ldw	r2,-4(fp)
   19c58:	10800a17 	ldw	r2,40(r2)
   19c5c:	10800037 	ldwio	r2,0(r2)
   19c60:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   19c64:	e13ffe17 	ldw	r4,-8(fp)
   19c68:	00197d80 	call	197d8 <read_num_bytes_available>
   19c6c:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   19c70:	e0bffd0b 	ldhu	r2,-12(fp)
   19c74:	103ff71e 	bne	r2,zero,19c54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019c54>
}
   19c78:	0001883a 	nop
   19c7c:	e037883a 	mov	sp,fp
   19c80:	dfc00117 	ldw	ra,4(sp)
   19c84:	df000017 	ldw	fp,0(sp)
   19c88:	dec00204 	addi	sp,sp,8
   19c8c:	f800283a 	ret

00019c90 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   19c90:	defff804 	addi	sp,sp,-32
   19c94:	dfc00715 	stw	ra,28(sp)
   19c98:	df000615 	stw	fp,24(sp)
   19c9c:	df000604 	addi	fp,sp,24
   19ca0:	e13ffd15 	stw	r4,-12(fp)
   19ca4:	e17ffe15 	stw	r5,-8(fp)
   19ca8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   19cac:	e0bffd17 	ldw	r2,-12(fp)
   19cb0:	10800017 	ldw	r2,0(r2)
   19cb4:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   19cb8:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   19cbc:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   19cc0:	e0fffc17 	ldw	r3,-16(fp)
   19cc4:	e0bfff17 	ldw	r2,-4(fp)
   19cc8:	18bffd16 	blt	r3,r2,19cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019cc0>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   19ccc:	e0bffe17 	ldw	r2,-8(fp)
   19cd0:	10c00044 	addi	r3,r2,1
   19cd4:	e0fffe15 	stw	r3,-8(fp)
   19cd8:	100b883a 	mov	r5,r2
   19cdc:	e13ffa17 	ldw	r4,-24(fp)
   19ce0:	0019b2c0 	call	19b2c <alt_up_ps2_read_data_byte_timeout>
   19ce4:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   19ce8:	e0bffb17 	ldw	r2,-20(fp)
   19cec:	10000226 	beq	r2,zero,19cf8 <alt_up_ps2_read_fd+0x68>
			return count;
   19cf0:	e0bffc17 	ldw	r2,-16(fp)
   19cf4:	00000406 	br	19d08 <alt_up_ps2_read_fd+0x78>
		count++;
   19cf8:	e0bffc17 	ldw	r2,-16(fp)
   19cfc:	10800044 	addi	r2,r2,1
   19d00:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   19d04:	e0bffc17 	ldw	r2,-16(fp)
}
   19d08:	e037883a 	mov	sp,fp
   19d0c:	dfc00117 	ldw	ra,4(sp)
   19d10:	df000017 	ldw	fp,0(sp)
   19d14:	dec00204 	addi	sp,sp,8
   19d18:	f800283a 	ret

00019d1c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   19d1c:	defff804 	addi	sp,sp,-32
   19d20:	dfc00715 	stw	ra,28(sp)
   19d24:	df000615 	stw	fp,24(sp)
   19d28:	df000604 	addi	fp,sp,24
   19d2c:	e13ffd15 	stw	r4,-12(fp)
   19d30:	e17ffe15 	stw	r5,-8(fp)
   19d34:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   19d38:	e0bffd17 	ldw	r2,-12(fp)
   19d3c:	10800017 	ldw	r2,0(r2)
   19d40:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   19d44:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   19d48:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   19d4c:	00001006 	br	19d90 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   19d50:	e0bffe17 	ldw	r2,-8(fp)
   19d54:	10c00044 	addi	r3,r2,1
   19d58:	e0fffe15 	stw	r3,-8(fp)
   19d5c:	10800003 	ldbu	r2,0(r2)
   19d60:	10803fcc 	andi	r2,r2,255
   19d64:	100b883a 	mov	r5,r2
   19d68:	e13ffb17 	ldw	r4,-20(fp)
   19d6c:	00199ec0 	call	199ec <alt_up_ps2_write_data_byte>
   19d70:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   19d74:	e0bffc17 	ldw	r2,-16(fp)
   19d78:	10000226 	beq	r2,zero,19d84 <alt_up_ps2_write_fd+0x68>
			return count;
   19d7c:	e0bffa17 	ldw	r2,-24(fp)
   19d80:	00000706 	br	19da0 <alt_up_ps2_write_fd+0x84>
		count++;
   19d84:	e0bffa17 	ldw	r2,-24(fp)
   19d88:	10800044 	addi	r2,r2,1
   19d8c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   19d90:	e0fffa17 	ldw	r3,-24(fp)
   19d94:	e0bfff17 	ldw	r2,-4(fp)
   19d98:	18bfed16 	blt	r3,r2,19d50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019d50>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   19d9c:	e0bffa17 	ldw	r2,-24(fp)
}
   19da0:	e037883a 	mov	sp,fp
   19da4:	dfc00117 	ldw	ra,4(sp)
   19da8:	df000017 	ldw	fp,0(sp)
   19dac:	dec00204 	addi	sp,sp,8
   19db0:	f800283a 	ret

00019db4 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   19db4:	defffc04 	addi	sp,sp,-16
   19db8:	dfc00315 	stw	ra,12(sp)
   19dbc:	df000215 	stw	fp,8(sp)
   19dc0:	df000204 	addi	fp,sp,8
   19dc4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   19dc8:	d1600804 	addi	r5,gp,-32736
   19dcc:	e13fff17 	ldw	r4,-4(fp)
   19dd0:	001a46c0 	call	1a46c <alt_find_dev>
   19dd4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   19dd8:	e0bffe17 	ldw	r2,-8(fp)
}
   19ddc:	e037883a 	mov	sp,fp
   19de0:	dfc00117 	ldw	ra,4(sp)
   19de4:	df000017 	ldw	fp,0(sp)
   19de8:	dec00204 	addi	sp,sp,8
   19dec:	f800283a 	ret

00019df0 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   19df0:	defffd04 	addi	sp,sp,-12
   19df4:	df000215 	stw	fp,8(sp)
   19df8:	df000204 	addi	fp,sp,8
   19dfc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   19e00:	e0bfff17 	ldw	r2,-4(fp)
   19e04:	10800a17 	ldw	r2,40(r2)
   19e08:	10800104 	addi	r2,r2,4
   19e0c:	10800037 	ldwio	r2,0(r2)
   19e10:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   19e14:	e0bffe17 	ldw	r2,-8(fp)
   19e18:	10800054 	ori	r2,r2,1
   19e1c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   19e20:	e0bfff17 	ldw	r2,-4(fp)
   19e24:	10800a17 	ldw	r2,40(r2)
   19e28:	10800104 	addi	r2,r2,4
   19e2c:	1007883a 	mov	r3,r2
   19e30:	e0bffe17 	ldw	r2,-8(fp)
   19e34:	18800035 	stwio	r2,0(r3)
}
   19e38:	0001883a 	nop
   19e3c:	e037883a 	mov	sp,fp
   19e40:	df000017 	ldw	fp,0(sp)
   19e44:	dec00104 	addi	sp,sp,4
   19e48:	f800283a 	ret

00019e4c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   19e4c:	defffd04 	addi	sp,sp,-12
   19e50:	df000215 	stw	fp,8(sp)
   19e54:	df000204 	addi	fp,sp,8
   19e58:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   19e5c:	e0bfff17 	ldw	r2,-4(fp)
   19e60:	10800a17 	ldw	r2,40(r2)
   19e64:	10800104 	addi	r2,r2,4
   19e68:	10800037 	ldwio	r2,0(r2)
   19e6c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   19e70:	e0fffe17 	ldw	r3,-8(fp)
   19e74:	00bfff84 	movi	r2,-2
   19e78:	1884703a 	and	r2,r3,r2
   19e7c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   19e80:	e0bfff17 	ldw	r2,-4(fp)
   19e84:	10800a17 	ldw	r2,40(r2)
   19e88:	10800104 	addi	r2,r2,4
   19e8c:	1007883a 	mov	r3,r2
   19e90:	e0bffe17 	ldw	r2,-8(fp)
   19e94:	18800035 	stwio	r2,0(r3)
}
   19e98:	0001883a 	nop
   19e9c:	e037883a 	mov	sp,fp
   19ea0:	df000017 	ldw	fp,0(sp)
   19ea4:	dec00104 	addi	sp,sp,4
   19ea8:	f800283a 	ret

00019eac <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   19eac:	defffd04 	addi	sp,sp,-12
   19eb0:	df000215 	stw	fp,8(sp)
   19eb4:	df000204 	addi	fp,sp,8
   19eb8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   19ebc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   19ec0:	e0bfff17 	ldw	r2,-4(fp)
   19ec4:	10800a17 	ldw	r2,40(r2)
   19ec8:	10800084 	addi	r2,r2,2
   19ecc:	1080002b 	ldhuio	r2,0(r2)
   19ed0:	10bfffcc 	andi	r2,r2,65535
   19ed4:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   19ed8:	e0bffe0b 	ldhu	r2,-8(fp)
}
   19edc:	e037883a 	mov	sp,fp
   19ee0:	df000017 	ldw	fp,0(sp)
   19ee4:	dec00104 	addi	sp,sp,4
   19ee8:	f800283a 	ret

00019eec <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   19eec:	defffd04 	addi	sp,sp,-12
   19ef0:	df000215 	stw	fp,8(sp)
   19ef4:	df000204 	addi	fp,sp,8
   19ef8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   19efc:	e0bfff17 	ldw	r2,-4(fp)
   19f00:	10800a17 	ldw	r2,40(r2)
   19f04:	10800104 	addi	r2,r2,4
   19f08:	10800037 	ldwio	r2,0(r2)
   19f0c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   19f10:	e0bffe17 	ldw	r2,-8(fp)
   19f14:	1004d43a 	srli	r2,r2,16
}
   19f18:	e037883a 	mov	sp,fp
   19f1c:	df000017 	ldw	fp,0(sp)
   19f20:	dec00104 	addi	sp,sp,4
   19f24:	f800283a 	ret

00019f28 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   19f28:	defffd04 	addi	sp,sp,-12
   19f2c:	df000215 	stw	fp,8(sp)
   19f30:	df000204 	addi	fp,sp,8
   19f34:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   19f38:	e0bfff17 	ldw	r2,-4(fp)
   19f3c:	1080800c 	andi	r2,r2,512
   19f40:	1004d27a 	srli	r2,r2,9
   19f44:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   19f48:	e0bffe17 	ldw	r2,-8(fp)
   19f4c:	10000226 	beq	r2,zero,19f58 <alt_up_rs232_check_parity+0x30>
   19f50:	00bfffc4 	movi	r2,-1
   19f54:	00000106 	br	19f5c <alt_up_rs232_check_parity+0x34>
   19f58:	0005883a 	mov	r2,zero
}
   19f5c:	e037883a 	mov	sp,fp
   19f60:	df000017 	ldw	fp,0(sp)
   19f64:	dec00104 	addi	sp,sp,4
   19f68:	f800283a 	ret

00019f6c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   19f6c:	defffd04 	addi	sp,sp,-12
   19f70:	df000215 	stw	fp,8(sp)
   19f74:	df000204 	addi	fp,sp,8
   19f78:	e13ffe15 	stw	r4,-8(fp)
   19f7c:	2805883a 	mov	r2,r5
   19f80:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   19f84:	e0bffe17 	ldw	r2,-8(fp)
   19f88:	10800a17 	ldw	r2,40(r2)
   19f8c:	1007883a 	mov	r3,r2
   19f90:	e0bfff03 	ldbu	r2,-4(fp)
   19f94:	18800035 	stwio	r2,0(r3)
	return 0;
   19f98:	0005883a 	mov	r2,zero
}
   19f9c:	e037883a 	mov	sp,fp
   19fa0:	df000017 	ldw	fp,0(sp)
   19fa4:	dec00104 	addi	sp,sp,4
   19fa8:	f800283a 	ret

00019fac <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   19fac:	defffa04 	addi	sp,sp,-24
   19fb0:	dfc00515 	stw	ra,20(sp)
   19fb4:	df000415 	stw	fp,16(sp)
   19fb8:	df000404 	addi	fp,sp,16
   19fbc:	e13ffd15 	stw	r4,-12(fp)
   19fc0:	e17ffe15 	stw	r5,-8(fp)
   19fc4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   19fc8:	e0bffd17 	ldw	r2,-12(fp)
   19fcc:	10800a17 	ldw	r2,40(r2)
   19fd0:	10800037 	ldwio	r2,0(r2)
   19fd4:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   19fd8:	e0bffc17 	ldw	r2,-16(fp)
   19fdc:	1007883a 	mov	r3,r2
   19fe0:	e0bffe17 	ldw	r2,-8(fp)
   19fe4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   19fe8:	e13ffc17 	ldw	r4,-16(fp)
   19fec:	0019f280 	call	19f28 <alt_up_rs232_check_parity>
   19ff0:	1007883a 	mov	r3,r2
   19ff4:	e0bfff17 	ldw	r2,-4(fp)
   19ff8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   19ffc:	e0bffc17 	ldw	r2,-16(fp)
   1a000:	10a0000c 	andi	r2,r2,32768
   1a004:	1004d3fa 	srli	r2,r2,15
   1a008:	10bfffc4 	addi	r2,r2,-1
}
   1a00c:	e037883a 	mov	sp,fp
   1a010:	dfc00117 	ldw	ra,4(sp)
   1a014:	df000017 	ldw	fp,0(sp)
   1a018:	dec00204 	addi	sp,sp,8
   1a01c:	f800283a 	ret

0001a020 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1a020:	defff804 	addi	sp,sp,-32
   1a024:	dfc00715 	stw	ra,28(sp)
   1a028:	df000615 	stw	fp,24(sp)
   1a02c:	df000604 	addi	fp,sp,24
   1a030:	e13ffd15 	stw	r4,-12(fp)
   1a034:	e17ffe15 	stw	r5,-8(fp)
   1a038:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1a03c:	e0bffd17 	ldw	r2,-12(fp)
   1a040:	10800017 	ldw	r2,0(r2)
   1a044:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1a048:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1a04c:	00000c06 	br	1a080 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1a050:	e0bffe17 	ldw	r2,-8(fp)
   1a054:	10c00044 	addi	r3,r2,1
   1a058:	e0fffe15 	stw	r3,-8(fp)
   1a05c:	e0fffc04 	addi	r3,fp,-16
   1a060:	180d883a 	mov	r6,r3
   1a064:	100b883a 	mov	r5,r2
   1a068:	e13ffb17 	ldw	r4,-20(fp)
   1a06c:	0019fac0 	call	19fac <alt_up_rs232_read_data>
   1a070:	1000081e 	bne	r2,zero,1a094 <alt_up_rs232_read_fd+0x74>
			count++;
   1a074:	e0bffa17 	ldw	r2,-24(fp)
   1a078:	10800044 	addi	r2,r2,1
   1a07c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1a080:	e0bfff17 	ldw	r2,-4(fp)
   1a084:	10ffffc4 	addi	r3,r2,-1
   1a088:	e0ffff15 	stw	r3,-4(fp)
   1a08c:	103ff01e 	bne	r2,zero,1a050 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a050>
   1a090:	00000106 	br	1a098 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   1a094:	0001883a 	nop
	}
	return count;
   1a098:	e0bffa17 	ldw	r2,-24(fp)
}
   1a09c:	e037883a 	mov	sp,fp
   1a0a0:	dfc00117 	ldw	ra,4(sp)
   1a0a4:	df000017 	ldw	fp,0(sp)
   1a0a8:	dec00204 	addi	sp,sp,8
   1a0ac:	f800283a 	ret

0001a0b0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1a0b0:	defff904 	addi	sp,sp,-28
   1a0b4:	dfc00615 	stw	ra,24(sp)
   1a0b8:	df000515 	stw	fp,20(sp)
   1a0bc:	df000504 	addi	fp,sp,20
   1a0c0:	e13ffd15 	stw	r4,-12(fp)
   1a0c4:	e17ffe15 	stw	r5,-8(fp)
   1a0c8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1a0cc:	e0bffd17 	ldw	r2,-12(fp)
   1a0d0:	10800017 	ldw	r2,0(r2)
   1a0d4:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1a0d8:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1a0dc:	00000d06 	br	1a114 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1a0e0:	e0bffe17 	ldw	r2,-8(fp)
   1a0e4:	10800003 	ldbu	r2,0(r2)
   1a0e8:	10803fcc 	andi	r2,r2,255
   1a0ec:	100b883a 	mov	r5,r2
   1a0f0:	e13ffc17 	ldw	r4,-16(fp)
   1a0f4:	0019f6c0 	call	19f6c <alt_up_rs232_write_data>
   1a0f8:	10000b1e 	bne	r2,zero,1a128 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   1a0fc:	e0bffb17 	ldw	r2,-20(fp)
   1a100:	10800044 	addi	r2,r2,1
   1a104:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1a108:	e0bffe17 	ldw	r2,-8(fp)
   1a10c:	10800044 	addi	r2,r2,1
   1a110:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1a114:	e0bfff17 	ldw	r2,-4(fp)
   1a118:	10ffffc4 	addi	r3,r2,-1
   1a11c:	e0ffff15 	stw	r3,-4(fp)
   1a120:	103fef1e 	bne	r2,zero,1a0e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a0e0>
   1a124:	00000106 	br	1a12c <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   1a128:	0001883a 	nop
	}
	return count;
   1a12c:	e0bffb17 	ldw	r2,-20(fp)
}
   1a130:	e037883a 	mov	sp,fp
   1a134:	dfc00117 	ldw	ra,4(sp)
   1a138:	df000017 	ldw	fp,0(sp)
   1a13c:	dec00204 	addi	sp,sp,8
   1a140:	f800283a 	ret

0001a144 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1a144:	defffc04 	addi	sp,sp,-16
   1a148:	dfc00315 	stw	ra,12(sp)
   1a14c:	df000215 	stw	fp,8(sp)
   1a150:	df000204 	addi	fp,sp,8
   1a154:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1a158:	d1600804 	addi	r5,gp,-32736
   1a15c:	e13fff17 	ldw	r4,-4(fp)
   1a160:	001a46c0 	call	1a46c <alt_find_dev>
   1a164:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1a168:	e0bffe17 	ldw	r2,-8(fp)
}
   1a16c:	e037883a 	mov	sp,fp
   1a170:	dfc00117 	ldw	ra,4(sp)
   1a174:	df000017 	ldw	fp,0(sp)
   1a178:	dec00204 	addi	sp,sp,8
   1a17c:	f800283a 	ret

0001a180 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1a180:	defff504 	addi	sp,sp,-44
   1a184:	df000a15 	stw	fp,40(sp)
   1a188:	df000a04 	addi	fp,sp,40
   1a18c:	e13ffc15 	stw	r4,-16(fp)
   1a190:	e17ffd15 	stw	r5,-12(fp)
   1a194:	e1bffe15 	stw	r6,-8(fp)
   1a198:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1a19c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1a1a0:	d0a82d17 	ldw	r2,-24396(gp)
  
  if (alt_ticks_per_second ())
   1a1a4:	10003c26 	beq	r2,zero,1a298 <alt_alarm_start+0x118>
  {
    if (alarm)
   1a1a8:	e0bffc17 	ldw	r2,-16(fp)
   1a1ac:	10003826 	beq	r2,zero,1a290 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1a1b0:	e0bffc17 	ldw	r2,-16(fp)
   1a1b4:	e0fffe17 	ldw	r3,-8(fp)
   1a1b8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1a1bc:	e0bffc17 	ldw	r2,-16(fp)
   1a1c0:	e0ffff17 	ldw	r3,-4(fp)
   1a1c4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a1c8:	0005303a 	rdctl	r2,status
   1a1cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a1d0:	e0fff917 	ldw	r3,-28(fp)
   1a1d4:	00bfff84 	movi	r2,-2
   1a1d8:	1884703a 	and	r2,r3,r2
   1a1dc:	1001703a 	wrctl	status,r2
  
  return context;
   1a1e0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1a1e4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1a1e8:	d0a82e17 	ldw	r2,-24392(gp)
      
      current_nticks = alt_nticks();
   1a1ec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1a1f0:	e0fffd17 	ldw	r3,-12(fp)
   1a1f4:	e0bff617 	ldw	r2,-40(fp)
   1a1f8:	1885883a 	add	r2,r3,r2
   1a1fc:	10c00044 	addi	r3,r2,1
   1a200:	e0bffc17 	ldw	r2,-16(fp)
   1a204:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1a208:	e0bffc17 	ldw	r2,-16(fp)
   1a20c:	10c00217 	ldw	r3,8(r2)
   1a210:	e0bff617 	ldw	r2,-40(fp)
   1a214:	1880042e 	bgeu	r3,r2,1a228 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1a218:	e0bffc17 	ldw	r2,-16(fp)
   1a21c:	00c00044 	movi	r3,1
   1a220:	10c00405 	stb	r3,16(r2)
   1a224:	00000206 	br	1a230 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1a228:	e0bffc17 	ldw	r2,-16(fp)
   1a22c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1a230:	e0bffc17 	ldw	r2,-16(fp)
   1a234:	d0e02d04 	addi	r3,gp,-32588
   1a238:	e0fffa15 	stw	r3,-24(fp)
   1a23c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1a240:	e0bffb17 	ldw	r2,-20(fp)
   1a244:	e0fffa17 	ldw	r3,-24(fp)
   1a248:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1a24c:	e0bffa17 	ldw	r2,-24(fp)
   1a250:	10c00017 	ldw	r3,0(r2)
   1a254:	e0bffb17 	ldw	r2,-20(fp)
   1a258:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1a25c:	e0bffa17 	ldw	r2,-24(fp)
   1a260:	10800017 	ldw	r2,0(r2)
   1a264:	e0fffb17 	ldw	r3,-20(fp)
   1a268:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1a26c:	e0bffa17 	ldw	r2,-24(fp)
   1a270:	e0fffb17 	ldw	r3,-20(fp)
   1a274:	10c00015 	stw	r3,0(r2)
   1a278:	e0bff817 	ldw	r2,-32(fp)
   1a27c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a280:	e0bff717 	ldw	r2,-36(fp)
   1a284:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1a288:	0005883a 	mov	r2,zero
   1a28c:	00000306 	br	1a29c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1a290:	00bffa84 	movi	r2,-22
   1a294:	00000106 	br	1a29c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1a298:	00bfde84 	movi	r2,-134
  }
}
   1a29c:	e037883a 	mov	sp,fp
   1a2a0:	df000017 	ldw	fp,0(sp)
   1a2a4:	dec00104 	addi	sp,sp,4
   1a2a8:	f800283a 	ret

0001a2ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1a2ac:	deffff04 	addi	sp,sp,-4
   1a2b0:	df000015 	stw	fp,0(sp)
   1a2b4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1a2b8:	0001883a 	nop
   1a2bc:	e037883a 	mov	sp,fp
   1a2c0:	df000017 	ldw	fp,0(sp)
   1a2c4:	dec00104 	addi	sp,sp,4
   1a2c8:	f800283a 	ret

0001a2cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a2cc:	defffe04 	addi	sp,sp,-8
   1a2d0:	dfc00115 	stw	ra,4(sp)
   1a2d4:	df000015 	stw	fp,0(sp)
   1a2d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a2dc:	d0a00b17 	ldw	r2,-32724(gp)
   1a2e0:	10000326 	beq	r2,zero,1a2f0 <alt_get_errno+0x24>
   1a2e4:	d0a00b17 	ldw	r2,-32724(gp)
   1a2e8:	103ee83a 	callr	r2
   1a2ec:	00000106 	br	1a2f4 <alt_get_errno+0x28>
   1a2f0:	d0a80f04 	addi	r2,gp,-24516
}
   1a2f4:	e037883a 	mov	sp,fp
   1a2f8:	dfc00117 	ldw	ra,4(sp)
   1a2fc:	df000017 	ldw	fp,0(sp)
   1a300:	dec00204 	addi	sp,sp,8
   1a304:	f800283a 	ret

0001a308 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1a308:	defffa04 	addi	sp,sp,-24
   1a30c:	dfc00515 	stw	ra,20(sp)
   1a310:	df000415 	stw	fp,16(sp)
   1a314:	df000404 	addi	fp,sp,16
   1a318:	e13ffe15 	stw	r4,-8(fp)
   1a31c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1a320:	e0bffe17 	ldw	r2,-8(fp)
   1a324:	10000326 	beq	r2,zero,1a334 <alt_dev_llist_insert+0x2c>
   1a328:	e0bffe17 	ldw	r2,-8(fp)
   1a32c:	10800217 	ldw	r2,8(r2)
   1a330:	1000061e 	bne	r2,zero,1a34c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1a334:	001a2cc0 	call	1a2cc <alt_get_errno>
   1a338:	1007883a 	mov	r3,r2
   1a33c:	00800584 	movi	r2,22
   1a340:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1a344:	00bffa84 	movi	r2,-22
   1a348:	00001306 	br	1a398 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1a34c:	e0bffe17 	ldw	r2,-8(fp)
   1a350:	e0ffff17 	ldw	r3,-4(fp)
   1a354:	e0fffc15 	stw	r3,-16(fp)
   1a358:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1a35c:	e0bffd17 	ldw	r2,-12(fp)
   1a360:	e0fffc17 	ldw	r3,-16(fp)
   1a364:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1a368:	e0bffc17 	ldw	r2,-16(fp)
   1a36c:	10c00017 	ldw	r3,0(r2)
   1a370:	e0bffd17 	ldw	r2,-12(fp)
   1a374:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1a378:	e0bffc17 	ldw	r2,-16(fp)
   1a37c:	10800017 	ldw	r2,0(r2)
   1a380:	e0fffd17 	ldw	r3,-12(fp)
   1a384:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1a388:	e0bffc17 	ldw	r2,-16(fp)
   1a38c:	e0fffd17 	ldw	r3,-12(fp)
   1a390:	10c00015 	stw	r3,0(r2)

  return 0;  
   1a394:	0005883a 	mov	r2,zero
}
   1a398:	e037883a 	mov	sp,fp
   1a39c:	dfc00117 	ldw	ra,4(sp)
   1a3a0:	df000017 	ldw	fp,0(sp)
   1a3a4:	dec00204 	addi	sp,sp,8
   1a3a8:	f800283a 	ret

0001a3ac <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1a3ac:	defffd04 	addi	sp,sp,-12
   1a3b0:	dfc00215 	stw	ra,8(sp)
   1a3b4:	df000115 	stw	fp,4(sp)
   1a3b8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1a3bc:	008000b4 	movhi	r2,2
   1a3c0:	10ad8104 	addi	r2,r2,-18940
   1a3c4:	e0bfff15 	stw	r2,-4(fp)
   1a3c8:	00000606 	br	1a3e4 <_do_ctors+0x38>
        (*ctor) (); 
   1a3cc:	e0bfff17 	ldw	r2,-4(fp)
   1a3d0:	10800017 	ldw	r2,0(r2)
   1a3d4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1a3d8:	e0bfff17 	ldw	r2,-4(fp)
   1a3dc:	10bfff04 	addi	r2,r2,-4
   1a3e0:	e0bfff15 	stw	r2,-4(fp)
   1a3e4:	e0ffff17 	ldw	r3,-4(fp)
   1a3e8:	008000b4 	movhi	r2,2
   1a3ec:	10ad8204 	addi	r2,r2,-18936
   1a3f0:	18bff62e 	bgeu	r3,r2,1a3cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a3cc>
        (*ctor) (); 
}
   1a3f4:	0001883a 	nop
   1a3f8:	e037883a 	mov	sp,fp
   1a3fc:	dfc00117 	ldw	ra,4(sp)
   1a400:	df000017 	ldw	fp,0(sp)
   1a404:	dec00204 	addi	sp,sp,8
   1a408:	f800283a 	ret

0001a40c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1a40c:	defffd04 	addi	sp,sp,-12
   1a410:	dfc00215 	stw	ra,8(sp)
   1a414:	df000115 	stw	fp,4(sp)
   1a418:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1a41c:	008000b4 	movhi	r2,2
   1a420:	10ad8104 	addi	r2,r2,-18940
   1a424:	e0bfff15 	stw	r2,-4(fp)
   1a428:	00000606 	br	1a444 <_do_dtors+0x38>
        (*dtor) (); 
   1a42c:	e0bfff17 	ldw	r2,-4(fp)
   1a430:	10800017 	ldw	r2,0(r2)
   1a434:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1a438:	e0bfff17 	ldw	r2,-4(fp)
   1a43c:	10bfff04 	addi	r2,r2,-4
   1a440:	e0bfff15 	stw	r2,-4(fp)
   1a444:	e0ffff17 	ldw	r3,-4(fp)
   1a448:	008000b4 	movhi	r2,2
   1a44c:	10ad8204 	addi	r2,r2,-18936
   1a450:	18bff62e 	bgeu	r3,r2,1a42c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a42c>
        (*dtor) (); 
}
   1a454:	0001883a 	nop
   1a458:	e037883a 	mov	sp,fp
   1a45c:	dfc00117 	ldw	ra,4(sp)
   1a460:	df000017 	ldw	fp,0(sp)
   1a464:	dec00204 	addi	sp,sp,8
   1a468:	f800283a 	ret

0001a46c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1a46c:	defffa04 	addi	sp,sp,-24
   1a470:	dfc00515 	stw	ra,20(sp)
   1a474:	df000415 	stw	fp,16(sp)
   1a478:	df000404 	addi	fp,sp,16
   1a47c:	e13ffe15 	stw	r4,-8(fp)
   1a480:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1a484:	e0bfff17 	ldw	r2,-4(fp)
   1a488:	10800017 	ldw	r2,0(r2)
   1a48c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1a490:	e13ffe17 	ldw	r4,-8(fp)
   1a494:	000bc240 	call	bc24 <strlen>
   1a498:	10800044 	addi	r2,r2,1
   1a49c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1a4a0:	00000d06 	br	1a4d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1a4a4:	e0bffc17 	ldw	r2,-16(fp)
   1a4a8:	10800217 	ldw	r2,8(r2)
   1a4ac:	e0fffd17 	ldw	r3,-12(fp)
   1a4b0:	180d883a 	mov	r6,r3
   1a4b4:	e17ffe17 	ldw	r5,-8(fp)
   1a4b8:	1009883a 	mov	r4,r2
   1a4bc:	001b2c00 	call	1b2c0 <memcmp>
   1a4c0:	1000021e 	bne	r2,zero,1a4cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1a4c4:	e0bffc17 	ldw	r2,-16(fp)
   1a4c8:	00000706 	br	1a4e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1a4cc:	e0bffc17 	ldw	r2,-16(fp)
   1a4d0:	10800017 	ldw	r2,0(r2)
   1a4d4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1a4d8:	e0fffc17 	ldw	r3,-16(fp)
   1a4dc:	e0bfff17 	ldw	r2,-4(fp)
   1a4e0:	18bff01e 	bne	r3,r2,1a4a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a4a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1a4e4:	0005883a 	mov	r2,zero
}
   1a4e8:	e037883a 	mov	sp,fp
   1a4ec:	dfc00117 	ldw	ra,4(sp)
   1a4f0:	df000017 	ldw	fp,0(sp)
   1a4f4:	dec00204 	addi	sp,sp,8
   1a4f8:	f800283a 	ret

0001a4fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1a4fc:	defffe04 	addi	sp,sp,-8
   1a500:	dfc00115 	stw	ra,4(sp)
   1a504:	df000015 	stw	fp,0(sp)
   1a508:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1a50c:	01440004 	movi	r5,4096
   1a510:	0009883a 	mov	r4,zero
   1a514:	001b1480 	call	1b148 <alt_icache_flush>
#endif
}
   1a518:	0001883a 	nop
   1a51c:	e037883a 	mov	sp,fp
   1a520:	dfc00117 	ldw	ra,4(sp)
   1a524:	df000017 	ldw	fp,0(sp)
   1a528:	dec00204 	addi	sp,sp,8
   1a52c:	f800283a 	ret

0001a530 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1a530:	defff904 	addi	sp,sp,-28
   1a534:	dfc00615 	stw	ra,24(sp)
   1a538:	df000515 	stw	fp,20(sp)
   1a53c:	df000504 	addi	fp,sp,20
   1a540:	e13ffc15 	stw	r4,-16(fp)
   1a544:	e17ffd15 	stw	r5,-12(fp)
   1a548:	e1bffe15 	stw	r6,-8(fp)
   1a54c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1a550:	e1bfff17 	ldw	r6,-4(fp)
   1a554:	e17ffe17 	ldw	r5,-8(fp)
   1a558:	e13ffd17 	ldw	r4,-12(fp)
   1a55c:	001a8f00 	call	1a8f0 <open>
   1a560:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1a564:	e0bffb17 	ldw	r2,-20(fp)
   1a568:	10001c16 	blt	r2,zero,1a5dc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1a56c:	008000b4 	movhi	r2,2
   1a570:	10b19a04 	addi	r2,r2,-14744
   1a574:	e0fffb17 	ldw	r3,-20(fp)
   1a578:	18c00324 	muli	r3,r3,12
   1a57c:	10c5883a 	add	r2,r2,r3
   1a580:	10c00017 	ldw	r3,0(r2)
   1a584:	e0bffc17 	ldw	r2,-16(fp)
   1a588:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1a58c:	008000b4 	movhi	r2,2
   1a590:	10b19a04 	addi	r2,r2,-14744
   1a594:	e0fffb17 	ldw	r3,-20(fp)
   1a598:	18c00324 	muli	r3,r3,12
   1a59c:	10c5883a 	add	r2,r2,r3
   1a5a0:	10800104 	addi	r2,r2,4
   1a5a4:	10c00017 	ldw	r3,0(r2)
   1a5a8:	e0bffc17 	ldw	r2,-16(fp)
   1a5ac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1a5b0:	008000b4 	movhi	r2,2
   1a5b4:	10b19a04 	addi	r2,r2,-14744
   1a5b8:	e0fffb17 	ldw	r3,-20(fp)
   1a5bc:	18c00324 	muli	r3,r3,12
   1a5c0:	10c5883a 	add	r2,r2,r3
   1a5c4:	10800204 	addi	r2,r2,8
   1a5c8:	10c00017 	ldw	r3,0(r2)
   1a5cc:	e0bffc17 	ldw	r2,-16(fp)
   1a5d0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1a5d4:	e13ffb17 	ldw	r4,-20(fp)
   1a5d8:	000faf40 	call	faf4 <alt_release_fd>
  }
} 
   1a5dc:	0001883a 	nop
   1a5e0:	e037883a 	mov	sp,fp
   1a5e4:	dfc00117 	ldw	ra,4(sp)
   1a5e8:	df000017 	ldw	fp,0(sp)
   1a5ec:	dec00204 	addi	sp,sp,8
   1a5f0:	f800283a 	ret

0001a5f4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1a5f4:	defffb04 	addi	sp,sp,-20
   1a5f8:	dfc00415 	stw	ra,16(sp)
   1a5fc:	df000315 	stw	fp,12(sp)
   1a600:	df000304 	addi	fp,sp,12
   1a604:	e13ffd15 	stw	r4,-12(fp)
   1a608:	e17ffe15 	stw	r5,-8(fp)
   1a60c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1a610:	01c07fc4 	movi	r7,511
   1a614:	01800044 	movi	r6,1
   1a618:	e17ffd17 	ldw	r5,-12(fp)
   1a61c:	010000b4 	movhi	r4,2
   1a620:	21319d04 	addi	r4,r4,-14732
   1a624:	001a5300 	call	1a530 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1a628:	01c07fc4 	movi	r7,511
   1a62c:	000d883a 	mov	r6,zero
   1a630:	e17ffe17 	ldw	r5,-8(fp)
   1a634:	010000b4 	movhi	r4,2
   1a638:	21319a04 	addi	r4,r4,-14744
   1a63c:	001a5300 	call	1a530 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1a640:	01c07fc4 	movi	r7,511
   1a644:	01800044 	movi	r6,1
   1a648:	e17fff17 	ldw	r5,-4(fp)
   1a64c:	010000b4 	movhi	r4,2
   1a650:	2131a004 	addi	r4,r4,-14720
   1a654:	001a5300 	call	1a530 <alt_open_fd>
}  
   1a658:	0001883a 	nop
   1a65c:	e037883a 	mov	sp,fp
   1a660:	dfc00117 	ldw	ra,4(sp)
   1a664:	df000017 	ldw	fp,0(sp)
   1a668:	dec00204 	addi	sp,sp,8
   1a66c:	f800283a 	ret

0001a670 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1a670:	defff004 	addi	sp,sp,-64
   1a674:	df000f15 	stw	fp,60(sp)
   1a678:	df000f04 	addi	fp,sp,60
   1a67c:	e13ffd15 	stw	r4,-12(fp)
   1a680:	e17ffe15 	stw	r5,-8(fp)
   1a684:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1a688:	00bffa84 	movi	r2,-22
   1a68c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1a690:	e0bffd17 	ldw	r2,-12(fp)
   1a694:	10800828 	cmpgeui	r2,r2,32
   1a698:	1000501e 	bne	r2,zero,1a7dc <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a69c:	0005303a 	rdctl	r2,status
   1a6a0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a6a4:	e0fff617 	ldw	r3,-40(fp)
   1a6a8:	00bfff84 	movi	r2,-2
   1a6ac:	1884703a 	and	r2,r3,r2
   1a6b0:	1001703a 	wrctl	status,r2
  
  return context;
   1a6b4:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1a6b8:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   1a6bc:	008000b4 	movhi	r2,2
   1a6c0:	108bd504 	addi	r2,r2,12116
   1a6c4:	e0fffd17 	ldw	r3,-12(fp)
   1a6c8:	180690fa 	slli	r3,r3,3
   1a6cc:	10c5883a 	add	r2,r2,r3
   1a6d0:	e0ffff17 	ldw	r3,-4(fp)
   1a6d4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1a6d8:	008000b4 	movhi	r2,2
   1a6dc:	108bd504 	addi	r2,r2,12116
   1a6e0:	e0fffd17 	ldw	r3,-12(fp)
   1a6e4:	180690fa 	slli	r3,r3,3
   1a6e8:	10c5883a 	add	r2,r2,r3
   1a6ec:	10800104 	addi	r2,r2,4
   1a6f0:	e0fffe17 	ldw	r3,-8(fp)
   1a6f4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1a6f8:	e0bfff17 	ldw	r2,-4(fp)
   1a6fc:	10001926 	beq	r2,zero,1a764 <alt_irq_register+0xf4>
   1a700:	e0bffd17 	ldw	r2,-12(fp)
   1a704:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a708:	0005303a 	rdctl	r2,status
   1a70c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a710:	e0fff717 	ldw	r3,-36(fp)
   1a714:	00bfff84 	movi	r2,-2
   1a718:	1884703a 	and	r2,r3,r2
   1a71c:	1001703a 	wrctl	status,r2
  
  return context;
   1a720:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1a724:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   1a728:	00c00044 	movi	r3,1
   1a72c:	e0bff217 	ldw	r2,-56(fp)
   1a730:	1884983a 	sll	r2,r3,r2
   1a734:	1007883a 	mov	r3,r2
   1a738:	d0a82c17 	ldw	r2,-24400(gp)
   1a73c:	1884b03a 	or	r2,r3,r2
   1a740:	d0a82c15 	stw	r2,-24400(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1a744:	d0a82c17 	ldw	r2,-24400(gp)
   1a748:	100170fa 	wrctl	ienable,r2
   1a74c:	e0bff817 	ldw	r2,-32(fp)
   1a750:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a754:	e0bff917 	ldw	r2,-28(fp)
   1a758:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1a75c:	0005883a 	mov	r2,zero
   1a760:	00001906 	br	1a7c8 <alt_irq_register+0x158>
   1a764:	e0bffd17 	ldw	r2,-12(fp)
   1a768:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a76c:	0005303a 	rdctl	r2,status
   1a770:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a774:	e0fffa17 	ldw	r3,-24(fp)
   1a778:	00bfff84 	movi	r2,-2
   1a77c:	1884703a 	and	r2,r3,r2
   1a780:	1001703a 	wrctl	status,r2
  
  return context;
   1a784:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1a788:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   1a78c:	00c00044 	movi	r3,1
   1a790:	e0bff417 	ldw	r2,-48(fp)
   1a794:	1884983a 	sll	r2,r3,r2
   1a798:	0084303a 	nor	r2,zero,r2
   1a79c:	1007883a 	mov	r3,r2
   1a7a0:	d0a82c17 	ldw	r2,-24400(gp)
   1a7a4:	1884703a 	and	r2,r3,r2
   1a7a8:	d0a82c15 	stw	r2,-24400(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1a7ac:	d0a82c17 	ldw	r2,-24400(gp)
   1a7b0:	100170fa 	wrctl	ienable,r2
   1a7b4:	e0bffb17 	ldw	r2,-20(fp)
   1a7b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a7bc:	e0bffc17 	ldw	r2,-16(fp)
   1a7c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1a7c4:	0005883a 	mov	r2,zero
   1a7c8:	e0bff115 	stw	r2,-60(fp)
   1a7cc:	e0bff317 	ldw	r2,-52(fp)
   1a7d0:	e0bff515 	stw	r2,-44(fp)
   1a7d4:	e0bff517 	ldw	r2,-44(fp)
   1a7d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1a7dc:	e0bff117 	ldw	r2,-60(fp)
}
   1a7e0:	e037883a 	mov	sp,fp
   1a7e4:	df000017 	ldw	fp,0(sp)
   1a7e8:	dec00104 	addi	sp,sp,4
   1a7ec:	f800283a 	ret

0001a7f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a7f0:	defffe04 	addi	sp,sp,-8
   1a7f4:	dfc00115 	stw	ra,4(sp)
   1a7f8:	df000015 	stw	fp,0(sp)
   1a7fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a800:	d0a00b17 	ldw	r2,-32724(gp)
   1a804:	10000326 	beq	r2,zero,1a814 <alt_get_errno+0x24>
   1a808:	d0a00b17 	ldw	r2,-32724(gp)
   1a80c:	103ee83a 	callr	r2
   1a810:	00000106 	br	1a818 <alt_get_errno+0x28>
   1a814:	d0a80f04 	addi	r2,gp,-24516
}
   1a818:	e037883a 	mov	sp,fp
   1a81c:	dfc00117 	ldw	ra,4(sp)
   1a820:	df000017 	ldw	fp,0(sp)
   1a824:	dec00204 	addi	sp,sp,8
   1a828:	f800283a 	ret

0001a82c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1a82c:	defffd04 	addi	sp,sp,-12
   1a830:	df000215 	stw	fp,8(sp)
   1a834:	df000204 	addi	fp,sp,8
   1a838:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1a83c:	e0bfff17 	ldw	r2,-4(fp)
   1a840:	10800217 	ldw	r2,8(r2)
   1a844:	10d00034 	orhi	r3,r2,16384
   1a848:	e0bfff17 	ldw	r2,-4(fp)
   1a84c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1a850:	e03ffe15 	stw	zero,-8(fp)
   1a854:	00001d06 	br	1a8cc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1a858:	008000b4 	movhi	r2,2
   1a85c:	10b19a04 	addi	r2,r2,-14744
   1a860:	e0fffe17 	ldw	r3,-8(fp)
   1a864:	18c00324 	muli	r3,r3,12
   1a868:	10c5883a 	add	r2,r2,r3
   1a86c:	10c00017 	ldw	r3,0(r2)
   1a870:	e0bfff17 	ldw	r2,-4(fp)
   1a874:	10800017 	ldw	r2,0(r2)
   1a878:	1880111e 	bne	r3,r2,1a8c0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1a87c:	008000b4 	movhi	r2,2
   1a880:	10b19a04 	addi	r2,r2,-14744
   1a884:	e0fffe17 	ldw	r3,-8(fp)
   1a888:	18c00324 	muli	r3,r3,12
   1a88c:	10c5883a 	add	r2,r2,r3
   1a890:	10800204 	addi	r2,r2,8
   1a894:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1a898:	1000090e 	bge	r2,zero,1a8c0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1a89c:	e0bffe17 	ldw	r2,-8(fp)
   1a8a0:	10c00324 	muli	r3,r2,12
   1a8a4:	008000b4 	movhi	r2,2
   1a8a8:	10b19a04 	addi	r2,r2,-14744
   1a8ac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1a8b0:	e0bfff17 	ldw	r2,-4(fp)
   1a8b4:	18800226 	beq	r3,r2,1a8c0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1a8b8:	00bffcc4 	movi	r2,-13
   1a8bc:	00000806 	br	1a8e0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1a8c0:	e0bffe17 	ldw	r2,-8(fp)
   1a8c4:	10800044 	addi	r2,r2,1
   1a8c8:	e0bffe15 	stw	r2,-8(fp)
   1a8cc:	d0a00a17 	ldw	r2,-32728(gp)
   1a8d0:	1007883a 	mov	r3,r2
   1a8d4:	e0bffe17 	ldw	r2,-8(fp)
   1a8d8:	18bfdf2e 	bgeu	r3,r2,1a858 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a858>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1a8dc:	0005883a 	mov	r2,zero
}
   1a8e0:	e037883a 	mov	sp,fp
   1a8e4:	df000017 	ldw	fp,0(sp)
   1a8e8:	dec00104 	addi	sp,sp,4
   1a8ec:	f800283a 	ret

0001a8f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1a8f0:	defff604 	addi	sp,sp,-40
   1a8f4:	dfc00915 	stw	ra,36(sp)
   1a8f8:	df000815 	stw	fp,32(sp)
   1a8fc:	df000804 	addi	fp,sp,32
   1a900:	e13ffd15 	stw	r4,-12(fp)
   1a904:	e17ffe15 	stw	r5,-8(fp)
   1a908:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1a90c:	00bfffc4 	movi	r2,-1
   1a910:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1a914:	00bffb44 	movi	r2,-19
   1a918:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1a91c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1a920:	d1600804 	addi	r5,gp,-32736
   1a924:	e13ffd17 	ldw	r4,-12(fp)
   1a928:	001a46c0 	call	1a46c <alt_find_dev>
   1a92c:	e0bff815 	stw	r2,-32(fp)
   1a930:	e0bff817 	ldw	r2,-32(fp)
   1a934:	1000051e 	bne	r2,zero,1a94c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1a938:	e13ffd17 	ldw	r4,-12(fp)
   1a93c:	001af640 	call	1af64 <alt_find_file>
   1a940:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1a944:	00800044 	movi	r2,1
   1a948:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1a94c:	e0bff817 	ldw	r2,-32(fp)
   1a950:	10002926 	beq	r2,zero,1a9f8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1a954:	e13ff817 	ldw	r4,-32(fp)
   1a958:	001b06c0 	call	1b06c <alt_get_fd>
   1a95c:	e0bff915 	stw	r2,-28(fp)
   1a960:	e0bff917 	ldw	r2,-28(fp)
   1a964:	1000030e 	bge	r2,zero,1a974 <open+0x84>
    {
      status = index;
   1a968:	e0bff917 	ldw	r2,-28(fp)
   1a96c:	e0bffa15 	stw	r2,-24(fp)
   1a970:	00002306 	br	1aa00 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1a974:	e0bff917 	ldw	r2,-28(fp)
   1a978:	10c00324 	muli	r3,r2,12
   1a97c:	008000b4 	movhi	r2,2
   1a980:	10b19a04 	addi	r2,r2,-14744
   1a984:	1885883a 	add	r2,r3,r2
   1a988:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1a98c:	e0fffe17 	ldw	r3,-8(fp)
   1a990:	00900034 	movhi	r2,16384
   1a994:	10bfffc4 	addi	r2,r2,-1
   1a998:	1886703a 	and	r3,r3,r2
   1a99c:	e0bffc17 	ldw	r2,-16(fp)
   1a9a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1a9a4:	e0bffb17 	ldw	r2,-20(fp)
   1a9a8:	1000051e 	bne	r2,zero,1a9c0 <open+0xd0>
   1a9ac:	e13ffc17 	ldw	r4,-16(fp)
   1a9b0:	001a82c0 	call	1a82c <alt_file_locked>
   1a9b4:	e0bffa15 	stw	r2,-24(fp)
   1a9b8:	e0bffa17 	ldw	r2,-24(fp)
   1a9bc:	10001016 	blt	r2,zero,1aa00 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1a9c0:	e0bff817 	ldw	r2,-32(fp)
   1a9c4:	10800317 	ldw	r2,12(r2)
   1a9c8:	10000826 	beq	r2,zero,1a9ec <open+0xfc>
   1a9cc:	e0bff817 	ldw	r2,-32(fp)
   1a9d0:	10800317 	ldw	r2,12(r2)
   1a9d4:	e1ffff17 	ldw	r7,-4(fp)
   1a9d8:	e1bffe17 	ldw	r6,-8(fp)
   1a9dc:	e17ffd17 	ldw	r5,-12(fp)
   1a9e0:	e13ffc17 	ldw	r4,-16(fp)
   1a9e4:	103ee83a 	callr	r2
   1a9e8:	00000106 	br	1a9f0 <open+0x100>
   1a9ec:	0005883a 	mov	r2,zero
   1a9f0:	e0bffa15 	stw	r2,-24(fp)
   1a9f4:	00000206 	br	1aa00 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1a9f8:	00bffb44 	movi	r2,-19
   1a9fc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1aa00:	e0bffa17 	ldw	r2,-24(fp)
   1aa04:	1000090e 	bge	r2,zero,1aa2c <open+0x13c>
  {
    alt_release_fd (index);  
   1aa08:	e13ff917 	ldw	r4,-28(fp)
   1aa0c:	000faf40 	call	faf4 <alt_release_fd>
    ALT_ERRNO = -status;
   1aa10:	001a7f00 	call	1a7f0 <alt_get_errno>
   1aa14:	1007883a 	mov	r3,r2
   1aa18:	e0bffa17 	ldw	r2,-24(fp)
   1aa1c:	0085c83a 	sub	r2,zero,r2
   1aa20:	18800015 	stw	r2,0(r3)
    return -1;
   1aa24:	00bfffc4 	movi	r2,-1
   1aa28:	00000106 	br	1aa30 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1aa2c:	e0bff917 	ldw	r2,-28(fp)
}
   1aa30:	e037883a 	mov	sp,fp
   1aa34:	dfc00117 	ldw	ra,4(sp)
   1aa38:	df000017 	ldw	fp,0(sp)
   1aa3c:	dec00204 	addi	sp,sp,8
   1aa40:	f800283a 	ret

0001aa44 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1aa44:	defffa04 	addi	sp,sp,-24
   1aa48:	df000515 	stw	fp,20(sp)
   1aa4c:	df000504 	addi	fp,sp,20
   1aa50:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aa54:	0005303a 	rdctl	r2,status
   1aa58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aa5c:	e0fffc17 	ldw	r3,-16(fp)
   1aa60:	00bfff84 	movi	r2,-2
   1aa64:	1884703a 	and	r2,r3,r2
   1aa68:	1001703a 	wrctl	status,r2
  
  return context;
   1aa6c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1aa70:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1aa74:	e0bfff17 	ldw	r2,-4(fp)
   1aa78:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1aa7c:	e0bffd17 	ldw	r2,-12(fp)
   1aa80:	10800017 	ldw	r2,0(r2)
   1aa84:	e0fffd17 	ldw	r3,-12(fp)
   1aa88:	18c00117 	ldw	r3,4(r3)
   1aa8c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1aa90:	e0bffd17 	ldw	r2,-12(fp)
   1aa94:	10800117 	ldw	r2,4(r2)
   1aa98:	e0fffd17 	ldw	r3,-12(fp)
   1aa9c:	18c00017 	ldw	r3,0(r3)
   1aaa0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1aaa4:	e0bffd17 	ldw	r2,-12(fp)
   1aaa8:	e0fffd17 	ldw	r3,-12(fp)
   1aaac:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1aab0:	e0bffd17 	ldw	r2,-12(fp)
   1aab4:	e0fffd17 	ldw	r3,-12(fp)
   1aab8:	10c00015 	stw	r3,0(r2)
   1aabc:	e0bffb17 	ldw	r2,-20(fp)
   1aac0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aac4:	e0bffe17 	ldw	r2,-8(fp)
   1aac8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1aacc:	0001883a 	nop
   1aad0:	e037883a 	mov	sp,fp
   1aad4:	df000017 	ldw	fp,0(sp)
   1aad8:	dec00104 	addi	sp,sp,4
   1aadc:	f800283a 	ret

0001aae0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1aae0:	defffb04 	addi	sp,sp,-20
   1aae4:	dfc00415 	stw	ra,16(sp)
   1aae8:	df000315 	stw	fp,12(sp)
   1aaec:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1aaf0:	d0a02d17 	ldw	r2,-32588(gp)
   1aaf4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1aaf8:	d0a82e17 	ldw	r2,-24392(gp)
   1aafc:	10800044 	addi	r2,r2,1
   1ab00:	d0a82e15 	stw	r2,-24392(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1ab04:	00002e06 	br	1abc0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1ab08:	e0bffd17 	ldw	r2,-12(fp)
   1ab0c:	10800017 	ldw	r2,0(r2)
   1ab10:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1ab14:	e0bffd17 	ldw	r2,-12(fp)
   1ab18:	10800403 	ldbu	r2,16(r2)
   1ab1c:	10803fcc 	andi	r2,r2,255
   1ab20:	10000426 	beq	r2,zero,1ab34 <alt_tick+0x54>
   1ab24:	d0a82e17 	ldw	r2,-24392(gp)
   1ab28:	1000021e 	bne	r2,zero,1ab34 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1ab2c:	e0bffd17 	ldw	r2,-12(fp)
   1ab30:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1ab34:	e0bffd17 	ldw	r2,-12(fp)
   1ab38:	10800217 	ldw	r2,8(r2)
   1ab3c:	d0e82e17 	ldw	r3,-24392(gp)
   1ab40:	18801d36 	bltu	r3,r2,1abb8 <alt_tick+0xd8>
   1ab44:	e0bffd17 	ldw	r2,-12(fp)
   1ab48:	10800403 	ldbu	r2,16(r2)
   1ab4c:	10803fcc 	andi	r2,r2,255
   1ab50:	1000191e 	bne	r2,zero,1abb8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1ab54:	e0bffd17 	ldw	r2,-12(fp)
   1ab58:	10800317 	ldw	r2,12(r2)
   1ab5c:	e0fffd17 	ldw	r3,-12(fp)
   1ab60:	18c00517 	ldw	r3,20(r3)
   1ab64:	1809883a 	mov	r4,r3
   1ab68:	103ee83a 	callr	r2
   1ab6c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1ab70:	e0bfff17 	ldw	r2,-4(fp)
   1ab74:	1000031e 	bne	r2,zero,1ab84 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1ab78:	e13ffd17 	ldw	r4,-12(fp)
   1ab7c:	001aa440 	call	1aa44 <alt_alarm_stop>
   1ab80:	00000d06 	br	1abb8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1ab84:	e0bffd17 	ldw	r2,-12(fp)
   1ab88:	10c00217 	ldw	r3,8(r2)
   1ab8c:	e0bfff17 	ldw	r2,-4(fp)
   1ab90:	1887883a 	add	r3,r3,r2
   1ab94:	e0bffd17 	ldw	r2,-12(fp)
   1ab98:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1ab9c:	e0bffd17 	ldw	r2,-12(fp)
   1aba0:	10c00217 	ldw	r3,8(r2)
   1aba4:	d0a82e17 	ldw	r2,-24392(gp)
   1aba8:	1880032e 	bgeu	r3,r2,1abb8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1abac:	e0bffd17 	ldw	r2,-12(fp)
   1abb0:	00c00044 	movi	r3,1
   1abb4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1abb8:	e0bffe17 	ldw	r2,-8(fp)
   1abbc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1abc0:	e0fffd17 	ldw	r3,-12(fp)
   1abc4:	d0a02d04 	addi	r2,gp,-32588
   1abc8:	18bfcf1e 	bne	r3,r2,1ab08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ab08>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1abcc:	0010ce00 	call	10ce0 <OSTimeTick>
}
   1abd0:	0001883a 	nop
   1abd4:	e037883a 	mov	sp,fp
   1abd8:	dfc00117 	ldw	ra,4(sp)
   1abdc:	df000017 	ldw	fp,0(sp)
   1abe0:	dec00204 	addi	sp,sp,8
   1abe4:	f800283a 	ret

0001abe8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1abe8:	deffff04 	addi	sp,sp,-4
   1abec:	df000015 	stw	fp,0(sp)
   1abf0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1abf4:	000170fa 	wrctl	ienable,zero
}
   1abf8:	0001883a 	nop
   1abfc:	e037883a 	mov	sp,fp
   1ac00:	df000017 	ldw	fp,0(sp)
   1ac04:	dec00104 	addi	sp,sp,4
   1ac08:	f800283a 	ret

0001ac0c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1ac0c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1ac10:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1ac14:	d1282717 	ldw	r4,-24420(gp)

      stw ra,  0(sp)
   1ac18:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1ac1c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1ac20:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1ac24:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1ac28:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1ac2c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1ac30:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1ac34:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1ac38:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1ac3c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1ac40:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1ac44:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1ac48:	001ae800 	call	1ae80 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1ac4c:	d1282217 	ldw	r4,-24440(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1ac50:	d1681a07 	ldb	r5,-24472(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1ac54:	d1282715 	stw	r4,-24420(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1ac58:	d1681a45 	stb	r5,-24471(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1ac5c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1ac60:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1ac64:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1ac68:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1ac6c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1ac70:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1ac74:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1ac78:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1ac7c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1ac80:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1ac84:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1ac88:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1ac8c:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1ac90:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1ac94:	f800283a 	ret

0001ac98 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1ac98:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1ac9c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1aca0:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1aca4:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1aca8:	001ae800 	call	1ae80 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1acac:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1acb0:	d4a81845 	stb	r18,-24479(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1acb4:	003fe506 	br	1ac4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ac4c>

0001acb8 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1acb8:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1acbc:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1acc0:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1acc4:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1acc8:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1accc:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1acd0:	dec00204 	addi	sp,sp,8

      callr r2
   1acd4:	103ee83a 	callr	r2

      nop
   1acd8:	0001883a 	nop

0001acdc <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1acdc:	defff704 	addi	sp,sp,-36
   1ace0:	dfc00815 	stw	ra,32(sp)
   1ace4:	df000715 	stw	fp,28(sp)
   1ace8:	df000704 	addi	fp,sp,28
   1acec:	e13ffc15 	stw	r4,-16(fp)
   1acf0:	e17ffd15 	stw	r5,-12(fp)
   1acf4:	e1bffe15 	stw	r6,-8(fp)
   1acf8:	3805883a 	mov	r2,r7
   1acfc:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1ad00:	e0fffe17 	ldw	r3,-8(fp)
   1ad04:	00bfff04 	movi	r2,-4
   1ad08:	1884703a 	and	r2,r3,r2
   1ad0c:	10bef704 	addi	r2,r2,-1060
   1ad10:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1ad14:	01810904 	movi	r6,1060
   1ad18:	000b883a 	mov	r5,zero
   1ad1c:	e13ff917 	ldw	r4,-28(fp)
   1ad20:	000a8200 	call	a820 <memset>
   1ad24:	e0bff917 	ldw	r2,-28(fp)
   1ad28:	10c0bb04 	addi	r3,r2,748
   1ad2c:	e0bff917 	ldw	r2,-28(fp)
   1ad30:	10c00115 	stw	r3,4(r2)
   1ad34:	e0bff917 	ldw	r2,-28(fp)
   1ad38:	10c0d504 	addi	r3,r2,852
   1ad3c:	e0bff917 	ldw	r2,-28(fp)
   1ad40:	10c00215 	stw	r3,8(r2)
   1ad44:	e0bff917 	ldw	r2,-28(fp)
   1ad48:	10c0ef04 	addi	r3,r2,956
   1ad4c:	e0bff917 	ldw	r2,-28(fp)
   1ad50:	10c00315 	stw	r3,12(r2)
   1ad54:	e0fff917 	ldw	r3,-28(fp)
   1ad58:	008000b4 	movhi	r2,2
   1ad5c:	10af6604 	addi	r2,r2,-17000
   1ad60:	18800d15 	stw	r2,52(r3)
   1ad64:	e0bff917 	ldw	r2,-28(fp)
   1ad68:	00c00044 	movi	r3,1
   1ad6c:	10c02915 	stw	r3,164(r2)
   1ad70:	10002a15 	stw	zero,168(r2)
   1ad74:	e0bff917 	ldw	r2,-28(fp)
   1ad78:	00ccc384 	movi	r3,13070
   1ad7c:	10c02b0d 	sth	r3,172(r2)
   1ad80:	e0bff917 	ldw	r2,-28(fp)
   1ad84:	00eaf344 	movi	r3,-21555
   1ad88:	10c02b8d 	sth	r3,174(r2)
   1ad8c:	e0bff917 	ldw	r2,-28(fp)
   1ad90:	00c48d04 	movi	r3,4660
   1ad94:	10c02c0d 	sth	r3,176(r2)
   1ad98:	e0bff917 	ldw	r2,-28(fp)
   1ad9c:	00f99b44 	movi	r3,-6547
   1ada0:	10c02c8d 	sth	r3,178(r2)
   1ada4:	e0bff917 	ldw	r2,-28(fp)
   1ada8:	00f7bb04 	movi	r3,-8468
   1adac:	10c02d0d 	sth	r3,180(r2)
   1adb0:	e0bff917 	ldw	r2,-28(fp)
   1adb4:	00c00144 	movi	r3,5
   1adb8:	10c02d8d 	sth	r3,182(r2)
   1adbc:	e0bff917 	ldw	r2,-28(fp)
   1adc0:	00c002c4 	movi	r3,11
   1adc4:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1adc8:	e0bff917 	ldw	r2,-28(fp)
   1adcc:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1add0:	e0bffa17 	ldw	r2,-24(fp)
   1add4:	10bff304 	addi	r2,r2,-52
   1add8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1addc:	e0bffb17 	ldw	r2,-20(fp)
   1ade0:	10800c04 	addi	r2,r2,48
   1ade4:	e0fffc17 	ldw	r3,-16(fp)
   1ade8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1adec:	e0bffb17 	ldw	r2,-20(fp)
   1adf0:	10800b04 	addi	r2,r2,44
   1adf4:	e0fffd17 	ldw	r3,-12(fp)
   1adf8:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1adfc:	e0bffb17 	ldw	r2,-20(fp)
   1ae00:	10800a04 	addi	r2,r2,40
   1ae04:	e0fff917 	ldw	r3,-28(fp)
   1ae08:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1ae0c:	008000b4 	movhi	r2,2
   1ae10:	10ab2e04 	addi	r2,r2,-21320
   1ae14:	10c00104 	addi	r3,r2,4
   1ae18:	e0bffb17 	ldw	r2,-20(fp)
   1ae1c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1ae20:	e0bffb17 	ldw	r2,-20(fp)
}
   1ae24:	e037883a 	mov	sp,fp
   1ae28:	dfc00117 	ldw	ra,4(sp)
   1ae2c:	df000017 	ldw	fp,0(sp)
   1ae30:	dec00204 	addi	sp,sp,8
   1ae34:	f800283a 	ret

0001ae38 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1ae38:	defffe04 	addi	sp,sp,-8
   1ae3c:	df000115 	stw	fp,4(sp)
   1ae40:	df000104 	addi	fp,sp,4
   1ae44:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1ae48:	0001883a 	nop
   1ae4c:	e037883a 	mov	sp,fp
   1ae50:	df000017 	ldw	fp,0(sp)
   1ae54:	dec00104 	addi	sp,sp,4
   1ae58:	f800283a 	ret

0001ae5c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1ae5c:	defffe04 	addi	sp,sp,-8
   1ae60:	df000115 	stw	fp,4(sp)
   1ae64:	df000104 	addi	fp,sp,4
   1ae68:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1ae6c:	0001883a 	nop
   1ae70:	e037883a 	mov	sp,fp
   1ae74:	df000017 	ldw	fp,0(sp)
   1ae78:	dec00104 	addi	sp,sp,4
   1ae7c:	f800283a 	ret

0001ae80 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1ae80:	deffff04 	addi	sp,sp,-4
   1ae84:	df000015 	stw	fp,0(sp)
   1ae88:	d839883a 	mov	fp,sp
}
   1ae8c:	0001883a 	nop
   1ae90:	e037883a 	mov	sp,fp
   1ae94:	df000017 	ldw	fp,0(sp)
   1ae98:	dec00104 	addi	sp,sp,4
   1ae9c:	f800283a 	ret

0001aea0 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1aea0:	deffff04 	addi	sp,sp,-4
   1aea4:	df000015 	stw	fp,0(sp)
   1aea8:	d839883a 	mov	fp,sp
}
   1aeac:	0001883a 	nop
   1aeb0:	e037883a 	mov	sp,fp
   1aeb4:	df000017 	ldw	fp,0(sp)
   1aeb8:	dec00104 	addi	sp,sp,4
   1aebc:	f800283a 	ret

0001aec0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1aec0:	deffff04 	addi	sp,sp,-4
   1aec4:	df000015 	stw	fp,0(sp)
   1aec8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1aecc:	0001883a 	nop
   1aed0:	e037883a 	mov	sp,fp
   1aed4:	df000017 	ldw	fp,0(sp)
   1aed8:	dec00104 	addi	sp,sp,4
   1aedc:	f800283a 	ret

0001aee0 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1aee0:	deffff04 	addi	sp,sp,-4
   1aee4:	df000015 	stw	fp,0(sp)
   1aee8:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1aeec:	0001883a 	nop
   1aef0:	e037883a 	mov	sp,fp
   1aef4:	df000017 	ldw	fp,0(sp)
   1aef8:	dec00104 	addi	sp,sp,4
   1aefc:	f800283a 	ret

0001af00 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1af00:	deffff04 	addi	sp,sp,-4
   1af04:	df000015 	stw	fp,0(sp)
   1af08:	d839883a 	mov	fp,sp
}
   1af0c:	0001883a 	nop
   1af10:	e037883a 	mov	sp,fp
   1af14:	df000017 	ldw	fp,0(sp)
   1af18:	dec00104 	addi	sp,sp,4
   1af1c:	f800283a 	ret

0001af20 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1af20:	deffff04 	addi	sp,sp,-4
   1af24:	df000015 	stw	fp,0(sp)
   1af28:	d839883a 	mov	fp,sp
}
   1af2c:	0001883a 	nop
   1af30:	e037883a 	mov	sp,fp
   1af34:	df000017 	ldw	fp,0(sp)
   1af38:	dec00104 	addi	sp,sp,4
   1af3c:	f800283a 	ret

0001af40 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1af40:	defffe04 	addi	sp,sp,-8
   1af44:	df000115 	stw	fp,4(sp)
   1af48:	df000104 	addi	fp,sp,4
   1af4c:	e13fff15 	stw	r4,-4(fp)
}
   1af50:	0001883a 	nop
   1af54:	e037883a 	mov	sp,fp
   1af58:	df000017 	ldw	fp,0(sp)
   1af5c:	dec00104 	addi	sp,sp,4
   1af60:	f800283a 	ret

0001af64 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1af64:	defffb04 	addi	sp,sp,-20
   1af68:	dfc00415 	stw	ra,16(sp)
   1af6c:	df000315 	stw	fp,12(sp)
   1af70:	df000304 	addi	fp,sp,12
   1af74:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1af78:	d0a00617 	ldw	r2,-32744(gp)
   1af7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1af80:	00003106 	br	1b048 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1af84:	e0bffd17 	ldw	r2,-12(fp)
   1af88:	10800217 	ldw	r2,8(r2)
   1af8c:	1009883a 	mov	r4,r2
   1af90:	000bc240 	call	bc24 <strlen>
   1af94:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1af98:	e0bffd17 	ldw	r2,-12(fp)
   1af9c:	10c00217 	ldw	r3,8(r2)
   1afa0:	e0bffe17 	ldw	r2,-8(fp)
   1afa4:	10bfffc4 	addi	r2,r2,-1
   1afa8:	1885883a 	add	r2,r3,r2
   1afac:	10800003 	ldbu	r2,0(r2)
   1afb0:	10803fcc 	andi	r2,r2,255
   1afb4:	1080201c 	xori	r2,r2,128
   1afb8:	10bfe004 	addi	r2,r2,-128
   1afbc:	10800bd8 	cmpnei	r2,r2,47
   1afc0:	1000031e 	bne	r2,zero,1afd0 <alt_find_file+0x6c>
    {
      len -= 1;
   1afc4:	e0bffe17 	ldw	r2,-8(fp)
   1afc8:	10bfffc4 	addi	r2,r2,-1
   1afcc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1afd0:	e0bffe17 	ldw	r2,-8(fp)
   1afd4:	e0ffff17 	ldw	r3,-4(fp)
   1afd8:	1885883a 	add	r2,r3,r2
   1afdc:	10800003 	ldbu	r2,0(r2)
   1afe0:	10803fcc 	andi	r2,r2,255
   1afe4:	1080201c 	xori	r2,r2,128
   1afe8:	10bfe004 	addi	r2,r2,-128
   1afec:	10800be0 	cmpeqi	r2,r2,47
   1aff0:	1000081e 	bne	r2,zero,1b014 <alt_find_file+0xb0>
   1aff4:	e0bffe17 	ldw	r2,-8(fp)
   1aff8:	e0ffff17 	ldw	r3,-4(fp)
   1affc:	1885883a 	add	r2,r3,r2
   1b000:	10800003 	ldbu	r2,0(r2)
   1b004:	10803fcc 	andi	r2,r2,255
   1b008:	1080201c 	xori	r2,r2,128
   1b00c:	10bfe004 	addi	r2,r2,-128
   1b010:	10000a1e 	bne	r2,zero,1b03c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1b014:	e0bffd17 	ldw	r2,-12(fp)
   1b018:	10800217 	ldw	r2,8(r2)
   1b01c:	e0fffe17 	ldw	r3,-8(fp)
   1b020:	180d883a 	mov	r6,r3
   1b024:	e17fff17 	ldw	r5,-4(fp)
   1b028:	1009883a 	mov	r4,r2
   1b02c:	001b2c00 	call	1b2c0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1b030:	1000021e 	bne	r2,zero,1b03c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1b034:	e0bffd17 	ldw	r2,-12(fp)
   1b038:	00000706 	br	1b058 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1b03c:	e0bffd17 	ldw	r2,-12(fp)
   1b040:	10800017 	ldw	r2,0(r2)
   1b044:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1b048:	e0fffd17 	ldw	r3,-12(fp)
   1b04c:	d0a00604 	addi	r2,gp,-32744
   1b050:	18bfcc1e 	bne	r3,r2,1af84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701af84>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1b054:	0005883a 	mov	r2,zero
}
   1b058:	e037883a 	mov	sp,fp
   1b05c:	dfc00117 	ldw	ra,4(sp)
   1b060:	df000017 	ldw	fp,0(sp)
   1b064:	dec00204 	addi	sp,sp,8
   1b068:	f800283a 	ret

0001b06c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1b06c:	defff904 	addi	sp,sp,-28
   1b070:	dfc00615 	stw	ra,24(sp)
   1b074:	df000515 	stw	fp,20(sp)
   1b078:	df000504 	addi	fp,sp,20
   1b07c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1b080:	00bffa04 	movi	r2,-24
   1b084:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1b088:	d0a81017 	ldw	r2,-24512(gp)
   1b08c:	e0bffd15 	stw	r2,-12(fp)
   1b090:	e03ffe0d 	sth	zero,-8(fp)
   1b094:	e0bffe0b 	ldhu	r2,-8(fp)
   1b098:	e0fffe84 	addi	r3,fp,-6
   1b09c:	180d883a 	mov	r6,r3
   1b0a0:	100b883a 	mov	r5,r2
   1b0a4:	e13ffd17 	ldw	r4,-12(fp)
   1b0a8:	00155340 	call	15534 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1b0ac:	e03ffb15 	stw	zero,-20(fp)
   1b0b0:	00001906 	br	1b118 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1b0b4:	008000b4 	movhi	r2,2
   1b0b8:	10b19a04 	addi	r2,r2,-14744
   1b0bc:	e0fffb17 	ldw	r3,-20(fp)
   1b0c0:	18c00324 	muli	r3,r3,12
   1b0c4:	10c5883a 	add	r2,r2,r3
   1b0c8:	10800017 	ldw	r2,0(r2)
   1b0cc:	10000f1e 	bne	r2,zero,1b10c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1b0d0:	008000b4 	movhi	r2,2
   1b0d4:	10b19a04 	addi	r2,r2,-14744
   1b0d8:	e0fffb17 	ldw	r3,-20(fp)
   1b0dc:	18c00324 	muli	r3,r3,12
   1b0e0:	10c5883a 	add	r2,r2,r3
   1b0e4:	e0ffff17 	ldw	r3,-4(fp)
   1b0e8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1b0ec:	d0e00a17 	ldw	r3,-32728(gp)
   1b0f0:	e0bffb17 	ldw	r2,-20(fp)
   1b0f4:	1880020e 	bge	r3,r2,1b100 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1b0f8:	e0bffb17 	ldw	r2,-20(fp)
   1b0fc:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   1b100:	e0bffb17 	ldw	r2,-20(fp)
   1b104:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1b108:	00000606 	br	1b124 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1b10c:	e0bffb17 	ldw	r2,-20(fp)
   1b110:	10800044 	addi	r2,r2,1
   1b114:	e0bffb15 	stw	r2,-20(fp)
   1b118:	e0bffb17 	ldw	r2,-20(fp)
   1b11c:	10800810 	cmplti	r2,r2,32
   1b120:	103fe41e 	bne	r2,zero,1b0b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b0b4>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1b124:	d0a81017 	ldw	r2,-24512(gp)
   1b128:	1009883a 	mov	r4,r2
   1b12c:	00158ac0 	call	158ac <OSSemPost>

  return rc;
   1b130:	e0bffc17 	ldw	r2,-16(fp)
}
   1b134:	e037883a 	mov	sp,fp
   1b138:	dfc00117 	ldw	ra,4(sp)
   1b13c:	df000017 	ldw	fp,0(sp)
   1b140:	dec00204 	addi	sp,sp,8
   1b144:	f800283a 	ret

0001b148 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1b148:	defffb04 	addi	sp,sp,-20
   1b14c:	df000415 	stw	fp,16(sp)
   1b150:	df000404 	addi	fp,sp,16
   1b154:	e13ffe15 	stw	r4,-8(fp)
   1b158:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1b15c:	e0bfff17 	ldw	r2,-4(fp)
   1b160:	10840070 	cmpltui	r2,r2,4097
   1b164:	1000021e 	bne	r2,zero,1b170 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1b168:	00840004 	movi	r2,4096
   1b16c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1b170:	e0fffe17 	ldw	r3,-8(fp)
   1b174:	e0bfff17 	ldw	r2,-4(fp)
   1b178:	1885883a 	add	r2,r3,r2
   1b17c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1b180:	e0bffe17 	ldw	r2,-8(fp)
   1b184:	e0bffc15 	stw	r2,-16(fp)
   1b188:	00000506 	br	1b1a0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1b18c:	e0bffc17 	ldw	r2,-16(fp)
   1b190:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1b194:	e0bffc17 	ldw	r2,-16(fp)
   1b198:	10800804 	addi	r2,r2,32
   1b19c:	e0bffc15 	stw	r2,-16(fp)
   1b1a0:	e0fffc17 	ldw	r3,-16(fp)
   1b1a4:	e0bffd17 	ldw	r2,-12(fp)
   1b1a8:	18bff836 	bltu	r3,r2,1b18c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b18c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1b1ac:	e0bffe17 	ldw	r2,-8(fp)
   1b1b0:	108007cc 	andi	r2,r2,31
   1b1b4:	10000226 	beq	r2,zero,1b1c0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1b1b8:	e0bffc17 	ldw	r2,-16(fp)
   1b1bc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1b1c0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1b1c4:	0001883a 	nop
   1b1c8:	e037883a 	mov	sp,fp
   1b1cc:	df000017 	ldw	fp,0(sp)
   1b1d0:	dec00104 	addi	sp,sp,4
   1b1d4:	f800283a 	ret

0001b1d8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1b1d8:	defffe04 	addi	sp,sp,-8
   1b1dc:	df000115 	stw	fp,4(sp)
   1b1e0:	df000104 	addi	fp,sp,4
   1b1e4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1b1e8:	e0bfff17 	ldw	r2,-4(fp)
   1b1ec:	10bffe84 	addi	r2,r2,-6
   1b1f0:	10c00428 	cmpgeui	r3,r2,16
   1b1f4:	18001a1e 	bne	r3,zero,1b260 <alt_exception_cause_generated_bad_addr+0x88>
   1b1f8:	100690ba 	slli	r3,r2,2
   1b1fc:	008000b4 	movhi	r2,2
   1b200:	10ac8404 	addi	r2,r2,-19952
   1b204:	1885883a 	add	r2,r3,r2
   1b208:	10800017 	ldw	r2,0(r2)
   1b20c:	1000683a 	jmp	r2
   1b210:	0001b250 	cmplti	zero,zero,1737
   1b214:	0001b250 	cmplti	zero,zero,1737
   1b218:	0001b260 	cmpeqi	zero,zero,1737
   1b21c:	0001b260 	cmpeqi	zero,zero,1737
   1b220:	0001b260 	cmpeqi	zero,zero,1737
   1b224:	0001b250 	cmplti	zero,zero,1737
   1b228:	0001b258 	cmpnei	zero,zero,1737
   1b22c:	0001b260 	cmpeqi	zero,zero,1737
   1b230:	0001b250 	cmplti	zero,zero,1737
   1b234:	0001b250 	cmplti	zero,zero,1737
   1b238:	0001b260 	cmpeqi	zero,zero,1737
   1b23c:	0001b250 	cmplti	zero,zero,1737
   1b240:	0001b258 	cmpnei	zero,zero,1737
   1b244:	0001b260 	cmpeqi	zero,zero,1737
   1b248:	0001b260 	cmpeqi	zero,zero,1737
   1b24c:	0001b250 	cmplti	zero,zero,1737
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1b250:	00800044 	movi	r2,1
   1b254:	00000306 	br	1b264 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1b258:	0005883a 	mov	r2,zero
   1b25c:	00000106 	br	1b264 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1b260:	0005883a 	mov	r2,zero
  }
}
   1b264:	e037883a 	mov	sp,fp
   1b268:	df000017 	ldw	fp,0(sp)
   1b26c:	dec00104 	addi	sp,sp,4
   1b270:	f800283a 	ret

0001b274 <atexit>:
   1b274:	200b883a 	mov	r5,r4
   1b278:	000f883a 	mov	r7,zero
   1b27c:	000d883a 	mov	r6,zero
   1b280:	0009883a 	mov	r4,zero
   1b284:	001b33c1 	jmpi	1b33c <__register_exitproc>

0001b288 <exit>:
   1b288:	defffe04 	addi	sp,sp,-8
   1b28c:	000b883a 	mov	r5,zero
   1b290:	dc000015 	stw	r16,0(sp)
   1b294:	dfc00115 	stw	ra,4(sp)
   1b298:	2021883a 	mov	r16,r4
   1b29c:	001b4540 	call	1b454 <__call_exitprocs>
   1b2a0:	008000b4 	movhi	r2,2
   1b2a4:	10b71204 	addi	r2,r2,-9144
   1b2a8:	11000017 	ldw	r4,0(r2)
   1b2ac:	20800f17 	ldw	r2,60(r4)
   1b2b0:	10000126 	beq	r2,zero,1b2b8 <exit+0x30>
   1b2b4:	103ee83a 	callr	r2
   1b2b8:	8009883a 	mov	r4,r16
   1b2bc:	001b5d40 	call	1b5d4 <_exit>

0001b2c0 <memcmp>:
   1b2c0:	01c000c4 	movi	r7,3
   1b2c4:	3980192e 	bgeu	r7,r6,1b32c <memcmp+0x6c>
   1b2c8:	2144b03a 	or	r2,r4,r5
   1b2cc:	11c4703a 	and	r2,r2,r7
   1b2d0:	10000f26 	beq	r2,zero,1b310 <memcmp+0x50>
   1b2d4:	20800003 	ldbu	r2,0(r4)
   1b2d8:	28c00003 	ldbu	r3,0(r5)
   1b2dc:	10c0151e 	bne	r2,r3,1b334 <memcmp+0x74>
   1b2e0:	31bfff84 	addi	r6,r6,-2
   1b2e4:	01ffffc4 	movi	r7,-1
   1b2e8:	00000406 	br	1b2fc <memcmp+0x3c>
   1b2ec:	20800003 	ldbu	r2,0(r4)
   1b2f0:	28c00003 	ldbu	r3,0(r5)
   1b2f4:	31bfffc4 	addi	r6,r6,-1
   1b2f8:	10c00e1e 	bne	r2,r3,1b334 <memcmp+0x74>
   1b2fc:	21000044 	addi	r4,r4,1
   1b300:	29400044 	addi	r5,r5,1
   1b304:	31fff91e 	bne	r6,r7,1b2ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b2ec>
   1b308:	0005883a 	mov	r2,zero
   1b30c:	f800283a 	ret
   1b310:	20c00017 	ldw	r3,0(r4)
   1b314:	28800017 	ldw	r2,0(r5)
   1b318:	18bfee1e 	bne	r3,r2,1b2d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b2d4>
   1b31c:	31bfff04 	addi	r6,r6,-4
   1b320:	21000104 	addi	r4,r4,4
   1b324:	29400104 	addi	r5,r5,4
   1b328:	39bff936 	bltu	r7,r6,1b310 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b310>
   1b32c:	303fe91e 	bne	r6,zero,1b2d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b2d4>
   1b330:	003ff506 	br	1b308 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b308>
   1b334:	10c5c83a 	sub	r2,r2,r3
   1b338:	f800283a 	ret

0001b33c <__register_exitproc>:
   1b33c:	defffa04 	addi	sp,sp,-24
   1b340:	dc000315 	stw	r16,12(sp)
   1b344:	040000b4 	movhi	r16,2
   1b348:	84371204 	addi	r16,r16,-9144
   1b34c:	80c00017 	ldw	r3,0(r16)
   1b350:	dc400415 	stw	r17,16(sp)
   1b354:	dfc00515 	stw	ra,20(sp)
   1b358:	18805217 	ldw	r2,328(r3)
   1b35c:	2023883a 	mov	r17,r4
   1b360:	10003726 	beq	r2,zero,1b440 <__register_exitproc+0x104>
   1b364:	10c00117 	ldw	r3,4(r2)
   1b368:	010007c4 	movi	r4,31
   1b36c:	20c00e16 	blt	r4,r3,1b3a8 <__register_exitproc+0x6c>
   1b370:	1a000044 	addi	r8,r3,1
   1b374:	8800221e 	bne	r17,zero,1b400 <__register_exitproc+0xc4>
   1b378:	18c00084 	addi	r3,r3,2
   1b37c:	18c7883a 	add	r3,r3,r3
   1b380:	18c7883a 	add	r3,r3,r3
   1b384:	12000115 	stw	r8,4(r2)
   1b388:	10c7883a 	add	r3,r2,r3
   1b38c:	19400015 	stw	r5,0(r3)
   1b390:	0005883a 	mov	r2,zero
   1b394:	dfc00517 	ldw	ra,20(sp)
   1b398:	dc400417 	ldw	r17,16(sp)
   1b39c:	dc000317 	ldw	r16,12(sp)
   1b3a0:	dec00604 	addi	sp,sp,24
   1b3a4:	f800283a 	ret
   1b3a8:	00800034 	movhi	r2,0
   1b3ac:	10800004 	addi	r2,r2,0
   1b3b0:	10002626 	beq	r2,zero,1b44c <__register_exitproc+0x110>
   1b3b4:	01006404 	movi	r4,400
   1b3b8:	d9400015 	stw	r5,0(sp)
   1b3bc:	d9800115 	stw	r6,4(sp)
   1b3c0:	d9c00215 	stw	r7,8(sp)
   1b3c4:	00000000 	call	0 <__reset>
   1b3c8:	d9400017 	ldw	r5,0(sp)
   1b3cc:	d9800117 	ldw	r6,4(sp)
   1b3d0:	d9c00217 	ldw	r7,8(sp)
   1b3d4:	10001d26 	beq	r2,zero,1b44c <__register_exitproc+0x110>
   1b3d8:	81000017 	ldw	r4,0(r16)
   1b3dc:	10000115 	stw	zero,4(r2)
   1b3e0:	02000044 	movi	r8,1
   1b3e4:	22405217 	ldw	r9,328(r4)
   1b3e8:	0007883a 	mov	r3,zero
   1b3ec:	12400015 	stw	r9,0(r2)
   1b3f0:	20805215 	stw	r2,328(r4)
   1b3f4:	10006215 	stw	zero,392(r2)
   1b3f8:	10006315 	stw	zero,396(r2)
   1b3fc:	883fde26 	beq	r17,zero,1b378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b378>
   1b400:	18c9883a 	add	r4,r3,r3
   1b404:	2109883a 	add	r4,r4,r4
   1b408:	1109883a 	add	r4,r2,r4
   1b40c:	21802215 	stw	r6,136(r4)
   1b410:	01800044 	movi	r6,1
   1b414:	12406217 	ldw	r9,392(r2)
   1b418:	30cc983a 	sll	r6,r6,r3
   1b41c:	4992b03a 	or	r9,r9,r6
   1b420:	12406215 	stw	r9,392(r2)
   1b424:	21c04215 	stw	r7,264(r4)
   1b428:	01000084 	movi	r4,2
   1b42c:	893fd21e 	bne	r17,r4,1b378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b378>
   1b430:	11006317 	ldw	r4,396(r2)
   1b434:	218cb03a 	or	r6,r4,r6
   1b438:	11806315 	stw	r6,396(r2)
   1b43c:	003fce06 	br	1b378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b378>
   1b440:	18805304 	addi	r2,r3,332
   1b444:	18805215 	stw	r2,328(r3)
   1b448:	003fc606 	br	1b364 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b364>
   1b44c:	00bfffc4 	movi	r2,-1
   1b450:	003fd006 	br	1b394 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b394>

0001b454 <__call_exitprocs>:
   1b454:	defff504 	addi	sp,sp,-44
   1b458:	df000915 	stw	fp,36(sp)
   1b45c:	dd400615 	stw	r21,24(sp)
   1b460:	dc800315 	stw	r18,12(sp)
   1b464:	dfc00a15 	stw	ra,40(sp)
   1b468:	ddc00815 	stw	r23,32(sp)
   1b46c:	dd800715 	stw	r22,28(sp)
   1b470:	dd000515 	stw	r20,20(sp)
   1b474:	dcc00415 	stw	r19,16(sp)
   1b478:	dc400215 	stw	r17,8(sp)
   1b47c:	dc000115 	stw	r16,4(sp)
   1b480:	d9000015 	stw	r4,0(sp)
   1b484:	2839883a 	mov	fp,r5
   1b488:	04800044 	movi	r18,1
   1b48c:	057fffc4 	movi	r21,-1
   1b490:	008000b4 	movhi	r2,2
   1b494:	10b71204 	addi	r2,r2,-9144
   1b498:	12000017 	ldw	r8,0(r2)
   1b49c:	45005217 	ldw	r20,328(r8)
   1b4a0:	44c05204 	addi	r19,r8,328
   1b4a4:	a0001c26 	beq	r20,zero,1b518 <__call_exitprocs+0xc4>
   1b4a8:	a0800117 	ldw	r2,4(r20)
   1b4ac:	15ffffc4 	addi	r23,r2,-1
   1b4b0:	b8000d16 	blt	r23,zero,1b4e8 <__call_exitprocs+0x94>
   1b4b4:	14000044 	addi	r16,r2,1
   1b4b8:	8421883a 	add	r16,r16,r16
   1b4bc:	8421883a 	add	r16,r16,r16
   1b4c0:	84402004 	addi	r17,r16,128
   1b4c4:	a463883a 	add	r17,r20,r17
   1b4c8:	a421883a 	add	r16,r20,r16
   1b4cc:	e0001e26 	beq	fp,zero,1b548 <__call_exitprocs+0xf4>
   1b4d0:	80804017 	ldw	r2,256(r16)
   1b4d4:	e0801c26 	beq	fp,r2,1b548 <__call_exitprocs+0xf4>
   1b4d8:	bdffffc4 	addi	r23,r23,-1
   1b4dc:	843fff04 	addi	r16,r16,-4
   1b4e0:	8c7fff04 	addi	r17,r17,-4
   1b4e4:	bd7ff91e 	bne	r23,r21,1b4cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b4cc>
   1b4e8:	00800034 	movhi	r2,0
   1b4ec:	10800004 	addi	r2,r2,0
   1b4f0:	10000926 	beq	r2,zero,1b518 <__call_exitprocs+0xc4>
   1b4f4:	a0800117 	ldw	r2,4(r20)
   1b4f8:	1000301e 	bne	r2,zero,1b5bc <__call_exitprocs+0x168>
   1b4fc:	a0800017 	ldw	r2,0(r20)
   1b500:	10003226 	beq	r2,zero,1b5cc <__call_exitprocs+0x178>
   1b504:	a009883a 	mov	r4,r20
   1b508:	98800015 	stw	r2,0(r19)
   1b50c:	00000000 	call	0 <__reset>
   1b510:	9d000017 	ldw	r20,0(r19)
   1b514:	a03fe41e 	bne	r20,zero,1b4a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b4a8>
   1b518:	dfc00a17 	ldw	ra,40(sp)
   1b51c:	df000917 	ldw	fp,36(sp)
   1b520:	ddc00817 	ldw	r23,32(sp)
   1b524:	dd800717 	ldw	r22,28(sp)
   1b528:	dd400617 	ldw	r21,24(sp)
   1b52c:	dd000517 	ldw	r20,20(sp)
   1b530:	dcc00417 	ldw	r19,16(sp)
   1b534:	dc800317 	ldw	r18,12(sp)
   1b538:	dc400217 	ldw	r17,8(sp)
   1b53c:	dc000117 	ldw	r16,4(sp)
   1b540:	dec00b04 	addi	sp,sp,44
   1b544:	f800283a 	ret
   1b548:	a0800117 	ldw	r2,4(r20)
   1b54c:	80c00017 	ldw	r3,0(r16)
   1b550:	10bfffc4 	addi	r2,r2,-1
   1b554:	15c01426 	beq	r2,r23,1b5a8 <__call_exitprocs+0x154>
   1b558:	80000015 	stw	zero,0(r16)
   1b55c:	183fde26 	beq	r3,zero,1b4d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b4d8>
   1b560:	95c8983a 	sll	r4,r18,r23
   1b564:	a0806217 	ldw	r2,392(r20)
   1b568:	a5800117 	ldw	r22,4(r20)
   1b56c:	2084703a 	and	r2,r4,r2
   1b570:	10000b26 	beq	r2,zero,1b5a0 <__call_exitprocs+0x14c>
   1b574:	a0806317 	ldw	r2,396(r20)
   1b578:	2088703a 	and	r4,r4,r2
   1b57c:	20000c1e 	bne	r4,zero,1b5b0 <__call_exitprocs+0x15c>
   1b580:	89400017 	ldw	r5,0(r17)
   1b584:	d9000017 	ldw	r4,0(sp)
   1b588:	183ee83a 	callr	r3
   1b58c:	a0800117 	ldw	r2,4(r20)
   1b590:	15bfbf1e 	bne	r2,r22,1b490 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b490>
   1b594:	98800017 	ldw	r2,0(r19)
   1b598:	153fcf26 	beq	r2,r20,1b4d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b4d8>
   1b59c:	003fbc06 	br	1b490 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b490>
   1b5a0:	183ee83a 	callr	r3
   1b5a4:	003ff906 	br	1b58c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b58c>
   1b5a8:	a5c00115 	stw	r23,4(r20)
   1b5ac:	003feb06 	br	1b55c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b55c>
   1b5b0:	89000017 	ldw	r4,0(r17)
   1b5b4:	183ee83a 	callr	r3
   1b5b8:	003ff406 	br	1b58c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b58c>
   1b5bc:	a0800017 	ldw	r2,0(r20)
   1b5c0:	a027883a 	mov	r19,r20
   1b5c4:	1029883a 	mov	r20,r2
   1b5c8:	003fb606 	br	1b4a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b4a4>
   1b5cc:	0005883a 	mov	r2,zero
   1b5d0:	003ffb06 	br	1b5c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b5c0>

0001b5d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1b5d4:	defffd04 	addi	sp,sp,-12
   1b5d8:	df000215 	stw	fp,8(sp)
   1b5dc:	df000204 	addi	fp,sp,8
   1b5e0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1b5e4:	d0281845 	stb	zero,-24479(gp)
   1b5e8:	e0bfff17 	ldw	r2,-4(fp)
   1b5ec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1b5f0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1b5f4:	10000226 	beq	r2,zero,1b600 <_exit+0x2c>
    ALT_SIM_FAIL();
   1b5f8:	002af070 	cmpltui	zero,zero,43969
   1b5fc:	00000106 	br	1b604 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1b600:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1b604:	003fff06 	br	1b604 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b604>
