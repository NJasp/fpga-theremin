// nios_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module nios_system_mm_interconnect_0 (
		input  wire        System_PLL_sys_clk_clk,                                    //                                  System_PLL_sys_clk.clk
		input  wire        JTAG_to_FPGA_Bridge_clk_reset_reset_bridge_in_reset_reset, // JTAG_to_FPGA_Bridge_clk_reset_reset_bridge_in_reset.reset
		input  wire        JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset,      //      JTAG_UART_2nd_Core_reset_reset_bridge_in_reset.reset
		input  wire        Processor1_reset_reset_bridge_in_reset_reset,              //              Processor1_reset_reset_bridge_in_reset.reset
		input  wire        Processor2_reset_reset_bridge_in_reset_reset,              //              Processor2_reset_reset_bridge_in_reset.reset
		input  wire [31:0] JTAG_to_FPGA_Bridge_master_address,                        //                          JTAG_to_FPGA_Bridge_master.address
		output wire        JTAG_to_FPGA_Bridge_master_waitrequest,                    //                                                    .waitrequest
		input  wire [3:0]  JTAG_to_FPGA_Bridge_master_byteenable,                     //                                                    .byteenable
		input  wire        JTAG_to_FPGA_Bridge_master_read,                           //                                                    .read
		output wire [31:0] JTAG_to_FPGA_Bridge_master_readdata,                       //                                                    .readdata
		output wire        JTAG_to_FPGA_Bridge_master_readdatavalid,                  //                                                    .readdatavalid
		input  wire        JTAG_to_FPGA_Bridge_master_write,                          //                                                    .write
		input  wire [31:0] JTAG_to_FPGA_Bridge_master_writedata,                      //                                                    .writedata
		input  wire [28:0] Processor1_data_master_address,                            //                              Processor1_data_master.address
		output wire        Processor1_data_master_waitrequest,                        //                                                    .waitrequest
		input  wire [3:0]  Processor1_data_master_byteenable,                         //                                                    .byteenable
		input  wire        Processor1_data_master_read,                               //                                                    .read
		output wire [31:0] Processor1_data_master_readdata,                           //                                                    .readdata
		input  wire        Processor1_data_master_write,                              //                                                    .write
		input  wire [31:0] Processor1_data_master_writedata,                          //                                                    .writedata
		input  wire        Processor1_data_master_debugaccess,                        //                                                    .debugaccess
		input  wire [27:0] Processor1_instruction_master_address,                     //                       Processor1_instruction_master.address
		output wire        Processor1_instruction_master_waitrequest,                 //                                                    .waitrequest
		input  wire        Processor1_instruction_master_read,                        //                                                    .read
		output wire [31:0] Processor1_instruction_master_readdata,                    //                                                    .readdata
		input  wire [28:0] Processor2_data_master_address,                            //                              Processor2_data_master.address
		output wire        Processor2_data_master_waitrequest,                        //                                                    .waitrequest
		input  wire [3:0]  Processor2_data_master_byteenable,                         //                                                    .byteenable
		input  wire        Processor2_data_master_read,                               //                                                    .read
		output wire [31:0] Processor2_data_master_readdata,                           //                                                    .readdata
		input  wire        Processor2_data_master_write,                              //                                                    .write
		input  wire [31:0] Processor2_data_master_writedata,                          //                                                    .writedata
		input  wire        Processor2_data_master_debugaccess,                        //                                                    .debugaccess
		input  wire [27:0] Processor2_instruction_master_address,                     //                       Processor2_instruction_master.address
		output wire        Processor2_instruction_master_waitrequest,                 //                                                    .waitrequest
		input  wire        Processor2_instruction_master_read,                        //                                                    .read
		output wire [31:0] Processor2_instruction_master_readdata,                    //                                                    .readdata
		output wire [1:0]  Audio_Subsystem_audio_slave_address,                       //                         Audio_Subsystem_audio_slave.address
		output wire        Audio_Subsystem_audio_slave_write,                         //                                                    .write
		output wire        Audio_Subsystem_audio_slave_read,                          //                                                    .read
		input  wire [31:0] Audio_Subsystem_audio_slave_readdata,                      //                                                    .readdata
		output wire [31:0] Audio_Subsystem_audio_slave_writedata,                     //                                                    .writedata
		output wire        Audio_Subsystem_audio_slave_chipselect,                    //                                                    .chipselect
		output wire [1:0]  AV_Config_avalon_av_config_slave_address,                  //                    AV_Config_avalon_av_config_slave.address
		output wire        AV_Config_avalon_av_config_slave_write,                    //                                                    .write
		output wire        AV_Config_avalon_av_config_slave_read,                     //                                                    .read
		input  wire [31:0] AV_Config_avalon_av_config_slave_readdata,                 //                                                    .readdata
		output wire [31:0] AV_Config_avalon_av_config_slave_writedata,                //                                                    .writedata
		output wire [3:0]  AV_Config_avalon_av_config_slave_byteenable,               //                                                    .byteenable
		input  wire        AV_Config_avalon_av_config_slave_waitrequest,              //                                                    .waitrequest
		input  wire [31:0] CameraD5M_0_camera_slave_readdata,                         //                            CameraD5M_0_camera_slave.readdata
		output wire [1:0]  Expansion_JP5_avalon_parallel_port_slave_address,          //            Expansion_JP5_avalon_parallel_port_slave.address
		output wire        Expansion_JP5_avalon_parallel_port_slave_write,            //                                                    .write
		output wire        Expansion_JP5_avalon_parallel_port_slave_read,             //                                                    .read
		input  wire [31:0] Expansion_JP5_avalon_parallel_port_slave_readdata,         //                                                    .readdata
		output wire [31:0] Expansion_JP5_avalon_parallel_port_slave_writedata,        //                                                    .writedata
		output wire [3:0]  Expansion_JP5_avalon_parallel_port_slave_byteenable,       //                                                    .byteenable
		output wire        Expansion_JP5_avalon_parallel_port_slave_chipselect,       //                                                    .chipselect
		output wire [20:0] Flash_flash_data_address,                                  //                                    Flash_flash_data.address
		output wire        Flash_flash_data_write,                                    //                                                    .write
		output wire        Flash_flash_data_read,                                     //                                                    .read
		input  wire [31:0] Flash_flash_data_readdata,                                 //                                                    .readdata
		output wire [31:0] Flash_flash_data_writedata,                                //                                                    .writedata
		output wire [3:0]  Flash_flash_data_byteenable,                               //                                                    .byteenable
		input  wire        Flash_flash_data_waitrequest,                              //                                                    .waitrequest
		output wire        Flash_flash_data_chipselect,                               //                                                    .chipselect
		output wire        Flash_flash_erase_control_write,                           //                           Flash_flash_erase_control.write
		output wire        Flash_flash_erase_control_read,                            //                                                    .read
		input  wire [31:0] Flash_flash_erase_control_readdata,                        //                                                    .readdata
		output wire [31:0] Flash_flash_erase_control_writedata,                       //                                                    .writedata
		output wire [3:0]  Flash_flash_erase_control_byteenable,                      //                                                    .byteenable
		input  wire        Flash_flash_erase_control_waitrequest,                     //                                                    .waitrequest
		output wire        Flash_flash_erase_control_chipselect,                      //                                                    .chipselect
		output wire [1:0]  Green_LEDs_avalon_parallel_port_slave_address,             //               Green_LEDs_avalon_parallel_port_slave.address
		output wire        Green_LEDs_avalon_parallel_port_slave_write,               //                                                    .write
		output wire        Green_LEDs_avalon_parallel_port_slave_read,                //                                                    .read
		input  wire [31:0] Green_LEDs_avalon_parallel_port_slave_readdata,            //                                                    .readdata
		output wire [31:0] Green_LEDs_avalon_parallel_port_slave_writedata,           //                                                    .writedata
		output wire [3:0]  Green_LEDs_avalon_parallel_port_slave_byteenable,          //                                                    .byteenable
		output wire        Green_LEDs_avalon_parallel_port_slave_chipselect,          //                                                    .chipselect
		output wire [2:0]  Interval_Timer_s1_address,                                 //                                   Interval_Timer_s1.address
		output wire        Interval_Timer_s1_write,                                   //                                                    .write
		input  wire [15:0] Interval_Timer_s1_readdata,                                //                                                    .readdata
		output wire [15:0] Interval_Timer_s1_writedata,                               //                                                    .writedata
		output wire        Interval_Timer_s1_chipselect,                              //                                                    .chipselect
		output wire [0:0]  JTAG_UART_avalon_jtag_slave_address,                       //                         JTAG_UART_avalon_jtag_slave.address
		output wire        JTAG_UART_avalon_jtag_slave_write,                         //                                                    .write
		output wire        JTAG_UART_avalon_jtag_slave_read,                          //                                                    .read
		input  wire [31:0] JTAG_UART_avalon_jtag_slave_readdata,                      //                                                    .readdata
		output wire [31:0] JTAG_UART_avalon_jtag_slave_writedata,                     //                                                    .writedata
		input  wire        JTAG_UART_avalon_jtag_slave_waitrequest,                   //                                                    .waitrequest
		output wire        JTAG_UART_avalon_jtag_slave_chipselect,                    //                                                    .chipselect
		output wire [0:0]  JTAG_UART_2nd_Core_avalon_jtag_slave_address,              //                JTAG_UART_2nd_Core_avalon_jtag_slave.address
		output wire        JTAG_UART_2nd_Core_avalon_jtag_slave_write,                //                                                    .write
		output wire        JTAG_UART_2nd_Core_avalon_jtag_slave_read,                 //                                                    .read
		input  wire [31:0] JTAG_UART_2nd_Core_avalon_jtag_slave_readdata,             //                                                    .readdata
		output wire [31:0] JTAG_UART_2nd_Core_avalon_jtag_slave_writedata,            //                                                    .writedata
		input  wire        JTAG_UART_2nd_Core_avalon_jtag_slave_waitrequest,          //                                                    .waitrequest
		output wire        JTAG_UART_2nd_Core_avalon_jtag_slave_chipselect,           //                                                    .chipselect
		output wire [8:0]  Processor1_debug_mem_slave_address,                        //                          Processor1_debug_mem_slave.address
		output wire        Processor1_debug_mem_slave_write,                          //                                                    .write
		output wire        Processor1_debug_mem_slave_read,                           //                                                    .read
		input  wire [31:0] Processor1_debug_mem_slave_readdata,                       //                                                    .readdata
		output wire [31:0] Processor1_debug_mem_slave_writedata,                      //                                                    .writedata
		output wire [3:0]  Processor1_debug_mem_slave_byteenable,                     //                                                    .byteenable
		input  wire        Processor1_debug_mem_slave_waitrequest,                    //                                                    .waitrequest
		output wire        Processor1_debug_mem_slave_debugaccess,                    //                                                    .debugaccess
		output wire [8:0]  Processor2_debug_mem_slave_address,                        //                          Processor2_debug_mem_slave.address
		output wire        Processor2_debug_mem_slave_write,                          //                                                    .write
		output wire        Processor2_debug_mem_slave_read,                           //                                                    .read
		input  wire [31:0] Processor2_debug_mem_slave_readdata,                       //                                                    .readdata
		output wire [31:0] Processor2_debug_mem_slave_writedata,                      //                                                    .writedata
		output wire [3:0]  Processor2_debug_mem_slave_byteenable,                     //                                                    .byteenable
		input  wire        Processor2_debug_mem_slave_waitrequest,                    //                                                    .waitrequest
		output wire        Processor2_debug_mem_slave_debugaccess,                    //                                                    .debugaccess
		output wire [1:0]  Pushbuttons_avalon_parallel_port_slave_address,            //              Pushbuttons_avalon_parallel_port_slave.address
		output wire        Pushbuttons_avalon_parallel_port_slave_write,              //                                                    .write
		output wire        Pushbuttons_avalon_parallel_port_slave_read,               //                                                    .read
		input  wire [31:0] Pushbuttons_avalon_parallel_port_slave_readdata,           //                                                    .readdata
		output wire [31:0] Pushbuttons_avalon_parallel_port_slave_writedata,          //                                                    .writedata
		output wire [3:0]  Pushbuttons_avalon_parallel_port_slave_byteenable,         //                                                    .byteenable
		output wire        Pushbuttons_avalon_parallel_port_slave_chipselect,         //                                                    .chipselect
		output wire [1:0]  Red_LEDs_avalon_parallel_port_slave_address,               //                 Red_LEDs_avalon_parallel_port_slave.address
		output wire        Red_LEDs_avalon_parallel_port_slave_write,                 //                                                    .write
		output wire        Red_LEDs_avalon_parallel_port_slave_read,                  //                                                    .read
		input  wire [31:0] Red_LEDs_avalon_parallel_port_slave_readdata,              //                                                    .readdata
		output wire [31:0] Red_LEDs_avalon_parallel_port_slave_writedata,             //                                                    .writedata
		output wire [3:0]  Red_LEDs_avalon_parallel_port_slave_byteenable,            //                                                    .byteenable
		output wire        Red_LEDs_avalon_parallel_port_slave_chipselect,            //                                                    .chipselect
		output wire [24:0] SDRAM_s1_address,                                          //                                            SDRAM_s1.address
		output wire        SDRAM_s1_write,                                            //                                                    .write
		output wire        SDRAM_s1_read,                                             //                                                    .read
		input  wire [31:0] SDRAM_s1_readdata,                                         //                                                    .readdata
		output wire [31:0] SDRAM_s1_writedata,                                        //                                                    .writedata
		output wire [3:0]  SDRAM_s1_byteenable,                                       //                                                    .byteenable
		input  wire        SDRAM_s1_readdatavalid,                                    //                                                    .readdatavalid
		input  wire        SDRAM_s1_waitrequest,                                      //                                                    .waitrequest
		output wire        SDRAM_s1_chipselect,                                       //                                                    .chipselect
		output wire [0:0]  Serial_Port_avalon_rs232_slave_address,                    //                      Serial_Port_avalon_rs232_slave.address
		output wire        Serial_Port_avalon_rs232_slave_write,                      //                                                    .write
		output wire        Serial_Port_avalon_rs232_slave_read,                       //                                                    .read
		input  wire [31:0] Serial_Port_avalon_rs232_slave_readdata,                   //                                                    .readdata
		output wire [31:0] Serial_Port_avalon_rs232_slave_writedata,                  //                                                    .writedata
		output wire [3:0]  Serial_Port_avalon_rs232_slave_byteenable,                 //                                                    .byteenable
		output wire        Serial_Port_avalon_rs232_slave_chipselect,                 //                                                    .chipselect
		output wire [1:0]  Slider_Switches_avalon_parallel_port_slave_address,        //          Slider_Switches_avalon_parallel_port_slave.address
		output wire        Slider_Switches_avalon_parallel_port_slave_write,          //                                                    .write
		output wire        Slider_Switches_avalon_parallel_port_slave_read,           //                                                    .read
		input  wire [31:0] Slider_Switches_avalon_parallel_port_slave_readdata,       //                                                    .readdata
		output wire [31:0] Slider_Switches_avalon_parallel_port_slave_writedata,      //                                                    .writedata
		output wire [3:0]  Slider_Switches_avalon_parallel_port_slave_byteenable,     //                                                    .byteenable
		output wire        Slider_Switches_avalon_parallel_port_slave_chipselect,     //                                                    .chipselect
		output wire [19:0] SRAM_avalon_sram_slave_address,                            //                              SRAM_avalon_sram_slave.address
		output wire        SRAM_avalon_sram_slave_write,                              //                                                    .write
		output wire        SRAM_avalon_sram_slave_read,                               //                                                    .read
		input  wire [15:0] SRAM_avalon_sram_slave_readdata,                           //                                                    .readdata
		output wire [15:0] SRAM_avalon_sram_slave_writedata,                          //                                                    .writedata
		output wire [1:0]  SRAM_avalon_sram_slave_byteenable,                         //                                                    .byteenable
		input  wire        SRAM_avalon_sram_slave_readdatavalid,                      //                                                    .readdatavalid
		output wire [0:0]  SysID_control_slave_address,                               //                                 SysID_control_slave.address
		input  wire [31:0] SysID_control_slave_readdata                               //                                                    .readdata
	);

	wire          processor2_data_master_translator_avalon_universal_master_0_waitrequest;          // Processor2_data_master_agent:av_waitrequest -> Processor2_data_master_translator:uav_waitrequest
	wire   [31:0] processor2_data_master_translator_avalon_universal_master_0_readdata;             // Processor2_data_master_agent:av_readdata -> Processor2_data_master_translator:uav_readdata
	wire          processor2_data_master_translator_avalon_universal_master_0_debugaccess;          // Processor2_data_master_translator:uav_debugaccess -> Processor2_data_master_agent:av_debugaccess
	wire   [31:0] processor2_data_master_translator_avalon_universal_master_0_address;              // Processor2_data_master_translator:uav_address -> Processor2_data_master_agent:av_address
	wire          processor2_data_master_translator_avalon_universal_master_0_read;                 // Processor2_data_master_translator:uav_read -> Processor2_data_master_agent:av_read
	wire    [3:0] processor2_data_master_translator_avalon_universal_master_0_byteenable;           // Processor2_data_master_translator:uav_byteenable -> Processor2_data_master_agent:av_byteenable
	wire          processor2_data_master_translator_avalon_universal_master_0_readdatavalid;        // Processor2_data_master_agent:av_readdatavalid -> Processor2_data_master_translator:uav_readdatavalid
	wire          processor2_data_master_translator_avalon_universal_master_0_lock;                 // Processor2_data_master_translator:uav_lock -> Processor2_data_master_agent:av_lock
	wire          processor2_data_master_translator_avalon_universal_master_0_write;                // Processor2_data_master_translator:uav_write -> Processor2_data_master_agent:av_write
	wire   [31:0] processor2_data_master_translator_avalon_universal_master_0_writedata;            // Processor2_data_master_translator:uav_writedata -> Processor2_data_master_agent:av_writedata
	wire    [2:0] processor2_data_master_translator_avalon_universal_master_0_burstcount;           // Processor2_data_master_translator:uav_burstcount -> Processor2_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                // rsp_mux:src_valid -> Processor2_data_master_agent:rp_valid
	wire  [111:0] rsp_mux_src_data;                                                                 // rsp_mux:src_data -> Processor2_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                // Processor2_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [18:0] rsp_mux_src_channel;                                                              // rsp_mux:src_channel -> Processor2_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                        // rsp_mux:src_startofpacket -> Processor2_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                          // rsp_mux:src_endofpacket -> Processor2_data_master_agent:rp_endofpacket
	wire          processor1_data_master_translator_avalon_universal_master_0_waitrequest;          // Processor1_data_master_agent:av_waitrequest -> Processor1_data_master_translator:uav_waitrequest
	wire   [31:0] processor1_data_master_translator_avalon_universal_master_0_readdata;             // Processor1_data_master_agent:av_readdata -> Processor1_data_master_translator:uav_readdata
	wire          processor1_data_master_translator_avalon_universal_master_0_debugaccess;          // Processor1_data_master_translator:uav_debugaccess -> Processor1_data_master_agent:av_debugaccess
	wire   [31:0] processor1_data_master_translator_avalon_universal_master_0_address;              // Processor1_data_master_translator:uav_address -> Processor1_data_master_agent:av_address
	wire          processor1_data_master_translator_avalon_universal_master_0_read;                 // Processor1_data_master_translator:uav_read -> Processor1_data_master_agent:av_read
	wire    [3:0] processor1_data_master_translator_avalon_universal_master_0_byteenable;           // Processor1_data_master_translator:uav_byteenable -> Processor1_data_master_agent:av_byteenable
	wire          processor1_data_master_translator_avalon_universal_master_0_readdatavalid;        // Processor1_data_master_agent:av_readdatavalid -> Processor1_data_master_translator:uav_readdatavalid
	wire          processor1_data_master_translator_avalon_universal_master_0_lock;                 // Processor1_data_master_translator:uav_lock -> Processor1_data_master_agent:av_lock
	wire          processor1_data_master_translator_avalon_universal_master_0_write;                // Processor1_data_master_translator:uav_write -> Processor1_data_master_agent:av_write
	wire   [31:0] processor1_data_master_translator_avalon_universal_master_0_writedata;            // Processor1_data_master_translator:uav_writedata -> Processor1_data_master_agent:av_writedata
	wire    [2:0] processor1_data_master_translator_avalon_universal_master_0_burstcount;           // Processor1_data_master_translator:uav_burstcount -> Processor1_data_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                            // rsp_mux_001:src_valid -> Processor1_data_master_agent:rp_valid
	wire  [111:0] rsp_mux_001_src_data;                                                             // rsp_mux_001:src_data -> Processor1_data_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                            // Processor1_data_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [18:0] rsp_mux_001_src_channel;                                                          // rsp_mux_001:src_channel -> Processor1_data_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                    // rsp_mux_001:src_startofpacket -> Processor1_data_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                      // rsp_mux_001:src_endofpacket -> Processor1_data_master_agent:rp_endofpacket
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest;      // JTAG_to_FPGA_Bridge_master_agent:av_waitrequest -> JTAG_to_FPGA_Bridge_master_translator:uav_waitrequest
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata;         // JTAG_to_FPGA_Bridge_master_agent:av_readdata -> JTAG_to_FPGA_Bridge_master_translator:uav_readdata
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess;      // JTAG_to_FPGA_Bridge_master_translator:uav_debugaccess -> JTAG_to_FPGA_Bridge_master_agent:av_debugaccess
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address;          // JTAG_to_FPGA_Bridge_master_translator:uav_address -> JTAG_to_FPGA_Bridge_master_agent:av_address
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read;             // JTAG_to_FPGA_Bridge_master_translator:uav_read -> JTAG_to_FPGA_Bridge_master_agent:av_read
	wire    [3:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable;       // JTAG_to_FPGA_Bridge_master_translator:uav_byteenable -> JTAG_to_FPGA_Bridge_master_agent:av_byteenable
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid;    // JTAG_to_FPGA_Bridge_master_agent:av_readdatavalid -> JTAG_to_FPGA_Bridge_master_translator:uav_readdatavalid
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock;             // JTAG_to_FPGA_Bridge_master_translator:uav_lock -> JTAG_to_FPGA_Bridge_master_agent:av_lock
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write;            // JTAG_to_FPGA_Bridge_master_translator:uav_write -> JTAG_to_FPGA_Bridge_master_agent:av_write
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata;        // JTAG_to_FPGA_Bridge_master_translator:uav_writedata -> JTAG_to_FPGA_Bridge_master_agent:av_writedata
	wire    [2:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount;       // JTAG_to_FPGA_Bridge_master_translator:uav_burstcount -> JTAG_to_FPGA_Bridge_master_agent:av_burstcount
	wire          processor1_instruction_master_translator_avalon_universal_master_0_waitrequest;   // Processor1_instruction_master_agent:av_waitrequest -> Processor1_instruction_master_translator:uav_waitrequest
	wire   [31:0] processor1_instruction_master_translator_avalon_universal_master_0_readdata;      // Processor1_instruction_master_agent:av_readdata -> Processor1_instruction_master_translator:uav_readdata
	wire          processor1_instruction_master_translator_avalon_universal_master_0_debugaccess;   // Processor1_instruction_master_translator:uav_debugaccess -> Processor1_instruction_master_agent:av_debugaccess
	wire   [31:0] processor1_instruction_master_translator_avalon_universal_master_0_address;       // Processor1_instruction_master_translator:uav_address -> Processor1_instruction_master_agent:av_address
	wire          processor1_instruction_master_translator_avalon_universal_master_0_read;          // Processor1_instruction_master_translator:uav_read -> Processor1_instruction_master_agent:av_read
	wire    [3:0] processor1_instruction_master_translator_avalon_universal_master_0_byteenable;    // Processor1_instruction_master_translator:uav_byteenable -> Processor1_instruction_master_agent:av_byteenable
	wire          processor1_instruction_master_translator_avalon_universal_master_0_readdatavalid; // Processor1_instruction_master_agent:av_readdatavalid -> Processor1_instruction_master_translator:uav_readdatavalid
	wire          processor1_instruction_master_translator_avalon_universal_master_0_lock;          // Processor1_instruction_master_translator:uav_lock -> Processor1_instruction_master_agent:av_lock
	wire          processor1_instruction_master_translator_avalon_universal_master_0_write;         // Processor1_instruction_master_translator:uav_write -> Processor1_instruction_master_agent:av_write
	wire   [31:0] processor1_instruction_master_translator_avalon_universal_master_0_writedata;     // Processor1_instruction_master_translator:uav_writedata -> Processor1_instruction_master_agent:av_writedata
	wire    [2:0] processor1_instruction_master_translator_avalon_universal_master_0_burstcount;    // Processor1_instruction_master_translator:uav_burstcount -> Processor1_instruction_master_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                            // rsp_mux_003:src_valid -> Processor1_instruction_master_agent:rp_valid
	wire  [111:0] rsp_mux_003_src_data;                                                             // rsp_mux_003:src_data -> Processor1_instruction_master_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                            // Processor1_instruction_master_agent:rp_ready -> rsp_mux_003:src_ready
	wire   [18:0] rsp_mux_003_src_channel;                                                          // rsp_mux_003:src_channel -> Processor1_instruction_master_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                    // rsp_mux_003:src_startofpacket -> Processor1_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                      // rsp_mux_003:src_endofpacket -> Processor1_instruction_master_agent:rp_endofpacket
	wire          processor2_instruction_master_translator_avalon_universal_master_0_waitrequest;   // Processor2_instruction_master_agent:av_waitrequest -> Processor2_instruction_master_translator:uav_waitrequest
	wire   [31:0] processor2_instruction_master_translator_avalon_universal_master_0_readdata;      // Processor2_instruction_master_agent:av_readdata -> Processor2_instruction_master_translator:uav_readdata
	wire          processor2_instruction_master_translator_avalon_universal_master_0_debugaccess;   // Processor2_instruction_master_translator:uav_debugaccess -> Processor2_instruction_master_agent:av_debugaccess
	wire   [31:0] processor2_instruction_master_translator_avalon_universal_master_0_address;       // Processor2_instruction_master_translator:uav_address -> Processor2_instruction_master_agent:av_address
	wire          processor2_instruction_master_translator_avalon_universal_master_0_read;          // Processor2_instruction_master_translator:uav_read -> Processor2_instruction_master_agent:av_read
	wire    [3:0] processor2_instruction_master_translator_avalon_universal_master_0_byteenable;    // Processor2_instruction_master_translator:uav_byteenable -> Processor2_instruction_master_agent:av_byteenable
	wire          processor2_instruction_master_translator_avalon_universal_master_0_readdatavalid; // Processor2_instruction_master_agent:av_readdatavalid -> Processor2_instruction_master_translator:uav_readdatavalid
	wire          processor2_instruction_master_translator_avalon_universal_master_0_lock;          // Processor2_instruction_master_translator:uav_lock -> Processor2_instruction_master_agent:av_lock
	wire          processor2_instruction_master_translator_avalon_universal_master_0_write;         // Processor2_instruction_master_translator:uav_write -> Processor2_instruction_master_agent:av_write
	wire   [31:0] processor2_instruction_master_translator_avalon_universal_master_0_writedata;     // Processor2_instruction_master_translator:uav_writedata -> Processor2_instruction_master_agent:av_writedata
	wire    [2:0] processor2_instruction_master_translator_avalon_universal_master_0_burstcount;    // Processor2_instruction_master_translator:uav_burstcount -> Processor2_instruction_master_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                            // rsp_mux_004:src_valid -> Processor2_instruction_master_agent:rp_valid
	wire  [111:0] rsp_mux_004_src_data;                                                             // rsp_mux_004:src_data -> Processor2_instruction_master_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                            // Processor2_instruction_master_agent:rp_ready -> rsp_mux_004:src_ready
	wire   [18:0] rsp_mux_004_src_channel;                                                          // rsp_mux_004:src_channel -> Processor2_instruction_master_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                    // rsp_mux_004:src_startofpacket -> Processor2_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                      // rsp_mux_004:src_endofpacket -> Processor2_instruction_master_agent:rp_endofpacket
	wire   [31:0] audio_subsystem_audio_slave_agent_m0_readdata;                                    // Audio_Subsystem_audio_slave_translator:uav_readdata -> Audio_Subsystem_audio_slave_agent:m0_readdata
	wire          audio_subsystem_audio_slave_agent_m0_waitrequest;                                 // Audio_Subsystem_audio_slave_translator:uav_waitrequest -> Audio_Subsystem_audio_slave_agent:m0_waitrequest
	wire          audio_subsystem_audio_slave_agent_m0_debugaccess;                                 // Audio_Subsystem_audio_slave_agent:m0_debugaccess -> Audio_Subsystem_audio_slave_translator:uav_debugaccess
	wire   [31:0] audio_subsystem_audio_slave_agent_m0_address;                                     // Audio_Subsystem_audio_slave_agent:m0_address -> Audio_Subsystem_audio_slave_translator:uav_address
	wire    [3:0] audio_subsystem_audio_slave_agent_m0_byteenable;                                  // Audio_Subsystem_audio_slave_agent:m0_byteenable -> Audio_Subsystem_audio_slave_translator:uav_byteenable
	wire          audio_subsystem_audio_slave_agent_m0_read;                                        // Audio_Subsystem_audio_slave_agent:m0_read -> Audio_Subsystem_audio_slave_translator:uav_read
	wire          audio_subsystem_audio_slave_agent_m0_readdatavalid;                               // Audio_Subsystem_audio_slave_translator:uav_readdatavalid -> Audio_Subsystem_audio_slave_agent:m0_readdatavalid
	wire          audio_subsystem_audio_slave_agent_m0_lock;                                        // Audio_Subsystem_audio_slave_agent:m0_lock -> Audio_Subsystem_audio_slave_translator:uav_lock
	wire   [31:0] audio_subsystem_audio_slave_agent_m0_writedata;                                   // Audio_Subsystem_audio_slave_agent:m0_writedata -> Audio_Subsystem_audio_slave_translator:uav_writedata
	wire          audio_subsystem_audio_slave_agent_m0_write;                                       // Audio_Subsystem_audio_slave_agent:m0_write -> Audio_Subsystem_audio_slave_translator:uav_write
	wire    [2:0] audio_subsystem_audio_slave_agent_m0_burstcount;                                  // Audio_Subsystem_audio_slave_agent:m0_burstcount -> Audio_Subsystem_audio_slave_translator:uav_burstcount
	wire          audio_subsystem_audio_slave_agent_rf_source_valid;                                // Audio_Subsystem_audio_slave_agent:rf_source_valid -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_valid
	wire  [112:0] audio_subsystem_audio_slave_agent_rf_source_data;                                 // Audio_Subsystem_audio_slave_agent:rf_source_data -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_data
	wire          audio_subsystem_audio_slave_agent_rf_source_ready;                                // Audio_Subsystem_audio_slave_agent_rsp_fifo:in_ready -> Audio_Subsystem_audio_slave_agent:rf_source_ready
	wire          audio_subsystem_audio_slave_agent_rf_source_startofpacket;                        // Audio_Subsystem_audio_slave_agent:rf_source_startofpacket -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_startofpacket
	wire          audio_subsystem_audio_slave_agent_rf_source_endofpacket;                          // Audio_Subsystem_audio_slave_agent:rf_source_endofpacket -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_endofpacket
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_valid;                             // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_valid -> Audio_Subsystem_audio_slave_agent:rf_sink_valid
	wire  [112:0] audio_subsystem_audio_slave_agent_rsp_fifo_out_data;                              // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_data -> Audio_Subsystem_audio_slave_agent:rf_sink_data
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_ready;                             // Audio_Subsystem_audio_slave_agent:rf_sink_ready -> Audio_Subsystem_audio_slave_agent_rsp_fifo:out_ready
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_startofpacket;                     // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_startofpacket -> Audio_Subsystem_audio_slave_agent:rf_sink_startofpacket
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_endofpacket;                       // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_endofpacket -> Audio_Subsystem_audio_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                // cmd_mux:src_valid -> Audio_Subsystem_audio_slave_agent:cp_valid
	wire  [111:0] cmd_mux_src_data;                                                                 // cmd_mux:src_data -> Audio_Subsystem_audio_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                // Audio_Subsystem_audio_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [18:0] cmd_mux_src_channel;                                                              // cmd_mux:src_channel -> Audio_Subsystem_audio_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                        // cmd_mux:src_startofpacket -> Audio_Subsystem_audio_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                          // cmd_mux:src_endofpacket -> Audio_Subsystem_audio_slave_agent:cp_endofpacket
	wire   [31:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdata;                           // JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_waitrequest;                        // JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_debugaccess;                        // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_address;                            // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_address -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_byteenable;                         // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_read;                               // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_read -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdatavalid;                      // JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_lock;                               // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_writedata;                          // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_write;                              // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_write -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_burstcount;                         // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_valid;                       // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [112:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_data;                        // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_ready;                       // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_startofpacket;               // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_endofpacket;                 // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_valid;                    // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_sink_valid
	wire  [112:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_data;                     // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_ready;                    // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;            // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;              // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                            // cmd_mux_001:src_valid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_valid
	wire  [111:0] cmd_mux_001_src_data;                                                             // cmd_mux_001:src_data -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                            // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [18:0] cmd_mux_001_src_channel;                                                          // cmd_mux_001:src_channel -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                    // cmd_mux_001:src_startofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                      // cmd_mux_001:src_endofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] expansion_jp5_avalon_parallel_port_slave_agent_m0_readdata;                       // Expansion_JP5_avalon_parallel_port_slave_translator:uav_readdata -> Expansion_JP5_avalon_parallel_port_slave_agent:m0_readdata
	wire          expansion_jp5_avalon_parallel_port_slave_agent_m0_waitrequest;                    // Expansion_JP5_avalon_parallel_port_slave_translator:uav_waitrequest -> Expansion_JP5_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          expansion_jp5_avalon_parallel_port_slave_agent_m0_debugaccess;                    // Expansion_JP5_avalon_parallel_port_slave_agent:m0_debugaccess -> Expansion_JP5_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [31:0] expansion_jp5_avalon_parallel_port_slave_agent_m0_address;                        // Expansion_JP5_avalon_parallel_port_slave_agent:m0_address -> Expansion_JP5_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] expansion_jp5_avalon_parallel_port_slave_agent_m0_byteenable;                     // Expansion_JP5_avalon_parallel_port_slave_agent:m0_byteenable -> Expansion_JP5_avalon_parallel_port_slave_translator:uav_byteenable
	wire          expansion_jp5_avalon_parallel_port_slave_agent_m0_read;                           // Expansion_JP5_avalon_parallel_port_slave_agent:m0_read -> Expansion_JP5_avalon_parallel_port_slave_translator:uav_read
	wire          expansion_jp5_avalon_parallel_port_slave_agent_m0_readdatavalid;                  // Expansion_JP5_avalon_parallel_port_slave_translator:uav_readdatavalid -> Expansion_JP5_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          expansion_jp5_avalon_parallel_port_slave_agent_m0_lock;                           // Expansion_JP5_avalon_parallel_port_slave_agent:m0_lock -> Expansion_JP5_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] expansion_jp5_avalon_parallel_port_slave_agent_m0_writedata;                      // Expansion_JP5_avalon_parallel_port_slave_agent:m0_writedata -> Expansion_JP5_avalon_parallel_port_slave_translator:uav_writedata
	wire          expansion_jp5_avalon_parallel_port_slave_agent_m0_write;                          // Expansion_JP5_avalon_parallel_port_slave_agent:m0_write -> Expansion_JP5_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] expansion_jp5_avalon_parallel_port_slave_agent_m0_burstcount;                     // Expansion_JP5_avalon_parallel_port_slave_agent:m0_burstcount -> Expansion_JP5_avalon_parallel_port_slave_translator:uav_burstcount
	wire          expansion_jp5_avalon_parallel_port_slave_agent_rf_source_valid;                   // Expansion_JP5_avalon_parallel_port_slave_agent:rf_source_valid -> Expansion_JP5_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire  [112:0] expansion_jp5_avalon_parallel_port_slave_agent_rf_source_data;                    // Expansion_JP5_avalon_parallel_port_slave_agent:rf_source_data -> Expansion_JP5_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          expansion_jp5_avalon_parallel_port_slave_agent_rf_source_ready;                   // Expansion_JP5_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> Expansion_JP5_avalon_parallel_port_slave_agent:rf_source_ready
	wire          expansion_jp5_avalon_parallel_port_slave_agent_rf_source_startofpacket;           // Expansion_JP5_avalon_parallel_port_slave_agent:rf_source_startofpacket -> Expansion_JP5_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          expansion_jp5_avalon_parallel_port_slave_agent_rf_source_endofpacket;             // Expansion_JP5_avalon_parallel_port_slave_agent:rf_source_endofpacket -> Expansion_JP5_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;                // Expansion_JP5_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> Expansion_JP5_avalon_parallel_port_slave_agent:rf_sink_valid
	wire  [112:0] expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo_out_data;                 // Expansion_JP5_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> Expansion_JP5_avalon_parallel_port_slave_agent:rf_sink_data
	wire          expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;                // Expansion_JP5_avalon_parallel_port_slave_agent:rf_sink_ready -> Expansion_JP5_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;        // Expansion_JP5_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> Expansion_JP5_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;          // Expansion_JP5_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> Expansion_JP5_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                            // cmd_mux_002:src_valid -> Expansion_JP5_avalon_parallel_port_slave_agent:cp_valid
	wire  [111:0] cmd_mux_002_src_data;                                                             // cmd_mux_002:src_data -> Expansion_JP5_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                            // Expansion_JP5_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [18:0] cmd_mux_002_src_channel;                                                          // cmd_mux_002:src_channel -> Expansion_JP5_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                    // cmd_mux_002:src_startofpacket -> Expansion_JP5_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                      // cmd_mux_002:src_endofpacket -> Expansion_JP5_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] pushbuttons_avalon_parallel_port_slave_agent_m0_readdata;                         // Pushbuttons_avalon_parallel_port_slave_translator:uav_readdata -> Pushbuttons_avalon_parallel_port_slave_agent:m0_readdata
	wire          pushbuttons_avalon_parallel_port_slave_agent_m0_waitrequest;                      // Pushbuttons_avalon_parallel_port_slave_translator:uav_waitrequest -> Pushbuttons_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          pushbuttons_avalon_parallel_port_slave_agent_m0_debugaccess;                      // Pushbuttons_avalon_parallel_port_slave_agent:m0_debugaccess -> Pushbuttons_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [31:0] pushbuttons_avalon_parallel_port_slave_agent_m0_address;                          // Pushbuttons_avalon_parallel_port_slave_agent:m0_address -> Pushbuttons_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] pushbuttons_avalon_parallel_port_slave_agent_m0_byteenable;                       // Pushbuttons_avalon_parallel_port_slave_agent:m0_byteenable -> Pushbuttons_avalon_parallel_port_slave_translator:uav_byteenable
	wire          pushbuttons_avalon_parallel_port_slave_agent_m0_read;                             // Pushbuttons_avalon_parallel_port_slave_agent:m0_read -> Pushbuttons_avalon_parallel_port_slave_translator:uav_read
	wire          pushbuttons_avalon_parallel_port_slave_agent_m0_readdatavalid;                    // Pushbuttons_avalon_parallel_port_slave_translator:uav_readdatavalid -> Pushbuttons_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          pushbuttons_avalon_parallel_port_slave_agent_m0_lock;                             // Pushbuttons_avalon_parallel_port_slave_agent:m0_lock -> Pushbuttons_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] pushbuttons_avalon_parallel_port_slave_agent_m0_writedata;                        // Pushbuttons_avalon_parallel_port_slave_agent:m0_writedata -> Pushbuttons_avalon_parallel_port_slave_translator:uav_writedata
	wire          pushbuttons_avalon_parallel_port_slave_agent_m0_write;                            // Pushbuttons_avalon_parallel_port_slave_agent:m0_write -> Pushbuttons_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] pushbuttons_avalon_parallel_port_slave_agent_m0_burstcount;                       // Pushbuttons_avalon_parallel_port_slave_agent:m0_burstcount -> Pushbuttons_avalon_parallel_port_slave_translator:uav_burstcount
	wire          pushbuttons_avalon_parallel_port_slave_agent_rf_source_valid;                     // Pushbuttons_avalon_parallel_port_slave_agent:rf_source_valid -> Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire  [112:0] pushbuttons_avalon_parallel_port_slave_agent_rf_source_data;                      // Pushbuttons_avalon_parallel_port_slave_agent:rf_source_data -> Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          pushbuttons_avalon_parallel_port_slave_agent_rf_source_ready;                     // Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> Pushbuttons_avalon_parallel_port_slave_agent:rf_source_ready
	wire          pushbuttons_avalon_parallel_port_slave_agent_rf_source_startofpacket;             // Pushbuttons_avalon_parallel_port_slave_agent:rf_source_startofpacket -> Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          pushbuttons_avalon_parallel_port_slave_agent_rf_source_endofpacket;               // Pushbuttons_avalon_parallel_port_slave_agent:rf_source_endofpacket -> Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;                  // Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> Pushbuttons_avalon_parallel_port_slave_agent:rf_sink_valid
	wire  [112:0] pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_data;                   // Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> Pushbuttons_avalon_parallel_port_slave_agent:rf_sink_data
	wire          pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;                  // Pushbuttons_avalon_parallel_port_slave_agent:rf_sink_ready -> Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;          // Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> Pushbuttons_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;            // Pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> Pushbuttons_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                            // cmd_mux_003:src_valid -> Pushbuttons_avalon_parallel_port_slave_agent:cp_valid
	wire  [111:0] cmd_mux_003_src_data;                                                             // cmd_mux_003:src_data -> Pushbuttons_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                            // Pushbuttons_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [18:0] cmd_mux_003_src_channel;                                                          // cmd_mux_003:src_channel -> Pushbuttons_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                    // cmd_mux_003:src_startofpacket -> Pushbuttons_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                      // cmd_mux_003:src_endofpacket -> Pushbuttons_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] serial_port_avalon_rs232_slave_agent_m0_readdata;                                 // Serial_Port_avalon_rs232_slave_translator:uav_readdata -> Serial_Port_avalon_rs232_slave_agent:m0_readdata
	wire          serial_port_avalon_rs232_slave_agent_m0_waitrequest;                              // Serial_Port_avalon_rs232_slave_translator:uav_waitrequest -> Serial_Port_avalon_rs232_slave_agent:m0_waitrequest
	wire          serial_port_avalon_rs232_slave_agent_m0_debugaccess;                              // Serial_Port_avalon_rs232_slave_agent:m0_debugaccess -> Serial_Port_avalon_rs232_slave_translator:uav_debugaccess
	wire   [31:0] serial_port_avalon_rs232_slave_agent_m0_address;                                  // Serial_Port_avalon_rs232_slave_agent:m0_address -> Serial_Port_avalon_rs232_slave_translator:uav_address
	wire    [3:0] serial_port_avalon_rs232_slave_agent_m0_byteenable;                               // Serial_Port_avalon_rs232_slave_agent:m0_byteenable -> Serial_Port_avalon_rs232_slave_translator:uav_byteenable
	wire          serial_port_avalon_rs232_slave_agent_m0_read;                                     // Serial_Port_avalon_rs232_slave_agent:m0_read -> Serial_Port_avalon_rs232_slave_translator:uav_read
	wire          serial_port_avalon_rs232_slave_agent_m0_readdatavalid;                            // Serial_Port_avalon_rs232_slave_translator:uav_readdatavalid -> Serial_Port_avalon_rs232_slave_agent:m0_readdatavalid
	wire          serial_port_avalon_rs232_slave_agent_m0_lock;                                     // Serial_Port_avalon_rs232_slave_agent:m0_lock -> Serial_Port_avalon_rs232_slave_translator:uav_lock
	wire   [31:0] serial_port_avalon_rs232_slave_agent_m0_writedata;                                // Serial_Port_avalon_rs232_slave_agent:m0_writedata -> Serial_Port_avalon_rs232_slave_translator:uav_writedata
	wire          serial_port_avalon_rs232_slave_agent_m0_write;                                    // Serial_Port_avalon_rs232_slave_agent:m0_write -> Serial_Port_avalon_rs232_slave_translator:uav_write
	wire    [2:0] serial_port_avalon_rs232_slave_agent_m0_burstcount;                               // Serial_Port_avalon_rs232_slave_agent:m0_burstcount -> Serial_Port_avalon_rs232_slave_translator:uav_burstcount
	wire          serial_port_avalon_rs232_slave_agent_rf_source_valid;                             // Serial_Port_avalon_rs232_slave_agent:rf_source_valid -> Serial_Port_avalon_rs232_slave_agent_rsp_fifo:in_valid
	wire  [112:0] serial_port_avalon_rs232_slave_agent_rf_source_data;                              // Serial_Port_avalon_rs232_slave_agent:rf_source_data -> Serial_Port_avalon_rs232_slave_agent_rsp_fifo:in_data
	wire          serial_port_avalon_rs232_slave_agent_rf_source_ready;                             // Serial_Port_avalon_rs232_slave_agent_rsp_fifo:in_ready -> Serial_Port_avalon_rs232_slave_agent:rf_source_ready
	wire          serial_port_avalon_rs232_slave_agent_rf_source_startofpacket;                     // Serial_Port_avalon_rs232_slave_agent:rf_source_startofpacket -> Serial_Port_avalon_rs232_slave_agent_rsp_fifo:in_startofpacket
	wire          serial_port_avalon_rs232_slave_agent_rf_source_endofpacket;                       // Serial_Port_avalon_rs232_slave_agent:rf_source_endofpacket -> Serial_Port_avalon_rs232_slave_agent_rsp_fifo:in_endofpacket
	wire          serial_port_avalon_rs232_slave_agent_rsp_fifo_out_valid;                          // Serial_Port_avalon_rs232_slave_agent_rsp_fifo:out_valid -> Serial_Port_avalon_rs232_slave_agent:rf_sink_valid
	wire  [112:0] serial_port_avalon_rs232_slave_agent_rsp_fifo_out_data;                           // Serial_Port_avalon_rs232_slave_agent_rsp_fifo:out_data -> Serial_Port_avalon_rs232_slave_agent:rf_sink_data
	wire          serial_port_avalon_rs232_slave_agent_rsp_fifo_out_ready;                          // Serial_Port_avalon_rs232_slave_agent:rf_sink_ready -> Serial_Port_avalon_rs232_slave_agent_rsp_fifo:out_ready
	wire          serial_port_avalon_rs232_slave_agent_rsp_fifo_out_startofpacket;                  // Serial_Port_avalon_rs232_slave_agent_rsp_fifo:out_startofpacket -> Serial_Port_avalon_rs232_slave_agent:rf_sink_startofpacket
	wire          serial_port_avalon_rs232_slave_agent_rsp_fifo_out_endofpacket;                    // Serial_Port_avalon_rs232_slave_agent_rsp_fifo:out_endofpacket -> Serial_Port_avalon_rs232_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                            // cmd_mux_004:src_valid -> Serial_Port_avalon_rs232_slave_agent:cp_valid
	wire  [111:0] cmd_mux_004_src_data;                                                             // cmd_mux_004:src_data -> Serial_Port_avalon_rs232_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                            // Serial_Port_avalon_rs232_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [18:0] cmd_mux_004_src_channel;                                                          // cmd_mux_004:src_channel -> Serial_Port_avalon_rs232_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                    // cmd_mux_004:src_startofpacket -> Serial_Port_avalon_rs232_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                      // cmd_mux_004:src_endofpacket -> Serial_Port_avalon_rs232_slave_agent:cp_endofpacket
	wire   [31:0] camerad5m_0_camera_slave_agent_m0_readdata;                                       // CameraD5M_0_camera_slave_translator:uav_readdata -> CameraD5M_0_camera_slave_agent:m0_readdata
	wire          camerad5m_0_camera_slave_agent_m0_waitrequest;                                    // CameraD5M_0_camera_slave_translator:uav_waitrequest -> CameraD5M_0_camera_slave_agent:m0_waitrequest
	wire          camerad5m_0_camera_slave_agent_m0_debugaccess;                                    // CameraD5M_0_camera_slave_agent:m0_debugaccess -> CameraD5M_0_camera_slave_translator:uav_debugaccess
	wire   [31:0] camerad5m_0_camera_slave_agent_m0_address;                                        // CameraD5M_0_camera_slave_agent:m0_address -> CameraD5M_0_camera_slave_translator:uav_address
	wire    [3:0] camerad5m_0_camera_slave_agent_m0_byteenable;                                     // CameraD5M_0_camera_slave_agent:m0_byteenable -> CameraD5M_0_camera_slave_translator:uav_byteenable
	wire          camerad5m_0_camera_slave_agent_m0_read;                                           // CameraD5M_0_camera_slave_agent:m0_read -> CameraD5M_0_camera_slave_translator:uav_read
	wire          camerad5m_0_camera_slave_agent_m0_readdatavalid;                                  // CameraD5M_0_camera_slave_translator:uav_readdatavalid -> CameraD5M_0_camera_slave_agent:m0_readdatavalid
	wire          camerad5m_0_camera_slave_agent_m0_lock;                                           // CameraD5M_0_camera_slave_agent:m0_lock -> CameraD5M_0_camera_slave_translator:uav_lock
	wire   [31:0] camerad5m_0_camera_slave_agent_m0_writedata;                                      // CameraD5M_0_camera_slave_agent:m0_writedata -> CameraD5M_0_camera_slave_translator:uav_writedata
	wire          camerad5m_0_camera_slave_agent_m0_write;                                          // CameraD5M_0_camera_slave_agent:m0_write -> CameraD5M_0_camera_slave_translator:uav_write
	wire    [2:0] camerad5m_0_camera_slave_agent_m0_burstcount;                                     // CameraD5M_0_camera_slave_agent:m0_burstcount -> CameraD5M_0_camera_slave_translator:uav_burstcount
	wire          camerad5m_0_camera_slave_agent_rf_source_valid;                                   // CameraD5M_0_camera_slave_agent:rf_source_valid -> CameraD5M_0_camera_slave_agent_rsp_fifo:in_valid
	wire  [112:0] camerad5m_0_camera_slave_agent_rf_source_data;                                    // CameraD5M_0_camera_slave_agent:rf_source_data -> CameraD5M_0_camera_slave_agent_rsp_fifo:in_data
	wire          camerad5m_0_camera_slave_agent_rf_source_ready;                                   // CameraD5M_0_camera_slave_agent_rsp_fifo:in_ready -> CameraD5M_0_camera_slave_agent:rf_source_ready
	wire          camerad5m_0_camera_slave_agent_rf_source_startofpacket;                           // CameraD5M_0_camera_slave_agent:rf_source_startofpacket -> CameraD5M_0_camera_slave_agent_rsp_fifo:in_startofpacket
	wire          camerad5m_0_camera_slave_agent_rf_source_endofpacket;                             // CameraD5M_0_camera_slave_agent:rf_source_endofpacket -> CameraD5M_0_camera_slave_agent_rsp_fifo:in_endofpacket
	wire          camerad5m_0_camera_slave_agent_rsp_fifo_out_valid;                                // CameraD5M_0_camera_slave_agent_rsp_fifo:out_valid -> CameraD5M_0_camera_slave_agent:rf_sink_valid
	wire  [112:0] camerad5m_0_camera_slave_agent_rsp_fifo_out_data;                                 // CameraD5M_0_camera_slave_agent_rsp_fifo:out_data -> CameraD5M_0_camera_slave_agent:rf_sink_data
	wire          camerad5m_0_camera_slave_agent_rsp_fifo_out_ready;                                // CameraD5M_0_camera_slave_agent:rf_sink_ready -> CameraD5M_0_camera_slave_agent_rsp_fifo:out_ready
	wire          camerad5m_0_camera_slave_agent_rsp_fifo_out_startofpacket;                        // CameraD5M_0_camera_slave_agent_rsp_fifo:out_startofpacket -> CameraD5M_0_camera_slave_agent:rf_sink_startofpacket
	wire          camerad5m_0_camera_slave_agent_rsp_fifo_out_endofpacket;                          // CameraD5M_0_camera_slave_agent_rsp_fifo:out_endofpacket -> CameraD5M_0_camera_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                            // cmd_mux_005:src_valid -> CameraD5M_0_camera_slave_agent:cp_valid
	wire  [111:0] cmd_mux_005_src_data;                                                             // cmd_mux_005:src_data -> CameraD5M_0_camera_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                            // CameraD5M_0_camera_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [18:0] cmd_mux_005_src_channel;                                                          // cmd_mux_005:src_channel -> CameraD5M_0_camera_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                    // cmd_mux_005:src_startofpacket -> CameraD5M_0_camera_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                      // cmd_mux_005:src_endofpacket -> CameraD5M_0_camera_slave_agent:cp_endofpacket
	wire   [31:0] processor2_debug_mem_slave_agent_m0_readdata;                                     // Processor2_debug_mem_slave_translator:uav_readdata -> Processor2_debug_mem_slave_agent:m0_readdata
	wire          processor2_debug_mem_slave_agent_m0_waitrequest;                                  // Processor2_debug_mem_slave_translator:uav_waitrequest -> Processor2_debug_mem_slave_agent:m0_waitrequest
	wire          processor2_debug_mem_slave_agent_m0_debugaccess;                                  // Processor2_debug_mem_slave_agent:m0_debugaccess -> Processor2_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] processor2_debug_mem_slave_agent_m0_address;                                      // Processor2_debug_mem_slave_agent:m0_address -> Processor2_debug_mem_slave_translator:uav_address
	wire    [3:0] processor2_debug_mem_slave_agent_m0_byteenable;                                   // Processor2_debug_mem_slave_agent:m0_byteenable -> Processor2_debug_mem_slave_translator:uav_byteenable
	wire          processor2_debug_mem_slave_agent_m0_read;                                         // Processor2_debug_mem_slave_agent:m0_read -> Processor2_debug_mem_slave_translator:uav_read
	wire          processor2_debug_mem_slave_agent_m0_readdatavalid;                                // Processor2_debug_mem_slave_translator:uav_readdatavalid -> Processor2_debug_mem_slave_agent:m0_readdatavalid
	wire          processor2_debug_mem_slave_agent_m0_lock;                                         // Processor2_debug_mem_slave_agent:m0_lock -> Processor2_debug_mem_slave_translator:uav_lock
	wire   [31:0] processor2_debug_mem_slave_agent_m0_writedata;                                    // Processor2_debug_mem_slave_agent:m0_writedata -> Processor2_debug_mem_slave_translator:uav_writedata
	wire          processor2_debug_mem_slave_agent_m0_write;                                        // Processor2_debug_mem_slave_agent:m0_write -> Processor2_debug_mem_slave_translator:uav_write
	wire    [2:0] processor2_debug_mem_slave_agent_m0_burstcount;                                   // Processor2_debug_mem_slave_agent:m0_burstcount -> Processor2_debug_mem_slave_translator:uav_burstcount
	wire          processor2_debug_mem_slave_agent_rf_source_valid;                                 // Processor2_debug_mem_slave_agent:rf_source_valid -> Processor2_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [112:0] processor2_debug_mem_slave_agent_rf_source_data;                                  // Processor2_debug_mem_slave_agent:rf_source_data -> Processor2_debug_mem_slave_agent_rsp_fifo:in_data
	wire          processor2_debug_mem_slave_agent_rf_source_ready;                                 // Processor2_debug_mem_slave_agent_rsp_fifo:in_ready -> Processor2_debug_mem_slave_agent:rf_source_ready
	wire          processor2_debug_mem_slave_agent_rf_source_startofpacket;                         // Processor2_debug_mem_slave_agent:rf_source_startofpacket -> Processor2_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          processor2_debug_mem_slave_agent_rf_source_endofpacket;                           // Processor2_debug_mem_slave_agent:rf_source_endofpacket -> Processor2_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          processor2_debug_mem_slave_agent_rsp_fifo_out_valid;                              // Processor2_debug_mem_slave_agent_rsp_fifo:out_valid -> Processor2_debug_mem_slave_agent:rf_sink_valid
	wire  [112:0] processor2_debug_mem_slave_agent_rsp_fifo_out_data;                               // Processor2_debug_mem_slave_agent_rsp_fifo:out_data -> Processor2_debug_mem_slave_agent:rf_sink_data
	wire          processor2_debug_mem_slave_agent_rsp_fifo_out_ready;                              // Processor2_debug_mem_slave_agent:rf_sink_ready -> Processor2_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          processor2_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // Processor2_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> Processor2_debug_mem_slave_agent:rf_sink_startofpacket
	wire          processor2_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // Processor2_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> Processor2_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                            // cmd_mux_006:src_valid -> Processor2_debug_mem_slave_agent:cp_valid
	wire  [111:0] cmd_mux_006_src_data;                                                             // cmd_mux_006:src_data -> Processor2_debug_mem_slave_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                            // Processor2_debug_mem_slave_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [18:0] cmd_mux_006_src_channel;                                                          // cmd_mux_006:src_channel -> Processor2_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                    // cmd_mux_006:src_startofpacket -> Processor2_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                      // cmd_mux_006:src_endofpacket -> Processor2_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] interval_timer_s1_agent_m0_readdata;                                              // Interval_Timer_s1_translator:uav_readdata -> Interval_Timer_s1_agent:m0_readdata
	wire          interval_timer_s1_agent_m0_waitrequest;                                           // Interval_Timer_s1_translator:uav_waitrequest -> Interval_Timer_s1_agent:m0_waitrequest
	wire          interval_timer_s1_agent_m0_debugaccess;                                           // Interval_Timer_s1_agent:m0_debugaccess -> Interval_Timer_s1_translator:uav_debugaccess
	wire   [31:0] interval_timer_s1_agent_m0_address;                                               // Interval_Timer_s1_agent:m0_address -> Interval_Timer_s1_translator:uav_address
	wire    [3:0] interval_timer_s1_agent_m0_byteenable;                                            // Interval_Timer_s1_agent:m0_byteenable -> Interval_Timer_s1_translator:uav_byteenable
	wire          interval_timer_s1_agent_m0_read;                                                  // Interval_Timer_s1_agent:m0_read -> Interval_Timer_s1_translator:uav_read
	wire          interval_timer_s1_agent_m0_readdatavalid;                                         // Interval_Timer_s1_translator:uav_readdatavalid -> Interval_Timer_s1_agent:m0_readdatavalid
	wire          interval_timer_s1_agent_m0_lock;                                                  // Interval_Timer_s1_agent:m0_lock -> Interval_Timer_s1_translator:uav_lock
	wire   [31:0] interval_timer_s1_agent_m0_writedata;                                             // Interval_Timer_s1_agent:m0_writedata -> Interval_Timer_s1_translator:uav_writedata
	wire          interval_timer_s1_agent_m0_write;                                                 // Interval_Timer_s1_agent:m0_write -> Interval_Timer_s1_translator:uav_write
	wire    [2:0] interval_timer_s1_agent_m0_burstcount;                                            // Interval_Timer_s1_agent:m0_burstcount -> Interval_Timer_s1_translator:uav_burstcount
	wire          interval_timer_s1_agent_rf_source_valid;                                          // Interval_Timer_s1_agent:rf_source_valid -> Interval_Timer_s1_agent_rsp_fifo:in_valid
	wire  [112:0] interval_timer_s1_agent_rf_source_data;                                           // Interval_Timer_s1_agent:rf_source_data -> Interval_Timer_s1_agent_rsp_fifo:in_data
	wire          interval_timer_s1_agent_rf_source_ready;                                          // Interval_Timer_s1_agent_rsp_fifo:in_ready -> Interval_Timer_s1_agent:rf_source_ready
	wire          interval_timer_s1_agent_rf_source_startofpacket;                                  // Interval_Timer_s1_agent:rf_source_startofpacket -> Interval_Timer_s1_agent_rsp_fifo:in_startofpacket
	wire          interval_timer_s1_agent_rf_source_endofpacket;                                    // Interval_Timer_s1_agent:rf_source_endofpacket -> Interval_Timer_s1_agent_rsp_fifo:in_endofpacket
	wire          interval_timer_s1_agent_rsp_fifo_out_valid;                                       // Interval_Timer_s1_agent_rsp_fifo:out_valid -> Interval_Timer_s1_agent:rf_sink_valid
	wire  [112:0] interval_timer_s1_agent_rsp_fifo_out_data;                                        // Interval_Timer_s1_agent_rsp_fifo:out_data -> Interval_Timer_s1_agent:rf_sink_data
	wire          interval_timer_s1_agent_rsp_fifo_out_ready;                                       // Interval_Timer_s1_agent:rf_sink_ready -> Interval_Timer_s1_agent_rsp_fifo:out_ready
	wire          interval_timer_s1_agent_rsp_fifo_out_startofpacket;                               // Interval_Timer_s1_agent_rsp_fifo:out_startofpacket -> Interval_Timer_s1_agent:rf_sink_startofpacket
	wire          interval_timer_s1_agent_rsp_fifo_out_endofpacket;                                 // Interval_Timer_s1_agent_rsp_fifo:out_endofpacket -> Interval_Timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                            // cmd_mux_007:src_valid -> Interval_Timer_s1_agent:cp_valid
	wire  [111:0] cmd_mux_007_src_data;                                                             // cmd_mux_007:src_data -> Interval_Timer_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                            // Interval_Timer_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [18:0] cmd_mux_007_src_channel;                                                          // cmd_mux_007:src_channel -> Interval_Timer_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                    // cmd_mux_007:src_startofpacket -> Interval_Timer_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                      // cmd_mux_007:src_endofpacket -> Interval_Timer_s1_agent:cp_endofpacket
	wire   [31:0] sdram_s1_agent_m0_readdata;                                                       // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                    // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                    // SDRAM_s1_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                        // SDRAM_s1_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire    [3:0] sdram_s1_agent_m0_byteenable;                                                     // SDRAM_s1_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                           // SDRAM_s1_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                  // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                           // SDRAM_s1_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire   [31:0] sdram_s1_agent_m0_writedata;                                                      // SDRAM_s1_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                          // SDRAM_s1_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire    [2:0] sdram_s1_agent_m0_burstcount;                                                     // SDRAM_s1_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                   // SDRAM_s1_agent:rf_source_valid -> SDRAM_s1_agent_rsp_fifo:in_valid
	wire  [112:0] sdram_s1_agent_rf_source_data;                                                    // SDRAM_s1_agent:rf_source_data -> SDRAM_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                   // SDRAM_s1_agent_rsp_fifo:in_ready -> SDRAM_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                           // SDRAM_s1_agent:rf_source_startofpacket -> SDRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                             // SDRAM_s1_agent:rf_source_endofpacket -> SDRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                // SDRAM_s1_agent_rsp_fifo:out_valid -> SDRAM_s1_agent:rf_sink_valid
	wire  [112:0] sdram_s1_agent_rsp_fifo_out_data;                                                 // SDRAM_s1_agent_rsp_fifo:out_data -> SDRAM_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                // SDRAM_s1_agent:rf_sink_ready -> SDRAM_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                        // SDRAM_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                          // SDRAM_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                            // cmd_mux_008:src_valid -> SDRAM_s1_agent:cp_valid
	wire  [111:0] cmd_mux_008_src_data;                                                             // cmd_mux_008:src_data -> SDRAM_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                            // SDRAM_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [18:0] cmd_mux_008_src_channel;                                                          // cmd_mux_008:src_channel -> SDRAM_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                    // cmd_mux_008:src_startofpacket -> SDRAM_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                      // cmd_mux_008:src_endofpacket -> SDRAM_s1_agent:cp_endofpacket
	wire   [31:0] av_config_avalon_av_config_slave_agent_m0_readdata;                               // AV_Config_avalon_av_config_slave_translator:uav_readdata -> AV_Config_avalon_av_config_slave_agent:m0_readdata
	wire          av_config_avalon_av_config_slave_agent_m0_waitrequest;                            // AV_Config_avalon_av_config_slave_translator:uav_waitrequest -> AV_Config_avalon_av_config_slave_agent:m0_waitrequest
	wire          av_config_avalon_av_config_slave_agent_m0_debugaccess;                            // AV_Config_avalon_av_config_slave_agent:m0_debugaccess -> AV_Config_avalon_av_config_slave_translator:uav_debugaccess
	wire   [31:0] av_config_avalon_av_config_slave_agent_m0_address;                                // AV_Config_avalon_av_config_slave_agent:m0_address -> AV_Config_avalon_av_config_slave_translator:uav_address
	wire    [3:0] av_config_avalon_av_config_slave_agent_m0_byteenable;                             // AV_Config_avalon_av_config_slave_agent:m0_byteenable -> AV_Config_avalon_av_config_slave_translator:uav_byteenable
	wire          av_config_avalon_av_config_slave_agent_m0_read;                                   // AV_Config_avalon_av_config_slave_agent:m0_read -> AV_Config_avalon_av_config_slave_translator:uav_read
	wire          av_config_avalon_av_config_slave_agent_m0_readdatavalid;                          // AV_Config_avalon_av_config_slave_translator:uav_readdatavalid -> AV_Config_avalon_av_config_slave_agent:m0_readdatavalid
	wire          av_config_avalon_av_config_slave_agent_m0_lock;                                   // AV_Config_avalon_av_config_slave_agent:m0_lock -> AV_Config_avalon_av_config_slave_translator:uav_lock
	wire   [31:0] av_config_avalon_av_config_slave_agent_m0_writedata;                              // AV_Config_avalon_av_config_slave_agent:m0_writedata -> AV_Config_avalon_av_config_slave_translator:uav_writedata
	wire          av_config_avalon_av_config_slave_agent_m0_write;                                  // AV_Config_avalon_av_config_slave_agent:m0_write -> AV_Config_avalon_av_config_slave_translator:uav_write
	wire    [2:0] av_config_avalon_av_config_slave_agent_m0_burstcount;                             // AV_Config_avalon_av_config_slave_agent:m0_burstcount -> AV_Config_avalon_av_config_slave_translator:uav_burstcount
	wire          av_config_avalon_av_config_slave_agent_rf_source_valid;                           // AV_Config_avalon_av_config_slave_agent:rf_source_valid -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_valid
	wire  [112:0] av_config_avalon_av_config_slave_agent_rf_source_data;                            // AV_Config_avalon_av_config_slave_agent:rf_source_data -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_data
	wire          av_config_avalon_av_config_slave_agent_rf_source_ready;                           // AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_ready -> AV_Config_avalon_av_config_slave_agent:rf_source_ready
	wire          av_config_avalon_av_config_slave_agent_rf_source_startofpacket;                   // AV_Config_avalon_av_config_slave_agent:rf_source_startofpacket -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rf_source_endofpacket;                     // AV_Config_avalon_av_config_slave_agent:rf_source_endofpacket -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid;                        // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_valid -> AV_Config_avalon_av_config_slave_agent:rf_sink_valid
	wire  [112:0] av_config_avalon_av_config_slave_agent_rsp_fifo_out_data;                         // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_data -> AV_Config_avalon_av_config_slave_agent:rf_sink_data
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready;                        // AV_Config_avalon_av_config_slave_agent:rf_sink_ready -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_ready
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket;                // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_startofpacket -> AV_Config_avalon_av_config_slave_agent:rf_sink_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket;                  // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_endofpacket -> AV_Config_avalon_av_config_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                            // cmd_mux_009:src_valid -> AV_Config_avalon_av_config_slave_agent:cp_valid
	wire  [111:0] cmd_mux_009_src_data;                                                             // cmd_mux_009:src_data -> AV_Config_avalon_av_config_slave_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                            // AV_Config_avalon_av_config_slave_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [18:0] cmd_mux_009_src_channel;                                                          // cmd_mux_009:src_channel -> AV_Config_avalon_av_config_slave_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                    // cmd_mux_009:src_startofpacket -> AV_Config_avalon_av_config_slave_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                      // cmd_mux_009:src_endofpacket -> AV_Config_avalon_av_config_slave_agent:cp_endofpacket
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                    // JTAG_UART_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                 // JTAG_UART_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                 // JTAG_UART_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                     // JTAG_UART_avalon_jtag_slave_agent:m0_address -> JTAG_UART_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                  // JTAG_UART_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                        // JTAG_UART_avalon_jtag_slave_agent:m0_read -> JTAG_UART_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                               // JTAG_UART_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                        // JTAG_UART_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                   // JTAG_UART_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                       // JTAG_UART_avalon_jtag_slave_agent:m0_write -> JTAG_UART_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                  // JTAG_UART_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                // JTAG_UART_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [112:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                 // JTAG_UART_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                        // JTAG_UART_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                          // JTAG_UART_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_valid
	wire  [112:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // JTAG_UART_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                            // cmd_mux_010:src_valid -> JTAG_UART_avalon_jtag_slave_agent:cp_valid
	wire  [111:0] cmd_mux_010_src_data;                                                             // cmd_mux_010:src_data -> JTAG_UART_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                            // JTAG_UART_avalon_jtag_slave_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [18:0] cmd_mux_010_src_channel;                                                          // cmd_mux_010:src_channel -> JTAG_UART_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                    // cmd_mux_010:src_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                      // cmd_mux_010:src_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] red_leds_avalon_parallel_port_slave_agent_m0_readdata;                            // Red_LEDs_avalon_parallel_port_slave_translator:uav_readdata -> Red_LEDs_avalon_parallel_port_slave_agent:m0_readdata
	wire          red_leds_avalon_parallel_port_slave_agent_m0_waitrequest;                         // Red_LEDs_avalon_parallel_port_slave_translator:uav_waitrequest -> Red_LEDs_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          red_leds_avalon_parallel_port_slave_agent_m0_debugaccess;                         // Red_LEDs_avalon_parallel_port_slave_agent:m0_debugaccess -> Red_LEDs_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [31:0] red_leds_avalon_parallel_port_slave_agent_m0_address;                             // Red_LEDs_avalon_parallel_port_slave_agent:m0_address -> Red_LEDs_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] red_leds_avalon_parallel_port_slave_agent_m0_byteenable;                          // Red_LEDs_avalon_parallel_port_slave_agent:m0_byteenable -> Red_LEDs_avalon_parallel_port_slave_translator:uav_byteenable
	wire          red_leds_avalon_parallel_port_slave_agent_m0_read;                                // Red_LEDs_avalon_parallel_port_slave_agent:m0_read -> Red_LEDs_avalon_parallel_port_slave_translator:uav_read
	wire          red_leds_avalon_parallel_port_slave_agent_m0_readdatavalid;                       // Red_LEDs_avalon_parallel_port_slave_translator:uav_readdatavalid -> Red_LEDs_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          red_leds_avalon_parallel_port_slave_agent_m0_lock;                                // Red_LEDs_avalon_parallel_port_slave_agent:m0_lock -> Red_LEDs_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] red_leds_avalon_parallel_port_slave_agent_m0_writedata;                           // Red_LEDs_avalon_parallel_port_slave_agent:m0_writedata -> Red_LEDs_avalon_parallel_port_slave_translator:uav_writedata
	wire          red_leds_avalon_parallel_port_slave_agent_m0_write;                               // Red_LEDs_avalon_parallel_port_slave_agent:m0_write -> Red_LEDs_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] red_leds_avalon_parallel_port_slave_agent_m0_burstcount;                          // Red_LEDs_avalon_parallel_port_slave_agent:m0_burstcount -> Red_LEDs_avalon_parallel_port_slave_translator:uav_burstcount
	wire          red_leds_avalon_parallel_port_slave_agent_rf_source_valid;                        // Red_LEDs_avalon_parallel_port_slave_agent:rf_source_valid -> Red_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire  [112:0] red_leds_avalon_parallel_port_slave_agent_rf_source_data;                         // Red_LEDs_avalon_parallel_port_slave_agent:rf_source_data -> Red_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          red_leds_avalon_parallel_port_slave_agent_rf_source_ready;                        // Red_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> Red_LEDs_avalon_parallel_port_slave_agent:rf_source_ready
	wire          red_leds_avalon_parallel_port_slave_agent_rf_source_startofpacket;                // Red_LEDs_avalon_parallel_port_slave_agent:rf_source_startofpacket -> Red_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          red_leds_avalon_parallel_port_slave_agent_rf_source_endofpacket;                  // Red_LEDs_avalon_parallel_port_slave_agent:rf_source_endofpacket -> Red_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          red_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;                     // Red_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> Red_LEDs_avalon_parallel_port_slave_agent:rf_sink_valid
	wire  [112:0] red_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_data;                      // Red_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> Red_LEDs_avalon_parallel_port_slave_agent:rf_sink_data
	wire          red_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;                     // Red_LEDs_avalon_parallel_port_slave_agent:rf_sink_ready -> Red_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          red_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;             // Red_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> Red_LEDs_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          red_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;               // Red_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> Red_LEDs_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                            // cmd_mux_011:src_valid -> Red_LEDs_avalon_parallel_port_slave_agent:cp_valid
	wire  [111:0] cmd_mux_011_src_data;                                                             // cmd_mux_011:src_data -> Red_LEDs_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                            // Red_LEDs_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [18:0] cmd_mux_011_src_channel;                                                          // cmd_mux_011:src_channel -> Red_LEDs_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                    // cmd_mux_011:src_startofpacket -> Red_LEDs_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                      // cmd_mux_011:src_endofpacket -> Red_LEDs_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] green_leds_avalon_parallel_port_slave_agent_m0_readdata;                          // Green_LEDs_avalon_parallel_port_slave_translator:uav_readdata -> Green_LEDs_avalon_parallel_port_slave_agent:m0_readdata
	wire          green_leds_avalon_parallel_port_slave_agent_m0_waitrequest;                       // Green_LEDs_avalon_parallel_port_slave_translator:uav_waitrequest -> Green_LEDs_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          green_leds_avalon_parallel_port_slave_agent_m0_debugaccess;                       // Green_LEDs_avalon_parallel_port_slave_agent:m0_debugaccess -> Green_LEDs_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [31:0] green_leds_avalon_parallel_port_slave_agent_m0_address;                           // Green_LEDs_avalon_parallel_port_slave_agent:m0_address -> Green_LEDs_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] green_leds_avalon_parallel_port_slave_agent_m0_byteenable;                        // Green_LEDs_avalon_parallel_port_slave_agent:m0_byteenable -> Green_LEDs_avalon_parallel_port_slave_translator:uav_byteenable
	wire          green_leds_avalon_parallel_port_slave_agent_m0_read;                              // Green_LEDs_avalon_parallel_port_slave_agent:m0_read -> Green_LEDs_avalon_parallel_port_slave_translator:uav_read
	wire          green_leds_avalon_parallel_port_slave_agent_m0_readdatavalid;                     // Green_LEDs_avalon_parallel_port_slave_translator:uav_readdatavalid -> Green_LEDs_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          green_leds_avalon_parallel_port_slave_agent_m0_lock;                              // Green_LEDs_avalon_parallel_port_slave_agent:m0_lock -> Green_LEDs_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] green_leds_avalon_parallel_port_slave_agent_m0_writedata;                         // Green_LEDs_avalon_parallel_port_slave_agent:m0_writedata -> Green_LEDs_avalon_parallel_port_slave_translator:uav_writedata
	wire          green_leds_avalon_parallel_port_slave_agent_m0_write;                             // Green_LEDs_avalon_parallel_port_slave_agent:m0_write -> Green_LEDs_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] green_leds_avalon_parallel_port_slave_agent_m0_burstcount;                        // Green_LEDs_avalon_parallel_port_slave_agent:m0_burstcount -> Green_LEDs_avalon_parallel_port_slave_translator:uav_burstcount
	wire          green_leds_avalon_parallel_port_slave_agent_rf_source_valid;                      // Green_LEDs_avalon_parallel_port_slave_agent:rf_source_valid -> Green_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire  [112:0] green_leds_avalon_parallel_port_slave_agent_rf_source_data;                       // Green_LEDs_avalon_parallel_port_slave_agent:rf_source_data -> Green_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          green_leds_avalon_parallel_port_slave_agent_rf_source_ready;                      // Green_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> Green_LEDs_avalon_parallel_port_slave_agent:rf_source_ready
	wire          green_leds_avalon_parallel_port_slave_agent_rf_source_startofpacket;              // Green_LEDs_avalon_parallel_port_slave_agent:rf_source_startofpacket -> Green_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          green_leds_avalon_parallel_port_slave_agent_rf_source_endofpacket;                // Green_LEDs_avalon_parallel_port_slave_agent:rf_source_endofpacket -> Green_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          green_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;                   // Green_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> Green_LEDs_avalon_parallel_port_slave_agent:rf_sink_valid
	wire  [112:0] green_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_data;                    // Green_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> Green_LEDs_avalon_parallel_port_slave_agent:rf_sink_data
	wire          green_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;                   // Green_LEDs_avalon_parallel_port_slave_agent:rf_sink_ready -> Green_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          green_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;           // Green_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> Green_LEDs_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          green_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;             // Green_LEDs_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> Green_LEDs_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                            // cmd_mux_012:src_valid -> Green_LEDs_avalon_parallel_port_slave_agent:cp_valid
	wire  [111:0] cmd_mux_012_src_data;                                                             // cmd_mux_012:src_data -> Green_LEDs_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                            // Green_LEDs_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [18:0] cmd_mux_012_src_channel;                                                          // cmd_mux_012:src_channel -> Green_LEDs_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                    // cmd_mux_012:src_startofpacket -> Green_LEDs_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                      // cmd_mux_012:src_endofpacket -> Green_LEDs_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [31:0] slider_switches_avalon_parallel_port_slave_agent_m0_readdata;                     // Slider_Switches_avalon_parallel_port_slave_translator:uav_readdata -> Slider_Switches_avalon_parallel_port_slave_agent:m0_readdata
	wire          slider_switches_avalon_parallel_port_slave_agent_m0_waitrequest;                  // Slider_Switches_avalon_parallel_port_slave_translator:uav_waitrequest -> Slider_Switches_avalon_parallel_port_slave_agent:m0_waitrequest
	wire          slider_switches_avalon_parallel_port_slave_agent_m0_debugaccess;                  // Slider_Switches_avalon_parallel_port_slave_agent:m0_debugaccess -> Slider_Switches_avalon_parallel_port_slave_translator:uav_debugaccess
	wire   [31:0] slider_switches_avalon_parallel_port_slave_agent_m0_address;                      // Slider_Switches_avalon_parallel_port_slave_agent:m0_address -> Slider_Switches_avalon_parallel_port_slave_translator:uav_address
	wire    [3:0] slider_switches_avalon_parallel_port_slave_agent_m0_byteenable;                   // Slider_Switches_avalon_parallel_port_slave_agent:m0_byteenable -> Slider_Switches_avalon_parallel_port_slave_translator:uav_byteenable
	wire          slider_switches_avalon_parallel_port_slave_agent_m0_read;                         // Slider_Switches_avalon_parallel_port_slave_agent:m0_read -> Slider_Switches_avalon_parallel_port_slave_translator:uav_read
	wire          slider_switches_avalon_parallel_port_slave_agent_m0_readdatavalid;                // Slider_Switches_avalon_parallel_port_slave_translator:uav_readdatavalid -> Slider_Switches_avalon_parallel_port_slave_agent:m0_readdatavalid
	wire          slider_switches_avalon_parallel_port_slave_agent_m0_lock;                         // Slider_Switches_avalon_parallel_port_slave_agent:m0_lock -> Slider_Switches_avalon_parallel_port_slave_translator:uav_lock
	wire   [31:0] slider_switches_avalon_parallel_port_slave_agent_m0_writedata;                    // Slider_Switches_avalon_parallel_port_slave_agent:m0_writedata -> Slider_Switches_avalon_parallel_port_slave_translator:uav_writedata
	wire          slider_switches_avalon_parallel_port_slave_agent_m0_write;                        // Slider_Switches_avalon_parallel_port_slave_agent:m0_write -> Slider_Switches_avalon_parallel_port_slave_translator:uav_write
	wire    [2:0] slider_switches_avalon_parallel_port_slave_agent_m0_burstcount;                   // Slider_Switches_avalon_parallel_port_slave_agent:m0_burstcount -> Slider_Switches_avalon_parallel_port_slave_translator:uav_burstcount
	wire          slider_switches_avalon_parallel_port_slave_agent_rf_source_valid;                 // Slider_Switches_avalon_parallel_port_slave_agent:rf_source_valid -> Slider_Switches_avalon_parallel_port_slave_agent_rsp_fifo:in_valid
	wire  [112:0] slider_switches_avalon_parallel_port_slave_agent_rf_source_data;                  // Slider_Switches_avalon_parallel_port_slave_agent:rf_source_data -> Slider_Switches_avalon_parallel_port_slave_agent_rsp_fifo:in_data
	wire          slider_switches_avalon_parallel_port_slave_agent_rf_source_ready;                 // Slider_Switches_avalon_parallel_port_slave_agent_rsp_fifo:in_ready -> Slider_Switches_avalon_parallel_port_slave_agent:rf_source_ready
	wire          slider_switches_avalon_parallel_port_slave_agent_rf_source_startofpacket;         // Slider_Switches_avalon_parallel_port_slave_agent:rf_source_startofpacket -> Slider_Switches_avalon_parallel_port_slave_agent_rsp_fifo:in_startofpacket
	wire          slider_switches_avalon_parallel_port_slave_agent_rf_source_endofpacket;           // Slider_Switches_avalon_parallel_port_slave_agent:rf_source_endofpacket -> Slider_Switches_avalon_parallel_port_slave_agent_rsp_fifo:in_endofpacket
	wire          slider_switches_avalon_parallel_port_slave_agent_rsp_fifo_out_valid;              // Slider_Switches_avalon_parallel_port_slave_agent_rsp_fifo:out_valid -> Slider_Switches_avalon_parallel_port_slave_agent:rf_sink_valid
	wire  [112:0] slider_switches_avalon_parallel_port_slave_agent_rsp_fifo_out_data;               // Slider_Switches_avalon_parallel_port_slave_agent_rsp_fifo:out_data -> Slider_Switches_avalon_parallel_port_slave_agent:rf_sink_data
	wire          slider_switches_avalon_parallel_port_slave_agent_rsp_fifo_out_ready;              // Slider_Switches_avalon_parallel_port_slave_agent:rf_sink_ready -> Slider_Switches_avalon_parallel_port_slave_agent_rsp_fifo:out_ready
	wire          slider_switches_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket;      // Slider_Switches_avalon_parallel_port_slave_agent_rsp_fifo:out_startofpacket -> Slider_Switches_avalon_parallel_port_slave_agent:rf_sink_startofpacket
	wire          slider_switches_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket;        // Slider_Switches_avalon_parallel_port_slave_agent_rsp_fifo:out_endofpacket -> Slider_Switches_avalon_parallel_port_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                            // cmd_mux_013:src_valid -> Slider_Switches_avalon_parallel_port_slave_agent:cp_valid
	wire  [111:0] cmd_mux_013_src_data;                                                             // cmd_mux_013:src_data -> Slider_Switches_avalon_parallel_port_slave_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                            // Slider_Switches_avalon_parallel_port_slave_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [18:0] cmd_mux_013_src_channel;                                                          // cmd_mux_013:src_channel -> Slider_Switches_avalon_parallel_port_slave_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                    // cmd_mux_013:src_startofpacket -> Slider_Switches_avalon_parallel_port_slave_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                      // cmd_mux_013:src_endofpacket -> Slider_Switches_avalon_parallel_port_slave_agent:cp_endofpacket
	wire   [15:0] sram_avalon_sram_slave_agent_m0_readdata;                                         // SRAM_avalon_sram_slave_translator:uav_readdata -> SRAM_avalon_sram_slave_agent:m0_readdata
	wire          sram_avalon_sram_slave_agent_m0_waitrequest;                                      // SRAM_avalon_sram_slave_translator:uav_waitrequest -> SRAM_avalon_sram_slave_agent:m0_waitrequest
	wire          sram_avalon_sram_slave_agent_m0_debugaccess;                                      // SRAM_avalon_sram_slave_agent:m0_debugaccess -> SRAM_avalon_sram_slave_translator:uav_debugaccess
	wire   [31:0] sram_avalon_sram_slave_agent_m0_address;                                          // SRAM_avalon_sram_slave_agent:m0_address -> SRAM_avalon_sram_slave_translator:uav_address
	wire    [1:0] sram_avalon_sram_slave_agent_m0_byteenable;                                       // SRAM_avalon_sram_slave_agent:m0_byteenable -> SRAM_avalon_sram_slave_translator:uav_byteenable
	wire          sram_avalon_sram_slave_agent_m0_read;                                             // SRAM_avalon_sram_slave_agent:m0_read -> SRAM_avalon_sram_slave_translator:uav_read
	wire          sram_avalon_sram_slave_agent_m0_readdatavalid;                                    // SRAM_avalon_sram_slave_translator:uav_readdatavalid -> SRAM_avalon_sram_slave_agent:m0_readdatavalid
	wire          sram_avalon_sram_slave_agent_m0_lock;                                             // SRAM_avalon_sram_slave_agent:m0_lock -> SRAM_avalon_sram_slave_translator:uav_lock
	wire   [15:0] sram_avalon_sram_slave_agent_m0_writedata;                                        // SRAM_avalon_sram_slave_agent:m0_writedata -> SRAM_avalon_sram_slave_translator:uav_writedata
	wire          sram_avalon_sram_slave_agent_m0_write;                                            // SRAM_avalon_sram_slave_agent:m0_write -> SRAM_avalon_sram_slave_translator:uav_write
	wire    [1:0] sram_avalon_sram_slave_agent_m0_burstcount;                                       // SRAM_avalon_sram_slave_agent:m0_burstcount -> SRAM_avalon_sram_slave_translator:uav_burstcount
	wire          sram_avalon_sram_slave_agent_rf_source_valid;                                     // SRAM_avalon_sram_slave_agent:rf_source_valid -> SRAM_avalon_sram_slave_agent_rsp_fifo:in_valid
	wire   [94:0] sram_avalon_sram_slave_agent_rf_source_data;                                      // SRAM_avalon_sram_slave_agent:rf_source_data -> SRAM_avalon_sram_slave_agent_rsp_fifo:in_data
	wire          sram_avalon_sram_slave_agent_rf_source_ready;                                     // SRAM_avalon_sram_slave_agent_rsp_fifo:in_ready -> SRAM_avalon_sram_slave_agent:rf_source_ready
	wire          sram_avalon_sram_slave_agent_rf_source_startofpacket;                             // SRAM_avalon_sram_slave_agent:rf_source_startofpacket -> SRAM_avalon_sram_slave_agent_rsp_fifo:in_startofpacket
	wire          sram_avalon_sram_slave_agent_rf_source_endofpacket;                               // SRAM_avalon_sram_slave_agent:rf_source_endofpacket -> SRAM_avalon_sram_slave_agent_rsp_fifo:in_endofpacket
	wire          sram_avalon_sram_slave_agent_rsp_fifo_out_valid;                                  // SRAM_avalon_sram_slave_agent_rsp_fifo:out_valid -> SRAM_avalon_sram_slave_agent:rf_sink_valid
	wire   [94:0] sram_avalon_sram_slave_agent_rsp_fifo_out_data;                                   // SRAM_avalon_sram_slave_agent_rsp_fifo:out_data -> SRAM_avalon_sram_slave_agent:rf_sink_data
	wire          sram_avalon_sram_slave_agent_rsp_fifo_out_ready;                                  // SRAM_avalon_sram_slave_agent:rf_sink_ready -> SRAM_avalon_sram_slave_agent_rsp_fifo:out_ready
	wire          sram_avalon_sram_slave_agent_rsp_fifo_out_startofpacket;                          // SRAM_avalon_sram_slave_agent_rsp_fifo:out_startofpacket -> SRAM_avalon_sram_slave_agent:rf_sink_startofpacket
	wire          sram_avalon_sram_slave_agent_rsp_fifo_out_endofpacket;                            // SRAM_avalon_sram_slave_agent_rsp_fifo:out_endofpacket -> SRAM_avalon_sram_slave_agent:rf_sink_endofpacket
	wire          sram_avalon_sram_slave_agent_rdata_fifo_src_valid;                                // SRAM_avalon_sram_slave_agent:rdata_fifo_src_valid -> SRAM_avalon_sram_slave_agent_rdata_fifo:in_valid
	wire   [17:0] sram_avalon_sram_slave_agent_rdata_fifo_src_data;                                 // SRAM_avalon_sram_slave_agent:rdata_fifo_src_data -> SRAM_avalon_sram_slave_agent_rdata_fifo:in_data
	wire          sram_avalon_sram_slave_agent_rdata_fifo_src_ready;                                // SRAM_avalon_sram_slave_agent_rdata_fifo:in_ready -> SRAM_avalon_sram_slave_agent:rdata_fifo_src_ready
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                            // SysID_control_slave_translator:uav_readdata -> SysID_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                         // SysID_control_slave_translator:uav_waitrequest -> SysID_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                         // SysID_control_slave_agent:m0_debugaccess -> SysID_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_control_slave_agent_m0_address;                                             // SysID_control_slave_agent:m0_address -> SysID_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                          // SysID_control_slave_agent:m0_byteenable -> SysID_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                                // SysID_control_slave_agent:m0_read -> SysID_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                       // SysID_control_slave_translator:uav_readdatavalid -> SysID_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                                // SysID_control_slave_agent:m0_lock -> SysID_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                           // SysID_control_slave_agent:m0_writedata -> SysID_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                               // SysID_control_slave_agent:m0_write -> SysID_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                          // SysID_control_slave_agent:m0_burstcount -> SysID_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                        // SysID_control_slave_agent:rf_source_valid -> SysID_control_slave_agent_rsp_fifo:in_valid
	wire  [112:0] sysid_control_slave_agent_rf_source_data;                                         // SysID_control_slave_agent:rf_source_data -> SysID_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                        // SysID_control_slave_agent_rsp_fifo:in_ready -> SysID_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                                // SysID_control_slave_agent:rf_source_startofpacket -> SysID_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                                  // SysID_control_slave_agent:rf_source_endofpacket -> SysID_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                     // SysID_control_slave_agent_rsp_fifo:out_valid -> SysID_control_slave_agent:rf_sink_valid
	wire  [112:0] sysid_control_slave_agent_rsp_fifo_out_data;                                      // SysID_control_slave_agent_rsp_fifo:out_data -> SysID_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                     // SysID_control_slave_agent:rf_sink_ready -> SysID_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                             // SysID_control_slave_agent_rsp_fifo:out_startofpacket -> SysID_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                               // SysID_control_slave_agent_rsp_fifo:out_endofpacket -> SysID_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                            // cmd_mux_015:src_valid -> SysID_control_slave_agent:cp_valid
	wire  [111:0] cmd_mux_015_src_data;                                                             // cmd_mux_015:src_data -> SysID_control_slave_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                            // SysID_control_slave_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [18:0] cmd_mux_015_src_channel;                                                          // cmd_mux_015:src_channel -> SysID_control_slave_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                    // cmd_mux_015:src_startofpacket -> SysID_control_slave_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                      // cmd_mux_015:src_endofpacket -> SysID_control_slave_agent:cp_endofpacket
	wire   [31:0] flash_flash_data_agent_m0_readdata;                                               // Flash_flash_data_translator:uav_readdata -> Flash_flash_data_agent:m0_readdata
	wire          flash_flash_data_agent_m0_waitrequest;                                            // Flash_flash_data_translator:uav_waitrequest -> Flash_flash_data_agent:m0_waitrequest
	wire          flash_flash_data_agent_m0_debugaccess;                                            // Flash_flash_data_agent:m0_debugaccess -> Flash_flash_data_translator:uav_debugaccess
	wire   [31:0] flash_flash_data_agent_m0_address;                                                // Flash_flash_data_agent:m0_address -> Flash_flash_data_translator:uav_address
	wire    [3:0] flash_flash_data_agent_m0_byteenable;                                             // Flash_flash_data_agent:m0_byteenable -> Flash_flash_data_translator:uav_byteenable
	wire          flash_flash_data_agent_m0_read;                                                   // Flash_flash_data_agent:m0_read -> Flash_flash_data_translator:uav_read
	wire          flash_flash_data_agent_m0_readdatavalid;                                          // Flash_flash_data_translator:uav_readdatavalid -> Flash_flash_data_agent:m0_readdatavalid
	wire          flash_flash_data_agent_m0_lock;                                                   // Flash_flash_data_agent:m0_lock -> Flash_flash_data_translator:uav_lock
	wire   [31:0] flash_flash_data_agent_m0_writedata;                                              // Flash_flash_data_agent:m0_writedata -> Flash_flash_data_translator:uav_writedata
	wire          flash_flash_data_agent_m0_write;                                                  // Flash_flash_data_agent:m0_write -> Flash_flash_data_translator:uav_write
	wire    [2:0] flash_flash_data_agent_m0_burstcount;                                             // Flash_flash_data_agent:m0_burstcount -> Flash_flash_data_translator:uav_burstcount
	wire          flash_flash_data_agent_rf_source_valid;                                           // Flash_flash_data_agent:rf_source_valid -> Flash_flash_data_agent_rsp_fifo:in_valid
	wire  [112:0] flash_flash_data_agent_rf_source_data;                                            // Flash_flash_data_agent:rf_source_data -> Flash_flash_data_agent_rsp_fifo:in_data
	wire          flash_flash_data_agent_rf_source_ready;                                           // Flash_flash_data_agent_rsp_fifo:in_ready -> Flash_flash_data_agent:rf_source_ready
	wire          flash_flash_data_agent_rf_source_startofpacket;                                   // Flash_flash_data_agent:rf_source_startofpacket -> Flash_flash_data_agent_rsp_fifo:in_startofpacket
	wire          flash_flash_data_agent_rf_source_endofpacket;                                     // Flash_flash_data_agent:rf_source_endofpacket -> Flash_flash_data_agent_rsp_fifo:in_endofpacket
	wire          flash_flash_data_agent_rsp_fifo_out_valid;                                        // Flash_flash_data_agent_rsp_fifo:out_valid -> Flash_flash_data_agent:rf_sink_valid
	wire  [112:0] flash_flash_data_agent_rsp_fifo_out_data;                                         // Flash_flash_data_agent_rsp_fifo:out_data -> Flash_flash_data_agent:rf_sink_data
	wire          flash_flash_data_agent_rsp_fifo_out_ready;                                        // Flash_flash_data_agent:rf_sink_ready -> Flash_flash_data_agent_rsp_fifo:out_ready
	wire          flash_flash_data_agent_rsp_fifo_out_startofpacket;                                // Flash_flash_data_agent_rsp_fifo:out_startofpacket -> Flash_flash_data_agent:rf_sink_startofpacket
	wire          flash_flash_data_agent_rsp_fifo_out_endofpacket;                                  // Flash_flash_data_agent_rsp_fifo:out_endofpacket -> Flash_flash_data_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                            // cmd_mux_016:src_valid -> Flash_flash_data_agent:cp_valid
	wire  [111:0] cmd_mux_016_src_data;                                                             // cmd_mux_016:src_data -> Flash_flash_data_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                            // Flash_flash_data_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [18:0] cmd_mux_016_src_channel;                                                          // cmd_mux_016:src_channel -> Flash_flash_data_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                    // cmd_mux_016:src_startofpacket -> Flash_flash_data_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                      // cmd_mux_016:src_endofpacket -> Flash_flash_data_agent:cp_endofpacket
	wire   [31:0] flash_flash_erase_control_agent_m0_readdata;                                      // Flash_flash_erase_control_translator:uav_readdata -> Flash_flash_erase_control_agent:m0_readdata
	wire          flash_flash_erase_control_agent_m0_waitrequest;                                   // Flash_flash_erase_control_translator:uav_waitrequest -> Flash_flash_erase_control_agent:m0_waitrequest
	wire          flash_flash_erase_control_agent_m0_debugaccess;                                   // Flash_flash_erase_control_agent:m0_debugaccess -> Flash_flash_erase_control_translator:uav_debugaccess
	wire   [31:0] flash_flash_erase_control_agent_m0_address;                                       // Flash_flash_erase_control_agent:m0_address -> Flash_flash_erase_control_translator:uav_address
	wire    [3:0] flash_flash_erase_control_agent_m0_byteenable;                                    // Flash_flash_erase_control_agent:m0_byteenable -> Flash_flash_erase_control_translator:uav_byteenable
	wire          flash_flash_erase_control_agent_m0_read;                                          // Flash_flash_erase_control_agent:m0_read -> Flash_flash_erase_control_translator:uav_read
	wire          flash_flash_erase_control_agent_m0_readdatavalid;                                 // Flash_flash_erase_control_translator:uav_readdatavalid -> Flash_flash_erase_control_agent:m0_readdatavalid
	wire          flash_flash_erase_control_agent_m0_lock;                                          // Flash_flash_erase_control_agent:m0_lock -> Flash_flash_erase_control_translator:uav_lock
	wire   [31:0] flash_flash_erase_control_agent_m0_writedata;                                     // Flash_flash_erase_control_agent:m0_writedata -> Flash_flash_erase_control_translator:uav_writedata
	wire          flash_flash_erase_control_agent_m0_write;                                         // Flash_flash_erase_control_agent:m0_write -> Flash_flash_erase_control_translator:uav_write
	wire    [2:0] flash_flash_erase_control_agent_m0_burstcount;                                    // Flash_flash_erase_control_agent:m0_burstcount -> Flash_flash_erase_control_translator:uav_burstcount
	wire          flash_flash_erase_control_agent_rf_source_valid;                                  // Flash_flash_erase_control_agent:rf_source_valid -> Flash_flash_erase_control_agent_rsp_fifo:in_valid
	wire  [112:0] flash_flash_erase_control_agent_rf_source_data;                                   // Flash_flash_erase_control_agent:rf_source_data -> Flash_flash_erase_control_agent_rsp_fifo:in_data
	wire          flash_flash_erase_control_agent_rf_source_ready;                                  // Flash_flash_erase_control_agent_rsp_fifo:in_ready -> Flash_flash_erase_control_agent:rf_source_ready
	wire          flash_flash_erase_control_agent_rf_source_startofpacket;                          // Flash_flash_erase_control_agent:rf_source_startofpacket -> Flash_flash_erase_control_agent_rsp_fifo:in_startofpacket
	wire          flash_flash_erase_control_agent_rf_source_endofpacket;                            // Flash_flash_erase_control_agent:rf_source_endofpacket -> Flash_flash_erase_control_agent_rsp_fifo:in_endofpacket
	wire          flash_flash_erase_control_agent_rsp_fifo_out_valid;                               // Flash_flash_erase_control_agent_rsp_fifo:out_valid -> Flash_flash_erase_control_agent:rf_sink_valid
	wire  [112:0] flash_flash_erase_control_agent_rsp_fifo_out_data;                                // Flash_flash_erase_control_agent_rsp_fifo:out_data -> Flash_flash_erase_control_agent:rf_sink_data
	wire          flash_flash_erase_control_agent_rsp_fifo_out_ready;                               // Flash_flash_erase_control_agent:rf_sink_ready -> Flash_flash_erase_control_agent_rsp_fifo:out_ready
	wire          flash_flash_erase_control_agent_rsp_fifo_out_startofpacket;                       // Flash_flash_erase_control_agent_rsp_fifo:out_startofpacket -> Flash_flash_erase_control_agent:rf_sink_startofpacket
	wire          flash_flash_erase_control_agent_rsp_fifo_out_endofpacket;                         // Flash_flash_erase_control_agent_rsp_fifo:out_endofpacket -> Flash_flash_erase_control_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                            // cmd_mux_017:src_valid -> Flash_flash_erase_control_agent:cp_valid
	wire  [111:0] cmd_mux_017_src_data;                                                             // cmd_mux_017:src_data -> Flash_flash_erase_control_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                            // Flash_flash_erase_control_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [18:0] cmd_mux_017_src_channel;                                                          // cmd_mux_017:src_channel -> Flash_flash_erase_control_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                    // cmd_mux_017:src_startofpacket -> Flash_flash_erase_control_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                      // cmd_mux_017:src_endofpacket -> Flash_flash_erase_control_agent:cp_endofpacket
	wire   [31:0] processor1_debug_mem_slave_agent_m0_readdata;                                     // Processor1_debug_mem_slave_translator:uav_readdata -> Processor1_debug_mem_slave_agent:m0_readdata
	wire          processor1_debug_mem_slave_agent_m0_waitrequest;                                  // Processor1_debug_mem_slave_translator:uav_waitrequest -> Processor1_debug_mem_slave_agent:m0_waitrequest
	wire          processor1_debug_mem_slave_agent_m0_debugaccess;                                  // Processor1_debug_mem_slave_agent:m0_debugaccess -> Processor1_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] processor1_debug_mem_slave_agent_m0_address;                                      // Processor1_debug_mem_slave_agent:m0_address -> Processor1_debug_mem_slave_translator:uav_address
	wire    [3:0] processor1_debug_mem_slave_agent_m0_byteenable;                                   // Processor1_debug_mem_slave_agent:m0_byteenable -> Processor1_debug_mem_slave_translator:uav_byteenable
	wire          processor1_debug_mem_slave_agent_m0_read;                                         // Processor1_debug_mem_slave_agent:m0_read -> Processor1_debug_mem_slave_translator:uav_read
	wire          processor1_debug_mem_slave_agent_m0_readdatavalid;                                // Processor1_debug_mem_slave_translator:uav_readdatavalid -> Processor1_debug_mem_slave_agent:m0_readdatavalid
	wire          processor1_debug_mem_slave_agent_m0_lock;                                         // Processor1_debug_mem_slave_agent:m0_lock -> Processor1_debug_mem_slave_translator:uav_lock
	wire   [31:0] processor1_debug_mem_slave_agent_m0_writedata;                                    // Processor1_debug_mem_slave_agent:m0_writedata -> Processor1_debug_mem_slave_translator:uav_writedata
	wire          processor1_debug_mem_slave_agent_m0_write;                                        // Processor1_debug_mem_slave_agent:m0_write -> Processor1_debug_mem_slave_translator:uav_write
	wire    [2:0] processor1_debug_mem_slave_agent_m0_burstcount;                                   // Processor1_debug_mem_slave_agent:m0_burstcount -> Processor1_debug_mem_slave_translator:uav_burstcount
	wire          processor1_debug_mem_slave_agent_rf_source_valid;                                 // Processor1_debug_mem_slave_agent:rf_source_valid -> Processor1_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [112:0] processor1_debug_mem_slave_agent_rf_source_data;                                  // Processor1_debug_mem_slave_agent:rf_source_data -> Processor1_debug_mem_slave_agent_rsp_fifo:in_data
	wire          processor1_debug_mem_slave_agent_rf_source_ready;                                 // Processor1_debug_mem_slave_agent_rsp_fifo:in_ready -> Processor1_debug_mem_slave_agent:rf_source_ready
	wire          processor1_debug_mem_slave_agent_rf_source_startofpacket;                         // Processor1_debug_mem_slave_agent:rf_source_startofpacket -> Processor1_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          processor1_debug_mem_slave_agent_rf_source_endofpacket;                           // Processor1_debug_mem_slave_agent:rf_source_endofpacket -> Processor1_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          processor1_debug_mem_slave_agent_rsp_fifo_out_valid;                              // Processor1_debug_mem_slave_agent_rsp_fifo:out_valid -> Processor1_debug_mem_slave_agent:rf_sink_valid
	wire  [112:0] processor1_debug_mem_slave_agent_rsp_fifo_out_data;                               // Processor1_debug_mem_slave_agent_rsp_fifo:out_data -> Processor1_debug_mem_slave_agent:rf_sink_data
	wire          processor1_debug_mem_slave_agent_rsp_fifo_out_ready;                              // Processor1_debug_mem_slave_agent:rf_sink_ready -> Processor1_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          processor1_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // Processor1_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> Processor1_debug_mem_slave_agent:rf_sink_startofpacket
	wire          processor1_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // Processor1_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> Processor1_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                            // cmd_mux_018:src_valid -> Processor1_debug_mem_slave_agent:cp_valid
	wire  [111:0] cmd_mux_018_src_data;                                                             // cmd_mux_018:src_data -> Processor1_debug_mem_slave_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                            // Processor1_debug_mem_slave_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [18:0] cmd_mux_018_src_channel;                                                          // cmd_mux_018:src_channel -> Processor1_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                    // cmd_mux_018:src_startofpacket -> Processor1_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                      // cmd_mux_018:src_endofpacket -> Processor1_debug_mem_slave_agent:cp_endofpacket
	wire          processor2_data_master_agent_cp_valid;                                            // Processor2_data_master_agent:cp_valid -> router:sink_valid
	wire  [111:0] processor2_data_master_agent_cp_data;                                             // Processor2_data_master_agent:cp_data -> router:sink_data
	wire          processor2_data_master_agent_cp_ready;                                            // router:sink_ready -> Processor2_data_master_agent:cp_ready
	wire          processor2_data_master_agent_cp_startofpacket;                                    // Processor2_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          processor2_data_master_agent_cp_endofpacket;                                      // Processor2_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                 // router:src_valid -> cmd_demux:sink_valid
	wire  [111:0] router_src_data;                                                                  // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                 // cmd_demux:sink_ready -> router:src_ready
	wire   [18:0] router_src_channel;                                                               // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                         // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                           // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          processor1_data_master_agent_cp_valid;                                            // Processor1_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [111:0] processor1_data_master_agent_cp_data;                                             // Processor1_data_master_agent:cp_data -> router_001:sink_data
	wire          processor1_data_master_agent_cp_ready;                                            // router_001:sink_ready -> Processor1_data_master_agent:cp_ready
	wire          processor1_data_master_agent_cp_startofpacket;                                    // Processor1_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          processor1_data_master_agent_cp_endofpacket;                                      // Processor1_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                             // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [111:0] router_001_src_data;                                                              // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                             // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [18:0] router_001_src_channel;                                                           // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                     // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                       // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          jtag_to_fpga_bridge_master_agent_cp_valid;                                        // JTAG_to_FPGA_Bridge_master_agent:cp_valid -> router_002:sink_valid
	wire  [111:0] jtag_to_fpga_bridge_master_agent_cp_data;                                         // JTAG_to_FPGA_Bridge_master_agent:cp_data -> router_002:sink_data
	wire          jtag_to_fpga_bridge_master_agent_cp_ready;                                        // router_002:sink_ready -> JTAG_to_FPGA_Bridge_master_agent:cp_ready
	wire          jtag_to_fpga_bridge_master_agent_cp_startofpacket;                                // JTAG_to_FPGA_Bridge_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_to_fpga_bridge_master_agent_cp_endofpacket;                                  // JTAG_to_FPGA_Bridge_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          processor1_instruction_master_agent_cp_valid;                                     // Processor1_instruction_master_agent:cp_valid -> router_003:sink_valid
	wire  [111:0] processor1_instruction_master_agent_cp_data;                                      // Processor1_instruction_master_agent:cp_data -> router_003:sink_data
	wire          processor1_instruction_master_agent_cp_ready;                                     // router_003:sink_ready -> Processor1_instruction_master_agent:cp_ready
	wire          processor1_instruction_master_agent_cp_startofpacket;                             // Processor1_instruction_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          processor1_instruction_master_agent_cp_endofpacket;                               // Processor1_instruction_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                             // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [111:0] router_003_src_data;                                                              // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                             // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [18:0] router_003_src_channel;                                                           // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                     // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                       // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          processor2_instruction_master_agent_cp_valid;                                     // Processor2_instruction_master_agent:cp_valid -> router_004:sink_valid
	wire  [111:0] processor2_instruction_master_agent_cp_data;                                      // Processor2_instruction_master_agent:cp_data -> router_004:sink_data
	wire          processor2_instruction_master_agent_cp_ready;                                     // router_004:sink_ready -> Processor2_instruction_master_agent:cp_ready
	wire          processor2_instruction_master_agent_cp_startofpacket;                             // Processor2_instruction_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          processor2_instruction_master_agent_cp_endofpacket;                               // Processor2_instruction_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                             // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [111:0] router_004_src_data;                                                              // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                             // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [18:0] router_004_src_channel;                                                           // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                     // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                       // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          audio_subsystem_audio_slave_agent_rp_valid;                                       // Audio_Subsystem_audio_slave_agent:rp_valid -> router_005:sink_valid
	wire  [111:0] audio_subsystem_audio_slave_agent_rp_data;                                        // Audio_Subsystem_audio_slave_agent:rp_data -> router_005:sink_data
	wire          audio_subsystem_audio_slave_agent_rp_ready;                                       // router_005:sink_ready -> Audio_Subsystem_audio_slave_agent:rp_ready
	wire          audio_subsystem_audio_slave_agent_rp_startofpacket;                               // Audio_Subsystem_audio_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          audio_subsystem_audio_slave_agent_rp_endofpacket;                                 // Audio_Subsystem_audio_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                             // router_005:src_valid -> rsp_demux:sink_valid
	wire  [111:0] router_005_src_data;                                                              // router_005:src_data -> rsp_demux:sink_data
	wire          router_005_src_ready;                                                             // rsp_demux:sink_ready -> router_005:src_ready
	wire   [18:0] router_005_src_channel;                                                           // router_005:src_channel -> rsp_demux:sink_channel
	wire          router_005_src_startofpacket;                                                     // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_005_src_endofpacket;                                                       // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_valid;                              // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rp_valid -> router_006:sink_valid
	wire  [111:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_data;                               // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rp_data -> router_006:sink_data
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_ready;                              // router_006:sink_ready -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_startofpacket;                      // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_endofpacket;                        // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                             // router_006:src_valid -> rsp_demux_001:sink_valid
	wire  [111:0] router_006_src_data;                                                              // router_006:src_data -> rsp_demux_001:sink_data
	wire          router_006_src_ready;                                                             // rsp_demux_001:sink_ready -> router_006:src_ready
	wire   [18:0] router_006_src_channel;                                                           // router_006:src_channel -> rsp_demux_001:sink_channel
	wire          router_006_src_startofpacket;                                                     // router_006:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_006_src_endofpacket;                                                       // router_006:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          expansion_jp5_avalon_parallel_port_slave_agent_rp_valid;                          // Expansion_JP5_avalon_parallel_port_slave_agent:rp_valid -> router_007:sink_valid
	wire  [111:0] expansion_jp5_avalon_parallel_port_slave_agent_rp_data;                           // Expansion_JP5_avalon_parallel_port_slave_agent:rp_data -> router_007:sink_data
	wire          expansion_jp5_avalon_parallel_port_slave_agent_rp_ready;                          // router_007:sink_ready -> Expansion_JP5_avalon_parallel_port_slave_agent:rp_ready
	wire          expansion_jp5_avalon_parallel_port_slave_agent_rp_startofpacket;                  // Expansion_JP5_avalon_parallel_port_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          expansion_jp5_avalon_parallel_port_slave_agent_rp_endofpacket;                    // Expansion_JP5_avalon_parallel_port_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                             // router_007:src_valid -> rsp_demux_002:sink_valid
	wire  [111:0] router_007_src_data;                                                              // router_007:src_data -> rsp_demux_002:sink_data
	wire          router_007_src_ready;                                                             // rsp_demux_002:sink_ready -> router_007:src_ready
	wire   [18:0] router_007_src_channel;                                                           // router_007:src_channel -> rsp_demux_002:sink_channel
	wire          router_007_src_startofpacket;                                                     // router_007:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_007_src_endofpacket;                                                       // router_007:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          pushbuttons_avalon_parallel_port_slave_agent_rp_valid;                            // Pushbuttons_avalon_parallel_port_slave_agent:rp_valid -> router_008:sink_valid
	wire  [111:0] pushbuttons_avalon_parallel_port_slave_agent_rp_data;                             // Pushbuttons_avalon_parallel_port_slave_agent:rp_data -> router_008:sink_data
	wire          pushbuttons_avalon_parallel_port_slave_agent_rp_ready;                            // router_008:sink_ready -> Pushbuttons_avalon_parallel_port_slave_agent:rp_ready
	wire          pushbuttons_avalon_parallel_port_slave_agent_rp_startofpacket;                    // Pushbuttons_avalon_parallel_port_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          pushbuttons_avalon_parallel_port_slave_agent_rp_endofpacket;                      // Pushbuttons_avalon_parallel_port_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                             // router_008:src_valid -> rsp_demux_003:sink_valid
	wire  [111:0] router_008_src_data;                                                              // router_008:src_data -> rsp_demux_003:sink_data
	wire          router_008_src_ready;                                                             // rsp_demux_003:sink_ready -> router_008:src_ready
	wire   [18:0] router_008_src_channel;                                                           // router_008:src_channel -> rsp_demux_003:sink_channel
	wire          router_008_src_startofpacket;                                                     // router_008:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_008_src_endofpacket;                                                       // router_008:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          serial_port_avalon_rs232_slave_agent_rp_valid;                                    // Serial_Port_avalon_rs232_slave_agent:rp_valid -> router_009:sink_valid
	wire  [111:0] serial_port_avalon_rs232_slave_agent_rp_data;                                     // Serial_Port_avalon_rs232_slave_agent:rp_data -> router_009:sink_data
	wire          serial_port_avalon_rs232_slave_agent_rp_ready;                                    // router_009:sink_ready -> Serial_Port_avalon_rs232_slave_agent:rp_ready
	wire          serial_port_avalon_rs232_slave_agent_rp_startofpacket;                            // Serial_Port_avalon_rs232_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          serial_port_avalon_rs232_slave_agent_rp_endofpacket;                              // Serial_Port_avalon_rs232_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                             // router_009:src_valid -> rsp_demux_004:sink_valid
	wire  [111:0] router_009_src_data;                                                              // router_009:src_data -> rsp_demux_004:sink_data
	wire          router_009_src_ready;                                                             // rsp_demux_004:sink_ready -> router_009:src_ready
	wire   [18:0] router_009_src_channel;                                                           // router_009:src_channel -> rsp_demux_004:sink_channel
	wire          router_009_src_startofpacket;                                                     // router_009:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_009_src_endofpacket;                                                       // router_009:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          camerad5m_0_camera_slave_agent_rp_valid;                                          // CameraD5M_0_camera_slave_agent:rp_valid -> router_010:sink_valid
	wire  [111:0] camerad5m_0_camera_slave_agent_rp_data;                                           // CameraD5M_0_camera_slave_agent:rp_data -> router_010:sink_data
	wire          camerad5m_0_camera_slave_agent_rp_ready;                                          // router_010:sink_ready -> CameraD5M_0_camera_slave_agent:rp_ready
	wire          camerad5m_0_camera_slave_agent_rp_startofpacket;                                  // CameraD5M_0_camera_slave_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          camerad5m_0_camera_slave_agent_rp_endofpacket;                                    // CameraD5M_0_camera_slave_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                             // router_010:src_valid -> rsp_demux_005:sink_valid
	wire  [111:0] router_010_src_data;                                                              // router_010:src_data -> rsp_demux_005:sink_data
	wire          router_010_src_ready;                                                             // rsp_demux_005:sink_ready -> router_010:src_ready
	wire   [18:0] router_010_src_channel;                                                           // router_010:src_channel -> rsp_demux_005:sink_channel
	wire          router_010_src_startofpacket;                                                     // router_010:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_010_src_endofpacket;                                                       // router_010:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          processor2_debug_mem_slave_agent_rp_valid;                                        // Processor2_debug_mem_slave_agent:rp_valid -> router_011:sink_valid
	wire  [111:0] processor2_debug_mem_slave_agent_rp_data;                                         // Processor2_debug_mem_slave_agent:rp_data -> router_011:sink_data
	wire          processor2_debug_mem_slave_agent_rp_ready;                                        // router_011:sink_ready -> Processor2_debug_mem_slave_agent:rp_ready
	wire          processor2_debug_mem_slave_agent_rp_startofpacket;                                // Processor2_debug_mem_slave_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          processor2_debug_mem_slave_agent_rp_endofpacket;                                  // Processor2_debug_mem_slave_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                             // router_011:src_valid -> rsp_demux_006:sink_valid
	wire  [111:0] router_011_src_data;                                                              // router_011:src_data -> rsp_demux_006:sink_data
	wire          router_011_src_ready;                                                             // rsp_demux_006:sink_ready -> router_011:src_ready
	wire   [18:0] router_011_src_channel;                                                           // router_011:src_channel -> rsp_demux_006:sink_channel
	wire          router_011_src_startofpacket;                                                     // router_011:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_011_src_endofpacket;                                                       // router_011:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          interval_timer_s1_agent_rp_valid;                                                 // Interval_Timer_s1_agent:rp_valid -> router_012:sink_valid
	wire  [111:0] interval_timer_s1_agent_rp_data;                                                  // Interval_Timer_s1_agent:rp_data -> router_012:sink_data
	wire          interval_timer_s1_agent_rp_ready;                                                 // router_012:sink_ready -> Interval_Timer_s1_agent:rp_ready
	wire          interval_timer_s1_agent_rp_startofpacket;                                         // Interval_Timer_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          interval_timer_s1_agent_rp_endofpacket;                                           // Interval_Timer_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                             // router_012:src_valid -> rsp_demux_007:sink_valid
	wire  [111:0] router_012_src_data;                                                              // router_012:src_data -> rsp_demux_007:sink_data
	wire          router_012_src_ready;                                                             // rsp_demux_007:sink_ready -> router_012:src_ready
	wire   [18:0] router_012_src_channel;                                                           // router_012:src_channel -> rsp_demux_007:sink_channel
	wire          router_012_src_startofpacket;                                                     // router_012:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_012_src_endofpacket;                                                       // router_012:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                          // SDRAM_s1_agent:rp_valid -> router_013:sink_valid
	wire  [111:0] sdram_s1_agent_rp_data;                                                           // SDRAM_s1_agent:rp_data -> router_013:sink_data
	wire          sdram_s1_agent_rp_ready;                                                          // router_013:sink_ready -> SDRAM_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                  // SDRAM_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                    // SDRAM_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                             // router_013:src_valid -> rsp_demux_008:sink_valid
	wire  [111:0] router_013_src_data;                                                              // router_013:src_data -> rsp_demux_008:sink_data
	wire          router_013_src_ready;                                                             // rsp_demux_008:sink_ready -> router_013:src_ready
	wire   [18:0] router_013_src_channel;                                                           // router_013:src_channel -> rsp_demux_008:sink_channel
	wire          router_013_src_startofpacket;                                                     // router_013:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_013_src_endofpacket;                                                       // router_013:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rp_valid;                                  // AV_Config_avalon_av_config_slave_agent:rp_valid -> router_014:sink_valid
	wire  [111:0] av_config_avalon_av_config_slave_agent_rp_data;                                   // AV_Config_avalon_av_config_slave_agent:rp_data -> router_014:sink_data
	wire          av_config_avalon_av_config_slave_agent_rp_ready;                                  // router_014:sink_ready -> AV_Config_avalon_av_config_slave_agent:rp_ready
	wire          av_config_avalon_av_config_slave_agent_rp_startofpacket;                          // AV_Config_avalon_av_config_slave_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rp_endofpacket;                            // AV_Config_avalon_av_config_slave_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                             // router_014:src_valid -> rsp_demux_009:sink_valid
	wire  [111:0] router_014_src_data;                                                              // router_014:src_data -> rsp_demux_009:sink_data
	wire          router_014_src_ready;                                                             // rsp_demux_009:sink_ready -> router_014:src_ready
	wire   [18:0] router_014_src_channel;                                                           // router_014:src_channel -> rsp_demux_009:sink_channel
	wire          router_014_src_startofpacket;                                                     // router_014:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_014_src_endofpacket;                                                       // router_014:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                       // JTAG_UART_avalon_jtag_slave_agent:rp_valid -> router_015:sink_valid
	wire  [111:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                        // JTAG_UART_avalon_jtag_slave_agent:rp_data -> router_015:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                       // router_015:sink_ready -> JTAG_UART_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                               // JTAG_UART_avalon_jtag_slave_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                 // JTAG_UART_avalon_jtag_slave_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                             // router_015:src_valid -> rsp_demux_010:sink_valid
	wire  [111:0] router_015_src_data;                                                              // router_015:src_data -> rsp_demux_010:sink_data
	wire          router_015_src_ready;                                                             // rsp_demux_010:sink_ready -> router_015:src_ready
	wire   [18:0] router_015_src_channel;                                                           // router_015:src_channel -> rsp_demux_010:sink_channel
	wire          router_015_src_startofpacket;                                                     // router_015:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_015_src_endofpacket;                                                       // router_015:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          red_leds_avalon_parallel_port_slave_agent_rp_valid;                               // Red_LEDs_avalon_parallel_port_slave_agent:rp_valid -> router_016:sink_valid
	wire  [111:0] red_leds_avalon_parallel_port_slave_agent_rp_data;                                // Red_LEDs_avalon_parallel_port_slave_agent:rp_data -> router_016:sink_data
	wire          red_leds_avalon_parallel_port_slave_agent_rp_ready;                               // router_016:sink_ready -> Red_LEDs_avalon_parallel_port_slave_agent:rp_ready
	wire          red_leds_avalon_parallel_port_slave_agent_rp_startofpacket;                       // Red_LEDs_avalon_parallel_port_slave_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          red_leds_avalon_parallel_port_slave_agent_rp_endofpacket;                         // Red_LEDs_avalon_parallel_port_slave_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                             // router_016:src_valid -> rsp_demux_011:sink_valid
	wire  [111:0] router_016_src_data;                                                              // router_016:src_data -> rsp_demux_011:sink_data
	wire          router_016_src_ready;                                                             // rsp_demux_011:sink_ready -> router_016:src_ready
	wire   [18:0] router_016_src_channel;                                                           // router_016:src_channel -> rsp_demux_011:sink_channel
	wire          router_016_src_startofpacket;                                                     // router_016:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_016_src_endofpacket;                                                       // router_016:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          green_leds_avalon_parallel_port_slave_agent_rp_valid;                             // Green_LEDs_avalon_parallel_port_slave_agent:rp_valid -> router_017:sink_valid
	wire  [111:0] green_leds_avalon_parallel_port_slave_agent_rp_data;                              // Green_LEDs_avalon_parallel_port_slave_agent:rp_data -> router_017:sink_data
	wire          green_leds_avalon_parallel_port_slave_agent_rp_ready;                             // router_017:sink_ready -> Green_LEDs_avalon_parallel_port_slave_agent:rp_ready
	wire          green_leds_avalon_parallel_port_slave_agent_rp_startofpacket;                     // Green_LEDs_avalon_parallel_port_slave_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          green_leds_avalon_parallel_port_slave_agent_rp_endofpacket;                       // Green_LEDs_avalon_parallel_port_slave_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                             // router_017:src_valid -> rsp_demux_012:sink_valid
	wire  [111:0] router_017_src_data;                                                              // router_017:src_data -> rsp_demux_012:sink_data
	wire          router_017_src_ready;                                                             // rsp_demux_012:sink_ready -> router_017:src_ready
	wire   [18:0] router_017_src_channel;                                                           // router_017:src_channel -> rsp_demux_012:sink_channel
	wire          router_017_src_startofpacket;                                                     // router_017:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_017_src_endofpacket;                                                       // router_017:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          slider_switches_avalon_parallel_port_slave_agent_rp_valid;                        // Slider_Switches_avalon_parallel_port_slave_agent:rp_valid -> router_018:sink_valid
	wire  [111:0] slider_switches_avalon_parallel_port_slave_agent_rp_data;                         // Slider_Switches_avalon_parallel_port_slave_agent:rp_data -> router_018:sink_data
	wire          slider_switches_avalon_parallel_port_slave_agent_rp_ready;                        // router_018:sink_ready -> Slider_Switches_avalon_parallel_port_slave_agent:rp_ready
	wire          slider_switches_avalon_parallel_port_slave_agent_rp_startofpacket;                // Slider_Switches_avalon_parallel_port_slave_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          slider_switches_avalon_parallel_port_slave_agent_rp_endofpacket;                  // Slider_Switches_avalon_parallel_port_slave_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                             // router_018:src_valid -> rsp_demux_013:sink_valid
	wire  [111:0] router_018_src_data;                                                              // router_018:src_data -> rsp_demux_013:sink_data
	wire          router_018_src_ready;                                                             // rsp_demux_013:sink_ready -> router_018:src_ready
	wire   [18:0] router_018_src_channel;                                                           // router_018:src_channel -> rsp_demux_013:sink_channel
	wire          router_018_src_startofpacket;                                                     // router_018:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_018_src_endofpacket;                                                       // router_018:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          sram_avalon_sram_slave_agent_rp_valid;                                            // SRAM_avalon_sram_slave_agent:rp_valid -> router_019:sink_valid
	wire   [93:0] sram_avalon_sram_slave_agent_rp_data;                                             // SRAM_avalon_sram_slave_agent:rp_data -> router_019:sink_data
	wire          sram_avalon_sram_slave_agent_rp_ready;                                            // router_019:sink_ready -> SRAM_avalon_sram_slave_agent:rp_ready
	wire          sram_avalon_sram_slave_agent_rp_startofpacket;                                    // SRAM_avalon_sram_slave_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          sram_avalon_sram_slave_agent_rp_endofpacket;                                      // SRAM_avalon_sram_slave_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                               // SysID_control_slave_agent:rp_valid -> router_020:sink_valid
	wire  [111:0] sysid_control_slave_agent_rp_data;                                                // SysID_control_slave_agent:rp_data -> router_020:sink_data
	wire          sysid_control_slave_agent_rp_ready;                                               // router_020:sink_ready -> SysID_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                       // SysID_control_slave_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                         // SysID_control_slave_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                             // router_020:src_valid -> rsp_demux_015:sink_valid
	wire  [111:0] router_020_src_data;                                                              // router_020:src_data -> rsp_demux_015:sink_data
	wire          router_020_src_ready;                                                             // rsp_demux_015:sink_ready -> router_020:src_ready
	wire   [18:0] router_020_src_channel;                                                           // router_020:src_channel -> rsp_demux_015:sink_channel
	wire          router_020_src_startofpacket;                                                     // router_020:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_020_src_endofpacket;                                                       // router_020:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          flash_flash_data_agent_rp_valid;                                                  // Flash_flash_data_agent:rp_valid -> router_021:sink_valid
	wire  [111:0] flash_flash_data_agent_rp_data;                                                   // Flash_flash_data_agent:rp_data -> router_021:sink_data
	wire          flash_flash_data_agent_rp_ready;                                                  // router_021:sink_ready -> Flash_flash_data_agent:rp_ready
	wire          flash_flash_data_agent_rp_startofpacket;                                          // Flash_flash_data_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          flash_flash_data_agent_rp_endofpacket;                                            // Flash_flash_data_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                             // router_021:src_valid -> rsp_demux_016:sink_valid
	wire  [111:0] router_021_src_data;                                                              // router_021:src_data -> rsp_demux_016:sink_data
	wire          router_021_src_ready;                                                             // rsp_demux_016:sink_ready -> router_021:src_ready
	wire   [18:0] router_021_src_channel;                                                           // router_021:src_channel -> rsp_demux_016:sink_channel
	wire          router_021_src_startofpacket;                                                     // router_021:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_021_src_endofpacket;                                                       // router_021:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          flash_flash_erase_control_agent_rp_valid;                                         // Flash_flash_erase_control_agent:rp_valid -> router_022:sink_valid
	wire  [111:0] flash_flash_erase_control_agent_rp_data;                                          // Flash_flash_erase_control_agent:rp_data -> router_022:sink_data
	wire          flash_flash_erase_control_agent_rp_ready;                                         // router_022:sink_ready -> Flash_flash_erase_control_agent:rp_ready
	wire          flash_flash_erase_control_agent_rp_startofpacket;                                 // Flash_flash_erase_control_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          flash_flash_erase_control_agent_rp_endofpacket;                                   // Flash_flash_erase_control_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                             // router_022:src_valid -> rsp_demux_017:sink_valid
	wire  [111:0] router_022_src_data;                                                              // router_022:src_data -> rsp_demux_017:sink_data
	wire          router_022_src_ready;                                                             // rsp_demux_017:sink_ready -> router_022:src_ready
	wire   [18:0] router_022_src_channel;                                                           // router_022:src_channel -> rsp_demux_017:sink_channel
	wire          router_022_src_startofpacket;                                                     // router_022:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_022_src_endofpacket;                                                       // router_022:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          processor1_debug_mem_slave_agent_rp_valid;                                        // Processor1_debug_mem_slave_agent:rp_valid -> router_023:sink_valid
	wire  [111:0] processor1_debug_mem_slave_agent_rp_data;                                         // Processor1_debug_mem_slave_agent:rp_data -> router_023:sink_data
	wire          processor1_debug_mem_slave_agent_rp_ready;                                        // router_023:sink_ready -> Processor1_debug_mem_slave_agent:rp_ready
	wire          processor1_debug_mem_slave_agent_rp_startofpacket;                                // Processor1_debug_mem_slave_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          processor1_debug_mem_slave_agent_rp_endofpacket;                                  // Processor1_debug_mem_slave_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                             // router_023:src_valid -> rsp_demux_018:sink_valid
	wire  [111:0] router_023_src_data;                                                              // router_023:src_data -> rsp_demux_018:sink_data
	wire          router_023_src_ready;                                                             // rsp_demux_018:sink_ready -> router_023:src_ready
	wire   [18:0] router_023_src_channel;                                                           // router_023:src_channel -> rsp_demux_018:sink_channel
	wire          router_023_src_startofpacket;                                                     // router_023:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_023_src_endofpacket;                                                       // router_023:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          router_002_src_valid;                                                             // router_002:src_valid -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_valid
	wire  [111:0] router_002_src_data;                                                              // router_002:src_data -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                             // JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [18:0] router_002_src_channel;                                                           // router_002:src_channel -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                     // router_002:src_startofpacket -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                       // router_002:src_endofpacket -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_endofpacket
	wire  [111:0] jtag_to_fpga_bridge_master_limiter_cmd_src_data;                                  // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_ready;                                 // cmd_demux_002:sink_ready -> JTAG_to_FPGA_Bridge_master_limiter:cmd_src_ready
	wire   [18:0] jtag_to_fpga_bridge_master_limiter_cmd_src_channel;                               // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket;                         // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket;                           // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                            // rsp_mux_002:src_valid -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_valid
	wire  [111:0] rsp_mux_002_src_data;                                                             // rsp_mux_002:src_data -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                            // JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [18:0] rsp_mux_002_src_channel;                                                          // rsp_mux_002:src_channel -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                    // rsp_mux_002:src_startofpacket -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                      // rsp_mux_002:src_endofpacket -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_endofpacket
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_valid;                                 // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_valid -> JTAG_to_FPGA_Bridge_master_agent:rp_valid
	wire  [111:0] jtag_to_fpga_bridge_master_limiter_rsp_src_data;                                  // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_data -> JTAG_to_FPGA_Bridge_master_agent:rp_data
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_ready;                                 // JTAG_to_FPGA_Bridge_master_agent:rp_ready -> JTAG_to_FPGA_Bridge_master_limiter:rsp_src_ready
	wire   [18:0] jtag_to_fpga_bridge_master_limiter_rsp_src_channel;                               // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_channel -> JTAG_to_FPGA_Bridge_master_agent:rp_channel
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket;                         // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_startofpacket -> JTAG_to_FPGA_Bridge_master_agent:rp_startofpacket
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket;                           // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_endofpacket -> JTAG_to_FPGA_Bridge_master_agent:rp_endofpacket
	wire          sram_avalon_sram_slave_burst_adapter_source0_valid;                               // SRAM_avalon_sram_slave_burst_adapter:source0_valid -> SRAM_avalon_sram_slave_agent:cp_valid
	wire   [93:0] sram_avalon_sram_slave_burst_adapter_source0_data;                                // SRAM_avalon_sram_slave_burst_adapter:source0_data -> SRAM_avalon_sram_slave_agent:cp_data
	wire          sram_avalon_sram_slave_burst_adapter_source0_ready;                               // SRAM_avalon_sram_slave_agent:cp_ready -> SRAM_avalon_sram_slave_burst_adapter:source0_ready
	wire   [18:0] sram_avalon_sram_slave_burst_adapter_source0_channel;                             // SRAM_avalon_sram_slave_burst_adapter:source0_channel -> SRAM_avalon_sram_slave_agent:cp_channel
	wire          sram_avalon_sram_slave_burst_adapter_source0_startofpacket;                       // SRAM_avalon_sram_slave_burst_adapter:source0_startofpacket -> SRAM_avalon_sram_slave_agent:cp_startofpacket
	wire          sram_avalon_sram_slave_burst_adapter_source0_endofpacket;                         // SRAM_avalon_sram_slave_burst_adapter:source0_endofpacket -> SRAM_avalon_sram_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [111:0] cmd_demux_src0_data;                                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [18:0] cmd_demux_src0_channel;                                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                             // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [111:0] cmd_demux_src1_data;                                                              // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                             // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [18:0] cmd_demux_src1_channel;                                                           // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                     // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                       // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                             // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [111:0] cmd_demux_src2_data;                                                              // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                             // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [18:0] cmd_demux_src2_channel;                                                           // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                     // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                       // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                             // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [111:0] cmd_demux_src3_data;                                                              // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                             // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [18:0] cmd_demux_src3_channel;                                                           // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                     // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                       // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                             // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [111:0] cmd_demux_src4_data;                                                              // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                             // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [18:0] cmd_demux_src4_channel;                                                           // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                     // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                       // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                             // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [111:0] cmd_demux_src5_data;                                                              // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                             // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [18:0] cmd_demux_src5_channel;                                                           // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                     // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                       // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                             // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [111:0] cmd_demux_src6_data;                                                              // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                             // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [18:0] cmd_demux_src6_channel;                                                           // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                     // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                       // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                             // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [111:0] cmd_demux_src7_data;                                                              // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                             // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [18:0] cmd_demux_src7_channel;                                                           // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                     // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                       // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                             // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [111:0] cmd_demux_src8_data;                                                              // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                             // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [18:0] cmd_demux_src8_channel;                                                           // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                     // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                       // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                         // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [111:0] cmd_demux_001_src0_data;                                                          // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                         // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [18:0] cmd_demux_001_src0_channel;                                                       // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                 // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                   // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                         // cmd_demux_001:src1_valid -> cmd_mux_002:sink1_valid
	wire  [111:0] cmd_demux_001_src1_data;                                                          // cmd_demux_001:src1_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src1_ready;                                                         // cmd_mux_002:sink1_ready -> cmd_demux_001:src1_ready
	wire   [18:0] cmd_demux_001_src1_channel;                                                       // cmd_demux_001:src1_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                 // cmd_demux_001:src1_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                   // cmd_demux_001:src1_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                         // cmd_demux_001:src2_valid -> cmd_mux_003:sink1_valid
	wire  [111:0] cmd_demux_001_src2_data;                                                          // cmd_demux_001:src2_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src2_ready;                                                         // cmd_mux_003:sink1_ready -> cmd_demux_001:src2_ready
	wire   [18:0] cmd_demux_001_src2_channel;                                                       // cmd_demux_001:src2_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                 // cmd_demux_001:src2_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                   // cmd_demux_001:src2_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                         // cmd_demux_001:src3_valid -> cmd_mux_004:sink1_valid
	wire  [111:0] cmd_demux_001_src3_data;                                                          // cmd_demux_001:src3_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src3_ready;                                                         // cmd_mux_004:sink1_ready -> cmd_demux_001:src3_ready
	wire   [18:0] cmd_demux_001_src3_channel;                                                       // cmd_demux_001:src3_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                 // cmd_demux_001:src3_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                   // cmd_demux_001:src3_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                         // cmd_demux_001:src4_valid -> cmd_mux_005:sink1_valid
	wire  [111:0] cmd_demux_001_src4_data;                                                          // cmd_demux_001:src4_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src4_ready;                                                         // cmd_mux_005:sink1_ready -> cmd_demux_001:src4_ready
	wire   [18:0] cmd_demux_001_src4_channel;                                                       // cmd_demux_001:src4_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                                 // cmd_demux_001:src4_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                   // cmd_demux_001:src4_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                         // cmd_demux_001:src5_valid -> cmd_mux_007:sink1_valid
	wire  [111:0] cmd_demux_001_src5_data;                                                          // cmd_demux_001:src5_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src5_ready;                                                         // cmd_mux_007:sink1_ready -> cmd_demux_001:src5_ready
	wire   [18:0] cmd_demux_001_src5_channel;                                                       // cmd_demux_001:src5_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                                 // cmd_demux_001:src5_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                   // cmd_demux_001:src5_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                         // cmd_demux_001:src6_valid -> cmd_mux_008:sink1_valid
	wire  [111:0] cmd_demux_001_src6_data;                                                          // cmd_demux_001:src6_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src6_ready;                                                         // cmd_mux_008:sink1_ready -> cmd_demux_001:src6_ready
	wire   [18:0] cmd_demux_001_src6_channel;                                                       // cmd_demux_001:src6_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                                 // cmd_demux_001:src6_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                   // cmd_demux_001:src6_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                         // cmd_demux_001:src7_valid -> cmd_mux_010:sink0_valid
	wire  [111:0] cmd_demux_001_src7_data;                                                          // cmd_demux_001:src7_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_001_src7_ready;                                                         // cmd_mux_010:sink0_ready -> cmd_demux_001:src7_ready
	wire   [18:0] cmd_demux_001_src7_channel;                                                       // cmd_demux_001:src7_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_001_src7_startofpacket;                                                 // cmd_demux_001:src7_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                   // cmd_demux_001:src7_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_001_src8_valid;                                                         // cmd_demux_001:src8_valid -> cmd_mux_018:sink0_valid
	wire  [111:0] cmd_demux_001_src8_data;                                                          // cmd_demux_001:src8_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_001_src8_ready;                                                         // cmd_mux_018:sink0_ready -> cmd_demux_001:src8_ready
	wire   [18:0] cmd_demux_001_src8_channel;                                                       // cmd_demux_001:src8_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_001_src8_startofpacket;                                                 // cmd_demux_001:src8_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                   // cmd_demux_001:src8_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                         // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [111:0] cmd_demux_002_src0_data;                                                          // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                         // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire   [18:0] cmd_demux_002_src0_channel;                                                       // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                 // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                   // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                         // cmd_demux_002:src1_valid -> cmd_mux_002:sink2_valid
	wire  [111:0] cmd_demux_002_src1_data;                                                          // cmd_demux_002:src1_data -> cmd_mux_002:sink2_data
	wire          cmd_demux_002_src1_ready;                                                         // cmd_mux_002:sink2_ready -> cmd_demux_002:src1_ready
	wire   [18:0] cmd_demux_002_src1_channel;                                                       // cmd_demux_002:src1_channel -> cmd_mux_002:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                                 // cmd_demux_002:src1_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                   // cmd_demux_002:src1_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          cmd_demux_002_src2_valid;                                                         // cmd_demux_002:src2_valid -> cmd_mux_003:sink2_valid
	wire  [111:0] cmd_demux_002_src2_data;                                                          // cmd_demux_002:src2_data -> cmd_mux_003:sink2_data
	wire          cmd_demux_002_src2_ready;                                                         // cmd_mux_003:sink2_ready -> cmd_demux_002:src2_ready
	wire   [18:0] cmd_demux_002_src2_channel;                                                       // cmd_demux_002:src2_channel -> cmd_mux_003:sink2_channel
	wire          cmd_demux_002_src2_startofpacket;                                                 // cmd_demux_002:src2_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                   // cmd_demux_002:src2_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_002_src3_valid;                                                         // cmd_demux_002:src3_valid -> cmd_mux_004:sink2_valid
	wire  [111:0] cmd_demux_002_src3_data;                                                          // cmd_demux_002:src3_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_002_src3_ready;                                                         // cmd_mux_004:sink2_ready -> cmd_demux_002:src3_ready
	wire   [18:0] cmd_demux_002_src3_channel;                                                       // cmd_demux_002:src3_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_002_src3_startofpacket;                                                 // cmd_demux_002:src3_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                   // cmd_demux_002:src3_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_002_src4_valid;                                                         // cmd_demux_002:src4_valid -> cmd_mux_005:sink2_valid
	wire  [111:0] cmd_demux_002_src4_data;                                                          // cmd_demux_002:src4_data -> cmd_mux_005:sink2_data
	wire          cmd_demux_002_src4_ready;                                                         // cmd_mux_005:sink2_ready -> cmd_demux_002:src4_ready
	wire   [18:0] cmd_demux_002_src4_channel;                                                       // cmd_demux_002:src4_channel -> cmd_mux_005:sink2_channel
	wire          cmd_demux_002_src4_startofpacket;                                                 // cmd_demux_002:src4_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                   // cmd_demux_002:src4_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_002_src5_valid;                                                         // cmd_demux_002:src5_valid -> cmd_mux_007:sink2_valid
	wire  [111:0] cmd_demux_002_src5_data;                                                          // cmd_demux_002:src5_data -> cmd_mux_007:sink2_data
	wire          cmd_demux_002_src5_ready;                                                         // cmd_mux_007:sink2_ready -> cmd_demux_002:src5_ready
	wire   [18:0] cmd_demux_002_src5_channel;                                                       // cmd_demux_002:src5_channel -> cmd_mux_007:sink2_channel
	wire          cmd_demux_002_src5_startofpacket;                                                 // cmd_demux_002:src5_startofpacket -> cmd_mux_007:sink2_startofpacket
	wire          cmd_demux_002_src5_endofpacket;                                                   // cmd_demux_002:src5_endofpacket -> cmd_mux_007:sink2_endofpacket
	wire          cmd_demux_002_src6_valid;                                                         // cmd_demux_002:src6_valid -> cmd_mux_008:sink2_valid
	wire  [111:0] cmd_demux_002_src6_data;                                                          // cmd_demux_002:src6_data -> cmd_mux_008:sink2_data
	wire          cmd_demux_002_src6_ready;                                                         // cmd_mux_008:sink2_ready -> cmd_demux_002:src6_ready
	wire   [18:0] cmd_demux_002_src6_channel;                                                       // cmd_demux_002:src6_channel -> cmd_mux_008:sink2_channel
	wire          cmd_demux_002_src6_startofpacket;                                                 // cmd_demux_002:src6_startofpacket -> cmd_mux_008:sink2_startofpacket
	wire          cmd_demux_002_src6_endofpacket;                                                   // cmd_demux_002:src6_endofpacket -> cmd_mux_008:sink2_endofpacket
	wire          cmd_demux_002_src7_valid;                                                         // cmd_demux_002:src7_valid -> cmd_mux_009:sink0_valid
	wire  [111:0] cmd_demux_002_src7_data;                                                          // cmd_demux_002:src7_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_002_src7_ready;                                                         // cmd_mux_009:sink0_ready -> cmd_demux_002:src7_ready
	wire   [18:0] cmd_demux_002_src7_channel;                                                       // cmd_demux_002:src7_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_002_src7_startofpacket;                                                 // cmd_demux_002:src7_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_002_src7_endofpacket;                                                   // cmd_demux_002:src7_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_002_src8_valid;                                                         // cmd_demux_002:src8_valid -> cmd_mux_010:sink1_valid
	wire  [111:0] cmd_demux_002_src8_data;                                                          // cmd_demux_002:src8_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_002_src8_ready;                                                         // cmd_mux_010:sink1_ready -> cmd_demux_002:src8_ready
	wire   [18:0] cmd_demux_002_src8_channel;                                                       // cmd_demux_002:src8_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_002_src8_startofpacket;                                                 // cmd_demux_002:src8_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_002_src8_endofpacket;                                                   // cmd_demux_002:src8_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_002_src9_valid;                                                         // cmd_demux_002:src9_valid -> cmd_mux_011:sink0_valid
	wire  [111:0] cmd_demux_002_src9_data;                                                          // cmd_demux_002:src9_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_002_src9_ready;                                                         // cmd_mux_011:sink0_ready -> cmd_demux_002:src9_ready
	wire   [18:0] cmd_demux_002_src9_channel;                                                       // cmd_demux_002:src9_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_002_src9_startofpacket;                                                 // cmd_demux_002:src9_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_002_src9_endofpacket;                                                   // cmd_demux_002:src9_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_002_src10_valid;                                                        // cmd_demux_002:src10_valid -> cmd_mux_012:sink0_valid
	wire  [111:0] cmd_demux_002_src10_data;                                                         // cmd_demux_002:src10_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_002_src10_ready;                                                        // cmd_mux_012:sink0_ready -> cmd_demux_002:src10_ready
	wire   [18:0] cmd_demux_002_src10_channel;                                                      // cmd_demux_002:src10_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_002_src10_startofpacket;                                                // cmd_demux_002:src10_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_002_src10_endofpacket;                                                  // cmd_demux_002:src10_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_002_src11_valid;                                                        // cmd_demux_002:src11_valid -> cmd_mux_013:sink0_valid
	wire  [111:0] cmd_demux_002_src11_data;                                                         // cmd_demux_002:src11_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_002_src11_ready;                                                        // cmd_mux_013:sink0_ready -> cmd_demux_002:src11_ready
	wire   [18:0] cmd_demux_002_src11_channel;                                                      // cmd_demux_002:src11_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_002_src11_startofpacket;                                                // cmd_demux_002:src11_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_002_src11_endofpacket;                                                  // cmd_demux_002:src11_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_002_src12_valid;                                                        // cmd_demux_002:src12_valid -> cmd_mux_014:sink0_valid
	wire  [111:0] cmd_demux_002_src12_data;                                                         // cmd_demux_002:src12_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_002_src12_ready;                                                        // cmd_mux_014:sink0_ready -> cmd_demux_002:src12_ready
	wire   [18:0] cmd_demux_002_src12_channel;                                                      // cmd_demux_002:src12_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_002_src12_startofpacket;                                                // cmd_demux_002:src12_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_002_src12_endofpacket;                                                  // cmd_demux_002:src12_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_002_src13_valid;                                                        // cmd_demux_002:src13_valid -> cmd_mux_015:sink0_valid
	wire  [111:0] cmd_demux_002_src13_data;                                                         // cmd_demux_002:src13_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_002_src13_ready;                                                        // cmd_mux_015:sink0_ready -> cmd_demux_002:src13_ready
	wire   [18:0] cmd_demux_002_src13_channel;                                                      // cmd_demux_002:src13_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_002_src13_startofpacket;                                                // cmd_demux_002:src13_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_002_src13_endofpacket;                                                  // cmd_demux_002:src13_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_002_src14_valid;                                                        // cmd_demux_002:src14_valid -> cmd_mux_016:sink0_valid
	wire  [111:0] cmd_demux_002_src14_data;                                                         // cmd_demux_002:src14_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_002_src14_ready;                                                        // cmd_mux_016:sink0_ready -> cmd_demux_002:src14_ready
	wire   [18:0] cmd_demux_002_src14_channel;                                                      // cmd_demux_002:src14_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_002_src14_startofpacket;                                                // cmd_demux_002:src14_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_002_src14_endofpacket;                                                  // cmd_demux_002:src14_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_002_src15_valid;                                                        // cmd_demux_002:src15_valid -> cmd_mux_017:sink0_valid
	wire  [111:0] cmd_demux_002_src15_data;                                                         // cmd_demux_002:src15_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_002_src15_ready;                                                        // cmd_mux_017:sink0_ready -> cmd_demux_002:src15_ready
	wire   [18:0] cmd_demux_002_src15_channel;                                                      // cmd_demux_002:src15_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_002_src15_startofpacket;                                                // cmd_demux_002:src15_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_002_src15_endofpacket;                                                  // cmd_demux_002:src15_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                         // cmd_demux_003:src0_valid -> cmd_mux_008:sink3_valid
	wire  [111:0] cmd_demux_003_src0_data;                                                          // cmd_demux_003:src0_data -> cmd_mux_008:sink3_data
	wire          cmd_demux_003_src0_ready;                                                         // cmd_mux_008:sink3_ready -> cmd_demux_003:src0_ready
	wire   [18:0] cmd_demux_003_src0_channel;                                                       // cmd_demux_003:src0_channel -> cmd_mux_008:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                                 // cmd_demux_003:src0_startofpacket -> cmd_mux_008:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                   // cmd_demux_003:src0_endofpacket -> cmd_mux_008:sink3_endofpacket
	wire          cmd_demux_003_src1_valid;                                                         // cmd_demux_003:src1_valid -> cmd_mux_018:sink1_valid
	wire  [111:0] cmd_demux_003_src1_data;                                                          // cmd_demux_003:src1_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_003_src1_ready;                                                         // cmd_mux_018:sink1_ready -> cmd_demux_003:src1_ready
	wire   [18:0] cmd_demux_003_src1_channel;                                                       // cmd_demux_003:src1_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_003_src1_startofpacket;                                                 // cmd_demux_003:src1_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                   // cmd_demux_003:src1_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_004_src0_valid;                                                         // cmd_demux_004:src0_valid -> cmd_mux_006:sink1_valid
	wire  [111:0] cmd_demux_004_src0_data;                                                          // cmd_demux_004:src0_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_004_src0_ready;                                                         // cmd_mux_006:sink1_ready -> cmd_demux_004:src0_ready
	wire   [18:0] cmd_demux_004_src0_channel;                                                       // cmd_demux_004:src0_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_004_src0_startofpacket;                                                 // cmd_demux_004:src0_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                   // cmd_demux_004:src0_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_004_src1_valid;                                                         // cmd_demux_004:src1_valid -> cmd_mux_008:sink4_valid
	wire  [111:0] cmd_demux_004_src1_data;                                                          // cmd_demux_004:src1_data -> cmd_mux_008:sink4_data
	wire          cmd_demux_004_src1_ready;                                                         // cmd_mux_008:sink4_ready -> cmd_demux_004:src1_ready
	wire   [18:0] cmd_demux_004_src1_channel;                                                       // cmd_demux_004:src1_channel -> cmd_mux_008:sink4_channel
	wire          cmd_demux_004_src1_startofpacket;                                                 // cmd_demux_004:src1_startofpacket -> cmd_mux_008:sink4_startofpacket
	wire          cmd_demux_004_src1_endofpacket;                                                   // cmd_demux_004:src1_endofpacket -> cmd_mux_008:sink4_endofpacket
	wire          rsp_demux_src0_valid;                                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [111:0] rsp_demux_src0_data;                                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [18:0] rsp_demux_src0_channel;                                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                             // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [111:0] rsp_demux_src1_data;                                                              // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                             // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [18:0] rsp_demux_src1_channel;                                                           // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                     // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                       // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                             // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [111:0] rsp_demux_src2_data;                                                              // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                             // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire   [18:0] rsp_demux_src2_channel;                                                           // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                     // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                       // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                         // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [111:0] rsp_demux_001_src0_data;                                                          // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                         // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [18:0] rsp_demux_001_src0_channel;                                                       // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                 // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                   // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                         // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [111:0] rsp_demux_002_src0_data;                                                          // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                         // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [18:0] rsp_demux_002_src0_channel;                                                       // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                 // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                   // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                         // rsp_demux_002:src1_valid -> rsp_mux_001:sink1_valid
	wire  [111:0] rsp_demux_002_src1_data;                                                          // rsp_demux_002:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_002_src1_ready;                                                         // rsp_mux_001:sink1_ready -> rsp_demux_002:src1_ready
	wire   [18:0] rsp_demux_002_src1_channel;                                                       // rsp_demux_002:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_002_src1_startofpacket;                                                 // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                   // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src2_valid;                                                         // rsp_demux_002:src2_valid -> rsp_mux_002:sink1_valid
	wire  [111:0] rsp_demux_002_src2_data;                                                          // rsp_demux_002:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_002_src2_ready;                                                         // rsp_mux_002:sink1_ready -> rsp_demux_002:src2_ready
	wire   [18:0] rsp_demux_002_src2_channel;                                                       // rsp_demux_002:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_002_src2_startofpacket;                                                 // rsp_demux_002:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                                   // rsp_demux_002:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                         // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [111:0] rsp_demux_003_src0_data;                                                          // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                         // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [18:0] rsp_demux_003_src0_channel;                                                       // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                 // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                   // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                         // rsp_demux_003:src1_valid -> rsp_mux_001:sink2_valid
	wire  [111:0] rsp_demux_003_src1_data;                                                          // rsp_demux_003:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_003_src1_ready;                                                         // rsp_mux_001:sink2_ready -> rsp_demux_003:src1_ready
	wire   [18:0] rsp_demux_003_src1_channel;                                                       // rsp_demux_003:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_003_src1_startofpacket;                                                 // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                   // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src2_valid;                                                         // rsp_demux_003:src2_valid -> rsp_mux_002:sink2_valid
	wire  [111:0] rsp_demux_003_src2_data;                                                          // rsp_demux_003:src2_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_003_src2_ready;                                                         // rsp_mux_002:sink2_ready -> rsp_demux_003:src2_ready
	wire   [18:0] rsp_demux_003_src2_channel;                                                       // rsp_demux_003:src2_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_003_src2_startofpacket;                                                 // rsp_demux_003:src2_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                                   // rsp_demux_003:src2_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_004_src0_valid;                                                         // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [111:0] rsp_demux_004_src0_data;                                                          // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                         // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [18:0] rsp_demux_004_src0_channel;                                                       // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                 // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                   // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                         // rsp_demux_004:src1_valid -> rsp_mux_001:sink3_valid
	wire  [111:0] rsp_demux_004_src1_data;                                                          // rsp_demux_004:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_004_src1_ready;                                                         // rsp_mux_001:sink3_ready -> rsp_demux_004:src1_ready
	wire   [18:0] rsp_demux_004_src1_channel;                                                       // rsp_demux_004:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_004_src1_startofpacket;                                                 // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                   // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src2_valid;                                                         // rsp_demux_004:src2_valid -> rsp_mux_002:sink3_valid
	wire  [111:0] rsp_demux_004_src2_data;                                                          // rsp_demux_004:src2_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_004_src2_ready;                                                         // rsp_mux_002:sink3_ready -> rsp_demux_004:src2_ready
	wire   [18:0] rsp_demux_004_src2_channel;                                                       // rsp_demux_004:src2_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_004_src2_startofpacket;                                                 // rsp_demux_004:src2_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                   // rsp_demux_004:src2_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_005_src0_valid;                                                         // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [111:0] rsp_demux_005_src0_data;                                                          // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                         // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [18:0] rsp_demux_005_src0_channel;                                                       // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                 // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                   // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                         // rsp_demux_005:src1_valid -> rsp_mux_001:sink4_valid
	wire  [111:0] rsp_demux_005_src1_data;                                                          // rsp_demux_005:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_005_src1_ready;                                                         // rsp_mux_001:sink4_ready -> rsp_demux_005:src1_ready
	wire   [18:0] rsp_demux_005_src1_channel;                                                       // rsp_demux_005:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_005_src1_startofpacket;                                                 // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                   // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src2_valid;                                                         // rsp_demux_005:src2_valid -> rsp_mux_002:sink4_valid
	wire  [111:0] rsp_demux_005_src2_data;                                                          // rsp_demux_005:src2_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_005_src2_ready;                                                         // rsp_mux_002:sink4_ready -> rsp_demux_005:src2_ready
	wire   [18:0] rsp_demux_005_src2_channel;                                                       // rsp_demux_005:src2_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_005_src2_startofpacket;                                                 // rsp_demux_005:src2_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                                   // rsp_demux_005:src2_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_006_src0_valid;                                                         // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [111:0] rsp_demux_006_src0_data;                                                          // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                         // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [18:0] rsp_demux_006_src0_channel;                                                       // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                 // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                   // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                         // rsp_demux_006:src1_valid -> rsp_mux_004:sink0_valid
	wire  [111:0] rsp_demux_006_src1_data;                                                          // rsp_demux_006:src1_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_006_src1_ready;                                                         // rsp_mux_004:sink0_ready -> rsp_demux_006:src1_ready
	wire   [18:0] rsp_demux_006_src1_channel;                                                       // rsp_demux_006:src1_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_006_src1_startofpacket;                                                 // rsp_demux_006:src1_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                   // rsp_demux_006:src1_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_007_src0_valid;                                                         // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [111:0] rsp_demux_007_src0_data;                                                          // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                         // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [18:0] rsp_demux_007_src0_channel;                                                       // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                 // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                   // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                         // rsp_demux_007:src1_valid -> rsp_mux_001:sink5_valid
	wire  [111:0] rsp_demux_007_src1_data;                                                          // rsp_demux_007:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_007_src1_ready;                                                         // rsp_mux_001:sink5_ready -> rsp_demux_007:src1_ready
	wire   [18:0] rsp_demux_007_src1_channel;                                                       // rsp_demux_007:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_007_src1_startofpacket;                                                 // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                   // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_007_src2_valid;                                                         // rsp_demux_007:src2_valid -> rsp_mux_002:sink5_valid
	wire  [111:0] rsp_demux_007_src2_data;                                                          // rsp_demux_007:src2_data -> rsp_mux_002:sink5_data
	wire          rsp_demux_007_src2_ready;                                                         // rsp_mux_002:sink5_ready -> rsp_demux_007:src2_ready
	wire   [18:0] rsp_demux_007_src2_channel;                                                       // rsp_demux_007:src2_channel -> rsp_mux_002:sink5_channel
	wire          rsp_demux_007_src2_startofpacket;                                                 // rsp_demux_007:src2_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire          rsp_demux_007_src2_endofpacket;                                                   // rsp_demux_007:src2_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire          rsp_demux_008_src0_valid;                                                         // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [111:0] rsp_demux_008_src0_data;                                                          // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                         // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [18:0] rsp_demux_008_src0_channel;                                                       // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                 // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                   // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                         // rsp_demux_008:src1_valid -> rsp_mux_001:sink6_valid
	wire  [111:0] rsp_demux_008_src1_data;                                                          // rsp_demux_008:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_008_src1_ready;                                                         // rsp_mux_001:sink6_ready -> rsp_demux_008:src1_ready
	wire   [18:0] rsp_demux_008_src1_channel;                                                       // rsp_demux_008:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_008_src1_startofpacket;                                                 // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                   // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_008_src2_valid;                                                         // rsp_demux_008:src2_valid -> rsp_mux_002:sink6_valid
	wire  [111:0] rsp_demux_008_src2_data;                                                          // rsp_demux_008:src2_data -> rsp_mux_002:sink6_data
	wire          rsp_demux_008_src2_ready;                                                         // rsp_mux_002:sink6_ready -> rsp_demux_008:src2_ready
	wire   [18:0] rsp_demux_008_src2_channel;                                                       // rsp_demux_008:src2_channel -> rsp_mux_002:sink6_channel
	wire          rsp_demux_008_src2_startofpacket;                                                 // rsp_demux_008:src2_startofpacket -> rsp_mux_002:sink6_startofpacket
	wire          rsp_demux_008_src2_endofpacket;                                                   // rsp_demux_008:src2_endofpacket -> rsp_mux_002:sink6_endofpacket
	wire          rsp_demux_008_src3_valid;                                                         // rsp_demux_008:src3_valid -> rsp_mux_003:sink0_valid
	wire  [111:0] rsp_demux_008_src3_data;                                                          // rsp_demux_008:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_008_src3_ready;                                                         // rsp_mux_003:sink0_ready -> rsp_demux_008:src3_ready
	wire   [18:0] rsp_demux_008_src3_channel;                                                       // rsp_demux_008:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_008_src3_startofpacket;                                                 // rsp_demux_008:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_008_src3_endofpacket;                                                   // rsp_demux_008:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_008_src4_valid;                                                         // rsp_demux_008:src4_valid -> rsp_mux_004:sink1_valid
	wire  [111:0] rsp_demux_008_src4_data;                                                          // rsp_demux_008:src4_data -> rsp_mux_004:sink1_data
	wire          rsp_demux_008_src4_ready;                                                         // rsp_mux_004:sink1_ready -> rsp_demux_008:src4_ready
	wire   [18:0] rsp_demux_008_src4_channel;                                                       // rsp_demux_008:src4_channel -> rsp_mux_004:sink1_channel
	wire          rsp_demux_008_src4_startofpacket;                                                 // rsp_demux_008:src4_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire          rsp_demux_008_src4_endofpacket;                                                   // rsp_demux_008:src4_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          rsp_demux_009_src0_valid;                                                         // rsp_demux_009:src0_valid -> rsp_mux_002:sink7_valid
	wire  [111:0] rsp_demux_009_src0_data;                                                          // rsp_demux_009:src0_data -> rsp_mux_002:sink7_data
	wire          rsp_demux_009_src0_ready;                                                         // rsp_mux_002:sink7_ready -> rsp_demux_009:src0_ready
	wire   [18:0] rsp_demux_009_src0_channel;                                                       // rsp_demux_009:src0_channel -> rsp_mux_002:sink7_channel
	wire          rsp_demux_009_src0_startofpacket;                                                 // rsp_demux_009:src0_startofpacket -> rsp_mux_002:sink7_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                   // rsp_demux_009:src0_endofpacket -> rsp_mux_002:sink7_endofpacket
	wire          rsp_demux_010_src0_valid;                                                         // rsp_demux_010:src0_valid -> rsp_mux_001:sink7_valid
	wire  [111:0] rsp_demux_010_src0_data;                                                          // rsp_demux_010:src0_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_010_src0_ready;                                                         // rsp_mux_001:sink7_ready -> rsp_demux_010:src0_ready
	wire   [18:0] rsp_demux_010_src0_channel;                                                       // rsp_demux_010:src0_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_010_src0_startofpacket;                                                 // rsp_demux_010:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                   // rsp_demux_010:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_010_src1_valid;                                                         // rsp_demux_010:src1_valid -> rsp_mux_002:sink8_valid
	wire  [111:0] rsp_demux_010_src1_data;                                                          // rsp_demux_010:src1_data -> rsp_mux_002:sink8_data
	wire          rsp_demux_010_src1_ready;                                                         // rsp_mux_002:sink8_ready -> rsp_demux_010:src1_ready
	wire   [18:0] rsp_demux_010_src1_channel;                                                       // rsp_demux_010:src1_channel -> rsp_mux_002:sink8_channel
	wire          rsp_demux_010_src1_startofpacket;                                                 // rsp_demux_010:src1_startofpacket -> rsp_mux_002:sink8_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                   // rsp_demux_010:src1_endofpacket -> rsp_mux_002:sink8_endofpacket
	wire          rsp_demux_011_src0_valid;                                                         // rsp_demux_011:src0_valid -> rsp_mux_002:sink9_valid
	wire  [111:0] rsp_demux_011_src0_data;                                                          // rsp_demux_011:src0_data -> rsp_mux_002:sink9_data
	wire          rsp_demux_011_src0_ready;                                                         // rsp_mux_002:sink9_ready -> rsp_demux_011:src0_ready
	wire   [18:0] rsp_demux_011_src0_channel;                                                       // rsp_demux_011:src0_channel -> rsp_mux_002:sink9_channel
	wire          rsp_demux_011_src0_startofpacket;                                                 // rsp_demux_011:src0_startofpacket -> rsp_mux_002:sink9_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                   // rsp_demux_011:src0_endofpacket -> rsp_mux_002:sink9_endofpacket
	wire          rsp_demux_012_src0_valid;                                                         // rsp_demux_012:src0_valid -> rsp_mux_002:sink10_valid
	wire  [111:0] rsp_demux_012_src0_data;                                                          // rsp_demux_012:src0_data -> rsp_mux_002:sink10_data
	wire          rsp_demux_012_src0_ready;                                                         // rsp_mux_002:sink10_ready -> rsp_demux_012:src0_ready
	wire   [18:0] rsp_demux_012_src0_channel;                                                       // rsp_demux_012:src0_channel -> rsp_mux_002:sink10_channel
	wire          rsp_demux_012_src0_startofpacket;                                                 // rsp_demux_012:src0_startofpacket -> rsp_mux_002:sink10_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                   // rsp_demux_012:src0_endofpacket -> rsp_mux_002:sink10_endofpacket
	wire          rsp_demux_013_src0_valid;                                                         // rsp_demux_013:src0_valid -> rsp_mux_002:sink11_valid
	wire  [111:0] rsp_demux_013_src0_data;                                                          // rsp_demux_013:src0_data -> rsp_mux_002:sink11_data
	wire          rsp_demux_013_src0_ready;                                                         // rsp_mux_002:sink11_ready -> rsp_demux_013:src0_ready
	wire   [18:0] rsp_demux_013_src0_channel;                                                       // rsp_demux_013:src0_channel -> rsp_mux_002:sink11_channel
	wire          rsp_demux_013_src0_startofpacket;                                                 // rsp_demux_013:src0_startofpacket -> rsp_mux_002:sink11_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                   // rsp_demux_013:src0_endofpacket -> rsp_mux_002:sink11_endofpacket
	wire          rsp_demux_014_src0_valid;                                                         // rsp_demux_014:src0_valid -> rsp_mux_002:sink12_valid
	wire  [111:0] rsp_demux_014_src0_data;                                                          // rsp_demux_014:src0_data -> rsp_mux_002:sink12_data
	wire          rsp_demux_014_src0_ready;                                                         // rsp_mux_002:sink12_ready -> rsp_demux_014:src0_ready
	wire   [18:0] rsp_demux_014_src0_channel;                                                       // rsp_demux_014:src0_channel -> rsp_mux_002:sink12_channel
	wire          rsp_demux_014_src0_startofpacket;                                                 // rsp_demux_014:src0_startofpacket -> rsp_mux_002:sink12_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                   // rsp_demux_014:src0_endofpacket -> rsp_mux_002:sink12_endofpacket
	wire          rsp_demux_015_src0_valid;                                                         // rsp_demux_015:src0_valid -> rsp_mux_002:sink13_valid
	wire  [111:0] rsp_demux_015_src0_data;                                                          // rsp_demux_015:src0_data -> rsp_mux_002:sink13_data
	wire          rsp_demux_015_src0_ready;                                                         // rsp_mux_002:sink13_ready -> rsp_demux_015:src0_ready
	wire   [18:0] rsp_demux_015_src0_channel;                                                       // rsp_demux_015:src0_channel -> rsp_mux_002:sink13_channel
	wire          rsp_demux_015_src0_startofpacket;                                                 // rsp_demux_015:src0_startofpacket -> rsp_mux_002:sink13_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                   // rsp_demux_015:src0_endofpacket -> rsp_mux_002:sink13_endofpacket
	wire          rsp_demux_016_src0_valid;                                                         // rsp_demux_016:src0_valid -> rsp_mux_002:sink14_valid
	wire  [111:0] rsp_demux_016_src0_data;                                                          // rsp_demux_016:src0_data -> rsp_mux_002:sink14_data
	wire          rsp_demux_016_src0_ready;                                                         // rsp_mux_002:sink14_ready -> rsp_demux_016:src0_ready
	wire   [18:0] rsp_demux_016_src0_channel;                                                       // rsp_demux_016:src0_channel -> rsp_mux_002:sink14_channel
	wire          rsp_demux_016_src0_startofpacket;                                                 // rsp_demux_016:src0_startofpacket -> rsp_mux_002:sink14_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                   // rsp_demux_016:src0_endofpacket -> rsp_mux_002:sink14_endofpacket
	wire          rsp_demux_017_src0_valid;                                                         // rsp_demux_017:src0_valid -> rsp_mux_002:sink15_valid
	wire  [111:0] rsp_demux_017_src0_data;                                                          // rsp_demux_017:src0_data -> rsp_mux_002:sink15_data
	wire          rsp_demux_017_src0_ready;                                                         // rsp_mux_002:sink15_ready -> rsp_demux_017:src0_ready
	wire   [18:0] rsp_demux_017_src0_channel;                                                       // rsp_demux_017:src0_channel -> rsp_mux_002:sink15_channel
	wire          rsp_demux_017_src0_startofpacket;                                                 // rsp_demux_017:src0_startofpacket -> rsp_mux_002:sink15_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                   // rsp_demux_017:src0_endofpacket -> rsp_mux_002:sink15_endofpacket
	wire          rsp_demux_018_src0_valid;                                                         // rsp_demux_018:src0_valid -> rsp_mux_001:sink8_valid
	wire  [111:0] rsp_demux_018_src0_data;                                                          // rsp_demux_018:src0_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_018_src0_ready;                                                         // rsp_mux_001:sink8_ready -> rsp_demux_018:src0_ready
	wire   [18:0] rsp_demux_018_src0_channel;                                                       // rsp_demux_018:src0_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_018_src0_startofpacket;                                                 // rsp_demux_018:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                   // rsp_demux_018:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_018_src1_valid;                                                         // rsp_demux_018:src1_valid -> rsp_mux_003:sink1_valid
	wire  [111:0] rsp_demux_018_src1_data;                                                          // rsp_demux_018:src1_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_018_src1_ready;                                                         // rsp_mux_003:sink1_ready -> rsp_demux_018:src1_ready
	wire   [18:0] rsp_demux_018_src1_channel;                                                       // rsp_demux_018:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_018_src1_startofpacket;                                                 // rsp_demux_018:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                                   // rsp_demux_018:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          router_019_src_valid;                                                             // router_019:src_valid -> SRAM_avalon_sram_slave_rsp_width_adapter:in_valid
	wire   [93:0] router_019_src_data;                                                              // router_019:src_data -> SRAM_avalon_sram_slave_rsp_width_adapter:in_data
	wire          router_019_src_ready;                                                             // SRAM_avalon_sram_slave_rsp_width_adapter:in_ready -> router_019:src_ready
	wire   [18:0] router_019_src_channel;                                                           // router_019:src_channel -> SRAM_avalon_sram_slave_rsp_width_adapter:in_channel
	wire          router_019_src_startofpacket;                                                     // router_019:src_startofpacket -> SRAM_avalon_sram_slave_rsp_width_adapter:in_startofpacket
	wire          router_019_src_endofpacket;                                                       // router_019:src_endofpacket -> SRAM_avalon_sram_slave_rsp_width_adapter:in_endofpacket
	wire          sram_avalon_sram_slave_rsp_width_adapter_src_valid;                               // SRAM_avalon_sram_slave_rsp_width_adapter:out_valid -> rsp_demux_014:sink_valid
	wire  [111:0] sram_avalon_sram_slave_rsp_width_adapter_src_data;                                // SRAM_avalon_sram_slave_rsp_width_adapter:out_data -> rsp_demux_014:sink_data
	wire          sram_avalon_sram_slave_rsp_width_adapter_src_ready;                               // rsp_demux_014:sink_ready -> SRAM_avalon_sram_slave_rsp_width_adapter:out_ready
	wire   [18:0] sram_avalon_sram_slave_rsp_width_adapter_src_channel;                             // SRAM_avalon_sram_slave_rsp_width_adapter:out_channel -> rsp_demux_014:sink_channel
	wire          sram_avalon_sram_slave_rsp_width_adapter_src_startofpacket;                       // SRAM_avalon_sram_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          sram_avalon_sram_slave_rsp_width_adapter_src_endofpacket;                         // SRAM_avalon_sram_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                            // cmd_mux_014:src_valid -> SRAM_avalon_sram_slave_cmd_width_adapter:in_valid
	wire  [111:0] cmd_mux_014_src_data;                                                             // cmd_mux_014:src_data -> SRAM_avalon_sram_slave_cmd_width_adapter:in_data
	wire          cmd_mux_014_src_ready;                                                            // SRAM_avalon_sram_slave_cmd_width_adapter:in_ready -> cmd_mux_014:src_ready
	wire   [18:0] cmd_mux_014_src_channel;                                                          // cmd_mux_014:src_channel -> SRAM_avalon_sram_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_014_src_startofpacket;                                                    // cmd_mux_014:src_startofpacket -> SRAM_avalon_sram_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                      // cmd_mux_014:src_endofpacket -> SRAM_avalon_sram_slave_cmd_width_adapter:in_endofpacket
	wire          sram_avalon_sram_slave_cmd_width_adapter_src_valid;                               // SRAM_avalon_sram_slave_cmd_width_adapter:out_valid -> SRAM_avalon_sram_slave_burst_adapter:sink0_valid
	wire   [93:0] sram_avalon_sram_slave_cmd_width_adapter_src_data;                                // SRAM_avalon_sram_slave_cmd_width_adapter:out_data -> SRAM_avalon_sram_slave_burst_adapter:sink0_data
	wire          sram_avalon_sram_slave_cmd_width_adapter_src_ready;                               // SRAM_avalon_sram_slave_burst_adapter:sink0_ready -> SRAM_avalon_sram_slave_cmd_width_adapter:out_ready
	wire   [18:0] sram_avalon_sram_slave_cmd_width_adapter_src_channel;                             // SRAM_avalon_sram_slave_cmd_width_adapter:out_channel -> SRAM_avalon_sram_slave_burst_adapter:sink0_channel
	wire          sram_avalon_sram_slave_cmd_width_adapter_src_startofpacket;                       // SRAM_avalon_sram_slave_cmd_width_adapter:out_startofpacket -> SRAM_avalon_sram_slave_burst_adapter:sink0_startofpacket
	wire          sram_avalon_sram_slave_cmd_width_adapter_src_endofpacket;                         // SRAM_avalon_sram_slave_cmd_width_adapter:out_endofpacket -> SRAM_avalon_sram_slave_burst_adapter:sink0_endofpacket
	wire   [18:0] jtag_to_fpga_bridge_master_limiter_cmd_valid_data;                                // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire          audio_subsystem_audio_slave_agent_rdata_fifo_src_valid;                           // Audio_Subsystem_audio_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] audio_subsystem_audio_slave_agent_rdata_fifo_src_data;                            // Audio_Subsystem_audio_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          audio_subsystem_audio_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter:in_0_ready -> Audio_Subsystem_audio_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                    // avalon_st_adapter:out_0_valid -> Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                     // avalon_st_adapter:out_0_data -> Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                    // Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                    // avalon_st_adapter:out_0_error -> Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_valid;                  // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_data;                   // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_ready;                  // avalon_st_adapter_001:in_0_ready -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                // avalon_st_adapter_001:out_0_valid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                 // avalon_st_adapter_001:out_0_data -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                // avalon_st_adapter_001:out_0_error -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          expansion_jp5_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;              // Expansion_JP5_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] expansion_jp5_avalon_parallel_port_slave_agent_rdata_fifo_src_data;               // Expansion_JP5_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          expansion_jp5_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;              // avalon_st_adapter_002:in_0_ready -> Expansion_JP5_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                // avalon_st_adapter_002:out_0_valid -> Expansion_JP5_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                 // avalon_st_adapter_002:out_0_data -> Expansion_JP5_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                // Expansion_JP5_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                // avalon_st_adapter_002:out_0_error -> Expansion_JP5_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;                // Pushbuttons_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_data;                 // Pushbuttons_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;                // avalon_st_adapter_003:in_0_ready -> Pushbuttons_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                // avalon_st_adapter_003:out_0_valid -> Pushbuttons_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                 // avalon_st_adapter_003:out_0_data -> Pushbuttons_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                // Pushbuttons_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                // avalon_st_adapter_003:out_0_error -> Pushbuttons_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          serial_port_avalon_rs232_slave_agent_rdata_fifo_src_valid;                        // Serial_Port_avalon_rs232_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] serial_port_avalon_rs232_slave_agent_rdata_fifo_src_data;                         // Serial_Port_avalon_rs232_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          serial_port_avalon_rs232_slave_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_004:in_0_ready -> Serial_Port_avalon_rs232_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                // avalon_st_adapter_004:out_0_valid -> Serial_Port_avalon_rs232_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                 // avalon_st_adapter_004:out_0_data -> Serial_Port_avalon_rs232_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                // Serial_Port_avalon_rs232_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                // avalon_st_adapter_004:out_0_error -> Serial_Port_avalon_rs232_slave_agent:rdata_fifo_sink_error
	wire          camerad5m_0_camera_slave_agent_rdata_fifo_src_valid;                              // CameraD5M_0_camera_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] camerad5m_0_camera_slave_agent_rdata_fifo_src_data;                               // CameraD5M_0_camera_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          camerad5m_0_camera_slave_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_005:in_0_ready -> CameraD5M_0_camera_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                // avalon_st_adapter_005:out_0_valid -> CameraD5M_0_camera_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                 // avalon_st_adapter_005:out_0_data -> CameraD5M_0_camera_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                // CameraD5M_0_camera_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                // avalon_st_adapter_005:out_0_error -> CameraD5M_0_camera_slave_agent:rdata_fifo_sink_error
	wire          processor2_debug_mem_slave_agent_rdata_fifo_src_valid;                            // Processor2_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] processor2_debug_mem_slave_agent_rdata_fifo_src_data;                             // Processor2_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          processor2_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_006:in_0_ready -> Processor2_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                // avalon_st_adapter_006:out_0_valid -> Processor2_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                 // avalon_st_adapter_006:out_0_data -> Processor2_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                // Processor2_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                // avalon_st_adapter_006:out_0_error -> Processor2_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          interval_timer_s1_agent_rdata_fifo_src_valid;                                     // Interval_Timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] interval_timer_s1_agent_rdata_fifo_src_data;                                      // Interval_Timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          interval_timer_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_007:in_0_ready -> Interval_Timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                // avalon_st_adapter_007:out_0_valid -> Interval_Timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                 // avalon_st_adapter_007:out_0_data -> Interval_Timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                // Interval_Timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                // avalon_st_adapter_007:out_0_error -> Interval_Timer_s1_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                              // SDRAM_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] sdram_s1_agent_rdata_fifo_src_data;                                               // SDRAM_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_008:in_0_ready -> SDRAM_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                // avalon_st_adapter_008:out_0_valid -> SDRAM_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                 // avalon_st_adapter_008:out_0_data -> SDRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                // SDRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                // avalon_st_adapter_008:out_0_error -> SDRAM_s1_agent:rdata_fifo_sink_error
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid;                      // AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] av_config_avalon_av_config_slave_agent_rdata_fifo_src_data;                       // AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready;                      // avalon_st_adapter_009:in_0_ready -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                // avalon_st_adapter_009:out_0_valid -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                 // avalon_st_adapter_009:out_0_data -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                // AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                // avalon_st_adapter_009:out_0_error -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter_010:in_0_ready -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                // avalon_st_adapter_010:out_0_valid -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                 // avalon_st_adapter_010:out_0_data -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                // avalon_st_adapter_010:out_0_error -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          red_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;                   // Red_LEDs_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] red_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_data;                    // Red_LEDs_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          red_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;                   // avalon_st_adapter_011:in_0_ready -> Red_LEDs_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                // avalon_st_adapter_011:out_0_valid -> Red_LEDs_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                 // avalon_st_adapter_011:out_0_data -> Red_LEDs_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                // Red_LEDs_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                // avalon_st_adapter_011:out_0_error -> Red_LEDs_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          green_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;                 // Green_LEDs_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] green_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_data;                  // Green_LEDs_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          green_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;                 // avalon_st_adapter_012:in_0_ready -> Green_LEDs_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                // avalon_st_adapter_012:out_0_valid -> Green_LEDs_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                 // avalon_st_adapter_012:out_0_data -> Green_LEDs_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                // Green_LEDs_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                // avalon_st_adapter_012:out_0_error -> Green_LEDs_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          slider_switches_avalon_parallel_port_slave_agent_rdata_fifo_src_valid;            // Slider_Switches_avalon_parallel_port_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] slider_switches_avalon_parallel_port_slave_agent_rdata_fifo_src_data;             // Slider_Switches_avalon_parallel_port_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          slider_switches_avalon_parallel_port_slave_agent_rdata_fifo_src_ready;            // avalon_st_adapter_013:in_0_ready -> Slider_Switches_avalon_parallel_port_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                // avalon_st_adapter_013:out_0_valid -> Slider_Switches_avalon_parallel_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                 // avalon_st_adapter_013:out_0_data -> Slider_Switches_avalon_parallel_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                // Slider_Switches_avalon_parallel_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                // avalon_st_adapter_013:out_0_error -> Slider_Switches_avalon_parallel_port_slave_agent:rdata_fifo_sink_error
	wire          sram_avalon_sram_slave_agent_rdata_fifo_out_valid;                                // SRAM_avalon_sram_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [17:0] sram_avalon_sram_slave_agent_rdata_fifo_out_data;                                 // SRAM_avalon_sram_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          sram_avalon_sram_slave_agent_rdata_fifo_out_ready;                                // avalon_st_adapter_014:in_0_ready -> SRAM_avalon_sram_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                // avalon_st_adapter_014:out_0_valid -> SRAM_avalon_sram_slave_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_014_out_0_data;                                                 // avalon_st_adapter_014:out_0_data -> SRAM_avalon_sram_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                // SRAM_avalon_sram_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                // avalon_st_adapter_014:out_0_error -> SRAM_avalon_sram_slave_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                                   // SysID_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                                    // SysID_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_015:in_0_ready -> SysID_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                // avalon_st_adapter_015:out_0_valid -> SysID_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                 // avalon_st_adapter_015:out_0_data -> SysID_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                // SysID_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                // avalon_st_adapter_015:out_0_error -> SysID_control_slave_agent:rdata_fifo_sink_error
	wire          flash_flash_data_agent_rdata_fifo_src_valid;                                      // Flash_flash_data_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] flash_flash_data_agent_rdata_fifo_src_data;                                       // Flash_flash_data_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          flash_flash_data_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_016:in_0_ready -> Flash_flash_data_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                // avalon_st_adapter_016:out_0_valid -> Flash_flash_data_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                 // avalon_st_adapter_016:out_0_data -> Flash_flash_data_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                // Flash_flash_data_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                // avalon_st_adapter_016:out_0_error -> Flash_flash_data_agent:rdata_fifo_sink_error
	wire          flash_flash_erase_control_agent_rdata_fifo_src_valid;                             // Flash_flash_erase_control_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] flash_flash_erase_control_agent_rdata_fifo_src_data;                              // Flash_flash_erase_control_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          flash_flash_erase_control_agent_rdata_fifo_src_ready;                             // avalon_st_adapter_017:in_0_ready -> Flash_flash_erase_control_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                // avalon_st_adapter_017:out_0_valid -> Flash_flash_erase_control_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                 // avalon_st_adapter_017:out_0_data -> Flash_flash_erase_control_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                // Flash_flash_erase_control_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                // avalon_st_adapter_017:out_0_error -> Flash_flash_erase_control_agent:rdata_fifo_sink_error
	wire          processor1_debug_mem_slave_agent_rdata_fifo_src_valid;                            // Processor1_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] processor1_debug_mem_slave_agent_rdata_fifo_src_data;                             // Processor1_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          processor1_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_018:in_0_ready -> Processor1_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                // avalon_st_adapter_018:out_0_valid -> Processor1_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                 // avalon_st_adapter_018:out_0_data -> Processor1_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                // Processor1_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                // avalon_st_adapter_018:out_0_error -> Processor1_debug_mem_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) processor2_data_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                    //                       clk.clk
		.reset                  (Processor2_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (processor2_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (processor2_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (processor2_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (processor2_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (processor2_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (processor2_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (processor2_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (processor2_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (processor2_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (processor2_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (processor2_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Processor2_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Processor2_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (Processor2_data_master_byteenable),                                         //                          .byteenable
		.av_read                (Processor2_data_master_read),                                               //                          .read
		.av_readdata            (Processor2_data_master_readdata),                                           //                          .readdata
		.av_write               (Processor2_data_master_write),                                              //                          .write
		.av_writedata           (Processor2_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (Processor2_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) processor1_data_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                    //                       clk.clk
		.reset                  (Processor1_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (processor1_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (processor1_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (processor1_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (processor1_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (processor1_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (processor1_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (processor1_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (processor1_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (processor1_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (processor1_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (processor1_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Processor1_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Processor1_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (Processor1_data_master_byteenable),                                         //                          .byteenable
		.av_read                (Processor1_data_master_read),                                               //                          .read
		.av_readdata            (Processor1_data_master_readdata),                                           //                          .readdata
		.av_write               (Processor1_data_master_write),                                              //                          .write
		.av_writedata           (Processor1_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (Processor1_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) jtag_to_fpga_bridge_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                        //                       clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                          //                     reset.reset
		.uav_address            (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (JTAG_to_FPGA_Bridge_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (JTAG_to_FPGA_Bridge_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (JTAG_to_FPGA_Bridge_master_byteenable),                                         //                          .byteenable
		.av_read                (JTAG_to_FPGA_Bridge_master_read),                                               //                          .read
		.av_readdata            (JTAG_to_FPGA_Bridge_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (JTAG_to_FPGA_Bridge_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (JTAG_to_FPGA_Bridge_master_write),                                              //                          .write
		.av_writedata           (JTAG_to_FPGA_Bridge_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) processor1_instruction_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                           //                       clk.clk
		.reset                  (Processor1_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (processor1_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (processor1_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (processor1_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (processor1_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (processor1_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (processor1_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (processor1_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (processor1_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (processor1_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (processor1_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (processor1_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Processor1_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Processor1_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (Processor1_instruction_master_read),                                               //                          .read
		.av_readdata            (Processor1_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                             //               (terminated)
		.av_byteenable          (4'b1111),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                                 //               (terminated)
		.av_write               (1'b0),                                                                             //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                             //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) processor2_instruction_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                           //                       clk.clk
		.reset                  (Processor2_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (processor2_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (processor2_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (processor2_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (processor2_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (processor2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (processor2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (processor2_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (processor2_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (processor2_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (processor2_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (processor2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Processor2_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Processor2_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (Processor2_instruction_master_read),                                               //                          .read
		.av_readdata            (Processor2_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                             //               (terminated)
		.av_byteenable          (4'b1111),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                                 //               (terminated)
		.av_write               (1'b0),                                                                             //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                             //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_subsystem_audio_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                               //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (audio_subsystem_audio_slave_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (audio_subsystem_audio_slave_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (audio_subsystem_audio_slave_agent_m0_read),            //                         .read
		.uav_write              (audio_subsystem_audio_slave_agent_m0_write),           //                         .write
		.uav_waitrequest        (audio_subsystem_audio_slave_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (audio_subsystem_audio_slave_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (audio_subsystem_audio_slave_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (audio_subsystem_audio_slave_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (audio_subsystem_audio_slave_agent_m0_writedata),       //                         .writedata
		.uav_lock               (audio_subsystem_audio_slave_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (audio_subsystem_audio_slave_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (Audio_Subsystem_audio_slave_address),                  //      avalon_anti_slave_0.address
		.av_write               (Audio_Subsystem_audio_slave_write),                    //                         .write
		.av_read                (Audio_Subsystem_audio_slave_read),                     //                         .read
		.av_readdata            (Audio_Subsystem_audio_slave_readdata),                 //                         .readdata
		.av_writedata           (Audio_Subsystem_audio_slave_writedata),                //                         .writedata
		.av_chipselect          (Audio_Subsystem_audio_slave_chipselect),               //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_2nd_core_avalon_jtag_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                      //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_UART_2nd_Core_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_2nd_Core_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_UART_2nd_Core_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_UART_2nd_Core_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_UART_2nd_Core_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_UART_2nd_Core_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_UART_2nd_Core_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) expansion_jp5_avalon_parallel_port_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),            //                    reset.reset
		.uav_address            (expansion_jp5_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (expansion_jp5_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (expansion_jp5_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (expansion_jp5_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (expansion_jp5_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (expansion_jp5_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (expansion_jp5_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (expansion_jp5_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (expansion_jp5_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (expansion_jp5_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (expansion_jp5_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Expansion_JP5_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Expansion_JP5_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (Expansion_JP5_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (Expansion_JP5_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (Expansion_JP5_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (Expansion_JP5_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (Expansion_JP5_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pushbuttons_avalon_parallel_port_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                        //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (pushbuttons_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pushbuttons_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pushbuttons_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (pushbuttons_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pushbuttons_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pushbuttons_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pushbuttons_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pushbuttons_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pushbuttons_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pushbuttons_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pushbuttons_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Pushbuttons_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Pushbuttons_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (Pushbuttons_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (Pushbuttons_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (Pushbuttons_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (Pushbuttons_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (Pushbuttons_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) serial_port_avalon_rs232_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (serial_port_avalon_rs232_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (serial_port_avalon_rs232_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (serial_port_avalon_rs232_slave_agent_m0_read),          //                         .read
		.uav_write              (serial_port_avalon_rs232_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (serial_port_avalon_rs232_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (serial_port_avalon_rs232_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (serial_port_avalon_rs232_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (serial_port_avalon_rs232_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (serial_port_avalon_rs232_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (serial_port_avalon_rs232_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (serial_port_avalon_rs232_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Serial_Port_avalon_rs232_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Serial_Port_avalon_rs232_slave_write),                  //                         .write
		.av_read                (Serial_Port_avalon_rs232_slave_read),                   //                         .read
		.av_readdata            (Serial_Port_avalon_rs232_slave_readdata),               //                         .readdata
		.av_writedata           (Serial_Port_avalon_rs232_slave_writedata),              //                         .writedata
		.av_byteenable          (Serial_Port_avalon_rs232_slave_byteenable),             //                         .byteenable
		.av_chipselect          (Serial_Port_avalon_rs232_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) camerad5m_0_camera_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                               //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (camerad5m_0_camera_slave_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (camerad5m_0_camera_slave_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (camerad5m_0_camera_slave_agent_m0_read),               //                         .read
		.uav_write              (camerad5m_0_camera_slave_agent_m0_write),              //                         .write
		.uav_waitrequest        (camerad5m_0_camera_slave_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (camerad5m_0_camera_slave_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (camerad5m_0_camera_slave_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (camerad5m_0_camera_slave_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (camerad5m_0_camera_slave_agent_m0_writedata),          //                         .writedata
		.uav_lock               (camerad5m_0_camera_slave_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (camerad5m_0_camera_slave_agent_m0_debugaccess),        //                         .debugaccess
		.av_readdata            (CameraD5M_0_camera_slave_readdata),                    //      avalon_anti_slave_0.readdata
		.av_address             (),                                                     //              (terminated)
		.av_write               (),                                                     //              (terminated)
		.av_read                (),                                                     //              (terminated)
		.av_writedata           (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) processor2_debug_mem_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                            //                      clk.clk
		.reset                  (Processor2_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (processor2_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (processor2_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (processor2_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (processor2_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (processor2_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (processor2_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (processor2_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (processor2_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (processor2_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (processor2_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (processor2_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Processor2_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Processor2_debug_mem_slave_write),                  //                         .write
		.av_read                (Processor2_debug_mem_slave_read),                   //                         .read
		.av_readdata            (Processor2_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (Processor2_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (Processor2_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Processor2_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (Processor2_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interval_timer_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                               //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (interval_timer_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (interval_timer_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (interval_timer_s1_agent_m0_read),                      //                         .read
		.uav_write              (interval_timer_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (interval_timer_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (interval_timer_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (interval_timer_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (interval_timer_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (interval_timer_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (interval_timer_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (interval_timer_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (Interval_Timer_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (Interval_Timer_s1_write),                              //                         .write
		.av_readdata            (Interval_Timer_s1_readdata),                           //                         .readdata
		.av_writedata           (Interval_Timer_s1_writedata),                          //                         .writedata
		.av_chipselect          (Interval_Timer_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                               //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                               //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (SDRAM_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (SDRAM_s1_write),                                       //                         .write
		.av_read                (SDRAM_s1_read),                                        //                         .read
		.av_readdata            (SDRAM_s1_readdata),                                    //                         .readdata
		.av_writedata           (SDRAM_s1_writedata),                                   //                         .writedata
		.av_byteenable          (SDRAM_s1_byteenable),                                  //                         .byteenable
		.av_readdatavalid       (SDRAM_s1_readdatavalid),                               //                         .readdatavalid
		.av_waitrequest         (SDRAM_s1_waitrequest),                                 //                         .waitrequest
		.av_chipselect          (SDRAM_s1_chipselect),                                  //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) av_config_avalon_av_config_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                  //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (av_config_avalon_av_config_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (av_config_avalon_av_config_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (av_config_avalon_av_config_slave_agent_m0_read),          //                         .read
		.uav_write              (av_config_avalon_av_config_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (av_config_avalon_av_config_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (av_config_avalon_av_config_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (av_config_avalon_av_config_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (av_config_avalon_av_config_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (av_config_avalon_av_config_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (av_config_avalon_av_config_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (av_config_avalon_av_config_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (AV_Config_avalon_av_config_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (AV_Config_avalon_av_config_slave_write),                  //                         .write
		.av_read                (AV_Config_avalon_av_config_slave_read),                   //                         .read
		.av_readdata            (AV_Config_avalon_av_config_slave_readdata),               //                         .readdata
		.av_writedata           (AV_Config_avalon_av_config_slave_writedata),              //                         .writedata
		.av_byteenable          (AV_Config_avalon_av_config_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (AV_Config_avalon_av_config_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                               //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),            //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),           //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),       //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (JTAG_UART_avalon_jtag_slave_address),                  //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_avalon_jtag_slave_write),                    //                         .write
		.av_read                (JTAG_UART_avalon_jtag_slave_read),                     //                         .read
		.av_readdata            (JTAG_UART_avalon_jtag_slave_readdata),                 //                         .readdata
		.av_writedata           (JTAG_UART_avalon_jtag_slave_writedata),                //                         .writedata
		.av_waitrequest         (JTAG_UART_avalon_jtag_slave_waitrequest),              //                         .waitrequest
		.av_chipselect          (JTAG_UART_avalon_jtag_slave_chipselect),               //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) red_leds_avalon_parallel_port_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                     //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (red_leds_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (red_leds_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (red_leds_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (red_leds_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (red_leds_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (red_leds_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (red_leds_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (red_leds_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (red_leds_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (red_leds_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (red_leds_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Red_LEDs_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Red_LEDs_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (Red_LEDs_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (Red_LEDs_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (Red_LEDs_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (Red_LEDs_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (Red_LEDs_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) green_leds_avalon_parallel_port_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                       //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (green_leds_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (green_leds_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (green_leds_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (green_leds_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (green_leds_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (green_leds_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (green_leds_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (green_leds_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (green_leds_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (green_leds_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (green_leds_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Green_LEDs_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Green_LEDs_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (Green_LEDs_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (Green_LEDs_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (Green_LEDs_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (Green_LEDs_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (Green_LEDs_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) slider_switches_avalon_parallel_port_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                            //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (slider_switches_avalon_parallel_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (slider_switches_avalon_parallel_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (slider_switches_avalon_parallel_port_slave_agent_m0_read),          //                         .read
		.uav_write              (slider_switches_avalon_parallel_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (slider_switches_avalon_parallel_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (slider_switches_avalon_parallel_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (slider_switches_avalon_parallel_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (slider_switches_avalon_parallel_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (slider_switches_avalon_parallel_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (slider_switches_avalon_parallel_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (slider_switches_avalon_parallel_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Slider_Switches_avalon_parallel_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Slider_Switches_avalon_parallel_port_slave_write),                  //                         .write
		.av_read                (Slider_Switches_avalon_parallel_port_slave_read),                   //                         .read
		.av_readdata            (Slider_Switches_avalon_parallel_port_slave_readdata),               //                         .readdata
		.av_writedata           (Slider_Switches_avalon_parallel_port_slave_writedata),              //                         .writedata
		.av_byteenable          (Slider_Switches_avalon_parallel_port_slave_byteenable),             //                         .byteenable
		.av_chipselect          (Slider_Switches_avalon_parallel_port_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                                  //              (terminated)
		.av_burstcount          (),                                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                                              //              (terminated)
		.av_waitrequest         (1'b0),                                                              //              (terminated)
		.av_writebyteenable     (),                                                                  //              (terminated)
		.av_lock                (),                                                                  //              (terminated)
		.av_clken               (),                                                                  //              (terminated)
		.uav_clken              (1'b0),                                                              //              (terminated)
		.av_debugaccess         (),                                                                  //              (terminated)
		.av_outputenable        (),                                                                  //              (terminated)
		.uav_response           (),                                                                  //              (terminated)
		.av_response            (2'b00),                                                             //              (terminated)
		.uav_writeresponsevalid (),                                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (20),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_avalon_sram_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                               //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_avalon_sram_slave_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (sram_avalon_sram_slave_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (sram_avalon_sram_slave_agent_m0_read),                 //                         .read
		.uav_write              (sram_avalon_sram_slave_agent_m0_write),                //                         .write
		.uav_waitrequest        (sram_avalon_sram_slave_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (sram_avalon_sram_slave_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (sram_avalon_sram_slave_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (sram_avalon_sram_slave_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (sram_avalon_sram_slave_agent_m0_writedata),            //                         .writedata
		.uav_lock               (sram_avalon_sram_slave_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (sram_avalon_sram_slave_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (SRAM_avalon_sram_slave_address),                       //      avalon_anti_slave_0.address
		.av_write               (SRAM_avalon_sram_slave_write),                         //                         .write
		.av_read                (SRAM_avalon_sram_slave_read),                          //                         .read
		.av_readdata            (SRAM_avalon_sram_slave_readdata),                      //                         .readdata
		.av_writedata           (SRAM_avalon_sram_slave_writedata),                     //                         .writedata
		.av_byteenable          (SRAM_avalon_sram_slave_byteenable),                    //                         .byteenable
		.av_readdatavalid       (SRAM_avalon_sram_slave_readdatavalid),                 //                         .readdatavalid
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                               //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),                    //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),                   //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),               //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (SysID_control_slave_address),                          //      avalon_anti_slave_0.address
		.av_readdata            (SysID_control_slave_readdata),                         //                         .readdata
		.av_write               (),                                                     //              (terminated)
		.av_read                (),                                                     //              (terminated)
		.av_writedata           (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (21),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) flash_flash_data_translator (
		.clk                    (System_PLL_sys_clk_clk),                               //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (flash_flash_data_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (flash_flash_data_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (flash_flash_data_agent_m0_read),                       //                         .read
		.uav_write              (flash_flash_data_agent_m0_write),                      //                         .write
		.uav_waitrequest        (flash_flash_data_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (flash_flash_data_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (flash_flash_data_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (flash_flash_data_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (flash_flash_data_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (flash_flash_data_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (flash_flash_data_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (Flash_flash_data_address),                             //      avalon_anti_slave_0.address
		.av_write               (Flash_flash_data_write),                               //                         .write
		.av_read                (Flash_flash_data_read),                                //                         .read
		.av_readdata            (Flash_flash_data_readdata),                            //                         .readdata
		.av_writedata           (Flash_flash_data_writedata),                           //                         .writedata
		.av_byteenable          (Flash_flash_data_byteenable),                          //                         .byteenable
		.av_waitrequest         (Flash_flash_data_waitrequest),                         //                         .waitrequest
		.av_chipselect          (Flash_flash_data_chipselect),                          //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) flash_flash_erase_control_translator (
		.clk                    (System_PLL_sys_clk_clk),                               //                      clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (flash_flash_erase_control_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (flash_flash_erase_control_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (flash_flash_erase_control_agent_m0_read),              //                         .read
		.uav_write              (flash_flash_erase_control_agent_m0_write),             //                         .write
		.uav_waitrequest        (flash_flash_erase_control_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (flash_flash_erase_control_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (flash_flash_erase_control_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (flash_flash_erase_control_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (flash_flash_erase_control_agent_m0_writedata),         //                         .writedata
		.uav_lock               (flash_flash_erase_control_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (flash_flash_erase_control_agent_m0_debugaccess),       //                         .debugaccess
		.av_write               (Flash_flash_erase_control_write),                      //      avalon_anti_slave_0.write
		.av_read                (Flash_flash_erase_control_read),                       //                         .read
		.av_readdata            (Flash_flash_erase_control_readdata),                   //                         .readdata
		.av_writedata           (Flash_flash_erase_control_writedata),                  //                         .writedata
		.av_byteenable          (Flash_flash_erase_control_byteenable),                 //                         .byteenable
		.av_waitrequest         (Flash_flash_erase_control_waitrequest),                //                         .waitrequest
		.av_chipselect          (Flash_flash_erase_control_chipselect),                 //                         .chipselect
		.av_address             (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) processor1_debug_mem_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                            //                      clk.clk
		.reset                  (Processor1_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (processor1_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (processor1_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (processor1_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (processor1_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (processor1_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (processor1_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (processor1_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (processor1_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (processor1_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (processor1_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (processor1_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Processor1_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Processor1_debug_mem_slave_write),                  //                         .write
		.av_read                (Processor1_debug_mem_slave_read),                   //                         .read
		.av_readdata            (Processor1_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (Processor1_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (Processor1_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Processor1_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (Processor1_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor2_data_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                    //       clk.clk
		.reset                 (Processor2_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (processor2_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (processor2_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (processor2_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (processor2_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (processor2_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (processor2_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (processor2_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (processor2_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (processor2_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (processor2_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (processor2_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (processor2_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (processor2_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (processor2_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (processor2_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (processor2_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                         //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                          //          .data
		.rp_channel            (rsp_mux_src_channel),                                                       //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                   //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                         //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor1_data_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                    //       clk.clk
		.reset                 (Processor1_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (processor1_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (processor1_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (processor1_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (processor1_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (processor1_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (processor1_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (processor1_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (processor1_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (processor1_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (processor1_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (processor1_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (processor1_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (processor1_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (processor1_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (processor1_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (processor1_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                     //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_to_fpga_bridge_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                        //       clk.clk
		.reset                 (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.av_address            (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (jtag_to_fpga_bridge_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (jtag_to_fpga_bridge_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (jtag_to_fpga_bridge_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (jtag_to_fpga_bridge_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (jtag_to_fpga_bridge_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (jtag_to_fpga_bridge_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (jtag_to_fpga_bridge_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (jtag_to_fpga_bridge_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (jtag_to_fpga_bridge_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor1_instruction_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                           //       clk.clk
		.reset                 (Processor1_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (processor1_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (processor1_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (processor1_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (processor1_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (processor1_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (processor1_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (processor1_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (processor1_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (processor1_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (processor1_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (processor1_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (processor1_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (processor1_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (processor1_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (processor1_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (processor1_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                            //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                             //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                          //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                                    //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                                      //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                            //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor2_instruction_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                           //       clk.clk
		.reset                 (Processor2_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (processor2_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (processor2_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (processor2_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (processor2_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (processor2_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (processor2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (processor2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (processor2_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (processor2_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (processor2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (processor2_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (processor2_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (processor2_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (processor2_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (processor2_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (processor2_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                            //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                             //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                          //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                                    //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                                      //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                            //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_subsystem_audio_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                       //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (audio_subsystem_audio_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_subsystem_audio_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_subsystem_audio_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_subsystem_audio_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_subsystem_audio_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_subsystem_audio_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_subsystem_audio_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_subsystem_audio_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_subsystem_audio_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_subsystem_audio_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_subsystem_audio_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_subsystem_audio_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_subsystem_audio_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_subsystem_audio_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_subsystem_audio_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_subsystem_audio_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                          //                .channel
		.rf_sink_ready           (audio_subsystem_audio_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_subsystem_audio_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_subsystem_audio_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_subsystem_audio_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_subsystem_audio_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_subsystem_audio_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_subsystem_audio_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_subsystem_audio_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_subsystem_audio_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_subsystem_audio_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (audio_subsystem_audio_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_subsystem_audio_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_subsystem_audio_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_subsystem_audio_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (audio_subsystem_audio_slave_agent_rf_source_data),             //        in.data
		.in_valid          (audio_subsystem_audio_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_subsystem_audio_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_subsystem_audio_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_subsystem_audio_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_subsystem_audio_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_subsystem_audio_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_subsystem_audio_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_subsystem_audio_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_subsystem_audio_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_2nd_core_avalon_jtag_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                               //                .channel
		.rf_sink_ready           (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) expansion_jp5_avalon_parallel_port_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                    //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (expansion_jp5_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (expansion_jp5_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (expansion_jp5_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (expansion_jp5_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (expansion_jp5_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (expansion_jp5_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (expansion_jp5_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (expansion_jp5_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (expansion_jp5_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (expansion_jp5_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (expansion_jp5_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (expansion_jp5_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (expansion_jp5_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (expansion_jp5_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (expansion_jp5_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (expansion_jp5_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                                     //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                                     //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                      //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                               //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                                   //                .channel
		.rf_sink_ready           (expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (expansion_jp5_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (expansion_jp5_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (expansion_jp5_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (expansion_jp5_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (expansion_jp5_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (expansion_jp5_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (expansion_jp5_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (expansion_jp5_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                    //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (expansion_jp5_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (expansion_jp5_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (expansion_jp5_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (expansion_jp5_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (expansion_jp5_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (expansion_jp5_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pushbuttons_avalon_parallel_port_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                  //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (pushbuttons_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pushbuttons_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pushbuttons_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pushbuttons_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pushbuttons_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (pushbuttons_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pushbuttons_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pushbuttons_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (pushbuttons_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pushbuttons_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (pushbuttons_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (pushbuttons_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pushbuttons_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (pushbuttons_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (pushbuttons_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (pushbuttons_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                                 //                .channel
		.rf_sink_ready           (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pushbuttons_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pushbuttons_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pushbuttons_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pushbuttons_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pushbuttons_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                  //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (pushbuttons_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pushbuttons_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pushbuttons_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pushbuttons_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pushbuttons_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pushbuttons_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) serial_port_avalon_rs232_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (serial_port_avalon_rs232_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (serial_port_avalon_rs232_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (serial_port_avalon_rs232_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (serial_port_avalon_rs232_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (serial_port_avalon_rs232_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (serial_port_avalon_rs232_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (serial_port_avalon_rs232_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (serial_port_avalon_rs232_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (serial_port_avalon_rs232_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (serial_port_avalon_rs232_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (serial_port_avalon_rs232_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (serial_port_avalon_rs232_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (serial_port_avalon_rs232_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (serial_port_avalon_rs232_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (serial_port_avalon_rs232_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (serial_port_avalon_rs232_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                         //                .channel
		.rf_sink_ready           (serial_port_avalon_rs232_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (serial_port_avalon_rs232_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (serial_port_avalon_rs232_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (serial_port_avalon_rs232_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (serial_port_avalon_rs232_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (serial_port_avalon_rs232_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (serial_port_avalon_rs232_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (serial_port_avalon_rs232_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (serial_port_avalon_rs232_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (serial_port_avalon_rs232_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (serial_port_avalon_rs232_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (serial_port_avalon_rs232_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (serial_port_avalon_rs232_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) serial_port_avalon_rs232_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (serial_port_avalon_rs232_slave_agent_rf_source_data),             //        in.data
		.in_valid          (serial_port_avalon_rs232_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (serial_port_avalon_rs232_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (serial_port_avalon_rs232_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (serial_port_avalon_rs232_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (serial_port_avalon_rs232_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (serial_port_avalon_rs232_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (serial_port_avalon_rs232_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (serial_port_avalon_rs232_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (serial_port_avalon_rs232_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) camerad5m_0_camera_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                    //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (camerad5m_0_camera_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (camerad5m_0_camera_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (camerad5m_0_camera_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (camerad5m_0_camera_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (camerad5m_0_camera_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (camerad5m_0_camera_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (camerad5m_0_camera_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (camerad5m_0_camera_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (camerad5m_0_camera_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (camerad5m_0_camera_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (camerad5m_0_camera_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (camerad5m_0_camera_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (camerad5m_0_camera_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (camerad5m_0_camera_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (camerad5m_0_camera_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (camerad5m_0_camera_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                   //                .channel
		.rf_sink_ready           (camerad5m_0_camera_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (camerad5m_0_camera_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (camerad5m_0_camera_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (camerad5m_0_camera_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (camerad5m_0_camera_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (camerad5m_0_camera_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (camerad5m_0_camera_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (camerad5m_0_camera_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (camerad5m_0_camera_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (camerad5m_0_camera_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (camerad5m_0_camera_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (camerad5m_0_camera_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (camerad5m_0_camera_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) camerad5m_0_camera_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                    //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (camerad5m_0_camera_slave_agent_rf_source_data),             //        in.data
		.in_valid          (camerad5m_0_camera_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (camerad5m_0_camera_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (camerad5m_0_camera_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (camerad5m_0_camera_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (camerad5m_0_camera_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (camerad5m_0_camera_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (camerad5m_0_camera_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (camerad5m_0_camera_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (camerad5m_0_camera_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) processor2_debug_mem_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                      //             clk.clk
		.reset                   (Processor2_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (processor2_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (processor2_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (processor2_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (processor2_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (processor2_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (processor2_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (processor2_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (processor2_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (processor2_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (processor2_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (processor2_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (processor2_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (processor2_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (processor2_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (processor2_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (processor2_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                     //                .channel
		.rf_sink_ready           (processor2_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (processor2_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (processor2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (processor2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (processor2_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (processor2_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (processor2_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (processor2_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (processor2_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (processor2_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (processor2_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (processor2_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (processor2_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) processor2_debug_mem_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                      //       clk.clk
		.reset             (Processor2_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (processor2_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (processor2_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (processor2_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (processor2_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (processor2_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (processor2_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (processor2_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (processor2_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (processor2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (processor2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) interval_timer_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                               //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (interval_timer_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (interval_timer_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (interval_timer_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (interval_timer_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (interval_timer_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (interval_timer_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (interval_timer_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (interval_timer_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (interval_timer_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (interval_timer_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (interval_timer_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (interval_timer_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (interval_timer_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (interval_timer_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (interval_timer_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (interval_timer_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                              //                .channel
		.rf_sink_ready           (interval_timer_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (interval_timer_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (interval_timer_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (interval_timer_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (interval_timer_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (interval_timer_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (interval_timer_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (interval_timer_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (interval_timer_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (interval_timer_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (interval_timer_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interval_timer_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (interval_timer_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (interval_timer_s1_agent_rf_source_data),               //        in.data
		.in_valid          (interval_timer_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (interval_timer_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (interval_timer_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (interval_timer_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (interval_timer_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (interval_timer_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (interval_timer_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (interval_timer_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (interval_timer_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                               //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                              //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) av_config_avalon_av_config_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                            //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (av_config_avalon_av_config_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (av_config_avalon_av_config_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (av_config_avalon_av_config_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (av_config_avalon_av_config_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (av_config_avalon_av_config_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (av_config_avalon_av_config_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (av_config_avalon_av_config_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (av_config_avalon_av_config_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (av_config_avalon_av_config_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (av_config_avalon_av_config_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (av_config_avalon_av_config_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (av_config_avalon_av_config_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (av_config_avalon_av_config_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (av_config_avalon_av_config_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (av_config_avalon_av_config_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (av_config_avalon_av_config_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                           //                .channel
		.rf_sink_ready           (av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (av_config_avalon_av_config_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (av_config_avalon_av_config_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (av_config_avalon_av_config_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (av_config_avalon_av_config_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (av_config_avalon_av_config_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) av_config_avalon_av_config_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (av_config_avalon_av_config_slave_agent_rf_source_data),             //        in.data
		.in_valid          (av_config_avalon_av_config_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (av_config_avalon_av_config_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (av_config_avalon_av_config_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (av_config_avalon_av_config_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                       //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) red_leds_avalon_parallel_port_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                               //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (red_leds_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (red_leds_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (red_leds_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (red_leds_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (red_leds_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (red_leds_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (red_leds_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (red_leds_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (red_leds_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (red_leds_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (red_leds_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (red_leds_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (red_leds_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (red_leds_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (red_leds_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (red_leds_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                              //                .channel
		.rf_sink_ready           (red_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (red_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (red_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (red_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (red_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (red_leds_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (red_leds_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (red_leds_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (red_leds_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (red_leds_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (red_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (red_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (red_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) red_leds_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                               //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (red_leds_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (red_leds_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (red_leds_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (red_leds_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (red_leds_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (red_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (red_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (red_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (red_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (red_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) green_leds_avalon_parallel_port_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                 //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (green_leds_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (green_leds_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (green_leds_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (green_leds_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (green_leds_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (green_leds_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (green_leds_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (green_leds_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (green_leds_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (green_leds_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (green_leds_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (green_leds_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (green_leds_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (green_leds_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (green_leds_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (green_leds_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                                                  //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                                                //                .channel
		.rf_sink_ready           (green_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (green_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (green_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (green_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (green_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (green_leds_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (green_leds_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (green_leds_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (green_leds_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (green_leds_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (green_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (green_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (green_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) green_leds_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                 //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (green_leds_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (green_leds_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (green_leds_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (green_leds_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (green_leds_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (green_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (green_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (green_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (green_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (green_leds_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) slider_switches_avalon_parallel_port_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                      //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (slider_switches_avalon_parallel_port_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (slider_switches_avalon_parallel_port_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (slider_switches_avalon_parallel_port_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (slider_switches_avalon_parallel_port_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (slider_switches_avalon_parallel_port_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (slider_switches_avalon_parallel_port_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (slider_switches_avalon_parallel_port_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (slider_switches_avalon_parallel_port_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (slider_switches_avalon_parallel_port_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (slider_switches_avalon_parallel_port_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (slider_switches_avalon_parallel_port_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (slider_switches_avalon_parallel_port_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (slider_switches_avalon_parallel_port_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (slider_switches_avalon_parallel_port_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (slider_switches_avalon_parallel_port_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (slider_switches_avalon_parallel_port_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                                                       //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                                                       //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                                        //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                                                 //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                                                     //                .channel
		.rf_sink_ready           (slider_switches_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (slider_switches_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (slider_switches_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (slider_switches_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (slider_switches_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (slider_switches_avalon_parallel_port_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (slider_switches_avalon_parallel_port_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (slider_switches_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (slider_switches_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (slider_switches_avalon_parallel_port_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                                           //                .error
		.rdata_fifo_src_ready    (slider_switches_avalon_parallel_port_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (slider_switches_avalon_parallel_port_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (slider_switches_avalon_parallel_port_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slider_switches_avalon_parallel_port_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                      //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (slider_switches_avalon_parallel_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (slider_switches_avalon_parallel_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (slider_switches_avalon_parallel_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (slider_switches_avalon_parallel_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (slider_switches_avalon_parallel_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (slider_switches_avalon_parallel_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (slider_switches_avalon_parallel_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (slider_switches_avalon_parallel_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (slider_switches_avalon_parallel_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (slider_switches_avalon_parallel_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_avalon_sram_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                     //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (sram_avalon_sram_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_avalon_sram_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_avalon_sram_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_avalon_sram_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_avalon_sram_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_avalon_sram_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_avalon_sram_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_avalon_sram_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_avalon_sram_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_avalon_sram_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_avalon_sram_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_avalon_sram_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_avalon_sram_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_avalon_sram_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_avalon_sram_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_avalon_sram_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_avalon_sram_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_avalon_sram_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_avalon_sram_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_avalon_sram_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_avalon_sram_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_avalon_sram_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_avalon_sram_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_avalon_sram_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_avalon_sram_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_avalon_sram_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_avalon_sram_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_avalon_sram_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_avalon_sram_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_avalon_sram_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_avalon_sram_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_avalon_sram_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (sram_avalon_sram_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_avalon_sram_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_avalon_sram_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_avalon_sram_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                  //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (sram_avalon_sram_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sram_avalon_sram_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sram_avalon_sram_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sram_avalon_sram_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sram_avalon_sram_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sram_avalon_sram_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sram_avalon_sram_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sram_avalon_sram_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sram_avalon_sram_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sram_avalon_sram_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_avalon_sram_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_avalon_sram_slave_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (sram_avalon_sram_slave_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (sram_avalon_sram_slave_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (sram_avalon_sram_slave_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (sram_avalon_sram_slave_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (sram_avalon_sram_slave_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                               //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_015_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                              //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) flash_flash_data_agent (
		.clk                     (System_PLL_sys_clk_clk),                               //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (flash_flash_data_agent_m0_address),                    //              m0.address
		.m0_burstcount           (flash_flash_data_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (flash_flash_data_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (flash_flash_data_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (flash_flash_data_agent_m0_lock),                       //                .lock
		.m0_readdata             (flash_flash_data_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (flash_flash_data_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (flash_flash_data_agent_m0_read),                       //                .read
		.m0_waitrequest          (flash_flash_data_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (flash_flash_data_agent_m0_writedata),                  //                .writedata
		.m0_write                (flash_flash_data_agent_m0_write),                      //                .write
		.rp_endofpacket          (flash_flash_data_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (flash_flash_data_agent_rp_ready),                      //                .ready
		.rp_valid                (flash_flash_data_agent_rp_valid),                      //                .valid
		.rp_data                 (flash_flash_data_agent_rp_data),                       //                .data
		.rp_startofpacket        (flash_flash_data_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_016_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                              //                .channel
		.rf_sink_ready           (flash_flash_data_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (flash_flash_data_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (flash_flash_data_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (flash_flash_data_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (flash_flash_data_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (flash_flash_data_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (flash_flash_data_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (flash_flash_data_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (flash_flash_data_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (flash_flash_data_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (flash_flash_data_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (flash_flash_data_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (flash_flash_data_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) flash_flash_data_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (flash_flash_data_agent_rf_source_data),                //        in.data
		.in_valid          (flash_flash_data_agent_rf_source_valid),               //          .valid
		.in_ready          (flash_flash_data_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (flash_flash_data_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (flash_flash_data_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (flash_flash_data_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (flash_flash_data_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (flash_flash_data_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (flash_flash_data_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (flash_flash_data_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) flash_flash_erase_control_agent (
		.clk                     (System_PLL_sys_clk_clk),                                     //             clk.clk
		.reset                   (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (flash_flash_erase_control_agent_m0_address),                 //              m0.address
		.m0_burstcount           (flash_flash_erase_control_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (flash_flash_erase_control_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (flash_flash_erase_control_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (flash_flash_erase_control_agent_m0_lock),                    //                .lock
		.m0_readdata             (flash_flash_erase_control_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (flash_flash_erase_control_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (flash_flash_erase_control_agent_m0_read),                    //                .read
		.m0_waitrequest          (flash_flash_erase_control_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (flash_flash_erase_control_agent_m0_writedata),               //                .writedata
		.m0_write                (flash_flash_erase_control_agent_m0_write),                   //                .write
		.rp_endofpacket          (flash_flash_erase_control_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (flash_flash_erase_control_agent_rp_ready),                   //                .ready
		.rp_valid                (flash_flash_erase_control_agent_rp_valid),                   //                .valid
		.rp_data                 (flash_flash_erase_control_agent_rp_data),                    //                .data
		.rp_startofpacket        (flash_flash_erase_control_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_017_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                                    //                .channel
		.rf_sink_ready           (flash_flash_erase_control_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (flash_flash_erase_control_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (flash_flash_erase_control_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (flash_flash_erase_control_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (flash_flash_erase_control_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (flash_flash_erase_control_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (flash_flash_erase_control_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (flash_flash_erase_control_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (flash_flash_erase_control_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (flash_flash_erase_control_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (flash_flash_erase_control_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (flash_flash_erase_control_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (flash_flash_erase_control_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) flash_flash_erase_control_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                     //       clk.clk
		.reset             (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (flash_flash_erase_control_agent_rf_source_data),             //        in.data
		.in_valid          (flash_flash_erase_control_agent_rf_source_valid),            //          .valid
		.in_ready          (flash_flash_erase_control_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (flash_flash_erase_control_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (flash_flash_erase_control_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (flash_flash_erase_control_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (flash_flash_erase_control_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (flash_flash_erase_control_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (flash_flash_erase_control_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (flash_flash_erase_control_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) processor1_debug_mem_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                      //             clk.clk
		.reset                   (Processor1_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (processor1_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (processor1_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (processor1_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (processor1_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (processor1_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (processor1_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (processor1_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (processor1_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (processor1_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (processor1_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (processor1_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (processor1_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (processor1_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (processor1_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (processor1_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (processor1_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_018_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                                     //                .channel
		.rf_sink_ready           (processor1_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (processor1_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (processor1_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (processor1_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (processor1_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (processor1_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (processor1_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (processor1_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (processor1_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (processor1_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (processor1_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (processor1_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (processor1_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) processor1_debug_mem_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                      //       clk.clk
		.reset             (Processor1_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (processor1_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (processor1_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (processor1_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (processor1_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (processor1_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (processor1_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (processor1_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (processor1_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (processor1_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (processor1_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	nios_system_mm_interconnect_0_router router (
		.sink_ready         (processor2_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (processor2_data_master_agent_cp_valid),         //          .valid
		.sink_data          (processor2_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (processor2_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor2_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (Processor2_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (processor1_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (processor1_data_master_agent_cp_valid),         //          .valid
		.sink_data          (processor1_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (processor1_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor1_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset              (Processor1_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_to_fpga_bridge_master_agent_cp_ready),            //      sink.ready
		.sink_valid         (jtag_to_fpga_bridge_master_agent_cp_valid),            //          .valid
		.sink_data          (jtag_to_fpga_bridge_master_agent_cp_data),             //          .data
		.sink_startofpacket (jtag_to_fpga_bridge_master_agent_cp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (jtag_to_fpga_bridge_master_agent_cp_endofpacket),      //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (processor1_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (processor1_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (processor1_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (processor1_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor1_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (Processor1_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_003_src_ready),                                 //       src.ready
		.src_valid          (router_003_src_valid),                                 //          .valid
		.src_data           (router_003_src_data),                                  //          .data
		.src_channel        (router_003_src_channel),                               //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (processor2_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (processor2_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (processor2_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (processor2_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor2_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (Processor2_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_004_src_ready),                                 //       src.ready
		.src_valid          (router_004_src_valid),                                 //          .valid
		.src_data           (router_004_src_data),                                  //          .data
		.src_channel        (router_004_src_channel),                               //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (audio_subsystem_audio_slave_agent_rp_ready),           //      sink.ready
		.sink_valid         (audio_subsystem_audio_slave_agent_rp_valid),           //          .valid
		.sink_data          (audio_subsystem_audio_slave_agent_rp_data),            //          .data
		.sink_startofpacket (audio_subsystem_audio_slave_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (audio_subsystem_audio_slave_agent_rp_endofpacket),     //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                 //       src.ready
		.src_valid          (router_005_src_valid),                                 //          .valid
		.src_data           (router_005_src_data),                                  //          .data
		.src_channel        (router_005_src_channel),                               //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                      //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_006_src_ready),                                        //       src.ready
		.src_valid          (router_006_src_valid),                                        //          .valid
		.src_data           (router_006_src_data),                                         //          .data
		.src_channel        (router_006_src_channel),                                      //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                   //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_005 router_007 (
		.sink_ready         (expansion_jp5_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (expansion_jp5_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (expansion_jp5_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (expansion_jp5_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (expansion_jp5_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_007_src_ready),                                            //       src.ready
		.src_valid          (router_007_src_valid),                                            //          .valid
		.src_data           (router_007_src_data),                                             //          .data
		.src_channel        (router_007_src_channel),                                          //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_005 router_008 (
		.sink_ready         (pushbuttons_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pushbuttons_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (pushbuttons_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pushbuttons_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pushbuttons_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                        //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_008_src_ready),                                          //       src.ready
		.src_valid          (router_008_src_valid),                                          //          .valid
		.src_data           (router_008_src_data),                                           //          .data
		.src_channel        (router_008_src_channel),                                        //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                     //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_005 router_009 (
		.sink_ready         (serial_port_avalon_rs232_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (serial_port_avalon_rs232_slave_agent_rp_valid),         //          .valid
		.sink_data          (serial_port_avalon_rs232_slave_agent_rp_data),          //          .data
		.sink_startofpacket (serial_port_avalon_rs232_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (serial_port_avalon_rs232_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_009_src_ready),                                  //       src.ready
		.src_valid          (router_009_src_valid),                                  //          .valid
		.src_data           (router_009_src_data),                                   //          .data
		.src_channel        (router_009_src_channel),                                //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                             //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_005 router_010 (
		.sink_ready         (camerad5m_0_camera_slave_agent_rp_ready),              //      sink.ready
		.sink_valid         (camerad5m_0_camera_slave_agent_rp_valid),              //          .valid
		.sink_data          (camerad5m_0_camera_slave_agent_rp_data),               //          .data
		.sink_startofpacket (camerad5m_0_camera_slave_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (camerad5m_0_camera_slave_agent_rp_endofpacket),        //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                 //       src.ready
		.src_valid          (router_010_src_valid),                                 //          .valid
		.src_data           (router_010_src_data),                                  //          .data
		.src_channel        (router_010_src_channel),                               //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_011 router_011 (
		.sink_ready         (processor2_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (processor2_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (processor2_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (processor2_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor2_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset              (Processor2_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_011_src_ready),                              //       src.ready
		.src_valid          (router_011_src_valid),                              //          .valid
		.src_data           (router_011_src_data),                               //          .data
		.src_channel        (router_011_src_channel),                            //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                         //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_005 router_012 (
		.sink_ready         (interval_timer_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (interval_timer_s1_agent_rp_valid),                     //          .valid
		.sink_data          (interval_timer_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (interval_timer_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (interval_timer_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                 //       src.ready
		.src_valid          (router_012_src_valid),                                 //          .valid
		.src_data           (router_012_src_data),                                  //          .data
		.src_channel        (router_012_src_channel),                               //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_013 router_013 (
		.sink_ready         (sdram_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                              //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                 //       src.ready
		.src_valid          (router_013_src_valid),                                 //          .valid
		.src_data           (router_013_src_data),                                  //          .data
		.src_channel        (router_013_src_channel),                               //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_014 router_014 (
		.sink_ready         (av_config_avalon_av_config_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (av_config_avalon_av_config_slave_agent_rp_valid),         //          .valid
		.sink_data          (av_config_avalon_av_config_slave_agent_rp_data),          //          .data
		.sink_startofpacket (av_config_avalon_av_config_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (av_config_avalon_av_config_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                  //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_014_src_ready),                                    //       src.ready
		.src_valid          (router_014_src_valid),                                    //          .valid
		.src_data           (router_014_src_data),                                     //          .data
		.src_channel        (router_014_src_channel),                                  //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                               //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_015 router_015 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),           //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),           //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),            //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),     //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                 //       src.ready
		.src_valid          (router_015_src_valid),                                 //          .valid
		.src_data           (router_015_src_data),                                  //          .data
		.src_channel        (router_015_src_channel),                               //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_014 router_016 (
		.sink_ready         (red_leds_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (red_leds_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (red_leds_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (red_leds_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (red_leds_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                     //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_016_src_ready),                                       //       src.ready
		.src_valid          (router_016_src_valid),                                       //          .valid
		.src_data           (router_016_src_data),                                        //          .data
		.src_channel        (router_016_src_channel),                                     //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_014 router_017 (
		.sink_ready         (green_leds_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (green_leds_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (green_leds_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (green_leds_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (green_leds_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_017_src_ready),                                         //       src.ready
		.src_valid          (router_017_src_valid),                                         //          .valid
		.src_data           (router_017_src_data),                                          //          .data
		.src_channel        (router_017_src_channel),                                       //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_014 router_018 (
		.sink_ready         (slider_switches_avalon_parallel_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (slider_switches_avalon_parallel_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (slider_switches_avalon_parallel_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (slider_switches_avalon_parallel_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (slider_switches_avalon_parallel_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_018_src_ready),                                              //       src.ready
		.src_valid          (router_018_src_valid),                                              //          .valid
		.src_data           (router_018_src_data),                                               //          .data
		.src_channel        (router_018_src_channel),                                            //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                                         //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_019 router_019 (
		.sink_ready         (sram_avalon_sram_slave_agent_rp_ready),                //      sink.ready
		.sink_valid         (sram_avalon_sram_slave_agent_rp_valid),                //          .valid
		.sink_data          (sram_avalon_sram_slave_agent_rp_data),                 //          .data
		.sink_startofpacket (sram_avalon_sram_slave_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (sram_avalon_sram_slave_agent_rp_endofpacket),          //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                                 //       src.ready
		.src_valid          (router_019_src_valid),                                 //          .valid
		.src_data           (router_019_src_data),                                  //          .data
		.src_channel        (router_019_src_channel),                               //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_014 router_020 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),                   //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),                   //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),                    //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),             //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                                 //       src.ready
		.src_valid          (router_020_src_valid),                                 //          .valid
		.src_data           (router_020_src_data),                                  //          .data
		.src_channel        (router_020_src_channel),                               //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_014 router_021 (
		.sink_ready         (flash_flash_data_agent_rp_ready),                      //      sink.ready
		.sink_valid         (flash_flash_data_agent_rp_valid),                      //          .valid
		.sink_data          (flash_flash_data_agent_rp_data),                       //          .data
		.sink_startofpacket (flash_flash_data_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (flash_flash_data_agent_rp_endofpacket),                //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                                 //       src.ready
		.src_valid          (router_021_src_valid),                                 //          .valid
		.src_data           (router_021_src_data),                                  //          .data
		.src_channel        (router_021_src_channel),                               //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_014 router_022 (
		.sink_ready         (flash_flash_erase_control_agent_rp_ready),             //      sink.ready
		.sink_valid         (flash_flash_erase_control_agent_rp_valid),             //          .valid
		.sink_data          (flash_flash_erase_control_agent_rp_data),              //          .data
		.sink_startofpacket (flash_flash_erase_control_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (flash_flash_erase_control_agent_rp_endofpacket),       //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                                 //       src.ready
		.src_valid          (router_022_src_valid),                                 //          .valid
		.src_data           (router_022_src_data),                                  //          .data
		.src_channel        (router_022_src_channel),                               //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_023 router_023 (
		.sink_ready         (processor1_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (processor1_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (processor1_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (processor1_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor1_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset              (Processor1_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_023_src_ready),                              //       src.ready
		.src_valid          (router_023_src_valid),                              //          .valid
		.src_data           (router_023_src_data),                               //          .data
		.src_channel        (router_023_src_channel),                            //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                         //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (19),
		.VALID_WIDTH               (19),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) jtag_to_fpga_bridge_master_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                   //       clk.clk
		.reset                  (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                     //          .valid
		.cmd_sink_data          (router_002_src_data),                                      //          .data
		.cmd_sink_channel       (router_002_src_channel),                                   //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                             //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                               //          .endofpacket
		.cmd_src_ready          (jtag_to_fpga_bridge_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (jtag_to_fpga_bridge_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (jtag_to_fpga_bridge_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                    //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                  //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                              //          .endofpacket
		.rsp_src_ready          (jtag_to_fpga_bridge_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (jtag_to_fpga_bridge_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (jtag_to_fpga_bridge_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (jtag_to_fpga_bridge_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (jtag_to_fpga_bridge_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (69),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (19),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (61),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) sram_avalon_sram_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                     //       cr0.clk
		.reset                 (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (sram_avalon_sram_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_avalon_sram_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_avalon_sram_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_avalon_sram_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_avalon_sram_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_avalon_sram_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_avalon_sram_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_avalon_sram_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_avalon_sram_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_avalon_sram_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_avalon_sram_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_avalon_sram_slave_burst_adapter_source0_ready)          //          .ready
	);

	nios_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (Processor2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                             //      sink.ready
		.sink_channel       (router_src_channel),                           //          .channel
		.sink_data          (router_src_data),                              //          .data
		.sink_startofpacket (router_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_src0_data),                          //          .data
		.src0_channel       (cmd_demux_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                         //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                         //          .valid
		.src1_data          (cmd_demux_src1_data),                          //          .data
		.src1_channel       (cmd_demux_src1_channel),                       //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                         //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                         //          .valid
		.src2_data          (cmd_demux_src2_data),                          //          .data
		.src2_channel       (cmd_demux_src2_channel),                       //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                   //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                         //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                         //          .valid
		.src3_data          (cmd_demux_src3_data),                          //          .data
		.src3_channel       (cmd_demux_src3_channel),                       //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                 //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                   //          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                         //      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                         //          .valid
		.src4_data          (cmd_demux_src4_data),                          //          .data
		.src4_channel       (cmd_demux_src4_channel),                       //          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                 //          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                   //          .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                         //      src5.ready
		.src5_valid         (cmd_demux_src5_valid),                         //          .valid
		.src5_data          (cmd_demux_src5_data),                          //          .data
		.src5_channel       (cmd_demux_src5_channel),                       //          .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                 //          .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                   //          .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                         //      src6.ready
		.src6_valid         (cmd_demux_src6_valid),                         //          .valid
		.src6_data          (cmd_demux_src6_data),                          //          .data
		.src6_channel       (cmd_demux_src6_channel),                       //          .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                 //          .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                   //          .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                         //      src7.ready
		.src7_valid         (cmd_demux_src7_valid),                         //          .valid
		.src7_data          (cmd_demux_src7_data),                          //          .data
		.src7_channel       (cmd_demux_src7_channel),                       //          .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                 //          .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                   //          .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                         //      src8.ready
		.src8_valid         (cmd_demux_src8_valid),                         //          .valid
		.src8_data          (cmd_demux_src8_data),                          //          .data
		.src8_channel       (cmd_demux_src8_channel),                       //          .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                 //          .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket)                    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (Processor1_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                         //      sink.ready
		.sink_channel       (router_001_src_channel),                       //          .channel
		.sink_data          (router_001_src_data),                          //          .data
		.sink_startofpacket (router_001_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_001_src_valid),                         //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                     //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                     //          .valid
		.src0_data          (cmd_demux_001_src0_data),                      //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                   //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),               //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                     //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                     //          .valid
		.src1_data          (cmd_demux_001_src1_data),                      //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                   //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),               //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                     //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                     //          .valid
		.src2_data          (cmd_demux_001_src2_data),                      //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                   //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),             //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),               //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                     //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                     //          .valid
		.src3_data          (cmd_demux_001_src3_data),                      //          .data
		.src3_channel       (cmd_demux_001_src3_channel),                   //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),             //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),               //          .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                     //      src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                     //          .valid
		.src4_data          (cmd_demux_001_src4_data),                      //          .data
		.src4_channel       (cmd_demux_001_src4_channel),                   //          .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),             //          .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),               //          .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                     //      src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                     //          .valid
		.src5_data          (cmd_demux_001_src5_data),                      //          .data
		.src5_channel       (cmd_demux_001_src5_channel),                   //          .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),             //          .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),               //          .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                     //      src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                     //          .valid
		.src6_data          (cmd_demux_001_src6_data),                      //          .data
		.src6_channel       (cmd_demux_001_src6_channel),                   //          .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),             //          .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket),               //          .endofpacket
		.src7_ready         (cmd_demux_001_src7_ready),                     //      src7.ready
		.src7_valid         (cmd_demux_001_src7_valid),                     //          .valid
		.src7_data          (cmd_demux_001_src7_data),                      //          .data
		.src7_channel       (cmd_demux_001_src7_channel),                   //          .channel
		.src7_startofpacket (cmd_demux_001_src7_startofpacket),             //          .startofpacket
		.src7_endofpacket   (cmd_demux_001_src7_endofpacket),               //          .endofpacket
		.src8_ready         (cmd_demux_001_src8_ready),                     //      src8.ready
		.src8_valid         (cmd_demux_001_src8_valid),                     //          .valid
		.src8_data          (cmd_demux_001_src8_data),                      //          .data
		.src8_channel       (cmd_demux_001_src8_channel),                   //          .channel
		.src8_startofpacket (cmd_demux_001_src8_startofpacket),             //          .startofpacket
		.src8_endofpacket   (cmd_demux_001_src8_endofpacket)                //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                 (System_PLL_sys_clk_clk),                                   //        clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),     //  clk_reset.reset
		.sink_ready          (jtag_to_fpga_bridge_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (jtag_to_fpga_bridge_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (jtag_to_fpga_bridge_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (jtag_to_fpga_bridge_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_002_src0_ready),                                 //       src0.ready
		.src0_valid          (cmd_demux_002_src0_valid),                                 //           .valid
		.src0_data           (cmd_demux_002_src0_data),                                  //           .data
		.src0_channel        (cmd_demux_002_src0_channel),                               //           .channel
		.src0_startofpacket  (cmd_demux_002_src0_startofpacket),                         //           .startofpacket
		.src0_endofpacket    (cmd_demux_002_src0_endofpacket),                           //           .endofpacket
		.src1_ready          (cmd_demux_002_src1_ready),                                 //       src1.ready
		.src1_valid          (cmd_demux_002_src1_valid),                                 //           .valid
		.src1_data           (cmd_demux_002_src1_data),                                  //           .data
		.src1_channel        (cmd_demux_002_src1_channel),                               //           .channel
		.src1_startofpacket  (cmd_demux_002_src1_startofpacket),                         //           .startofpacket
		.src1_endofpacket    (cmd_demux_002_src1_endofpacket),                           //           .endofpacket
		.src2_ready          (cmd_demux_002_src2_ready),                                 //       src2.ready
		.src2_valid          (cmd_demux_002_src2_valid),                                 //           .valid
		.src2_data           (cmd_demux_002_src2_data),                                  //           .data
		.src2_channel        (cmd_demux_002_src2_channel),                               //           .channel
		.src2_startofpacket  (cmd_demux_002_src2_startofpacket),                         //           .startofpacket
		.src2_endofpacket    (cmd_demux_002_src2_endofpacket),                           //           .endofpacket
		.src3_ready          (cmd_demux_002_src3_ready),                                 //       src3.ready
		.src3_valid          (cmd_demux_002_src3_valid),                                 //           .valid
		.src3_data           (cmd_demux_002_src3_data),                                  //           .data
		.src3_channel        (cmd_demux_002_src3_channel),                               //           .channel
		.src3_startofpacket  (cmd_demux_002_src3_startofpacket),                         //           .startofpacket
		.src3_endofpacket    (cmd_demux_002_src3_endofpacket),                           //           .endofpacket
		.src4_ready          (cmd_demux_002_src4_ready),                                 //       src4.ready
		.src4_valid          (cmd_demux_002_src4_valid),                                 //           .valid
		.src4_data           (cmd_demux_002_src4_data),                                  //           .data
		.src4_channel        (cmd_demux_002_src4_channel),                               //           .channel
		.src4_startofpacket  (cmd_demux_002_src4_startofpacket),                         //           .startofpacket
		.src4_endofpacket    (cmd_demux_002_src4_endofpacket),                           //           .endofpacket
		.src5_ready          (cmd_demux_002_src5_ready),                                 //       src5.ready
		.src5_valid          (cmd_demux_002_src5_valid),                                 //           .valid
		.src5_data           (cmd_demux_002_src5_data),                                  //           .data
		.src5_channel        (cmd_demux_002_src5_channel),                               //           .channel
		.src5_startofpacket  (cmd_demux_002_src5_startofpacket),                         //           .startofpacket
		.src5_endofpacket    (cmd_demux_002_src5_endofpacket),                           //           .endofpacket
		.src6_ready          (cmd_demux_002_src6_ready),                                 //       src6.ready
		.src6_valid          (cmd_demux_002_src6_valid),                                 //           .valid
		.src6_data           (cmd_demux_002_src6_data),                                  //           .data
		.src6_channel        (cmd_demux_002_src6_channel),                               //           .channel
		.src6_startofpacket  (cmd_demux_002_src6_startofpacket),                         //           .startofpacket
		.src6_endofpacket    (cmd_demux_002_src6_endofpacket),                           //           .endofpacket
		.src7_ready          (cmd_demux_002_src7_ready),                                 //       src7.ready
		.src7_valid          (cmd_demux_002_src7_valid),                                 //           .valid
		.src7_data           (cmd_demux_002_src7_data),                                  //           .data
		.src7_channel        (cmd_demux_002_src7_channel),                               //           .channel
		.src7_startofpacket  (cmd_demux_002_src7_startofpacket),                         //           .startofpacket
		.src7_endofpacket    (cmd_demux_002_src7_endofpacket),                           //           .endofpacket
		.src8_ready          (cmd_demux_002_src8_ready),                                 //       src8.ready
		.src8_valid          (cmd_demux_002_src8_valid),                                 //           .valid
		.src8_data           (cmd_demux_002_src8_data),                                  //           .data
		.src8_channel        (cmd_demux_002_src8_channel),                               //           .channel
		.src8_startofpacket  (cmd_demux_002_src8_startofpacket),                         //           .startofpacket
		.src8_endofpacket    (cmd_demux_002_src8_endofpacket),                           //           .endofpacket
		.src9_ready          (cmd_demux_002_src9_ready),                                 //       src9.ready
		.src9_valid          (cmd_demux_002_src9_valid),                                 //           .valid
		.src9_data           (cmd_demux_002_src9_data),                                  //           .data
		.src9_channel        (cmd_demux_002_src9_channel),                               //           .channel
		.src9_startofpacket  (cmd_demux_002_src9_startofpacket),                         //           .startofpacket
		.src9_endofpacket    (cmd_demux_002_src9_endofpacket),                           //           .endofpacket
		.src10_ready         (cmd_demux_002_src10_ready),                                //      src10.ready
		.src10_valid         (cmd_demux_002_src10_valid),                                //           .valid
		.src10_data          (cmd_demux_002_src10_data),                                 //           .data
		.src10_channel       (cmd_demux_002_src10_channel),                              //           .channel
		.src10_startofpacket (cmd_demux_002_src10_startofpacket),                        //           .startofpacket
		.src10_endofpacket   (cmd_demux_002_src10_endofpacket),                          //           .endofpacket
		.src11_ready         (cmd_demux_002_src11_ready),                                //      src11.ready
		.src11_valid         (cmd_demux_002_src11_valid),                                //           .valid
		.src11_data          (cmd_demux_002_src11_data),                                 //           .data
		.src11_channel       (cmd_demux_002_src11_channel),                              //           .channel
		.src11_startofpacket (cmd_demux_002_src11_startofpacket),                        //           .startofpacket
		.src11_endofpacket   (cmd_demux_002_src11_endofpacket),                          //           .endofpacket
		.src12_ready         (cmd_demux_002_src12_ready),                                //      src12.ready
		.src12_valid         (cmd_demux_002_src12_valid),                                //           .valid
		.src12_data          (cmd_demux_002_src12_data),                                 //           .data
		.src12_channel       (cmd_demux_002_src12_channel),                              //           .channel
		.src12_startofpacket (cmd_demux_002_src12_startofpacket),                        //           .startofpacket
		.src12_endofpacket   (cmd_demux_002_src12_endofpacket),                          //           .endofpacket
		.src13_ready         (cmd_demux_002_src13_ready),                                //      src13.ready
		.src13_valid         (cmd_demux_002_src13_valid),                                //           .valid
		.src13_data          (cmd_demux_002_src13_data),                                 //           .data
		.src13_channel       (cmd_demux_002_src13_channel),                              //           .channel
		.src13_startofpacket (cmd_demux_002_src13_startofpacket),                        //           .startofpacket
		.src13_endofpacket   (cmd_demux_002_src13_endofpacket),                          //           .endofpacket
		.src14_ready         (cmd_demux_002_src14_ready),                                //      src14.ready
		.src14_valid         (cmd_demux_002_src14_valid),                                //           .valid
		.src14_data          (cmd_demux_002_src14_data),                                 //           .data
		.src14_channel       (cmd_demux_002_src14_channel),                              //           .channel
		.src14_startofpacket (cmd_demux_002_src14_startofpacket),                        //           .startofpacket
		.src14_endofpacket   (cmd_demux_002_src14_endofpacket),                          //           .endofpacket
		.src15_ready         (cmd_demux_002_src15_ready),                                //      src15.ready
		.src15_valid         (cmd_demux_002_src15_valid),                                //           .valid
		.src15_data          (cmd_demux_002_src15_data),                                 //           .data
		.src15_channel       (cmd_demux_002_src15_channel),                              //           .channel
		.src15_startofpacket (cmd_demux_002_src15_startofpacket),                        //           .startofpacket
		.src15_endofpacket   (cmd_demux_002_src15_endofpacket)                           //           .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (Processor1_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                         //      sink.ready
		.sink_channel       (router_003_src_channel),                       //          .channel
		.sink_data          (router_003_src_data),                          //          .data
		.sink_startofpacket (router_003_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_003_src_valid),                         //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                     //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                     //          .valid
		.src0_data          (cmd_demux_003_src0_data),                      //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                   //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),               //          .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                     //      src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                     //          .valid
		.src1_data          (cmd_demux_003_src1_data),                      //          .data
		.src1_channel       (cmd_demux_003_src1_channel),                   //          .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_003 cmd_demux_004 (
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (Processor2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                         //      sink.ready
		.sink_channel       (router_004_src_channel),                       //          .channel
		.sink_data          (router_004_src_data),                          //          .data
		.sink_startofpacket (router_004_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_004_src_valid),                         //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                     //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                     //          .valid
		.src0_data          (cmd_demux_004_src0_data),                      //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                   //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket),               //          .endofpacket
		.src1_ready         (cmd_demux_004_src1_ready),                     //      src1.ready
		.src1_valid         (cmd_demux_004_src1_valid),                     //          .valid
		.src1_data          (cmd_demux_004_src1_data),                      //          .data
		.src1_channel       (cmd_demux_004_src1_channel),                   //          .channel
		.src1_startofpacket (cmd_demux_004_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (cmd_demux_004_src1_endofpacket)                //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                    //       src.ready
		.src_valid           (cmd_mux_src_valid),                                    //          .valid
		.src_data            (cmd_mux_src_data),                                     //          .data
		.src_channel         (cmd_mux_src_channel),                                  //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                               //          .channel
		.sink0_data          (cmd_demux_src0_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                       //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                             //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                             //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                           //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                              //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                     //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                //          .valid
		.src_data            (cmd_mux_001_src_data),                                 //          .data
		.src_channel         (cmd_mux_001_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                               //          .channel
		.sink0_data          (cmd_demux_src1_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                //          .valid
		.src_data            (cmd_mux_002_src_data),                                 //          .data
		.src_channel         (cmd_mux_002_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                               //          .channel
		.sink0_data          (cmd_demux_src2_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket),                       //          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),                             //     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),                             //          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),                           //          .channel
		.sink2_data          (cmd_demux_002_src1_data),                              //          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),                     //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                //          .valid
		.src_data            (cmd_mux_003_src_data),                                 //          .data
		.src_channel         (cmd_mux_003_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                               //          .channel
		.sink0_data          (cmd_demux_src3_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),                       //          .endofpacket
		.sink2_ready         (cmd_demux_002_src2_ready),                             //     sink2.ready
		.sink2_valid         (cmd_demux_002_src2_valid),                             //          .valid
		.sink2_channel       (cmd_demux_002_src2_channel),                           //          .channel
		.sink2_data          (cmd_demux_002_src2_data),                              //          .data
		.sink2_startofpacket (cmd_demux_002_src2_startofpacket),                     //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src2_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                //          .valid
		.src_data            (cmd_mux_004_src_data),                                 //          .data
		.src_channel         (cmd_mux_004_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                               //          .channel
		.sink0_data          (cmd_demux_src4_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket),                       //          .endofpacket
		.sink2_ready         (cmd_demux_002_src3_ready),                             //     sink2.ready
		.sink2_valid         (cmd_demux_002_src3_valid),                             //          .valid
		.sink2_channel       (cmd_demux_002_src3_channel),                           //          .channel
		.sink2_data          (cmd_demux_002_src3_data),                              //          .data
		.sink2_startofpacket (cmd_demux_002_src3_startofpacket),                     //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src3_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                //          .valid
		.src_data            (cmd_mux_005_src_data),                                 //          .data
		.src_channel         (cmd_mux_005_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                               //          .channel
		.sink0_data          (cmd_demux_src5_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket),                       //          .endofpacket
		.sink2_ready         (cmd_demux_002_src4_ready),                             //     sink2.ready
		.sink2_valid         (cmd_demux_002_src4_valid),                             //          .valid
		.sink2_channel       (cmd_demux_002_src4_channel),                           //          .channel
		.sink2_data          (cmd_demux_002_src4_data),                              //          .data
		.sink2_startofpacket (cmd_demux_002_src4_startofpacket),                     //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src4_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_006 cmd_mux_006 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (Processor2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                        //          .valid
		.src_data            (cmd_mux_006_src_data),                         //          .data
		.src_channel         (cmd_mux_006_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                       //          .channel
		.sink0_data          (cmd_demux_src6_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_004_src0_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_004_src0_valid),                     //          .valid
		.sink1_channel       (cmd_demux_004_src0_channel),                   //          .channel
		.sink1_data          (cmd_demux_004_src0_data),                      //          .data
		.sink1_startofpacket (cmd_demux_004_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src0_endofpacket)                //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                //          .valid
		.src_data            (cmd_mux_007_src_data),                                 //          .data
		.src_channel         (cmd_mux_007_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                               //          .channel
		.sink0_data          (cmd_demux_src7_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket),                       //          .endofpacket
		.sink2_ready         (cmd_demux_002_src5_ready),                             //     sink2.ready
		.sink2_valid         (cmd_demux_002_src5_valid),                             //          .valid
		.sink2_channel       (cmd_demux_002_src5_channel),                           //          .channel
		.sink2_data          (cmd_demux_002_src5_data),                              //          .data
		.sink2_startofpacket (cmd_demux_002_src5_startofpacket),                     //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src5_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_008 cmd_mux_008 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                //          .valid
		.src_data            (cmd_mux_008_src_data),                                 //          .data
		.src_channel         (cmd_mux_008_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                 //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                 //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                               //          .channel
		.sink0_data          (cmd_demux_src8_data),                                  //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                             //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                           //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                              //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket),                       //          .endofpacket
		.sink2_ready         (cmd_demux_002_src6_ready),                             //     sink2.ready
		.sink2_valid         (cmd_demux_002_src6_valid),                             //          .valid
		.sink2_channel       (cmd_demux_002_src6_channel),                           //          .channel
		.sink2_data          (cmd_demux_002_src6_data),                              //          .data
		.sink2_startofpacket (cmd_demux_002_src6_startofpacket),                     //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src6_endofpacket),                       //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                             //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                             //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                           //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                              //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                     //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket),                       //          .endofpacket
		.sink4_ready         (cmd_demux_004_src1_ready),                             //     sink4.ready
		.sink4_valid         (cmd_demux_004_src1_valid),                             //          .valid
		.sink4_channel       (cmd_demux_004_src1_channel),                           //          .channel
		.sink4_data          (cmd_demux_004_src1_data),                              //          .data
		.sink4_startofpacket (cmd_demux_004_src1_startofpacket),                     //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src1_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_009 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                //          .valid
		.src_data            (cmd_mux_009_src_data),                                 //          .data
		.src_channel         (cmd_mux_009_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_002_src7_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_002_src7_valid),                             //          .valid
		.sink0_channel       (cmd_demux_002_src7_channel),                           //          .channel
		.sink0_data          (cmd_demux_002_src7_data),                              //          .data
		.sink0_startofpacket (cmd_demux_002_src7_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src7_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_006 cmd_mux_010 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                //          .valid
		.src_data            (cmd_mux_010_src_data),                                 //          .data
		.src_channel         (cmd_mux_010_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                             //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),                           //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                              //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_002_src8_ready),                             //     sink1.ready
		.sink1_valid         (cmd_demux_002_src8_valid),                             //          .valid
		.sink1_channel       (cmd_demux_002_src8_channel),                           //          .channel
		.sink1_data          (cmd_demux_002_src8_data),                              //          .data
		.sink1_startofpacket (cmd_demux_002_src8_startofpacket),                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src8_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_011 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                //          .valid
		.src_data            (cmd_mux_011_src_data),                                 //          .data
		.src_channel         (cmd_mux_011_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_002_src9_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_002_src9_valid),                             //          .valid
		.sink0_channel       (cmd_demux_002_src9_channel),                           //          .channel
		.sink0_data          (cmd_demux_002_src9_data),                              //          .data
		.sink0_startofpacket (cmd_demux_002_src9_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src9_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_012 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                //          .valid
		.src_data            (cmd_mux_012_src_data),                                 //          .data
		.src_channel         (cmd_mux_012_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_002_src10_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src10_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src10_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src10_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src10_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src10_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_013 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                //          .valid
		.src_data            (cmd_mux_013_src_data),                                 //          .data
		.src_channel         (cmd_mux_013_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_002_src11_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src11_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src11_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src11_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src11_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src11_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_014 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                //          .valid
		.src_data            (cmd_mux_014_src_data),                                 //          .data
		.src_channel         (cmd_mux_014_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_002_src12_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src12_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src12_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src12_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src12_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src12_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_015 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                //          .valid
		.src_data            (cmd_mux_015_src_data),                                 //          .data
		.src_channel         (cmd_mux_015_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_002_src13_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src13_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src13_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src13_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src13_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src13_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_016 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                                //          .valid
		.src_data            (cmd_mux_016_src_data),                                 //          .data
		.src_channel         (cmd_mux_016_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_002_src14_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src14_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src14_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src14_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src14_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src14_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_017 (
		.clk                 (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset               (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                                //          .valid
		.src_data            (cmd_mux_017_src_data),                                 //          .data
		.src_channel         (cmd_mux_017_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_002_src15_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src15_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src15_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src15_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src15_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src15_endofpacket)                       //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_006 cmd_mux_018 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (Processor1_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                        //          .valid
		.src_data            (cmd_mux_018_src_data),                         //          .data
		.src_channel         (cmd_mux_018_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket),               //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                     //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),                   //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                      //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket)                //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                 //      sink.ready
		.sink_channel       (router_005_src_channel),                               //          .channel
		.sink_data          (router_005_src_data),                                  //          .data
		.sink_startofpacket (router_005_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_005_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                 //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                 //          .valid
		.src0_data          (rsp_demux_src0_data),                                  //          .data
		.src0_channel       (rsp_demux_src0_channel),                               //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                           //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                 //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                 //          .valid
		.src1_data          (rsp_demux_src1_data),                                  //          .data
		.src1_channel       (rsp_demux_src1_channel),                               //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                           //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                 //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                 //          .valid
		.src2_data          (rsp_demux_src2_data),                                  //          .data
		.src2_channel       (rsp_demux_src2_channel),                               //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                         //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                 //      sink.ready
		.sink_channel       (router_006_src_channel),                               //          .channel
		.sink_data          (router_006_src_data),                                  //          .data
		.sink_startofpacket (router_006_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_006_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_001_src0_data),                              //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                 //      sink.ready
		.sink_channel       (router_007_src_channel),                               //          .channel
		.sink_data          (router_007_src_data),                                  //          .data
		.sink_startofpacket (router_007_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_007_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_002_src0_data),                              //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_002_src1_data),                              //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                             //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                             //          .valid
		.src2_data          (rsp_demux_002_src2_data),                              //          .data
		.src2_channel       (rsp_demux_002_src2_channel),                           //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                 //      sink.ready
		.sink_channel       (router_008_src_channel),                               //          .channel
		.sink_data          (router_008_src_data),                                  //          .data
		.sink_startofpacket (router_008_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_008_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_003_src0_data),                              //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_003_src1_data),                              //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                             //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                             //          .valid
		.src2_data          (rsp_demux_003_src2_data),                              //          .data
		.src2_channel       (rsp_demux_003_src2_channel),                           //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                 //      sink.ready
		.sink_channel       (router_009_src_channel),                               //          .channel
		.sink_data          (router_009_src_data),                                  //          .data
		.sink_startofpacket (router_009_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_009_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_004_src0_data),                              //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_004_src1_data),                              //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                             //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                             //          .valid
		.src2_data          (rsp_demux_004_src2_data),                              //          .data
		.src2_channel       (rsp_demux_004_src2_channel),                           //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                 //      sink.ready
		.sink_channel       (router_010_src_channel),                               //          .channel
		.sink_data          (router_010_src_data),                                  //          .data
		.sink_startofpacket (router_010_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_010_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_005_src0_data),                              //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_005_src1_data),                              //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                             //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                             //          .valid
		.src2_data          (rsp_demux_005_src2_data),                              //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                           //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_003 rsp_demux_006 (
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (Processor2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                         //      sink.ready
		.sink_channel       (router_011_src_channel),                       //          .channel
		.sink_data          (router_011_src_data),                          //          .data
		.sink_startofpacket (router_011_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_011_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_006_src0_data),                      //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_006_src1_data),                      //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                 //      sink.ready
		.sink_channel       (router_012_src_channel),                               //          .channel
		.sink_data          (router_012_src_data),                                  //          .data
		.sink_startofpacket (router_012_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_012_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_007_src0_data),                              //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_007_src1_data),                              //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (rsp_demux_007_src2_ready),                             //      src2.ready
		.src2_valid         (rsp_demux_007_src2_valid),                             //          .valid
		.src2_data          (rsp_demux_007_src2_data),                              //          .data
		.src2_channel       (rsp_demux_007_src2_channel),                           //          .channel
		.src2_startofpacket (rsp_demux_007_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (rsp_demux_007_src2_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_008 rsp_demux_008 (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                 //      sink.ready
		.sink_channel       (router_013_src_channel),                               //          .channel
		.sink_data          (router_013_src_data),                                  //          .data
		.sink_startofpacket (router_013_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_013_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_008_src0_data),                              //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_008_src1_data),                              //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (rsp_demux_008_src2_ready),                             //      src2.ready
		.src2_valid         (rsp_demux_008_src2_valid),                             //          .valid
		.src2_data          (rsp_demux_008_src2_data),                              //          .data
		.src2_channel       (rsp_demux_008_src2_channel),                           //          .channel
		.src2_startofpacket (rsp_demux_008_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (rsp_demux_008_src2_endofpacket),                       //          .endofpacket
		.src3_ready         (rsp_demux_008_src3_ready),                             //      src3.ready
		.src3_valid         (rsp_demux_008_src3_valid),                             //          .valid
		.src3_data          (rsp_demux_008_src3_data),                              //          .data
		.src3_channel       (rsp_demux_008_src3_channel),                           //          .channel
		.src3_startofpacket (rsp_demux_008_src3_startofpacket),                     //          .startofpacket
		.src3_endofpacket   (rsp_demux_008_src3_endofpacket),                       //          .endofpacket
		.src4_ready         (rsp_demux_008_src4_ready),                             //      src4.ready
		.src4_valid         (rsp_demux_008_src4_valid),                             //          .valid
		.src4_data          (rsp_demux_008_src4_data),                              //          .data
		.src4_channel       (rsp_demux_008_src4_channel),                           //          .channel
		.src4_startofpacket (rsp_demux_008_src4_startofpacket),                     //          .startofpacket
		.src4_endofpacket   (rsp_demux_008_src4_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_009 (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                                 //      sink.ready
		.sink_channel       (router_014_src_channel),                               //          .channel
		.sink_data          (router_014_src_data),                                  //          .data
		.sink_startofpacket (router_014_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_014_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_009_src0_data),                              //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_003 rsp_demux_010 (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                 //      sink.ready
		.sink_channel       (router_015_src_channel),                               //          .channel
		.sink_data          (router_015_src_data),                                  //          .data
		.sink_startofpacket (router_015_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_015_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_010_src0_data),                              //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_010_src1_data),                              //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_011 (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                                 //      sink.ready
		.sink_channel       (router_016_src_channel),                               //          .channel
		.sink_data          (router_016_src_data),                                  //          .data
		.sink_startofpacket (router_016_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_016_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_011_src0_data),                              //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_012 (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                                 //      sink.ready
		.sink_channel       (router_017_src_channel),                               //          .channel
		.sink_data          (router_017_src_data),                                  //          .data
		.sink_startofpacket (router_017_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_017_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_012_src0_data),                              //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_013 (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                                 //      sink.ready
		.sink_channel       (router_018_src_channel),                               //          .channel
		.sink_data          (router_018_src_data),                                  //          .data
		.sink_startofpacket (router_018_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_018_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_013_src0_data),                              //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_014 (
		.clk                (System_PLL_sys_clk_clk),                                     //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.sink_ready         (sram_avalon_sram_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_avalon_sram_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_avalon_sram_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_avalon_sram_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_avalon_sram_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_avalon_sram_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_014_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_015 (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                                 //      sink.ready
		.sink_channel       (router_020_src_channel),                               //          .channel
		.sink_data          (router_020_src_data),                                  //          .data
		.sink_startofpacket (router_020_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_020_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_015_src0_data),                              //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_016 (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                                 //      sink.ready
		.sink_channel       (router_021_src_channel),                               //          .channel
		.sink_data          (router_021_src_data),                                  //          .data
		.sink_startofpacket (router_021_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_021_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_016_src0_data),                              //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_017 (
		.clk                (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset              (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                                 //      sink.ready
		.sink_channel       (router_022_src_channel),                               //          .channel
		.sink_data          (router_022_src_data),                                  //          .data
		.sink_startofpacket (router_022_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_022_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_017_src0_data),                              //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_003 rsp_demux_018 (
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (Processor1_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                         //      sink.ready
		.sink_channel       (router_023_src_channel),                       //          .channel
		.sink_data          (router_023_src_data),                          //          .data
		.sink_startofpacket (router_023_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_023_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_018_src0_data),                      //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_018_src1_data),                      //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)                //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (Processor2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_src_valid),                            //          .valid
		.src_data            (rsp_mux_src_data),                             //          .data
		.src_channel         (rsp_mux_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                         //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                       //          .channel
		.sink0_data          (rsp_demux_src0_data),                          //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                     //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                   //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                      //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),               //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                     //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                     //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                   //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                      //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),               //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                     //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                     //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                   //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                      //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),             //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),               //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                     //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                     //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                   //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                      //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),             //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),               //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                     //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                     //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                   //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                      //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),             //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),               //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                     //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                     //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                   //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                      //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),             //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),               //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                     //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                     //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                   //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                      //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),             //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),               //          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),                     //     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),                     //          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),                   //          .channel
		.sink8_data          (rsp_demux_008_src0_data),                      //          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),             //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket)                //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (Processor1_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                        //          .valid
		.src_data            (rsp_mux_001_src_data),                         //          .data
		.src_channel         (rsp_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                         //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                       //          .channel
		.sink0_data          (rsp_demux_src1_data),                          //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_002_src1_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_002_src1_valid),                     //          .valid
		.sink1_channel       (rsp_demux_002_src1_channel),                   //          .channel
		.sink1_data          (rsp_demux_002_src1_data),                      //          .data
		.sink1_startofpacket (rsp_demux_002_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src1_endofpacket),               //          .endofpacket
		.sink2_ready         (rsp_demux_003_src1_ready),                     //     sink2.ready
		.sink2_valid         (rsp_demux_003_src1_valid),                     //          .valid
		.sink2_channel       (rsp_demux_003_src1_channel),                   //          .channel
		.sink2_data          (rsp_demux_003_src1_data),                      //          .data
		.sink2_startofpacket (rsp_demux_003_src1_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (rsp_demux_003_src1_endofpacket),               //          .endofpacket
		.sink3_ready         (rsp_demux_004_src1_ready),                     //     sink3.ready
		.sink3_valid         (rsp_demux_004_src1_valid),                     //          .valid
		.sink3_channel       (rsp_demux_004_src1_channel),                   //          .channel
		.sink3_data          (rsp_demux_004_src1_data),                      //          .data
		.sink3_startofpacket (rsp_demux_004_src1_startofpacket),             //          .startofpacket
		.sink3_endofpacket   (rsp_demux_004_src1_endofpacket),               //          .endofpacket
		.sink4_ready         (rsp_demux_005_src1_ready),                     //     sink4.ready
		.sink4_valid         (rsp_demux_005_src1_valid),                     //          .valid
		.sink4_channel       (rsp_demux_005_src1_channel),                   //          .channel
		.sink4_data          (rsp_demux_005_src1_data),                      //          .data
		.sink4_startofpacket (rsp_demux_005_src1_startofpacket),             //          .startofpacket
		.sink4_endofpacket   (rsp_demux_005_src1_endofpacket),               //          .endofpacket
		.sink5_ready         (rsp_demux_007_src1_ready),                     //     sink5.ready
		.sink5_valid         (rsp_demux_007_src1_valid),                     //          .valid
		.sink5_channel       (rsp_demux_007_src1_channel),                   //          .channel
		.sink5_data          (rsp_demux_007_src1_data),                      //          .data
		.sink5_startofpacket (rsp_demux_007_src1_startofpacket),             //          .startofpacket
		.sink5_endofpacket   (rsp_demux_007_src1_endofpacket),               //          .endofpacket
		.sink6_ready         (rsp_demux_008_src1_ready),                     //     sink6.ready
		.sink6_valid         (rsp_demux_008_src1_valid),                     //          .valid
		.sink6_channel       (rsp_demux_008_src1_channel),                   //          .channel
		.sink6_data          (rsp_demux_008_src1_data),                      //          .data
		.sink6_startofpacket (rsp_demux_008_src1_startofpacket),             //          .startofpacket
		.sink6_endofpacket   (rsp_demux_008_src1_endofpacket),               //          .endofpacket
		.sink7_ready         (rsp_demux_010_src0_ready),                     //     sink7.ready
		.sink7_valid         (rsp_demux_010_src0_valid),                     //          .valid
		.sink7_channel       (rsp_demux_010_src0_channel),                   //          .channel
		.sink7_data          (rsp_demux_010_src0_data),                      //          .data
		.sink7_startofpacket (rsp_demux_010_src0_startofpacket),             //          .startofpacket
		.sink7_endofpacket   (rsp_demux_010_src0_endofpacket),               //          .endofpacket
		.sink8_ready         (rsp_demux_018_src0_ready),                     //     sink8.ready
		.sink8_valid         (rsp_demux_018_src0_valid),                     //          .valid
		.sink8_channel       (rsp_demux_018_src0_channel),                   //          .channel
		.sink8_data          (rsp_demux_018_src0_data),                      //          .data
		.sink8_startofpacket (rsp_demux_018_src0_startofpacket),             //          .startofpacket
		.sink8_endofpacket   (rsp_demux_018_src0_endofpacket)                //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                  (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset                (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_002_src_ready),                                //       src.ready
		.src_valid            (rsp_mux_002_src_valid),                                //          .valid
		.src_data             (rsp_mux_002_src_data),                                 //          .data
		.src_channel          (rsp_mux_002_src_channel),                              //          .channel
		.src_startofpacket    (rsp_mux_002_src_startofpacket),                        //          .startofpacket
		.src_endofpacket      (rsp_mux_002_src_endofpacket),                          //          .endofpacket
		.sink0_ready          (rsp_demux_src2_ready),                                 //     sink0.ready
		.sink0_valid          (rsp_demux_src2_valid),                                 //          .valid
		.sink0_channel        (rsp_demux_src2_channel),                               //          .channel
		.sink0_data           (rsp_demux_src2_data),                                  //          .data
		.sink0_startofpacket  (rsp_demux_src2_startofpacket),                         //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src2_endofpacket),                           //          .endofpacket
		.sink1_ready          (rsp_demux_002_src2_ready),                             //     sink1.ready
		.sink1_valid          (rsp_demux_002_src2_valid),                             //          .valid
		.sink1_channel        (rsp_demux_002_src2_channel),                           //          .channel
		.sink1_data           (rsp_demux_002_src2_data),                              //          .data
		.sink1_startofpacket  (rsp_demux_002_src2_startofpacket),                     //          .startofpacket
		.sink1_endofpacket    (rsp_demux_002_src2_endofpacket),                       //          .endofpacket
		.sink2_ready          (rsp_demux_003_src2_ready),                             //     sink2.ready
		.sink2_valid          (rsp_demux_003_src2_valid),                             //          .valid
		.sink2_channel        (rsp_demux_003_src2_channel),                           //          .channel
		.sink2_data           (rsp_demux_003_src2_data),                              //          .data
		.sink2_startofpacket  (rsp_demux_003_src2_startofpacket),                     //          .startofpacket
		.sink2_endofpacket    (rsp_demux_003_src2_endofpacket),                       //          .endofpacket
		.sink3_ready          (rsp_demux_004_src2_ready),                             //     sink3.ready
		.sink3_valid          (rsp_demux_004_src2_valid),                             //          .valid
		.sink3_channel        (rsp_demux_004_src2_channel),                           //          .channel
		.sink3_data           (rsp_demux_004_src2_data),                              //          .data
		.sink3_startofpacket  (rsp_demux_004_src2_startofpacket),                     //          .startofpacket
		.sink3_endofpacket    (rsp_demux_004_src2_endofpacket),                       //          .endofpacket
		.sink4_ready          (rsp_demux_005_src2_ready),                             //     sink4.ready
		.sink4_valid          (rsp_demux_005_src2_valid),                             //          .valid
		.sink4_channel        (rsp_demux_005_src2_channel),                           //          .channel
		.sink4_data           (rsp_demux_005_src2_data),                              //          .data
		.sink4_startofpacket  (rsp_demux_005_src2_startofpacket),                     //          .startofpacket
		.sink4_endofpacket    (rsp_demux_005_src2_endofpacket),                       //          .endofpacket
		.sink5_ready          (rsp_demux_007_src2_ready),                             //     sink5.ready
		.sink5_valid          (rsp_demux_007_src2_valid),                             //          .valid
		.sink5_channel        (rsp_demux_007_src2_channel),                           //          .channel
		.sink5_data           (rsp_demux_007_src2_data),                              //          .data
		.sink5_startofpacket  (rsp_demux_007_src2_startofpacket),                     //          .startofpacket
		.sink5_endofpacket    (rsp_demux_007_src2_endofpacket),                       //          .endofpacket
		.sink6_ready          (rsp_demux_008_src2_ready),                             //     sink6.ready
		.sink6_valid          (rsp_demux_008_src2_valid),                             //          .valid
		.sink6_channel        (rsp_demux_008_src2_channel),                           //          .channel
		.sink6_data           (rsp_demux_008_src2_data),                              //          .data
		.sink6_startofpacket  (rsp_demux_008_src2_startofpacket),                     //          .startofpacket
		.sink6_endofpacket    (rsp_demux_008_src2_endofpacket),                       //          .endofpacket
		.sink7_ready          (rsp_demux_009_src0_ready),                             //     sink7.ready
		.sink7_valid          (rsp_demux_009_src0_valid),                             //          .valid
		.sink7_channel        (rsp_demux_009_src0_channel),                           //          .channel
		.sink7_data           (rsp_demux_009_src0_data),                              //          .data
		.sink7_startofpacket  (rsp_demux_009_src0_startofpacket),                     //          .startofpacket
		.sink7_endofpacket    (rsp_demux_009_src0_endofpacket),                       //          .endofpacket
		.sink8_ready          (rsp_demux_010_src1_ready),                             //     sink8.ready
		.sink8_valid          (rsp_demux_010_src1_valid),                             //          .valid
		.sink8_channel        (rsp_demux_010_src1_channel),                           //          .channel
		.sink8_data           (rsp_demux_010_src1_data),                              //          .data
		.sink8_startofpacket  (rsp_demux_010_src1_startofpacket),                     //          .startofpacket
		.sink8_endofpacket    (rsp_demux_010_src1_endofpacket),                       //          .endofpacket
		.sink9_ready          (rsp_demux_011_src0_ready),                             //     sink9.ready
		.sink9_valid          (rsp_demux_011_src0_valid),                             //          .valid
		.sink9_channel        (rsp_demux_011_src0_channel),                           //          .channel
		.sink9_data           (rsp_demux_011_src0_data),                              //          .data
		.sink9_startofpacket  (rsp_demux_011_src0_startofpacket),                     //          .startofpacket
		.sink9_endofpacket    (rsp_demux_011_src0_endofpacket),                       //          .endofpacket
		.sink10_ready         (rsp_demux_012_src0_ready),                             //    sink10.ready
		.sink10_valid         (rsp_demux_012_src0_valid),                             //          .valid
		.sink10_channel       (rsp_demux_012_src0_channel),                           //          .channel
		.sink10_data          (rsp_demux_012_src0_data),                              //          .data
		.sink10_startofpacket (rsp_demux_012_src0_startofpacket),                     //          .startofpacket
		.sink10_endofpacket   (rsp_demux_012_src0_endofpacket),                       //          .endofpacket
		.sink11_ready         (rsp_demux_013_src0_ready),                             //    sink11.ready
		.sink11_valid         (rsp_demux_013_src0_valid),                             //          .valid
		.sink11_channel       (rsp_demux_013_src0_channel),                           //          .channel
		.sink11_data          (rsp_demux_013_src0_data),                              //          .data
		.sink11_startofpacket (rsp_demux_013_src0_startofpacket),                     //          .startofpacket
		.sink11_endofpacket   (rsp_demux_013_src0_endofpacket),                       //          .endofpacket
		.sink12_ready         (rsp_demux_014_src0_ready),                             //    sink12.ready
		.sink12_valid         (rsp_demux_014_src0_valid),                             //          .valid
		.sink12_channel       (rsp_demux_014_src0_channel),                           //          .channel
		.sink12_data          (rsp_demux_014_src0_data),                              //          .data
		.sink12_startofpacket (rsp_demux_014_src0_startofpacket),                     //          .startofpacket
		.sink12_endofpacket   (rsp_demux_014_src0_endofpacket),                       //          .endofpacket
		.sink13_ready         (rsp_demux_015_src0_ready),                             //    sink13.ready
		.sink13_valid         (rsp_demux_015_src0_valid),                             //          .valid
		.sink13_channel       (rsp_demux_015_src0_channel),                           //          .channel
		.sink13_data          (rsp_demux_015_src0_data),                              //          .data
		.sink13_startofpacket (rsp_demux_015_src0_startofpacket),                     //          .startofpacket
		.sink13_endofpacket   (rsp_demux_015_src0_endofpacket),                       //          .endofpacket
		.sink14_ready         (rsp_demux_016_src0_ready),                             //    sink14.ready
		.sink14_valid         (rsp_demux_016_src0_valid),                             //          .valid
		.sink14_channel       (rsp_demux_016_src0_channel),                           //          .channel
		.sink14_data          (rsp_demux_016_src0_data),                              //          .data
		.sink14_startofpacket (rsp_demux_016_src0_startofpacket),                     //          .startofpacket
		.sink14_endofpacket   (rsp_demux_016_src0_endofpacket),                       //          .endofpacket
		.sink15_ready         (rsp_demux_017_src0_ready),                             //    sink15.ready
		.sink15_valid         (rsp_demux_017_src0_valid),                             //          .valid
		.sink15_channel       (rsp_demux_017_src0_channel),                           //          .channel
		.sink15_data          (rsp_demux_017_src0_data),                              //          .data
		.sink15_startofpacket (rsp_demux_017_src0_startofpacket),                     //          .startofpacket
		.sink15_endofpacket   (rsp_demux_017_src0_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (Processor1_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                        //          .valid
		.src_data            (rsp_mux_003_src_data),                         //          .data
		.src_channel         (rsp_mux_003_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_008_src3_ready),                     //     sink0.ready
		.sink0_valid         (rsp_demux_008_src3_valid),                     //          .valid
		.sink0_channel       (rsp_demux_008_src3_channel),                   //          .channel
		.sink0_data          (rsp_demux_008_src3_data),                      //          .data
		.sink0_startofpacket (rsp_demux_008_src3_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_008_src3_endofpacket),               //          .endofpacket
		.sink1_ready         (rsp_demux_018_src1_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_018_src1_valid),                     //          .valid
		.sink1_channel       (rsp_demux_018_src1_channel),                   //          .channel
		.sink1_data          (rsp_demux_018_src1_data),                      //          .data
		.sink1_startofpacket (rsp_demux_018_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_018_src1_endofpacket)                //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux_003 rsp_mux_004 (
		.clk                 (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset               (Processor2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                        //          .valid
		.src_data            (rsp_mux_004_src_data),                         //          .data
		.src_channel         (rsp_mux_004_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_006_src1_ready),                     //     sink0.ready
		.sink0_valid         (rsp_demux_006_src1_valid),                     //          .valid
		.sink0_channel       (rsp_demux_006_src1_channel),                   //          .channel
		.sink0_data          (rsp_demux_006_src1_data),                      //          .data
		.sink0_startofpacket (rsp_demux_006_src1_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_006_src1_endofpacket),               //          .endofpacket
		.sink1_ready         (rsp_demux_008_src4_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_008_src4_valid),                     //          .valid
		.sink1_channel       (rsp_demux_008_src4_channel),                   //          .channel
		.sink1_data          (rsp_demux_008_src4_data),                      //          .data
		.sink1_startofpacket (rsp_demux_008_src4_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_008_src4_endofpacket)                //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (108),
		.OUT_PKT_RESPONSE_STATUS_L     (107),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (109),
		.OUT_PKT_ORI_BURST_SIZE_H      (111),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sram_avalon_sram_slave_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                     //       clk.clk
		.reset                (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_valid             (router_019_src_valid),                                       //      sink.valid
		.in_channel           (router_019_src_channel),                                     //          .channel
		.in_startofpacket     (router_019_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (router_019_src_endofpacket),                                 //          .endofpacket
		.in_ready             (router_019_src_ready),                                       //          .ready
		.in_data              (router_019_src_data),                                        //          .data
		.out_endofpacket      (sram_avalon_sram_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_avalon_sram_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_avalon_sram_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_avalon_sram_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_avalon_sram_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_avalon_sram_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (108),
		.IN_PKT_RESPONSE_STATUS_L      (107),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (109),
		.IN_PKT_ORI_BURST_SIZE_H       (111),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (19),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sram_avalon_sram_slave_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                     //       clk.clk
		.reset                (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_valid             (cmd_mux_014_src_valid),                                      //      sink.valid
		.in_channel           (cmd_mux_014_src_channel),                                    //          .channel
		.in_startofpacket     (cmd_mux_014_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (cmd_mux_014_src_endofpacket),                                //          .endofpacket
		.in_ready             (cmd_mux_014_src_ready),                                      //          .ready
		.in_data              (cmd_mux_014_src_data),                                       //          .data
		.out_endofpacket      (sram_avalon_sram_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_avalon_sram_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_avalon_sram_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_avalon_sram_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_avalon_sram_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_avalon_sram_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                      // (terminated)
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (audio_subsystem_audio_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (audio_subsystem_audio_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (audio_subsystem_audio_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (expansion_jp5_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (expansion_jp5_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (expansion_jp5_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                    //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (pushbuttons_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                                  //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (serial_port_avalon_rs232_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (serial_port_avalon_rs232_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (serial_port_avalon_rs232_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                          //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (camerad5m_0_camera_slave_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (camerad5m_0_camera_slave_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (camerad5m_0_camera_slave_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                     //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (Processor2_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (processor2_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (processor2_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (processor2_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                      //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (interval_timer_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (interval_timer_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (interval_timer_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                     //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                     //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                            //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                       //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (red_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (red_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (red_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                               //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (green_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (green_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (green_leds_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                                 //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (slider_switches_avalon_parallel_port_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (slider_switches_avalon_parallel_port_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (slider_switches_avalon_parallel_port_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                                      //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_014 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_avalon_sram_slave_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (sram_avalon_sram_slave_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (sram_avalon_sram_slave_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                     //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                     //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (flash_flash_data_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (flash_flash_data_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (flash_flash_data_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                     //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_2nd_Core_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (flash_flash_erase_control_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (flash_flash_erase_control_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (flash_flash_erase_control_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                     //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (Processor1_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (processor1_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (processor1_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (processor1_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                      //         .error
	);

endmodule
