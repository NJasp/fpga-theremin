	component nios_system2 is
		port (
			audio_ADCDAT              : in    std_logic                     := 'X';             -- ADCDAT
			audio_ADCLRCK             : in    std_logic                     := 'X';             -- ADCLRCK
			audio_BCLK                : in    std_logic                     := 'X';             -- BCLK
			audio_DACDAT              : out   std_logic;                                        -- DACDAT
			audio_DACLRCK             : in    std_logic                     := 'X';             -- DACLRCK
			audio_clk_clk             : out   std_logic;                                        -- clk
			audio_irq_irq             : out   std_logic;                                        -- irq
			audio_pll_ref_clk_clk     : in    std_logic                     := 'X';             -- clk
			audio_pll_ref_reset_reset : in    std_logic                     := 'X';             -- reset
			audio_reset_reset         : out   std_logic;                                        -- reset
			audio_slave_address       : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- address
			audio_slave_chipselect    : in    std_logic                     := 'X';             -- chipselect
			audio_slave_read          : in    std_logic                     := 'X';             -- read
			audio_slave_write         : in    std_logic                     := 'X';             -- write
			audio_slave_writedata     : in    std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			audio_slave_readdata      : out   std_logic_vector(31 downto 0);                    -- readdata
			av_config_SDAT            : inout std_logic                     := 'X';             -- SDAT
			av_config_SCLK            : out   std_logic;                                        -- SCLK
			clk_clk                   : in    std_logic                     := 'X';             -- clk
			expansion_jp5_export      : inout std_logic_vector(31 downto 0) := (others => 'X'); -- export
			flash_ADDR                : out   std_logic_vector(22 downto 0);                    -- ADDR
			flash_CE_N                : out   std_logic;                                        -- CE_N
			flash_OE_N                : out   std_logic;                                        -- OE_N
			flash_WE_N                : out   std_logic;                                        -- WE_N
			flash_RST_N               : out   std_logic;                                        -- RST_N
			flash_DQ                  : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- DQ
			green_leds_export         : out   std_logic_vector(8 downto 0);                     -- export
			pushbuttons_export        : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- export
			red_leds_export           : out   std_logic_vector(17 downto 0);                    -- export
			reset_reset_n             : in    std_logic                     := 'X';             -- reset_n
			sdram_addr                : out   std_logic_vector(12 downto 0);                    -- addr
			sdram_ba                  : out   std_logic_vector(1 downto 0);                     -- ba
			sdram_cas_n               : out   std_logic;                                        -- cas_n
			sdram_cke                 : out   std_logic;                                        -- cke
			sdram_cs_n                : out   std_logic;                                        -- cs_n
			sdram_dq                  : inout std_logic_vector(31 downto 0) := (others => 'X'); -- dq
			sdram_dqm                 : out   std_logic_vector(3 downto 0);                     -- dqm
			sdram_ras_n               : out   std_logic;                                        -- ras_n
			sdram_we_n                : out   std_logic;                                        -- we_n
			serial_port_RXD           : in    std_logic                     := 'X';             -- RXD
			serial_port_TXD           : out   std_logic;                                        -- TXD
			slider_switches_export    : in    std_logic_vector(17 downto 0) := (others => 'X'); -- export
			sram_DQ                   : inout std_logic_vector(15 downto 0) := (others => 'X'); -- DQ
			sram_ADDR                 : out   std_logic_vector(19 downto 0);                    -- ADDR
			sram_LB_N                 : out   std_logic;                                        -- LB_N
			sram_UB_N                 : out   std_logic;                                        -- UB_N
			sram_CE_N                 : out   std_logic;                                        -- CE_N
			sram_OE_N                 : out   std_logic;                                        -- OE_N
			sram_WE_N                 : out   std_logic;                                        -- WE_N
			video_ext_PIXEL_CLK       : in    std_logic                     := 'X';             -- PIXEL_CLK
			video_ext_LINE_VALID      : in    std_logic                     := 'X';             -- LINE_VALID
			video_ext_FRAME_VALID     : in    std_logic                     := 'X';             -- FRAME_VALID
			video_ext_pixel_clk_reset : in    std_logic                     := 'X';             -- pixel_clk_reset
			video_ext_PIXEL_DATA      : in    std_logic_vector(11 downto 0) := (others => 'X')  -- PIXEL_DATA
		);
	end component nios_system2;

