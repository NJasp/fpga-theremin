#include <stdio.h>
#include "includes.h"
#include "altera_up_avalon_character_lcd.h"
#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_video_pixel_buffer_dma.h"    // "VGA_Subsystem_VGA_Pixel_DMA"#include "altera_up_avalon_video_dma_controller.h"		// "VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA"#include "string.h"#include <os/alt_sem.h>#include "altera_up_avalon_audio.h"#include "altera_up_avalon_audio_and_video_config.h"#define   TASK_STACKSIZE       2048
OS_STK task1_stk[TASK_STACKSIZE];
OS_STK task2_stk[TASK_STACKSIZE];
OS_STK task3_stk[TASK_STACKSIZE];
OS_STK task4_stk[TASK_STACKSIZE];

/* Definition of Task Priorities */

#define TASK1_PRIORITY      10
#define TASK2_PRIORITY      11
#define TASK3_PRIORITY      12
#define TASK4_PRIORITY      9

ALT_SEM( sem);

/*variables - devices*/
alt_up_pixel_buffer_dma_dev* vgapixel;				//pixel buffer device
alt_up_video_dma_dev* vgachar;						//char buffer device
alt_up_parallel_port_dev *audio;
alt_up_character_lcd_dev *lcd_dev;
alt_up_parallel_port_dev *red_LEDs_dev;
alt_up_parallel_port_dev *green_LEDs_dev;
alt_up_parallel_port_dev *slider_switches_dev;
alt_up_parallel_port_dev *hex3_hex0_dev, *hex7_hex4_dev;

/* create a message to be displayed on the VGA and LCD displays */
char text_top_row[40] = "-Jan Verhoeven-\0";
char text_bottom_row[40];

/* The main function creates two task and starts multi-tasking */
int main(void) {
	OSInit();

	void audio_isr(void* context, alt_u32 id) {
		const int len = 2682358;
		static signed char *ptr = test_snd;
		unsigned int x[128];

		alt_up_audio_dev *audio_dev = (alt_up_audio_dev *) context;

		unsigned int n = alt_up_audio_write_fifo_space(audio_dev,
				ALT_UP_AUDIO_RIGHT);

		for (unsigned int i = 0; i < n; i++) {
			x[i] = 0x800000 + ((int) *ptr++) << 9;

			if (ptr > test_snd + len) {
				ptr = test_snd;
				printf("Done\n");
			}
		}

		alt_up_audio_write_fifo(audio_dev, x, n, ALT_UP_AUDIO_RIGHT);
		alt_up_audio_write_fifo(audio_dev, x, n, ALT_UP_AUDIO_LEFT);
	}

	static void audio_init(void) {
		alt_up_audio_dev *audio_dev = alt_up_audio_open_dev(AUDIO_0_NAME);
		if (audio_dev == NULL)
			printf("Error: could not open audio device \n");
		else
			printf("Opened audio device \n");
		alt_up_audio_reset_audio_core(audio_dev);
		alt_up_audio_disable_write_interrupt(audio_dev);
		alt_up_audio_disable_read_interrupt(audio_dev);

		alt_irq_register(AUDIO_0_IRQ, (void *) audio_dev, audio_isr);
		alt_up_audio_enable_write_interrupt(audio_dev);
	}
}

OSStart();
return 0;
}
