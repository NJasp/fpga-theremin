
camkys.elf:     file format elf32-littlenios2
camkys.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00019b70 memsz 0x00019b70 flags r-x
    LOAD off    0x0001ab90 vaddr 0x00019b90 paddr 0x0001ba50 align 2**12
         filesz 0x00001ec0 memsz 0x00001ec0 flags rw-
    LOAD off    0x0001d910 vaddr 0x0001d910 paddr 0x0001d910 align 2**12
         filesz 0x00000000 memsz 0x00003410 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000193cc  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000057c  00019614  00019614  0001a614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ec0  00019b90  0001ba50  0001ab90  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00003410  0001d910  0001d910  0001d910  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00020d20  00020d20  0001ca50  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  0001ca50  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001ca50  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001050  00000000  00000000  0001ca78  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002e0a1  00000000  00000000  0001dac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000acb0  00000000  00000000  0004bb69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e2f1  00000000  00000000  00056819  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000037a8  00000000  00000000  00064b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005360  00000000  00000000  000682b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017a2f  00000000  00000000  0006d614  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  00085044  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001890  00000000  00000000  00085068  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0008bde2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0008bde8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008bded  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008bdee  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008bdef  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008bdf3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008bdf7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008bdfb  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0008be04  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0008be0d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0008be16  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005b  00000000  00000000  0008be21  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  0008be7c  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001bcbce  00000000  00000000  00096a41  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
00019614 l    d  .rodata	00000000 .rodata
00019b90 l    d  .rwdata	00000000 .rwdata
0001d910 l    d  .bss	00000000 .bss
00020d20 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/cat/School/camkys_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00019676 l     O .rodata	00000010 zeroes.4404
000026e0 l     F .text	000000bc __sbprintf
00019686 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000028f0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004420 l     F .text	00000008 __fp_unlock
00004434 l     F .text	0000019c __sinit.part.1
000045d0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00019ba0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00019fe4 l     O .rwdata	00000020 lc_ctype_charset
00019fc4 l     O .rwdata	00000020 lc_message_charset
0001a004 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000196b8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00006ee8 l     F .text	000000fc __sprint_r.part.0
000197ec l     O .rodata	00000010 blanks.4348
000197dc l     O .rodata	00000010 zeroes.4349
00008474 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ccac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000cdcc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000cdf8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000cef8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000cfec l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d0d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d2d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001b9c4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d534 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001b9c8 l     O .rwdata	00000004 lockid
0001d958 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001b9cc l     O .rwdata	00000004 lockid
0001d960 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000f314 l     F .text	00000098 OS_InitMisc
0000f3ac l     F .text	00000098 OS_InitRdyList
0000f544 l     F .text	000000f4 OS_InitTCBList
0000f22c l     F .text	000000e8 OS_InitEventList
0000f444 l     F .text	00000080 OS_InitTaskIdle
0000f4c4 l     F .text	00000080 OS_InitTaskStat
0000f80c l     F .text	0000008c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00011738 l     F .text	00000110 OS_FlagTaskRdy
00011488 l     F .text	000001c8 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015c10 l     F .text	00000038 alt_dev_reg
0001a5ec l     O .rwdata	0000106c JTAG_UART
0001b658 l     O .rwdata	00000030 AV_Config
0001b688 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001b6b8 l     O .rwdata	0000002c Char_LCD_16x2
0001b6e4 l     O .rwdata	0000002c IrDA
0001b710 l     O .rwdata	0000002c Expansion_JP5
0001b73c l     O .rwdata	0000002c Green_LEDs
0001b768 l     O .rwdata	0000002c HEX3_HEX0
0001b794 l     O .rwdata	0000002c HEX7_HEX4
0001b7c0 l     O .rwdata	0000002c Pushbuttons
0001b7ec l     O .rwdata	0000002c Red_LEDs
0001b818 l     O .rwdata	0000002c Slider_Switches
0001b844 l     O .rwdata	00000038 PS2_Port
0001b87c l     O .rwdata	00000038 PS2_Port_Dual
0001b8b4 l     O .rwdata	0000002c Serial_Port
0001b8e0 l     O .rwdata	00000034 USB
0001b914 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0001b968 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001624c l     F .text	000002b8 altera_avalon_jtag_uart_irq
00016504 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00016d10 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00018240 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000184b8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000187a8 l     F .text	00000050 alt_get_errno
000187f8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001d9c4 g     O .bss	00000004 alt_instruction_exception_handler
000069f8 g     F .text	00000074 _mprec_log10
0001ba1a g     O .rwdata	00000002 OSTaskNameSize
00006ae4 g     F .text	0000008c __any_on
00008ecc g     F .text	00000054 _isatty_r
000196c4 g     O .rodata	00000028 __mprec_tinytens
0000d1fc g     F .text	000000d8 alt_main
00020c20 g     O .bss	00000100 alt_irq
000178e4 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00008f20 g     F .text	00000060 _lseek_r
00011fa4 g     F .text	000000d4 OS_MemInit
0001ba50 g       *ABS*	00000000 __flash_rwdata_start
00015ba8 g     F .text	00000068 OSTimeSet
00016e84 g     F .text	00000040 alt_up_character_lcd_send_cmd
0000b7d8 g     F .text	00000088 .hidden __eqdf2
0000dc3c g     F .text	000006a0 OSEventPendMulti
00020d20 g       *ABS*	00000000 __alt_heap_start
00018e10 g     F .text	00000024 OSTaskCreateHook
00000490 g     F .text	0000003c printf
0001b9f2 g     O .rwdata	00000002 OSMboxEn
0000e334 g     F .text	000000a4 OSIntEnter
000097f8 g     F .text	0000009c _wcrtomb_r
00006d10 g     F .text	0000005c __sseek
00004770 g     F .text	00000010 __sinit
000096a0 g     F .text	00000140 __swbuf_r
000176fc g     F .text	00000034 read_CE_bit
0001ba02 g     O .rwdata	00000002 OSQEn
00004d7c g     F .text	0000007c _setlocale_r
000045d8 g     F .text	00000068 __sfmoreglue
0000d8f0 g     F .text	000000dc __malloc_unlock
00018e78 g     F .text	00000020 OSTaskStatHook
00017a84 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
00017f7c g     F .text	00000090 alt_up_rs232_read_fd
0001d968 g     O .bss	00000001 OSLockNesting
0001ba40 g     O .rwdata	00000002 OSDataSize
0001d969 g     O .bss	00000001 OSRunning
00008f80 g     F .text	0000015c memmove
00018eb8 g     F .text	00000020 OSInitHookBegin
0001ba38 g     O .rwdata	00000002 OSTmrSize
00004758 g     F .text	00000018 _cleanup
00005b74 g     F .text	000000a8 _Balloc
0001d96c g     O .bss	00000004 OSIdleCtr
0000b860 g     F .text	000000dc .hidden __gtdf2
00018bc0 g     F .text	00000024 altera_nios2_gen2_irq_init
00018c90 g       .text	00000000 OSStartTsk
00016e10 g     F .text	00000074 get_DDRAM_addr
0000fbd0 g     F .text	00000334 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0001ba3e g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001b9de g     O .rwdata	00000002 OSEventSize
0001d970 g     O .bss	00000001 OSPrioHighRdy
000089b4 g     F .text	0000005c _fstat_r
00018e34 g     F .text	00000024 OSTaskDelHook
0001d944 g     O .bss	00000004 errno
00006c8c g     F .text	00000008 __seofread
00018c70 g       .text	00000000 OSStartHighRdy
00014498 g     F .text	000001f4 OSTaskCreateExt
00010fc8 g     F .text	00000068 OSFlagPendGetFlagsRdy
0001ba1e g     O .rwdata	00000002 OSTaskStatStkSize
00010094 g     F .text	00000308 OSFlagAccept
0001267c g     F .text	000000b8 OSQFlush
00012078 g     F .text	00000140 OSQAccept
0001d950 g     O .bss	00000004 alt_argv
00023994 g       *ABS*	00000000 _gp
000142dc g     F .text	000001bc OSTaskCreate
00013d9c g     F .text	00000540 OSTaskChangePrio
0001d964 g     O .bss	00000004 alt_heapsem
0000ff04 g     F .text	00000190 OSDebugInit
0001468c g     F .text	000003e0 OSTaskDel
0001d9c8 g     O .bss	0000000c display_buffer
0001d914 g     O .bss	00000008 hex_segments
0001a46c g     O .rwdata	00000180 alt_fd_list
0001d9fc g     O .bss	00000370 OSFlagTbl
0001d910 g     O .bss	00000004 shift_direction
0000f00c g     F .text	000000b8 OS_EventTaskRemove
000183f4 g     F .text	00000090 alt_find_dev
00005904 g     F .text	00000148 memcpy
0001ba08 g     O .rwdata	00000002 OSRdyTblSize
00017030 g     F .text	00000050 alt_up_character_lcd_write_fd
00004428 g     F .text	0000000c _cleanup_r
0000cac4 g     F .text	000000dc .hidden __floatsidf
0001857c g     F .text	0000007c alt_io_redirect
0000b93c g     F .text	000000f4 .hidden __ltdf2
00019614 g       *ABS*	00000000 __DTOR_END__
000175c8 g     F .text	00000090 alt_up_irda_write_fd
00017f08 g     F .text	00000074 alt_up_rs232_read_data
000191dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000d9cc g     F .text	00000128 OSEventNameGet
0001b9ec g     O .rwdata	00000002 OSFlagMax
00006b70 g     F .text	00000074 __fpclassifyd
00006954 g     F .text	000000a4 __ratio
0000e3d8 g     F .text	00000164 OSIntExit
00008458 g     F .text	0000001c __vfiprintf_internal
0001ba26 g     O .rwdata	00000002 OSTCBSize
0001d971 g     O .bss	00000001 OSPrioCur
000173c4 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00016770 g     F .text	000002cc altera_avalon_jtag_uart_read
00000460 g     F .text	00000030 _printf_r
0000a588 g     F .text	00000064 .hidden __udivsi3
0000cf48 g     F .text	000000a4 isatty
0001ba0c g     O .rwdata	00000002 OSStkWidth
00019714 g     O .rodata	000000c8 __mprec_tens
0001ba00 g     O .rwdata	00000002 OSPtrSize
00004df8 g     F .text	0000000c __locale_charset
0001b9e0 g     O .rwdata	00000002 OSEventTblSize
00017364 g     F .text	00000060 alt_up_irda_disable_read_interrupt
00018be4 g       .text	00000000 OSCtxSw
0001914c g     F .text	00000090 alt_icache_flush
0001d940 g     O .bss	00000004 __malloc_top_pad
0001d974 g     O .bss	00000004 OSTCBList
0001d948 g     O .bss	00000004 alt_fd_list_lock
0001b99c g     O .rwdata	00000004 __mb_cur_max
00004e28 g     F .text	0000000c _localeconv_r
00008a10 g     F .text	000004bc __sfvwrite_r
00005f80 g     F .text	0000003c __i2b
0001dd6c g     O .bss	00000c30 OSMemTbl
0001d978 g     O .bss	00000001 OSTickStepState
00006be4 g     F .text	00000054 _sbrk_r
0001ba04 g     O .rwdata	00000002 OSQMax
0001e99c g     O .bss	00000800 OSTaskStatStk
00011bd0 g     F .text	000000f8 OSMemNameGet
0001b9e4 g     O .rwdata	00000002 OSFlagEn
000090dc g     F .text	00000060 _read_r
0001ba2a g     O .rwdata	00000002 OSTimeTickHookEn
00012b9c g     F .text	00000168 OSQPost
00011848 g     F .text	000000a4 OS_FlagUnlink
0001b9bc g     O .rwdata	00000004 alt_max_fd
00017e84 g     F .text	00000044 alt_up_rs232_check_parity
0000f68c g     F .text	00000068 OS_MemCopy
0000f6f4 g     F .text	00000118 OS_Sched
000086a8 g     F .text	000000f0 _fclose_r
00011ae0 g     F .text	000000f0 OSMemGet
00014d6c g     F .text	000001c4 OSTaskNameSet
00017730 g     F .text	00000030 read_num_bytes_available
000043f0 g     F .text	00000030 fflush
0001d93c g     O .bss	00000004 __malloc_max_sbrked_mem
0001d97c g     O .bss	00000004 OSCtxSwCtr
00018e98 g     F .text	00000020 OSTimeTickHook
000185f8 g     F .text	000001b0 alt_irq_register
0001b9ee g     O .rwdata	00000002 OSFlagNameSize
00017698 g     F .text	00000034 read_RI_bit
0000f0c4 g     F .text	00000100 OS_EventTaskRemoveMulti
0000a644 g     F .text	000008ac .hidden __adddf3
0000ee54 g     F .text	000001b8 OS_EventTaskWaitMulti
000066fc g     F .text	0000010c __b2d
0001ba06 g     O .rwdata	00000002 OSQSize
00009f58 g     F .text	00000538 .hidden __umoddi3
0000d128 g     F .text	000000d4 lseek
000136a4 g     F .text	0000026c OSSemPend
0001b994 g     O .rwdata	00000004 _global_impure_ptr
0000913c g     F .text	00000564 _realloc_r
0001b9f0 g     O .rwdata	00000002 OSLowestPrio
00020d20 g       *ABS*	00000000 __bss_end
00018f18 g     F .text	00000024 OSTCBInitHook
0001ba36 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00018ab8 g     F .text	00000108 alt_tick
000099e0 g     F .text	00000578 .hidden __udivdi3
00008910 g     F .text	00000024 _fputwc_r
0001b9d8 g     O .rwdata	00000002 OSEventEn
000196ec g     O .rodata	00000028 __mprec_bigtens
00005d64 g     F .text	00000104 __s2b
0001ba32 g     O .rwdata	00000002 OSTmrCfgNameSize
0000cba0 g     F .text	000000a8 .hidden __floatunsidf
0000643c g     F .text	00000060 __mcmp
00017794 g     F .text	0000002c read_data_byte
00004790 g     F .text	00000018 __fp_lock_all
00011650 g     F .text	000000e8 OS_FlagInit
00018a1c g     F .text	0000009c alt_alarm_stop
000176cc g     F .text	00000030 read_RE_bit
0001ba14 g     O .rwdata	00000002 OSTaskIdleStkSize
0001d9b8 g     O .bss	00000004 alt_irq_active
0001328c g     F .text	000000b0 OSSemAccept
00011de4 g     F .text	000000d8 OSMemPut
000118ec g     F .text	000001f4 OSMemCreate
0001d980 g     O .bss	00000004 OSIdleCtrMax
00017404 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
0001a444 g     O .rwdata	00000028 alt_dev_null
0001ba28 g     O .rwdata	00000002 OSTicksPerSec
000172d0 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
00018be4 g       .text	00000000 OSIntCtxSw
00017944 g     F .text	00000074 alt_up_ps2_write_data_byte
00018220 g     F .text	00000020 alt_dcache_flush_all
00005e68 g     F .text	00000068 __hi0bits
0000ca44 g     F .text	00000080 .hidden __fixdfsi
0001d984 g     O .bss	00000004 OSTCBFreeList
0001ba50 g       *ABS*	00000000 __ram_rwdata_end
00013910 g     F .text	0000016c OSSemPendAbort
0001b9b4 g     O .rwdata	00000008 alt_dev_list
0000d584 g     F .text	000000f8 write
0001ba2c g     O .rwdata	00000002 OSVersionNbr
00019b90 g       *ABS*	00000000 __ram_rodata_end
0000ce48 g     F .text	000000b0 fstat
0001800c g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000b93c g     F .text	000000f4 .hidden __ledf2
0001b9d4 g     O .rwdata	00000004 OSEndiannessTest
000061b4 g     F .text	00000140 __pow5mult
00006ffc g     F .text	0000145c ___vfiprintf_internal_r
0001d934 g     O .bss	00000004 __nlocale_changed
0000a5ec g     F .text	00000058 .hidden __umodsi3
0001b9e6 g     O .rwdata	00000002 OSFlagGrpSize
00020d20 g       *ABS*	00000000 end
00017c74 g     F .text	00000098 alt_up_ps2_write_fd
00017440 g     F .text	00000044 alt_up_irda_check_parity
00016108 g     F .text	00000144 altera_avalon_jtag_uart_init
0000f9cc g     F .text	00000138 OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00019614 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00016d8c g     F .text	00000084 alt_avalon_timer_sc_init
0000cc48 g     F .text	00000064 .hidden __clzsi2
00016a3c g     F .text	000002d4 altera_avalon_jtag_uart_write
00004780 g     F .text	00000004 __sfp_lock_acquire
00005820 g     F .text	000000e4 memchr
0000f638 g     F .text	00000054 OS_MemClr
00016f3c g     F .text	0000007c alt_up_character_lcd_write
000004cc g     F .text	000021f8 ___vfprintf_internal_r
00018cb4 g     F .text	0000015c OSTaskStkInit
000048e4 g     F .text	00000310 _free_r
00004e04 g     F .text	00000010 __locale_mb_cur_max
0000eb30 g     F .text	000001b4 OS_EventTaskRdy
00019458 g     F .text	00000180 __call_exitprocs
0001d988 g     O .bss	00000001 OSCPUUsage
0001d930 g     O .bss	00000004 __mlocale_changed
0001b9a0 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
0001d9bc g     O .bss	00000004 _alt_tick_rate
00012734 g     F .text	000002fc OSQPend
000156a0 g     F .text	0000014c OSTimeDly
000062f4 g     F .text	00000148 __lshift
0001d9c0 g     O .bss	00000004 _alt_nticks
0000d324 g     F .text	000000fc read
00015c80 g     F .text	00000324 alt_sys_init
00017180 g     F .text	0000008c alt_up_character_lcd_shift_display
00019340 g     F .text	00000118 __register_exitproc
0001d989 g     O .bss	00000001 OSTaskCtr
00017b90 g     F .text	00000058 alt_up_ps2_clear_fifo
00017e48 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000157ec g     F .text	00000168 OSTimeDlyHMSM
00005fbc g     F .text	000001f8 __multiply
0001720c g     F .text	0000008c alt_up_character_lcd_erase_pos
00016618 g     F .text	00000068 altera_avalon_jtag_uart_close
00019b90 g       *ABS*	00000000 __ram_rwdata_start
00019614 g       *ABS*	00000000 __ram_rodata_start
0001d9d4 g     O .bss	00000028 __malloc_current_mallinfo
0001b9da g     O .rwdata	00000002 OSEventMax
00006808 g     F .text	0000014c __d2b
00013a7c g     F .text	00000110 OSSemPost
0000e5f4 g     F .text	00000110 OSSchedUnlock
00015fa4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00019050 g     F .text	000000fc alt_get_fd
0001d98c g     O .bss	00000004 OSMemFreeList
0000e7ac g     F .text	000000d0 OSStatInit
000113c4 g     F .text	000000c4 OSFlagQuery
0001ba10 g     O .rwdata	00000002 OSTaskCreateExtEn
00008590 g     F .text	00000054 _close_r
000192c4 g     F .text	0000007c memcmp
0000eb10 g     F .text	00000020 OS_Dummy
00016064 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00020d20 g       *ABS*	00000000 __alt_stack_base
000160b4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00017308 g     F .text	0000005c alt_up_irda_enable_read_interrupt
0000279c g     F .text	00000154 __swsetup_r
0001f19c g     O .bss	000001e0 OSQTbl
0000aef0 g     F .text	000008e8 .hidden __divdf3
00004640 g     F .text	00000118 __sfp
00006a6c g     F .text	00000078 __copybits
0001a03c g     O .rwdata	00000408 __malloc_av_
0000478c g     F .text	00000004 __sinit_lock_release
0001d990 g     O .bss	00000004 OSTCBHighRdy
0000ba30 g     F .text	00000718 .hidden __muldf3
00006c38 g     F .text	00000054 __sread
0001d994 g     O .bss	00000004 OSQFreeList
00017da8 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00018f3c g     F .text	00000114 alt_find_file
00018290 g     F .text	000000a4 alt_dev_llist_insert
0000d7b8 g     F .text	00000138 __malloc_lock
0000d484 g     F .text	000000b0 sbrk
0000daf4 g     F .text	00000148 OSEventNameSet
00004394 g     F .text	0000005c _fflush_r
000085e4 g     F .text	000000c4 _calloc_r
0001d998 g     O .bss	00000001 OSRdyGrp
00000340 g     F .text	00000120 Test_expansion_ports
0001d910 g       *ABS*	00000000 __bss_start
00005a4c g     F .text	00000128 memset
00000284 g     F .text	000000bc main
0001d954 g     O .bss	00000004 alt_envp
0001d938 g     O .bss	00000004 __malloc_max_total_mem
00016004 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000097e0 g     F .text	00000018 __swbuf
00019918 g     O .rodata	00000100 OSUnMapTbl
0001ba0a g     O .rwdata	00000002 OSSemEn
000170f4 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00011030 g     F .text	00000394 OSFlagPost
00006d6c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00008798 g     F .text	00000014 fclose
0000ece4 g     F .text	00000170 OS_EventTaskWait
00017b20 g     F .text	00000070 alt_up_ps2_read_data_byte
0000fb04 g     F .text	000000cc OS_TaskStatStkChk
00014a6c g     F .text	00000158 OSTaskDelReq
00002af0 g     F .text	00001688 _dtoa_r
00005014 g     F .text	0000080c _malloc_r
00009954 g     F .text	00000030 __ascii_wctomb
0001b9c0 g     O .rwdata	00000004 alt_errno
0000e704 g     F .text	000000a8 OSStart
00019b90 g     O .rwdata	00000010 seven_seg_decode_table
0000d750 g     F .text	00000068 __env_unlock
00004bf4 g     F .text	000000c4 _fwalk
00014f30 g     F .text	000001f8 OSTaskResume
00011ebc g     F .text	000000e8 OSMemQuery
0001ba1c g     O .rwdata	00000002 OSTaskStatEn
00017484 g     F .text	00000040 alt_up_irda_write_data
0001b9f6 g     O .rwdata	00000002 OSMemMax
00012d04 g     F .text	00000170 OSQPostFront
00017d0c g     F .text	00000040 alt_up_ps2_open_dev
0000a490 g     F .text	00000084 .hidden __divsi3
0001d999 g     O .bss	00000003 OSRdyTbl
0001b9d0 g     O .rwdata	00000002 OSDebugEn
00016efc g     F .text	00000040 alt_up_character_lcd_open_dev
000047c0 g     F .text	00000124 _malloc_trim_r
00017888 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
00019614 g       *ABS*	00000000 __CTOR_END__
0001b9e8 g     O .rwdata	00000002 OSFlagNodeSize
0001ba30 g     O .rwdata	00000002 OSTmrCfgMax
00016ec4 g     F .text	00000038 alt_up_character_lcd_init
00006d74 g     F .text	000000dc strcmp
000121b8 g     F .text	000001fc OSQCreate
00014bc4 g     F .text	000001a8 OSTaskNameGet
00019614 g       *ABS*	00000000 __flash_rodata_start
00012e74 g     F .text	0000020c OSQPostOpt
0000e87c g     F .text	00000274 OSTimeTick
0001ba18 g     O .rwdata	00000002 OSTaskMax
00019614 g       *ABS*	00000000 __DTOR_LIST__
0001333c g     F .text	00000100 OSSemCreate
0001ba3c g     O .rwdata	00000002 OSTmrWheelSize
0001d920 g     O .bss	00000004 eight_sec
000180a0 g     F .text	00000040 alt_up_rs232_open_dev
0000b7d8 g     F .text	00000088 .hidden __nedf2
0001ba12 g     O .rwdata	00000002 OSTaskDelEn
00013b8c g     F .text	00000110 OSSemQuery
000123b4 g     F .text	000002c8 OSQDel
00012a30 g     F .text	0000016c OSQPendAbort
00015c48 g     F .text	00000038 alt_irq_init
0000d420 g     F .text	00000064 alt_release_fd
00017760 g     F .text	00000034 read_data_valid
00017298 g     F .text	00000038 alt_up_character_lcd_cursor_off
000197fc g     O .rodata	00000100 .hidden __clz_tab
0001d92c g     O .bss	00000004 _PathLocale
00017a20 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00019278 g     F .text	00000014 atexit
00008530 g     F .text	00000060 _write_r
0000e53c g     F .text	000000b8 OSSchedLock
00004e34 g     F .text	00000018 setlocale
0001039c g     F .text	00000128 OSFlagCreate
0001b998 g     O .rwdata	00000004 _impure_ptr
0001d94c g     O .bss	00000004 alt_argc
00004178 g     F .text	0000021c __sflush_r
00018394 g     F .text	00000060 _do_dtors
00004e20 g     F .text	00000008 __locale_cjk_lang
0001d928 g     O .bss	00000004 LED_toggle
0001b9e2 g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
000104c4 g     F .text	00000270 OSFlagDel
0001d99c g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00006698 g     F .text	00000064 __ulp
000109b8 g     F .text	00000610 OSFlagPend
0001ba2e g     O .rwdata	00000002 OSTmrEn
000047a8 g     F .text	00000018 __fp_unlock_all
0001b9ac g     O .rwdata	00000008 alt_fs_list
0000f898 g     F .text	00000074 OS_StrCopy
00017d4c g     F .text	0000005c alt_up_rs232_enable_read_interrupt
00017ec8 g     F .text	00000040 alt_up_rs232_write_data
0001b9f8 g     O .rwdata	00000002 OSMemNameSize
00018ed8 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001ba24 g     O .rwdata	00000002 OSTCBPrioTblMax
00004e4c g     F .text	0000000c localeconv
0001ba20 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001d91c g     O .bss	00000004 green_LED_pattern
0001b9f4 g     O .rwdata	00000002 OSMemEn
0001b9fe g     O .rwdata	00000002 OSMutexEn
0001ba50 g       *ABS*	00000000 _edata
0001d924 g     O .bss	00000004 display_toggle
00020d20 g       *ABS*	00000000 _end
0001d9a0 g     O .bss	00000001 OSIntNesting
000087ac g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
00016680 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00015954 g     F .text	000001f0 OSTimeDlyResume
00010864 g     F .text	00000154 OSFlagNameSet
00015128 g     F .text	000001c8 OSTaskStkChk
0001b9fa g     O .rwdata	00000002 OSMemSize
00006c94 g     F .text	0000007c __swrite
0001b9a4 g     O .rwdata	00000004 __malloc_trim_threshold
00004e14 g     F .text	0000000c __locale_msgcharset
0001d9a4 g     O .bss	00000004 OSTCBCur
0001928c g     F .text	00000038 exit
000174c4 g     F .text	00000074 alt_up_irda_read_data
0001b9fc g     O .rwdata	00000002 OSMemTblSize
00004cb8 g     F .text	000000c4 _fwalk_reent
000177c0 g     F .text	000000c8 alt_up_ps2_init
0000649c g     F .text	000001fc __mdiff
0000a514 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004784 g     F .text	00000004 __sfp_lock_release
0000e2dc g     F .text	00000058 OSInit
00015504 g     F .text	0000012c OSTaskQuery
00016fb8 g     F .text	00000078 alt_up_character_lcd_string
000131dc g     F .text	000000b0 OS_QInit
0000f90c g     F .text	00000054 OS_StrLen
00017658 g     F .text	00000040 alt_up_irda_open_dev
00011cc8 g     F .text	0000011c OSMemNameSet
0001ba16 g     O .rwdata	00000002 OSTaskProfileEn
0001d9a8 g     O .bss	00000004 OSTime
0001f37c g     O .bss	00000800 OSTaskIdleStk
000195d8 g     F .text	0000003c _exit
000180e0 g     F .text	00000140 alt_alarm_start
00010734 g     F .text	00000130 OSFlagNameGet
00015b44 g     F .text	00000064 OSTimeGet
00004e58 g     F .text	000001bc __smakebuf_r
000179b8 g     F .text	00000068 alt_up_ps2_wait_for_ack
00006e50 g     F .text	00000098 strlen
00018e58 g     F .text	00000020 OSTaskSwHook
000188c4 g     F .text	00000158 open
0001fb7c g     O .bss	00000b40 OSEventTbl
0000b860 g     F .text	000000dc .hidden __gedf2
000206bc g     O .bss	00000510 OSTCBTbl
00013c9c g     F .text	00000100 OSSemSet
0001b9a8 g     O .rwdata	00000004 __wctomb
00006fe4 g     F .text	00000018 __sprint_r
00018484 g     F .text	00000034 alt_icache_flush_all
00017080 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001ba44 g     O .rwdata	00000004 alt_priority_mask
0001343c g     F .text	00000268 OSSemDel
0001d9ac g     O .bss	00000004 OSFlagFreeList
0001b9dc g     O .rwdata	00000002 OSEventNameSize
000026c4 g     F .text	0000001c __vfprintf_internal
0001d9b0 g     O .bss	00000001 OSStatRdy
00020bcc g     O .bss	00000054 OSTCBPrioTbl
00009984 g     F .text	0000005c _wctomb_r
0000d67c g     F .text	000000d4 __env_lock
00017be8 g     F .text	0000008c alt_up_ps2_read_fd
0001ba22 g     O .rwdata	00000002 OSTaskSwHookEn
0000c148 g     F .text	000008fc .hidden __subdf3
00017538 g     F .text	00000090 alt_up_irda_read_fd
00005ed0 g     F .text	000000b0 __lo0bits
0001ba48 g     O .rwdata	00000008 alt_alarm_list
0001b9ea g     O .rwdata	00000002 OSFlagWidth
00018334 g     F .text	00000060 _do_ctors
00017e08 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00009894 g     F .text	000000c0 wcrtomb
0000ccfc g     F .text	000000d0 close
0001d95c g     O .bss	00000004 alt_envsem
0001d9b4 g     O .bss	00000004 OSIdleCtrRun
0000eaf0 g     F .text	00000020 OSVersion
0001ba34 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000d054 g     F .text	00000084 alt_load
00015630 g     F .text	00000070 OS_TaskStkClr
0001ba0e g     O .rwdata	00000002 OSTaskCreateEn
0000f1c4 g     F .text	00000068 OS_EventWaitListInit
00008934 g     F .text	00000080 fputwc
00018ef8 g     F .text	00000020 OSTaskIdleHook
00004788 g     F .text	00000004 __sinit_lock_acquire
00005c44 g     F .text	00000120 __multadd
000152f0 g     F .text	00000214 OSTaskSuspend
00005c1c g     F .text	00000028 _Bfree
0000f960 g     F .text	0000006c OS_TaskIdle
0001ba3a g     O .rwdata	00000002 OSTmrTblSize
00013080 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000e3340 	call	e334 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	10830804 	addi	r2,r2,3104
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10830804 	addi	r2,r2,3104
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	000e3d80 	call	e3d8 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a80c17 	ldw	r2,-24528(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a80c17 	ldw	r2,-24528(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d68e6514 	ori	gp,gp,14740
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     25c:	10b64414 	ori	r2,r2,55568

    movhi r3, %hi(__bss_end)
     260:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     264:	18c34814 	ori	r3,r3,3360

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	000d0540 	call	d054 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	000d1fc0 	call	d1fc <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <alt_after_alt_main>

00000284 <main>:
     D28    .   .   D29
     D30    .   .   D31

****************************************************************************************/
int main(void)
{
     284:	defffc04 	addi	sp,sp,-16
     288:	dfc00315 	stw	ra,12(sp)
     28c:	df000215 	stw	fp,8(sp)
     290:	df000204 	addi	fp,sp,8
	/* Declare volatile pointers to I/O registers (volatile means that IO load
	 * and store instructions will be used to access these pointer locations,
	 * instead of regular memory loads and stores)
	*/
	volatile int * interval_timer_ptr = (int *) TIMER_BASE;
     294:	00840034 	movhi	r2,4096
     298:	10880004 	addi	r2,r2,8192
     29c:	e0bffe15 	stw	r2,-8(fp)
	volatile int * pushbutton_ptr = (int *) KEY_BASE;
     2a0:	00840034 	movhi	r2,4096
     2a4:	10801404 	addi	r2,r2,80
     2a8:	e0bfff15 	stw	r2,-4(fp)

	/* initialize 7-segment displays buffer (dE2 115 just before being visible on left side) */
	display_buffer[0] = 0xdE20115;
     2ac:	008000b4 	movhi	r2,2
     2b0:	10b67204 	addi	r2,r2,-9784
     2b4:	00c378b4 	movhi	r3,3554
     2b8:	18c04544 	addi	r3,r3,277
     2bc:	10c00015 	stw	r3,0(r2)
	display_buffer[1] = 0x0;
     2c0:	008000b4 	movhi	r2,2
     2c4:	10b67204 	addi	r2,r2,-9784
     2c8:	10000115 	stw	zero,4(r2)
	display_buffer[2] = 0x0;
     2cc:	008000b4 	movhi	r2,2
     2d0:	10b67204 	addi	r2,r2,-9784
     2d4:	10000215 	stw	zero,8(r2)

	green_LED_pattern = 0x55555555;	// used for a flashing pattern on the green lights
     2d8:	00955574 	movhi	r2,21845
     2dc:	10955544 	addi	r2,r2,21845
     2e0:	d0a7e215 	stw	r2,-24696(gp)
	eight_sec = 0;							// initialize 8-second delay counter
     2e4:	d027e315 	stw	zero,-24692(gp)
	display_toggle = 0;					// display initialized to scroll the text dE2 115
     2e8:	d027e415 	stw	zero,-24688(gp)
	shift_direction = 1;					// initial shift direction is to the right
     2ec:	00800044 	movi	r2,1
     2f0:	d0a7df15 	stw	r2,-24708(gp)

	*(interval_timer_ptr + 1) = 0x7;	// Set START = 1, CONT = 1, ITO = 1
     2f4:	e0bffe17 	ldw	r2,-8(fp)
     2f8:	10800104 	addi	r2,r2,4
     2fc:	00c001c4 	movi	r3,7
     300:	10c00015 	stw	r3,0(r2)
	*(pushbutton_ptr + 2) = 0xE; 		// Set the 3 interrupt mask bits to 1 (bit 0 is Nios II reset)
     304:	e0bfff17 	ldw	r2,-4(fp)
     308:	10800204 	addi	r2,r2,8
     30c:	00c00384 	movi	r3,14
     310:	10c00015 	stw	r3,0(r2)


	NIOS2_WRITE_IENABLE( 0x3 | 0x8000 );	// Set interrupt mask for the interval timer, pushbuttons and expansion port (JP5)
     314:	00a000d4 	movui	r2,32771
     318:	100170fa 	wrctl	ienable,r2
	NIOS2_WRITE_STATUS( 1 );			// Enable Nios II interrupts
     31c:	00800044 	movi	r2,1
     320:	1001703a 	wrctl	status,r2
	Test_expansion_ports();
     324:	00003400 	call	340 <Test_expansion_ports>
	return 0;
     328:	0005883a 	mov	r2,zero
}
     32c:	e037883a 	mov	sp,fp
     330:	dfc00117 	ldw	ra,4(sp)
     334:	df000017 	ldw	fp,0(sp)
     338:	dec00204 	addi	sp,sp,8
     33c:	f800283a 	ret

00000340 <Test_expansion_ports>:

void Test_expansion_ports( void )
{
     340:	defff904 	addi	sp,sp,-28
     344:	dfc00615 	stw	ra,24(sp)
     348:	df000515 	stw	fp,20(sp)
     34c:	df000504 	addi	fp,sp,20
  	volatile int * JP5_EXPANSION_ptr = (int *) EXPANSION_JP5_BASE;
     350:	00840034 	movhi	r2,4096
     354:	10801804 	addi	r2,r2,96
     358:	e0bffb15 	stw	r2,-20(fp)

    // set all pins to be outputs and restore 1 to all pins
    *(JP5_EXPANSION_ptr+1) = 0xffffffff;
     35c:	e0bffb17 	ldw	r2,-20(fp)
     360:	10800104 	addi	r2,r2,4
     364:	00ffffc4 	movi	r3,-1
     368:	10c00015 	stw	r3,0(r2)
    *(JP5_EXPANSION_ptr) = 0xffffffff;
     36c:	e0bffb17 	ldw	r2,-20(fp)
     370:	00ffffc4 	movi	r3,-1
     374:	10c00015 	stw	r3,0(r2)

    // set the even-numbered pins to be output pins and write 0 to all output pins
	*(JP5_EXPANSION_ptr+1) = 0x55555555;
     378:	e0bffb17 	ldw	r2,-20(fp)
     37c:	10c00104 	addi	r3,r2,4
     380:	00955574 	movhi	r2,21845
     384:	10955544 	addi	r2,r2,21845
     388:	18800015 	stw	r2,0(r3)
    *(JP5_EXPANSION_ptr) = 0x0;
     38c:	e0bffb17 	ldw	r2,-20(fp)
     390:	10000015 	stw	zero,0(r2)

    //read the input pins value
    volatile int odd_in = *(JP5_EXPANSION_ptr);
     394:	e0bffb17 	ldw	r2,-20(fp)
     398:	10800017 	ldw	r2,0(r2)
     39c:	e0bffe15 	stw	r2,-8(fp)
    printf("input pins useless value: %d", odd_in);
     3a0:	e0bffe17 	ldw	r2,-8(fp)
     3a4:	100b883a 	mov	r5,r2
     3a8:	010000b4 	movhi	r4,2
     3ac:	21258504 	addi	r4,r4,-27116
     3b0:	00004900 	call	490 <printf>

     //if one input pin connected to one output pin, its value would be drawn to 0.
    int odd_correct = (odd_in != 0xaaaaaaaa) ? 1 : 0;
     3b4:	e0fffe17 	ldw	r3,-8(fp)
     3b8:	00aaaaf4 	movhi	r2,43691
     3bc:	10aaaa84 	addi	r2,r2,-21846
     3c0:	1884c03a 	cmpne	r2,r3,r2
     3c4:	10803fcc 	andi	r2,r2,255
     3c8:	e0bffc15 	stw	r2,-16(fp)


    // set all pins to be outputs and restore 1 to all pins
    *(JP5_EXPANSION_ptr+1) = 0xffffffff;
     3cc:	e0bffb17 	ldw	r2,-20(fp)
     3d0:	10800104 	addi	r2,r2,4
     3d4:	00ffffc4 	movi	r3,-1
     3d8:	10c00015 	stw	r3,0(r2)
    *(JP5_EXPANSION_ptr) = 0xffffffff;
     3dc:	e0bffb17 	ldw	r2,-20(fp)
     3e0:	00ffffc4 	movi	r3,-1
     3e4:	10c00015 	stw	r3,0(r2)

    //set the odd-numbered pins to be the output pins and write 0 to all output pins
	*(JP5_EXPANSION_ptr+1) = 0xaaaaaaaa;
     3e8:	e0bffb17 	ldw	r2,-20(fp)
     3ec:	10c00104 	addi	r3,r2,4
     3f0:	00aaaaf4 	movhi	r2,43691
     3f4:	10aaaa84 	addi	r2,r2,-21846
     3f8:	18800015 	stw	r2,0(r3)
    *(JP5_EXPANSION_ptr) = 0x0;
     3fc:	e0bffb17 	ldw	r2,-20(fp)
     400:	10000015 	stw	zero,0(r2)

    //read the input pins value
    volatile int even_in = *(JP5_EXPANSION_ptr);
     404:	e0bffb17 	ldw	r2,-20(fp)
     408:	10800017 	ldw	r2,0(r2)
     40c:	e0bfff15 	stw	r2,-4(fp)

    //if one input pin connected to one output pin, its value would be drawn to 0.
    int even_correct = (even_in != 0x55555555) ? 1 : 0;
     410:	e0ffff17 	ldw	r3,-4(fp)
     414:	00955574 	movhi	r2,21845
     418:	10955544 	addi	r2,r2,21845
     41c:	1884c03a 	cmpne	r2,r3,r2
     420:	10803fcc 	andi	r2,r2,255
     424:	e0bffd15 	stw	r2,-12(fp)

    //if both of input and output function correctly for the two pins, toggle the red LEDs
    LED_toggle = odd_correct && even_correct;
     428:	e0bffc17 	ldw	r2,-16(fp)
     42c:	10000426 	beq	r2,zero,440 <Test_expansion_ports+0x100>
     430:	e0bffd17 	ldw	r2,-12(fp)
     434:	10000226 	beq	r2,zero,440 <Test_expansion_ports+0x100>
     438:	00800044 	movi	r2,1
     43c:	00000106 	br	444 <Test_expansion_ports+0x104>
     440:	0005883a 	mov	r2,zero
     444:	d0a7e515 	stw	r2,-24684(gp)

}
     448:	0001883a 	nop
     44c:	e037883a 	mov	sp,fp
     450:	dfc00117 	ldw	ra,4(sp)
     454:	df000017 	ldw	fp,0(sp)
     458:	dec00204 	addi	sp,sp,8
     45c:	f800283a 	ret

00000460 <_printf_r>:
     460:	defffd04 	addi	sp,sp,-12
     464:	2805883a 	mov	r2,r5
     468:	dfc00015 	stw	ra,0(sp)
     46c:	d9800115 	stw	r6,4(sp)
     470:	d9c00215 	stw	r7,8(sp)
     474:	21400217 	ldw	r5,8(r4)
     478:	d9c00104 	addi	r7,sp,4
     47c:	100d883a 	mov	r6,r2
     480:	00004cc0 	call	4cc <___vfprintf_internal_r>
     484:	dfc00017 	ldw	ra,0(sp)
     488:	dec00304 	addi	sp,sp,12
     48c:	f800283a 	ret

00000490 <printf>:
     490:	defffc04 	addi	sp,sp,-16
     494:	dfc00015 	stw	ra,0(sp)
     498:	d9400115 	stw	r5,4(sp)
     49c:	d9800215 	stw	r6,8(sp)
     4a0:	d9c00315 	stw	r7,12(sp)
     4a4:	008000b4 	movhi	r2,2
     4a8:	10ae6604 	addi	r2,r2,-18024
     4ac:	10800017 	ldw	r2,0(r2)
     4b0:	200b883a 	mov	r5,r4
     4b4:	d9800104 	addi	r6,sp,4
     4b8:	11000217 	ldw	r4,8(r2)
     4bc:	00026c40 	call	26c4 <__vfprintf_internal>
     4c0:	dfc00017 	ldw	ra,0(sp)
     4c4:	dec00404 	addi	sp,sp,16
     4c8:	f800283a 	ret

000004cc <___vfprintf_internal_r>:
     4cc:	deffb804 	addi	sp,sp,-288
     4d0:	dfc04715 	stw	ra,284(sp)
     4d4:	ddc04515 	stw	r23,276(sp)
     4d8:	dd404315 	stw	r21,268(sp)
     4dc:	d9002c15 	stw	r4,176(sp)
     4e0:	282f883a 	mov	r23,r5
     4e4:	302b883a 	mov	r21,r6
     4e8:	d9c02d15 	stw	r7,180(sp)
     4ec:	df004615 	stw	fp,280(sp)
     4f0:	dd804415 	stw	r22,272(sp)
     4f4:	dd004215 	stw	r20,264(sp)
     4f8:	dcc04115 	stw	r19,260(sp)
     4fc:	dc804015 	stw	r18,256(sp)
     500:	dc403f15 	stw	r17,252(sp)
     504:	dc003e15 	stw	r16,248(sp)
     508:	0004e280 	call	4e28 <_localeconv_r>
     50c:	10800017 	ldw	r2,0(r2)
     510:	1009883a 	mov	r4,r2
     514:	d8803415 	stw	r2,208(sp)
     518:	0006e500 	call	6e50 <strlen>
     51c:	d8803715 	stw	r2,220(sp)
     520:	d8802c17 	ldw	r2,176(sp)
     524:	10000226 	beq	r2,zero,530 <___vfprintf_internal_r+0x64>
     528:	10800e17 	ldw	r2,56(r2)
     52c:	1000f926 	beq	r2,zero,914 <___vfprintf_internal_r+0x448>
     530:	b880030b 	ldhu	r2,12(r23)
     534:	10c8000c 	andi	r3,r2,8192
     538:	1800061e 	bne	r3,zero,554 <___vfprintf_internal_r+0x88>
     53c:	b9001917 	ldw	r4,100(r23)
     540:	00f7ffc4 	movi	r3,-8193
     544:	10880014 	ori	r2,r2,8192
     548:	20c6703a 	and	r3,r4,r3
     54c:	b880030d 	sth	r2,12(r23)
     550:	b8c01915 	stw	r3,100(r23)
     554:	10c0020c 	andi	r3,r2,8
     558:	1800c126 	beq	r3,zero,860 <___vfprintf_internal_r+0x394>
     55c:	b8c00417 	ldw	r3,16(r23)
     560:	1800bf26 	beq	r3,zero,860 <___vfprintf_internal_r+0x394>
     564:	1080068c 	andi	r2,r2,26
     568:	00c00284 	movi	r3,10
     56c:	10c0c426 	beq	r2,r3,880 <___vfprintf_internal_r+0x3b4>
     570:	d8c00404 	addi	r3,sp,16
     574:	050000b4 	movhi	r20,2
     578:	d9001e04 	addi	r4,sp,120
     57c:	a5259d84 	addi	r20,r20,-27018
     580:	d8c01e15 	stw	r3,120(sp)
     584:	d8002015 	stw	zero,128(sp)
     588:	d8001f15 	stw	zero,124(sp)
     58c:	d8003315 	stw	zero,204(sp)
     590:	d8003615 	stw	zero,216(sp)
     594:	d8003815 	stw	zero,224(sp)
     598:	1811883a 	mov	r8,r3
     59c:	d8003915 	stw	zero,228(sp)
     5a0:	d8003a15 	stw	zero,232(sp)
     5a4:	d8002f15 	stw	zero,188(sp)
     5a8:	d9002815 	stw	r4,160(sp)
     5ac:	a8800007 	ldb	r2,0(r21)
     5b0:	10027b26 	beq	r2,zero,fa0 <___vfprintf_internal_r+0xad4>
     5b4:	00c00944 	movi	r3,37
     5b8:	a821883a 	mov	r16,r21
     5bc:	10c0021e 	bne	r2,r3,5c8 <___vfprintf_internal_r+0xfc>
     5c0:	00001406 	br	614 <___vfprintf_internal_r+0x148>
     5c4:	10c00326 	beq	r2,r3,5d4 <___vfprintf_internal_r+0x108>
     5c8:	84000044 	addi	r16,r16,1
     5cc:	80800007 	ldb	r2,0(r16)
     5d0:	103ffc1e 	bne	r2,zero,5c4 <___vfprintf_internal_r+0xf8>
     5d4:	8563c83a 	sub	r17,r16,r21
     5d8:	88000e26 	beq	r17,zero,614 <___vfprintf_internal_r+0x148>
     5dc:	d8c02017 	ldw	r3,128(sp)
     5e0:	d8801f17 	ldw	r2,124(sp)
     5e4:	45400015 	stw	r21,0(r8)
     5e8:	1c47883a 	add	r3,r3,r17
     5ec:	10800044 	addi	r2,r2,1
     5f0:	d8c02015 	stw	r3,128(sp)
     5f4:	44400115 	stw	r17,4(r8)
     5f8:	d8801f15 	stw	r2,124(sp)
     5fc:	00c001c4 	movi	r3,7
     600:	1880a716 	blt	r3,r2,8a0 <___vfprintf_internal_r+0x3d4>
     604:	42000204 	addi	r8,r8,8
     608:	d9402f17 	ldw	r5,188(sp)
     60c:	2c4b883a 	add	r5,r5,r17
     610:	d9402f15 	stw	r5,188(sp)
     614:	80800007 	ldb	r2,0(r16)
     618:	1000a826 	beq	r2,zero,8bc <___vfprintf_internal_r+0x3f0>
     61c:	84400047 	ldb	r17,1(r16)
     620:	00bfffc4 	movi	r2,-1
     624:	85400044 	addi	r21,r16,1
     628:	d8002785 	stb	zero,158(sp)
     62c:	0007883a 	mov	r3,zero
     630:	000f883a 	mov	r7,zero
     634:	d8802915 	stw	r2,164(sp)
     638:	d8003115 	stw	zero,196(sp)
     63c:	0025883a 	mov	r18,zero
     640:	01401604 	movi	r5,88
     644:	01800244 	movi	r6,9
     648:	02800a84 	movi	r10,42
     64c:	02401b04 	movi	r9,108
     650:	ad400044 	addi	r21,r21,1
     654:	88bff804 	addi	r2,r17,-32
     658:	28830436 	bltu	r5,r2,126c <___vfprintf_internal_r+0xda0>
     65c:	100490ba 	slli	r2,r2,2
     660:	01000034 	movhi	r4,0
     664:	21019d04 	addi	r4,r4,1652
     668:	1105883a 	add	r2,r2,r4
     66c:	10800017 	ldw	r2,0(r2)
     670:	1000683a 	jmp	r2
     674:	0000118c 	andi	zero,zero,70
     678:	0000126c 	andhi	zero,zero,73
     67c:	0000126c 	andhi	zero,zero,73
     680:	000011ac 	andhi	zero,zero,70
     684:	0000126c 	andhi	zero,zero,73
     688:	0000126c 	andhi	zero,zero,73
     68c:	0000126c 	andhi	zero,zero,73
     690:	0000126c 	andhi	zero,zero,73
     694:	0000126c 	andhi	zero,zero,73
     698:	0000126c 	andhi	zero,zero,73
     69c:	00000920 	cmpeqi	zero,zero,36
     6a0:	000010c8 	cmpgei	zero,zero,67
     6a4:	0000126c 	andhi	zero,zero,73
     6a8:	000007e8 	cmpgeui	zero,zero,31
     6ac:	00000948 	cmpgei	zero,zero,37
     6b0:	0000126c 	andhi	zero,zero,73
     6b4:	00000988 	cmpgei	zero,zero,38
     6b8:	00000994 	movui	zero,38
     6bc:	00000994 	movui	zero,38
     6c0:	00000994 	movui	zero,38
     6c4:	00000994 	movui	zero,38
     6c8:	00000994 	movui	zero,38
     6cc:	00000994 	movui	zero,38
     6d0:	00000994 	movui	zero,38
     6d4:	00000994 	movui	zero,38
     6d8:	00000994 	movui	zero,38
     6dc:	0000126c 	andhi	zero,zero,73
     6e0:	0000126c 	andhi	zero,zero,73
     6e4:	0000126c 	andhi	zero,zero,73
     6e8:	0000126c 	andhi	zero,zero,73
     6ec:	0000126c 	andhi	zero,zero,73
     6f0:	0000126c 	andhi	zero,zero,73
     6f4:	0000126c 	andhi	zero,zero,73
     6f8:	0000126c 	andhi	zero,zero,73
     6fc:	0000126c 	andhi	zero,zero,73
     700:	0000126c 	andhi	zero,zero,73
     704:	000009c8 	cmpgei	zero,zero,39
     708:	00000a84 	movi	zero,42
     70c:	0000126c 	andhi	zero,zero,73
     710:	00000a84 	movi	zero,42
     714:	0000126c 	andhi	zero,zero,73
     718:	0000126c 	andhi	zero,zero,73
     71c:	0000126c 	andhi	zero,zero,73
     720:	0000126c 	andhi	zero,zero,73
     724:	00000b24 	muli	zero,zero,44
     728:	0000126c 	andhi	zero,zero,73
     72c:	0000126c 	andhi	zero,zero,73
     730:	00000b30 	cmpltui	zero,zero,44
     734:	0000126c 	andhi	zero,zero,73
     738:	0000126c 	andhi	zero,zero,73
     73c:	0000126c 	andhi	zero,zero,73
     740:	0000126c 	andhi	zero,zero,73
     744:	0000126c 	andhi	zero,zero,73
     748:	00000fa8 	cmpgeui	zero,zero,62
     74c:	0000126c 	andhi	zero,zero,73
     750:	0000126c 	andhi	zero,zero,73
     754:	00001008 	cmpgei	zero,zero,64
     758:	0000126c 	andhi	zero,zero,73
     75c:	0000126c 	andhi	zero,zero,73
     760:	0000126c 	andhi	zero,zero,73
     764:	0000126c 	andhi	zero,zero,73
     768:	0000126c 	andhi	zero,zero,73
     76c:	0000126c 	andhi	zero,zero,73
     770:	0000126c 	andhi	zero,zero,73
     774:	0000126c 	andhi	zero,zero,73
     778:	0000126c 	andhi	zero,zero,73
     77c:	0000126c 	andhi	zero,zero,73
     780:	00001218 	cmpnei	zero,zero,72
     784:	000011b8 	rdprs	zero,zero,70
     788:	00000a84 	movi	zero,42
     78c:	00000a84 	movi	zero,42
     790:	00000a84 	movi	zero,42
     794:	000011c8 	cmpgei	zero,zero,71
     798:	000011b8 	rdprs	zero,zero,70
     79c:	0000126c 	andhi	zero,zero,73
     7a0:	0000126c 	andhi	zero,zero,73
     7a4:	000011d4 	movui	zero,71
     7a8:	0000126c 	andhi	zero,zero,73
     7ac:	000011e4 	muli	zero,zero,71
     7b0:	000010b8 	rdprs	zero,zero,66
     7b4:	000007f4 	movhi	zero,31
     7b8:	000010d8 	cmpnei	zero,zero,67
     7bc:	0000126c 	andhi	zero,zero,73
     7c0:	000010e4 	muli	zero,zero,67
     7c4:	0000126c 	andhi	zero,zero,73
     7c8:	00001140 	call	114 <alt_irq_handler+0x18>
     7cc:	0000126c 	andhi	zero,zero,73
     7d0:	0000126c 	andhi	zero,zero,73
     7d4:	00001150 	cmplti	zero,zero,69
     7d8:	d9003117 	ldw	r4,196(sp)
     7dc:	d8802d15 	stw	r2,180(sp)
     7e0:	0109c83a 	sub	r4,zero,r4
     7e4:	d9003115 	stw	r4,196(sp)
     7e8:	94800114 	ori	r18,r18,4
     7ec:	ac400007 	ldb	r17,0(r21)
     7f0:	003f9706 	br	650 <___vfprintf_internal_r+0x184>
     7f4:	00800c04 	movi	r2,48
     7f8:	d9002d17 	ldw	r4,180(sp)
     7fc:	d9402917 	ldw	r5,164(sp)
     800:	d8802705 	stb	r2,156(sp)
     804:	00801e04 	movi	r2,120
     808:	d8802745 	stb	r2,157(sp)
     80c:	d8002785 	stb	zero,158(sp)
     810:	20c00104 	addi	r3,r4,4
     814:	24c00017 	ldw	r19,0(r4)
     818:	002d883a 	mov	r22,zero
     81c:	90800094 	ori	r2,r18,2
     820:	28029a16 	blt	r5,zero,128c <___vfprintf_internal_r+0xdc0>
     824:	00bfdfc4 	movi	r2,-129
     828:	90a4703a 	and	r18,r18,r2
     82c:	d8c02d15 	stw	r3,180(sp)
     830:	94800094 	ori	r18,r18,2
     834:	9802871e 	bne	r19,zero,1254 <___vfprintf_internal_r+0xd88>
     838:	008000b4 	movhi	r2,2
     83c:	10a59604 	addi	r2,r2,-27048
     840:	d8803915 	stw	r2,228(sp)
     844:	04401e04 	movi	r17,120
     848:	d8802917 	ldw	r2,164(sp)
     84c:	0039883a 	mov	fp,zero
     850:	1001e926 	beq	r2,zero,ff8 <___vfprintf_internal_r+0xb2c>
     854:	0027883a 	mov	r19,zero
     858:	002d883a 	mov	r22,zero
     85c:	00020506 	br	1074 <___vfprintf_internal_r+0xba8>
     860:	d9002c17 	ldw	r4,176(sp)
     864:	b80b883a 	mov	r5,r23
     868:	000279c0 	call	279c <__swsetup_r>
     86c:	1005ac1e 	bne	r2,zero,1f20 <___vfprintf_internal_r+0x1a54>
     870:	b880030b 	ldhu	r2,12(r23)
     874:	00c00284 	movi	r3,10
     878:	1080068c 	andi	r2,r2,26
     87c:	10ff3c1e 	bne	r2,r3,570 <___vfprintf_internal_r+0xa4>
     880:	b880038f 	ldh	r2,14(r23)
     884:	103f3a16 	blt	r2,zero,570 <___vfprintf_internal_r+0xa4>
     888:	d9c02d17 	ldw	r7,180(sp)
     88c:	d9002c17 	ldw	r4,176(sp)
     890:	a80d883a 	mov	r6,r21
     894:	b80b883a 	mov	r5,r23
     898:	00026e00 	call	26e0 <__sbprintf>
     89c:	00001106 	br	8e4 <___vfprintf_internal_r+0x418>
     8a0:	d9002c17 	ldw	r4,176(sp)
     8a4:	d9801e04 	addi	r6,sp,120
     8a8:	b80b883a 	mov	r5,r23
     8ac:	0006fe40 	call	6fe4 <__sprint_r>
     8b0:	1000081e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
     8b4:	da000404 	addi	r8,sp,16
     8b8:	003f5306 	br	608 <___vfprintf_internal_r+0x13c>
     8bc:	d8802017 	ldw	r2,128(sp)
     8c0:	10000426 	beq	r2,zero,8d4 <___vfprintf_internal_r+0x408>
     8c4:	d9002c17 	ldw	r4,176(sp)
     8c8:	d9801e04 	addi	r6,sp,120
     8cc:	b80b883a 	mov	r5,r23
     8d0:	0006fe40 	call	6fe4 <__sprint_r>
     8d4:	b880030b 	ldhu	r2,12(r23)
     8d8:	1080100c 	andi	r2,r2,64
     8dc:	1005901e 	bne	r2,zero,1f20 <___vfprintf_internal_r+0x1a54>
     8e0:	d8802f17 	ldw	r2,188(sp)
     8e4:	dfc04717 	ldw	ra,284(sp)
     8e8:	df004617 	ldw	fp,280(sp)
     8ec:	ddc04517 	ldw	r23,276(sp)
     8f0:	dd804417 	ldw	r22,272(sp)
     8f4:	dd404317 	ldw	r21,268(sp)
     8f8:	dd004217 	ldw	r20,264(sp)
     8fc:	dcc04117 	ldw	r19,260(sp)
     900:	dc804017 	ldw	r18,256(sp)
     904:	dc403f17 	ldw	r17,252(sp)
     908:	dc003e17 	ldw	r16,248(sp)
     90c:	dec04804 	addi	sp,sp,288
     910:	f800283a 	ret
     914:	d9002c17 	ldw	r4,176(sp)
     918:	00047700 	call	4770 <__sinit>
     91c:	003f0406 	br	530 <___vfprintf_internal_r+0x64>
     920:	d8802d17 	ldw	r2,180(sp)
     924:	d9002d17 	ldw	r4,180(sp)
     928:	10800017 	ldw	r2,0(r2)
     92c:	d8803115 	stw	r2,196(sp)
     930:	20800104 	addi	r2,r4,4
     934:	d9003117 	ldw	r4,196(sp)
     938:	203fa716 	blt	r4,zero,7d8 <___vfprintf_internal_r+0x30c>
     93c:	d8802d15 	stw	r2,180(sp)
     940:	ac400007 	ldb	r17,0(r21)
     944:	003f4206 	br	650 <___vfprintf_internal_r+0x184>
     948:	ac400007 	ldb	r17,0(r21)
     94c:	aac00044 	addi	r11,r21,1
     950:	8a872826 	beq	r17,r10,25f4 <___vfprintf_internal_r+0x2128>
     954:	88bff404 	addi	r2,r17,-48
     958:	0009883a 	mov	r4,zero
     95c:	30867d36 	bltu	r6,r2,2354 <___vfprintf_internal_r+0x1e88>
     960:	5c400007 	ldb	r17,0(r11)
     964:	210002a4 	muli	r4,r4,10
     968:	5d400044 	addi	r21,r11,1
     96c:	a817883a 	mov	r11,r21
     970:	2089883a 	add	r4,r4,r2
     974:	88bff404 	addi	r2,r17,-48
     978:	30bff92e 	bgeu	r6,r2,960 <___vfprintf_internal_r+0x494>
     97c:	2005c916 	blt	r4,zero,20a4 <___vfprintf_internal_r+0x1bd8>
     980:	d9002915 	stw	r4,164(sp)
     984:	003f3306 	br	654 <___vfprintf_internal_r+0x188>
     988:	94802014 	ori	r18,r18,128
     98c:	ac400007 	ldb	r17,0(r21)
     990:	003f2f06 	br	650 <___vfprintf_internal_r+0x184>
     994:	a809883a 	mov	r4,r21
     998:	d8003115 	stw	zero,196(sp)
     99c:	88bff404 	addi	r2,r17,-48
     9a0:	0017883a 	mov	r11,zero
     9a4:	24400007 	ldb	r17,0(r4)
     9a8:	5ac002a4 	muli	r11,r11,10
     9ac:	ad400044 	addi	r21,r21,1
     9b0:	a809883a 	mov	r4,r21
     9b4:	12d7883a 	add	r11,r2,r11
     9b8:	88bff404 	addi	r2,r17,-48
     9bc:	30bff92e 	bgeu	r6,r2,9a4 <___vfprintf_internal_r+0x4d8>
     9c0:	dac03115 	stw	r11,196(sp)
     9c4:	003f2306 	br	654 <___vfprintf_internal_r+0x188>
     9c8:	18c03fcc 	andi	r3,r3,255
     9cc:	18072b1e 	bne	r3,zero,267c <___vfprintf_internal_r+0x21b0>
     9d0:	94800414 	ori	r18,r18,16
     9d4:	9080080c 	andi	r2,r18,32
     9d8:	10037b26 	beq	r2,zero,17c8 <___vfprintf_internal_r+0x12fc>
     9dc:	d9402d17 	ldw	r5,180(sp)
     9e0:	28800117 	ldw	r2,4(r5)
     9e4:	2cc00017 	ldw	r19,0(r5)
     9e8:	29400204 	addi	r5,r5,8
     9ec:	d9402d15 	stw	r5,180(sp)
     9f0:	102d883a 	mov	r22,r2
     9f4:	10044b16 	blt	r2,zero,1b24 <___vfprintf_internal_r+0x1658>
     9f8:	d9402917 	ldw	r5,164(sp)
     9fc:	df002783 	ldbu	fp,158(sp)
     a00:	2803bc16 	blt	r5,zero,18f4 <___vfprintf_internal_r+0x1428>
     a04:	00ffdfc4 	movi	r3,-129
     a08:	9d84b03a 	or	r2,r19,r22
     a0c:	90e4703a 	and	r18,r18,r3
     a10:	10017726 	beq	r2,zero,ff0 <___vfprintf_internal_r+0xb24>
     a14:	b0038326 	beq	r22,zero,1824 <___vfprintf_internal_r+0x1358>
     a18:	dc402a15 	stw	r17,168(sp)
     a1c:	dc001e04 	addi	r16,sp,120
     a20:	b023883a 	mov	r17,r22
     a24:	402d883a 	mov	r22,r8
     a28:	9809883a 	mov	r4,r19
     a2c:	880b883a 	mov	r5,r17
     a30:	01800284 	movi	r6,10
     a34:	000f883a 	mov	r7,zero
     a38:	0009f580 	call	9f58 <__umoddi3>
     a3c:	10800c04 	addi	r2,r2,48
     a40:	843fffc4 	addi	r16,r16,-1
     a44:	9809883a 	mov	r4,r19
     a48:	880b883a 	mov	r5,r17
     a4c:	80800005 	stb	r2,0(r16)
     a50:	01800284 	movi	r6,10
     a54:	000f883a 	mov	r7,zero
     a58:	00099e00 	call	99e0 <__udivdi3>
     a5c:	1027883a 	mov	r19,r2
     a60:	10c4b03a 	or	r2,r2,r3
     a64:	1823883a 	mov	r17,r3
     a68:	103fef1e 	bne	r2,zero,a28 <___vfprintf_internal_r+0x55c>
     a6c:	d8c02817 	ldw	r3,160(sp)
     a70:	dc402a17 	ldw	r17,168(sp)
     a74:	b011883a 	mov	r8,r22
     a78:	1c07c83a 	sub	r3,r3,r16
     a7c:	d8c02e15 	stw	r3,184(sp)
     a80:	00005906 	br	be8 <___vfprintf_internal_r+0x71c>
     a84:	18c03fcc 	andi	r3,r3,255
     a88:	1806fa1e 	bne	r3,zero,2674 <___vfprintf_internal_r+0x21a8>
     a8c:	9080020c 	andi	r2,r18,8
     a90:	10048a26 	beq	r2,zero,1cbc <___vfprintf_internal_r+0x17f0>
     a94:	d8c02d17 	ldw	r3,180(sp)
     a98:	d9002d17 	ldw	r4,180(sp)
     a9c:	d9402d17 	ldw	r5,180(sp)
     aa0:	18c00017 	ldw	r3,0(r3)
     aa4:	21000117 	ldw	r4,4(r4)
     aa8:	29400204 	addi	r5,r5,8
     aac:	d8c03615 	stw	r3,216(sp)
     ab0:	d9003815 	stw	r4,224(sp)
     ab4:	d9402d15 	stw	r5,180(sp)
     ab8:	d9003617 	ldw	r4,216(sp)
     abc:	d9403817 	ldw	r5,224(sp)
     ac0:	da003d15 	stw	r8,244(sp)
     ac4:	04000044 	movi	r16,1
     ac8:	0006b700 	call	6b70 <__fpclassifyd>
     acc:	da003d17 	ldw	r8,244(sp)
     ad0:	14041f1e 	bne	r2,r16,1b50 <___vfprintf_internal_r+0x1684>
     ad4:	d9003617 	ldw	r4,216(sp)
     ad8:	d9403817 	ldw	r5,224(sp)
     adc:	000d883a 	mov	r6,zero
     ae0:	000f883a 	mov	r7,zero
     ae4:	000b93c0 	call	b93c <__ledf2>
     ae8:	da003d17 	ldw	r8,244(sp)
     aec:	1005be16 	blt	r2,zero,21e8 <___vfprintf_internal_r+0x1d1c>
     af0:	df002783 	ldbu	fp,158(sp)
     af4:	008011c4 	movi	r2,71
     af8:	1445330e 	bge	r2,r17,1fc8 <___vfprintf_internal_r+0x1afc>
     afc:	040000b4 	movhi	r16,2
     b00:	84258e04 	addi	r16,r16,-27080
     b04:	00c000c4 	movi	r3,3
     b08:	00bfdfc4 	movi	r2,-129
     b0c:	d8c02a15 	stw	r3,168(sp)
     b10:	90a4703a 	and	r18,r18,r2
     b14:	d8c02e15 	stw	r3,184(sp)
     b18:	d8002915 	stw	zero,164(sp)
     b1c:	d8003215 	stw	zero,200(sp)
     b20:	00003706 	br	c00 <___vfprintf_internal_r+0x734>
     b24:	94800214 	ori	r18,r18,8
     b28:	ac400007 	ldb	r17,0(r21)
     b2c:	003ec806 	br	650 <___vfprintf_internal_r+0x184>
     b30:	18c03fcc 	andi	r3,r3,255
     b34:	1806db1e 	bne	r3,zero,26a4 <___vfprintf_internal_r+0x21d8>
     b38:	94800414 	ori	r18,r18,16
     b3c:	9080080c 	andi	r2,r18,32
     b40:	1002d826 	beq	r2,zero,16a4 <___vfprintf_internal_r+0x11d8>
     b44:	d9402d17 	ldw	r5,180(sp)
     b48:	d8c02917 	ldw	r3,164(sp)
     b4c:	d8002785 	stb	zero,158(sp)
     b50:	28800204 	addi	r2,r5,8
     b54:	2cc00017 	ldw	r19,0(r5)
     b58:	2d800117 	ldw	r22,4(r5)
     b5c:	18048f16 	blt	r3,zero,1d9c <___vfprintf_internal_r+0x18d0>
     b60:	013fdfc4 	movi	r4,-129
     b64:	9d86b03a 	or	r3,r19,r22
     b68:	d8802d15 	stw	r2,180(sp)
     b6c:	9124703a 	and	r18,r18,r4
     b70:	1802d91e 	bne	r3,zero,16d8 <___vfprintf_internal_r+0x120c>
     b74:	d8c02917 	ldw	r3,164(sp)
     b78:	0039883a 	mov	fp,zero
     b7c:	1805c326 	beq	r3,zero,228c <___vfprintf_internal_r+0x1dc0>
     b80:	0027883a 	mov	r19,zero
     b84:	002d883a 	mov	r22,zero
     b88:	dc001e04 	addi	r16,sp,120
     b8c:	9806d0fa 	srli	r3,r19,3
     b90:	b008977a 	slli	r4,r22,29
     b94:	b02cd0fa 	srli	r22,r22,3
     b98:	9cc001cc 	andi	r19,r19,7
     b9c:	98800c04 	addi	r2,r19,48
     ba0:	843fffc4 	addi	r16,r16,-1
     ba4:	20e6b03a 	or	r19,r4,r3
     ba8:	80800005 	stb	r2,0(r16)
     bac:	9d86b03a 	or	r3,r19,r22
     bb0:	183ff61e 	bne	r3,zero,b8c <___vfprintf_internal_r+0x6c0>
     bb4:	90c0004c 	andi	r3,r18,1
     bb8:	18013b26 	beq	r3,zero,10a8 <___vfprintf_internal_r+0xbdc>
     bbc:	10803fcc 	andi	r2,r2,255
     bc0:	1080201c 	xori	r2,r2,128
     bc4:	10bfe004 	addi	r2,r2,-128
     bc8:	00c00c04 	movi	r3,48
     bcc:	10c13626 	beq	r2,r3,10a8 <___vfprintf_internal_r+0xbdc>
     bd0:	80ffffc5 	stb	r3,-1(r16)
     bd4:	d8c02817 	ldw	r3,160(sp)
     bd8:	80bfffc4 	addi	r2,r16,-1
     bdc:	1021883a 	mov	r16,r2
     be0:	1887c83a 	sub	r3,r3,r2
     be4:	d8c02e15 	stw	r3,184(sp)
     be8:	d8802e17 	ldw	r2,184(sp)
     bec:	d9002917 	ldw	r4,164(sp)
     bf0:	1100010e 	bge	r2,r4,bf8 <___vfprintf_internal_r+0x72c>
     bf4:	2005883a 	mov	r2,r4
     bf8:	d8802a15 	stw	r2,168(sp)
     bfc:	d8003215 	stw	zero,200(sp)
     c00:	e7003fcc 	andi	fp,fp,255
     c04:	e700201c 	xori	fp,fp,128
     c08:	e73fe004 	addi	fp,fp,-128
     c0c:	e0000326 	beq	fp,zero,c1c <___vfprintf_internal_r+0x750>
     c10:	d8c02a17 	ldw	r3,168(sp)
     c14:	18c00044 	addi	r3,r3,1
     c18:	d8c02a15 	stw	r3,168(sp)
     c1c:	90c0008c 	andi	r3,r18,2
     c20:	d8c02b15 	stw	r3,172(sp)
     c24:	18000326 	beq	r3,zero,c34 <___vfprintf_internal_r+0x768>
     c28:	d8c02a17 	ldw	r3,168(sp)
     c2c:	18c00084 	addi	r3,r3,2
     c30:	d8c02a15 	stw	r3,168(sp)
     c34:	90c0210c 	andi	r3,r18,132
     c38:	d8c03015 	stw	r3,192(sp)
     c3c:	1801a31e 	bne	r3,zero,12cc <___vfprintf_internal_r+0xe00>
     c40:	d9003117 	ldw	r4,196(sp)
     c44:	d8c02a17 	ldw	r3,168(sp)
     c48:	20e7c83a 	sub	r19,r4,r3
     c4c:	04c19f0e 	bge	zero,r19,12cc <___vfprintf_internal_r+0xe00>
     c50:	02400404 	movi	r9,16
     c54:	d8c02017 	ldw	r3,128(sp)
     c58:	d8801f17 	ldw	r2,124(sp)
     c5c:	4cc50d0e 	bge	r9,r19,2094 <___vfprintf_internal_r+0x1bc8>
     c60:	014000b4 	movhi	r5,2
     c64:	2965a184 	addi	r5,r5,-27002
     c68:	dc403b15 	stw	r17,236(sp)
     c6c:	d9403515 	stw	r5,212(sp)
     c70:	9823883a 	mov	r17,r19
     c74:	482d883a 	mov	r22,r9
     c78:	9027883a 	mov	r19,r18
     c7c:	070001c4 	movi	fp,7
     c80:	8025883a 	mov	r18,r16
     c84:	dc002c17 	ldw	r16,176(sp)
     c88:	00000306 	br	c98 <___vfprintf_internal_r+0x7cc>
     c8c:	8c7ffc04 	addi	r17,r17,-16
     c90:	42000204 	addi	r8,r8,8
     c94:	b440130e 	bge	r22,r17,ce4 <___vfprintf_internal_r+0x818>
     c98:	010000b4 	movhi	r4,2
     c9c:	18c00404 	addi	r3,r3,16
     ca0:	10800044 	addi	r2,r2,1
     ca4:	2125a184 	addi	r4,r4,-27002
     ca8:	41000015 	stw	r4,0(r8)
     cac:	45800115 	stw	r22,4(r8)
     cb0:	d8c02015 	stw	r3,128(sp)
     cb4:	d8801f15 	stw	r2,124(sp)
     cb8:	e0bff40e 	bge	fp,r2,c8c <___vfprintf_internal_r+0x7c0>
     cbc:	d9801e04 	addi	r6,sp,120
     cc0:	b80b883a 	mov	r5,r23
     cc4:	8009883a 	mov	r4,r16
     cc8:	0006fe40 	call	6fe4 <__sprint_r>
     ccc:	103f011e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
     cd0:	8c7ffc04 	addi	r17,r17,-16
     cd4:	d8c02017 	ldw	r3,128(sp)
     cd8:	d8801f17 	ldw	r2,124(sp)
     cdc:	da000404 	addi	r8,sp,16
     ce0:	b47fed16 	blt	r22,r17,c98 <___vfprintf_internal_r+0x7cc>
     ce4:	9021883a 	mov	r16,r18
     ce8:	9825883a 	mov	r18,r19
     cec:	8827883a 	mov	r19,r17
     cf0:	dc403b17 	ldw	r17,236(sp)
     cf4:	d9403517 	ldw	r5,212(sp)
     cf8:	98c7883a 	add	r3,r19,r3
     cfc:	10800044 	addi	r2,r2,1
     d00:	41400015 	stw	r5,0(r8)
     d04:	44c00115 	stw	r19,4(r8)
     d08:	d8c02015 	stw	r3,128(sp)
     d0c:	d8801f15 	stw	r2,124(sp)
     d10:	010001c4 	movi	r4,7
     d14:	2082a316 	blt	r4,r2,17a4 <___vfprintf_internal_r+0x12d8>
     d18:	df002787 	ldb	fp,158(sp)
     d1c:	42000204 	addi	r8,r8,8
     d20:	e0000c26 	beq	fp,zero,d54 <___vfprintf_internal_r+0x888>
     d24:	d8801f17 	ldw	r2,124(sp)
     d28:	d9002784 	addi	r4,sp,158
     d2c:	18c00044 	addi	r3,r3,1
     d30:	10800044 	addi	r2,r2,1
     d34:	41000015 	stw	r4,0(r8)
     d38:	01000044 	movi	r4,1
     d3c:	41000115 	stw	r4,4(r8)
     d40:	d8c02015 	stw	r3,128(sp)
     d44:	d8801f15 	stw	r2,124(sp)
     d48:	010001c4 	movi	r4,7
     d4c:	20823c16 	blt	r4,r2,1640 <___vfprintf_internal_r+0x1174>
     d50:	42000204 	addi	r8,r8,8
     d54:	d8802b17 	ldw	r2,172(sp)
     d58:	10000c26 	beq	r2,zero,d8c <___vfprintf_internal_r+0x8c0>
     d5c:	d8801f17 	ldw	r2,124(sp)
     d60:	d9002704 	addi	r4,sp,156
     d64:	18c00084 	addi	r3,r3,2
     d68:	10800044 	addi	r2,r2,1
     d6c:	41000015 	stw	r4,0(r8)
     d70:	01000084 	movi	r4,2
     d74:	41000115 	stw	r4,4(r8)
     d78:	d8c02015 	stw	r3,128(sp)
     d7c:	d8801f15 	stw	r2,124(sp)
     d80:	010001c4 	movi	r4,7
     d84:	20823616 	blt	r4,r2,1660 <___vfprintf_internal_r+0x1194>
     d88:	42000204 	addi	r8,r8,8
     d8c:	d9003017 	ldw	r4,192(sp)
     d90:	00802004 	movi	r2,128
     d94:	20819926 	beq	r4,r2,13fc <___vfprintf_internal_r+0xf30>
     d98:	d9402917 	ldw	r5,164(sp)
     d9c:	d8802e17 	ldw	r2,184(sp)
     da0:	28adc83a 	sub	r22,r5,r2
     da4:	0580310e 	bge	zero,r22,e6c <___vfprintf_internal_r+0x9a0>
     da8:	07000404 	movi	fp,16
     dac:	d8801f17 	ldw	r2,124(sp)
     db0:	e584140e 	bge	fp,r22,1e04 <___vfprintf_internal_r+0x1938>
     db4:	014000b4 	movhi	r5,2
     db8:	29659d84 	addi	r5,r5,-27018
     dbc:	dc402915 	stw	r17,164(sp)
     dc0:	d9402b15 	stw	r5,172(sp)
     dc4:	b023883a 	mov	r17,r22
     dc8:	04c001c4 	movi	r19,7
     dcc:	a82d883a 	mov	r22,r21
     dd0:	902b883a 	mov	r21,r18
     dd4:	8025883a 	mov	r18,r16
     dd8:	dc002c17 	ldw	r16,176(sp)
     ddc:	00000306 	br	dec <___vfprintf_internal_r+0x920>
     de0:	8c7ffc04 	addi	r17,r17,-16
     de4:	42000204 	addi	r8,r8,8
     de8:	e440110e 	bge	fp,r17,e30 <___vfprintf_internal_r+0x964>
     dec:	18c00404 	addi	r3,r3,16
     df0:	10800044 	addi	r2,r2,1
     df4:	45000015 	stw	r20,0(r8)
     df8:	47000115 	stw	fp,4(r8)
     dfc:	d8c02015 	stw	r3,128(sp)
     e00:	d8801f15 	stw	r2,124(sp)
     e04:	98bff60e 	bge	r19,r2,de0 <___vfprintf_internal_r+0x914>
     e08:	d9801e04 	addi	r6,sp,120
     e0c:	b80b883a 	mov	r5,r23
     e10:	8009883a 	mov	r4,r16
     e14:	0006fe40 	call	6fe4 <__sprint_r>
     e18:	103eae1e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
     e1c:	8c7ffc04 	addi	r17,r17,-16
     e20:	d8c02017 	ldw	r3,128(sp)
     e24:	d8801f17 	ldw	r2,124(sp)
     e28:	da000404 	addi	r8,sp,16
     e2c:	e47fef16 	blt	fp,r17,dec <___vfprintf_internal_r+0x920>
     e30:	9021883a 	mov	r16,r18
     e34:	a825883a 	mov	r18,r21
     e38:	b02b883a 	mov	r21,r22
     e3c:	882d883a 	mov	r22,r17
     e40:	dc402917 	ldw	r17,164(sp)
     e44:	d9002b17 	ldw	r4,172(sp)
     e48:	1d87883a 	add	r3,r3,r22
     e4c:	10800044 	addi	r2,r2,1
     e50:	41000015 	stw	r4,0(r8)
     e54:	45800115 	stw	r22,4(r8)
     e58:	d8c02015 	stw	r3,128(sp)
     e5c:	d8801f15 	stw	r2,124(sp)
     e60:	010001c4 	movi	r4,7
     e64:	2081ee16 	blt	r4,r2,1620 <___vfprintf_internal_r+0x1154>
     e68:	42000204 	addi	r8,r8,8
     e6c:	9080400c 	andi	r2,r18,256
     e70:	1001181e 	bne	r2,zero,12d4 <___vfprintf_internal_r+0xe08>
     e74:	d9402e17 	ldw	r5,184(sp)
     e78:	d8801f17 	ldw	r2,124(sp)
     e7c:	44000015 	stw	r16,0(r8)
     e80:	1947883a 	add	r3,r3,r5
     e84:	10800044 	addi	r2,r2,1
     e88:	41400115 	stw	r5,4(r8)
     e8c:	d8c02015 	stw	r3,128(sp)
     e90:	d8801f15 	stw	r2,124(sp)
     e94:	010001c4 	movi	r4,7
     e98:	2081d316 	blt	r4,r2,15e8 <___vfprintf_internal_r+0x111c>
     e9c:	42000204 	addi	r8,r8,8
     ea0:	9480010c 	andi	r18,r18,4
     ea4:	90003226 	beq	r18,zero,f70 <___vfprintf_internal_r+0xaa4>
     ea8:	d9403117 	ldw	r5,196(sp)
     eac:	d8802a17 	ldw	r2,168(sp)
     eb0:	28a1c83a 	sub	r16,r5,r2
     eb4:	04002e0e 	bge	zero,r16,f70 <___vfprintf_internal_r+0xaa4>
     eb8:	04400404 	movi	r17,16
     ebc:	d8801f17 	ldw	r2,124(sp)
     ec0:	8c04a20e 	bge	r17,r16,214c <___vfprintf_internal_r+0x1c80>
     ec4:	014000b4 	movhi	r5,2
     ec8:	2965a184 	addi	r5,r5,-27002
     ecc:	d9403515 	stw	r5,212(sp)
     ed0:	048001c4 	movi	r18,7
     ed4:	dcc02c17 	ldw	r19,176(sp)
     ed8:	00000306 	br	ee8 <___vfprintf_internal_r+0xa1c>
     edc:	843ffc04 	addi	r16,r16,-16
     ee0:	42000204 	addi	r8,r8,8
     ee4:	8c00130e 	bge	r17,r16,f34 <___vfprintf_internal_r+0xa68>
     ee8:	010000b4 	movhi	r4,2
     eec:	18c00404 	addi	r3,r3,16
     ef0:	10800044 	addi	r2,r2,1
     ef4:	2125a184 	addi	r4,r4,-27002
     ef8:	41000015 	stw	r4,0(r8)
     efc:	44400115 	stw	r17,4(r8)
     f00:	d8c02015 	stw	r3,128(sp)
     f04:	d8801f15 	stw	r2,124(sp)
     f08:	90bff40e 	bge	r18,r2,edc <___vfprintf_internal_r+0xa10>
     f0c:	d9801e04 	addi	r6,sp,120
     f10:	b80b883a 	mov	r5,r23
     f14:	9809883a 	mov	r4,r19
     f18:	0006fe40 	call	6fe4 <__sprint_r>
     f1c:	103e6d1e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
     f20:	843ffc04 	addi	r16,r16,-16
     f24:	d8c02017 	ldw	r3,128(sp)
     f28:	d8801f17 	ldw	r2,124(sp)
     f2c:	da000404 	addi	r8,sp,16
     f30:	8c3fed16 	blt	r17,r16,ee8 <___vfprintf_internal_r+0xa1c>
     f34:	d9403517 	ldw	r5,212(sp)
     f38:	1c07883a 	add	r3,r3,r16
     f3c:	10800044 	addi	r2,r2,1
     f40:	41400015 	stw	r5,0(r8)
     f44:	44000115 	stw	r16,4(r8)
     f48:	d8c02015 	stw	r3,128(sp)
     f4c:	d8801f15 	stw	r2,124(sp)
     f50:	010001c4 	movi	r4,7
     f54:	2080060e 	bge	r4,r2,f70 <___vfprintf_internal_r+0xaa4>
     f58:	d9002c17 	ldw	r4,176(sp)
     f5c:	d9801e04 	addi	r6,sp,120
     f60:	b80b883a 	mov	r5,r23
     f64:	0006fe40 	call	6fe4 <__sprint_r>
     f68:	103e5a1e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
     f6c:	d8c02017 	ldw	r3,128(sp)
     f70:	d8803117 	ldw	r2,196(sp)
     f74:	d9002a17 	ldw	r4,168(sp)
     f78:	1100010e 	bge	r2,r4,f80 <___vfprintf_internal_r+0xab4>
     f7c:	2005883a 	mov	r2,r4
     f80:	d9402f17 	ldw	r5,188(sp)
     f84:	288b883a 	add	r5,r5,r2
     f88:	d9402f15 	stw	r5,188(sp)
     f8c:	18019e1e 	bne	r3,zero,1608 <___vfprintf_internal_r+0x113c>
     f90:	a8800007 	ldb	r2,0(r21)
     f94:	d8001f15 	stw	zero,124(sp)
     f98:	da000404 	addi	r8,sp,16
     f9c:	103d851e 	bne	r2,zero,5b4 <___vfprintf_internal_r+0xe8>
     fa0:	a821883a 	mov	r16,r21
     fa4:	003d9b06 	br	614 <___vfprintf_internal_r+0x148>
     fa8:	18c03fcc 	andi	r3,r3,255
     fac:	1805c11e 	bne	r3,zero,26b4 <___vfprintf_internal_r+0x21e8>
     fb0:	94800414 	ori	r18,r18,16
     fb4:	9080080c 	andi	r2,r18,32
     fb8:	10020c26 	beq	r2,zero,17ec <___vfprintf_internal_r+0x1320>
     fbc:	d8802d17 	ldw	r2,180(sp)
     fc0:	d9002917 	ldw	r4,164(sp)
     fc4:	d8002785 	stb	zero,158(sp)
     fc8:	10c00204 	addi	r3,r2,8
     fcc:	14c00017 	ldw	r19,0(r2)
     fd0:	15800117 	ldw	r22,4(r2)
     fd4:	20040f16 	blt	r4,zero,2014 <___vfprintf_internal_r+0x1b48>
     fd8:	013fdfc4 	movi	r4,-129
     fdc:	9d84b03a 	or	r2,r19,r22
     fe0:	d8c02d15 	stw	r3,180(sp)
     fe4:	9124703a 	and	r18,r18,r4
     fe8:	0039883a 	mov	fp,zero
     fec:	103e891e 	bne	r2,zero,a14 <___vfprintf_internal_r+0x548>
     ff0:	d9002917 	ldw	r4,164(sp)
     ff4:	2002c11e 	bne	r4,zero,1afc <___vfprintf_internal_r+0x1630>
     ff8:	d8002915 	stw	zero,164(sp)
     ffc:	d8002e15 	stw	zero,184(sp)
    1000:	dc001e04 	addi	r16,sp,120
    1004:	003ef806 	br	be8 <___vfprintf_internal_r+0x71c>
    1008:	18c03fcc 	andi	r3,r3,255
    100c:	18059d1e 	bne	r3,zero,2684 <___vfprintf_internal_r+0x21b8>
    1010:	014000b4 	movhi	r5,2
    1014:	29659104 	addi	r5,r5,-27068
    1018:	d9403915 	stw	r5,228(sp)
    101c:	9080080c 	andi	r2,r18,32
    1020:	10005226 	beq	r2,zero,116c <___vfprintf_internal_r+0xca0>
    1024:	d8802d17 	ldw	r2,180(sp)
    1028:	14c00017 	ldw	r19,0(r2)
    102c:	15800117 	ldw	r22,4(r2)
    1030:	10800204 	addi	r2,r2,8
    1034:	d8802d15 	stw	r2,180(sp)
    1038:	9080004c 	andi	r2,r18,1
    103c:	10019026 	beq	r2,zero,1680 <___vfprintf_internal_r+0x11b4>
    1040:	9d84b03a 	or	r2,r19,r22
    1044:	10036926 	beq	r2,zero,1dec <___vfprintf_internal_r+0x1920>
    1048:	d8c02917 	ldw	r3,164(sp)
    104c:	00800c04 	movi	r2,48
    1050:	d8802705 	stb	r2,156(sp)
    1054:	dc402745 	stb	r17,157(sp)
    1058:	d8002785 	stb	zero,158(sp)
    105c:	90800094 	ori	r2,r18,2
    1060:	18045d16 	blt	r3,zero,21d8 <___vfprintf_internal_r+0x1d0c>
    1064:	00bfdfc4 	movi	r2,-129
    1068:	90a4703a 	and	r18,r18,r2
    106c:	94800094 	ori	r18,r18,2
    1070:	0039883a 	mov	fp,zero
    1074:	d9003917 	ldw	r4,228(sp)
    1078:	dc001e04 	addi	r16,sp,120
    107c:	988003cc 	andi	r2,r19,15
    1080:	b006973a 	slli	r3,r22,28
    1084:	2085883a 	add	r2,r4,r2
    1088:	9826d13a 	srli	r19,r19,4
    108c:	10800003 	ldbu	r2,0(r2)
    1090:	b02cd13a 	srli	r22,r22,4
    1094:	843fffc4 	addi	r16,r16,-1
    1098:	1ce6b03a 	or	r19,r3,r19
    109c:	80800005 	stb	r2,0(r16)
    10a0:	9d84b03a 	or	r2,r19,r22
    10a4:	103ff51e 	bne	r2,zero,107c <___vfprintf_internal_r+0xbb0>
    10a8:	d8c02817 	ldw	r3,160(sp)
    10ac:	1c07c83a 	sub	r3,r3,r16
    10b0:	d8c02e15 	stw	r3,184(sp)
    10b4:	003ecc06 	br	be8 <___vfprintf_internal_r+0x71c>
    10b8:	18c03fcc 	andi	r3,r3,255
    10bc:	183e9f26 	beq	r3,zero,b3c <___vfprintf_internal_r+0x670>
    10c0:	d9c02785 	stb	r7,158(sp)
    10c4:	003e9d06 	br	b3c <___vfprintf_internal_r+0x670>
    10c8:	00c00044 	movi	r3,1
    10cc:	01c00ac4 	movi	r7,43
    10d0:	ac400007 	ldb	r17,0(r21)
    10d4:	003d5e06 	br	650 <___vfprintf_internal_r+0x184>
    10d8:	94800814 	ori	r18,r18,32
    10dc:	ac400007 	ldb	r17,0(r21)
    10e0:	003d5b06 	br	650 <___vfprintf_internal_r+0x184>
    10e4:	d8c02d17 	ldw	r3,180(sp)
    10e8:	d8002785 	stb	zero,158(sp)
    10ec:	1c000017 	ldw	r16,0(r3)
    10f0:	1cc00104 	addi	r19,r3,4
    10f4:	80041926 	beq	r16,zero,215c <___vfprintf_internal_r+0x1c90>
    10f8:	d9002917 	ldw	r4,164(sp)
    10fc:	2003d016 	blt	r4,zero,2040 <___vfprintf_internal_r+0x1b74>
    1100:	200d883a 	mov	r6,r4
    1104:	000b883a 	mov	r5,zero
    1108:	8009883a 	mov	r4,r16
    110c:	da003d15 	stw	r8,244(sp)
    1110:	00058200 	call	5820 <memchr>
    1114:	da003d17 	ldw	r8,244(sp)
    1118:	10045426 	beq	r2,zero,226c <___vfprintf_internal_r+0x1da0>
    111c:	1405c83a 	sub	r2,r2,r16
    1120:	d8802e15 	stw	r2,184(sp)
    1124:	1003cc16 	blt	r2,zero,2058 <___vfprintf_internal_r+0x1b8c>
    1128:	df002783 	ldbu	fp,158(sp)
    112c:	d8802a15 	stw	r2,168(sp)
    1130:	dcc02d15 	stw	r19,180(sp)
    1134:	d8002915 	stw	zero,164(sp)
    1138:	d8003215 	stw	zero,200(sp)
    113c:	003eb006 	br	c00 <___vfprintf_internal_r+0x734>
    1140:	18c03fcc 	andi	r3,r3,255
    1144:	183f9b26 	beq	r3,zero,fb4 <___vfprintf_internal_r+0xae8>
    1148:	d9c02785 	stb	r7,158(sp)
    114c:	003f9906 	br	fb4 <___vfprintf_internal_r+0xae8>
    1150:	18c03fcc 	andi	r3,r3,255
    1154:	1805551e 	bne	r3,zero,26ac <___vfprintf_internal_r+0x21e0>
    1158:	014000b4 	movhi	r5,2
    115c:	29659604 	addi	r5,r5,-27048
    1160:	d9403915 	stw	r5,228(sp)
    1164:	9080080c 	andi	r2,r18,32
    1168:	103fae1e 	bne	r2,zero,1024 <___vfprintf_internal_r+0xb58>
    116c:	9080040c 	andi	r2,r18,16
    1170:	1002de26 	beq	r2,zero,1cec <___vfprintf_internal_r+0x1820>
    1174:	d8c02d17 	ldw	r3,180(sp)
    1178:	002d883a 	mov	r22,zero
    117c:	1cc00017 	ldw	r19,0(r3)
    1180:	18c00104 	addi	r3,r3,4
    1184:	d8c02d15 	stw	r3,180(sp)
    1188:	003fab06 	br	1038 <___vfprintf_internal_r+0xb6c>
    118c:	38803fcc 	andi	r2,r7,255
    1190:	1080201c 	xori	r2,r2,128
    1194:	10bfe004 	addi	r2,r2,-128
    1198:	1002d21e 	bne	r2,zero,1ce4 <___vfprintf_internal_r+0x1818>
    119c:	00c00044 	movi	r3,1
    11a0:	01c00804 	movi	r7,32
    11a4:	ac400007 	ldb	r17,0(r21)
    11a8:	003d2906 	br	650 <___vfprintf_internal_r+0x184>
    11ac:	94800054 	ori	r18,r18,1
    11b0:	ac400007 	ldb	r17,0(r21)
    11b4:	003d2606 	br	650 <___vfprintf_internal_r+0x184>
    11b8:	18c03fcc 	andi	r3,r3,255
    11bc:	183e0526 	beq	r3,zero,9d4 <___vfprintf_internal_r+0x508>
    11c0:	d9c02785 	stb	r7,158(sp)
    11c4:	003e0306 	br	9d4 <___vfprintf_internal_r+0x508>
    11c8:	94801014 	ori	r18,r18,64
    11cc:	ac400007 	ldb	r17,0(r21)
    11d0:	003d1f06 	br	650 <___vfprintf_internal_r+0x184>
    11d4:	ac400007 	ldb	r17,0(r21)
    11d8:	8a438726 	beq	r17,r9,1ff8 <___vfprintf_internal_r+0x1b2c>
    11dc:	94800414 	ori	r18,r18,16
    11e0:	003d1b06 	br	650 <___vfprintf_internal_r+0x184>
    11e4:	18c03fcc 	andi	r3,r3,255
    11e8:	1805341e 	bne	r3,zero,26bc <___vfprintf_internal_r+0x21f0>
    11ec:	9080080c 	andi	r2,r18,32
    11f0:	1002cd26 	beq	r2,zero,1d28 <___vfprintf_internal_r+0x185c>
    11f4:	d9402d17 	ldw	r5,180(sp)
    11f8:	d9002f17 	ldw	r4,188(sp)
    11fc:	28800017 	ldw	r2,0(r5)
    1200:	2007d7fa 	srai	r3,r4,31
    1204:	29400104 	addi	r5,r5,4
    1208:	d9402d15 	stw	r5,180(sp)
    120c:	11000015 	stw	r4,0(r2)
    1210:	10c00115 	stw	r3,4(r2)
    1214:	003ce506 	br	5ac <___vfprintf_internal_r+0xe0>
    1218:	d8c02d17 	ldw	r3,180(sp)
    121c:	d9002d17 	ldw	r4,180(sp)
    1220:	d8002785 	stb	zero,158(sp)
    1224:	18800017 	ldw	r2,0(r3)
    1228:	21000104 	addi	r4,r4,4
    122c:	00c00044 	movi	r3,1
    1230:	d8c02a15 	stw	r3,168(sp)
    1234:	d8801405 	stb	r2,80(sp)
    1238:	d9002d15 	stw	r4,180(sp)
    123c:	d8c02e15 	stw	r3,184(sp)
    1240:	d8002915 	stw	zero,164(sp)
    1244:	d8003215 	stw	zero,200(sp)
    1248:	dc001404 	addi	r16,sp,80
    124c:	0039883a 	mov	fp,zero
    1250:	003e7206 	br	c1c <___vfprintf_internal_r+0x750>
    1254:	010000b4 	movhi	r4,2
    1258:	21259604 	addi	r4,r4,-27048
    125c:	0039883a 	mov	fp,zero
    1260:	d9003915 	stw	r4,228(sp)
    1264:	04401e04 	movi	r17,120
    1268:	003f8206 	br	1074 <___vfprintf_internal_r+0xba8>
    126c:	18c03fcc 	andi	r3,r3,255
    1270:	1805061e 	bne	r3,zero,268c <___vfprintf_internal_r+0x21c0>
    1274:	883d9126 	beq	r17,zero,8bc <___vfprintf_internal_r+0x3f0>
    1278:	00c00044 	movi	r3,1
    127c:	d8c02a15 	stw	r3,168(sp)
    1280:	dc401405 	stb	r17,80(sp)
    1284:	d8002785 	stb	zero,158(sp)
    1288:	003fec06 	br	123c <___vfprintf_internal_r+0xd70>
    128c:	014000b4 	movhi	r5,2
    1290:	29659604 	addi	r5,r5,-27048
    1294:	d9403915 	stw	r5,228(sp)
    1298:	d8c02d15 	stw	r3,180(sp)
    129c:	1025883a 	mov	r18,r2
    12a0:	04401e04 	movi	r17,120
    12a4:	9d84b03a 	or	r2,r19,r22
    12a8:	1000fc1e 	bne	r2,zero,169c <___vfprintf_internal_r+0x11d0>
    12ac:	0039883a 	mov	fp,zero
    12b0:	00800084 	movi	r2,2
    12b4:	10803fcc 	andi	r2,r2,255
    12b8:	00c00044 	movi	r3,1
    12bc:	10c20f26 	beq	r2,r3,1afc <___vfprintf_internal_r+0x1630>
    12c0:	00c00084 	movi	r3,2
    12c4:	10fd6326 	beq	r2,r3,854 <___vfprintf_internal_r+0x388>
    12c8:	003e2d06 	br	b80 <___vfprintf_internal_r+0x6b4>
    12cc:	d8c02017 	ldw	r3,128(sp)
    12d0:	003e9306 	br	d20 <___vfprintf_internal_r+0x854>
    12d4:	00801944 	movi	r2,101
    12d8:	14407e0e 	bge	r2,r17,14d4 <___vfprintf_internal_r+0x1008>
    12dc:	d9003617 	ldw	r4,216(sp)
    12e0:	d9403817 	ldw	r5,224(sp)
    12e4:	000d883a 	mov	r6,zero
    12e8:	000f883a 	mov	r7,zero
    12ec:	d8c03c15 	stw	r3,240(sp)
    12f0:	da003d15 	stw	r8,244(sp)
    12f4:	000b7d80 	call	b7d8 <__eqdf2>
    12f8:	d8c03c17 	ldw	r3,240(sp)
    12fc:	da003d17 	ldw	r8,244(sp)
    1300:	1000f71e 	bne	r2,zero,16e0 <___vfprintf_internal_r+0x1214>
    1304:	d8801f17 	ldw	r2,124(sp)
    1308:	010000b4 	movhi	r4,2
    130c:	21259d04 	addi	r4,r4,-27020
    1310:	18c00044 	addi	r3,r3,1
    1314:	10800044 	addi	r2,r2,1
    1318:	41000015 	stw	r4,0(r8)
    131c:	01000044 	movi	r4,1
    1320:	41000115 	stw	r4,4(r8)
    1324:	d8c02015 	stw	r3,128(sp)
    1328:	d8801f15 	stw	r2,124(sp)
    132c:	010001c4 	movi	r4,7
    1330:	2082b816 	blt	r4,r2,1e14 <___vfprintf_internal_r+0x1948>
    1334:	42000204 	addi	r8,r8,8
    1338:	d8802617 	ldw	r2,152(sp)
    133c:	d9403317 	ldw	r5,204(sp)
    1340:	11400216 	blt	r2,r5,134c <___vfprintf_internal_r+0xe80>
    1344:	9080004c 	andi	r2,r18,1
    1348:	103ed526 	beq	r2,zero,ea0 <___vfprintf_internal_r+0x9d4>
    134c:	d8803717 	ldw	r2,220(sp)
    1350:	d9003417 	ldw	r4,208(sp)
    1354:	d9403717 	ldw	r5,220(sp)
    1358:	1887883a 	add	r3,r3,r2
    135c:	d8801f17 	ldw	r2,124(sp)
    1360:	41000015 	stw	r4,0(r8)
    1364:	41400115 	stw	r5,4(r8)
    1368:	10800044 	addi	r2,r2,1
    136c:	d8c02015 	stw	r3,128(sp)
    1370:	d8801f15 	stw	r2,124(sp)
    1374:	010001c4 	movi	r4,7
    1378:	20832916 	blt	r4,r2,2020 <___vfprintf_internal_r+0x1b54>
    137c:	42000204 	addi	r8,r8,8
    1380:	d8803317 	ldw	r2,204(sp)
    1384:	143fffc4 	addi	r16,r2,-1
    1388:	043ec50e 	bge	zero,r16,ea0 <___vfprintf_internal_r+0x9d4>
    138c:	04400404 	movi	r17,16
    1390:	d8801f17 	ldw	r2,124(sp)
    1394:	8c00880e 	bge	r17,r16,15b8 <___vfprintf_internal_r+0x10ec>
    1398:	014000b4 	movhi	r5,2
    139c:	29659d84 	addi	r5,r5,-27018
    13a0:	d9402b15 	stw	r5,172(sp)
    13a4:	058001c4 	movi	r22,7
    13a8:	dcc02c17 	ldw	r19,176(sp)
    13ac:	00000306 	br	13bc <___vfprintf_internal_r+0xef0>
    13b0:	42000204 	addi	r8,r8,8
    13b4:	843ffc04 	addi	r16,r16,-16
    13b8:	8c00820e 	bge	r17,r16,15c4 <___vfprintf_internal_r+0x10f8>
    13bc:	18c00404 	addi	r3,r3,16
    13c0:	10800044 	addi	r2,r2,1
    13c4:	45000015 	stw	r20,0(r8)
    13c8:	44400115 	stw	r17,4(r8)
    13cc:	d8c02015 	stw	r3,128(sp)
    13d0:	d8801f15 	stw	r2,124(sp)
    13d4:	b0bff60e 	bge	r22,r2,13b0 <___vfprintf_internal_r+0xee4>
    13d8:	d9801e04 	addi	r6,sp,120
    13dc:	b80b883a 	mov	r5,r23
    13e0:	9809883a 	mov	r4,r19
    13e4:	0006fe40 	call	6fe4 <__sprint_r>
    13e8:	103d3a1e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    13ec:	d8c02017 	ldw	r3,128(sp)
    13f0:	d8801f17 	ldw	r2,124(sp)
    13f4:	da000404 	addi	r8,sp,16
    13f8:	003fee06 	br	13b4 <___vfprintf_internal_r+0xee8>
    13fc:	d9403117 	ldw	r5,196(sp)
    1400:	d8802a17 	ldw	r2,168(sp)
    1404:	28adc83a 	sub	r22,r5,r2
    1408:	05be630e 	bge	zero,r22,d98 <___vfprintf_internal_r+0x8cc>
    140c:	07000404 	movi	fp,16
    1410:	d8801f17 	ldw	r2,124(sp)
    1414:	e5838f0e 	bge	fp,r22,2254 <___vfprintf_internal_r+0x1d88>
    1418:	014000b4 	movhi	r5,2
    141c:	29659d84 	addi	r5,r5,-27018
    1420:	dc403015 	stw	r17,192(sp)
    1424:	d9402b15 	stw	r5,172(sp)
    1428:	b023883a 	mov	r17,r22
    142c:	04c001c4 	movi	r19,7
    1430:	a82d883a 	mov	r22,r21
    1434:	902b883a 	mov	r21,r18
    1438:	8025883a 	mov	r18,r16
    143c:	dc002c17 	ldw	r16,176(sp)
    1440:	00000306 	br	1450 <___vfprintf_internal_r+0xf84>
    1444:	8c7ffc04 	addi	r17,r17,-16
    1448:	42000204 	addi	r8,r8,8
    144c:	e440110e 	bge	fp,r17,1494 <___vfprintf_internal_r+0xfc8>
    1450:	18c00404 	addi	r3,r3,16
    1454:	10800044 	addi	r2,r2,1
    1458:	45000015 	stw	r20,0(r8)
    145c:	47000115 	stw	fp,4(r8)
    1460:	d8c02015 	stw	r3,128(sp)
    1464:	d8801f15 	stw	r2,124(sp)
    1468:	98bff60e 	bge	r19,r2,1444 <___vfprintf_internal_r+0xf78>
    146c:	d9801e04 	addi	r6,sp,120
    1470:	b80b883a 	mov	r5,r23
    1474:	8009883a 	mov	r4,r16
    1478:	0006fe40 	call	6fe4 <__sprint_r>
    147c:	103d151e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    1480:	8c7ffc04 	addi	r17,r17,-16
    1484:	d8c02017 	ldw	r3,128(sp)
    1488:	d8801f17 	ldw	r2,124(sp)
    148c:	da000404 	addi	r8,sp,16
    1490:	e47fef16 	blt	fp,r17,1450 <___vfprintf_internal_r+0xf84>
    1494:	9021883a 	mov	r16,r18
    1498:	a825883a 	mov	r18,r21
    149c:	b02b883a 	mov	r21,r22
    14a0:	882d883a 	mov	r22,r17
    14a4:	dc403017 	ldw	r17,192(sp)
    14a8:	d9002b17 	ldw	r4,172(sp)
    14ac:	1d87883a 	add	r3,r3,r22
    14b0:	10800044 	addi	r2,r2,1
    14b4:	41000015 	stw	r4,0(r8)
    14b8:	45800115 	stw	r22,4(r8)
    14bc:	d8c02015 	stw	r3,128(sp)
    14c0:	d8801f15 	stw	r2,124(sp)
    14c4:	010001c4 	movi	r4,7
    14c8:	20818e16 	blt	r4,r2,1b04 <___vfprintf_internal_r+0x1638>
    14cc:	42000204 	addi	r8,r8,8
    14d0:	003e3106 	br	d98 <___vfprintf_internal_r+0x8cc>
    14d4:	d9403317 	ldw	r5,204(sp)
    14d8:	00800044 	movi	r2,1
    14dc:	18c00044 	addi	r3,r3,1
    14e0:	1141530e 	bge	r2,r5,1a30 <___vfprintf_internal_r+0x1564>
    14e4:	dc401f17 	ldw	r17,124(sp)
    14e8:	00800044 	movi	r2,1
    14ec:	40800115 	stw	r2,4(r8)
    14f0:	8c400044 	addi	r17,r17,1
    14f4:	44000015 	stw	r16,0(r8)
    14f8:	d8c02015 	stw	r3,128(sp)
    14fc:	dc401f15 	stw	r17,124(sp)
    1500:	008001c4 	movi	r2,7
    1504:	14416b16 	blt	r2,r17,1ab4 <___vfprintf_internal_r+0x15e8>
    1508:	42000204 	addi	r8,r8,8
    150c:	d8803717 	ldw	r2,220(sp)
    1510:	d9003417 	ldw	r4,208(sp)
    1514:	8c400044 	addi	r17,r17,1
    1518:	10c7883a 	add	r3,r2,r3
    151c:	40800115 	stw	r2,4(r8)
    1520:	41000015 	stw	r4,0(r8)
    1524:	d8c02015 	stw	r3,128(sp)
    1528:	dc401f15 	stw	r17,124(sp)
    152c:	008001c4 	movi	r2,7
    1530:	14416916 	blt	r2,r17,1ad8 <___vfprintf_internal_r+0x160c>
    1534:	45800204 	addi	r22,r8,8
    1538:	d9003617 	ldw	r4,216(sp)
    153c:	d9403817 	ldw	r5,224(sp)
    1540:	000d883a 	mov	r6,zero
    1544:	000f883a 	mov	r7,zero
    1548:	d8c03c15 	stw	r3,240(sp)
    154c:	000b7d80 	call	b7d8 <__eqdf2>
    1550:	d8c03c17 	ldw	r3,240(sp)
    1554:	1000bc26 	beq	r2,zero,1848 <___vfprintf_internal_r+0x137c>
    1558:	d9403317 	ldw	r5,204(sp)
    155c:	84000044 	addi	r16,r16,1
    1560:	8c400044 	addi	r17,r17,1
    1564:	28bfffc4 	addi	r2,r5,-1
    1568:	1887883a 	add	r3,r3,r2
    156c:	b0800115 	stw	r2,4(r22)
    1570:	b4000015 	stw	r16,0(r22)
    1574:	d8c02015 	stw	r3,128(sp)
    1578:	dc401f15 	stw	r17,124(sp)
    157c:	008001c4 	movi	r2,7
    1580:	14414316 	blt	r2,r17,1a90 <___vfprintf_internal_r+0x15c4>
    1584:	b5800204 	addi	r22,r22,8
    1588:	d9003a17 	ldw	r4,232(sp)
    158c:	df0022c4 	addi	fp,sp,139
    1590:	8c400044 	addi	r17,r17,1
    1594:	20c7883a 	add	r3,r4,r3
    1598:	b7000015 	stw	fp,0(r22)
    159c:	b1000115 	stw	r4,4(r22)
    15a0:	d8c02015 	stw	r3,128(sp)
    15a4:	dc401f15 	stw	r17,124(sp)
    15a8:	008001c4 	movi	r2,7
    15ac:	14400e16 	blt	r2,r17,15e8 <___vfprintf_internal_r+0x111c>
    15b0:	b2000204 	addi	r8,r22,8
    15b4:	003e3a06 	br	ea0 <___vfprintf_internal_r+0x9d4>
    15b8:	010000b4 	movhi	r4,2
    15bc:	21259d84 	addi	r4,r4,-27018
    15c0:	d9002b15 	stw	r4,172(sp)
    15c4:	d9002b17 	ldw	r4,172(sp)
    15c8:	1c07883a 	add	r3,r3,r16
    15cc:	44000115 	stw	r16,4(r8)
    15d0:	41000015 	stw	r4,0(r8)
    15d4:	10800044 	addi	r2,r2,1
    15d8:	d8c02015 	stw	r3,128(sp)
    15dc:	d8801f15 	stw	r2,124(sp)
    15e0:	010001c4 	movi	r4,7
    15e4:	20be2d0e 	bge	r4,r2,e9c <___vfprintf_internal_r+0x9d0>
    15e8:	d9002c17 	ldw	r4,176(sp)
    15ec:	d9801e04 	addi	r6,sp,120
    15f0:	b80b883a 	mov	r5,r23
    15f4:	0006fe40 	call	6fe4 <__sprint_r>
    15f8:	103cb61e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    15fc:	d8c02017 	ldw	r3,128(sp)
    1600:	da000404 	addi	r8,sp,16
    1604:	003e2606 	br	ea0 <___vfprintf_internal_r+0x9d4>
    1608:	d9002c17 	ldw	r4,176(sp)
    160c:	d9801e04 	addi	r6,sp,120
    1610:	b80b883a 	mov	r5,r23
    1614:	0006fe40 	call	6fe4 <__sprint_r>
    1618:	103e5d26 	beq	r2,zero,f90 <___vfprintf_internal_r+0xac4>
    161c:	003cad06 	br	8d4 <___vfprintf_internal_r+0x408>
    1620:	d9002c17 	ldw	r4,176(sp)
    1624:	d9801e04 	addi	r6,sp,120
    1628:	b80b883a 	mov	r5,r23
    162c:	0006fe40 	call	6fe4 <__sprint_r>
    1630:	103ca81e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    1634:	d8c02017 	ldw	r3,128(sp)
    1638:	da000404 	addi	r8,sp,16
    163c:	003e0b06 	br	e6c <___vfprintf_internal_r+0x9a0>
    1640:	d9002c17 	ldw	r4,176(sp)
    1644:	d9801e04 	addi	r6,sp,120
    1648:	b80b883a 	mov	r5,r23
    164c:	0006fe40 	call	6fe4 <__sprint_r>
    1650:	103ca01e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    1654:	d8c02017 	ldw	r3,128(sp)
    1658:	da000404 	addi	r8,sp,16
    165c:	003dbd06 	br	d54 <___vfprintf_internal_r+0x888>
    1660:	d9002c17 	ldw	r4,176(sp)
    1664:	d9801e04 	addi	r6,sp,120
    1668:	b80b883a 	mov	r5,r23
    166c:	0006fe40 	call	6fe4 <__sprint_r>
    1670:	103c981e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    1674:	d8c02017 	ldw	r3,128(sp)
    1678:	da000404 	addi	r8,sp,16
    167c:	003dc306 	br	d8c <___vfprintf_internal_r+0x8c0>
    1680:	d8802917 	ldw	r2,164(sp)
    1684:	d8002785 	stb	zero,158(sp)
    1688:	103f0616 	blt	r2,zero,12a4 <___vfprintf_internal_r+0xdd8>
    168c:	00ffdfc4 	movi	r3,-129
    1690:	9d84b03a 	or	r2,r19,r22
    1694:	90e4703a 	and	r18,r18,r3
    1698:	103c6b26 	beq	r2,zero,848 <___vfprintf_internal_r+0x37c>
    169c:	0039883a 	mov	fp,zero
    16a0:	003e7406 	br	1074 <___vfprintf_internal_r+0xba8>
    16a4:	9080040c 	andi	r2,r18,16
    16a8:	1001b326 	beq	r2,zero,1d78 <___vfprintf_internal_r+0x18ac>
    16ac:	d9002d17 	ldw	r4,180(sp)
    16b0:	d9402917 	ldw	r5,164(sp)
    16b4:	d8002785 	stb	zero,158(sp)
    16b8:	20800104 	addi	r2,r4,4
    16bc:	24c00017 	ldw	r19,0(r4)
    16c0:	002d883a 	mov	r22,zero
    16c4:	2801b516 	blt	r5,zero,1d9c <___vfprintf_internal_r+0x18d0>
    16c8:	00ffdfc4 	movi	r3,-129
    16cc:	d8802d15 	stw	r2,180(sp)
    16d0:	90e4703a 	and	r18,r18,r3
    16d4:	983d2726 	beq	r19,zero,b74 <___vfprintf_internal_r+0x6a8>
    16d8:	0039883a 	mov	fp,zero
    16dc:	003d2a06 	br	b88 <___vfprintf_internal_r+0x6bc>
    16e0:	dc402617 	ldw	r17,152(sp)
    16e4:	0441d30e 	bge	zero,r17,1e34 <___vfprintf_internal_r+0x1968>
    16e8:	dc403217 	ldw	r17,200(sp)
    16ec:	d8803317 	ldw	r2,204(sp)
    16f0:	1440010e 	bge	r2,r17,16f8 <___vfprintf_internal_r+0x122c>
    16f4:	1023883a 	mov	r17,r2
    16f8:	04400a0e 	bge	zero,r17,1724 <___vfprintf_internal_r+0x1258>
    16fc:	d8801f17 	ldw	r2,124(sp)
    1700:	1c47883a 	add	r3,r3,r17
    1704:	44000015 	stw	r16,0(r8)
    1708:	10800044 	addi	r2,r2,1
    170c:	44400115 	stw	r17,4(r8)
    1710:	d8c02015 	stw	r3,128(sp)
    1714:	d8801f15 	stw	r2,124(sp)
    1718:	010001c4 	movi	r4,7
    171c:	20826516 	blt	r4,r2,20b4 <___vfprintf_internal_r+0x1be8>
    1720:	42000204 	addi	r8,r8,8
    1724:	88026116 	blt	r17,zero,20ac <___vfprintf_internal_r+0x1be0>
    1728:	d9003217 	ldw	r4,200(sp)
    172c:	2463c83a 	sub	r17,r4,r17
    1730:	04407b0e 	bge	zero,r17,1920 <___vfprintf_internal_r+0x1454>
    1734:	05800404 	movi	r22,16
    1738:	d8801f17 	ldw	r2,124(sp)
    173c:	b4419d0e 	bge	r22,r17,1db4 <___vfprintf_internal_r+0x18e8>
    1740:	010000b4 	movhi	r4,2
    1744:	21259d84 	addi	r4,r4,-27018
    1748:	d9002b15 	stw	r4,172(sp)
    174c:	070001c4 	movi	fp,7
    1750:	dcc02c17 	ldw	r19,176(sp)
    1754:	00000306 	br	1764 <___vfprintf_internal_r+0x1298>
    1758:	42000204 	addi	r8,r8,8
    175c:	8c7ffc04 	addi	r17,r17,-16
    1760:	b441970e 	bge	r22,r17,1dc0 <___vfprintf_internal_r+0x18f4>
    1764:	18c00404 	addi	r3,r3,16
    1768:	10800044 	addi	r2,r2,1
    176c:	45000015 	stw	r20,0(r8)
    1770:	45800115 	stw	r22,4(r8)
    1774:	d8c02015 	stw	r3,128(sp)
    1778:	d8801f15 	stw	r2,124(sp)
    177c:	e0bff60e 	bge	fp,r2,1758 <___vfprintf_internal_r+0x128c>
    1780:	d9801e04 	addi	r6,sp,120
    1784:	b80b883a 	mov	r5,r23
    1788:	9809883a 	mov	r4,r19
    178c:	0006fe40 	call	6fe4 <__sprint_r>
    1790:	103c501e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    1794:	d8c02017 	ldw	r3,128(sp)
    1798:	d8801f17 	ldw	r2,124(sp)
    179c:	da000404 	addi	r8,sp,16
    17a0:	003fee06 	br	175c <___vfprintf_internal_r+0x1290>
    17a4:	d9002c17 	ldw	r4,176(sp)
    17a8:	d9801e04 	addi	r6,sp,120
    17ac:	b80b883a 	mov	r5,r23
    17b0:	0006fe40 	call	6fe4 <__sprint_r>
    17b4:	103c471e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    17b8:	d8c02017 	ldw	r3,128(sp)
    17bc:	df002787 	ldb	fp,158(sp)
    17c0:	da000404 	addi	r8,sp,16
    17c4:	003d5606 	br	d20 <___vfprintf_internal_r+0x854>
    17c8:	9080040c 	andi	r2,r18,16
    17cc:	10016126 	beq	r2,zero,1d54 <___vfprintf_internal_r+0x1888>
    17d0:	d8802d17 	ldw	r2,180(sp)
    17d4:	14c00017 	ldw	r19,0(r2)
    17d8:	10800104 	addi	r2,r2,4
    17dc:	d8802d15 	stw	r2,180(sp)
    17e0:	982dd7fa 	srai	r22,r19,31
    17e4:	b005883a 	mov	r2,r22
    17e8:	003c8206 	br	9f4 <___vfprintf_internal_r+0x528>
    17ec:	9080040c 	andi	r2,r18,16
    17f0:	10003526 	beq	r2,zero,18c8 <___vfprintf_internal_r+0x13fc>
    17f4:	d9402d17 	ldw	r5,180(sp)
    17f8:	d8c02917 	ldw	r3,164(sp)
    17fc:	d8002785 	stb	zero,158(sp)
    1800:	28800104 	addi	r2,r5,4
    1804:	2cc00017 	ldw	r19,0(r5)
    1808:	002d883a 	mov	r22,zero
    180c:	18003716 	blt	r3,zero,18ec <___vfprintf_internal_r+0x1420>
    1810:	00ffdfc4 	movi	r3,-129
    1814:	d8802d15 	stw	r2,180(sp)
    1818:	90e4703a 	and	r18,r18,r3
    181c:	0039883a 	mov	fp,zero
    1820:	983df326 	beq	r19,zero,ff0 <___vfprintf_internal_r+0xb24>
    1824:	00800244 	movi	r2,9
    1828:	14fc7b36 	bltu	r2,r19,a18 <___vfprintf_internal_r+0x54c>
    182c:	d8c02817 	ldw	r3,160(sp)
    1830:	dc001dc4 	addi	r16,sp,119
    1834:	9cc00c04 	addi	r19,r19,48
    1838:	1c07c83a 	sub	r3,r3,r16
    183c:	dcc01dc5 	stb	r19,119(sp)
    1840:	d8c02e15 	stw	r3,184(sp)
    1844:	003ce806 	br	be8 <___vfprintf_internal_r+0x71c>
    1848:	d8803317 	ldw	r2,204(sp)
    184c:	143fffc4 	addi	r16,r2,-1
    1850:	043f4d0e 	bge	zero,r16,1588 <___vfprintf_internal_r+0x10bc>
    1854:	07000404 	movi	fp,16
    1858:	e400810e 	bge	fp,r16,1a60 <___vfprintf_internal_r+0x1594>
    185c:	014000b4 	movhi	r5,2
    1860:	29659d84 	addi	r5,r5,-27018
    1864:	d9402b15 	stw	r5,172(sp)
    1868:	01c001c4 	movi	r7,7
    186c:	dcc02c17 	ldw	r19,176(sp)
    1870:	00000306 	br	1880 <___vfprintf_internal_r+0x13b4>
    1874:	b5800204 	addi	r22,r22,8
    1878:	843ffc04 	addi	r16,r16,-16
    187c:	e4007b0e 	bge	fp,r16,1a6c <___vfprintf_internal_r+0x15a0>
    1880:	18c00404 	addi	r3,r3,16
    1884:	8c400044 	addi	r17,r17,1
    1888:	b5000015 	stw	r20,0(r22)
    188c:	b7000115 	stw	fp,4(r22)
    1890:	d8c02015 	stw	r3,128(sp)
    1894:	dc401f15 	stw	r17,124(sp)
    1898:	3c7ff60e 	bge	r7,r17,1874 <___vfprintf_internal_r+0x13a8>
    189c:	d9801e04 	addi	r6,sp,120
    18a0:	b80b883a 	mov	r5,r23
    18a4:	9809883a 	mov	r4,r19
    18a8:	d9c03c15 	stw	r7,240(sp)
    18ac:	0006fe40 	call	6fe4 <__sprint_r>
    18b0:	d9c03c17 	ldw	r7,240(sp)
    18b4:	103c071e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    18b8:	d8c02017 	ldw	r3,128(sp)
    18bc:	dc401f17 	ldw	r17,124(sp)
    18c0:	dd800404 	addi	r22,sp,16
    18c4:	003fec06 	br	1878 <___vfprintf_internal_r+0x13ac>
    18c8:	9080100c 	andi	r2,r18,64
    18cc:	d8002785 	stb	zero,158(sp)
    18d0:	10010e26 	beq	r2,zero,1d0c <___vfprintf_internal_r+0x1840>
    18d4:	d9002d17 	ldw	r4,180(sp)
    18d8:	d9402917 	ldw	r5,164(sp)
    18dc:	002d883a 	mov	r22,zero
    18e0:	20800104 	addi	r2,r4,4
    18e4:	24c0000b 	ldhu	r19,0(r4)
    18e8:	283fc90e 	bge	r5,zero,1810 <___vfprintf_internal_r+0x1344>
    18ec:	d8802d15 	stw	r2,180(sp)
    18f0:	0039883a 	mov	fp,zero
    18f4:	9d84b03a 	or	r2,r19,r22
    18f8:	103c461e 	bne	r2,zero,a14 <___vfprintf_internal_r+0x548>
    18fc:	00800044 	movi	r2,1
    1900:	003e6c06 	br	12b4 <___vfprintf_internal_r+0xde8>
    1904:	d9002c17 	ldw	r4,176(sp)
    1908:	d9801e04 	addi	r6,sp,120
    190c:	b80b883a 	mov	r5,r23
    1910:	0006fe40 	call	6fe4 <__sprint_r>
    1914:	103bef1e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    1918:	d8c02017 	ldw	r3,128(sp)
    191c:	da000404 	addi	r8,sp,16
    1920:	d9003217 	ldw	r4,200(sp)
    1924:	d8802617 	ldw	r2,152(sp)
    1928:	d9403317 	ldw	r5,204(sp)
    192c:	8123883a 	add	r17,r16,r4
    1930:	11400216 	blt	r2,r5,193c <___vfprintf_internal_r+0x1470>
    1934:	9100004c 	andi	r4,r18,1
    1938:	20000d26 	beq	r4,zero,1970 <___vfprintf_internal_r+0x14a4>
    193c:	d9003717 	ldw	r4,220(sp)
    1940:	d9403417 	ldw	r5,208(sp)
    1944:	1907883a 	add	r3,r3,r4
    1948:	d9001f17 	ldw	r4,124(sp)
    194c:	41400015 	stw	r5,0(r8)
    1950:	d9403717 	ldw	r5,220(sp)
    1954:	21000044 	addi	r4,r4,1
    1958:	d8c02015 	stw	r3,128(sp)
    195c:	41400115 	stw	r5,4(r8)
    1960:	d9001f15 	stw	r4,124(sp)
    1964:	014001c4 	movi	r5,7
    1968:	2901e816 	blt	r5,r4,210c <___vfprintf_internal_r+0x1c40>
    196c:	42000204 	addi	r8,r8,8
    1970:	d9003317 	ldw	r4,204(sp)
    1974:	8121883a 	add	r16,r16,r4
    1978:	2085c83a 	sub	r2,r4,r2
    197c:	8461c83a 	sub	r16,r16,r17
    1980:	1400010e 	bge	r2,r16,1988 <___vfprintf_internal_r+0x14bc>
    1984:	1021883a 	mov	r16,r2
    1988:	04000a0e 	bge	zero,r16,19b4 <___vfprintf_internal_r+0x14e8>
    198c:	d9001f17 	ldw	r4,124(sp)
    1990:	1c07883a 	add	r3,r3,r16
    1994:	44400015 	stw	r17,0(r8)
    1998:	21000044 	addi	r4,r4,1
    199c:	44000115 	stw	r16,4(r8)
    19a0:	d8c02015 	stw	r3,128(sp)
    19a4:	d9001f15 	stw	r4,124(sp)
    19a8:	014001c4 	movi	r5,7
    19ac:	2901fb16 	blt	r5,r4,219c <___vfprintf_internal_r+0x1cd0>
    19b0:	42000204 	addi	r8,r8,8
    19b4:	8001f716 	blt	r16,zero,2194 <___vfprintf_internal_r+0x1cc8>
    19b8:	1421c83a 	sub	r16,r2,r16
    19bc:	043d380e 	bge	zero,r16,ea0 <___vfprintf_internal_r+0x9d4>
    19c0:	04400404 	movi	r17,16
    19c4:	d8801f17 	ldw	r2,124(sp)
    19c8:	8c3efb0e 	bge	r17,r16,15b8 <___vfprintf_internal_r+0x10ec>
    19cc:	014000b4 	movhi	r5,2
    19d0:	29659d84 	addi	r5,r5,-27018
    19d4:	d9402b15 	stw	r5,172(sp)
    19d8:	058001c4 	movi	r22,7
    19dc:	dcc02c17 	ldw	r19,176(sp)
    19e0:	00000306 	br	19f0 <___vfprintf_internal_r+0x1524>
    19e4:	42000204 	addi	r8,r8,8
    19e8:	843ffc04 	addi	r16,r16,-16
    19ec:	8c3ef50e 	bge	r17,r16,15c4 <___vfprintf_internal_r+0x10f8>
    19f0:	18c00404 	addi	r3,r3,16
    19f4:	10800044 	addi	r2,r2,1
    19f8:	45000015 	stw	r20,0(r8)
    19fc:	44400115 	stw	r17,4(r8)
    1a00:	d8c02015 	stw	r3,128(sp)
    1a04:	d8801f15 	stw	r2,124(sp)
    1a08:	b0bff60e 	bge	r22,r2,19e4 <___vfprintf_internal_r+0x1518>
    1a0c:	d9801e04 	addi	r6,sp,120
    1a10:	b80b883a 	mov	r5,r23
    1a14:	9809883a 	mov	r4,r19
    1a18:	0006fe40 	call	6fe4 <__sprint_r>
    1a1c:	103bad1e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    1a20:	d8c02017 	ldw	r3,128(sp)
    1a24:	d8801f17 	ldw	r2,124(sp)
    1a28:	da000404 	addi	r8,sp,16
    1a2c:	003fee06 	br	19e8 <___vfprintf_internal_r+0x151c>
    1a30:	9088703a 	and	r4,r18,r2
    1a34:	203eab1e 	bne	r4,zero,14e4 <___vfprintf_internal_r+0x1018>
    1a38:	dc401f17 	ldw	r17,124(sp)
    1a3c:	40800115 	stw	r2,4(r8)
    1a40:	44000015 	stw	r16,0(r8)
    1a44:	8c400044 	addi	r17,r17,1
    1a48:	d8c02015 	stw	r3,128(sp)
    1a4c:	dc401f15 	stw	r17,124(sp)
    1a50:	008001c4 	movi	r2,7
    1a54:	14400e16 	blt	r2,r17,1a90 <___vfprintf_internal_r+0x15c4>
    1a58:	45800204 	addi	r22,r8,8
    1a5c:	003eca06 	br	1588 <___vfprintf_internal_r+0x10bc>
    1a60:	010000b4 	movhi	r4,2
    1a64:	21259d84 	addi	r4,r4,-27018
    1a68:	d9002b15 	stw	r4,172(sp)
    1a6c:	d8802b17 	ldw	r2,172(sp)
    1a70:	1c07883a 	add	r3,r3,r16
    1a74:	8c400044 	addi	r17,r17,1
    1a78:	b0800015 	stw	r2,0(r22)
    1a7c:	b4000115 	stw	r16,4(r22)
    1a80:	d8c02015 	stw	r3,128(sp)
    1a84:	dc401f15 	stw	r17,124(sp)
    1a88:	008001c4 	movi	r2,7
    1a8c:	147ebd0e 	bge	r2,r17,1584 <___vfprintf_internal_r+0x10b8>
    1a90:	d9002c17 	ldw	r4,176(sp)
    1a94:	d9801e04 	addi	r6,sp,120
    1a98:	b80b883a 	mov	r5,r23
    1a9c:	0006fe40 	call	6fe4 <__sprint_r>
    1aa0:	103b8c1e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    1aa4:	d8c02017 	ldw	r3,128(sp)
    1aa8:	dc401f17 	ldw	r17,124(sp)
    1aac:	dd800404 	addi	r22,sp,16
    1ab0:	003eb506 	br	1588 <___vfprintf_internal_r+0x10bc>
    1ab4:	d9002c17 	ldw	r4,176(sp)
    1ab8:	d9801e04 	addi	r6,sp,120
    1abc:	b80b883a 	mov	r5,r23
    1ac0:	0006fe40 	call	6fe4 <__sprint_r>
    1ac4:	103b831e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    1ac8:	d8c02017 	ldw	r3,128(sp)
    1acc:	dc401f17 	ldw	r17,124(sp)
    1ad0:	da000404 	addi	r8,sp,16
    1ad4:	003e8d06 	br	150c <___vfprintf_internal_r+0x1040>
    1ad8:	d9002c17 	ldw	r4,176(sp)
    1adc:	d9801e04 	addi	r6,sp,120
    1ae0:	b80b883a 	mov	r5,r23
    1ae4:	0006fe40 	call	6fe4 <__sprint_r>
    1ae8:	103b7a1e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    1aec:	d8c02017 	ldw	r3,128(sp)
    1af0:	dc401f17 	ldw	r17,124(sp)
    1af4:	dd800404 	addi	r22,sp,16
    1af8:	003e8f06 	br	1538 <___vfprintf_internal_r+0x106c>
    1afc:	0027883a 	mov	r19,zero
    1b00:	003f4a06 	br	182c <___vfprintf_internal_r+0x1360>
    1b04:	d9002c17 	ldw	r4,176(sp)
    1b08:	d9801e04 	addi	r6,sp,120
    1b0c:	b80b883a 	mov	r5,r23
    1b10:	0006fe40 	call	6fe4 <__sprint_r>
    1b14:	103b6f1e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    1b18:	d8c02017 	ldw	r3,128(sp)
    1b1c:	da000404 	addi	r8,sp,16
    1b20:	003c9d06 	br	d98 <___vfprintf_internal_r+0x8cc>
    1b24:	04e7c83a 	sub	r19,zero,r19
    1b28:	9804c03a 	cmpne	r2,r19,zero
    1b2c:	05adc83a 	sub	r22,zero,r22
    1b30:	b0adc83a 	sub	r22,r22,r2
    1b34:	d8802917 	ldw	r2,164(sp)
    1b38:	07000b44 	movi	fp,45
    1b3c:	df002785 	stb	fp,158(sp)
    1b40:	10017b16 	blt	r2,zero,2130 <___vfprintf_internal_r+0x1c64>
    1b44:	00bfdfc4 	movi	r2,-129
    1b48:	90a4703a 	and	r18,r18,r2
    1b4c:	003bb106 	br	a14 <___vfprintf_internal_r+0x548>
    1b50:	d9003617 	ldw	r4,216(sp)
    1b54:	d9403817 	ldw	r5,224(sp)
    1b58:	da003d15 	stw	r8,244(sp)
    1b5c:	0006b700 	call	6b70 <__fpclassifyd>
    1b60:	da003d17 	ldw	r8,244(sp)
    1b64:	1000f026 	beq	r2,zero,1f28 <___vfprintf_internal_r+0x1a5c>
    1b68:	d9002917 	ldw	r4,164(sp)
    1b6c:	05bff7c4 	movi	r22,-33
    1b70:	00bfffc4 	movi	r2,-1
    1b74:	8dac703a 	and	r22,r17,r22
    1b78:	20820026 	beq	r4,r2,237c <___vfprintf_internal_r+0x1eb0>
    1b7c:	008011c4 	movi	r2,71
    1b80:	b081f726 	beq	r22,r2,2360 <___vfprintf_internal_r+0x1e94>
    1b84:	d9003817 	ldw	r4,224(sp)
    1b88:	90c04014 	ori	r3,r18,256
    1b8c:	d8c02b15 	stw	r3,172(sp)
    1b90:	20021516 	blt	r4,zero,23e8 <___vfprintf_internal_r+0x1f1c>
    1b94:	dcc03817 	ldw	r19,224(sp)
    1b98:	d8002a05 	stb	zero,168(sp)
    1b9c:	00801984 	movi	r2,102
    1ba0:	8881f926 	beq	r17,r2,2388 <___vfprintf_internal_r+0x1ebc>
    1ba4:	00801184 	movi	r2,70
    1ba8:	88821c26 	beq	r17,r2,241c <___vfprintf_internal_r+0x1f50>
    1bac:	00801144 	movi	r2,69
    1bb0:	b081ef26 	beq	r22,r2,2370 <___vfprintf_internal_r+0x1ea4>
    1bb4:	d8c02917 	ldw	r3,164(sp)
    1bb8:	d8802104 	addi	r2,sp,132
    1bbc:	d8800315 	stw	r2,12(sp)
    1bc0:	d9403617 	ldw	r5,216(sp)
    1bc4:	d8802504 	addi	r2,sp,148
    1bc8:	d9002c17 	ldw	r4,176(sp)
    1bcc:	d8800215 	stw	r2,8(sp)
    1bd0:	d8802604 	addi	r2,sp,152
    1bd4:	d8c00015 	stw	r3,0(sp)
    1bd8:	d8800115 	stw	r2,4(sp)
    1bdc:	01c00084 	movi	r7,2
    1be0:	980d883a 	mov	r6,r19
    1be4:	d8c03c15 	stw	r3,240(sp)
    1be8:	da003d15 	stw	r8,244(sp)
    1bec:	0002af00 	call	2af0 <_dtoa_r>
    1bf0:	1021883a 	mov	r16,r2
    1bf4:	008019c4 	movi	r2,103
    1bf8:	d8c03c17 	ldw	r3,240(sp)
    1bfc:	da003d17 	ldw	r8,244(sp)
    1c00:	88817126 	beq	r17,r2,21c8 <___vfprintf_internal_r+0x1cfc>
    1c04:	008011c4 	movi	r2,71
    1c08:	88829226 	beq	r17,r2,2654 <___vfprintf_internal_r+0x2188>
    1c0c:	80f9883a 	add	fp,r16,r3
    1c10:	d9003617 	ldw	r4,216(sp)
    1c14:	000d883a 	mov	r6,zero
    1c18:	000f883a 	mov	r7,zero
    1c1c:	980b883a 	mov	r5,r19
    1c20:	da003d15 	stw	r8,244(sp)
    1c24:	000b7d80 	call	b7d8 <__eqdf2>
    1c28:	da003d17 	ldw	r8,244(sp)
    1c2c:	10018d26 	beq	r2,zero,2264 <___vfprintf_internal_r+0x1d98>
    1c30:	d8802117 	ldw	r2,132(sp)
    1c34:	1700062e 	bgeu	r2,fp,1c50 <___vfprintf_internal_r+0x1784>
    1c38:	01000c04 	movi	r4,48
    1c3c:	10c00044 	addi	r3,r2,1
    1c40:	d8c02115 	stw	r3,132(sp)
    1c44:	11000005 	stb	r4,0(r2)
    1c48:	d8802117 	ldw	r2,132(sp)
    1c4c:	173ffb36 	bltu	r2,fp,1c3c <___vfprintf_internal_r+0x1770>
    1c50:	1405c83a 	sub	r2,r2,r16
    1c54:	d8803315 	stw	r2,204(sp)
    1c58:	008011c4 	movi	r2,71
    1c5c:	b0817626 	beq	r22,r2,2238 <___vfprintf_internal_r+0x1d6c>
    1c60:	00801944 	movi	r2,101
    1c64:	1442810e 	bge	r2,r17,266c <___vfprintf_internal_r+0x21a0>
    1c68:	d8c02617 	ldw	r3,152(sp)
    1c6c:	00801984 	movi	r2,102
    1c70:	d8c03215 	stw	r3,200(sp)
    1c74:	8881fe26 	beq	r17,r2,2470 <___vfprintf_internal_r+0x1fa4>
    1c78:	d8c03217 	ldw	r3,200(sp)
    1c7c:	d9003317 	ldw	r4,204(sp)
    1c80:	1901dd16 	blt	r3,r4,23f8 <___vfprintf_internal_r+0x1f2c>
    1c84:	9480004c 	andi	r18,r18,1
    1c88:	90022b1e 	bne	r18,zero,2538 <___vfprintf_internal_r+0x206c>
    1c8c:	1805883a 	mov	r2,r3
    1c90:	18028016 	blt	r3,zero,2694 <___vfprintf_internal_r+0x21c8>
    1c94:	d8c03217 	ldw	r3,200(sp)
    1c98:	044019c4 	movi	r17,103
    1c9c:	d8c02e15 	stw	r3,184(sp)
    1ca0:	df002a07 	ldb	fp,168(sp)
    1ca4:	e001531e 	bne	fp,zero,21f4 <___vfprintf_internal_r+0x1d28>
    1ca8:	df002783 	ldbu	fp,158(sp)
    1cac:	d8802a15 	stw	r2,168(sp)
    1cb0:	dc802b17 	ldw	r18,172(sp)
    1cb4:	d8002915 	stw	zero,164(sp)
    1cb8:	003bd106 	br	c00 <___vfprintf_internal_r+0x734>
    1cbc:	d8802d17 	ldw	r2,180(sp)
    1cc0:	d8c02d17 	ldw	r3,180(sp)
    1cc4:	d9002d17 	ldw	r4,180(sp)
    1cc8:	10800017 	ldw	r2,0(r2)
    1ccc:	18c00117 	ldw	r3,4(r3)
    1cd0:	21000204 	addi	r4,r4,8
    1cd4:	d8803615 	stw	r2,216(sp)
    1cd8:	d8c03815 	stw	r3,224(sp)
    1cdc:	d9002d15 	stw	r4,180(sp)
    1ce0:	003b7506 	br	ab8 <___vfprintf_internal_r+0x5ec>
    1ce4:	ac400007 	ldb	r17,0(r21)
    1ce8:	003a5906 	br	650 <___vfprintf_internal_r+0x184>
    1cec:	9080100c 	andi	r2,r18,64
    1cf0:	1000a826 	beq	r2,zero,1f94 <___vfprintf_internal_r+0x1ac8>
    1cf4:	d9002d17 	ldw	r4,180(sp)
    1cf8:	002d883a 	mov	r22,zero
    1cfc:	24c0000b 	ldhu	r19,0(r4)
    1d00:	21000104 	addi	r4,r4,4
    1d04:	d9002d15 	stw	r4,180(sp)
    1d08:	003ccb06 	br	1038 <___vfprintf_internal_r+0xb6c>
    1d0c:	d8c02d17 	ldw	r3,180(sp)
    1d10:	d9002917 	ldw	r4,164(sp)
    1d14:	002d883a 	mov	r22,zero
    1d18:	18800104 	addi	r2,r3,4
    1d1c:	1cc00017 	ldw	r19,0(r3)
    1d20:	203ebb0e 	bge	r4,zero,1810 <___vfprintf_internal_r+0x1344>
    1d24:	003ef106 	br	18ec <___vfprintf_internal_r+0x1420>
    1d28:	9080040c 	andi	r2,r18,16
    1d2c:	1000921e 	bne	r2,zero,1f78 <___vfprintf_internal_r+0x1aac>
    1d30:	9480100c 	andi	r18,r18,64
    1d34:	90013926 	beq	r18,zero,221c <___vfprintf_internal_r+0x1d50>
    1d38:	d9002d17 	ldw	r4,180(sp)
    1d3c:	d9402f17 	ldw	r5,188(sp)
    1d40:	20800017 	ldw	r2,0(r4)
    1d44:	21000104 	addi	r4,r4,4
    1d48:	d9002d15 	stw	r4,180(sp)
    1d4c:	1140000d 	sth	r5,0(r2)
    1d50:	003a1606 	br	5ac <___vfprintf_internal_r+0xe0>
    1d54:	9080100c 	andi	r2,r18,64
    1d58:	10008026 	beq	r2,zero,1f5c <___vfprintf_internal_r+0x1a90>
    1d5c:	d8c02d17 	ldw	r3,180(sp)
    1d60:	1cc0000f 	ldh	r19,0(r3)
    1d64:	18c00104 	addi	r3,r3,4
    1d68:	d8c02d15 	stw	r3,180(sp)
    1d6c:	982dd7fa 	srai	r22,r19,31
    1d70:	b005883a 	mov	r2,r22
    1d74:	003b1f06 	br	9f4 <___vfprintf_internal_r+0x528>
    1d78:	9080100c 	andi	r2,r18,64
    1d7c:	d8002785 	stb	zero,158(sp)
    1d80:	10008a1e 	bne	r2,zero,1fac <___vfprintf_internal_r+0x1ae0>
    1d84:	d9402d17 	ldw	r5,180(sp)
    1d88:	d8c02917 	ldw	r3,164(sp)
    1d8c:	002d883a 	mov	r22,zero
    1d90:	28800104 	addi	r2,r5,4
    1d94:	2cc00017 	ldw	r19,0(r5)
    1d98:	183e4b0e 	bge	r3,zero,16c8 <___vfprintf_internal_r+0x11fc>
    1d9c:	9d86b03a 	or	r3,r19,r22
    1da0:	d8802d15 	stw	r2,180(sp)
    1da4:	183e4c1e 	bne	r3,zero,16d8 <___vfprintf_internal_r+0x120c>
    1da8:	0039883a 	mov	fp,zero
    1dac:	0005883a 	mov	r2,zero
    1db0:	003d4006 	br	12b4 <___vfprintf_internal_r+0xde8>
    1db4:	014000b4 	movhi	r5,2
    1db8:	29659d84 	addi	r5,r5,-27018
    1dbc:	d9402b15 	stw	r5,172(sp)
    1dc0:	d9402b17 	ldw	r5,172(sp)
    1dc4:	1c47883a 	add	r3,r3,r17
    1dc8:	10800044 	addi	r2,r2,1
    1dcc:	41400015 	stw	r5,0(r8)
    1dd0:	44400115 	stw	r17,4(r8)
    1dd4:	d8c02015 	stw	r3,128(sp)
    1dd8:	d8801f15 	stw	r2,124(sp)
    1ddc:	010001c4 	movi	r4,7
    1de0:	20bec816 	blt	r4,r2,1904 <___vfprintf_internal_r+0x1438>
    1de4:	42000204 	addi	r8,r8,8
    1de8:	003ecd06 	br	1920 <___vfprintf_internal_r+0x1454>
    1dec:	d9002917 	ldw	r4,164(sp)
    1df0:	d8002785 	stb	zero,158(sp)
    1df4:	203d2d16 	blt	r4,zero,12ac <___vfprintf_internal_r+0xde0>
    1df8:	00bfdfc4 	movi	r2,-129
    1dfc:	90a4703a 	and	r18,r18,r2
    1e00:	003a9106 	br	848 <___vfprintf_internal_r+0x37c>
    1e04:	010000b4 	movhi	r4,2
    1e08:	21259d84 	addi	r4,r4,-27018
    1e0c:	d9002b15 	stw	r4,172(sp)
    1e10:	003c0c06 	br	e44 <___vfprintf_internal_r+0x978>
    1e14:	d9002c17 	ldw	r4,176(sp)
    1e18:	d9801e04 	addi	r6,sp,120
    1e1c:	b80b883a 	mov	r5,r23
    1e20:	0006fe40 	call	6fe4 <__sprint_r>
    1e24:	103aab1e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    1e28:	d8c02017 	ldw	r3,128(sp)
    1e2c:	da000404 	addi	r8,sp,16
    1e30:	003d4106 	br	1338 <___vfprintf_internal_r+0xe6c>
    1e34:	d8801f17 	ldw	r2,124(sp)
    1e38:	014000b4 	movhi	r5,2
    1e3c:	01000044 	movi	r4,1
    1e40:	18c00044 	addi	r3,r3,1
    1e44:	10800044 	addi	r2,r2,1
    1e48:	29659d04 	addi	r5,r5,-27020
    1e4c:	41000115 	stw	r4,4(r8)
    1e50:	41400015 	stw	r5,0(r8)
    1e54:	d8c02015 	stw	r3,128(sp)
    1e58:	d8801f15 	stw	r2,124(sp)
    1e5c:	010001c4 	movi	r4,7
    1e60:	20805c16 	blt	r4,r2,1fd4 <___vfprintf_internal_r+0x1b08>
    1e64:	42000204 	addi	r8,r8,8
    1e68:	8800041e 	bne	r17,zero,1e7c <___vfprintf_internal_r+0x19b0>
    1e6c:	d8803317 	ldw	r2,204(sp)
    1e70:	1000021e 	bne	r2,zero,1e7c <___vfprintf_internal_r+0x19b0>
    1e74:	9080004c 	andi	r2,r18,1
    1e78:	103c0926 	beq	r2,zero,ea0 <___vfprintf_internal_r+0x9d4>
    1e7c:	d9003717 	ldw	r4,220(sp)
    1e80:	d8801f17 	ldw	r2,124(sp)
    1e84:	d9403417 	ldw	r5,208(sp)
    1e88:	20c7883a 	add	r3,r4,r3
    1e8c:	10800044 	addi	r2,r2,1
    1e90:	41000115 	stw	r4,4(r8)
    1e94:	41400015 	stw	r5,0(r8)
    1e98:	d8c02015 	stw	r3,128(sp)
    1e9c:	d8801f15 	stw	r2,124(sp)
    1ea0:	010001c4 	movi	r4,7
    1ea4:	20812116 	blt	r4,r2,232c <___vfprintf_internal_r+0x1e60>
    1ea8:	42000204 	addi	r8,r8,8
    1eac:	0463c83a 	sub	r17,zero,r17
    1eb0:	0440730e 	bge	zero,r17,2080 <___vfprintf_internal_r+0x1bb4>
    1eb4:	05800404 	movi	r22,16
    1eb8:	b440860e 	bge	r22,r17,20d4 <___vfprintf_internal_r+0x1c08>
    1ebc:	014000b4 	movhi	r5,2
    1ec0:	29659d84 	addi	r5,r5,-27018
    1ec4:	d9402b15 	stw	r5,172(sp)
    1ec8:	070001c4 	movi	fp,7
    1ecc:	dcc02c17 	ldw	r19,176(sp)
    1ed0:	00000306 	br	1ee0 <___vfprintf_internal_r+0x1a14>
    1ed4:	42000204 	addi	r8,r8,8
    1ed8:	8c7ffc04 	addi	r17,r17,-16
    1edc:	b440800e 	bge	r22,r17,20e0 <___vfprintf_internal_r+0x1c14>
    1ee0:	18c00404 	addi	r3,r3,16
    1ee4:	10800044 	addi	r2,r2,1
    1ee8:	45000015 	stw	r20,0(r8)
    1eec:	45800115 	stw	r22,4(r8)
    1ef0:	d8c02015 	stw	r3,128(sp)
    1ef4:	d8801f15 	stw	r2,124(sp)
    1ef8:	e0bff60e 	bge	fp,r2,1ed4 <___vfprintf_internal_r+0x1a08>
    1efc:	d9801e04 	addi	r6,sp,120
    1f00:	b80b883a 	mov	r5,r23
    1f04:	9809883a 	mov	r4,r19
    1f08:	0006fe40 	call	6fe4 <__sprint_r>
    1f0c:	103a711e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    1f10:	d8c02017 	ldw	r3,128(sp)
    1f14:	d8801f17 	ldw	r2,124(sp)
    1f18:	da000404 	addi	r8,sp,16
    1f1c:	003fee06 	br	1ed8 <___vfprintf_internal_r+0x1a0c>
    1f20:	00bfffc4 	movi	r2,-1
    1f24:	003a6f06 	br	8e4 <___vfprintf_internal_r+0x418>
    1f28:	008011c4 	movi	r2,71
    1f2c:	1440b816 	blt	r2,r17,2210 <___vfprintf_internal_r+0x1d44>
    1f30:	040000b4 	movhi	r16,2
    1f34:	84258f04 	addi	r16,r16,-27076
    1f38:	00c000c4 	movi	r3,3
    1f3c:	00bfdfc4 	movi	r2,-129
    1f40:	d8c02a15 	stw	r3,168(sp)
    1f44:	90a4703a 	and	r18,r18,r2
    1f48:	df002783 	ldbu	fp,158(sp)
    1f4c:	d8c02e15 	stw	r3,184(sp)
    1f50:	d8002915 	stw	zero,164(sp)
    1f54:	d8003215 	stw	zero,200(sp)
    1f58:	003b2906 	br	c00 <___vfprintf_internal_r+0x734>
    1f5c:	d9002d17 	ldw	r4,180(sp)
    1f60:	24c00017 	ldw	r19,0(r4)
    1f64:	21000104 	addi	r4,r4,4
    1f68:	d9002d15 	stw	r4,180(sp)
    1f6c:	982dd7fa 	srai	r22,r19,31
    1f70:	b005883a 	mov	r2,r22
    1f74:	003a9f06 	br	9f4 <___vfprintf_internal_r+0x528>
    1f78:	d9402d17 	ldw	r5,180(sp)
    1f7c:	d8c02f17 	ldw	r3,188(sp)
    1f80:	28800017 	ldw	r2,0(r5)
    1f84:	29400104 	addi	r5,r5,4
    1f88:	d9402d15 	stw	r5,180(sp)
    1f8c:	10c00015 	stw	r3,0(r2)
    1f90:	00398606 	br	5ac <___vfprintf_internal_r+0xe0>
    1f94:	d9402d17 	ldw	r5,180(sp)
    1f98:	002d883a 	mov	r22,zero
    1f9c:	2cc00017 	ldw	r19,0(r5)
    1fa0:	29400104 	addi	r5,r5,4
    1fa4:	d9402d15 	stw	r5,180(sp)
    1fa8:	003c2306 	br	1038 <___vfprintf_internal_r+0xb6c>
    1fac:	d8c02d17 	ldw	r3,180(sp)
    1fb0:	d9002917 	ldw	r4,164(sp)
    1fb4:	002d883a 	mov	r22,zero
    1fb8:	18800104 	addi	r2,r3,4
    1fbc:	1cc0000b 	ldhu	r19,0(r3)
    1fc0:	203dc10e 	bge	r4,zero,16c8 <___vfprintf_internal_r+0x11fc>
    1fc4:	003f7506 	br	1d9c <___vfprintf_internal_r+0x18d0>
    1fc8:	040000b4 	movhi	r16,2
    1fcc:	84258d04 	addi	r16,r16,-27084
    1fd0:	003acc06 	br	b04 <___vfprintf_internal_r+0x638>
    1fd4:	d9002c17 	ldw	r4,176(sp)
    1fd8:	d9801e04 	addi	r6,sp,120
    1fdc:	b80b883a 	mov	r5,r23
    1fe0:	0006fe40 	call	6fe4 <__sprint_r>
    1fe4:	103a3b1e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    1fe8:	dc402617 	ldw	r17,152(sp)
    1fec:	d8c02017 	ldw	r3,128(sp)
    1ff0:	da000404 	addi	r8,sp,16
    1ff4:	003f9c06 	br	1e68 <___vfprintf_internal_r+0x199c>
    1ff8:	ac400043 	ldbu	r17,1(r21)
    1ffc:	94800814 	ori	r18,r18,32
    2000:	ad400044 	addi	r21,r21,1
    2004:	8c403fcc 	andi	r17,r17,255
    2008:	8c40201c 	xori	r17,r17,128
    200c:	8c7fe004 	addi	r17,r17,-128
    2010:	00398f06 	br	650 <___vfprintf_internal_r+0x184>
    2014:	d8c02d15 	stw	r3,180(sp)
    2018:	0039883a 	mov	fp,zero
    201c:	003e3506 	br	18f4 <___vfprintf_internal_r+0x1428>
    2020:	d9002c17 	ldw	r4,176(sp)
    2024:	d9801e04 	addi	r6,sp,120
    2028:	b80b883a 	mov	r5,r23
    202c:	0006fe40 	call	6fe4 <__sprint_r>
    2030:	103a281e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    2034:	d8c02017 	ldw	r3,128(sp)
    2038:	da000404 	addi	r8,sp,16
    203c:	003cd006 	br	1380 <___vfprintf_internal_r+0xeb4>
    2040:	8009883a 	mov	r4,r16
    2044:	da003d15 	stw	r8,244(sp)
    2048:	0006e500 	call	6e50 <strlen>
    204c:	d8802e15 	stw	r2,184(sp)
    2050:	da003d17 	ldw	r8,244(sp)
    2054:	103c340e 	bge	r2,zero,1128 <___vfprintf_internal_r+0xc5c>
    2058:	0005883a 	mov	r2,zero
    205c:	003c3206 	br	1128 <___vfprintf_internal_r+0xc5c>
    2060:	d9002c17 	ldw	r4,176(sp)
    2064:	d9801e04 	addi	r6,sp,120
    2068:	b80b883a 	mov	r5,r23
    206c:	0006fe40 	call	6fe4 <__sprint_r>
    2070:	103a181e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    2074:	d8c02017 	ldw	r3,128(sp)
    2078:	d8801f17 	ldw	r2,124(sp)
    207c:	da000404 	addi	r8,sp,16
    2080:	d9403317 	ldw	r5,204(sp)
    2084:	10800044 	addi	r2,r2,1
    2088:	44000015 	stw	r16,0(r8)
    208c:	28c7883a 	add	r3,r5,r3
    2090:	003b7d06 	br	e88 <___vfprintf_internal_r+0x9bc>
    2094:	010000b4 	movhi	r4,2
    2098:	2125a184 	addi	r4,r4,-27002
    209c:	d9003515 	stw	r4,212(sp)
    20a0:	003b1406 	br	cf4 <___vfprintf_internal_r+0x828>
    20a4:	013fffc4 	movi	r4,-1
    20a8:	003a3506 	br	980 <___vfprintf_internal_r+0x4b4>
    20ac:	0023883a 	mov	r17,zero
    20b0:	003d9d06 	br	1728 <___vfprintf_internal_r+0x125c>
    20b4:	d9002c17 	ldw	r4,176(sp)
    20b8:	d9801e04 	addi	r6,sp,120
    20bc:	b80b883a 	mov	r5,r23
    20c0:	0006fe40 	call	6fe4 <__sprint_r>
    20c4:	103a031e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    20c8:	d8c02017 	ldw	r3,128(sp)
    20cc:	da000404 	addi	r8,sp,16
    20d0:	003d9406 	br	1724 <___vfprintf_internal_r+0x1258>
    20d4:	010000b4 	movhi	r4,2
    20d8:	21259d84 	addi	r4,r4,-27018
    20dc:	d9002b15 	stw	r4,172(sp)
    20e0:	d9002b17 	ldw	r4,172(sp)
    20e4:	1c47883a 	add	r3,r3,r17
    20e8:	10800044 	addi	r2,r2,1
    20ec:	41000015 	stw	r4,0(r8)
    20f0:	44400115 	stw	r17,4(r8)
    20f4:	d8c02015 	stw	r3,128(sp)
    20f8:	d8801f15 	stw	r2,124(sp)
    20fc:	010001c4 	movi	r4,7
    2100:	20bfd716 	blt	r4,r2,2060 <___vfprintf_internal_r+0x1b94>
    2104:	42000204 	addi	r8,r8,8
    2108:	003fdd06 	br	2080 <___vfprintf_internal_r+0x1bb4>
    210c:	d9002c17 	ldw	r4,176(sp)
    2110:	d9801e04 	addi	r6,sp,120
    2114:	b80b883a 	mov	r5,r23
    2118:	0006fe40 	call	6fe4 <__sprint_r>
    211c:	1039ed1e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    2120:	d8802617 	ldw	r2,152(sp)
    2124:	d8c02017 	ldw	r3,128(sp)
    2128:	da000404 	addi	r8,sp,16
    212c:	003e1006 	br	1970 <___vfprintf_internal_r+0x14a4>
    2130:	00800044 	movi	r2,1
    2134:	10803fcc 	andi	r2,r2,255
    2138:	00c00044 	movi	r3,1
    213c:	10fa3526 	beq	r2,r3,a14 <___vfprintf_internal_r+0x548>
    2140:	00c00084 	movi	r3,2
    2144:	10fbcb26 	beq	r2,r3,1074 <___vfprintf_internal_r+0xba8>
    2148:	003a8f06 	br	b88 <___vfprintf_internal_r+0x6bc>
    214c:	010000b4 	movhi	r4,2
    2150:	2125a184 	addi	r4,r4,-27002
    2154:	d9003515 	stw	r4,212(sp)
    2158:	003b7606 	br	f34 <___vfprintf_internal_r+0xa68>
    215c:	d8802917 	ldw	r2,164(sp)
    2160:	00c00184 	movi	r3,6
    2164:	1880012e 	bgeu	r3,r2,216c <___vfprintf_internal_r+0x1ca0>
    2168:	1805883a 	mov	r2,r3
    216c:	d8802e15 	stw	r2,184(sp)
    2170:	1000ef16 	blt	r2,zero,2530 <___vfprintf_internal_r+0x2064>
    2174:	040000b4 	movhi	r16,2
    2178:	d8802a15 	stw	r2,168(sp)
    217c:	dcc02d15 	stw	r19,180(sp)
    2180:	d8002915 	stw	zero,164(sp)
    2184:	d8003215 	stw	zero,200(sp)
    2188:	84259b04 	addi	r16,r16,-27028
    218c:	0039883a 	mov	fp,zero
    2190:	003aa206 	br	c1c <___vfprintf_internal_r+0x750>
    2194:	0021883a 	mov	r16,zero
    2198:	003e0706 	br	19b8 <___vfprintf_internal_r+0x14ec>
    219c:	d9002c17 	ldw	r4,176(sp)
    21a0:	d9801e04 	addi	r6,sp,120
    21a4:	b80b883a 	mov	r5,r23
    21a8:	0006fe40 	call	6fe4 <__sprint_r>
    21ac:	1039c91e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    21b0:	d8802617 	ldw	r2,152(sp)
    21b4:	d9403317 	ldw	r5,204(sp)
    21b8:	d8c02017 	ldw	r3,128(sp)
    21bc:	da000404 	addi	r8,sp,16
    21c0:	2885c83a 	sub	r2,r5,r2
    21c4:	003dfb06 	br	19b4 <___vfprintf_internal_r+0x14e8>
    21c8:	9080004c 	andi	r2,r18,1
    21cc:	103e8f1e 	bne	r2,zero,1c0c <___vfprintf_internal_r+0x1740>
    21d0:	d8802117 	ldw	r2,132(sp)
    21d4:	003e9e06 	br	1c50 <___vfprintf_internal_r+0x1784>
    21d8:	1025883a 	mov	r18,r2
    21dc:	0039883a 	mov	fp,zero
    21e0:	00800084 	movi	r2,2
    21e4:	003fd306 	br	2134 <___vfprintf_internal_r+0x1c68>
    21e8:	07000b44 	movi	fp,45
    21ec:	df002785 	stb	fp,158(sp)
    21f0:	003a4006 	br	af4 <___vfprintf_internal_r+0x628>
    21f4:	00c00b44 	movi	r3,45
    21f8:	d8c02785 	stb	r3,158(sp)
    21fc:	d8802a15 	stw	r2,168(sp)
    2200:	dc802b17 	ldw	r18,172(sp)
    2204:	d8002915 	stw	zero,164(sp)
    2208:	07000b44 	movi	fp,45
    220c:	003a8006 	br	c10 <___vfprintf_internal_r+0x744>
    2210:	040000b4 	movhi	r16,2
    2214:	84259004 	addi	r16,r16,-27072
    2218:	003f4706 	br	1f38 <___vfprintf_internal_r+0x1a6c>
    221c:	d8c02d17 	ldw	r3,180(sp)
    2220:	d9002f17 	ldw	r4,188(sp)
    2224:	18800017 	ldw	r2,0(r3)
    2228:	18c00104 	addi	r3,r3,4
    222c:	d8c02d15 	stw	r3,180(sp)
    2230:	11000015 	stw	r4,0(r2)
    2234:	0038dd06 	br	5ac <___vfprintf_internal_r+0xe0>
    2238:	dd802617 	ldw	r22,152(sp)
    223c:	00bfff44 	movi	r2,-3
    2240:	b0801c16 	blt	r22,r2,22b4 <___vfprintf_internal_r+0x1de8>
    2244:	d9402917 	ldw	r5,164(sp)
    2248:	2d801a16 	blt	r5,r22,22b4 <___vfprintf_internal_r+0x1de8>
    224c:	dd803215 	stw	r22,200(sp)
    2250:	003e8906 	br	1c78 <___vfprintf_internal_r+0x17ac>
    2254:	010000b4 	movhi	r4,2
    2258:	21259d84 	addi	r4,r4,-27018
    225c:	d9002b15 	stw	r4,172(sp)
    2260:	003c9106 	br	14a8 <___vfprintf_internal_r+0xfdc>
    2264:	e005883a 	mov	r2,fp
    2268:	003e7906 	br	1c50 <___vfprintf_internal_r+0x1784>
    226c:	d9402917 	ldw	r5,164(sp)
    2270:	df002783 	ldbu	fp,158(sp)
    2274:	dcc02d15 	stw	r19,180(sp)
    2278:	d9402a15 	stw	r5,168(sp)
    227c:	d9402e15 	stw	r5,184(sp)
    2280:	d8002915 	stw	zero,164(sp)
    2284:	d8003215 	stw	zero,200(sp)
    2288:	003a5d06 	br	c00 <___vfprintf_internal_r+0x734>
    228c:	9080004c 	andi	r2,r18,1
    2290:	0039883a 	mov	fp,zero
    2294:	10000426 	beq	r2,zero,22a8 <___vfprintf_internal_r+0x1ddc>
    2298:	00800c04 	movi	r2,48
    229c:	dc001dc4 	addi	r16,sp,119
    22a0:	d8801dc5 	stb	r2,119(sp)
    22a4:	003b8006 	br	10a8 <___vfprintf_internal_r+0xbdc>
    22a8:	d8002e15 	stw	zero,184(sp)
    22ac:	dc001e04 	addi	r16,sp,120
    22b0:	003a4d06 	br	be8 <___vfprintf_internal_r+0x71c>
    22b4:	8c7fff84 	addi	r17,r17,-2
    22b8:	b5bfffc4 	addi	r22,r22,-1
    22bc:	dd802615 	stw	r22,152(sp)
    22c0:	dc4022c5 	stb	r17,139(sp)
    22c4:	b000bf16 	blt	r22,zero,25c4 <___vfprintf_internal_r+0x20f8>
    22c8:	00800ac4 	movi	r2,43
    22cc:	d8802305 	stb	r2,140(sp)
    22d0:	00800244 	movi	r2,9
    22d4:	15807016 	blt	r2,r22,2498 <___vfprintf_internal_r+0x1fcc>
    22d8:	00800c04 	movi	r2,48
    22dc:	b5800c04 	addi	r22,r22,48
    22e0:	d8802345 	stb	r2,141(sp)
    22e4:	dd802385 	stb	r22,142(sp)
    22e8:	d88023c4 	addi	r2,sp,143
    22ec:	df0022c4 	addi	fp,sp,139
    22f0:	d8c03317 	ldw	r3,204(sp)
    22f4:	1739c83a 	sub	fp,r2,fp
    22f8:	d9003317 	ldw	r4,204(sp)
    22fc:	e0c7883a 	add	r3,fp,r3
    2300:	df003a15 	stw	fp,232(sp)
    2304:	d8c02e15 	stw	r3,184(sp)
    2308:	00800044 	movi	r2,1
    230c:	1100b30e 	bge	r2,r4,25dc <___vfprintf_internal_r+0x2110>
    2310:	d8c02e17 	ldw	r3,184(sp)
    2314:	18c00044 	addi	r3,r3,1
    2318:	d8c02e15 	stw	r3,184(sp)
    231c:	1805883a 	mov	r2,r3
    2320:	1800ac16 	blt	r3,zero,25d4 <___vfprintf_internal_r+0x2108>
    2324:	d8003215 	stw	zero,200(sp)
    2328:	003e5d06 	br	1ca0 <___vfprintf_internal_r+0x17d4>
    232c:	d9002c17 	ldw	r4,176(sp)
    2330:	d9801e04 	addi	r6,sp,120
    2334:	b80b883a 	mov	r5,r23
    2338:	0006fe40 	call	6fe4 <__sprint_r>
    233c:	1039651e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
    2340:	dc402617 	ldw	r17,152(sp)
    2344:	d8c02017 	ldw	r3,128(sp)
    2348:	d8801f17 	ldw	r2,124(sp)
    234c:	da000404 	addi	r8,sp,16
    2350:	003ed606 	br	1eac <___vfprintf_internal_r+0x19e0>
    2354:	582b883a 	mov	r21,r11
    2358:	d8002915 	stw	zero,164(sp)
    235c:	0038bd06 	br	654 <___vfprintf_internal_r+0x188>
    2360:	d8802917 	ldw	r2,164(sp)
    2364:	103e071e 	bne	r2,zero,1b84 <___vfprintf_internal_r+0x16b8>
    2368:	dc002915 	stw	r16,164(sp)
    236c:	003e0506 	br	1b84 <___vfprintf_internal_r+0x16b8>
    2370:	d9002917 	ldw	r4,164(sp)
    2374:	20c00044 	addi	r3,r4,1
    2378:	003e0f06 	br	1bb8 <___vfprintf_internal_r+0x16ec>
    237c:	01400184 	movi	r5,6
    2380:	d9402915 	stw	r5,164(sp)
    2384:	003dff06 	br	1b84 <___vfprintf_internal_r+0x16b8>
    2388:	d8802104 	addi	r2,sp,132
    238c:	d8800315 	stw	r2,12(sp)
    2390:	d8802504 	addi	r2,sp,148
    2394:	d8800215 	stw	r2,8(sp)
    2398:	d8802604 	addi	r2,sp,152
    239c:	d8800115 	stw	r2,4(sp)
    23a0:	d8802917 	ldw	r2,164(sp)
    23a4:	d9403617 	ldw	r5,216(sp)
    23a8:	d9002c17 	ldw	r4,176(sp)
    23ac:	d8800015 	stw	r2,0(sp)
    23b0:	01c000c4 	movi	r7,3
    23b4:	980d883a 	mov	r6,r19
    23b8:	da003d15 	stw	r8,244(sp)
    23bc:	0002af00 	call	2af0 <_dtoa_r>
    23c0:	d8c02917 	ldw	r3,164(sp)
    23c4:	da003d17 	ldw	r8,244(sp)
    23c8:	1021883a 	mov	r16,r2
    23cc:	10f9883a 	add	fp,r2,r3
    23d0:	81000007 	ldb	r4,0(r16)
    23d4:	00800c04 	movi	r2,48
    23d8:	20805e26 	beq	r4,r2,2554 <___vfprintf_internal_r+0x2088>
    23dc:	d8c02617 	ldw	r3,152(sp)
    23e0:	e0f9883a 	add	fp,fp,r3
    23e4:	003e0a06 	br	1c10 <___vfprintf_internal_r+0x1744>
    23e8:	00c00b44 	movi	r3,45
    23ec:	24e0003c 	xorhi	r19,r4,32768
    23f0:	d8c02a05 	stb	r3,168(sp)
    23f4:	003de906 	br	1b9c <___vfprintf_internal_r+0x16d0>
    23f8:	d8c03217 	ldw	r3,200(sp)
    23fc:	00c07a0e 	bge	zero,r3,25e8 <___vfprintf_internal_r+0x211c>
    2400:	00800044 	movi	r2,1
    2404:	d9003317 	ldw	r4,204(sp)
    2408:	1105883a 	add	r2,r2,r4
    240c:	d8802e15 	stw	r2,184(sp)
    2410:	10004e16 	blt	r2,zero,254c <___vfprintf_internal_r+0x2080>
    2414:	044019c4 	movi	r17,103
    2418:	003e2106 	br	1ca0 <___vfprintf_internal_r+0x17d4>
    241c:	d9002917 	ldw	r4,164(sp)
    2420:	d8802104 	addi	r2,sp,132
    2424:	d8800315 	stw	r2,12(sp)
    2428:	d9000015 	stw	r4,0(sp)
    242c:	d8802504 	addi	r2,sp,148
    2430:	d9403617 	ldw	r5,216(sp)
    2434:	d9002c17 	ldw	r4,176(sp)
    2438:	d8800215 	stw	r2,8(sp)
    243c:	d8802604 	addi	r2,sp,152
    2440:	d8800115 	stw	r2,4(sp)
    2444:	01c000c4 	movi	r7,3
    2448:	980d883a 	mov	r6,r19
    244c:	da003d15 	stw	r8,244(sp)
    2450:	0002af00 	call	2af0 <_dtoa_r>
    2454:	d8c02917 	ldw	r3,164(sp)
    2458:	da003d17 	ldw	r8,244(sp)
    245c:	1021883a 	mov	r16,r2
    2460:	00801184 	movi	r2,70
    2464:	80f9883a 	add	fp,r16,r3
    2468:	88bfd926 	beq	r17,r2,23d0 <___vfprintf_internal_r+0x1f04>
    246c:	003de806 	br	1c10 <___vfprintf_internal_r+0x1744>
    2470:	d9002917 	ldw	r4,164(sp)
    2474:	00c04d0e 	bge	zero,r3,25ac <___vfprintf_internal_r+0x20e0>
    2478:	2000441e 	bne	r4,zero,258c <___vfprintf_internal_r+0x20c0>
    247c:	9480004c 	andi	r18,r18,1
    2480:	9000421e 	bne	r18,zero,258c <___vfprintf_internal_r+0x20c0>
    2484:	1805883a 	mov	r2,r3
    2488:	18007016 	blt	r3,zero,264c <___vfprintf_internal_r+0x2180>
    248c:	d8c03217 	ldw	r3,200(sp)
    2490:	d8c02e15 	stw	r3,184(sp)
    2494:	003e0206 	br	1ca0 <___vfprintf_internal_r+0x17d4>
    2498:	df0022c4 	addi	fp,sp,139
    249c:	dc002915 	stw	r16,164(sp)
    24a0:	4027883a 	mov	r19,r8
    24a4:	e021883a 	mov	r16,fp
    24a8:	b009883a 	mov	r4,r22
    24ac:	01400284 	movi	r5,10
    24b0:	000a5140 	call	a514 <__modsi3>
    24b4:	10800c04 	addi	r2,r2,48
    24b8:	843fffc4 	addi	r16,r16,-1
    24bc:	b009883a 	mov	r4,r22
    24c0:	01400284 	movi	r5,10
    24c4:	80800005 	stb	r2,0(r16)
    24c8:	000a4900 	call	a490 <__divsi3>
    24cc:	102d883a 	mov	r22,r2
    24d0:	00800244 	movi	r2,9
    24d4:	15bff416 	blt	r2,r22,24a8 <___vfprintf_internal_r+0x1fdc>
    24d8:	9811883a 	mov	r8,r19
    24dc:	b0800c04 	addi	r2,r22,48
    24e0:	8027883a 	mov	r19,r16
    24e4:	997fffc4 	addi	r5,r19,-1
    24e8:	98bfffc5 	stb	r2,-1(r19)
    24ec:	dc002917 	ldw	r16,164(sp)
    24f0:	2f006a2e 	bgeu	r5,fp,269c <___vfprintf_internal_r+0x21d0>
    24f4:	d9c02384 	addi	r7,sp,142
    24f8:	3ccfc83a 	sub	r7,r7,r19
    24fc:	d9002344 	addi	r4,sp,141
    2500:	e1cf883a 	add	r7,fp,r7
    2504:	00000106 	br	250c <___vfprintf_internal_r+0x2040>
    2508:	28800003 	ldbu	r2,0(r5)
    250c:	20800005 	stb	r2,0(r4)
    2510:	21000044 	addi	r4,r4,1
    2514:	29400044 	addi	r5,r5,1
    2518:	393ffb1e 	bne	r7,r4,2508 <___vfprintf_internal_r+0x203c>
    251c:	d8802304 	addi	r2,sp,140
    2520:	14c5c83a 	sub	r2,r2,r19
    2524:	d8c02344 	addi	r3,sp,141
    2528:	1885883a 	add	r2,r3,r2
    252c:	003f7006 	br	22f0 <___vfprintf_internal_r+0x1e24>
    2530:	0005883a 	mov	r2,zero
    2534:	003f0f06 	br	2174 <___vfprintf_internal_r+0x1ca8>
    2538:	d8c03217 	ldw	r3,200(sp)
    253c:	18c00044 	addi	r3,r3,1
    2540:	d8c02e15 	stw	r3,184(sp)
    2544:	1805883a 	mov	r2,r3
    2548:	183fb20e 	bge	r3,zero,2414 <___vfprintf_internal_r+0x1f48>
    254c:	0005883a 	mov	r2,zero
    2550:	003fb006 	br	2414 <___vfprintf_internal_r+0x1f48>
    2554:	d9003617 	ldw	r4,216(sp)
    2558:	000d883a 	mov	r6,zero
    255c:	000f883a 	mov	r7,zero
    2560:	980b883a 	mov	r5,r19
    2564:	d8c03c15 	stw	r3,240(sp)
    2568:	da003d15 	stw	r8,244(sp)
    256c:	000b7d80 	call	b7d8 <__eqdf2>
    2570:	d8c03c17 	ldw	r3,240(sp)
    2574:	da003d17 	ldw	r8,244(sp)
    2578:	103f9826 	beq	r2,zero,23dc <___vfprintf_internal_r+0x1f10>
    257c:	00800044 	movi	r2,1
    2580:	10c7c83a 	sub	r3,r2,r3
    2584:	d8c02615 	stw	r3,152(sp)
    2588:	003f9506 	br	23e0 <___vfprintf_internal_r+0x1f14>
    258c:	d9002917 	ldw	r4,164(sp)
    2590:	d8c03217 	ldw	r3,200(sp)
    2594:	20800044 	addi	r2,r4,1
    2598:	1885883a 	add	r2,r3,r2
    259c:	d8802e15 	stw	r2,184(sp)
    25a0:	103dbf0e 	bge	r2,zero,1ca0 <___vfprintf_internal_r+0x17d4>
    25a4:	0005883a 	mov	r2,zero
    25a8:	003dbd06 	br	1ca0 <___vfprintf_internal_r+0x17d4>
    25ac:	2000211e 	bne	r4,zero,2634 <___vfprintf_internal_r+0x2168>
    25b0:	9480004c 	andi	r18,r18,1
    25b4:	90001f1e 	bne	r18,zero,2634 <___vfprintf_internal_r+0x2168>
    25b8:	00800044 	movi	r2,1
    25bc:	d8802e15 	stw	r2,184(sp)
    25c0:	003db706 	br	1ca0 <___vfprintf_internal_r+0x17d4>
    25c4:	00800b44 	movi	r2,45
    25c8:	05adc83a 	sub	r22,zero,r22
    25cc:	d8802305 	stb	r2,140(sp)
    25d0:	003f3f06 	br	22d0 <___vfprintf_internal_r+0x1e04>
    25d4:	0005883a 	mov	r2,zero
    25d8:	003f5206 	br	2324 <___vfprintf_internal_r+0x1e58>
    25dc:	90a4703a 	and	r18,r18,r2
    25e0:	903f4e26 	beq	r18,zero,231c <___vfprintf_internal_r+0x1e50>
    25e4:	003f4a06 	br	2310 <___vfprintf_internal_r+0x1e44>
    25e8:	00800084 	movi	r2,2
    25ec:	10c5c83a 	sub	r2,r2,r3
    25f0:	003f8406 	br	2404 <___vfprintf_internal_r+0x1f38>
    25f4:	d8802d17 	ldw	r2,180(sp)
    25f8:	d9002d17 	ldw	r4,180(sp)
    25fc:	ac400043 	ldbu	r17,1(r21)
    2600:	10800017 	ldw	r2,0(r2)
    2604:	582b883a 	mov	r21,r11
    2608:	d8802915 	stw	r2,164(sp)
    260c:	20800104 	addi	r2,r4,4
    2610:	d9002917 	ldw	r4,164(sp)
    2614:	d8802d15 	stw	r2,180(sp)
    2618:	203e7a0e 	bge	r4,zero,2004 <___vfprintf_internal_r+0x1b38>
    261c:	8c403fcc 	andi	r17,r17,255
    2620:	00bfffc4 	movi	r2,-1
    2624:	8c40201c 	xori	r17,r17,128
    2628:	d8802915 	stw	r2,164(sp)
    262c:	8c7fe004 	addi	r17,r17,-128
    2630:	00380706 	br	650 <___vfprintf_internal_r+0x184>
    2634:	d8c02917 	ldw	r3,164(sp)
    2638:	18c00084 	addi	r3,r3,2
    263c:	d8c02e15 	stw	r3,184(sp)
    2640:	1805883a 	mov	r2,r3
    2644:	183d960e 	bge	r3,zero,1ca0 <___vfprintf_internal_r+0x17d4>
    2648:	003fd606 	br	25a4 <___vfprintf_internal_r+0x20d8>
    264c:	0005883a 	mov	r2,zero
    2650:	003f8e06 	br	248c <___vfprintf_internal_r+0x1fc0>
    2654:	9080004c 	andi	r2,r18,1
    2658:	103f811e 	bne	r2,zero,2460 <___vfprintf_internal_r+0x1f94>
    265c:	d8802117 	ldw	r2,132(sp)
    2660:	1405c83a 	sub	r2,r2,r16
    2664:	d8803315 	stw	r2,204(sp)
    2668:	b47ef326 	beq	r22,r17,2238 <___vfprintf_internal_r+0x1d6c>
    266c:	dd802617 	ldw	r22,152(sp)
    2670:	003f1106 	br	22b8 <___vfprintf_internal_r+0x1dec>
    2674:	d9c02785 	stb	r7,158(sp)
    2678:	00390406 	br	a8c <___vfprintf_internal_r+0x5c0>
    267c:	d9c02785 	stb	r7,158(sp)
    2680:	0038d306 	br	9d0 <___vfprintf_internal_r+0x504>
    2684:	d9c02785 	stb	r7,158(sp)
    2688:	003a6106 	br	1010 <___vfprintf_internal_r+0xb44>
    268c:	d9c02785 	stb	r7,158(sp)
    2690:	003af806 	br	1274 <___vfprintf_internal_r+0xda8>
    2694:	0005883a 	mov	r2,zero
    2698:	003d7e06 	br	1c94 <___vfprintf_internal_r+0x17c8>
    269c:	d8802344 	addi	r2,sp,141
    26a0:	003f1306 	br	22f0 <___vfprintf_internal_r+0x1e24>
    26a4:	d9c02785 	stb	r7,158(sp)
    26a8:	00392306 	br	b38 <___vfprintf_internal_r+0x66c>
    26ac:	d9c02785 	stb	r7,158(sp)
    26b0:	003aa906 	br	1158 <___vfprintf_internal_r+0xc8c>
    26b4:	d9c02785 	stb	r7,158(sp)
    26b8:	003a3d06 	br	fb0 <___vfprintf_internal_r+0xae4>
    26bc:	d9c02785 	stb	r7,158(sp)
    26c0:	003aca06 	br	11ec <___vfprintf_internal_r+0xd20>

000026c4 <__vfprintf_internal>:
    26c4:	008000b4 	movhi	r2,2
    26c8:	10ae6604 	addi	r2,r2,-18024
    26cc:	300f883a 	mov	r7,r6
    26d0:	280d883a 	mov	r6,r5
    26d4:	200b883a 	mov	r5,r4
    26d8:	11000017 	ldw	r4,0(r2)
    26dc:	00004cc1 	jmpi	4cc <___vfprintf_internal_r>

000026e0 <__sbprintf>:
    26e0:	2880030b 	ldhu	r2,12(r5)
    26e4:	2ac01917 	ldw	r11,100(r5)
    26e8:	2a80038b 	ldhu	r10,14(r5)
    26ec:	2a400717 	ldw	r9,28(r5)
    26f0:	2a000917 	ldw	r8,36(r5)
    26f4:	defee204 	addi	sp,sp,-1144
    26f8:	00c10004 	movi	r3,1024
    26fc:	dc011a15 	stw	r16,1128(sp)
    2700:	10bfff4c 	andi	r2,r2,65533
    2704:	2821883a 	mov	r16,r5
    2708:	d8cb883a 	add	r5,sp,r3
    270c:	dc811c15 	stw	r18,1136(sp)
    2710:	dc411b15 	stw	r17,1132(sp)
    2714:	dfc11d15 	stw	ra,1140(sp)
    2718:	2025883a 	mov	r18,r4
    271c:	d881030d 	sth	r2,1036(sp)
    2720:	dac11915 	stw	r11,1124(sp)
    2724:	da81038d 	sth	r10,1038(sp)
    2728:	da410715 	stw	r9,1052(sp)
    272c:	da010915 	stw	r8,1060(sp)
    2730:	dec10015 	stw	sp,1024(sp)
    2734:	dec10415 	stw	sp,1040(sp)
    2738:	d8c10215 	stw	r3,1032(sp)
    273c:	d8c10515 	stw	r3,1044(sp)
    2740:	d8010615 	stw	zero,1048(sp)
    2744:	00004cc0 	call	4cc <___vfprintf_internal_r>
    2748:	1023883a 	mov	r17,r2
    274c:	10000416 	blt	r2,zero,2760 <__sbprintf+0x80>
    2750:	d9410004 	addi	r5,sp,1024
    2754:	9009883a 	mov	r4,r18
    2758:	00043940 	call	4394 <_fflush_r>
    275c:	10000d1e 	bne	r2,zero,2794 <__sbprintf+0xb4>
    2760:	d881030b 	ldhu	r2,1036(sp)
    2764:	1080100c 	andi	r2,r2,64
    2768:	10000326 	beq	r2,zero,2778 <__sbprintf+0x98>
    276c:	8080030b 	ldhu	r2,12(r16)
    2770:	10801014 	ori	r2,r2,64
    2774:	8080030d 	sth	r2,12(r16)
    2778:	8805883a 	mov	r2,r17
    277c:	dfc11d17 	ldw	ra,1140(sp)
    2780:	dc811c17 	ldw	r18,1136(sp)
    2784:	dc411b17 	ldw	r17,1132(sp)
    2788:	dc011a17 	ldw	r16,1128(sp)
    278c:	dec11e04 	addi	sp,sp,1144
    2790:	f800283a 	ret
    2794:	047fffc4 	movi	r17,-1
    2798:	003ff106 	br	2760 <__sbprintf+0x80>

0000279c <__swsetup_r>:
    279c:	008000b4 	movhi	r2,2
    27a0:	defffd04 	addi	sp,sp,-12
    27a4:	10ae6604 	addi	r2,r2,-18024
    27a8:	dc400115 	stw	r17,4(sp)
    27ac:	2023883a 	mov	r17,r4
    27b0:	11000017 	ldw	r4,0(r2)
    27b4:	dc000015 	stw	r16,0(sp)
    27b8:	dfc00215 	stw	ra,8(sp)
    27bc:	2821883a 	mov	r16,r5
    27c0:	20000226 	beq	r4,zero,27cc <__swsetup_r+0x30>
    27c4:	20800e17 	ldw	r2,56(r4)
    27c8:	10003126 	beq	r2,zero,2890 <__swsetup_r+0xf4>
    27cc:	8080030b 	ldhu	r2,12(r16)
    27d0:	10c0020c 	andi	r3,r2,8
    27d4:	1009883a 	mov	r4,r2
    27d8:	18000f26 	beq	r3,zero,2818 <__swsetup_r+0x7c>
    27dc:	80c00417 	ldw	r3,16(r16)
    27e0:	18001526 	beq	r3,zero,2838 <__swsetup_r+0x9c>
    27e4:	1100004c 	andi	r4,r2,1
    27e8:	20001c1e 	bne	r4,zero,285c <__swsetup_r+0xc0>
    27ec:	1080008c 	andi	r2,r2,2
    27f0:	1000291e 	bne	r2,zero,2898 <__swsetup_r+0xfc>
    27f4:	80800517 	ldw	r2,20(r16)
    27f8:	80800215 	stw	r2,8(r16)
    27fc:	18001c26 	beq	r3,zero,2870 <__swsetup_r+0xd4>
    2800:	0005883a 	mov	r2,zero
    2804:	dfc00217 	ldw	ra,8(sp)
    2808:	dc400117 	ldw	r17,4(sp)
    280c:	dc000017 	ldw	r16,0(sp)
    2810:	dec00304 	addi	sp,sp,12
    2814:	f800283a 	ret
    2818:	2080040c 	andi	r2,r4,16
    281c:	10002e26 	beq	r2,zero,28d8 <__swsetup_r+0x13c>
    2820:	2080010c 	andi	r2,r4,4
    2824:	10001e1e 	bne	r2,zero,28a0 <__swsetup_r+0x104>
    2828:	80c00417 	ldw	r3,16(r16)
    282c:	20800214 	ori	r2,r4,8
    2830:	8080030d 	sth	r2,12(r16)
    2834:	183feb1e 	bne	r3,zero,27e4 <__swsetup_r+0x48>
    2838:	1100a00c 	andi	r4,r2,640
    283c:	01408004 	movi	r5,512
    2840:	217fe826 	beq	r4,r5,27e4 <__swsetup_r+0x48>
    2844:	800b883a 	mov	r5,r16
    2848:	8809883a 	mov	r4,r17
    284c:	0004e580 	call	4e58 <__smakebuf_r>
    2850:	8080030b 	ldhu	r2,12(r16)
    2854:	80c00417 	ldw	r3,16(r16)
    2858:	003fe206 	br	27e4 <__swsetup_r+0x48>
    285c:	80800517 	ldw	r2,20(r16)
    2860:	80000215 	stw	zero,8(r16)
    2864:	0085c83a 	sub	r2,zero,r2
    2868:	80800615 	stw	r2,24(r16)
    286c:	183fe41e 	bne	r3,zero,2800 <__swsetup_r+0x64>
    2870:	80c0030b 	ldhu	r3,12(r16)
    2874:	0005883a 	mov	r2,zero
    2878:	1900200c 	andi	r4,r3,128
    287c:	203fe126 	beq	r4,zero,2804 <__swsetup_r+0x68>
    2880:	18c01014 	ori	r3,r3,64
    2884:	80c0030d 	sth	r3,12(r16)
    2888:	00bfffc4 	movi	r2,-1
    288c:	003fdd06 	br	2804 <__swsetup_r+0x68>
    2890:	00047700 	call	4770 <__sinit>
    2894:	003fcd06 	br	27cc <__swsetup_r+0x30>
    2898:	0005883a 	mov	r2,zero
    289c:	003fd606 	br	27f8 <__swsetup_r+0x5c>
    28a0:	81400c17 	ldw	r5,48(r16)
    28a4:	28000626 	beq	r5,zero,28c0 <__swsetup_r+0x124>
    28a8:	80801004 	addi	r2,r16,64
    28ac:	28800326 	beq	r5,r2,28bc <__swsetup_r+0x120>
    28b0:	8809883a 	mov	r4,r17
    28b4:	00048e40 	call	48e4 <_free_r>
    28b8:	8100030b 	ldhu	r4,12(r16)
    28bc:	80000c15 	stw	zero,48(r16)
    28c0:	80c00417 	ldw	r3,16(r16)
    28c4:	00bff6c4 	movi	r2,-37
    28c8:	1108703a 	and	r4,r2,r4
    28cc:	80000115 	stw	zero,4(r16)
    28d0:	80c00015 	stw	r3,0(r16)
    28d4:	003fd506 	br	282c <__swsetup_r+0x90>
    28d8:	00800244 	movi	r2,9
    28dc:	88800015 	stw	r2,0(r17)
    28e0:	20801014 	ori	r2,r4,64
    28e4:	8080030d 	sth	r2,12(r16)
    28e8:	00bfffc4 	movi	r2,-1
    28ec:	003fc506 	br	2804 <__swsetup_r+0x68>

000028f0 <quorem>:
    28f0:	defff704 	addi	sp,sp,-36
    28f4:	dc800215 	stw	r18,8(sp)
    28f8:	20800417 	ldw	r2,16(r4)
    28fc:	2c800417 	ldw	r18,16(r5)
    2900:	dfc00815 	stw	ra,32(sp)
    2904:	ddc00715 	stw	r23,28(sp)
    2908:	dd800615 	stw	r22,24(sp)
    290c:	dd400515 	stw	r21,20(sp)
    2910:	dd000415 	stw	r20,16(sp)
    2914:	dcc00315 	stw	r19,12(sp)
    2918:	dc400115 	stw	r17,4(sp)
    291c:	dc000015 	stw	r16,0(sp)
    2920:	14807116 	blt	r2,r18,2ae8 <quorem+0x1f8>
    2924:	94bfffc4 	addi	r18,r18,-1
    2928:	94ad883a 	add	r22,r18,r18
    292c:	b5ad883a 	add	r22,r22,r22
    2930:	2c400504 	addi	r17,r5,20
    2934:	8da9883a 	add	r20,r17,r22
    2938:	25400504 	addi	r21,r4,20
    293c:	282f883a 	mov	r23,r5
    2940:	adad883a 	add	r22,r21,r22
    2944:	a1400017 	ldw	r5,0(r20)
    2948:	2021883a 	mov	r16,r4
    294c:	b1000017 	ldw	r4,0(r22)
    2950:	29400044 	addi	r5,r5,1
    2954:	000a5880 	call	a588 <__udivsi3>
    2958:	1027883a 	mov	r19,r2
    295c:	10002c26 	beq	r2,zero,2a10 <quorem+0x120>
    2960:	a813883a 	mov	r9,r21
    2964:	880b883a 	mov	r5,r17
    2968:	0009883a 	mov	r4,zero
    296c:	000d883a 	mov	r6,zero
    2970:	2a000017 	ldw	r8,0(r5)
    2974:	49c00017 	ldw	r7,0(r9)
    2978:	29400104 	addi	r5,r5,4
    297c:	40bfffcc 	andi	r2,r8,65535
    2980:	14c5383a 	mul	r2,r2,r19
    2984:	4010d43a 	srli	r8,r8,16
    2988:	38ffffcc 	andi	r3,r7,65535
    298c:	1105883a 	add	r2,r2,r4
    2990:	1008d43a 	srli	r4,r2,16
    2994:	44d1383a 	mul	r8,r8,r19
    2998:	198d883a 	add	r6,r3,r6
    299c:	10ffffcc 	andi	r3,r2,65535
    29a0:	30c7c83a 	sub	r3,r6,r3
    29a4:	380ed43a 	srli	r7,r7,16
    29a8:	4105883a 	add	r2,r8,r4
    29ac:	180dd43a 	srai	r6,r3,16
    29b0:	113fffcc 	andi	r4,r2,65535
    29b4:	390fc83a 	sub	r7,r7,r4
    29b8:	398d883a 	add	r6,r7,r6
    29bc:	300e943a 	slli	r7,r6,16
    29c0:	18ffffcc 	andi	r3,r3,65535
    29c4:	1008d43a 	srli	r4,r2,16
    29c8:	38ceb03a 	or	r7,r7,r3
    29cc:	49c00015 	stw	r7,0(r9)
    29d0:	300dd43a 	srai	r6,r6,16
    29d4:	4a400104 	addi	r9,r9,4
    29d8:	a17fe52e 	bgeu	r20,r5,2970 <quorem+0x80>
    29dc:	b0800017 	ldw	r2,0(r22)
    29e0:	10000b1e 	bne	r2,zero,2a10 <quorem+0x120>
    29e4:	b0bfff04 	addi	r2,r22,-4
    29e8:	a880082e 	bgeu	r21,r2,2a0c <quorem+0x11c>
    29ec:	b0ffff17 	ldw	r3,-4(r22)
    29f0:	18000326 	beq	r3,zero,2a00 <quorem+0x110>
    29f4:	00000506 	br	2a0c <quorem+0x11c>
    29f8:	10c00017 	ldw	r3,0(r2)
    29fc:	1800031e 	bne	r3,zero,2a0c <quorem+0x11c>
    2a00:	10bfff04 	addi	r2,r2,-4
    2a04:	94bfffc4 	addi	r18,r18,-1
    2a08:	a8bffb36 	bltu	r21,r2,29f8 <quorem+0x108>
    2a0c:	84800415 	stw	r18,16(r16)
    2a10:	b80b883a 	mov	r5,r23
    2a14:	8009883a 	mov	r4,r16
    2a18:	000643c0 	call	643c <__mcmp>
    2a1c:	10002616 	blt	r2,zero,2ab8 <quorem+0x1c8>
    2a20:	9cc00044 	addi	r19,r19,1
    2a24:	a805883a 	mov	r2,r21
    2a28:	000b883a 	mov	r5,zero
    2a2c:	11000017 	ldw	r4,0(r2)
    2a30:	89800017 	ldw	r6,0(r17)
    2a34:	10800104 	addi	r2,r2,4
    2a38:	20ffffcc 	andi	r3,r4,65535
    2a3c:	194b883a 	add	r5,r3,r5
    2a40:	30ffffcc 	andi	r3,r6,65535
    2a44:	28c7c83a 	sub	r3,r5,r3
    2a48:	300cd43a 	srli	r6,r6,16
    2a4c:	2008d43a 	srli	r4,r4,16
    2a50:	180bd43a 	srai	r5,r3,16
    2a54:	18ffffcc 	andi	r3,r3,65535
    2a58:	2189c83a 	sub	r4,r4,r6
    2a5c:	2149883a 	add	r4,r4,r5
    2a60:	200c943a 	slli	r6,r4,16
    2a64:	8c400104 	addi	r17,r17,4
    2a68:	200bd43a 	srai	r5,r4,16
    2a6c:	30c6b03a 	or	r3,r6,r3
    2a70:	10ffff15 	stw	r3,-4(r2)
    2a74:	a47fed2e 	bgeu	r20,r17,2a2c <quorem+0x13c>
    2a78:	9485883a 	add	r2,r18,r18
    2a7c:	1085883a 	add	r2,r2,r2
    2a80:	a887883a 	add	r3,r21,r2
    2a84:	18800017 	ldw	r2,0(r3)
    2a88:	10000b1e 	bne	r2,zero,2ab8 <quorem+0x1c8>
    2a8c:	18bfff04 	addi	r2,r3,-4
    2a90:	a880082e 	bgeu	r21,r2,2ab4 <quorem+0x1c4>
    2a94:	18ffff17 	ldw	r3,-4(r3)
    2a98:	18000326 	beq	r3,zero,2aa8 <quorem+0x1b8>
    2a9c:	00000506 	br	2ab4 <quorem+0x1c4>
    2aa0:	10c00017 	ldw	r3,0(r2)
    2aa4:	1800031e 	bne	r3,zero,2ab4 <quorem+0x1c4>
    2aa8:	10bfff04 	addi	r2,r2,-4
    2aac:	94bfffc4 	addi	r18,r18,-1
    2ab0:	a8bffb36 	bltu	r21,r2,2aa0 <quorem+0x1b0>
    2ab4:	84800415 	stw	r18,16(r16)
    2ab8:	9805883a 	mov	r2,r19
    2abc:	dfc00817 	ldw	ra,32(sp)
    2ac0:	ddc00717 	ldw	r23,28(sp)
    2ac4:	dd800617 	ldw	r22,24(sp)
    2ac8:	dd400517 	ldw	r21,20(sp)
    2acc:	dd000417 	ldw	r20,16(sp)
    2ad0:	dcc00317 	ldw	r19,12(sp)
    2ad4:	dc800217 	ldw	r18,8(sp)
    2ad8:	dc400117 	ldw	r17,4(sp)
    2adc:	dc000017 	ldw	r16,0(sp)
    2ae0:	dec00904 	addi	sp,sp,36
    2ae4:	f800283a 	ret
    2ae8:	0005883a 	mov	r2,zero
    2aec:	003ff306 	br	2abc <quorem+0x1cc>

00002af0 <_dtoa_r>:
    2af0:	20801017 	ldw	r2,64(r4)
    2af4:	deffde04 	addi	sp,sp,-136
    2af8:	df002015 	stw	fp,128(sp)
    2afc:	dcc01b15 	stw	r19,108(sp)
    2b00:	dc801a15 	stw	r18,104(sp)
    2b04:	dc401915 	stw	r17,100(sp)
    2b08:	dc001815 	stw	r16,96(sp)
    2b0c:	dfc02115 	stw	ra,132(sp)
    2b10:	ddc01f15 	stw	r23,124(sp)
    2b14:	dd801e15 	stw	r22,120(sp)
    2b18:	dd401d15 	stw	r21,116(sp)
    2b1c:	dd001c15 	stw	r20,112(sp)
    2b20:	d9c00315 	stw	r7,12(sp)
    2b24:	2039883a 	mov	fp,r4
    2b28:	3023883a 	mov	r17,r6
    2b2c:	2825883a 	mov	r18,r5
    2b30:	dc002417 	ldw	r16,144(sp)
    2b34:	3027883a 	mov	r19,r6
    2b38:	10000826 	beq	r2,zero,2b5c <_dtoa_r+0x6c>
    2b3c:	21801117 	ldw	r6,68(r4)
    2b40:	00c00044 	movi	r3,1
    2b44:	100b883a 	mov	r5,r2
    2b48:	1986983a 	sll	r3,r3,r6
    2b4c:	11800115 	stw	r6,4(r2)
    2b50:	10c00215 	stw	r3,8(r2)
    2b54:	0005c1c0 	call	5c1c <_Bfree>
    2b58:	e0001015 	stw	zero,64(fp)
    2b5c:	88002e16 	blt	r17,zero,2c18 <_dtoa_r+0x128>
    2b60:	80000015 	stw	zero,0(r16)
    2b64:	889ffc2c 	andhi	r2,r17,32752
    2b68:	00dffc34 	movhi	r3,32752
    2b6c:	10c01c26 	beq	r2,r3,2be0 <_dtoa_r+0xf0>
    2b70:	000d883a 	mov	r6,zero
    2b74:	000f883a 	mov	r7,zero
    2b78:	9009883a 	mov	r4,r18
    2b7c:	980b883a 	mov	r5,r19
    2b80:	000b7d80 	call	b7d8 <__eqdf2>
    2b84:	10002b1e 	bne	r2,zero,2c34 <_dtoa_r+0x144>
    2b88:	d9c02317 	ldw	r7,140(sp)
    2b8c:	00800044 	movi	r2,1
    2b90:	38800015 	stw	r2,0(r7)
    2b94:	d8802517 	ldw	r2,148(sp)
    2b98:	10019e26 	beq	r2,zero,3214 <_dtoa_r+0x724>
    2b9c:	d8c02517 	ldw	r3,148(sp)
    2ba0:	008000b4 	movhi	r2,2
    2ba4:	10a59d44 	addi	r2,r2,-27019
    2ba8:	18800015 	stw	r2,0(r3)
    2bac:	10bfffc4 	addi	r2,r2,-1
    2bb0:	dfc02117 	ldw	ra,132(sp)
    2bb4:	df002017 	ldw	fp,128(sp)
    2bb8:	ddc01f17 	ldw	r23,124(sp)
    2bbc:	dd801e17 	ldw	r22,120(sp)
    2bc0:	dd401d17 	ldw	r21,116(sp)
    2bc4:	dd001c17 	ldw	r20,112(sp)
    2bc8:	dcc01b17 	ldw	r19,108(sp)
    2bcc:	dc801a17 	ldw	r18,104(sp)
    2bd0:	dc401917 	ldw	r17,100(sp)
    2bd4:	dc001817 	ldw	r16,96(sp)
    2bd8:	dec02204 	addi	sp,sp,136
    2bdc:	f800283a 	ret
    2be0:	d8c02317 	ldw	r3,140(sp)
    2be4:	0089c3c4 	movi	r2,9999
    2be8:	18800015 	stw	r2,0(r3)
    2bec:	90017726 	beq	r18,zero,31cc <_dtoa_r+0x6dc>
    2bf0:	008000b4 	movhi	r2,2
    2bf4:	10a5a904 	addi	r2,r2,-26972
    2bf8:	d9002517 	ldw	r4,148(sp)
    2bfc:	203fec26 	beq	r4,zero,2bb0 <_dtoa_r+0xc0>
    2c00:	10c000c7 	ldb	r3,3(r2)
    2c04:	1801781e 	bne	r3,zero,31e8 <_dtoa_r+0x6f8>
    2c08:	10c000c4 	addi	r3,r2,3
    2c0c:	d9802517 	ldw	r6,148(sp)
    2c10:	30c00015 	stw	r3,0(r6)
    2c14:	003fe606 	br	2bb0 <_dtoa_r+0xc0>
    2c18:	04e00034 	movhi	r19,32768
    2c1c:	9cffffc4 	addi	r19,r19,-1
    2c20:	00800044 	movi	r2,1
    2c24:	8ce6703a 	and	r19,r17,r19
    2c28:	80800015 	stw	r2,0(r16)
    2c2c:	9823883a 	mov	r17,r19
    2c30:	003fcc06 	br	2b64 <_dtoa_r+0x74>
    2c34:	d8800204 	addi	r2,sp,8
    2c38:	d8800015 	stw	r2,0(sp)
    2c3c:	d9c00104 	addi	r7,sp,4
    2c40:	900b883a 	mov	r5,r18
    2c44:	980d883a 	mov	r6,r19
    2c48:	e009883a 	mov	r4,fp
    2c4c:	8820d53a 	srli	r16,r17,20
    2c50:	00068080 	call	6808 <__d2b>
    2c54:	d8800915 	stw	r2,36(sp)
    2c58:	8001651e 	bne	r16,zero,31f0 <_dtoa_r+0x700>
    2c5c:	dd800217 	ldw	r22,8(sp)
    2c60:	dc000117 	ldw	r16,4(sp)
    2c64:	00800804 	movi	r2,32
    2c68:	b421883a 	add	r16,r22,r16
    2c6c:	80c10c84 	addi	r3,r16,1074
    2c70:	10c2d10e 	bge	r2,r3,37b8 <_dtoa_r+0xcc8>
    2c74:	00801004 	movi	r2,64
    2c78:	81010484 	addi	r4,r16,1042
    2c7c:	10c7c83a 	sub	r3,r2,r3
    2c80:	9108d83a 	srl	r4,r18,r4
    2c84:	88e2983a 	sll	r17,r17,r3
    2c88:	2448b03a 	or	r4,r4,r17
    2c8c:	000cba00 	call	cba0 <__floatunsidf>
    2c90:	017f8434 	movhi	r5,65040
    2c94:	01800044 	movi	r6,1
    2c98:	1009883a 	mov	r4,r2
    2c9c:	194b883a 	add	r5,r3,r5
    2ca0:	843fffc4 	addi	r16,r16,-1
    2ca4:	d9801115 	stw	r6,68(sp)
    2ca8:	000d883a 	mov	r6,zero
    2cac:	01cffe34 	movhi	r7,16376
    2cb0:	000c1480 	call	c148 <__subdf3>
    2cb4:	0198dbf4 	movhi	r6,25455
    2cb8:	01cff4f4 	movhi	r7,16339
    2cbc:	3190d844 	addi	r6,r6,17249
    2cc0:	39e1e9c4 	addi	r7,r7,-30809
    2cc4:	1009883a 	mov	r4,r2
    2cc8:	180b883a 	mov	r5,r3
    2ccc:	000ba300 	call	ba30 <__muldf3>
    2cd0:	01a2d874 	movhi	r6,35681
    2cd4:	01cff1f4 	movhi	r7,16327
    2cd8:	31b22cc4 	addi	r6,r6,-14157
    2cdc:	39e28a04 	addi	r7,r7,-30168
    2ce0:	180b883a 	mov	r5,r3
    2ce4:	1009883a 	mov	r4,r2
    2ce8:	000a6440 	call	a644 <__adddf3>
    2cec:	8009883a 	mov	r4,r16
    2cf0:	1029883a 	mov	r20,r2
    2cf4:	1823883a 	mov	r17,r3
    2cf8:	000cac40 	call	cac4 <__floatsidf>
    2cfc:	019427f4 	movhi	r6,20639
    2d00:	01cff4f4 	movhi	r7,16339
    2d04:	319e7ec4 	addi	r6,r6,31227
    2d08:	39d104c4 	addi	r7,r7,17427
    2d0c:	1009883a 	mov	r4,r2
    2d10:	180b883a 	mov	r5,r3
    2d14:	000ba300 	call	ba30 <__muldf3>
    2d18:	100d883a 	mov	r6,r2
    2d1c:	180f883a 	mov	r7,r3
    2d20:	a009883a 	mov	r4,r20
    2d24:	880b883a 	mov	r5,r17
    2d28:	000a6440 	call	a644 <__adddf3>
    2d2c:	1009883a 	mov	r4,r2
    2d30:	180b883a 	mov	r5,r3
    2d34:	1029883a 	mov	r20,r2
    2d38:	1823883a 	mov	r17,r3
    2d3c:	000ca440 	call	ca44 <__fixdfsi>
    2d40:	000d883a 	mov	r6,zero
    2d44:	000f883a 	mov	r7,zero
    2d48:	a009883a 	mov	r4,r20
    2d4c:	880b883a 	mov	r5,r17
    2d50:	d8800515 	stw	r2,20(sp)
    2d54:	000b93c0 	call	b93c <__ledf2>
    2d58:	10028716 	blt	r2,zero,3778 <_dtoa_r+0xc88>
    2d5c:	d8c00517 	ldw	r3,20(sp)
    2d60:	00800584 	movi	r2,22
    2d64:	10c27536 	bltu	r2,r3,373c <_dtoa_r+0xc4c>
    2d68:	180490fa 	slli	r2,r3,3
    2d6c:	00c000b4 	movhi	r3,2
    2d70:	18e5c504 	addi	r3,r3,-26860
    2d74:	1885883a 	add	r2,r3,r2
    2d78:	11000017 	ldw	r4,0(r2)
    2d7c:	11400117 	ldw	r5,4(r2)
    2d80:	900d883a 	mov	r6,r18
    2d84:	980f883a 	mov	r7,r19
    2d88:	000b8600 	call	b860 <__gedf2>
    2d8c:	00828d0e 	bge	zero,r2,37c4 <_dtoa_r+0xcd4>
    2d90:	d9000517 	ldw	r4,20(sp)
    2d94:	d8000e15 	stw	zero,56(sp)
    2d98:	213fffc4 	addi	r4,r4,-1
    2d9c:	d9000515 	stw	r4,20(sp)
    2da0:	b42dc83a 	sub	r22,r22,r16
    2da4:	b5bfffc4 	addi	r22,r22,-1
    2da8:	b0026f16 	blt	r22,zero,3768 <_dtoa_r+0xc78>
    2dac:	d8000815 	stw	zero,32(sp)
    2db0:	d9c00517 	ldw	r7,20(sp)
    2db4:	38026416 	blt	r7,zero,3748 <_dtoa_r+0xc58>
    2db8:	b1ed883a 	add	r22,r22,r7
    2dbc:	d9c00d15 	stw	r7,52(sp)
    2dc0:	d8000a15 	stw	zero,40(sp)
    2dc4:	d9800317 	ldw	r6,12(sp)
    2dc8:	00800244 	movi	r2,9
    2dcc:	11811436 	bltu	r2,r6,3220 <_dtoa_r+0x730>
    2dd0:	00800144 	movi	r2,5
    2dd4:	1184e10e 	bge	r2,r6,415c <_dtoa_r+0x166c>
    2dd8:	31bfff04 	addi	r6,r6,-4
    2ddc:	d9800315 	stw	r6,12(sp)
    2de0:	0023883a 	mov	r17,zero
    2de4:	d9800317 	ldw	r6,12(sp)
    2de8:	008000c4 	movi	r2,3
    2dec:	30836726 	beq	r6,r2,3b8c <_dtoa_r+0x109c>
    2df0:	1183410e 	bge	r2,r6,3af8 <_dtoa_r+0x1008>
    2df4:	d9c00317 	ldw	r7,12(sp)
    2df8:	00800104 	movi	r2,4
    2dfc:	38827c26 	beq	r7,r2,37f0 <_dtoa_r+0xd00>
    2e00:	00800144 	movi	r2,5
    2e04:	3884c41e 	bne	r7,r2,4118 <_dtoa_r+0x1628>
    2e08:	00800044 	movi	r2,1
    2e0c:	d8800b15 	stw	r2,44(sp)
    2e10:	d8c00517 	ldw	r3,20(sp)
    2e14:	d9002217 	ldw	r4,136(sp)
    2e18:	1907883a 	add	r3,r3,r4
    2e1c:	19800044 	addi	r6,r3,1
    2e20:	d8c00c15 	stw	r3,48(sp)
    2e24:	d9800615 	stw	r6,24(sp)
    2e28:	0183a40e 	bge	zero,r6,3cbc <_dtoa_r+0x11cc>
    2e2c:	d9800617 	ldw	r6,24(sp)
    2e30:	3021883a 	mov	r16,r6
    2e34:	e0001115 	stw	zero,68(fp)
    2e38:	008005c4 	movi	r2,23
    2e3c:	1184c92e 	bgeu	r2,r6,4164 <_dtoa_r+0x1674>
    2e40:	00c00044 	movi	r3,1
    2e44:	00800104 	movi	r2,4
    2e48:	1085883a 	add	r2,r2,r2
    2e4c:	11000504 	addi	r4,r2,20
    2e50:	180b883a 	mov	r5,r3
    2e54:	18c00044 	addi	r3,r3,1
    2e58:	313ffb2e 	bgeu	r6,r4,2e48 <_dtoa_r+0x358>
    2e5c:	e1401115 	stw	r5,68(fp)
    2e60:	e009883a 	mov	r4,fp
    2e64:	0005b740 	call	5b74 <_Balloc>
    2e68:	d8800715 	stw	r2,28(sp)
    2e6c:	e0801015 	stw	r2,64(fp)
    2e70:	00800384 	movi	r2,14
    2e74:	1400f736 	bltu	r2,r16,3254 <_dtoa_r+0x764>
    2e78:	8800f626 	beq	r17,zero,3254 <_dtoa_r+0x764>
    2e7c:	d9c00517 	ldw	r7,20(sp)
    2e80:	01c39a0e 	bge	zero,r7,3cec <_dtoa_r+0x11fc>
    2e84:	388003cc 	andi	r2,r7,15
    2e88:	100490fa 	slli	r2,r2,3
    2e8c:	382bd13a 	srai	r21,r7,4
    2e90:	00c000b4 	movhi	r3,2
    2e94:	18e5c504 	addi	r3,r3,-26860
    2e98:	1885883a 	add	r2,r3,r2
    2e9c:	a8c0040c 	andi	r3,r21,16
    2ea0:	12400017 	ldw	r9,0(r2)
    2ea4:	12000117 	ldw	r8,4(r2)
    2ea8:	18037926 	beq	r3,zero,3c90 <_dtoa_r+0x11a0>
    2eac:	008000b4 	movhi	r2,2
    2eb0:	10a5bb04 	addi	r2,r2,-26900
    2eb4:	11800817 	ldw	r6,32(r2)
    2eb8:	11c00917 	ldw	r7,36(r2)
    2ebc:	9009883a 	mov	r4,r18
    2ec0:	980b883a 	mov	r5,r19
    2ec4:	da001715 	stw	r8,92(sp)
    2ec8:	da401615 	stw	r9,88(sp)
    2ecc:	000aef00 	call	aef0 <__divdf3>
    2ed0:	da001717 	ldw	r8,92(sp)
    2ed4:	da401617 	ldw	r9,88(sp)
    2ed8:	ad4003cc 	andi	r21,r21,15
    2edc:	040000c4 	movi	r16,3
    2ee0:	1023883a 	mov	r17,r2
    2ee4:	1829883a 	mov	r20,r3
    2ee8:	a8001126 	beq	r21,zero,2f30 <_dtoa_r+0x440>
    2eec:	05c000b4 	movhi	r23,2
    2ef0:	bde5bb04 	addi	r23,r23,-26900
    2ef4:	4805883a 	mov	r2,r9
    2ef8:	4007883a 	mov	r3,r8
    2efc:	a980004c 	andi	r6,r21,1
    2f00:	1009883a 	mov	r4,r2
    2f04:	a82bd07a 	srai	r21,r21,1
    2f08:	180b883a 	mov	r5,r3
    2f0c:	30000426 	beq	r6,zero,2f20 <_dtoa_r+0x430>
    2f10:	b9800017 	ldw	r6,0(r23)
    2f14:	b9c00117 	ldw	r7,4(r23)
    2f18:	84000044 	addi	r16,r16,1
    2f1c:	000ba300 	call	ba30 <__muldf3>
    2f20:	bdc00204 	addi	r23,r23,8
    2f24:	a83ff51e 	bne	r21,zero,2efc <_dtoa_r+0x40c>
    2f28:	1013883a 	mov	r9,r2
    2f2c:	1811883a 	mov	r8,r3
    2f30:	480d883a 	mov	r6,r9
    2f34:	400f883a 	mov	r7,r8
    2f38:	8809883a 	mov	r4,r17
    2f3c:	a00b883a 	mov	r5,r20
    2f40:	000aef00 	call	aef0 <__divdf3>
    2f44:	d8800f15 	stw	r2,60(sp)
    2f48:	d8c01015 	stw	r3,64(sp)
    2f4c:	d8c00e17 	ldw	r3,56(sp)
    2f50:	18000626 	beq	r3,zero,2f6c <_dtoa_r+0x47c>
    2f54:	d9000f17 	ldw	r4,60(sp)
    2f58:	d9401017 	ldw	r5,64(sp)
    2f5c:	000d883a 	mov	r6,zero
    2f60:	01cffc34 	movhi	r7,16368
    2f64:	000b93c0 	call	b93c <__ledf2>
    2f68:	10040b16 	blt	r2,zero,3f98 <_dtoa_r+0x14a8>
    2f6c:	8009883a 	mov	r4,r16
    2f70:	000cac40 	call	cac4 <__floatsidf>
    2f74:	d9800f17 	ldw	r6,60(sp)
    2f78:	d9c01017 	ldw	r7,64(sp)
    2f7c:	1009883a 	mov	r4,r2
    2f80:	180b883a 	mov	r5,r3
    2f84:	000ba300 	call	ba30 <__muldf3>
    2f88:	000d883a 	mov	r6,zero
    2f8c:	01d00734 	movhi	r7,16412
    2f90:	1009883a 	mov	r4,r2
    2f94:	180b883a 	mov	r5,r3
    2f98:	000a6440 	call	a644 <__adddf3>
    2f9c:	1021883a 	mov	r16,r2
    2fa0:	d8800617 	ldw	r2,24(sp)
    2fa4:	047f3034 	movhi	r17,64704
    2fa8:	1c63883a 	add	r17,r3,r17
    2fac:	10031826 	beq	r2,zero,3c10 <_dtoa_r+0x1120>
    2fb0:	d8c00517 	ldw	r3,20(sp)
    2fb4:	db000617 	ldw	r12,24(sp)
    2fb8:	d8c01315 	stw	r3,76(sp)
    2fbc:	d9000b17 	ldw	r4,44(sp)
    2fc0:	20038f26 	beq	r4,zero,3e00 <_dtoa_r+0x1310>
    2fc4:	60bfffc4 	addi	r2,r12,-1
    2fc8:	100490fa 	slli	r2,r2,3
    2fcc:	00c000b4 	movhi	r3,2
    2fd0:	18e5c504 	addi	r3,r3,-26860
    2fd4:	1885883a 	add	r2,r3,r2
    2fd8:	11800017 	ldw	r6,0(r2)
    2fdc:	11c00117 	ldw	r7,4(r2)
    2fe0:	d8800717 	ldw	r2,28(sp)
    2fe4:	0009883a 	mov	r4,zero
    2fe8:	014ff834 	movhi	r5,16352
    2fec:	db001615 	stw	r12,88(sp)
    2ff0:	15c00044 	addi	r23,r2,1
    2ff4:	000aef00 	call	aef0 <__divdf3>
    2ff8:	800d883a 	mov	r6,r16
    2ffc:	880f883a 	mov	r7,r17
    3000:	1009883a 	mov	r4,r2
    3004:	180b883a 	mov	r5,r3
    3008:	000c1480 	call	c148 <__subdf3>
    300c:	d9401017 	ldw	r5,64(sp)
    3010:	d9000f17 	ldw	r4,60(sp)
    3014:	102b883a 	mov	r21,r2
    3018:	d8c01215 	stw	r3,72(sp)
    301c:	000ca440 	call	ca44 <__fixdfsi>
    3020:	1009883a 	mov	r4,r2
    3024:	1029883a 	mov	r20,r2
    3028:	000cac40 	call	cac4 <__floatsidf>
    302c:	d9000f17 	ldw	r4,60(sp)
    3030:	d9401017 	ldw	r5,64(sp)
    3034:	100d883a 	mov	r6,r2
    3038:	180f883a 	mov	r7,r3
    303c:	000c1480 	call	c148 <__subdf3>
    3040:	1823883a 	mov	r17,r3
    3044:	d8c00717 	ldw	r3,28(sp)
    3048:	d9401217 	ldw	r5,72(sp)
    304c:	a2000c04 	addi	r8,r20,48
    3050:	1021883a 	mov	r16,r2
    3054:	1a000005 	stb	r8,0(r3)
    3058:	800d883a 	mov	r6,r16
    305c:	880f883a 	mov	r7,r17
    3060:	a809883a 	mov	r4,r21
    3064:	4029883a 	mov	r20,r8
    3068:	000b8600 	call	b860 <__gedf2>
    306c:	00841d16 	blt	zero,r2,40e4 <_dtoa_r+0x15f4>
    3070:	800d883a 	mov	r6,r16
    3074:	880f883a 	mov	r7,r17
    3078:	0009883a 	mov	r4,zero
    307c:	014ffc34 	movhi	r5,16368
    3080:	000c1480 	call	c148 <__subdf3>
    3084:	d9401217 	ldw	r5,72(sp)
    3088:	100d883a 	mov	r6,r2
    308c:	180f883a 	mov	r7,r3
    3090:	a809883a 	mov	r4,r21
    3094:	000b8600 	call	b860 <__gedf2>
    3098:	db001617 	ldw	r12,88(sp)
    309c:	00840e16 	blt	zero,r2,40d8 <_dtoa_r+0x15e8>
    30a0:	00800044 	movi	r2,1
    30a4:	13006b0e 	bge	r2,r12,3254 <_dtoa_r+0x764>
    30a8:	d9000717 	ldw	r4,28(sp)
    30ac:	dd800f15 	stw	r22,60(sp)
    30b0:	dcc01015 	stw	r19,64(sp)
    30b4:	2319883a 	add	r12,r4,r12
    30b8:	dcc01217 	ldw	r19,72(sp)
    30bc:	602d883a 	mov	r22,r12
    30c0:	dc801215 	stw	r18,72(sp)
    30c4:	b825883a 	mov	r18,r23
    30c8:	00000906 	br	30f0 <_dtoa_r+0x600>
    30cc:	000c1480 	call	c148 <__subdf3>
    30d0:	a80d883a 	mov	r6,r21
    30d4:	980f883a 	mov	r7,r19
    30d8:	1009883a 	mov	r4,r2
    30dc:	180b883a 	mov	r5,r3
    30e0:	000b93c0 	call	b93c <__ledf2>
    30e4:	1003e816 	blt	r2,zero,4088 <_dtoa_r+0x1598>
    30e8:	b825883a 	mov	r18,r23
    30ec:	bd83e926 	beq	r23,r22,4094 <_dtoa_r+0x15a4>
    30f0:	a809883a 	mov	r4,r21
    30f4:	980b883a 	mov	r5,r19
    30f8:	000d883a 	mov	r6,zero
    30fc:	01d00934 	movhi	r7,16420
    3100:	000ba300 	call	ba30 <__muldf3>
    3104:	000d883a 	mov	r6,zero
    3108:	01d00934 	movhi	r7,16420
    310c:	8009883a 	mov	r4,r16
    3110:	880b883a 	mov	r5,r17
    3114:	102b883a 	mov	r21,r2
    3118:	1827883a 	mov	r19,r3
    311c:	000ba300 	call	ba30 <__muldf3>
    3120:	180b883a 	mov	r5,r3
    3124:	1009883a 	mov	r4,r2
    3128:	1821883a 	mov	r16,r3
    312c:	1023883a 	mov	r17,r2
    3130:	000ca440 	call	ca44 <__fixdfsi>
    3134:	1009883a 	mov	r4,r2
    3138:	1029883a 	mov	r20,r2
    313c:	000cac40 	call	cac4 <__floatsidf>
    3140:	8809883a 	mov	r4,r17
    3144:	800b883a 	mov	r5,r16
    3148:	100d883a 	mov	r6,r2
    314c:	180f883a 	mov	r7,r3
    3150:	000c1480 	call	c148 <__subdf3>
    3154:	a5000c04 	addi	r20,r20,48
    3158:	a80d883a 	mov	r6,r21
    315c:	980f883a 	mov	r7,r19
    3160:	1009883a 	mov	r4,r2
    3164:	180b883a 	mov	r5,r3
    3168:	95000005 	stb	r20,0(r18)
    316c:	1021883a 	mov	r16,r2
    3170:	1823883a 	mov	r17,r3
    3174:	000b93c0 	call	b93c <__ledf2>
    3178:	bdc00044 	addi	r23,r23,1
    317c:	800d883a 	mov	r6,r16
    3180:	880f883a 	mov	r7,r17
    3184:	0009883a 	mov	r4,zero
    3188:	014ffc34 	movhi	r5,16368
    318c:	103fcf0e 	bge	r2,zero,30cc <_dtoa_r+0x5dc>
    3190:	d8c01317 	ldw	r3,76(sp)
    3194:	d8c00515 	stw	r3,20(sp)
    3198:	d9400917 	ldw	r5,36(sp)
    319c:	e009883a 	mov	r4,fp
    31a0:	0005c1c0 	call	5c1c <_Bfree>
    31a4:	d9000517 	ldw	r4,20(sp)
    31a8:	d9802317 	ldw	r6,140(sp)
    31ac:	d9c02517 	ldw	r7,148(sp)
    31b0:	b8000005 	stb	zero,0(r23)
    31b4:	20800044 	addi	r2,r4,1
    31b8:	30800015 	stw	r2,0(r6)
    31bc:	3802aa26 	beq	r7,zero,3c68 <_dtoa_r+0x1178>
    31c0:	3dc00015 	stw	r23,0(r7)
    31c4:	d8800717 	ldw	r2,28(sp)
    31c8:	003e7906 	br	2bb0 <_dtoa_r+0xc0>
    31cc:	00800434 	movhi	r2,16
    31d0:	10bfffc4 	addi	r2,r2,-1
    31d4:	88a2703a 	and	r17,r17,r2
    31d8:	883e851e 	bne	r17,zero,2bf0 <_dtoa_r+0x100>
    31dc:	008000b4 	movhi	r2,2
    31e0:	10a5a604 	addi	r2,r2,-26984
    31e4:	003e8406 	br	2bf8 <_dtoa_r+0x108>
    31e8:	10c00204 	addi	r3,r2,8
    31ec:	003e8706 	br	2c0c <_dtoa_r+0x11c>
    31f0:	01400434 	movhi	r5,16
    31f4:	297fffc4 	addi	r5,r5,-1
    31f8:	994a703a 	and	r5,r19,r5
    31fc:	9009883a 	mov	r4,r18
    3200:	843f0044 	addi	r16,r16,-1023
    3204:	294ffc34 	orhi	r5,r5,16368
    3208:	dd800217 	ldw	r22,8(sp)
    320c:	d8001115 	stw	zero,68(sp)
    3210:	003ea506 	br	2ca8 <_dtoa_r+0x1b8>
    3214:	008000b4 	movhi	r2,2
    3218:	10a59d04 	addi	r2,r2,-27020
    321c:	003e6406 	br	2bb0 <_dtoa_r+0xc0>
    3220:	e0001115 	stw	zero,68(fp)
    3224:	000b883a 	mov	r5,zero
    3228:	e009883a 	mov	r4,fp
    322c:	0005b740 	call	5b74 <_Balloc>
    3230:	01bfffc4 	movi	r6,-1
    3234:	01c00044 	movi	r7,1
    3238:	d8800715 	stw	r2,28(sp)
    323c:	d9800c15 	stw	r6,48(sp)
    3240:	e0801015 	stw	r2,64(fp)
    3244:	d8000315 	stw	zero,12(sp)
    3248:	d9c00b15 	stw	r7,44(sp)
    324c:	d9800615 	stw	r6,24(sp)
    3250:	d8002215 	stw	zero,136(sp)
    3254:	d8800117 	ldw	r2,4(sp)
    3258:	10008916 	blt	r2,zero,3480 <_dtoa_r+0x990>
    325c:	d9000517 	ldw	r4,20(sp)
    3260:	00c00384 	movi	r3,14
    3264:	19008616 	blt	r3,r4,3480 <_dtoa_r+0x990>
    3268:	200490fa 	slli	r2,r4,3
    326c:	00c000b4 	movhi	r3,2
    3270:	d9802217 	ldw	r6,136(sp)
    3274:	18e5c504 	addi	r3,r3,-26860
    3278:	1885883a 	add	r2,r3,r2
    327c:	14000017 	ldw	r16,0(r2)
    3280:	14400117 	ldw	r17,4(r2)
    3284:	30016316 	blt	r6,zero,3814 <_dtoa_r+0xd24>
    3288:	800d883a 	mov	r6,r16
    328c:	880f883a 	mov	r7,r17
    3290:	9009883a 	mov	r4,r18
    3294:	980b883a 	mov	r5,r19
    3298:	000aef00 	call	aef0 <__divdf3>
    329c:	180b883a 	mov	r5,r3
    32a0:	1009883a 	mov	r4,r2
    32a4:	000ca440 	call	ca44 <__fixdfsi>
    32a8:	1009883a 	mov	r4,r2
    32ac:	102b883a 	mov	r21,r2
    32b0:	000cac40 	call	cac4 <__floatsidf>
    32b4:	800d883a 	mov	r6,r16
    32b8:	880f883a 	mov	r7,r17
    32bc:	1009883a 	mov	r4,r2
    32c0:	180b883a 	mov	r5,r3
    32c4:	000ba300 	call	ba30 <__muldf3>
    32c8:	100d883a 	mov	r6,r2
    32cc:	180f883a 	mov	r7,r3
    32d0:	9009883a 	mov	r4,r18
    32d4:	980b883a 	mov	r5,r19
    32d8:	000c1480 	call	c148 <__subdf3>
    32dc:	d9c00717 	ldw	r7,28(sp)
    32e0:	1009883a 	mov	r4,r2
    32e4:	a8800c04 	addi	r2,r21,48
    32e8:	38800005 	stb	r2,0(r7)
    32ec:	3dc00044 	addi	r23,r7,1
    32f0:	d9c00617 	ldw	r7,24(sp)
    32f4:	01800044 	movi	r6,1
    32f8:	180b883a 	mov	r5,r3
    32fc:	2005883a 	mov	r2,r4
    3300:	39803826 	beq	r7,r6,33e4 <_dtoa_r+0x8f4>
    3304:	000d883a 	mov	r6,zero
    3308:	01d00934 	movhi	r7,16420
    330c:	000ba300 	call	ba30 <__muldf3>
    3310:	000d883a 	mov	r6,zero
    3314:	000f883a 	mov	r7,zero
    3318:	1009883a 	mov	r4,r2
    331c:	180b883a 	mov	r5,r3
    3320:	1025883a 	mov	r18,r2
    3324:	1827883a 	mov	r19,r3
    3328:	000b7d80 	call	b7d8 <__eqdf2>
    332c:	103f9a26 	beq	r2,zero,3198 <_dtoa_r+0x6a8>
    3330:	d9c00617 	ldw	r7,24(sp)
    3334:	d8c00717 	ldw	r3,28(sp)
    3338:	b829883a 	mov	r20,r23
    333c:	38bfffc4 	addi	r2,r7,-1
    3340:	18ad883a 	add	r22,r3,r2
    3344:	00000a06 	br	3370 <_dtoa_r+0x880>
    3348:	000ba300 	call	ba30 <__muldf3>
    334c:	000d883a 	mov	r6,zero
    3350:	000f883a 	mov	r7,zero
    3354:	1009883a 	mov	r4,r2
    3358:	180b883a 	mov	r5,r3
    335c:	1025883a 	mov	r18,r2
    3360:	1827883a 	mov	r19,r3
    3364:	b829883a 	mov	r20,r23
    3368:	000b7d80 	call	b7d8 <__eqdf2>
    336c:	103f8a26 	beq	r2,zero,3198 <_dtoa_r+0x6a8>
    3370:	800d883a 	mov	r6,r16
    3374:	880f883a 	mov	r7,r17
    3378:	9009883a 	mov	r4,r18
    337c:	980b883a 	mov	r5,r19
    3380:	000aef00 	call	aef0 <__divdf3>
    3384:	180b883a 	mov	r5,r3
    3388:	1009883a 	mov	r4,r2
    338c:	000ca440 	call	ca44 <__fixdfsi>
    3390:	1009883a 	mov	r4,r2
    3394:	102b883a 	mov	r21,r2
    3398:	000cac40 	call	cac4 <__floatsidf>
    339c:	800d883a 	mov	r6,r16
    33a0:	880f883a 	mov	r7,r17
    33a4:	1009883a 	mov	r4,r2
    33a8:	180b883a 	mov	r5,r3
    33ac:	000ba300 	call	ba30 <__muldf3>
    33b0:	100d883a 	mov	r6,r2
    33b4:	180f883a 	mov	r7,r3
    33b8:	9009883a 	mov	r4,r18
    33bc:	980b883a 	mov	r5,r19
    33c0:	000c1480 	call	c148 <__subdf3>
    33c4:	aa000c04 	addi	r8,r21,48
    33c8:	a2000005 	stb	r8,0(r20)
    33cc:	000d883a 	mov	r6,zero
    33d0:	01d00934 	movhi	r7,16420
    33d4:	1009883a 	mov	r4,r2
    33d8:	180b883a 	mov	r5,r3
    33dc:	a5c00044 	addi	r23,r20,1
    33e0:	b53fd91e 	bne	r22,r20,3348 <_dtoa_r+0x858>
    33e4:	100d883a 	mov	r6,r2
    33e8:	180f883a 	mov	r7,r3
    33ec:	1009883a 	mov	r4,r2
    33f0:	180b883a 	mov	r5,r3
    33f4:	000a6440 	call	a644 <__adddf3>
    33f8:	100d883a 	mov	r6,r2
    33fc:	180f883a 	mov	r7,r3
    3400:	8009883a 	mov	r4,r16
    3404:	880b883a 	mov	r5,r17
    3408:	1027883a 	mov	r19,r2
    340c:	1825883a 	mov	r18,r3
    3410:	000b93c0 	call	b93c <__ledf2>
    3414:	10000816 	blt	r2,zero,3438 <_dtoa_r+0x948>
    3418:	980d883a 	mov	r6,r19
    341c:	900f883a 	mov	r7,r18
    3420:	8009883a 	mov	r4,r16
    3424:	880b883a 	mov	r5,r17
    3428:	000b7d80 	call	b7d8 <__eqdf2>
    342c:	103f5a1e 	bne	r2,zero,3198 <_dtoa_r+0x6a8>
    3430:	ad40004c 	andi	r21,r21,1
    3434:	a83f5826 	beq	r21,zero,3198 <_dtoa_r+0x6a8>
    3438:	bd3fffc3 	ldbu	r20,-1(r23)
    343c:	b8bfffc4 	addi	r2,r23,-1
    3440:	1007883a 	mov	r3,r2
    3444:	01400e44 	movi	r5,57
    3448:	d9800717 	ldw	r6,28(sp)
    344c:	00000506 	br	3464 <_dtoa_r+0x974>
    3450:	18ffffc4 	addi	r3,r3,-1
    3454:	11824726 	beq	r2,r6,3d74 <_dtoa_r+0x1284>
    3458:	1d000003 	ldbu	r20,0(r3)
    345c:	102f883a 	mov	r23,r2
    3460:	10bfffc4 	addi	r2,r2,-1
    3464:	a1003fcc 	andi	r4,r20,255
    3468:	2100201c 	xori	r4,r4,128
    346c:	213fe004 	addi	r4,r4,-128
    3470:	217ff726 	beq	r4,r5,3450 <_dtoa_r+0x960>
    3474:	a2000044 	addi	r8,r20,1
    3478:	12000005 	stb	r8,0(r2)
    347c:	003f4606 	br	3198 <_dtoa_r+0x6a8>
    3480:	d9000b17 	ldw	r4,44(sp)
    3484:	2000c826 	beq	r4,zero,37a8 <_dtoa_r+0xcb8>
    3488:	d9800317 	ldw	r6,12(sp)
    348c:	00c00044 	movi	r3,1
    3490:	1980f90e 	bge	r3,r6,3878 <_dtoa_r+0xd88>
    3494:	d8800617 	ldw	r2,24(sp)
    3498:	d8c00a17 	ldw	r3,40(sp)
    349c:	157fffc4 	addi	r21,r2,-1
    34a0:	1d41f316 	blt	r3,r21,3c70 <_dtoa_r+0x1180>
    34a4:	1d6bc83a 	sub	r21,r3,r21
    34a8:	d9c00617 	ldw	r7,24(sp)
    34ac:	3802aa16 	blt	r7,zero,3f58 <_dtoa_r+0x1468>
    34b0:	dd000817 	ldw	r20,32(sp)
    34b4:	d8800617 	ldw	r2,24(sp)
    34b8:	d8c00817 	ldw	r3,32(sp)
    34bc:	01400044 	movi	r5,1
    34c0:	e009883a 	mov	r4,fp
    34c4:	1887883a 	add	r3,r3,r2
    34c8:	d8c00815 	stw	r3,32(sp)
    34cc:	b0ad883a 	add	r22,r22,r2
    34d0:	0005f800 	call	5f80 <__i2b>
    34d4:	1023883a 	mov	r17,r2
    34d8:	a0000826 	beq	r20,zero,34fc <_dtoa_r+0xa0c>
    34dc:	0580070e 	bge	zero,r22,34fc <_dtoa_r+0xa0c>
    34e0:	a005883a 	mov	r2,r20
    34e4:	b500b916 	blt	r22,r20,37cc <_dtoa_r+0xcdc>
    34e8:	d9000817 	ldw	r4,32(sp)
    34ec:	a0a9c83a 	sub	r20,r20,r2
    34f0:	b0adc83a 	sub	r22,r22,r2
    34f4:	2089c83a 	sub	r4,r4,r2
    34f8:	d9000815 	stw	r4,32(sp)
    34fc:	d9800a17 	ldw	r6,40(sp)
    3500:	0181810e 	bge	zero,r6,3b08 <_dtoa_r+0x1018>
    3504:	d9c00b17 	ldw	r7,44(sp)
    3508:	3800b326 	beq	r7,zero,37d8 <_dtoa_r+0xce8>
    350c:	a800b226 	beq	r21,zero,37d8 <_dtoa_r+0xce8>
    3510:	880b883a 	mov	r5,r17
    3514:	a80d883a 	mov	r6,r21
    3518:	e009883a 	mov	r4,fp
    351c:	00061b40 	call	61b4 <__pow5mult>
    3520:	d9800917 	ldw	r6,36(sp)
    3524:	100b883a 	mov	r5,r2
    3528:	e009883a 	mov	r4,fp
    352c:	1023883a 	mov	r17,r2
    3530:	0005fbc0 	call	5fbc <__multiply>
    3534:	1021883a 	mov	r16,r2
    3538:	d8800a17 	ldw	r2,40(sp)
    353c:	d9400917 	ldw	r5,36(sp)
    3540:	e009883a 	mov	r4,fp
    3544:	1545c83a 	sub	r2,r2,r21
    3548:	d8800a15 	stw	r2,40(sp)
    354c:	0005c1c0 	call	5c1c <_Bfree>
    3550:	d8c00a17 	ldw	r3,40(sp)
    3554:	18009f1e 	bne	r3,zero,37d4 <_dtoa_r+0xce4>
    3558:	05c00044 	movi	r23,1
    355c:	e009883a 	mov	r4,fp
    3560:	b80b883a 	mov	r5,r23
    3564:	0005f800 	call	5f80 <__i2b>
    3568:	d9000d17 	ldw	r4,52(sp)
    356c:	102b883a 	mov	r21,r2
    3570:	2000ce26 	beq	r4,zero,38ac <_dtoa_r+0xdbc>
    3574:	200d883a 	mov	r6,r4
    3578:	100b883a 	mov	r5,r2
    357c:	e009883a 	mov	r4,fp
    3580:	00061b40 	call	61b4 <__pow5mult>
    3584:	d9800317 	ldw	r6,12(sp)
    3588:	102b883a 	mov	r21,r2
    358c:	b981810e 	bge	r23,r6,3b94 <_dtoa_r+0x10a4>
    3590:	0027883a 	mov	r19,zero
    3594:	a8800417 	ldw	r2,16(r21)
    3598:	05c00804 	movi	r23,32
    359c:	10800104 	addi	r2,r2,4
    35a0:	1085883a 	add	r2,r2,r2
    35a4:	1085883a 	add	r2,r2,r2
    35a8:	a885883a 	add	r2,r21,r2
    35ac:	11000017 	ldw	r4,0(r2)
    35b0:	0005e680 	call	5e68 <__hi0bits>
    35b4:	b885c83a 	sub	r2,r23,r2
    35b8:	1585883a 	add	r2,r2,r22
    35bc:	108007cc 	andi	r2,r2,31
    35c0:	1000b326 	beq	r2,zero,3890 <_dtoa_r+0xda0>
    35c4:	00c00804 	movi	r3,32
    35c8:	1887c83a 	sub	r3,r3,r2
    35cc:	01000104 	movi	r4,4
    35d0:	20c2cd0e 	bge	r4,r3,4108 <_dtoa_r+0x1618>
    35d4:	00c00704 	movi	r3,28
    35d8:	1885c83a 	sub	r2,r3,r2
    35dc:	d8c00817 	ldw	r3,32(sp)
    35e0:	a0a9883a 	add	r20,r20,r2
    35e4:	b0ad883a 	add	r22,r22,r2
    35e8:	1887883a 	add	r3,r3,r2
    35ec:	d8c00815 	stw	r3,32(sp)
    35f0:	d9800817 	ldw	r6,32(sp)
    35f4:	0180040e 	bge	zero,r6,3608 <_dtoa_r+0xb18>
    35f8:	800b883a 	mov	r5,r16
    35fc:	e009883a 	mov	r4,fp
    3600:	00062f40 	call	62f4 <__lshift>
    3604:	1021883a 	mov	r16,r2
    3608:	0580050e 	bge	zero,r22,3620 <_dtoa_r+0xb30>
    360c:	a80b883a 	mov	r5,r21
    3610:	b00d883a 	mov	r6,r22
    3614:	e009883a 	mov	r4,fp
    3618:	00062f40 	call	62f4 <__lshift>
    361c:	102b883a 	mov	r21,r2
    3620:	d9c00e17 	ldw	r7,56(sp)
    3624:	3801211e 	bne	r7,zero,3aac <_dtoa_r+0xfbc>
    3628:	d9800617 	ldw	r6,24(sp)
    362c:	0181380e 	bge	zero,r6,3b10 <_dtoa_r+0x1020>
    3630:	d8c00b17 	ldw	r3,44(sp)
    3634:	1800ab1e 	bne	r3,zero,38e4 <_dtoa_r+0xdf4>
    3638:	dc800717 	ldw	r18,28(sp)
    363c:	dcc00617 	ldw	r19,24(sp)
    3640:	9029883a 	mov	r20,r18
    3644:	00000206 	br	3650 <_dtoa_r+0xb60>
    3648:	0005c440 	call	5c44 <__multadd>
    364c:	1021883a 	mov	r16,r2
    3650:	a80b883a 	mov	r5,r21
    3654:	8009883a 	mov	r4,r16
    3658:	00028f00 	call	28f0 <quorem>
    365c:	10800c04 	addi	r2,r2,48
    3660:	90800005 	stb	r2,0(r18)
    3664:	94800044 	addi	r18,r18,1
    3668:	9507c83a 	sub	r3,r18,r20
    366c:	000f883a 	mov	r7,zero
    3670:	01800284 	movi	r6,10
    3674:	800b883a 	mov	r5,r16
    3678:	e009883a 	mov	r4,fp
    367c:	1cfff216 	blt	r3,r19,3648 <_dtoa_r+0xb58>
    3680:	1011883a 	mov	r8,r2
    3684:	d8800617 	ldw	r2,24(sp)
    3688:	0082370e 	bge	zero,r2,3f68 <_dtoa_r+0x1478>
    368c:	d9000717 	ldw	r4,28(sp)
    3690:	0025883a 	mov	r18,zero
    3694:	20af883a 	add	r23,r4,r2
    3698:	01800044 	movi	r6,1
    369c:	800b883a 	mov	r5,r16
    36a0:	e009883a 	mov	r4,fp
    36a4:	da001715 	stw	r8,92(sp)
    36a8:	00062f40 	call	62f4 <__lshift>
    36ac:	a80b883a 	mov	r5,r21
    36b0:	1009883a 	mov	r4,r2
    36b4:	d8800915 	stw	r2,36(sp)
    36b8:	000643c0 	call	643c <__mcmp>
    36bc:	da001717 	ldw	r8,92(sp)
    36c0:	0081800e 	bge	zero,r2,3cc4 <_dtoa_r+0x11d4>
    36c4:	b93fffc3 	ldbu	r4,-1(r23)
    36c8:	b8bfffc4 	addi	r2,r23,-1
    36cc:	1007883a 	mov	r3,r2
    36d0:	01800e44 	movi	r6,57
    36d4:	d9c00717 	ldw	r7,28(sp)
    36d8:	00000506 	br	36f0 <_dtoa_r+0xc00>
    36dc:	18ffffc4 	addi	r3,r3,-1
    36e0:	11c12326 	beq	r2,r7,3b70 <_dtoa_r+0x1080>
    36e4:	19000003 	ldbu	r4,0(r3)
    36e8:	102f883a 	mov	r23,r2
    36ec:	10bfffc4 	addi	r2,r2,-1
    36f0:	21403fcc 	andi	r5,r4,255
    36f4:	2940201c 	xori	r5,r5,128
    36f8:	297fe004 	addi	r5,r5,-128
    36fc:	29bff726 	beq	r5,r6,36dc <_dtoa_r+0xbec>
    3700:	21000044 	addi	r4,r4,1
    3704:	11000005 	stb	r4,0(r2)
    3708:	a80b883a 	mov	r5,r21
    370c:	e009883a 	mov	r4,fp
    3710:	0005c1c0 	call	5c1c <_Bfree>
    3714:	883ea026 	beq	r17,zero,3198 <_dtoa_r+0x6a8>
    3718:	90000426 	beq	r18,zero,372c <_dtoa_r+0xc3c>
    371c:	94400326 	beq	r18,r17,372c <_dtoa_r+0xc3c>
    3720:	900b883a 	mov	r5,r18
    3724:	e009883a 	mov	r4,fp
    3728:	0005c1c0 	call	5c1c <_Bfree>
    372c:	880b883a 	mov	r5,r17
    3730:	e009883a 	mov	r4,fp
    3734:	0005c1c0 	call	5c1c <_Bfree>
    3738:	003e9706 	br	3198 <_dtoa_r+0x6a8>
    373c:	01800044 	movi	r6,1
    3740:	d9800e15 	stw	r6,56(sp)
    3744:	003d9606 	br	2da0 <_dtoa_r+0x2b0>
    3748:	d8800817 	ldw	r2,32(sp)
    374c:	d8c00517 	ldw	r3,20(sp)
    3750:	d8000d15 	stw	zero,52(sp)
    3754:	10c5c83a 	sub	r2,r2,r3
    3758:	00c9c83a 	sub	r4,zero,r3
    375c:	d8800815 	stw	r2,32(sp)
    3760:	d9000a15 	stw	r4,40(sp)
    3764:	003d9706 	br	2dc4 <_dtoa_r+0x2d4>
    3768:	05adc83a 	sub	r22,zero,r22
    376c:	dd800815 	stw	r22,32(sp)
    3770:	002d883a 	mov	r22,zero
    3774:	003d8e06 	br	2db0 <_dtoa_r+0x2c0>
    3778:	d9000517 	ldw	r4,20(sp)
    377c:	000cac40 	call	cac4 <__floatsidf>
    3780:	100d883a 	mov	r6,r2
    3784:	180f883a 	mov	r7,r3
    3788:	a009883a 	mov	r4,r20
    378c:	880b883a 	mov	r5,r17
    3790:	000b7d80 	call	b7d8 <__eqdf2>
    3794:	103d7126 	beq	r2,zero,2d5c <_dtoa_r+0x26c>
    3798:	d9c00517 	ldw	r7,20(sp)
    379c:	39ffffc4 	addi	r7,r7,-1
    37a0:	d9c00515 	stw	r7,20(sp)
    37a4:	003d6d06 	br	2d5c <_dtoa_r+0x26c>
    37a8:	dd400a17 	ldw	r21,40(sp)
    37ac:	dd000817 	ldw	r20,32(sp)
    37b0:	0023883a 	mov	r17,zero
    37b4:	003f4806 	br	34d8 <_dtoa_r+0x9e8>
    37b8:	10e3c83a 	sub	r17,r2,r3
    37bc:	9448983a 	sll	r4,r18,r17
    37c0:	003d3206 	br	2c8c <_dtoa_r+0x19c>
    37c4:	d8000e15 	stw	zero,56(sp)
    37c8:	003d7506 	br	2da0 <_dtoa_r+0x2b0>
    37cc:	b005883a 	mov	r2,r22
    37d0:	003f4506 	br	34e8 <_dtoa_r+0x9f8>
    37d4:	dc000915 	stw	r16,36(sp)
    37d8:	d9800a17 	ldw	r6,40(sp)
    37dc:	d9400917 	ldw	r5,36(sp)
    37e0:	e009883a 	mov	r4,fp
    37e4:	00061b40 	call	61b4 <__pow5mult>
    37e8:	1021883a 	mov	r16,r2
    37ec:	003f5a06 	br	3558 <_dtoa_r+0xa68>
    37f0:	01c00044 	movi	r7,1
    37f4:	d9c00b15 	stw	r7,44(sp)
    37f8:	d8802217 	ldw	r2,136(sp)
    37fc:	0081280e 	bge	zero,r2,3ca0 <_dtoa_r+0x11b0>
    3800:	100d883a 	mov	r6,r2
    3804:	1021883a 	mov	r16,r2
    3808:	d8800c15 	stw	r2,48(sp)
    380c:	d8800615 	stw	r2,24(sp)
    3810:	003d8806 	br	2e34 <_dtoa_r+0x344>
    3814:	d8800617 	ldw	r2,24(sp)
    3818:	00be9b16 	blt	zero,r2,3288 <_dtoa_r+0x798>
    381c:	10010f1e 	bne	r2,zero,3c5c <_dtoa_r+0x116c>
    3820:	880b883a 	mov	r5,r17
    3824:	000d883a 	mov	r6,zero
    3828:	01d00534 	movhi	r7,16404
    382c:	8009883a 	mov	r4,r16
    3830:	000ba300 	call	ba30 <__muldf3>
    3834:	900d883a 	mov	r6,r18
    3838:	980f883a 	mov	r7,r19
    383c:	1009883a 	mov	r4,r2
    3840:	180b883a 	mov	r5,r3
    3844:	000b8600 	call	b860 <__gedf2>
    3848:	002b883a 	mov	r21,zero
    384c:	0023883a 	mov	r17,zero
    3850:	1000bf16 	blt	r2,zero,3b50 <_dtoa_r+0x1060>
    3854:	d9802217 	ldw	r6,136(sp)
    3858:	ddc00717 	ldw	r23,28(sp)
    385c:	018c303a 	nor	r6,zero,r6
    3860:	d9800515 	stw	r6,20(sp)
    3864:	a80b883a 	mov	r5,r21
    3868:	e009883a 	mov	r4,fp
    386c:	0005c1c0 	call	5c1c <_Bfree>
    3870:	883e4926 	beq	r17,zero,3198 <_dtoa_r+0x6a8>
    3874:	003fad06 	br	372c <_dtoa_r+0xc3c>
    3878:	d9c01117 	ldw	r7,68(sp)
    387c:	3801bc26 	beq	r7,zero,3f70 <_dtoa_r+0x1480>
    3880:	10810cc4 	addi	r2,r2,1075
    3884:	dd400a17 	ldw	r21,40(sp)
    3888:	dd000817 	ldw	r20,32(sp)
    388c:	003f0a06 	br	34b8 <_dtoa_r+0x9c8>
    3890:	00800704 	movi	r2,28
    3894:	d9000817 	ldw	r4,32(sp)
    3898:	a0a9883a 	add	r20,r20,r2
    389c:	b0ad883a 	add	r22,r22,r2
    38a0:	2089883a 	add	r4,r4,r2
    38a4:	d9000815 	stw	r4,32(sp)
    38a8:	003f5106 	br	35f0 <_dtoa_r+0xb00>
    38ac:	d8c00317 	ldw	r3,12(sp)
    38b0:	b8c1fc0e 	bge	r23,r3,40a4 <_dtoa_r+0x15b4>
    38b4:	0027883a 	mov	r19,zero
    38b8:	b805883a 	mov	r2,r23
    38bc:	003f3e06 	br	35b8 <_dtoa_r+0xac8>
    38c0:	880b883a 	mov	r5,r17
    38c4:	e009883a 	mov	r4,fp
    38c8:	000f883a 	mov	r7,zero
    38cc:	01800284 	movi	r6,10
    38d0:	0005c440 	call	5c44 <__multadd>
    38d4:	d9000c17 	ldw	r4,48(sp)
    38d8:	1023883a 	mov	r17,r2
    38dc:	0102040e 	bge	zero,r4,40f0 <_dtoa_r+0x1600>
    38e0:	d9000615 	stw	r4,24(sp)
    38e4:	0500050e 	bge	zero,r20,38fc <_dtoa_r+0xe0c>
    38e8:	880b883a 	mov	r5,r17
    38ec:	a00d883a 	mov	r6,r20
    38f0:	e009883a 	mov	r4,fp
    38f4:	00062f40 	call	62f4 <__lshift>
    38f8:	1023883a 	mov	r17,r2
    38fc:	9801241e 	bne	r19,zero,3d90 <_dtoa_r+0x12a0>
    3900:	8829883a 	mov	r20,r17
    3904:	d9000617 	ldw	r4,24(sp)
    3908:	dcc00717 	ldw	r19,28(sp)
    390c:	9480004c 	andi	r18,r18,1
    3910:	20bfffc4 	addi	r2,r4,-1
    3914:	9885883a 	add	r2,r19,r2
    3918:	d8800415 	stw	r2,16(sp)
    391c:	dc800615 	stw	r18,24(sp)
    3920:	a80b883a 	mov	r5,r21
    3924:	8009883a 	mov	r4,r16
    3928:	00028f00 	call	28f0 <quorem>
    392c:	880b883a 	mov	r5,r17
    3930:	8009883a 	mov	r4,r16
    3934:	102f883a 	mov	r23,r2
    3938:	000643c0 	call	643c <__mcmp>
    393c:	a80b883a 	mov	r5,r21
    3940:	a00d883a 	mov	r6,r20
    3944:	e009883a 	mov	r4,fp
    3948:	102d883a 	mov	r22,r2
    394c:	000649c0 	call	649c <__mdiff>
    3950:	1007883a 	mov	r3,r2
    3954:	10800317 	ldw	r2,12(r2)
    3958:	bc800c04 	addi	r18,r23,48
    395c:	180b883a 	mov	r5,r3
    3960:	10004e1e 	bne	r2,zero,3a9c <_dtoa_r+0xfac>
    3964:	8009883a 	mov	r4,r16
    3968:	d8c01615 	stw	r3,88(sp)
    396c:	000643c0 	call	643c <__mcmp>
    3970:	d8c01617 	ldw	r3,88(sp)
    3974:	e009883a 	mov	r4,fp
    3978:	d8801615 	stw	r2,88(sp)
    397c:	180b883a 	mov	r5,r3
    3980:	0005c1c0 	call	5c1c <_Bfree>
    3984:	d8801617 	ldw	r2,88(sp)
    3988:	1000041e 	bne	r2,zero,399c <_dtoa_r+0xeac>
    398c:	d9800317 	ldw	r6,12(sp)
    3990:	3000021e 	bne	r6,zero,399c <_dtoa_r+0xeac>
    3994:	d8c00617 	ldw	r3,24(sp)
    3998:	18003726 	beq	r3,zero,3a78 <_dtoa_r+0xf88>
    399c:	b0002016 	blt	r22,zero,3a20 <_dtoa_r+0xf30>
    39a0:	b000041e 	bne	r22,zero,39b4 <_dtoa_r+0xec4>
    39a4:	d9000317 	ldw	r4,12(sp)
    39a8:	2000021e 	bne	r4,zero,39b4 <_dtoa_r+0xec4>
    39ac:	d8c00617 	ldw	r3,24(sp)
    39b0:	18001b26 	beq	r3,zero,3a20 <_dtoa_r+0xf30>
    39b4:	00810716 	blt	zero,r2,3dd4 <_dtoa_r+0x12e4>
    39b8:	d8c00417 	ldw	r3,16(sp)
    39bc:	9d800044 	addi	r22,r19,1
    39c0:	9c800005 	stb	r18,0(r19)
    39c4:	b02f883a 	mov	r23,r22
    39c8:	98c10626 	beq	r19,r3,3de4 <_dtoa_r+0x12f4>
    39cc:	800b883a 	mov	r5,r16
    39d0:	000f883a 	mov	r7,zero
    39d4:	01800284 	movi	r6,10
    39d8:	e009883a 	mov	r4,fp
    39dc:	0005c440 	call	5c44 <__multadd>
    39e0:	1021883a 	mov	r16,r2
    39e4:	000f883a 	mov	r7,zero
    39e8:	01800284 	movi	r6,10
    39ec:	880b883a 	mov	r5,r17
    39f0:	e009883a 	mov	r4,fp
    39f4:	8d002526 	beq	r17,r20,3a8c <_dtoa_r+0xf9c>
    39f8:	0005c440 	call	5c44 <__multadd>
    39fc:	a00b883a 	mov	r5,r20
    3a00:	000f883a 	mov	r7,zero
    3a04:	01800284 	movi	r6,10
    3a08:	e009883a 	mov	r4,fp
    3a0c:	1023883a 	mov	r17,r2
    3a10:	0005c440 	call	5c44 <__multadd>
    3a14:	1029883a 	mov	r20,r2
    3a18:	b027883a 	mov	r19,r22
    3a1c:	003fc006 	br	3920 <_dtoa_r+0xe30>
    3a20:	9011883a 	mov	r8,r18
    3a24:	00800e0e 	bge	zero,r2,3a60 <_dtoa_r+0xf70>
    3a28:	800b883a 	mov	r5,r16
    3a2c:	01800044 	movi	r6,1
    3a30:	e009883a 	mov	r4,fp
    3a34:	da001715 	stw	r8,92(sp)
    3a38:	00062f40 	call	62f4 <__lshift>
    3a3c:	a80b883a 	mov	r5,r21
    3a40:	1009883a 	mov	r4,r2
    3a44:	1021883a 	mov	r16,r2
    3a48:	000643c0 	call	643c <__mcmp>
    3a4c:	da001717 	ldw	r8,92(sp)
    3a50:	0081960e 	bge	zero,r2,40ac <_dtoa_r+0x15bc>
    3a54:	00800e44 	movi	r2,57
    3a58:	40817026 	beq	r8,r2,401c <_dtoa_r+0x152c>
    3a5c:	ba000c44 	addi	r8,r23,49
    3a60:	8825883a 	mov	r18,r17
    3a64:	9dc00044 	addi	r23,r19,1
    3a68:	9a000005 	stb	r8,0(r19)
    3a6c:	a023883a 	mov	r17,r20
    3a70:	dc000915 	stw	r16,36(sp)
    3a74:	003f2406 	br	3708 <_dtoa_r+0xc18>
    3a78:	00800e44 	movi	r2,57
    3a7c:	9011883a 	mov	r8,r18
    3a80:	90816626 	beq	r18,r2,401c <_dtoa_r+0x152c>
    3a84:	05bff516 	blt	zero,r22,3a5c <_dtoa_r+0xf6c>
    3a88:	003ff506 	br	3a60 <_dtoa_r+0xf70>
    3a8c:	0005c440 	call	5c44 <__multadd>
    3a90:	1023883a 	mov	r17,r2
    3a94:	1029883a 	mov	r20,r2
    3a98:	003fdf06 	br	3a18 <_dtoa_r+0xf28>
    3a9c:	e009883a 	mov	r4,fp
    3aa0:	0005c1c0 	call	5c1c <_Bfree>
    3aa4:	00800044 	movi	r2,1
    3aa8:	003fbc06 	br	399c <_dtoa_r+0xeac>
    3aac:	a80b883a 	mov	r5,r21
    3ab0:	8009883a 	mov	r4,r16
    3ab4:	000643c0 	call	643c <__mcmp>
    3ab8:	103edb0e 	bge	r2,zero,3628 <_dtoa_r+0xb38>
    3abc:	800b883a 	mov	r5,r16
    3ac0:	000f883a 	mov	r7,zero
    3ac4:	01800284 	movi	r6,10
    3ac8:	e009883a 	mov	r4,fp
    3acc:	0005c440 	call	5c44 <__multadd>
    3ad0:	1021883a 	mov	r16,r2
    3ad4:	d8800517 	ldw	r2,20(sp)
    3ad8:	d8c00b17 	ldw	r3,44(sp)
    3adc:	10bfffc4 	addi	r2,r2,-1
    3ae0:	d8800515 	stw	r2,20(sp)
    3ae4:	183f761e 	bne	r3,zero,38c0 <_dtoa_r+0xdd0>
    3ae8:	d9000c17 	ldw	r4,48(sp)
    3aec:	0101730e 	bge	zero,r4,40bc <_dtoa_r+0x15cc>
    3af0:	d9000615 	stw	r4,24(sp)
    3af4:	003ed006 	br	3638 <_dtoa_r+0xb48>
    3af8:	00800084 	movi	r2,2
    3afc:	3081861e 	bne	r6,r2,4118 <_dtoa_r+0x1628>
    3b00:	d8000b15 	stw	zero,44(sp)
    3b04:	003f3c06 	br	37f8 <_dtoa_r+0xd08>
    3b08:	dc000917 	ldw	r16,36(sp)
    3b0c:	003e9206 	br	3558 <_dtoa_r+0xa68>
    3b10:	d9c00317 	ldw	r7,12(sp)
    3b14:	00800084 	movi	r2,2
    3b18:	11fec50e 	bge	r2,r7,3630 <_dtoa_r+0xb40>
    3b1c:	d9000617 	ldw	r4,24(sp)
    3b20:	20013c1e 	bne	r4,zero,4014 <_dtoa_r+0x1524>
    3b24:	a80b883a 	mov	r5,r21
    3b28:	000f883a 	mov	r7,zero
    3b2c:	01800144 	movi	r6,5
    3b30:	e009883a 	mov	r4,fp
    3b34:	0005c440 	call	5c44 <__multadd>
    3b38:	100b883a 	mov	r5,r2
    3b3c:	8009883a 	mov	r4,r16
    3b40:	102b883a 	mov	r21,r2
    3b44:	000643c0 	call	643c <__mcmp>
    3b48:	dc000915 	stw	r16,36(sp)
    3b4c:	00bf410e 	bge	zero,r2,3854 <_dtoa_r+0xd64>
    3b50:	d9c00717 	ldw	r7,28(sp)
    3b54:	00800c44 	movi	r2,49
    3b58:	38800005 	stb	r2,0(r7)
    3b5c:	d8800517 	ldw	r2,20(sp)
    3b60:	3dc00044 	addi	r23,r7,1
    3b64:	10800044 	addi	r2,r2,1
    3b68:	d8800515 	stw	r2,20(sp)
    3b6c:	003f3d06 	br	3864 <_dtoa_r+0xd74>
    3b70:	d9800517 	ldw	r6,20(sp)
    3b74:	d9c00717 	ldw	r7,28(sp)
    3b78:	00800c44 	movi	r2,49
    3b7c:	31800044 	addi	r6,r6,1
    3b80:	d9800515 	stw	r6,20(sp)
    3b84:	38800005 	stb	r2,0(r7)
    3b88:	003edf06 	br	3708 <_dtoa_r+0xc18>
    3b8c:	d8000b15 	stw	zero,44(sp)
    3b90:	003c9f06 	br	2e10 <_dtoa_r+0x320>
    3b94:	903e7e1e 	bne	r18,zero,3590 <_dtoa_r+0xaa0>
    3b98:	00800434 	movhi	r2,16
    3b9c:	10bfffc4 	addi	r2,r2,-1
    3ba0:	9884703a 	and	r2,r19,r2
    3ba4:	1000ea1e 	bne	r2,zero,3f50 <_dtoa_r+0x1460>
    3ba8:	9cdffc2c 	andhi	r19,r19,32752
    3bac:	9800e826 	beq	r19,zero,3f50 <_dtoa_r+0x1460>
    3bb0:	d9c00817 	ldw	r7,32(sp)
    3bb4:	b5800044 	addi	r22,r22,1
    3bb8:	04c00044 	movi	r19,1
    3bbc:	39c00044 	addi	r7,r7,1
    3bc0:	d9c00815 	stw	r7,32(sp)
    3bc4:	d8800d17 	ldw	r2,52(sp)
    3bc8:	103e721e 	bne	r2,zero,3594 <_dtoa_r+0xaa4>
    3bcc:	00800044 	movi	r2,1
    3bd0:	003e7906 	br	35b8 <_dtoa_r+0xac8>
    3bd4:	8009883a 	mov	r4,r16
    3bd8:	000cac40 	call	cac4 <__floatsidf>
    3bdc:	d9800f17 	ldw	r6,60(sp)
    3be0:	d9c01017 	ldw	r7,64(sp)
    3be4:	1009883a 	mov	r4,r2
    3be8:	180b883a 	mov	r5,r3
    3bec:	000ba300 	call	ba30 <__muldf3>
    3bf0:	000d883a 	mov	r6,zero
    3bf4:	01d00734 	movhi	r7,16412
    3bf8:	1009883a 	mov	r4,r2
    3bfc:	180b883a 	mov	r5,r3
    3c00:	000a6440 	call	a644 <__adddf3>
    3c04:	047f3034 	movhi	r17,64704
    3c08:	1021883a 	mov	r16,r2
    3c0c:	1c63883a 	add	r17,r3,r17
    3c10:	d9000f17 	ldw	r4,60(sp)
    3c14:	d9401017 	ldw	r5,64(sp)
    3c18:	000d883a 	mov	r6,zero
    3c1c:	01d00534 	movhi	r7,16404
    3c20:	000c1480 	call	c148 <__subdf3>
    3c24:	800d883a 	mov	r6,r16
    3c28:	880f883a 	mov	r7,r17
    3c2c:	1009883a 	mov	r4,r2
    3c30:	180b883a 	mov	r5,r3
    3c34:	102b883a 	mov	r21,r2
    3c38:	1829883a 	mov	r20,r3
    3c3c:	000b8600 	call	b860 <__gedf2>
    3c40:	00806c16 	blt	zero,r2,3df4 <_dtoa_r+0x1304>
    3c44:	89e0003c 	xorhi	r7,r17,32768
    3c48:	800d883a 	mov	r6,r16
    3c4c:	a809883a 	mov	r4,r21
    3c50:	a00b883a 	mov	r5,r20
    3c54:	000b93c0 	call	b93c <__ledf2>
    3c58:	103d7e0e 	bge	r2,zero,3254 <_dtoa_r+0x764>
    3c5c:	002b883a 	mov	r21,zero
    3c60:	0023883a 	mov	r17,zero
    3c64:	003efb06 	br	3854 <_dtoa_r+0xd64>
    3c68:	d8800717 	ldw	r2,28(sp)
    3c6c:	003bd006 	br	2bb0 <_dtoa_r+0xc0>
    3c70:	d9000a17 	ldw	r4,40(sp)
    3c74:	d9800d17 	ldw	r6,52(sp)
    3c78:	dd400a15 	stw	r21,40(sp)
    3c7c:	a905c83a 	sub	r2,r21,r4
    3c80:	308d883a 	add	r6,r6,r2
    3c84:	d9800d15 	stw	r6,52(sp)
    3c88:	002b883a 	mov	r21,zero
    3c8c:	003e0606 	br	34a8 <_dtoa_r+0x9b8>
    3c90:	9023883a 	mov	r17,r18
    3c94:	9829883a 	mov	r20,r19
    3c98:	04000084 	movi	r16,2
    3c9c:	003c9206 	br	2ee8 <_dtoa_r+0x3f8>
    3ca0:	04000044 	movi	r16,1
    3ca4:	dc000c15 	stw	r16,48(sp)
    3ca8:	dc000615 	stw	r16,24(sp)
    3cac:	dc002215 	stw	r16,136(sp)
    3cb0:	e0001115 	stw	zero,68(fp)
    3cb4:	000b883a 	mov	r5,zero
    3cb8:	003c6906 	br	2e60 <_dtoa_r+0x370>
    3cbc:	3021883a 	mov	r16,r6
    3cc0:	003ffb06 	br	3cb0 <_dtoa_r+0x11c0>
    3cc4:	1000021e 	bne	r2,zero,3cd0 <_dtoa_r+0x11e0>
    3cc8:	4200004c 	andi	r8,r8,1
    3ccc:	403e7d1e 	bne	r8,zero,36c4 <_dtoa_r+0xbd4>
    3cd0:	01000c04 	movi	r4,48
    3cd4:	00000106 	br	3cdc <_dtoa_r+0x11ec>
    3cd8:	102f883a 	mov	r23,r2
    3cdc:	b8bfffc4 	addi	r2,r23,-1
    3ce0:	10c00007 	ldb	r3,0(r2)
    3ce4:	193ffc26 	beq	r3,r4,3cd8 <_dtoa_r+0x11e8>
    3ce8:	003e8706 	br	3708 <_dtoa_r+0xc18>
    3cec:	d8800517 	ldw	r2,20(sp)
    3cf0:	00a3c83a 	sub	r17,zero,r2
    3cf4:	8800a426 	beq	r17,zero,3f88 <_dtoa_r+0x1498>
    3cf8:	888003cc 	andi	r2,r17,15
    3cfc:	100490fa 	slli	r2,r2,3
    3d00:	00c000b4 	movhi	r3,2
    3d04:	18e5c504 	addi	r3,r3,-26860
    3d08:	1885883a 	add	r2,r3,r2
    3d0c:	11800017 	ldw	r6,0(r2)
    3d10:	11c00117 	ldw	r7,4(r2)
    3d14:	9009883a 	mov	r4,r18
    3d18:	980b883a 	mov	r5,r19
    3d1c:	8823d13a 	srai	r17,r17,4
    3d20:	000ba300 	call	ba30 <__muldf3>
    3d24:	d8800f15 	stw	r2,60(sp)
    3d28:	d8c01015 	stw	r3,64(sp)
    3d2c:	8800e826 	beq	r17,zero,40d0 <_dtoa_r+0x15e0>
    3d30:	050000b4 	movhi	r20,2
    3d34:	a525bb04 	addi	r20,r20,-26900
    3d38:	04000084 	movi	r16,2
    3d3c:	8980004c 	andi	r6,r17,1
    3d40:	1009883a 	mov	r4,r2
    3d44:	8823d07a 	srai	r17,r17,1
    3d48:	180b883a 	mov	r5,r3
    3d4c:	30000426 	beq	r6,zero,3d60 <_dtoa_r+0x1270>
    3d50:	a1800017 	ldw	r6,0(r20)
    3d54:	a1c00117 	ldw	r7,4(r20)
    3d58:	84000044 	addi	r16,r16,1
    3d5c:	000ba300 	call	ba30 <__muldf3>
    3d60:	a5000204 	addi	r20,r20,8
    3d64:	883ff51e 	bne	r17,zero,3d3c <_dtoa_r+0x124c>
    3d68:	d8800f15 	stw	r2,60(sp)
    3d6c:	d8c01015 	stw	r3,64(sp)
    3d70:	003c7606 	br	2f4c <_dtoa_r+0x45c>
    3d74:	00c00c04 	movi	r3,48
    3d78:	10c00005 	stb	r3,0(r2)
    3d7c:	d8c00517 	ldw	r3,20(sp)
    3d80:	bd3fffc3 	ldbu	r20,-1(r23)
    3d84:	18c00044 	addi	r3,r3,1
    3d88:	d8c00515 	stw	r3,20(sp)
    3d8c:	003db906 	br	3474 <_dtoa_r+0x984>
    3d90:	89400117 	ldw	r5,4(r17)
    3d94:	e009883a 	mov	r4,fp
    3d98:	0005b740 	call	5b74 <_Balloc>
    3d9c:	89800417 	ldw	r6,16(r17)
    3da0:	89400304 	addi	r5,r17,12
    3da4:	11000304 	addi	r4,r2,12
    3da8:	31800084 	addi	r6,r6,2
    3dac:	318d883a 	add	r6,r6,r6
    3db0:	318d883a 	add	r6,r6,r6
    3db4:	1027883a 	mov	r19,r2
    3db8:	00059040 	call	5904 <memcpy>
    3dbc:	01800044 	movi	r6,1
    3dc0:	980b883a 	mov	r5,r19
    3dc4:	e009883a 	mov	r4,fp
    3dc8:	00062f40 	call	62f4 <__lshift>
    3dcc:	1029883a 	mov	r20,r2
    3dd0:	003ecc06 	br	3904 <_dtoa_r+0xe14>
    3dd4:	00800e44 	movi	r2,57
    3dd8:	90809026 	beq	r18,r2,401c <_dtoa_r+0x152c>
    3ddc:	92000044 	addi	r8,r18,1
    3de0:	003f1f06 	br	3a60 <_dtoa_r+0xf70>
    3de4:	9011883a 	mov	r8,r18
    3de8:	8825883a 	mov	r18,r17
    3dec:	a023883a 	mov	r17,r20
    3df0:	003e2906 	br	3698 <_dtoa_r+0xba8>
    3df4:	002b883a 	mov	r21,zero
    3df8:	0023883a 	mov	r17,zero
    3dfc:	003f5406 	br	3b50 <_dtoa_r+0x1060>
    3e00:	61bfffc4 	addi	r6,r12,-1
    3e04:	300490fa 	slli	r2,r6,3
    3e08:	00c000b4 	movhi	r3,2
    3e0c:	18e5c504 	addi	r3,r3,-26860
    3e10:	1885883a 	add	r2,r3,r2
    3e14:	11000017 	ldw	r4,0(r2)
    3e18:	11400117 	ldw	r5,4(r2)
    3e1c:	d8800717 	ldw	r2,28(sp)
    3e20:	880f883a 	mov	r7,r17
    3e24:	d9801215 	stw	r6,72(sp)
    3e28:	800d883a 	mov	r6,r16
    3e2c:	db001615 	stw	r12,88(sp)
    3e30:	15c00044 	addi	r23,r2,1
    3e34:	000ba300 	call	ba30 <__muldf3>
    3e38:	d9401017 	ldw	r5,64(sp)
    3e3c:	d9000f17 	ldw	r4,60(sp)
    3e40:	d8c01515 	stw	r3,84(sp)
    3e44:	d8801415 	stw	r2,80(sp)
    3e48:	000ca440 	call	ca44 <__fixdfsi>
    3e4c:	1009883a 	mov	r4,r2
    3e50:	1021883a 	mov	r16,r2
    3e54:	000cac40 	call	cac4 <__floatsidf>
    3e58:	d9000f17 	ldw	r4,60(sp)
    3e5c:	d9401017 	ldw	r5,64(sp)
    3e60:	100d883a 	mov	r6,r2
    3e64:	180f883a 	mov	r7,r3
    3e68:	000c1480 	call	c148 <__subdf3>
    3e6c:	1829883a 	mov	r20,r3
    3e70:	d8c00717 	ldw	r3,28(sp)
    3e74:	84000c04 	addi	r16,r16,48
    3e78:	1023883a 	mov	r17,r2
    3e7c:	1c000005 	stb	r16,0(r3)
    3e80:	db001617 	ldw	r12,88(sp)
    3e84:	00800044 	movi	r2,1
    3e88:	60802226 	beq	r12,r2,3f14 <_dtoa_r+0x1424>
    3e8c:	d9c00717 	ldw	r7,28(sp)
    3e90:	8805883a 	mov	r2,r17
    3e94:	b82b883a 	mov	r21,r23
    3e98:	3b19883a 	add	r12,r7,r12
    3e9c:	6023883a 	mov	r17,r12
    3ea0:	a007883a 	mov	r3,r20
    3ea4:	dc800f15 	stw	r18,60(sp)
    3ea8:	000d883a 	mov	r6,zero
    3eac:	01d00934 	movhi	r7,16420
    3eb0:	1009883a 	mov	r4,r2
    3eb4:	180b883a 	mov	r5,r3
    3eb8:	000ba300 	call	ba30 <__muldf3>
    3ebc:	180b883a 	mov	r5,r3
    3ec0:	1009883a 	mov	r4,r2
    3ec4:	1829883a 	mov	r20,r3
    3ec8:	1025883a 	mov	r18,r2
    3ecc:	000ca440 	call	ca44 <__fixdfsi>
    3ed0:	1009883a 	mov	r4,r2
    3ed4:	1021883a 	mov	r16,r2
    3ed8:	000cac40 	call	cac4 <__floatsidf>
    3edc:	100d883a 	mov	r6,r2
    3ee0:	180f883a 	mov	r7,r3
    3ee4:	9009883a 	mov	r4,r18
    3ee8:	a00b883a 	mov	r5,r20
    3eec:	84000c04 	addi	r16,r16,48
    3ef0:	000c1480 	call	c148 <__subdf3>
    3ef4:	ad400044 	addi	r21,r21,1
    3ef8:	ac3fffc5 	stb	r16,-1(r21)
    3efc:	ac7fea1e 	bne	r21,r17,3ea8 <_dtoa_r+0x13b8>
    3f00:	1023883a 	mov	r17,r2
    3f04:	d8801217 	ldw	r2,72(sp)
    3f08:	dc800f17 	ldw	r18,60(sp)
    3f0c:	1829883a 	mov	r20,r3
    3f10:	b8af883a 	add	r23,r23,r2
    3f14:	d9001417 	ldw	r4,80(sp)
    3f18:	d9401517 	ldw	r5,84(sp)
    3f1c:	000d883a 	mov	r6,zero
    3f20:	01cff834 	movhi	r7,16352
    3f24:	000a6440 	call	a644 <__adddf3>
    3f28:	880d883a 	mov	r6,r17
    3f2c:	a00f883a 	mov	r7,r20
    3f30:	1009883a 	mov	r4,r2
    3f34:	180b883a 	mov	r5,r3
    3f38:	000b93c0 	call	b93c <__ledf2>
    3f3c:	10003e0e 	bge	r2,zero,4038 <_dtoa_r+0x1548>
    3f40:	d9001317 	ldw	r4,76(sp)
    3f44:	bd3fffc3 	ldbu	r20,-1(r23)
    3f48:	d9000515 	stw	r4,20(sp)
    3f4c:	003d3b06 	br	343c <_dtoa_r+0x94c>
    3f50:	0027883a 	mov	r19,zero
    3f54:	003f1b06 	br	3bc4 <_dtoa_r+0x10d4>
    3f58:	d8800817 	ldw	r2,32(sp)
    3f5c:	11e9c83a 	sub	r20,r2,r7
    3f60:	0005883a 	mov	r2,zero
    3f64:	003d5406 	br	34b8 <_dtoa_r+0x9c8>
    3f68:	00800044 	movi	r2,1
    3f6c:	003dc706 	br	368c <_dtoa_r+0xb9c>
    3f70:	d8c00217 	ldw	r3,8(sp)
    3f74:	00800d84 	movi	r2,54
    3f78:	dd400a17 	ldw	r21,40(sp)
    3f7c:	10c5c83a 	sub	r2,r2,r3
    3f80:	dd000817 	ldw	r20,32(sp)
    3f84:	003d4c06 	br	34b8 <_dtoa_r+0x9c8>
    3f88:	dc800f15 	stw	r18,60(sp)
    3f8c:	dcc01015 	stw	r19,64(sp)
    3f90:	04000084 	movi	r16,2
    3f94:	003bed06 	br	2f4c <_dtoa_r+0x45c>
    3f98:	d9000617 	ldw	r4,24(sp)
    3f9c:	203f0d26 	beq	r4,zero,3bd4 <_dtoa_r+0x10e4>
    3fa0:	d9800c17 	ldw	r6,48(sp)
    3fa4:	01bcab0e 	bge	zero,r6,3254 <_dtoa_r+0x764>
    3fa8:	d9401017 	ldw	r5,64(sp)
    3fac:	d9000f17 	ldw	r4,60(sp)
    3fb0:	000d883a 	mov	r6,zero
    3fb4:	01d00934 	movhi	r7,16420
    3fb8:	000ba300 	call	ba30 <__muldf3>
    3fbc:	81000044 	addi	r4,r16,1
    3fc0:	d8800f15 	stw	r2,60(sp)
    3fc4:	d8c01015 	stw	r3,64(sp)
    3fc8:	000cac40 	call	cac4 <__floatsidf>
    3fcc:	d9800f17 	ldw	r6,60(sp)
    3fd0:	d9c01017 	ldw	r7,64(sp)
    3fd4:	1009883a 	mov	r4,r2
    3fd8:	180b883a 	mov	r5,r3
    3fdc:	000ba300 	call	ba30 <__muldf3>
    3fe0:	01d00734 	movhi	r7,16412
    3fe4:	000d883a 	mov	r6,zero
    3fe8:	1009883a 	mov	r4,r2
    3fec:	180b883a 	mov	r5,r3
    3ff0:	000a6440 	call	a644 <__adddf3>
    3ff4:	d9c00517 	ldw	r7,20(sp)
    3ff8:	047f3034 	movhi	r17,64704
    3ffc:	1021883a 	mov	r16,r2
    4000:	39ffffc4 	addi	r7,r7,-1
    4004:	d9c01315 	stw	r7,76(sp)
    4008:	1c63883a 	add	r17,r3,r17
    400c:	db000c17 	ldw	r12,48(sp)
    4010:	003bea06 	br	2fbc <_dtoa_r+0x4cc>
    4014:	dc000915 	stw	r16,36(sp)
    4018:	003e0e06 	br	3854 <_dtoa_r+0xd64>
    401c:	01000e44 	movi	r4,57
    4020:	8825883a 	mov	r18,r17
    4024:	9dc00044 	addi	r23,r19,1
    4028:	99000005 	stb	r4,0(r19)
    402c:	a023883a 	mov	r17,r20
    4030:	dc000915 	stw	r16,36(sp)
    4034:	003da406 	br	36c8 <_dtoa_r+0xbd8>
    4038:	d9801417 	ldw	r6,80(sp)
    403c:	d9c01517 	ldw	r7,84(sp)
    4040:	0009883a 	mov	r4,zero
    4044:	014ff834 	movhi	r5,16352
    4048:	000c1480 	call	c148 <__subdf3>
    404c:	880d883a 	mov	r6,r17
    4050:	a00f883a 	mov	r7,r20
    4054:	1009883a 	mov	r4,r2
    4058:	180b883a 	mov	r5,r3
    405c:	000b8600 	call	b860 <__gedf2>
    4060:	00bc7c0e 	bge	zero,r2,3254 <_dtoa_r+0x764>
    4064:	01000c04 	movi	r4,48
    4068:	00000106 	br	4070 <_dtoa_r+0x1580>
    406c:	102f883a 	mov	r23,r2
    4070:	b8bfffc4 	addi	r2,r23,-1
    4074:	10c00007 	ldb	r3,0(r2)
    4078:	193ffc26 	beq	r3,r4,406c <_dtoa_r+0x157c>
    407c:	d9801317 	ldw	r6,76(sp)
    4080:	d9800515 	stw	r6,20(sp)
    4084:	003c4406 	br	3198 <_dtoa_r+0x6a8>
    4088:	d9801317 	ldw	r6,76(sp)
    408c:	d9800515 	stw	r6,20(sp)
    4090:	003cea06 	br	343c <_dtoa_r+0x94c>
    4094:	dd800f17 	ldw	r22,60(sp)
    4098:	dcc01017 	ldw	r19,64(sp)
    409c:	dc801217 	ldw	r18,72(sp)
    40a0:	003c6c06 	br	3254 <_dtoa_r+0x764>
    40a4:	903e031e 	bne	r18,zero,38b4 <_dtoa_r+0xdc4>
    40a8:	003ebb06 	br	3b98 <_dtoa_r+0x10a8>
    40ac:	103e6c1e 	bne	r2,zero,3a60 <_dtoa_r+0xf70>
    40b0:	4080004c 	andi	r2,r8,1
    40b4:	103e6a26 	beq	r2,zero,3a60 <_dtoa_r+0xf70>
    40b8:	003e6606 	br	3a54 <_dtoa_r+0xf64>
    40bc:	d8c00317 	ldw	r3,12(sp)
    40c0:	00800084 	movi	r2,2
    40c4:	10c02916 	blt	r2,r3,416c <_dtoa_r+0x167c>
    40c8:	d9000c17 	ldw	r4,48(sp)
    40cc:	003e8806 	br	3af0 <_dtoa_r+0x1000>
    40d0:	04000084 	movi	r16,2
    40d4:	003b9d06 	br	2f4c <_dtoa_r+0x45c>
    40d8:	d9001317 	ldw	r4,76(sp)
    40dc:	d9000515 	stw	r4,20(sp)
    40e0:	003cd606 	br	343c <_dtoa_r+0x94c>
    40e4:	d8801317 	ldw	r2,76(sp)
    40e8:	d8800515 	stw	r2,20(sp)
    40ec:	003c2a06 	br	3198 <_dtoa_r+0x6a8>
    40f0:	d9800317 	ldw	r6,12(sp)
    40f4:	00800084 	movi	r2,2
    40f8:	11801516 	blt	r2,r6,4150 <_dtoa_r+0x1660>
    40fc:	d9c00c17 	ldw	r7,48(sp)
    4100:	d9c00615 	stw	r7,24(sp)
    4104:	003df706 	br	38e4 <_dtoa_r+0xdf4>
    4108:	193d3926 	beq	r3,r4,35f0 <_dtoa_r+0xb00>
    410c:	00c00f04 	movi	r3,60
    4110:	1885c83a 	sub	r2,r3,r2
    4114:	003ddf06 	br	3894 <_dtoa_r+0xda4>
    4118:	e009883a 	mov	r4,fp
    411c:	e0001115 	stw	zero,68(fp)
    4120:	000b883a 	mov	r5,zero
    4124:	0005b740 	call	5b74 <_Balloc>
    4128:	d8800715 	stw	r2,28(sp)
    412c:	d8c00717 	ldw	r3,28(sp)
    4130:	00bfffc4 	movi	r2,-1
    4134:	01000044 	movi	r4,1
    4138:	d8800c15 	stw	r2,48(sp)
    413c:	e0c01015 	stw	r3,64(fp)
    4140:	d9000b15 	stw	r4,44(sp)
    4144:	d8800615 	stw	r2,24(sp)
    4148:	d8002215 	stw	zero,136(sp)
    414c:	003c4106 	br	3254 <_dtoa_r+0x764>
    4150:	d8c00c17 	ldw	r3,48(sp)
    4154:	d8c00615 	stw	r3,24(sp)
    4158:	003e7006 	br	3b1c <_dtoa_r+0x102c>
    415c:	04400044 	movi	r17,1
    4160:	003b2006 	br	2de4 <_dtoa_r+0x2f4>
    4164:	000b883a 	mov	r5,zero
    4168:	003b3d06 	br	2e60 <_dtoa_r+0x370>
    416c:	d8800c17 	ldw	r2,48(sp)
    4170:	d8800615 	stw	r2,24(sp)
    4174:	003e6906 	br	3b1c <_dtoa_r+0x102c>

00004178 <__sflush_r>:
    4178:	2880030b 	ldhu	r2,12(r5)
    417c:	defffb04 	addi	sp,sp,-20
    4180:	dcc00315 	stw	r19,12(sp)
    4184:	dc400115 	stw	r17,4(sp)
    4188:	dfc00415 	stw	ra,16(sp)
    418c:	dc800215 	stw	r18,8(sp)
    4190:	dc000015 	stw	r16,0(sp)
    4194:	10c0020c 	andi	r3,r2,8
    4198:	2823883a 	mov	r17,r5
    419c:	2027883a 	mov	r19,r4
    41a0:	1800311e 	bne	r3,zero,4268 <__sflush_r+0xf0>
    41a4:	28c00117 	ldw	r3,4(r5)
    41a8:	10820014 	ori	r2,r2,2048
    41ac:	2880030d 	sth	r2,12(r5)
    41b0:	00c04b0e 	bge	zero,r3,42e0 <__sflush_r+0x168>
    41b4:	8a000a17 	ldw	r8,40(r17)
    41b8:	40002326 	beq	r8,zero,4248 <__sflush_r+0xd0>
    41bc:	9c000017 	ldw	r16,0(r19)
    41c0:	10c4000c 	andi	r3,r2,4096
    41c4:	98000015 	stw	zero,0(r19)
    41c8:	18004826 	beq	r3,zero,42ec <__sflush_r+0x174>
    41cc:	89801417 	ldw	r6,80(r17)
    41d0:	10c0010c 	andi	r3,r2,4
    41d4:	18000626 	beq	r3,zero,41f0 <__sflush_r+0x78>
    41d8:	88c00117 	ldw	r3,4(r17)
    41dc:	88800c17 	ldw	r2,48(r17)
    41e0:	30cdc83a 	sub	r6,r6,r3
    41e4:	10000226 	beq	r2,zero,41f0 <__sflush_r+0x78>
    41e8:	88800f17 	ldw	r2,60(r17)
    41ec:	308dc83a 	sub	r6,r6,r2
    41f0:	89400717 	ldw	r5,28(r17)
    41f4:	000f883a 	mov	r7,zero
    41f8:	9809883a 	mov	r4,r19
    41fc:	403ee83a 	callr	r8
    4200:	00ffffc4 	movi	r3,-1
    4204:	10c04426 	beq	r2,r3,4318 <__sflush_r+0x1a0>
    4208:	88c0030b 	ldhu	r3,12(r17)
    420c:	89000417 	ldw	r4,16(r17)
    4210:	88000115 	stw	zero,4(r17)
    4214:	197dffcc 	andi	r5,r3,63487
    4218:	8940030d 	sth	r5,12(r17)
    421c:	89000015 	stw	r4,0(r17)
    4220:	18c4000c 	andi	r3,r3,4096
    4224:	18002c1e 	bne	r3,zero,42d8 <__sflush_r+0x160>
    4228:	89400c17 	ldw	r5,48(r17)
    422c:	9c000015 	stw	r16,0(r19)
    4230:	28000526 	beq	r5,zero,4248 <__sflush_r+0xd0>
    4234:	88801004 	addi	r2,r17,64
    4238:	28800226 	beq	r5,r2,4244 <__sflush_r+0xcc>
    423c:	9809883a 	mov	r4,r19
    4240:	00048e40 	call	48e4 <_free_r>
    4244:	88000c15 	stw	zero,48(r17)
    4248:	0005883a 	mov	r2,zero
    424c:	dfc00417 	ldw	ra,16(sp)
    4250:	dcc00317 	ldw	r19,12(sp)
    4254:	dc800217 	ldw	r18,8(sp)
    4258:	dc400117 	ldw	r17,4(sp)
    425c:	dc000017 	ldw	r16,0(sp)
    4260:	dec00504 	addi	sp,sp,20
    4264:	f800283a 	ret
    4268:	2c800417 	ldw	r18,16(r5)
    426c:	903ff626 	beq	r18,zero,4248 <__sflush_r+0xd0>
    4270:	2c000017 	ldw	r16,0(r5)
    4274:	108000cc 	andi	r2,r2,3
    4278:	2c800015 	stw	r18,0(r5)
    427c:	84a1c83a 	sub	r16,r16,r18
    4280:	1000131e 	bne	r2,zero,42d0 <__sflush_r+0x158>
    4284:	28800517 	ldw	r2,20(r5)
    4288:	88800215 	stw	r2,8(r17)
    428c:	04000316 	blt	zero,r16,429c <__sflush_r+0x124>
    4290:	003fed06 	br	4248 <__sflush_r+0xd0>
    4294:	90a5883a 	add	r18,r18,r2
    4298:	043feb0e 	bge	zero,r16,4248 <__sflush_r+0xd0>
    429c:	88800917 	ldw	r2,36(r17)
    42a0:	89400717 	ldw	r5,28(r17)
    42a4:	800f883a 	mov	r7,r16
    42a8:	900d883a 	mov	r6,r18
    42ac:	9809883a 	mov	r4,r19
    42b0:	103ee83a 	callr	r2
    42b4:	80a1c83a 	sub	r16,r16,r2
    42b8:	00bff616 	blt	zero,r2,4294 <__sflush_r+0x11c>
    42bc:	88c0030b 	ldhu	r3,12(r17)
    42c0:	00bfffc4 	movi	r2,-1
    42c4:	18c01014 	ori	r3,r3,64
    42c8:	88c0030d 	sth	r3,12(r17)
    42cc:	003fdf06 	br	424c <__sflush_r+0xd4>
    42d0:	0005883a 	mov	r2,zero
    42d4:	003fec06 	br	4288 <__sflush_r+0x110>
    42d8:	88801415 	stw	r2,80(r17)
    42dc:	003fd206 	br	4228 <__sflush_r+0xb0>
    42e0:	28c00f17 	ldw	r3,60(r5)
    42e4:	00ffb316 	blt	zero,r3,41b4 <__sflush_r+0x3c>
    42e8:	003fd706 	br	4248 <__sflush_r+0xd0>
    42ec:	89400717 	ldw	r5,28(r17)
    42f0:	000d883a 	mov	r6,zero
    42f4:	01c00044 	movi	r7,1
    42f8:	9809883a 	mov	r4,r19
    42fc:	403ee83a 	callr	r8
    4300:	100d883a 	mov	r6,r2
    4304:	00bfffc4 	movi	r2,-1
    4308:	30801426 	beq	r6,r2,435c <__sflush_r+0x1e4>
    430c:	8880030b 	ldhu	r2,12(r17)
    4310:	8a000a17 	ldw	r8,40(r17)
    4314:	003fae06 	br	41d0 <__sflush_r+0x58>
    4318:	98c00017 	ldw	r3,0(r19)
    431c:	183fba26 	beq	r3,zero,4208 <__sflush_r+0x90>
    4320:	01000744 	movi	r4,29
    4324:	19000626 	beq	r3,r4,4340 <__sflush_r+0x1c8>
    4328:	01000584 	movi	r4,22
    432c:	19000426 	beq	r3,r4,4340 <__sflush_r+0x1c8>
    4330:	88c0030b 	ldhu	r3,12(r17)
    4334:	18c01014 	ori	r3,r3,64
    4338:	88c0030d 	sth	r3,12(r17)
    433c:	003fc306 	br	424c <__sflush_r+0xd4>
    4340:	8880030b 	ldhu	r2,12(r17)
    4344:	88c00417 	ldw	r3,16(r17)
    4348:	88000115 	stw	zero,4(r17)
    434c:	10bdffcc 	andi	r2,r2,63487
    4350:	8880030d 	sth	r2,12(r17)
    4354:	88c00015 	stw	r3,0(r17)
    4358:	003fb306 	br	4228 <__sflush_r+0xb0>
    435c:	98800017 	ldw	r2,0(r19)
    4360:	103fea26 	beq	r2,zero,430c <__sflush_r+0x194>
    4364:	00c00744 	movi	r3,29
    4368:	10c00226 	beq	r2,r3,4374 <__sflush_r+0x1fc>
    436c:	00c00584 	movi	r3,22
    4370:	10c0031e 	bne	r2,r3,4380 <__sflush_r+0x208>
    4374:	9c000015 	stw	r16,0(r19)
    4378:	0005883a 	mov	r2,zero
    437c:	003fb306 	br	424c <__sflush_r+0xd4>
    4380:	88c0030b 	ldhu	r3,12(r17)
    4384:	3005883a 	mov	r2,r6
    4388:	18c01014 	ori	r3,r3,64
    438c:	88c0030d 	sth	r3,12(r17)
    4390:	003fae06 	br	424c <__sflush_r+0xd4>

00004394 <_fflush_r>:
    4394:	defffd04 	addi	sp,sp,-12
    4398:	dc000115 	stw	r16,4(sp)
    439c:	dfc00215 	stw	ra,8(sp)
    43a0:	2021883a 	mov	r16,r4
    43a4:	20000226 	beq	r4,zero,43b0 <_fflush_r+0x1c>
    43a8:	20800e17 	ldw	r2,56(r4)
    43ac:	10000c26 	beq	r2,zero,43e0 <_fflush_r+0x4c>
    43b0:	2880030f 	ldh	r2,12(r5)
    43b4:	1000051e 	bne	r2,zero,43cc <_fflush_r+0x38>
    43b8:	0005883a 	mov	r2,zero
    43bc:	dfc00217 	ldw	ra,8(sp)
    43c0:	dc000117 	ldw	r16,4(sp)
    43c4:	dec00304 	addi	sp,sp,12
    43c8:	f800283a 	ret
    43cc:	8009883a 	mov	r4,r16
    43d0:	dfc00217 	ldw	ra,8(sp)
    43d4:	dc000117 	ldw	r16,4(sp)
    43d8:	dec00304 	addi	sp,sp,12
    43dc:	00041781 	jmpi	4178 <__sflush_r>
    43e0:	d9400015 	stw	r5,0(sp)
    43e4:	00047700 	call	4770 <__sinit>
    43e8:	d9400017 	ldw	r5,0(sp)
    43ec:	003ff006 	br	43b0 <_fflush_r+0x1c>

000043f0 <fflush>:
    43f0:	20000526 	beq	r4,zero,4408 <fflush+0x18>
    43f4:	008000b4 	movhi	r2,2
    43f8:	10ae6604 	addi	r2,r2,-18024
    43fc:	200b883a 	mov	r5,r4
    4400:	11000017 	ldw	r4,0(r2)
    4404:	00043941 	jmpi	4394 <_fflush_r>
    4408:	008000b4 	movhi	r2,2
    440c:	10ae6504 	addi	r2,r2,-18028
    4410:	11000017 	ldw	r4,0(r2)
    4414:	01400034 	movhi	r5,0
    4418:	2950e504 	addi	r5,r5,17300
    441c:	0004cb81 	jmpi	4cb8 <_fwalk_reent>

00004420 <__fp_unlock>:
    4420:	0005883a 	mov	r2,zero
    4424:	f800283a 	ret

00004428 <_cleanup_r>:
    4428:	01400074 	movhi	r5,1
    442c:	2961aa04 	addi	r5,r5,-31064
    4430:	0004cb81 	jmpi	4cb8 <_fwalk_reent>

00004434 <__sinit.part.1>:
    4434:	defff704 	addi	sp,sp,-36
    4438:	00c00034 	movhi	r3,0
    443c:	dfc00815 	stw	ra,32(sp)
    4440:	ddc00715 	stw	r23,28(sp)
    4444:	dd800615 	stw	r22,24(sp)
    4448:	dd400515 	stw	r21,20(sp)
    444c:	dd000415 	stw	r20,16(sp)
    4450:	dcc00315 	stw	r19,12(sp)
    4454:	dc800215 	stw	r18,8(sp)
    4458:	dc400115 	stw	r17,4(sp)
    445c:	dc000015 	stw	r16,0(sp)
    4460:	18d10a04 	addi	r3,r3,17448
    4464:	24000117 	ldw	r16,4(r4)
    4468:	20c00f15 	stw	r3,60(r4)
    446c:	2080bb04 	addi	r2,r4,748
    4470:	00c000c4 	movi	r3,3
    4474:	20c0b915 	stw	r3,740(r4)
    4478:	2080ba15 	stw	r2,744(r4)
    447c:	2000b815 	stw	zero,736(r4)
    4480:	05c00204 	movi	r23,8
    4484:	00800104 	movi	r2,4
    4488:	2025883a 	mov	r18,r4
    448c:	b80d883a 	mov	r6,r23
    4490:	81001704 	addi	r4,r16,92
    4494:	000b883a 	mov	r5,zero
    4498:	80000015 	stw	zero,0(r16)
    449c:	80000115 	stw	zero,4(r16)
    44a0:	80000215 	stw	zero,8(r16)
    44a4:	8080030d 	sth	r2,12(r16)
    44a8:	80001915 	stw	zero,100(r16)
    44ac:	8000038d 	sth	zero,14(r16)
    44b0:	80000415 	stw	zero,16(r16)
    44b4:	80000515 	stw	zero,20(r16)
    44b8:	80000615 	stw	zero,24(r16)
    44bc:	0005a4c0 	call	5a4c <memset>
    44c0:	05800034 	movhi	r22,0
    44c4:	94400217 	ldw	r17,8(r18)
    44c8:	05400034 	movhi	r21,0
    44cc:	05000034 	movhi	r20,0
    44d0:	04c00034 	movhi	r19,0
    44d4:	b59b0e04 	addi	r22,r22,27704
    44d8:	ad5b2504 	addi	r21,r21,27796
    44dc:	a51b4404 	addi	r20,r20,27920
    44e0:	9cdb5b04 	addi	r19,r19,28012
    44e4:	85800815 	stw	r22,32(r16)
    44e8:	85400915 	stw	r21,36(r16)
    44ec:	85000a15 	stw	r20,40(r16)
    44f0:	84c00b15 	stw	r19,44(r16)
    44f4:	84000715 	stw	r16,28(r16)
    44f8:	00800284 	movi	r2,10
    44fc:	8880030d 	sth	r2,12(r17)
    4500:	00800044 	movi	r2,1
    4504:	b80d883a 	mov	r6,r23
    4508:	89001704 	addi	r4,r17,92
    450c:	000b883a 	mov	r5,zero
    4510:	88000015 	stw	zero,0(r17)
    4514:	88000115 	stw	zero,4(r17)
    4518:	88000215 	stw	zero,8(r17)
    451c:	88001915 	stw	zero,100(r17)
    4520:	8880038d 	sth	r2,14(r17)
    4524:	88000415 	stw	zero,16(r17)
    4528:	88000515 	stw	zero,20(r17)
    452c:	88000615 	stw	zero,24(r17)
    4530:	0005a4c0 	call	5a4c <memset>
    4534:	94000317 	ldw	r16,12(r18)
    4538:	00800484 	movi	r2,18
    453c:	8c400715 	stw	r17,28(r17)
    4540:	8d800815 	stw	r22,32(r17)
    4544:	8d400915 	stw	r21,36(r17)
    4548:	8d000a15 	stw	r20,40(r17)
    454c:	8cc00b15 	stw	r19,44(r17)
    4550:	8080030d 	sth	r2,12(r16)
    4554:	00800084 	movi	r2,2
    4558:	80000015 	stw	zero,0(r16)
    455c:	80000115 	stw	zero,4(r16)
    4560:	80000215 	stw	zero,8(r16)
    4564:	80001915 	stw	zero,100(r16)
    4568:	8080038d 	sth	r2,14(r16)
    456c:	80000415 	stw	zero,16(r16)
    4570:	80000515 	stw	zero,20(r16)
    4574:	80000615 	stw	zero,24(r16)
    4578:	b80d883a 	mov	r6,r23
    457c:	000b883a 	mov	r5,zero
    4580:	81001704 	addi	r4,r16,92
    4584:	0005a4c0 	call	5a4c <memset>
    4588:	00800044 	movi	r2,1
    458c:	84000715 	stw	r16,28(r16)
    4590:	85800815 	stw	r22,32(r16)
    4594:	85400915 	stw	r21,36(r16)
    4598:	85000a15 	stw	r20,40(r16)
    459c:	84c00b15 	stw	r19,44(r16)
    45a0:	90800e15 	stw	r2,56(r18)
    45a4:	dfc00817 	ldw	ra,32(sp)
    45a8:	ddc00717 	ldw	r23,28(sp)
    45ac:	dd800617 	ldw	r22,24(sp)
    45b0:	dd400517 	ldw	r21,20(sp)
    45b4:	dd000417 	ldw	r20,16(sp)
    45b8:	dcc00317 	ldw	r19,12(sp)
    45bc:	dc800217 	ldw	r18,8(sp)
    45c0:	dc400117 	ldw	r17,4(sp)
    45c4:	dc000017 	ldw	r16,0(sp)
    45c8:	dec00904 	addi	sp,sp,36
    45cc:	f800283a 	ret

000045d0 <__fp_lock>:
    45d0:	0005883a 	mov	r2,zero
    45d4:	f800283a 	ret

000045d8 <__sfmoreglue>:
    45d8:	defffc04 	addi	sp,sp,-16
    45dc:	dc400115 	stw	r17,4(sp)
    45e0:	2c7fffc4 	addi	r17,r5,-1
    45e4:	8c401a24 	muli	r17,r17,104
    45e8:	dc800215 	stw	r18,8(sp)
    45ec:	2825883a 	mov	r18,r5
    45f0:	89401d04 	addi	r5,r17,116
    45f4:	dc000015 	stw	r16,0(sp)
    45f8:	dfc00315 	stw	ra,12(sp)
    45fc:	00050140 	call	5014 <_malloc_r>
    4600:	1021883a 	mov	r16,r2
    4604:	10000726 	beq	r2,zero,4624 <__sfmoreglue+0x4c>
    4608:	11000304 	addi	r4,r2,12
    460c:	10000015 	stw	zero,0(r2)
    4610:	14800115 	stw	r18,4(r2)
    4614:	11000215 	stw	r4,8(r2)
    4618:	89801a04 	addi	r6,r17,104
    461c:	000b883a 	mov	r5,zero
    4620:	0005a4c0 	call	5a4c <memset>
    4624:	8005883a 	mov	r2,r16
    4628:	dfc00317 	ldw	ra,12(sp)
    462c:	dc800217 	ldw	r18,8(sp)
    4630:	dc400117 	ldw	r17,4(sp)
    4634:	dc000017 	ldw	r16,0(sp)
    4638:	dec00404 	addi	sp,sp,16
    463c:	f800283a 	ret

00004640 <__sfp>:
    4640:	defffb04 	addi	sp,sp,-20
    4644:	dc000015 	stw	r16,0(sp)
    4648:	040000b4 	movhi	r16,2
    464c:	842e6504 	addi	r16,r16,-18028
    4650:	dcc00315 	stw	r19,12(sp)
    4654:	2027883a 	mov	r19,r4
    4658:	81000017 	ldw	r4,0(r16)
    465c:	dfc00415 	stw	ra,16(sp)
    4660:	dc800215 	stw	r18,8(sp)
    4664:	20800e17 	ldw	r2,56(r4)
    4668:	dc400115 	stw	r17,4(sp)
    466c:	1000021e 	bne	r2,zero,4678 <__sfp+0x38>
    4670:	00044340 	call	4434 <__sinit.part.1>
    4674:	81000017 	ldw	r4,0(r16)
    4678:	2480b804 	addi	r18,r4,736
    467c:	047fffc4 	movi	r17,-1
    4680:	91000117 	ldw	r4,4(r18)
    4684:	94000217 	ldw	r16,8(r18)
    4688:	213fffc4 	addi	r4,r4,-1
    468c:	20000a16 	blt	r4,zero,46b8 <__sfp+0x78>
    4690:	8080030f 	ldh	r2,12(r16)
    4694:	10000c26 	beq	r2,zero,46c8 <__sfp+0x88>
    4698:	80c01d04 	addi	r3,r16,116
    469c:	00000206 	br	46a8 <__sfp+0x68>
    46a0:	18bfe60f 	ldh	r2,-104(r3)
    46a4:	10000826 	beq	r2,zero,46c8 <__sfp+0x88>
    46a8:	213fffc4 	addi	r4,r4,-1
    46ac:	1c3ffd04 	addi	r16,r3,-12
    46b0:	18c01a04 	addi	r3,r3,104
    46b4:	247ffa1e 	bne	r4,r17,46a0 <__sfp+0x60>
    46b8:	90800017 	ldw	r2,0(r18)
    46bc:	10001d26 	beq	r2,zero,4734 <__sfp+0xf4>
    46c0:	1025883a 	mov	r18,r2
    46c4:	003fee06 	br	4680 <__sfp+0x40>
    46c8:	00bfffc4 	movi	r2,-1
    46cc:	8080038d 	sth	r2,14(r16)
    46d0:	00800044 	movi	r2,1
    46d4:	8080030d 	sth	r2,12(r16)
    46d8:	80001915 	stw	zero,100(r16)
    46dc:	80000015 	stw	zero,0(r16)
    46e0:	80000215 	stw	zero,8(r16)
    46e4:	80000115 	stw	zero,4(r16)
    46e8:	80000415 	stw	zero,16(r16)
    46ec:	80000515 	stw	zero,20(r16)
    46f0:	80000615 	stw	zero,24(r16)
    46f4:	01800204 	movi	r6,8
    46f8:	000b883a 	mov	r5,zero
    46fc:	81001704 	addi	r4,r16,92
    4700:	0005a4c0 	call	5a4c <memset>
    4704:	8005883a 	mov	r2,r16
    4708:	80000c15 	stw	zero,48(r16)
    470c:	80000d15 	stw	zero,52(r16)
    4710:	80001115 	stw	zero,68(r16)
    4714:	80001215 	stw	zero,72(r16)
    4718:	dfc00417 	ldw	ra,16(sp)
    471c:	dcc00317 	ldw	r19,12(sp)
    4720:	dc800217 	ldw	r18,8(sp)
    4724:	dc400117 	ldw	r17,4(sp)
    4728:	dc000017 	ldw	r16,0(sp)
    472c:	dec00504 	addi	sp,sp,20
    4730:	f800283a 	ret
    4734:	01400104 	movi	r5,4
    4738:	9809883a 	mov	r4,r19
    473c:	00045d80 	call	45d8 <__sfmoreglue>
    4740:	90800015 	stw	r2,0(r18)
    4744:	103fde1e 	bne	r2,zero,46c0 <__sfp+0x80>
    4748:	00800304 	movi	r2,12
    474c:	98800015 	stw	r2,0(r19)
    4750:	0005883a 	mov	r2,zero
    4754:	003ff006 	br	4718 <__sfp+0xd8>

00004758 <_cleanup>:
    4758:	008000b4 	movhi	r2,2
    475c:	10ae6504 	addi	r2,r2,-18028
    4760:	11000017 	ldw	r4,0(r2)
    4764:	01400074 	movhi	r5,1
    4768:	2961aa04 	addi	r5,r5,-31064
    476c:	0004cb81 	jmpi	4cb8 <_fwalk_reent>

00004770 <__sinit>:
    4770:	20800e17 	ldw	r2,56(r4)
    4774:	10000126 	beq	r2,zero,477c <__sinit+0xc>
    4778:	f800283a 	ret
    477c:	00044341 	jmpi	4434 <__sinit.part.1>

00004780 <__sfp_lock_acquire>:
    4780:	f800283a 	ret

00004784 <__sfp_lock_release>:
    4784:	f800283a 	ret

00004788 <__sinit_lock_acquire>:
    4788:	f800283a 	ret

0000478c <__sinit_lock_release>:
    478c:	f800283a 	ret

00004790 <__fp_lock_all>:
    4790:	008000b4 	movhi	r2,2
    4794:	10ae6604 	addi	r2,r2,-18024
    4798:	11000017 	ldw	r4,0(r2)
    479c:	01400034 	movhi	r5,0
    47a0:	29517404 	addi	r5,r5,17872
    47a4:	0004bf41 	jmpi	4bf4 <_fwalk>

000047a8 <__fp_unlock_all>:
    47a8:	008000b4 	movhi	r2,2
    47ac:	10ae6604 	addi	r2,r2,-18024
    47b0:	11000017 	ldw	r4,0(r2)
    47b4:	01400034 	movhi	r5,0
    47b8:	29510804 	addi	r5,r5,17440
    47bc:	0004bf41 	jmpi	4bf4 <_fwalk>

000047c0 <_malloc_trim_r>:
    47c0:	defffb04 	addi	sp,sp,-20
    47c4:	dcc00315 	stw	r19,12(sp)
    47c8:	04c000b4 	movhi	r19,2
    47cc:	dc800215 	stw	r18,8(sp)
    47d0:	dc400115 	stw	r17,4(sp)
    47d4:	dc000015 	stw	r16,0(sp)
    47d8:	dfc00415 	stw	ra,16(sp)
    47dc:	2821883a 	mov	r16,r5
    47e0:	9ce80f04 	addi	r19,r19,-24516
    47e4:	2025883a 	mov	r18,r4
    47e8:	000d7b80 	call	d7b8 <__malloc_lock>
    47ec:	98800217 	ldw	r2,8(r19)
    47f0:	14400117 	ldw	r17,4(r2)
    47f4:	00bfff04 	movi	r2,-4
    47f8:	88a2703a 	and	r17,r17,r2
    47fc:	8c21c83a 	sub	r16,r17,r16
    4800:	8403fbc4 	addi	r16,r16,4079
    4804:	8020d33a 	srli	r16,r16,12
    4808:	0083ffc4 	movi	r2,4095
    480c:	843fffc4 	addi	r16,r16,-1
    4810:	8020933a 	slli	r16,r16,12
    4814:	1400060e 	bge	r2,r16,4830 <_malloc_trim_r+0x70>
    4818:	000b883a 	mov	r5,zero
    481c:	9009883a 	mov	r4,r18
    4820:	0006be40 	call	6be4 <_sbrk_r>
    4824:	98c00217 	ldw	r3,8(r19)
    4828:	1c47883a 	add	r3,r3,r17
    482c:	10c00a26 	beq	r2,r3,4858 <_malloc_trim_r+0x98>
    4830:	9009883a 	mov	r4,r18
    4834:	000d8f00 	call	d8f0 <__malloc_unlock>
    4838:	0005883a 	mov	r2,zero
    483c:	dfc00417 	ldw	ra,16(sp)
    4840:	dcc00317 	ldw	r19,12(sp)
    4844:	dc800217 	ldw	r18,8(sp)
    4848:	dc400117 	ldw	r17,4(sp)
    484c:	dc000017 	ldw	r16,0(sp)
    4850:	dec00504 	addi	sp,sp,20
    4854:	f800283a 	ret
    4858:	040bc83a 	sub	r5,zero,r16
    485c:	9009883a 	mov	r4,r18
    4860:	0006be40 	call	6be4 <_sbrk_r>
    4864:	00ffffc4 	movi	r3,-1
    4868:	10c00d26 	beq	r2,r3,48a0 <_malloc_trim_r+0xe0>
    486c:	00c000b4 	movhi	r3,2
    4870:	18f67504 	addi	r3,r3,-9772
    4874:	18800017 	ldw	r2,0(r3)
    4878:	99000217 	ldw	r4,8(r19)
    487c:	8c23c83a 	sub	r17,r17,r16
    4880:	8c400054 	ori	r17,r17,1
    4884:	1421c83a 	sub	r16,r2,r16
    4888:	24400115 	stw	r17,4(r4)
    488c:	9009883a 	mov	r4,r18
    4890:	1c000015 	stw	r16,0(r3)
    4894:	000d8f00 	call	d8f0 <__malloc_unlock>
    4898:	00800044 	movi	r2,1
    489c:	003fe706 	br	483c <_malloc_trim_r+0x7c>
    48a0:	000b883a 	mov	r5,zero
    48a4:	9009883a 	mov	r4,r18
    48a8:	0006be40 	call	6be4 <_sbrk_r>
    48ac:	99000217 	ldw	r4,8(r19)
    48b0:	014003c4 	movi	r5,15
    48b4:	1107c83a 	sub	r3,r2,r4
    48b8:	28ffdd0e 	bge	r5,r3,4830 <_malloc_trim_r+0x70>
    48bc:	014000b4 	movhi	r5,2
    48c0:	296e6804 	addi	r5,r5,-18016
    48c4:	29400017 	ldw	r5,0(r5)
    48c8:	18c00054 	ori	r3,r3,1
    48cc:	20c00115 	stw	r3,4(r4)
    48d0:	00c000b4 	movhi	r3,2
    48d4:	1145c83a 	sub	r2,r2,r5
    48d8:	18f67504 	addi	r3,r3,-9772
    48dc:	18800015 	stw	r2,0(r3)
    48e0:	003fd306 	br	4830 <_malloc_trim_r+0x70>

000048e4 <_free_r>:
    48e4:	28004126 	beq	r5,zero,49ec <_free_r+0x108>
    48e8:	defffd04 	addi	sp,sp,-12
    48ec:	dc400115 	stw	r17,4(sp)
    48f0:	dc000015 	stw	r16,0(sp)
    48f4:	2023883a 	mov	r17,r4
    48f8:	2821883a 	mov	r16,r5
    48fc:	dfc00215 	stw	ra,8(sp)
    4900:	000d7b80 	call	d7b8 <__malloc_lock>
    4904:	81ffff17 	ldw	r7,-4(r16)
    4908:	00bfff84 	movi	r2,-2
    490c:	010000b4 	movhi	r4,2
    4910:	81bffe04 	addi	r6,r16,-8
    4914:	3884703a 	and	r2,r7,r2
    4918:	21280f04 	addi	r4,r4,-24516
    491c:	308b883a 	add	r5,r6,r2
    4920:	2a400117 	ldw	r9,4(r5)
    4924:	22000217 	ldw	r8,8(r4)
    4928:	00ffff04 	movi	r3,-4
    492c:	48c6703a 	and	r3,r9,r3
    4930:	2a005726 	beq	r5,r8,4a90 <_free_r+0x1ac>
    4934:	28c00115 	stw	r3,4(r5)
    4938:	39c0004c 	andi	r7,r7,1
    493c:	3800091e 	bne	r7,zero,4964 <_free_r+0x80>
    4940:	823ffe17 	ldw	r8,-8(r16)
    4944:	22400204 	addi	r9,r4,8
    4948:	320dc83a 	sub	r6,r6,r8
    494c:	31c00217 	ldw	r7,8(r6)
    4950:	1205883a 	add	r2,r2,r8
    4954:	3a406526 	beq	r7,r9,4aec <_free_r+0x208>
    4958:	32000317 	ldw	r8,12(r6)
    495c:	3a000315 	stw	r8,12(r7)
    4960:	41c00215 	stw	r7,8(r8)
    4964:	28cf883a 	add	r7,r5,r3
    4968:	39c00117 	ldw	r7,4(r7)
    496c:	39c0004c 	andi	r7,r7,1
    4970:	38003a26 	beq	r7,zero,4a5c <_free_r+0x178>
    4974:	10c00054 	ori	r3,r2,1
    4978:	30c00115 	stw	r3,4(r6)
    497c:	3087883a 	add	r3,r6,r2
    4980:	18800015 	stw	r2,0(r3)
    4984:	00c07fc4 	movi	r3,511
    4988:	18801936 	bltu	r3,r2,49f0 <_free_r+0x10c>
    498c:	1004d0fa 	srli	r2,r2,3
    4990:	01c00044 	movi	r7,1
    4994:	21400117 	ldw	r5,4(r4)
    4998:	10c00044 	addi	r3,r2,1
    499c:	18c7883a 	add	r3,r3,r3
    49a0:	1005d0ba 	srai	r2,r2,2
    49a4:	18c7883a 	add	r3,r3,r3
    49a8:	18c7883a 	add	r3,r3,r3
    49ac:	1907883a 	add	r3,r3,r4
    49b0:	3884983a 	sll	r2,r7,r2
    49b4:	19c00017 	ldw	r7,0(r3)
    49b8:	1a3ffe04 	addi	r8,r3,-8
    49bc:	1144b03a 	or	r2,r2,r5
    49c0:	32000315 	stw	r8,12(r6)
    49c4:	31c00215 	stw	r7,8(r6)
    49c8:	20800115 	stw	r2,4(r4)
    49cc:	19800015 	stw	r6,0(r3)
    49d0:	39800315 	stw	r6,12(r7)
    49d4:	8809883a 	mov	r4,r17
    49d8:	dfc00217 	ldw	ra,8(sp)
    49dc:	dc400117 	ldw	r17,4(sp)
    49e0:	dc000017 	ldw	r16,0(sp)
    49e4:	dec00304 	addi	sp,sp,12
    49e8:	000d8f01 	jmpi	d8f0 <__malloc_unlock>
    49ec:	f800283a 	ret
    49f0:	100ad27a 	srli	r5,r2,9
    49f4:	00c00104 	movi	r3,4
    49f8:	19404a36 	bltu	r3,r5,4b24 <_free_r+0x240>
    49fc:	100ad1ba 	srli	r5,r2,6
    4a00:	28c00e44 	addi	r3,r5,57
    4a04:	18c7883a 	add	r3,r3,r3
    4a08:	29400e04 	addi	r5,r5,56
    4a0c:	18c7883a 	add	r3,r3,r3
    4a10:	18c7883a 	add	r3,r3,r3
    4a14:	1909883a 	add	r4,r3,r4
    4a18:	20c00017 	ldw	r3,0(r4)
    4a1c:	01c000b4 	movhi	r7,2
    4a20:	213ffe04 	addi	r4,r4,-8
    4a24:	39e80f04 	addi	r7,r7,-24516
    4a28:	20c04426 	beq	r4,r3,4b3c <_free_r+0x258>
    4a2c:	01ffff04 	movi	r7,-4
    4a30:	19400117 	ldw	r5,4(r3)
    4a34:	29ca703a 	and	r5,r5,r7
    4a38:	1140022e 	bgeu	r2,r5,4a44 <_free_r+0x160>
    4a3c:	18c00217 	ldw	r3,8(r3)
    4a40:	20fffb1e 	bne	r4,r3,4a30 <_free_r+0x14c>
    4a44:	19000317 	ldw	r4,12(r3)
    4a48:	31000315 	stw	r4,12(r6)
    4a4c:	30c00215 	stw	r3,8(r6)
    4a50:	21800215 	stw	r6,8(r4)
    4a54:	19800315 	stw	r6,12(r3)
    4a58:	003fde06 	br	49d4 <_free_r+0xf0>
    4a5c:	29c00217 	ldw	r7,8(r5)
    4a60:	10c5883a 	add	r2,r2,r3
    4a64:	00c000b4 	movhi	r3,2
    4a68:	18e81104 	addi	r3,r3,-24508
    4a6c:	38c03b26 	beq	r7,r3,4b5c <_free_r+0x278>
    4a70:	2a000317 	ldw	r8,12(r5)
    4a74:	11400054 	ori	r5,r2,1
    4a78:	3087883a 	add	r3,r6,r2
    4a7c:	3a000315 	stw	r8,12(r7)
    4a80:	41c00215 	stw	r7,8(r8)
    4a84:	31400115 	stw	r5,4(r6)
    4a88:	18800015 	stw	r2,0(r3)
    4a8c:	003fbd06 	br	4984 <_free_r+0xa0>
    4a90:	39c0004c 	andi	r7,r7,1
    4a94:	10c5883a 	add	r2,r2,r3
    4a98:	3800071e 	bne	r7,zero,4ab8 <_free_r+0x1d4>
    4a9c:	81fffe17 	ldw	r7,-8(r16)
    4aa0:	31cdc83a 	sub	r6,r6,r7
    4aa4:	30c00317 	ldw	r3,12(r6)
    4aa8:	31400217 	ldw	r5,8(r6)
    4aac:	11c5883a 	add	r2,r2,r7
    4ab0:	28c00315 	stw	r3,12(r5)
    4ab4:	19400215 	stw	r5,8(r3)
    4ab8:	10c00054 	ori	r3,r2,1
    4abc:	30c00115 	stw	r3,4(r6)
    4ac0:	00c000b4 	movhi	r3,2
    4ac4:	18ee6904 	addi	r3,r3,-18012
    4ac8:	18c00017 	ldw	r3,0(r3)
    4acc:	21800215 	stw	r6,8(r4)
    4ad0:	10ffc036 	bltu	r2,r3,49d4 <_free_r+0xf0>
    4ad4:	008000b4 	movhi	r2,2
    4ad8:	10b65004 	addi	r2,r2,-9920
    4adc:	11400017 	ldw	r5,0(r2)
    4ae0:	8809883a 	mov	r4,r17
    4ae4:	00047c00 	call	47c0 <_malloc_trim_r>
    4ae8:	003fba06 	br	49d4 <_free_r+0xf0>
    4aec:	28c9883a 	add	r4,r5,r3
    4af0:	21000117 	ldw	r4,4(r4)
    4af4:	2100004c 	andi	r4,r4,1
    4af8:	2000391e 	bne	r4,zero,4be0 <_free_r+0x2fc>
    4afc:	29c00217 	ldw	r7,8(r5)
    4b00:	29000317 	ldw	r4,12(r5)
    4b04:	1885883a 	add	r2,r3,r2
    4b08:	10c00054 	ori	r3,r2,1
    4b0c:	39000315 	stw	r4,12(r7)
    4b10:	21c00215 	stw	r7,8(r4)
    4b14:	30c00115 	stw	r3,4(r6)
    4b18:	308d883a 	add	r6,r6,r2
    4b1c:	30800015 	stw	r2,0(r6)
    4b20:	003fac06 	br	49d4 <_free_r+0xf0>
    4b24:	00c00504 	movi	r3,20
    4b28:	19401536 	bltu	r3,r5,4b80 <_free_r+0x29c>
    4b2c:	28c01704 	addi	r3,r5,92
    4b30:	18c7883a 	add	r3,r3,r3
    4b34:	294016c4 	addi	r5,r5,91
    4b38:	003fb406 	br	4a0c <_free_r+0x128>
    4b3c:	280bd0ba 	srai	r5,r5,2
    4b40:	00c00044 	movi	r3,1
    4b44:	38800117 	ldw	r2,4(r7)
    4b48:	194a983a 	sll	r5,r3,r5
    4b4c:	2007883a 	mov	r3,r4
    4b50:	2884b03a 	or	r2,r5,r2
    4b54:	38800115 	stw	r2,4(r7)
    4b58:	003fbb06 	br	4a48 <_free_r+0x164>
    4b5c:	21800515 	stw	r6,20(r4)
    4b60:	21800415 	stw	r6,16(r4)
    4b64:	10c00054 	ori	r3,r2,1
    4b68:	31c00315 	stw	r7,12(r6)
    4b6c:	31c00215 	stw	r7,8(r6)
    4b70:	30c00115 	stw	r3,4(r6)
    4b74:	308d883a 	add	r6,r6,r2
    4b78:	30800015 	stw	r2,0(r6)
    4b7c:	003f9506 	br	49d4 <_free_r+0xf0>
    4b80:	00c01504 	movi	r3,84
    4b84:	19400536 	bltu	r3,r5,4b9c <_free_r+0x2b8>
    4b88:	100ad33a 	srli	r5,r2,12
    4b8c:	28c01bc4 	addi	r3,r5,111
    4b90:	18c7883a 	add	r3,r3,r3
    4b94:	29401b84 	addi	r5,r5,110
    4b98:	003f9c06 	br	4a0c <_free_r+0x128>
    4b9c:	00c05504 	movi	r3,340
    4ba0:	19400536 	bltu	r3,r5,4bb8 <_free_r+0x2d4>
    4ba4:	100ad3fa 	srli	r5,r2,15
    4ba8:	28c01e04 	addi	r3,r5,120
    4bac:	18c7883a 	add	r3,r3,r3
    4bb0:	29401dc4 	addi	r5,r5,119
    4bb4:	003f9506 	br	4a0c <_free_r+0x128>
    4bb8:	00c15504 	movi	r3,1364
    4bbc:	19400536 	bltu	r3,r5,4bd4 <_free_r+0x2f0>
    4bc0:	100ad4ba 	srli	r5,r2,18
    4bc4:	28c01f44 	addi	r3,r5,125
    4bc8:	18c7883a 	add	r3,r3,r3
    4bcc:	29401f04 	addi	r5,r5,124
    4bd0:	003f8e06 	br	4a0c <_free_r+0x128>
    4bd4:	00c03f84 	movi	r3,254
    4bd8:	01401f84 	movi	r5,126
    4bdc:	003f8b06 	br	4a0c <_free_r+0x128>
    4be0:	10c00054 	ori	r3,r2,1
    4be4:	30c00115 	stw	r3,4(r6)
    4be8:	308d883a 	add	r6,r6,r2
    4bec:	30800015 	stw	r2,0(r6)
    4bf0:	003f7806 	br	49d4 <_free_r+0xf0>

00004bf4 <_fwalk>:
    4bf4:	defff704 	addi	sp,sp,-36
    4bf8:	dd000415 	stw	r20,16(sp)
    4bfc:	dfc00815 	stw	ra,32(sp)
    4c00:	ddc00715 	stw	r23,28(sp)
    4c04:	dd800615 	stw	r22,24(sp)
    4c08:	dd400515 	stw	r21,20(sp)
    4c0c:	dcc00315 	stw	r19,12(sp)
    4c10:	dc800215 	stw	r18,8(sp)
    4c14:	dc400115 	stw	r17,4(sp)
    4c18:	dc000015 	stw	r16,0(sp)
    4c1c:	2500b804 	addi	r20,r4,736
    4c20:	a0002326 	beq	r20,zero,4cb0 <_fwalk+0xbc>
    4c24:	282b883a 	mov	r21,r5
    4c28:	002f883a 	mov	r23,zero
    4c2c:	05800044 	movi	r22,1
    4c30:	04ffffc4 	movi	r19,-1
    4c34:	a4400117 	ldw	r17,4(r20)
    4c38:	a4800217 	ldw	r18,8(r20)
    4c3c:	8c7fffc4 	addi	r17,r17,-1
    4c40:	88000d16 	blt	r17,zero,4c78 <_fwalk+0x84>
    4c44:	94000304 	addi	r16,r18,12
    4c48:	94800384 	addi	r18,r18,14
    4c4c:	8080000b 	ldhu	r2,0(r16)
    4c50:	8c7fffc4 	addi	r17,r17,-1
    4c54:	813ffd04 	addi	r4,r16,-12
    4c58:	b080042e 	bgeu	r22,r2,4c6c <_fwalk+0x78>
    4c5c:	9080000f 	ldh	r2,0(r18)
    4c60:	14c00226 	beq	r2,r19,4c6c <_fwalk+0x78>
    4c64:	a83ee83a 	callr	r21
    4c68:	b8aeb03a 	or	r23,r23,r2
    4c6c:	84001a04 	addi	r16,r16,104
    4c70:	94801a04 	addi	r18,r18,104
    4c74:	8cfff51e 	bne	r17,r19,4c4c <_fwalk+0x58>
    4c78:	a5000017 	ldw	r20,0(r20)
    4c7c:	a03fed1e 	bne	r20,zero,4c34 <_fwalk+0x40>
    4c80:	b805883a 	mov	r2,r23
    4c84:	dfc00817 	ldw	ra,32(sp)
    4c88:	ddc00717 	ldw	r23,28(sp)
    4c8c:	dd800617 	ldw	r22,24(sp)
    4c90:	dd400517 	ldw	r21,20(sp)
    4c94:	dd000417 	ldw	r20,16(sp)
    4c98:	dcc00317 	ldw	r19,12(sp)
    4c9c:	dc800217 	ldw	r18,8(sp)
    4ca0:	dc400117 	ldw	r17,4(sp)
    4ca4:	dc000017 	ldw	r16,0(sp)
    4ca8:	dec00904 	addi	sp,sp,36
    4cac:	f800283a 	ret
    4cb0:	002f883a 	mov	r23,zero
    4cb4:	003ff206 	br	4c80 <_fwalk+0x8c>

00004cb8 <_fwalk_reent>:
    4cb8:	defff704 	addi	sp,sp,-36
    4cbc:	dd000415 	stw	r20,16(sp)
    4cc0:	dfc00815 	stw	ra,32(sp)
    4cc4:	ddc00715 	stw	r23,28(sp)
    4cc8:	dd800615 	stw	r22,24(sp)
    4ccc:	dd400515 	stw	r21,20(sp)
    4cd0:	dcc00315 	stw	r19,12(sp)
    4cd4:	dc800215 	stw	r18,8(sp)
    4cd8:	dc400115 	stw	r17,4(sp)
    4cdc:	dc000015 	stw	r16,0(sp)
    4ce0:	2500b804 	addi	r20,r4,736
    4ce4:	a0002326 	beq	r20,zero,4d74 <_fwalk_reent+0xbc>
    4ce8:	282b883a 	mov	r21,r5
    4cec:	2027883a 	mov	r19,r4
    4cf0:	002f883a 	mov	r23,zero
    4cf4:	05800044 	movi	r22,1
    4cf8:	04bfffc4 	movi	r18,-1
    4cfc:	a4400117 	ldw	r17,4(r20)
    4d00:	a4000217 	ldw	r16,8(r20)
    4d04:	8c7fffc4 	addi	r17,r17,-1
    4d08:	88000c16 	blt	r17,zero,4d3c <_fwalk_reent+0x84>
    4d0c:	84000304 	addi	r16,r16,12
    4d10:	8080000b 	ldhu	r2,0(r16)
    4d14:	8c7fffc4 	addi	r17,r17,-1
    4d18:	817ffd04 	addi	r5,r16,-12
    4d1c:	b080052e 	bgeu	r22,r2,4d34 <_fwalk_reent+0x7c>
    4d20:	8080008f 	ldh	r2,2(r16)
    4d24:	9809883a 	mov	r4,r19
    4d28:	14800226 	beq	r2,r18,4d34 <_fwalk_reent+0x7c>
    4d2c:	a83ee83a 	callr	r21
    4d30:	b8aeb03a 	or	r23,r23,r2
    4d34:	84001a04 	addi	r16,r16,104
    4d38:	8cbff51e 	bne	r17,r18,4d10 <_fwalk_reent+0x58>
    4d3c:	a5000017 	ldw	r20,0(r20)
    4d40:	a03fee1e 	bne	r20,zero,4cfc <_fwalk_reent+0x44>
    4d44:	b805883a 	mov	r2,r23
    4d48:	dfc00817 	ldw	ra,32(sp)
    4d4c:	ddc00717 	ldw	r23,28(sp)
    4d50:	dd800617 	ldw	r22,24(sp)
    4d54:	dd400517 	ldw	r21,20(sp)
    4d58:	dd000417 	ldw	r20,16(sp)
    4d5c:	dcc00317 	ldw	r19,12(sp)
    4d60:	dc800217 	ldw	r18,8(sp)
    4d64:	dc400117 	ldw	r17,4(sp)
    4d68:	dc000017 	ldw	r16,0(sp)
    4d6c:	dec00904 	addi	sp,sp,36
    4d70:	f800283a 	ret
    4d74:	002f883a 	mov	r23,zero
    4d78:	003ff206 	br	4d44 <_fwalk_reent+0x8c>

00004d7c <_setlocale_r>:
    4d7c:	30001b26 	beq	r6,zero,4dec <_setlocale_r+0x70>
    4d80:	014000b4 	movhi	r5,2
    4d84:	defffe04 	addi	sp,sp,-8
    4d88:	2965ab04 	addi	r5,r5,-26964
    4d8c:	3009883a 	mov	r4,r6
    4d90:	dc000015 	stw	r16,0(sp)
    4d94:	dfc00115 	stw	ra,4(sp)
    4d98:	3021883a 	mov	r16,r6
    4d9c:	0006d740 	call	6d74 <strcmp>
    4da0:	1000061e 	bne	r2,zero,4dbc <_setlocale_r+0x40>
    4da4:	008000b4 	movhi	r2,2
    4da8:	10a5aa04 	addi	r2,r2,-26968
    4dac:	dfc00117 	ldw	ra,4(sp)
    4db0:	dc000017 	ldw	r16,0(sp)
    4db4:	dec00204 	addi	sp,sp,8
    4db8:	f800283a 	ret
    4dbc:	014000b4 	movhi	r5,2
    4dc0:	2965aa04 	addi	r5,r5,-26968
    4dc4:	8009883a 	mov	r4,r16
    4dc8:	0006d740 	call	6d74 <strcmp>
    4dcc:	103ff526 	beq	r2,zero,4da4 <_setlocale_r+0x28>
    4dd0:	014000b4 	movhi	r5,2
    4dd4:	29659504 	addi	r5,r5,-27052
    4dd8:	8009883a 	mov	r4,r16
    4ddc:	0006d740 	call	6d74 <strcmp>
    4de0:	103ff026 	beq	r2,zero,4da4 <_setlocale_r+0x28>
    4de4:	0005883a 	mov	r2,zero
    4de8:	003ff006 	br	4dac <_setlocale_r+0x30>
    4dec:	008000b4 	movhi	r2,2
    4df0:	10a5aa04 	addi	r2,r2,-26968
    4df4:	f800283a 	ret

00004df8 <__locale_charset>:
    4df8:	008000b4 	movhi	r2,2
    4dfc:	10a7f904 	addi	r2,r2,-24604
    4e00:	f800283a 	ret

00004e04 <__locale_mb_cur_max>:
    4e04:	008000b4 	movhi	r2,2
    4e08:	10ae6704 	addi	r2,r2,-18020
    4e0c:	10800017 	ldw	r2,0(r2)
    4e10:	f800283a 	ret

00004e14 <__locale_msgcharset>:
    4e14:	008000b4 	movhi	r2,2
    4e18:	10a7f104 	addi	r2,r2,-24636
    4e1c:	f800283a 	ret

00004e20 <__locale_cjk_lang>:
    4e20:	0005883a 	mov	r2,zero
    4e24:	f800283a 	ret

00004e28 <_localeconv_r>:
    4e28:	008000b4 	movhi	r2,2
    4e2c:	10a80104 	addi	r2,r2,-24572
    4e30:	f800283a 	ret

00004e34 <setlocale>:
    4e34:	008000b4 	movhi	r2,2
    4e38:	10ae6604 	addi	r2,r2,-18024
    4e3c:	280d883a 	mov	r6,r5
    4e40:	200b883a 	mov	r5,r4
    4e44:	11000017 	ldw	r4,0(r2)
    4e48:	0004d7c1 	jmpi	4d7c <_setlocale_r>

00004e4c <localeconv>:
    4e4c:	008000b4 	movhi	r2,2
    4e50:	10a80104 	addi	r2,r2,-24572
    4e54:	f800283a 	ret

00004e58 <__smakebuf_r>:
    4e58:	2880030b 	ldhu	r2,12(r5)
    4e5c:	10c0008c 	andi	r3,r2,2
    4e60:	1800411e 	bne	r3,zero,4f68 <__smakebuf_r+0x110>
    4e64:	deffec04 	addi	sp,sp,-80
    4e68:	dc000f15 	stw	r16,60(sp)
    4e6c:	2821883a 	mov	r16,r5
    4e70:	2940038f 	ldh	r5,14(r5)
    4e74:	dc401015 	stw	r17,64(sp)
    4e78:	dfc01315 	stw	ra,76(sp)
    4e7c:	dcc01215 	stw	r19,72(sp)
    4e80:	dc801115 	stw	r18,68(sp)
    4e84:	2023883a 	mov	r17,r4
    4e88:	28001c16 	blt	r5,zero,4efc <__smakebuf_r+0xa4>
    4e8c:	d80d883a 	mov	r6,sp
    4e90:	00089b40 	call	89b4 <_fstat_r>
    4e94:	10001816 	blt	r2,zero,4ef8 <__smakebuf_r+0xa0>
    4e98:	d8800117 	ldw	r2,4(sp)
    4e9c:	00e00014 	movui	r3,32768
    4ea0:	10bc000c 	andi	r2,r2,61440
    4ea4:	14c80020 	cmpeqi	r19,r2,8192
    4ea8:	10c03726 	beq	r2,r3,4f88 <__smakebuf_r+0x130>
    4eac:	80c0030b 	ldhu	r3,12(r16)
    4eb0:	18c20014 	ori	r3,r3,2048
    4eb4:	80c0030d 	sth	r3,12(r16)
    4eb8:	00c80004 	movi	r3,8192
    4ebc:	10c0521e 	bne	r2,r3,5008 <__smakebuf_r+0x1b0>
    4ec0:	8140038f 	ldh	r5,14(r16)
    4ec4:	8809883a 	mov	r4,r17
    4ec8:	0008ecc0 	call	8ecc <_isatty_r>
    4ecc:	10004c26 	beq	r2,zero,5000 <__smakebuf_r+0x1a8>
    4ed0:	8080030b 	ldhu	r2,12(r16)
    4ed4:	80c010c4 	addi	r3,r16,67
    4ed8:	80c00015 	stw	r3,0(r16)
    4edc:	10800054 	ori	r2,r2,1
    4ee0:	8080030d 	sth	r2,12(r16)
    4ee4:	00800044 	movi	r2,1
    4ee8:	80c00415 	stw	r3,16(r16)
    4eec:	80800515 	stw	r2,20(r16)
    4ef0:	04810004 	movi	r18,1024
    4ef4:	00000706 	br	4f14 <__smakebuf_r+0xbc>
    4ef8:	8080030b 	ldhu	r2,12(r16)
    4efc:	10c0200c 	andi	r3,r2,128
    4f00:	18001f1e 	bne	r3,zero,4f80 <__smakebuf_r+0x128>
    4f04:	04810004 	movi	r18,1024
    4f08:	10820014 	ori	r2,r2,2048
    4f0c:	8080030d 	sth	r2,12(r16)
    4f10:	0027883a 	mov	r19,zero
    4f14:	900b883a 	mov	r5,r18
    4f18:	8809883a 	mov	r4,r17
    4f1c:	00050140 	call	5014 <_malloc_r>
    4f20:	10002c26 	beq	r2,zero,4fd4 <__smakebuf_r+0x17c>
    4f24:	80c0030b 	ldhu	r3,12(r16)
    4f28:	01000034 	movhi	r4,0
    4f2c:	21110a04 	addi	r4,r4,17448
    4f30:	89000f15 	stw	r4,60(r17)
    4f34:	18c02014 	ori	r3,r3,128
    4f38:	80c0030d 	sth	r3,12(r16)
    4f3c:	80800015 	stw	r2,0(r16)
    4f40:	80800415 	stw	r2,16(r16)
    4f44:	84800515 	stw	r18,20(r16)
    4f48:	98001a1e 	bne	r19,zero,4fb4 <__smakebuf_r+0x15c>
    4f4c:	dfc01317 	ldw	ra,76(sp)
    4f50:	dcc01217 	ldw	r19,72(sp)
    4f54:	dc801117 	ldw	r18,68(sp)
    4f58:	dc401017 	ldw	r17,64(sp)
    4f5c:	dc000f17 	ldw	r16,60(sp)
    4f60:	dec01404 	addi	sp,sp,80
    4f64:	f800283a 	ret
    4f68:	288010c4 	addi	r2,r5,67
    4f6c:	28800015 	stw	r2,0(r5)
    4f70:	28800415 	stw	r2,16(r5)
    4f74:	00800044 	movi	r2,1
    4f78:	28800515 	stw	r2,20(r5)
    4f7c:	f800283a 	ret
    4f80:	04801004 	movi	r18,64
    4f84:	003fe006 	br	4f08 <__smakebuf_r+0xb0>
    4f88:	81000a17 	ldw	r4,40(r16)
    4f8c:	00c00034 	movhi	r3,0
    4f90:	18db4404 	addi	r3,r3,27920
    4f94:	20ffc51e 	bne	r4,r3,4eac <__smakebuf_r+0x54>
    4f98:	8080030b 	ldhu	r2,12(r16)
    4f9c:	04810004 	movi	r18,1024
    4fa0:	84801315 	stw	r18,76(r16)
    4fa4:	1484b03a 	or	r2,r2,r18
    4fa8:	8080030d 	sth	r2,12(r16)
    4fac:	0027883a 	mov	r19,zero
    4fb0:	003fd806 	br	4f14 <__smakebuf_r+0xbc>
    4fb4:	8140038f 	ldh	r5,14(r16)
    4fb8:	8809883a 	mov	r4,r17
    4fbc:	0008ecc0 	call	8ecc <_isatty_r>
    4fc0:	103fe226 	beq	r2,zero,4f4c <__smakebuf_r+0xf4>
    4fc4:	8080030b 	ldhu	r2,12(r16)
    4fc8:	10800054 	ori	r2,r2,1
    4fcc:	8080030d 	sth	r2,12(r16)
    4fd0:	003fde06 	br	4f4c <__smakebuf_r+0xf4>
    4fd4:	8080030b 	ldhu	r2,12(r16)
    4fd8:	10c0800c 	andi	r3,r2,512
    4fdc:	183fdb1e 	bne	r3,zero,4f4c <__smakebuf_r+0xf4>
    4fe0:	10800094 	ori	r2,r2,2
    4fe4:	80c010c4 	addi	r3,r16,67
    4fe8:	8080030d 	sth	r2,12(r16)
    4fec:	00800044 	movi	r2,1
    4ff0:	80c00015 	stw	r3,0(r16)
    4ff4:	80c00415 	stw	r3,16(r16)
    4ff8:	80800515 	stw	r2,20(r16)
    4ffc:	003fd306 	br	4f4c <__smakebuf_r+0xf4>
    5000:	04810004 	movi	r18,1024
    5004:	003fc306 	br	4f14 <__smakebuf_r+0xbc>
    5008:	0027883a 	mov	r19,zero
    500c:	04810004 	movi	r18,1024
    5010:	003fc006 	br	4f14 <__smakebuf_r+0xbc>

00005014 <_malloc_r>:
    5014:	defff504 	addi	sp,sp,-44
    5018:	dc800315 	stw	r18,12(sp)
    501c:	dfc00a15 	stw	ra,40(sp)
    5020:	df000915 	stw	fp,36(sp)
    5024:	ddc00815 	stw	r23,32(sp)
    5028:	dd800715 	stw	r22,28(sp)
    502c:	dd400615 	stw	r21,24(sp)
    5030:	dd000515 	stw	r20,20(sp)
    5034:	dcc00415 	stw	r19,16(sp)
    5038:	dc400215 	stw	r17,8(sp)
    503c:	dc000115 	stw	r16,4(sp)
    5040:	288002c4 	addi	r2,r5,11
    5044:	00c00584 	movi	r3,22
    5048:	2025883a 	mov	r18,r4
    504c:	18807f2e 	bgeu	r3,r2,524c <_malloc_r+0x238>
    5050:	047ffe04 	movi	r17,-8
    5054:	1462703a 	and	r17,r2,r17
    5058:	8800a316 	blt	r17,zero,52e8 <_malloc_r+0x2d4>
    505c:	8940a236 	bltu	r17,r5,52e8 <_malloc_r+0x2d4>
    5060:	000d7b80 	call	d7b8 <__malloc_lock>
    5064:	00807dc4 	movi	r2,503
    5068:	1441e92e 	bgeu	r2,r17,5810 <_malloc_r+0x7fc>
    506c:	8804d27a 	srli	r2,r17,9
    5070:	1000a126 	beq	r2,zero,52f8 <_malloc_r+0x2e4>
    5074:	00c00104 	movi	r3,4
    5078:	18811e36 	bltu	r3,r2,54f4 <_malloc_r+0x4e0>
    507c:	8804d1ba 	srli	r2,r17,6
    5080:	12000e44 	addi	r8,r2,57
    5084:	11c00e04 	addi	r7,r2,56
    5088:	4209883a 	add	r4,r8,r8
    508c:	04c000b4 	movhi	r19,2
    5090:	2109883a 	add	r4,r4,r4
    5094:	9ce80f04 	addi	r19,r19,-24516
    5098:	2109883a 	add	r4,r4,r4
    509c:	9909883a 	add	r4,r19,r4
    50a0:	24000117 	ldw	r16,4(r4)
    50a4:	213ffe04 	addi	r4,r4,-8
    50a8:	24009726 	beq	r4,r16,5308 <_malloc_r+0x2f4>
    50ac:	80800117 	ldw	r2,4(r16)
    50b0:	01bfff04 	movi	r6,-4
    50b4:	014003c4 	movi	r5,15
    50b8:	1184703a 	and	r2,r2,r6
    50bc:	1447c83a 	sub	r3,r2,r17
    50c0:	28c00716 	blt	r5,r3,50e0 <_malloc_r+0xcc>
    50c4:	1800920e 	bge	r3,zero,5310 <_malloc_r+0x2fc>
    50c8:	84000317 	ldw	r16,12(r16)
    50cc:	24008e26 	beq	r4,r16,5308 <_malloc_r+0x2f4>
    50d0:	80800117 	ldw	r2,4(r16)
    50d4:	1184703a 	and	r2,r2,r6
    50d8:	1447c83a 	sub	r3,r2,r17
    50dc:	28fff90e 	bge	r5,r3,50c4 <_malloc_r+0xb0>
    50e0:	3809883a 	mov	r4,r7
    50e4:	018000b4 	movhi	r6,2
    50e8:	9c000417 	ldw	r16,16(r19)
    50ec:	31a80f04 	addi	r6,r6,-24516
    50f0:	32000204 	addi	r8,r6,8
    50f4:	82013426 	beq	r16,r8,55c8 <_malloc_r+0x5b4>
    50f8:	80c00117 	ldw	r3,4(r16)
    50fc:	00bfff04 	movi	r2,-4
    5100:	188e703a 	and	r7,r3,r2
    5104:	3c45c83a 	sub	r2,r7,r17
    5108:	00c003c4 	movi	r3,15
    510c:	18811f16 	blt	r3,r2,558c <_malloc_r+0x578>
    5110:	32000515 	stw	r8,20(r6)
    5114:	32000415 	stw	r8,16(r6)
    5118:	10007f0e 	bge	r2,zero,5318 <_malloc_r+0x304>
    511c:	00807fc4 	movi	r2,511
    5120:	11c0fd36 	bltu	r2,r7,5518 <_malloc_r+0x504>
    5124:	3806d0fa 	srli	r3,r7,3
    5128:	01c00044 	movi	r7,1
    512c:	30800117 	ldw	r2,4(r6)
    5130:	19400044 	addi	r5,r3,1
    5134:	294b883a 	add	r5,r5,r5
    5138:	1807d0ba 	srai	r3,r3,2
    513c:	294b883a 	add	r5,r5,r5
    5140:	294b883a 	add	r5,r5,r5
    5144:	298b883a 	add	r5,r5,r6
    5148:	38c6983a 	sll	r3,r7,r3
    514c:	29c00017 	ldw	r7,0(r5)
    5150:	2a7ffe04 	addi	r9,r5,-8
    5154:	1886b03a 	or	r3,r3,r2
    5158:	82400315 	stw	r9,12(r16)
    515c:	81c00215 	stw	r7,8(r16)
    5160:	30c00115 	stw	r3,4(r6)
    5164:	2c000015 	stw	r16,0(r5)
    5168:	3c000315 	stw	r16,12(r7)
    516c:	2005d0ba 	srai	r2,r4,2
    5170:	01400044 	movi	r5,1
    5174:	288a983a 	sll	r5,r5,r2
    5178:	19406f36 	bltu	r3,r5,5338 <_malloc_r+0x324>
    517c:	28c4703a 	and	r2,r5,r3
    5180:	10000a1e 	bne	r2,zero,51ac <_malloc_r+0x198>
    5184:	00bfff04 	movi	r2,-4
    5188:	294b883a 	add	r5,r5,r5
    518c:	2088703a 	and	r4,r4,r2
    5190:	28c4703a 	and	r2,r5,r3
    5194:	21000104 	addi	r4,r4,4
    5198:	1000041e 	bne	r2,zero,51ac <_malloc_r+0x198>
    519c:	294b883a 	add	r5,r5,r5
    51a0:	28c4703a 	and	r2,r5,r3
    51a4:	21000104 	addi	r4,r4,4
    51a8:	103ffc26 	beq	r2,zero,519c <_malloc_r+0x188>
    51ac:	02bfff04 	movi	r10,-4
    51b0:	024003c4 	movi	r9,15
    51b4:	21800044 	addi	r6,r4,1
    51b8:	318d883a 	add	r6,r6,r6
    51bc:	318d883a 	add	r6,r6,r6
    51c0:	318d883a 	add	r6,r6,r6
    51c4:	998d883a 	add	r6,r19,r6
    51c8:	333ffe04 	addi	r12,r6,-8
    51cc:	2017883a 	mov	r11,r4
    51d0:	31800104 	addi	r6,r6,4
    51d4:	34000017 	ldw	r16,0(r6)
    51d8:	31fffd04 	addi	r7,r6,-12
    51dc:	81c0041e 	bne	r16,r7,51f0 <_malloc_r+0x1dc>
    51e0:	0000fb06 	br	55d0 <_malloc_r+0x5bc>
    51e4:	1801030e 	bge	r3,zero,55f4 <_malloc_r+0x5e0>
    51e8:	84000317 	ldw	r16,12(r16)
    51ec:	81c0f826 	beq	r16,r7,55d0 <_malloc_r+0x5bc>
    51f0:	80800117 	ldw	r2,4(r16)
    51f4:	1284703a 	and	r2,r2,r10
    51f8:	1447c83a 	sub	r3,r2,r17
    51fc:	48fff90e 	bge	r9,r3,51e4 <_malloc_r+0x1d0>
    5200:	80800317 	ldw	r2,12(r16)
    5204:	81000217 	ldw	r4,8(r16)
    5208:	89400054 	ori	r5,r17,1
    520c:	81400115 	stw	r5,4(r16)
    5210:	20800315 	stw	r2,12(r4)
    5214:	11000215 	stw	r4,8(r2)
    5218:	8463883a 	add	r17,r16,r17
    521c:	9c400515 	stw	r17,20(r19)
    5220:	9c400415 	stw	r17,16(r19)
    5224:	18800054 	ori	r2,r3,1
    5228:	88800115 	stw	r2,4(r17)
    522c:	8a000315 	stw	r8,12(r17)
    5230:	8a000215 	stw	r8,8(r17)
    5234:	88e3883a 	add	r17,r17,r3
    5238:	88c00015 	stw	r3,0(r17)
    523c:	9009883a 	mov	r4,r18
    5240:	000d8f00 	call	d8f0 <__malloc_unlock>
    5244:	80800204 	addi	r2,r16,8
    5248:	00001b06 	br	52b8 <_malloc_r+0x2a4>
    524c:	04400404 	movi	r17,16
    5250:	89402536 	bltu	r17,r5,52e8 <_malloc_r+0x2d4>
    5254:	000d7b80 	call	d7b8 <__malloc_lock>
    5258:	00800184 	movi	r2,6
    525c:	01000084 	movi	r4,2
    5260:	04c000b4 	movhi	r19,2
    5264:	1085883a 	add	r2,r2,r2
    5268:	9ce80f04 	addi	r19,r19,-24516
    526c:	1085883a 	add	r2,r2,r2
    5270:	9885883a 	add	r2,r19,r2
    5274:	14000117 	ldw	r16,4(r2)
    5278:	10fffe04 	addi	r3,r2,-8
    527c:	80c0d926 	beq	r16,r3,55e4 <_malloc_r+0x5d0>
    5280:	80c00117 	ldw	r3,4(r16)
    5284:	81000317 	ldw	r4,12(r16)
    5288:	00bfff04 	movi	r2,-4
    528c:	1884703a 	and	r2,r3,r2
    5290:	81400217 	ldw	r5,8(r16)
    5294:	8085883a 	add	r2,r16,r2
    5298:	10c00117 	ldw	r3,4(r2)
    529c:	29000315 	stw	r4,12(r5)
    52a0:	21400215 	stw	r5,8(r4)
    52a4:	18c00054 	ori	r3,r3,1
    52a8:	10c00115 	stw	r3,4(r2)
    52ac:	9009883a 	mov	r4,r18
    52b0:	000d8f00 	call	d8f0 <__malloc_unlock>
    52b4:	80800204 	addi	r2,r16,8
    52b8:	dfc00a17 	ldw	ra,40(sp)
    52bc:	df000917 	ldw	fp,36(sp)
    52c0:	ddc00817 	ldw	r23,32(sp)
    52c4:	dd800717 	ldw	r22,28(sp)
    52c8:	dd400617 	ldw	r21,24(sp)
    52cc:	dd000517 	ldw	r20,20(sp)
    52d0:	dcc00417 	ldw	r19,16(sp)
    52d4:	dc800317 	ldw	r18,12(sp)
    52d8:	dc400217 	ldw	r17,8(sp)
    52dc:	dc000117 	ldw	r16,4(sp)
    52e0:	dec00b04 	addi	sp,sp,44
    52e4:	f800283a 	ret
    52e8:	00800304 	movi	r2,12
    52ec:	90800015 	stw	r2,0(r18)
    52f0:	0005883a 	mov	r2,zero
    52f4:	003ff006 	br	52b8 <_malloc_r+0x2a4>
    52f8:	01002004 	movi	r4,128
    52fc:	02001004 	movi	r8,64
    5300:	01c00fc4 	movi	r7,63
    5304:	003f6106 	br	508c <_malloc_r+0x78>
    5308:	4009883a 	mov	r4,r8
    530c:	003f7506 	br	50e4 <_malloc_r+0xd0>
    5310:	81000317 	ldw	r4,12(r16)
    5314:	003fde06 	br	5290 <_malloc_r+0x27c>
    5318:	81c5883a 	add	r2,r16,r7
    531c:	11400117 	ldw	r5,4(r2)
    5320:	9009883a 	mov	r4,r18
    5324:	29400054 	ori	r5,r5,1
    5328:	11400115 	stw	r5,4(r2)
    532c:	000d8f00 	call	d8f0 <__malloc_unlock>
    5330:	80800204 	addi	r2,r16,8
    5334:	003fe006 	br	52b8 <_malloc_r+0x2a4>
    5338:	9c000217 	ldw	r16,8(r19)
    533c:	00bfff04 	movi	r2,-4
    5340:	85800117 	ldw	r22,4(r16)
    5344:	b0ac703a 	and	r22,r22,r2
    5348:	b4400336 	bltu	r22,r17,5358 <_malloc_r+0x344>
    534c:	b445c83a 	sub	r2,r22,r17
    5350:	00c003c4 	movi	r3,15
    5354:	18805d16 	blt	r3,r2,54cc <_malloc_r+0x4b8>
    5358:	05c000b4 	movhi	r23,2
    535c:	008000b4 	movhi	r2,2
    5360:	10b65004 	addi	r2,r2,-9920
    5364:	bdee6804 	addi	r23,r23,-18016
    5368:	15400017 	ldw	r21,0(r2)
    536c:	b8c00017 	ldw	r3,0(r23)
    5370:	00bfffc4 	movi	r2,-1
    5374:	858d883a 	add	r6,r16,r22
    5378:	8d6b883a 	add	r21,r17,r21
    537c:	1880ea26 	beq	r3,r2,5728 <_malloc_r+0x714>
    5380:	ad4403c4 	addi	r21,r21,4111
    5384:	00bc0004 	movi	r2,-4096
    5388:	a8aa703a 	and	r21,r21,r2
    538c:	a80b883a 	mov	r5,r21
    5390:	9009883a 	mov	r4,r18
    5394:	d9800015 	stw	r6,0(sp)
    5398:	0006be40 	call	6be4 <_sbrk_r>
    539c:	1029883a 	mov	r20,r2
    53a0:	00bfffc4 	movi	r2,-1
    53a4:	d9800017 	ldw	r6,0(sp)
    53a8:	a080e826 	beq	r20,r2,574c <_malloc_r+0x738>
    53ac:	a180a636 	bltu	r20,r6,5648 <_malloc_r+0x634>
    53b0:	070000b4 	movhi	fp,2
    53b4:	e7367504 	addi	fp,fp,-9772
    53b8:	e0800017 	ldw	r2,0(fp)
    53bc:	a887883a 	add	r3,r21,r2
    53c0:	e0c00015 	stw	r3,0(fp)
    53c4:	3500e626 	beq	r6,r20,5760 <_malloc_r+0x74c>
    53c8:	b9000017 	ldw	r4,0(r23)
    53cc:	00bfffc4 	movi	r2,-1
    53d0:	2080ee26 	beq	r4,r2,578c <_malloc_r+0x778>
    53d4:	a185c83a 	sub	r2,r20,r6
    53d8:	10c5883a 	add	r2,r2,r3
    53dc:	e0800015 	stw	r2,0(fp)
    53e0:	a0c001cc 	andi	r3,r20,7
    53e4:	1800bc26 	beq	r3,zero,56d8 <_malloc_r+0x6c4>
    53e8:	a0e9c83a 	sub	r20,r20,r3
    53ec:	00840204 	movi	r2,4104
    53f0:	a5000204 	addi	r20,r20,8
    53f4:	10c7c83a 	sub	r3,r2,r3
    53f8:	a545883a 	add	r2,r20,r21
    53fc:	1083ffcc 	andi	r2,r2,4095
    5400:	18abc83a 	sub	r21,r3,r2
    5404:	a80b883a 	mov	r5,r21
    5408:	9009883a 	mov	r4,r18
    540c:	0006be40 	call	6be4 <_sbrk_r>
    5410:	00ffffc4 	movi	r3,-1
    5414:	10c0e126 	beq	r2,r3,579c <_malloc_r+0x788>
    5418:	1505c83a 	sub	r2,r2,r20
    541c:	1545883a 	add	r2,r2,r21
    5420:	10800054 	ori	r2,r2,1
    5424:	e0c00017 	ldw	r3,0(fp)
    5428:	9d000215 	stw	r20,8(r19)
    542c:	a0800115 	stw	r2,4(r20)
    5430:	a8c7883a 	add	r3,r21,r3
    5434:	e0c00015 	stw	r3,0(fp)
    5438:	84c00e26 	beq	r16,r19,5474 <_malloc_r+0x460>
    543c:	018003c4 	movi	r6,15
    5440:	3580a72e 	bgeu	r6,r22,56e0 <_malloc_r+0x6cc>
    5444:	81400117 	ldw	r5,4(r16)
    5448:	013ffe04 	movi	r4,-8
    544c:	b0bffd04 	addi	r2,r22,-12
    5450:	1104703a 	and	r2,r2,r4
    5454:	2900004c 	andi	r4,r5,1
    5458:	2088b03a 	or	r4,r4,r2
    545c:	81000115 	stw	r4,4(r16)
    5460:	01400144 	movi	r5,5
    5464:	8089883a 	add	r4,r16,r2
    5468:	21400115 	stw	r5,4(r4)
    546c:	21400215 	stw	r5,8(r4)
    5470:	3080cd36 	bltu	r6,r2,57a8 <_malloc_r+0x794>
    5474:	008000b4 	movhi	r2,2
    5478:	10b64f04 	addi	r2,r2,-9924
    547c:	11000017 	ldw	r4,0(r2)
    5480:	20c0012e 	bgeu	r4,r3,5488 <_malloc_r+0x474>
    5484:	10c00015 	stw	r3,0(r2)
    5488:	008000b4 	movhi	r2,2
    548c:	10b64e04 	addi	r2,r2,-9928
    5490:	11000017 	ldw	r4,0(r2)
    5494:	9c000217 	ldw	r16,8(r19)
    5498:	20c0012e 	bgeu	r4,r3,54a0 <_malloc_r+0x48c>
    549c:	10c00015 	stw	r3,0(r2)
    54a0:	80c00117 	ldw	r3,4(r16)
    54a4:	00bfff04 	movi	r2,-4
    54a8:	1886703a 	and	r3,r3,r2
    54ac:	1c45c83a 	sub	r2,r3,r17
    54b0:	1c400236 	bltu	r3,r17,54bc <_malloc_r+0x4a8>
    54b4:	00c003c4 	movi	r3,15
    54b8:	18800416 	blt	r3,r2,54cc <_malloc_r+0x4b8>
    54bc:	9009883a 	mov	r4,r18
    54c0:	000d8f00 	call	d8f0 <__malloc_unlock>
    54c4:	0005883a 	mov	r2,zero
    54c8:	003f7b06 	br	52b8 <_malloc_r+0x2a4>
    54cc:	88c00054 	ori	r3,r17,1
    54d0:	80c00115 	stw	r3,4(r16)
    54d4:	8463883a 	add	r17,r16,r17
    54d8:	10800054 	ori	r2,r2,1
    54dc:	9c400215 	stw	r17,8(r19)
    54e0:	88800115 	stw	r2,4(r17)
    54e4:	9009883a 	mov	r4,r18
    54e8:	000d8f00 	call	d8f0 <__malloc_unlock>
    54ec:	80800204 	addi	r2,r16,8
    54f0:	003f7106 	br	52b8 <_malloc_r+0x2a4>
    54f4:	00c00504 	movi	r3,20
    54f8:	18804a2e 	bgeu	r3,r2,5624 <_malloc_r+0x610>
    54fc:	00c01504 	movi	r3,84
    5500:	18806e36 	bltu	r3,r2,56bc <_malloc_r+0x6a8>
    5504:	8804d33a 	srli	r2,r17,12
    5508:	12001bc4 	addi	r8,r2,111
    550c:	11c01b84 	addi	r7,r2,110
    5510:	4209883a 	add	r4,r8,r8
    5514:	003edd06 	br	508c <_malloc_r+0x78>
    5518:	3804d27a 	srli	r2,r7,9
    551c:	00c00104 	movi	r3,4
    5520:	1880442e 	bgeu	r3,r2,5634 <_malloc_r+0x620>
    5524:	00c00504 	movi	r3,20
    5528:	18808136 	bltu	r3,r2,5730 <_malloc_r+0x71c>
    552c:	11401704 	addi	r5,r2,92
    5530:	10c016c4 	addi	r3,r2,91
    5534:	294b883a 	add	r5,r5,r5
    5538:	294b883a 	add	r5,r5,r5
    553c:	294b883a 	add	r5,r5,r5
    5540:	994b883a 	add	r5,r19,r5
    5544:	28800017 	ldw	r2,0(r5)
    5548:	018000b4 	movhi	r6,2
    554c:	297ffe04 	addi	r5,r5,-8
    5550:	31a80f04 	addi	r6,r6,-24516
    5554:	28806526 	beq	r5,r2,56ec <_malloc_r+0x6d8>
    5558:	01bfff04 	movi	r6,-4
    555c:	10c00117 	ldw	r3,4(r2)
    5560:	1986703a 	and	r3,r3,r6
    5564:	38c0022e 	bgeu	r7,r3,5570 <_malloc_r+0x55c>
    5568:	10800217 	ldw	r2,8(r2)
    556c:	28bffb1e 	bne	r5,r2,555c <_malloc_r+0x548>
    5570:	11400317 	ldw	r5,12(r2)
    5574:	98c00117 	ldw	r3,4(r19)
    5578:	81400315 	stw	r5,12(r16)
    557c:	80800215 	stw	r2,8(r16)
    5580:	2c000215 	stw	r16,8(r5)
    5584:	14000315 	stw	r16,12(r2)
    5588:	003ef806 	br	516c <_malloc_r+0x158>
    558c:	88c00054 	ori	r3,r17,1
    5590:	80c00115 	stw	r3,4(r16)
    5594:	8463883a 	add	r17,r16,r17
    5598:	34400515 	stw	r17,20(r6)
    559c:	34400415 	stw	r17,16(r6)
    55a0:	10c00054 	ori	r3,r2,1
    55a4:	8a000315 	stw	r8,12(r17)
    55a8:	8a000215 	stw	r8,8(r17)
    55ac:	88c00115 	stw	r3,4(r17)
    55b0:	88a3883a 	add	r17,r17,r2
    55b4:	88800015 	stw	r2,0(r17)
    55b8:	9009883a 	mov	r4,r18
    55bc:	000d8f00 	call	d8f0 <__malloc_unlock>
    55c0:	80800204 	addi	r2,r16,8
    55c4:	003f3c06 	br	52b8 <_malloc_r+0x2a4>
    55c8:	30c00117 	ldw	r3,4(r6)
    55cc:	003ee706 	br	516c <_malloc_r+0x158>
    55d0:	5ac00044 	addi	r11,r11,1
    55d4:	588000cc 	andi	r2,r11,3
    55d8:	31800204 	addi	r6,r6,8
    55dc:	103efd1e 	bne	r2,zero,51d4 <_malloc_r+0x1c0>
    55e0:	00002406 	br	5674 <_malloc_r+0x660>
    55e4:	14000317 	ldw	r16,12(r2)
    55e8:	143f251e 	bne	r2,r16,5280 <_malloc_r+0x26c>
    55ec:	21000084 	addi	r4,r4,2
    55f0:	003ebc06 	br	50e4 <_malloc_r+0xd0>
    55f4:	8085883a 	add	r2,r16,r2
    55f8:	10c00117 	ldw	r3,4(r2)
    55fc:	81000317 	ldw	r4,12(r16)
    5600:	81400217 	ldw	r5,8(r16)
    5604:	18c00054 	ori	r3,r3,1
    5608:	10c00115 	stw	r3,4(r2)
    560c:	29000315 	stw	r4,12(r5)
    5610:	21400215 	stw	r5,8(r4)
    5614:	9009883a 	mov	r4,r18
    5618:	000d8f00 	call	d8f0 <__malloc_unlock>
    561c:	80800204 	addi	r2,r16,8
    5620:	003f2506 	br	52b8 <_malloc_r+0x2a4>
    5624:	12001704 	addi	r8,r2,92
    5628:	11c016c4 	addi	r7,r2,91
    562c:	4209883a 	add	r4,r8,r8
    5630:	003e9606 	br	508c <_malloc_r+0x78>
    5634:	3804d1ba 	srli	r2,r7,6
    5638:	11400e44 	addi	r5,r2,57
    563c:	10c00e04 	addi	r3,r2,56
    5640:	294b883a 	add	r5,r5,r5
    5644:	003fbc06 	br	5538 <_malloc_r+0x524>
    5648:	84ff5926 	beq	r16,r19,53b0 <_malloc_r+0x39c>
    564c:	008000b4 	movhi	r2,2
    5650:	10a80f04 	addi	r2,r2,-24516
    5654:	14000217 	ldw	r16,8(r2)
    5658:	00bfff04 	movi	r2,-4
    565c:	80c00117 	ldw	r3,4(r16)
    5660:	1886703a 	and	r3,r3,r2
    5664:	003f9106 	br	54ac <_malloc_r+0x498>
    5668:	60800217 	ldw	r2,8(r12)
    566c:	213fffc4 	addi	r4,r4,-1
    5670:	1300651e 	bne	r2,r12,5808 <_malloc_r+0x7f4>
    5674:	208000cc 	andi	r2,r4,3
    5678:	633ffe04 	addi	r12,r12,-8
    567c:	103ffa1e 	bne	r2,zero,5668 <_malloc_r+0x654>
    5680:	98800117 	ldw	r2,4(r19)
    5684:	0146303a 	nor	r3,zero,r5
    5688:	1884703a 	and	r2,r3,r2
    568c:	98800115 	stw	r2,4(r19)
    5690:	294b883a 	add	r5,r5,r5
    5694:	117f2836 	bltu	r2,r5,5338 <_malloc_r+0x324>
    5698:	283f2726 	beq	r5,zero,5338 <_malloc_r+0x324>
    569c:	2886703a 	and	r3,r5,r2
    56a0:	5809883a 	mov	r4,r11
    56a4:	183ec31e 	bne	r3,zero,51b4 <_malloc_r+0x1a0>
    56a8:	294b883a 	add	r5,r5,r5
    56ac:	2886703a 	and	r3,r5,r2
    56b0:	21000104 	addi	r4,r4,4
    56b4:	183ffc26 	beq	r3,zero,56a8 <_malloc_r+0x694>
    56b8:	003ebe06 	br	51b4 <_malloc_r+0x1a0>
    56bc:	00c05504 	movi	r3,340
    56c0:	18801236 	bltu	r3,r2,570c <_malloc_r+0x6f8>
    56c4:	8804d3fa 	srli	r2,r17,15
    56c8:	12001e04 	addi	r8,r2,120
    56cc:	11c01dc4 	addi	r7,r2,119
    56d0:	4209883a 	add	r4,r8,r8
    56d4:	003e6d06 	br	508c <_malloc_r+0x78>
    56d8:	00c40004 	movi	r3,4096
    56dc:	003f4606 	br	53f8 <_malloc_r+0x3e4>
    56e0:	00800044 	movi	r2,1
    56e4:	a0800115 	stw	r2,4(r20)
    56e8:	003f7406 	br	54bc <_malloc_r+0x4a8>
    56ec:	1805d0ba 	srai	r2,r3,2
    56f0:	01c00044 	movi	r7,1
    56f4:	30c00117 	ldw	r3,4(r6)
    56f8:	388e983a 	sll	r7,r7,r2
    56fc:	2805883a 	mov	r2,r5
    5700:	38c6b03a 	or	r3,r7,r3
    5704:	30c00115 	stw	r3,4(r6)
    5708:	003f9b06 	br	5578 <_malloc_r+0x564>
    570c:	00c15504 	movi	r3,1364
    5710:	18801a36 	bltu	r3,r2,577c <_malloc_r+0x768>
    5714:	8804d4ba 	srli	r2,r17,18
    5718:	12001f44 	addi	r8,r2,125
    571c:	11c01f04 	addi	r7,r2,124
    5720:	4209883a 	add	r4,r8,r8
    5724:	003e5906 	br	508c <_malloc_r+0x78>
    5728:	ad400404 	addi	r21,r21,16
    572c:	003f1706 	br	538c <_malloc_r+0x378>
    5730:	00c01504 	movi	r3,84
    5734:	18802336 	bltu	r3,r2,57c4 <_malloc_r+0x7b0>
    5738:	3804d33a 	srli	r2,r7,12
    573c:	11401bc4 	addi	r5,r2,111
    5740:	10c01b84 	addi	r3,r2,110
    5744:	294b883a 	add	r5,r5,r5
    5748:	003f7b06 	br	5538 <_malloc_r+0x524>
    574c:	9c000217 	ldw	r16,8(r19)
    5750:	00bfff04 	movi	r2,-4
    5754:	80c00117 	ldw	r3,4(r16)
    5758:	1886703a 	and	r3,r3,r2
    575c:	003f5306 	br	54ac <_malloc_r+0x498>
    5760:	3083ffcc 	andi	r2,r6,4095
    5764:	103f181e 	bne	r2,zero,53c8 <_malloc_r+0x3b4>
    5768:	99000217 	ldw	r4,8(r19)
    576c:	b545883a 	add	r2,r22,r21
    5770:	10800054 	ori	r2,r2,1
    5774:	20800115 	stw	r2,4(r4)
    5778:	003f3e06 	br	5474 <_malloc_r+0x460>
    577c:	01003f84 	movi	r4,254
    5780:	02001fc4 	movi	r8,127
    5784:	01c01f84 	movi	r7,126
    5788:	003e4006 	br	508c <_malloc_r+0x78>
    578c:	008000b4 	movhi	r2,2
    5790:	10ae6804 	addi	r2,r2,-18016
    5794:	15000015 	stw	r20,0(r2)
    5798:	003f1106 	br	53e0 <_malloc_r+0x3cc>
    579c:	00800044 	movi	r2,1
    57a0:	002b883a 	mov	r21,zero
    57a4:	003f1f06 	br	5424 <_malloc_r+0x410>
    57a8:	81400204 	addi	r5,r16,8
    57ac:	9009883a 	mov	r4,r18
    57b0:	00048e40 	call	48e4 <_free_r>
    57b4:	008000b4 	movhi	r2,2
    57b8:	10b67504 	addi	r2,r2,-9772
    57bc:	10c00017 	ldw	r3,0(r2)
    57c0:	003f2c06 	br	5474 <_malloc_r+0x460>
    57c4:	00c05504 	movi	r3,340
    57c8:	18800536 	bltu	r3,r2,57e0 <_malloc_r+0x7cc>
    57cc:	3804d3fa 	srli	r2,r7,15
    57d0:	11401e04 	addi	r5,r2,120
    57d4:	10c01dc4 	addi	r3,r2,119
    57d8:	294b883a 	add	r5,r5,r5
    57dc:	003f5606 	br	5538 <_malloc_r+0x524>
    57e0:	00c15504 	movi	r3,1364
    57e4:	18800536 	bltu	r3,r2,57fc <_malloc_r+0x7e8>
    57e8:	3804d4ba 	srli	r2,r7,18
    57ec:	11401f44 	addi	r5,r2,125
    57f0:	10c01f04 	addi	r3,r2,124
    57f4:	294b883a 	add	r5,r5,r5
    57f8:	003f4f06 	br	5538 <_malloc_r+0x524>
    57fc:	01403f84 	movi	r5,254
    5800:	00c01f84 	movi	r3,126
    5804:	003f4c06 	br	5538 <_malloc_r+0x524>
    5808:	98800117 	ldw	r2,4(r19)
    580c:	003fa006 	br	5690 <_malloc_r+0x67c>
    5810:	8808d0fa 	srli	r4,r17,3
    5814:	20800044 	addi	r2,r4,1
    5818:	1085883a 	add	r2,r2,r2
    581c:	003e9006 	br	5260 <_malloc_r+0x24c>

00005820 <memchr>:
    5820:	208000cc 	andi	r2,r4,3
    5824:	280f883a 	mov	r7,r5
    5828:	10003426 	beq	r2,zero,58fc <memchr+0xdc>
    582c:	30bfffc4 	addi	r2,r6,-1
    5830:	30001a26 	beq	r6,zero,589c <memchr+0x7c>
    5834:	20c00003 	ldbu	r3,0(r4)
    5838:	29803fcc 	andi	r6,r5,255
    583c:	30c0051e 	bne	r6,r3,5854 <memchr+0x34>
    5840:	00001806 	br	58a4 <memchr+0x84>
    5844:	10001526 	beq	r2,zero,589c <memchr+0x7c>
    5848:	20c00003 	ldbu	r3,0(r4)
    584c:	10bfffc4 	addi	r2,r2,-1
    5850:	30c01426 	beq	r6,r3,58a4 <memchr+0x84>
    5854:	21000044 	addi	r4,r4,1
    5858:	20c000cc 	andi	r3,r4,3
    585c:	183ff91e 	bne	r3,zero,5844 <memchr+0x24>
    5860:	020000c4 	movi	r8,3
    5864:	40801136 	bltu	r8,r2,58ac <memchr+0x8c>
    5868:	10000c26 	beq	r2,zero,589c <memchr+0x7c>
    586c:	20c00003 	ldbu	r3,0(r4)
    5870:	29403fcc 	andi	r5,r5,255
    5874:	28c00b26 	beq	r5,r3,58a4 <memchr+0x84>
    5878:	20c00044 	addi	r3,r4,1
    587c:	39803fcc 	andi	r6,r7,255
    5880:	2089883a 	add	r4,r4,r2
    5884:	00000306 	br	5894 <memchr+0x74>
    5888:	18c00044 	addi	r3,r3,1
    588c:	197fffc3 	ldbu	r5,-1(r3)
    5890:	31400526 	beq	r6,r5,58a8 <memchr+0x88>
    5894:	1805883a 	mov	r2,r3
    5898:	20fffb1e 	bne	r4,r3,5888 <memchr+0x68>
    589c:	0005883a 	mov	r2,zero
    58a0:	f800283a 	ret
    58a4:	2005883a 	mov	r2,r4
    58a8:	f800283a 	ret
    58ac:	28c03fcc 	andi	r3,r5,255
    58b0:	1812923a 	slli	r9,r3,8
    58b4:	02ffbff4 	movhi	r11,65279
    58b8:	02a02074 	movhi	r10,32897
    58bc:	48d2b03a 	or	r9,r9,r3
    58c0:	4806943a 	slli	r3,r9,16
    58c4:	5affbfc4 	addi	r11,r11,-257
    58c8:	52a02004 	addi	r10,r10,-32640
    58cc:	48d2b03a 	or	r9,r9,r3
    58d0:	20c00017 	ldw	r3,0(r4)
    58d4:	48c6f03a 	xor	r3,r9,r3
    58d8:	1acd883a 	add	r6,r3,r11
    58dc:	00c6303a 	nor	r3,zero,r3
    58e0:	30c6703a 	and	r3,r6,r3
    58e4:	1a86703a 	and	r3,r3,r10
    58e8:	183fe01e 	bne	r3,zero,586c <memchr+0x4c>
    58ec:	10bfff04 	addi	r2,r2,-4
    58f0:	21000104 	addi	r4,r4,4
    58f4:	40bff636 	bltu	r8,r2,58d0 <memchr+0xb0>
    58f8:	003fdb06 	br	5868 <memchr+0x48>
    58fc:	3005883a 	mov	r2,r6
    5900:	003fd706 	br	5860 <memchr+0x40>

00005904 <memcpy>:
    5904:	defffd04 	addi	sp,sp,-12
    5908:	dfc00215 	stw	ra,8(sp)
    590c:	dc400115 	stw	r17,4(sp)
    5910:	dc000015 	stw	r16,0(sp)
    5914:	00c003c4 	movi	r3,15
    5918:	2005883a 	mov	r2,r4
    591c:	1980452e 	bgeu	r3,r6,5a34 <memcpy+0x130>
    5920:	2906b03a 	or	r3,r5,r4
    5924:	18c000cc 	andi	r3,r3,3
    5928:	1800441e 	bne	r3,zero,5a3c <memcpy+0x138>
    592c:	347ffc04 	addi	r17,r6,-16
    5930:	8822d13a 	srli	r17,r17,4
    5934:	28c00104 	addi	r3,r5,4
    5938:	23400104 	addi	r13,r4,4
    593c:	8820913a 	slli	r16,r17,4
    5940:	2b000204 	addi	r12,r5,8
    5944:	22c00204 	addi	r11,r4,8
    5948:	84000504 	addi	r16,r16,20
    594c:	2a800304 	addi	r10,r5,12
    5950:	22400304 	addi	r9,r4,12
    5954:	2c21883a 	add	r16,r5,r16
    5958:	2811883a 	mov	r8,r5
    595c:	200f883a 	mov	r7,r4
    5960:	41000017 	ldw	r4,0(r8)
    5964:	1fc00017 	ldw	ra,0(r3)
    5968:	63c00017 	ldw	r15,0(r12)
    596c:	39000015 	stw	r4,0(r7)
    5970:	53800017 	ldw	r14,0(r10)
    5974:	6fc00015 	stw	ra,0(r13)
    5978:	5bc00015 	stw	r15,0(r11)
    597c:	4b800015 	stw	r14,0(r9)
    5980:	18c00404 	addi	r3,r3,16
    5984:	39c00404 	addi	r7,r7,16
    5988:	42000404 	addi	r8,r8,16
    598c:	6b400404 	addi	r13,r13,16
    5990:	63000404 	addi	r12,r12,16
    5994:	5ac00404 	addi	r11,r11,16
    5998:	52800404 	addi	r10,r10,16
    599c:	4a400404 	addi	r9,r9,16
    59a0:	1c3fef1e 	bne	r3,r16,5960 <memcpy+0x5c>
    59a4:	89c00044 	addi	r7,r17,1
    59a8:	380e913a 	slli	r7,r7,4
    59ac:	310003cc 	andi	r4,r6,15
    59b0:	02c000c4 	movi	r11,3
    59b4:	11c7883a 	add	r3,r2,r7
    59b8:	29cb883a 	add	r5,r5,r7
    59bc:	5900212e 	bgeu	r11,r4,5a44 <memcpy+0x140>
    59c0:	1813883a 	mov	r9,r3
    59c4:	2811883a 	mov	r8,r5
    59c8:	200f883a 	mov	r7,r4
    59cc:	42800017 	ldw	r10,0(r8)
    59d0:	4a400104 	addi	r9,r9,4
    59d4:	39ffff04 	addi	r7,r7,-4
    59d8:	4abfff15 	stw	r10,-4(r9)
    59dc:	42000104 	addi	r8,r8,4
    59e0:	59fffa36 	bltu	r11,r7,59cc <memcpy+0xc8>
    59e4:	213fff04 	addi	r4,r4,-4
    59e8:	2008d0ba 	srli	r4,r4,2
    59ec:	318000cc 	andi	r6,r6,3
    59f0:	21000044 	addi	r4,r4,1
    59f4:	2109883a 	add	r4,r4,r4
    59f8:	2109883a 	add	r4,r4,r4
    59fc:	1907883a 	add	r3,r3,r4
    5a00:	290b883a 	add	r5,r5,r4
    5a04:	30000626 	beq	r6,zero,5a20 <memcpy+0x11c>
    5a08:	198d883a 	add	r6,r3,r6
    5a0c:	29c00003 	ldbu	r7,0(r5)
    5a10:	18c00044 	addi	r3,r3,1
    5a14:	29400044 	addi	r5,r5,1
    5a18:	19ffffc5 	stb	r7,-1(r3)
    5a1c:	19bffb1e 	bne	r3,r6,5a0c <memcpy+0x108>
    5a20:	dfc00217 	ldw	ra,8(sp)
    5a24:	dc400117 	ldw	r17,4(sp)
    5a28:	dc000017 	ldw	r16,0(sp)
    5a2c:	dec00304 	addi	sp,sp,12
    5a30:	f800283a 	ret
    5a34:	2007883a 	mov	r3,r4
    5a38:	003ff206 	br	5a04 <memcpy+0x100>
    5a3c:	2007883a 	mov	r3,r4
    5a40:	003ff106 	br	5a08 <memcpy+0x104>
    5a44:	200d883a 	mov	r6,r4
    5a48:	003fee06 	br	5a04 <memcpy+0x100>

00005a4c <memset>:
    5a4c:	20c000cc 	andi	r3,r4,3
    5a50:	2005883a 	mov	r2,r4
    5a54:	18004426 	beq	r3,zero,5b68 <memset+0x11c>
    5a58:	31ffffc4 	addi	r7,r6,-1
    5a5c:	30004026 	beq	r6,zero,5b60 <memset+0x114>
    5a60:	2813883a 	mov	r9,r5
    5a64:	200d883a 	mov	r6,r4
    5a68:	2007883a 	mov	r3,r4
    5a6c:	00000406 	br	5a80 <memset+0x34>
    5a70:	3a3fffc4 	addi	r8,r7,-1
    5a74:	31800044 	addi	r6,r6,1
    5a78:	38003926 	beq	r7,zero,5b60 <memset+0x114>
    5a7c:	400f883a 	mov	r7,r8
    5a80:	18c00044 	addi	r3,r3,1
    5a84:	32400005 	stb	r9,0(r6)
    5a88:	1a0000cc 	andi	r8,r3,3
    5a8c:	403ff81e 	bne	r8,zero,5a70 <memset+0x24>
    5a90:	010000c4 	movi	r4,3
    5a94:	21c02d2e 	bgeu	r4,r7,5b4c <memset+0x100>
    5a98:	29003fcc 	andi	r4,r5,255
    5a9c:	200c923a 	slli	r6,r4,8
    5aa0:	3108b03a 	or	r4,r6,r4
    5aa4:	200c943a 	slli	r6,r4,16
    5aa8:	218cb03a 	or	r6,r4,r6
    5aac:	010003c4 	movi	r4,15
    5ab0:	21c0182e 	bgeu	r4,r7,5b14 <memset+0xc8>
    5ab4:	3b3ffc04 	addi	r12,r7,-16
    5ab8:	6018d13a 	srli	r12,r12,4
    5abc:	1a000104 	addi	r8,r3,4
    5ac0:	1ac00204 	addi	r11,r3,8
    5ac4:	6008913a 	slli	r4,r12,4
    5ac8:	1a800304 	addi	r10,r3,12
    5acc:	1813883a 	mov	r9,r3
    5ad0:	21000504 	addi	r4,r4,20
    5ad4:	1909883a 	add	r4,r3,r4
    5ad8:	49800015 	stw	r6,0(r9)
    5adc:	41800015 	stw	r6,0(r8)
    5ae0:	59800015 	stw	r6,0(r11)
    5ae4:	51800015 	stw	r6,0(r10)
    5ae8:	42000404 	addi	r8,r8,16
    5aec:	4a400404 	addi	r9,r9,16
    5af0:	5ac00404 	addi	r11,r11,16
    5af4:	52800404 	addi	r10,r10,16
    5af8:	413ff71e 	bne	r8,r4,5ad8 <memset+0x8c>
    5afc:	63000044 	addi	r12,r12,1
    5b00:	6018913a 	slli	r12,r12,4
    5b04:	39c003cc 	andi	r7,r7,15
    5b08:	010000c4 	movi	r4,3
    5b0c:	1b07883a 	add	r3,r3,r12
    5b10:	21c00e2e 	bgeu	r4,r7,5b4c <memset+0x100>
    5b14:	1813883a 	mov	r9,r3
    5b18:	3811883a 	mov	r8,r7
    5b1c:	010000c4 	movi	r4,3
    5b20:	49800015 	stw	r6,0(r9)
    5b24:	423fff04 	addi	r8,r8,-4
    5b28:	4a400104 	addi	r9,r9,4
    5b2c:	223ffc36 	bltu	r4,r8,5b20 <memset+0xd4>
    5b30:	393fff04 	addi	r4,r7,-4
    5b34:	2008d0ba 	srli	r4,r4,2
    5b38:	39c000cc 	andi	r7,r7,3
    5b3c:	21000044 	addi	r4,r4,1
    5b40:	2109883a 	add	r4,r4,r4
    5b44:	2109883a 	add	r4,r4,r4
    5b48:	1907883a 	add	r3,r3,r4
    5b4c:	38000526 	beq	r7,zero,5b64 <memset+0x118>
    5b50:	19cf883a 	add	r7,r3,r7
    5b54:	19400005 	stb	r5,0(r3)
    5b58:	18c00044 	addi	r3,r3,1
    5b5c:	38fffd1e 	bne	r7,r3,5b54 <memset+0x108>
    5b60:	f800283a 	ret
    5b64:	f800283a 	ret
    5b68:	2007883a 	mov	r3,r4
    5b6c:	300f883a 	mov	r7,r6
    5b70:	003fc706 	br	5a90 <memset+0x44>

00005b74 <_Balloc>:
    5b74:	20801317 	ldw	r2,76(r4)
    5b78:	defffc04 	addi	sp,sp,-16
    5b7c:	dc400115 	stw	r17,4(sp)
    5b80:	dc000015 	stw	r16,0(sp)
    5b84:	dfc00315 	stw	ra,12(sp)
    5b88:	dc800215 	stw	r18,8(sp)
    5b8c:	2023883a 	mov	r17,r4
    5b90:	2821883a 	mov	r16,r5
    5b94:	10000f26 	beq	r2,zero,5bd4 <_Balloc+0x60>
    5b98:	8407883a 	add	r3,r16,r16
    5b9c:	18c7883a 	add	r3,r3,r3
    5ba0:	10c7883a 	add	r3,r2,r3
    5ba4:	18800017 	ldw	r2,0(r3)
    5ba8:	10001126 	beq	r2,zero,5bf0 <_Balloc+0x7c>
    5bac:	11000017 	ldw	r4,0(r2)
    5bb0:	19000015 	stw	r4,0(r3)
    5bb4:	10000415 	stw	zero,16(r2)
    5bb8:	10000315 	stw	zero,12(r2)
    5bbc:	dfc00317 	ldw	ra,12(sp)
    5bc0:	dc800217 	ldw	r18,8(sp)
    5bc4:	dc400117 	ldw	r17,4(sp)
    5bc8:	dc000017 	ldw	r16,0(sp)
    5bcc:	dec00404 	addi	sp,sp,16
    5bd0:	f800283a 	ret
    5bd4:	01800844 	movi	r6,33
    5bd8:	01400104 	movi	r5,4
    5bdc:	00085e40 	call	85e4 <_calloc_r>
    5be0:	88801315 	stw	r2,76(r17)
    5be4:	103fec1e 	bne	r2,zero,5b98 <_Balloc+0x24>
    5be8:	0005883a 	mov	r2,zero
    5bec:	003ff306 	br	5bbc <_Balloc+0x48>
    5bf0:	01400044 	movi	r5,1
    5bf4:	2c24983a 	sll	r18,r5,r16
    5bf8:	8809883a 	mov	r4,r17
    5bfc:	91800144 	addi	r6,r18,5
    5c00:	318d883a 	add	r6,r6,r6
    5c04:	318d883a 	add	r6,r6,r6
    5c08:	00085e40 	call	85e4 <_calloc_r>
    5c0c:	103ff626 	beq	r2,zero,5be8 <_Balloc+0x74>
    5c10:	14000115 	stw	r16,4(r2)
    5c14:	14800215 	stw	r18,8(r2)
    5c18:	003fe606 	br	5bb4 <_Balloc+0x40>

00005c1c <_Bfree>:
    5c1c:	28000826 	beq	r5,zero,5c40 <_Bfree+0x24>
    5c20:	28c00117 	ldw	r3,4(r5)
    5c24:	20801317 	ldw	r2,76(r4)
    5c28:	18c7883a 	add	r3,r3,r3
    5c2c:	18c7883a 	add	r3,r3,r3
    5c30:	10c5883a 	add	r2,r2,r3
    5c34:	10c00017 	ldw	r3,0(r2)
    5c38:	28c00015 	stw	r3,0(r5)
    5c3c:	11400015 	stw	r5,0(r2)
    5c40:	f800283a 	ret

00005c44 <__multadd>:
    5c44:	defffa04 	addi	sp,sp,-24
    5c48:	dc800315 	stw	r18,12(sp)
    5c4c:	dc400215 	stw	r17,8(sp)
    5c50:	dc000115 	stw	r16,4(sp)
    5c54:	2823883a 	mov	r17,r5
    5c58:	2c000417 	ldw	r16,16(r5)
    5c5c:	dfc00515 	stw	ra,20(sp)
    5c60:	dcc00415 	stw	r19,16(sp)
    5c64:	2025883a 	mov	r18,r4
    5c68:	29400504 	addi	r5,r5,20
    5c6c:	0011883a 	mov	r8,zero
    5c70:	28c00017 	ldw	r3,0(r5)
    5c74:	29400104 	addi	r5,r5,4
    5c78:	42000044 	addi	r8,r8,1
    5c7c:	18bfffcc 	andi	r2,r3,65535
    5c80:	1185383a 	mul	r2,r2,r6
    5c84:	1806d43a 	srli	r3,r3,16
    5c88:	11cf883a 	add	r7,r2,r7
    5c8c:	3808d43a 	srli	r4,r7,16
    5c90:	1987383a 	mul	r3,r3,r6
    5c94:	38bfffcc 	andi	r2,r7,65535
    5c98:	1907883a 	add	r3,r3,r4
    5c9c:	1808943a 	slli	r4,r3,16
    5ca0:	180ed43a 	srli	r7,r3,16
    5ca4:	2085883a 	add	r2,r4,r2
    5ca8:	28bfff15 	stw	r2,-4(r5)
    5cac:	443ff016 	blt	r8,r16,5c70 <__multadd+0x2c>
    5cb0:	38000926 	beq	r7,zero,5cd8 <__multadd+0x94>
    5cb4:	88800217 	ldw	r2,8(r17)
    5cb8:	80800f0e 	bge	r16,r2,5cf8 <__multadd+0xb4>
    5cbc:	80800144 	addi	r2,r16,5
    5cc0:	1085883a 	add	r2,r2,r2
    5cc4:	1085883a 	add	r2,r2,r2
    5cc8:	8885883a 	add	r2,r17,r2
    5ccc:	11c00015 	stw	r7,0(r2)
    5cd0:	84000044 	addi	r16,r16,1
    5cd4:	8c000415 	stw	r16,16(r17)
    5cd8:	8805883a 	mov	r2,r17
    5cdc:	dfc00517 	ldw	ra,20(sp)
    5ce0:	dcc00417 	ldw	r19,16(sp)
    5ce4:	dc800317 	ldw	r18,12(sp)
    5ce8:	dc400217 	ldw	r17,8(sp)
    5cec:	dc000117 	ldw	r16,4(sp)
    5cf0:	dec00604 	addi	sp,sp,24
    5cf4:	f800283a 	ret
    5cf8:	89400117 	ldw	r5,4(r17)
    5cfc:	9009883a 	mov	r4,r18
    5d00:	d9c00015 	stw	r7,0(sp)
    5d04:	29400044 	addi	r5,r5,1
    5d08:	0005b740 	call	5b74 <_Balloc>
    5d0c:	89800417 	ldw	r6,16(r17)
    5d10:	89400304 	addi	r5,r17,12
    5d14:	11000304 	addi	r4,r2,12
    5d18:	31800084 	addi	r6,r6,2
    5d1c:	318d883a 	add	r6,r6,r6
    5d20:	318d883a 	add	r6,r6,r6
    5d24:	1027883a 	mov	r19,r2
    5d28:	00059040 	call	5904 <memcpy>
    5d2c:	d9c00017 	ldw	r7,0(sp)
    5d30:	88000a26 	beq	r17,zero,5d5c <__multadd+0x118>
    5d34:	88c00117 	ldw	r3,4(r17)
    5d38:	90801317 	ldw	r2,76(r18)
    5d3c:	18c7883a 	add	r3,r3,r3
    5d40:	18c7883a 	add	r3,r3,r3
    5d44:	10c5883a 	add	r2,r2,r3
    5d48:	10c00017 	ldw	r3,0(r2)
    5d4c:	88c00015 	stw	r3,0(r17)
    5d50:	14400015 	stw	r17,0(r2)
    5d54:	9823883a 	mov	r17,r19
    5d58:	003fd806 	br	5cbc <__multadd+0x78>
    5d5c:	9823883a 	mov	r17,r19
    5d60:	003fd606 	br	5cbc <__multadd+0x78>

00005d64 <__s2b>:
    5d64:	defff904 	addi	sp,sp,-28
    5d68:	dc400115 	stw	r17,4(sp)
    5d6c:	dc000015 	stw	r16,0(sp)
    5d70:	2023883a 	mov	r17,r4
    5d74:	2821883a 	mov	r16,r5
    5d78:	39000204 	addi	r4,r7,8
    5d7c:	01400244 	movi	r5,9
    5d80:	dcc00315 	stw	r19,12(sp)
    5d84:	dc800215 	stw	r18,8(sp)
    5d88:	dfc00615 	stw	ra,24(sp)
    5d8c:	dd400515 	stw	r21,20(sp)
    5d90:	dd000415 	stw	r20,16(sp)
    5d94:	3825883a 	mov	r18,r7
    5d98:	3027883a 	mov	r19,r6
    5d9c:	000a4900 	call	a490 <__divsi3>
    5da0:	00c00044 	movi	r3,1
    5da4:	000b883a 	mov	r5,zero
    5da8:	1880030e 	bge	r3,r2,5db8 <__s2b+0x54>
    5dac:	18c7883a 	add	r3,r3,r3
    5db0:	29400044 	addi	r5,r5,1
    5db4:	18bffd16 	blt	r3,r2,5dac <__s2b+0x48>
    5db8:	8809883a 	mov	r4,r17
    5dbc:	0005b740 	call	5b74 <_Balloc>
    5dc0:	d8c00717 	ldw	r3,28(sp)
    5dc4:	10c00515 	stw	r3,20(r2)
    5dc8:	00c00044 	movi	r3,1
    5dcc:	10c00415 	stw	r3,16(r2)
    5dd0:	00c00244 	movi	r3,9
    5dd4:	1cc0210e 	bge	r3,r19,5e5c <__s2b+0xf8>
    5dd8:	80eb883a 	add	r21,r16,r3
    5ddc:	a829883a 	mov	r20,r21
    5de0:	84e1883a 	add	r16,r16,r19
    5de4:	a1c00007 	ldb	r7,0(r20)
    5de8:	01800284 	movi	r6,10
    5dec:	a5000044 	addi	r20,r20,1
    5df0:	100b883a 	mov	r5,r2
    5df4:	39fff404 	addi	r7,r7,-48
    5df8:	8809883a 	mov	r4,r17
    5dfc:	0005c440 	call	5c44 <__multadd>
    5e00:	a43ff81e 	bne	r20,r16,5de4 <__s2b+0x80>
    5e04:	ace1883a 	add	r16,r21,r19
    5e08:	843ffe04 	addi	r16,r16,-8
    5e0c:	9c800a0e 	bge	r19,r18,5e38 <__s2b+0xd4>
    5e10:	94e5c83a 	sub	r18,r18,r19
    5e14:	84a5883a 	add	r18,r16,r18
    5e18:	81c00007 	ldb	r7,0(r16)
    5e1c:	01800284 	movi	r6,10
    5e20:	84000044 	addi	r16,r16,1
    5e24:	100b883a 	mov	r5,r2
    5e28:	39fff404 	addi	r7,r7,-48
    5e2c:	8809883a 	mov	r4,r17
    5e30:	0005c440 	call	5c44 <__multadd>
    5e34:	84bff81e 	bne	r16,r18,5e18 <__s2b+0xb4>
    5e38:	dfc00617 	ldw	ra,24(sp)
    5e3c:	dd400517 	ldw	r21,20(sp)
    5e40:	dd000417 	ldw	r20,16(sp)
    5e44:	dcc00317 	ldw	r19,12(sp)
    5e48:	dc800217 	ldw	r18,8(sp)
    5e4c:	dc400117 	ldw	r17,4(sp)
    5e50:	dc000017 	ldw	r16,0(sp)
    5e54:	dec00704 	addi	sp,sp,28
    5e58:	f800283a 	ret
    5e5c:	84000284 	addi	r16,r16,10
    5e60:	1827883a 	mov	r19,r3
    5e64:	003fe906 	br	5e0c <__s2b+0xa8>

00005e68 <__hi0bits>:
    5e68:	20bfffec 	andhi	r2,r4,65535
    5e6c:	1000141e 	bne	r2,zero,5ec0 <__hi0bits+0x58>
    5e70:	2008943a 	slli	r4,r4,16
    5e74:	00800404 	movi	r2,16
    5e78:	20ffc02c 	andhi	r3,r4,65280
    5e7c:	1800021e 	bne	r3,zero,5e88 <__hi0bits+0x20>
    5e80:	2008923a 	slli	r4,r4,8
    5e84:	10800204 	addi	r2,r2,8
    5e88:	20fc002c 	andhi	r3,r4,61440
    5e8c:	1800021e 	bne	r3,zero,5e98 <__hi0bits+0x30>
    5e90:	2008913a 	slli	r4,r4,4
    5e94:	10800104 	addi	r2,r2,4
    5e98:	20f0002c 	andhi	r3,r4,49152
    5e9c:	1800031e 	bne	r3,zero,5eac <__hi0bits+0x44>
    5ea0:	2109883a 	add	r4,r4,r4
    5ea4:	10800084 	addi	r2,r2,2
    5ea8:	2109883a 	add	r4,r4,r4
    5eac:	20000316 	blt	r4,zero,5ebc <__hi0bits+0x54>
    5eb0:	2110002c 	andhi	r4,r4,16384
    5eb4:	2000041e 	bne	r4,zero,5ec8 <__hi0bits+0x60>
    5eb8:	00800804 	movi	r2,32
    5ebc:	f800283a 	ret
    5ec0:	0005883a 	mov	r2,zero
    5ec4:	003fec06 	br	5e78 <__hi0bits+0x10>
    5ec8:	10800044 	addi	r2,r2,1
    5ecc:	f800283a 	ret

00005ed0 <__lo0bits>:
    5ed0:	20c00017 	ldw	r3,0(r4)
    5ed4:	188001cc 	andi	r2,r3,7
    5ed8:	10000826 	beq	r2,zero,5efc <__lo0bits+0x2c>
    5edc:	1880004c 	andi	r2,r3,1
    5ee0:	1000211e 	bne	r2,zero,5f68 <__lo0bits+0x98>
    5ee4:	1880008c 	andi	r2,r3,2
    5ee8:	1000211e 	bne	r2,zero,5f70 <__lo0bits+0xa0>
    5eec:	1806d0ba 	srli	r3,r3,2
    5ef0:	00800084 	movi	r2,2
    5ef4:	20c00015 	stw	r3,0(r4)
    5ef8:	f800283a 	ret
    5efc:	18bfffcc 	andi	r2,r3,65535
    5f00:	10001326 	beq	r2,zero,5f50 <__lo0bits+0x80>
    5f04:	0005883a 	mov	r2,zero
    5f08:	19403fcc 	andi	r5,r3,255
    5f0c:	2800021e 	bne	r5,zero,5f18 <__lo0bits+0x48>
    5f10:	1806d23a 	srli	r3,r3,8
    5f14:	10800204 	addi	r2,r2,8
    5f18:	194003cc 	andi	r5,r3,15
    5f1c:	2800021e 	bne	r5,zero,5f28 <__lo0bits+0x58>
    5f20:	1806d13a 	srli	r3,r3,4
    5f24:	10800104 	addi	r2,r2,4
    5f28:	194000cc 	andi	r5,r3,3
    5f2c:	2800021e 	bne	r5,zero,5f38 <__lo0bits+0x68>
    5f30:	1806d0ba 	srli	r3,r3,2
    5f34:	10800084 	addi	r2,r2,2
    5f38:	1940004c 	andi	r5,r3,1
    5f3c:	2800081e 	bne	r5,zero,5f60 <__lo0bits+0x90>
    5f40:	1806d07a 	srli	r3,r3,1
    5f44:	1800051e 	bne	r3,zero,5f5c <__lo0bits+0x8c>
    5f48:	00800804 	movi	r2,32
    5f4c:	f800283a 	ret
    5f50:	1806d43a 	srli	r3,r3,16
    5f54:	00800404 	movi	r2,16
    5f58:	003feb06 	br	5f08 <__lo0bits+0x38>
    5f5c:	10800044 	addi	r2,r2,1
    5f60:	20c00015 	stw	r3,0(r4)
    5f64:	f800283a 	ret
    5f68:	0005883a 	mov	r2,zero
    5f6c:	f800283a 	ret
    5f70:	1806d07a 	srli	r3,r3,1
    5f74:	00800044 	movi	r2,1
    5f78:	20c00015 	stw	r3,0(r4)
    5f7c:	f800283a 	ret

00005f80 <__i2b>:
    5f80:	defffd04 	addi	sp,sp,-12
    5f84:	dc000015 	stw	r16,0(sp)
    5f88:	04000044 	movi	r16,1
    5f8c:	dc400115 	stw	r17,4(sp)
    5f90:	2823883a 	mov	r17,r5
    5f94:	800b883a 	mov	r5,r16
    5f98:	dfc00215 	stw	ra,8(sp)
    5f9c:	0005b740 	call	5b74 <_Balloc>
    5fa0:	14400515 	stw	r17,20(r2)
    5fa4:	14000415 	stw	r16,16(r2)
    5fa8:	dfc00217 	ldw	ra,8(sp)
    5fac:	dc400117 	ldw	r17,4(sp)
    5fb0:	dc000017 	ldw	r16,0(sp)
    5fb4:	dec00304 	addi	sp,sp,12
    5fb8:	f800283a 	ret

00005fbc <__multiply>:
    5fbc:	defffa04 	addi	sp,sp,-24
    5fc0:	dcc00315 	stw	r19,12(sp)
    5fc4:	dc800215 	stw	r18,8(sp)
    5fc8:	34c00417 	ldw	r19,16(r6)
    5fcc:	2c800417 	ldw	r18,16(r5)
    5fd0:	dd000415 	stw	r20,16(sp)
    5fd4:	dc400115 	stw	r17,4(sp)
    5fd8:	dfc00515 	stw	ra,20(sp)
    5fdc:	dc000015 	stw	r16,0(sp)
    5fe0:	2829883a 	mov	r20,r5
    5fe4:	3023883a 	mov	r17,r6
    5fe8:	94c0050e 	bge	r18,r19,6000 <__multiply+0x44>
    5fec:	9007883a 	mov	r3,r18
    5ff0:	3029883a 	mov	r20,r6
    5ff4:	9825883a 	mov	r18,r19
    5ff8:	2823883a 	mov	r17,r5
    5ffc:	1827883a 	mov	r19,r3
    6000:	a0800217 	ldw	r2,8(r20)
    6004:	94e1883a 	add	r16,r18,r19
    6008:	a1400117 	ldw	r5,4(r20)
    600c:	1400010e 	bge	r2,r16,6014 <__multiply+0x58>
    6010:	29400044 	addi	r5,r5,1
    6014:	0005b740 	call	5b74 <_Balloc>
    6018:	8415883a 	add	r10,r16,r16
    601c:	12c00504 	addi	r11,r2,20
    6020:	5295883a 	add	r10,r10,r10
    6024:	5a95883a 	add	r10,r11,r10
    6028:	5807883a 	mov	r3,r11
    602c:	5a80032e 	bgeu	r11,r10,603c <__multiply+0x80>
    6030:	18000015 	stw	zero,0(r3)
    6034:	18c00104 	addi	r3,r3,4
    6038:	1abffd36 	bltu	r3,r10,6030 <__multiply+0x74>
    603c:	9ce7883a 	add	r19,r19,r19
    6040:	94a5883a 	add	r18,r18,r18
    6044:	89800504 	addi	r6,r17,20
    6048:	9ce7883a 	add	r19,r19,r19
    604c:	a3400504 	addi	r13,r20,20
    6050:	94a5883a 	add	r18,r18,r18
    6054:	34d9883a 	add	r12,r6,r19
    6058:	6c93883a 	add	r9,r13,r18
    605c:	3300422e 	bgeu	r6,r12,6168 <__multiply+0x1ac>
    6060:	37c00017 	ldw	ra,0(r6)
    6064:	fbffffcc 	andi	r15,ra,65535
    6068:	78001b26 	beq	r15,zero,60d8 <__multiply+0x11c>
    606c:	5811883a 	mov	r8,r11
    6070:	681d883a 	mov	r14,r13
    6074:	000f883a 	mov	r7,zero
    6078:	71000017 	ldw	r4,0(r14)
    607c:	40c00017 	ldw	r3,0(r8)
    6080:	73800104 	addi	r14,r14,4
    6084:	217fffcc 	andi	r5,r4,65535
    6088:	2bcb383a 	mul	r5,r5,r15
    608c:	2008d43a 	srli	r4,r4,16
    6090:	1c7fffcc 	andi	r17,r3,65535
    6094:	2c4b883a 	add	r5,r5,r17
    6098:	29cb883a 	add	r5,r5,r7
    609c:	23c9383a 	mul	r4,r4,r15
    60a0:	1806d43a 	srli	r3,r3,16
    60a4:	280ed43a 	srli	r7,r5,16
    60a8:	297fffcc 	andi	r5,r5,65535
    60ac:	20c7883a 	add	r3,r4,r3
    60b0:	19c7883a 	add	r3,r3,r7
    60b4:	1808943a 	slli	r4,r3,16
    60b8:	4023883a 	mov	r17,r8
    60bc:	180ed43a 	srli	r7,r3,16
    60c0:	214ab03a 	or	r5,r4,r5
    60c4:	41400015 	stw	r5,0(r8)
    60c8:	42000104 	addi	r8,r8,4
    60cc:	727fea36 	bltu	r14,r9,6078 <__multiply+0xbc>
    60d0:	89c00115 	stw	r7,4(r17)
    60d4:	37c00017 	ldw	ra,0(r6)
    60d8:	f83ed43a 	srli	ra,ra,16
    60dc:	f8001f26 	beq	ra,zero,615c <__multiply+0x1a0>
    60e0:	58c00017 	ldw	r3,0(r11)
    60e4:	681d883a 	mov	r14,r13
    60e8:	581f883a 	mov	r15,r11
    60ec:	1811883a 	mov	r8,r3
    60f0:	5825883a 	mov	r18,r11
    60f4:	000f883a 	mov	r7,zero
    60f8:	00000106 	br	6100 <__multiply+0x144>
    60fc:	8825883a 	mov	r18,r17
    6100:	7140000b 	ldhu	r5,0(r14)
    6104:	4010d43a 	srli	r8,r8,16
    6108:	193fffcc 	andi	r4,r3,65535
    610c:	2fcb383a 	mul	r5,r5,ra
    6110:	7bc00104 	addi	r15,r15,4
    6114:	73800104 	addi	r14,r14,4
    6118:	2a0b883a 	add	r5,r5,r8
    611c:	29cb883a 	add	r5,r5,r7
    6120:	2806943a 	slli	r3,r5,16
    6124:	94400104 	addi	r17,r18,4
    6128:	280ad43a 	srli	r5,r5,16
    612c:	1908b03a 	or	r4,r3,r4
    6130:	793fff15 	stw	r4,-4(r15)
    6134:	70ffff17 	ldw	r3,-4(r14)
    6138:	8a000017 	ldw	r8,0(r17)
    613c:	1806d43a 	srli	r3,r3,16
    6140:	413fffcc 	andi	r4,r8,65535
    6144:	1fc7383a 	mul	r3,r3,ra
    6148:	1907883a 	add	r3,r3,r4
    614c:	1947883a 	add	r3,r3,r5
    6150:	180ed43a 	srli	r7,r3,16
    6154:	727fe936 	bltu	r14,r9,60fc <__multiply+0x140>
    6158:	90c00115 	stw	r3,4(r18)
    615c:	31800104 	addi	r6,r6,4
    6160:	5ac00104 	addi	r11,r11,4
    6164:	333fbe36 	bltu	r6,r12,6060 <__multiply+0xa4>
    6168:	0400090e 	bge	zero,r16,6190 <__multiply+0x1d4>
    616c:	50ffff17 	ldw	r3,-4(r10)
    6170:	52bfff04 	addi	r10,r10,-4
    6174:	18000326 	beq	r3,zero,6184 <__multiply+0x1c8>
    6178:	00000506 	br	6190 <__multiply+0x1d4>
    617c:	50c00017 	ldw	r3,0(r10)
    6180:	1800031e 	bne	r3,zero,6190 <__multiply+0x1d4>
    6184:	843fffc4 	addi	r16,r16,-1
    6188:	52bfff04 	addi	r10,r10,-4
    618c:	803ffb1e 	bne	r16,zero,617c <__multiply+0x1c0>
    6190:	14000415 	stw	r16,16(r2)
    6194:	dfc00517 	ldw	ra,20(sp)
    6198:	dd000417 	ldw	r20,16(sp)
    619c:	dcc00317 	ldw	r19,12(sp)
    61a0:	dc800217 	ldw	r18,8(sp)
    61a4:	dc400117 	ldw	r17,4(sp)
    61a8:	dc000017 	ldw	r16,0(sp)
    61ac:	dec00604 	addi	sp,sp,24
    61b0:	f800283a 	ret

000061b4 <__pow5mult>:
    61b4:	defffa04 	addi	sp,sp,-24
    61b8:	dcc00315 	stw	r19,12(sp)
    61bc:	dc000015 	stw	r16,0(sp)
    61c0:	dfc00515 	stw	ra,20(sp)
    61c4:	dd000415 	stw	r20,16(sp)
    61c8:	dc800215 	stw	r18,8(sp)
    61cc:	dc400115 	stw	r17,4(sp)
    61d0:	308000cc 	andi	r2,r6,3
    61d4:	3021883a 	mov	r16,r6
    61d8:	2027883a 	mov	r19,r4
    61dc:	10002f1e 	bne	r2,zero,629c <__pow5mult+0xe8>
    61e0:	2825883a 	mov	r18,r5
    61e4:	8021d0ba 	srai	r16,r16,2
    61e8:	80001a26 	beq	r16,zero,6254 <__pow5mult+0xa0>
    61ec:	9c401217 	ldw	r17,72(r19)
    61f0:	8800061e 	bne	r17,zero,620c <__pow5mult+0x58>
    61f4:	00003406 	br	62c8 <__pow5mult+0x114>
    61f8:	8021d07a 	srai	r16,r16,1
    61fc:	80001526 	beq	r16,zero,6254 <__pow5mult+0xa0>
    6200:	88800017 	ldw	r2,0(r17)
    6204:	10001c26 	beq	r2,zero,6278 <__pow5mult+0xc4>
    6208:	1023883a 	mov	r17,r2
    620c:	8080004c 	andi	r2,r16,1
    6210:	103ff926 	beq	r2,zero,61f8 <__pow5mult+0x44>
    6214:	880d883a 	mov	r6,r17
    6218:	900b883a 	mov	r5,r18
    621c:	9809883a 	mov	r4,r19
    6220:	0005fbc0 	call	5fbc <__multiply>
    6224:	90001b26 	beq	r18,zero,6294 <__pow5mult+0xe0>
    6228:	91000117 	ldw	r4,4(r18)
    622c:	98c01317 	ldw	r3,76(r19)
    6230:	8021d07a 	srai	r16,r16,1
    6234:	2109883a 	add	r4,r4,r4
    6238:	2109883a 	add	r4,r4,r4
    623c:	1907883a 	add	r3,r3,r4
    6240:	19000017 	ldw	r4,0(r3)
    6244:	91000015 	stw	r4,0(r18)
    6248:	1c800015 	stw	r18,0(r3)
    624c:	1025883a 	mov	r18,r2
    6250:	803feb1e 	bne	r16,zero,6200 <__pow5mult+0x4c>
    6254:	9005883a 	mov	r2,r18
    6258:	dfc00517 	ldw	ra,20(sp)
    625c:	dd000417 	ldw	r20,16(sp)
    6260:	dcc00317 	ldw	r19,12(sp)
    6264:	dc800217 	ldw	r18,8(sp)
    6268:	dc400117 	ldw	r17,4(sp)
    626c:	dc000017 	ldw	r16,0(sp)
    6270:	dec00604 	addi	sp,sp,24
    6274:	f800283a 	ret
    6278:	880d883a 	mov	r6,r17
    627c:	880b883a 	mov	r5,r17
    6280:	9809883a 	mov	r4,r19
    6284:	0005fbc0 	call	5fbc <__multiply>
    6288:	88800015 	stw	r2,0(r17)
    628c:	10000015 	stw	zero,0(r2)
    6290:	003fdd06 	br	6208 <__pow5mult+0x54>
    6294:	1025883a 	mov	r18,r2
    6298:	003fd706 	br	61f8 <__pow5mult+0x44>
    629c:	10bfffc4 	addi	r2,r2,-1
    62a0:	1085883a 	add	r2,r2,r2
    62a4:	00c000b4 	movhi	r3,2
    62a8:	18e5ae04 	addi	r3,r3,-26952
    62ac:	1085883a 	add	r2,r2,r2
    62b0:	1885883a 	add	r2,r3,r2
    62b4:	11800017 	ldw	r6,0(r2)
    62b8:	000f883a 	mov	r7,zero
    62bc:	0005c440 	call	5c44 <__multadd>
    62c0:	1025883a 	mov	r18,r2
    62c4:	003fc706 	br	61e4 <__pow5mult+0x30>
    62c8:	05000044 	movi	r20,1
    62cc:	a00b883a 	mov	r5,r20
    62d0:	9809883a 	mov	r4,r19
    62d4:	0005b740 	call	5b74 <_Balloc>
    62d8:	1023883a 	mov	r17,r2
    62dc:	00809c44 	movi	r2,625
    62e0:	88800515 	stw	r2,20(r17)
    62e4:	8d000415 	stw	r20,16(r17)
    62e8:	9c401215 	stw	r17,72(r19)
    62ec:	88000015 	stw	zero,0(r17)
    62f0:	003fc606 	br	620c <__pow5mult+0x58>

000062f4 <__lshift>:
    62f4:	defff904 	addi	sp,sp,-28
    62f8:	dd400515 	stw	r21,20(sp)
    62fc:	dcc00315 	stw	r19,12(sp)
    6300:	302bd17a 	srai	r21,r6,5
    6304:	2cc00417 	ldw	r19,16(r5)
    6308:	28800217 	ldw	r2,8(r5)
    630c:	dd000415 	stw	r20,16(sp)
    6310:	ace7883a 	add	r19,r21,r19
    6314:	dc800215 	stw	r18,8(sp)
    6318:	dc400115 	stw	r17,4(sp)
    631c:	dc000015 	stw	r16,0(sp)
    6320:	dfc00615 	stw	ra,24(sp)
    6324:	9c000044 	addi	r16,r19,1
    6328:	2823883a 	mov	r17,r5
    632c:	3029883a 	mov	r20,r6
    6330:	2025883a 	mov	r18,r4
    6334:	29400117 	ldw	r5,4(r5)
    6338:	1400030e 	bge	r2,r16,6348 <__lshift+0x54>
    633c:	1085883a 	add	r2,r2,r2
    6340:	29400044 	addi	r5,r5,1
    6344:	143ffd16 	blt	r2,r16,633c <__lshift+0x48>
    6348:	9009883a 	mov	r4,r18
    634c:	0005b740 	call	5b74 <_Balloc>
    6350:	10c00504 	addi	r3,r2,20
    6354:	0540070e 	bge	zero,r21,6374 <__lshift+0x80>
    6358:	ad6b883a 	add	r21,r21,r21
    635c:	ad6b883a 	add	r21,r21,r21
    6360:	1809883a 	mov	r4,r3
    6364:	1d47883a 	add	r3,r3,r21
    6368:	20000015 	stw	zero,0(r4)
    636c:	21000104 	addi	r4,r4,4
    6370:	193ffd1e 	bne	r3,r4,6368 <__lshift+0x74>
    6374:	8a000417 	ldw	r8,16(r17)
    6378:	89000504 	addi	r4,r17,20
    637c:	a18007cc 	andi	r6,r20,31
    6380:	4211883a 	add	r8,r8,r8
    6384:	4211883a 	add	r8,r8,r8
    6388:	2211883a 	add	r8,r4,r8
    638c:	30002326 	beq	r6,zero,641c <__lshift+0x128>
    6390:	02400804 	movi	r9,32
    6394:	4993c83a 	sub	r9,r9,r6
    6398:	000b883a 	mov	r5,zero
    639c:	21c00017 	ldw	r7,0(r4)
    63a0:	1815883a 	mov	r10,r3
    63a4:	18c00104 	addi	r3,r3,4
    63a8:	398e983a 	sll	r7,r7,r6
    63ac:	21000104 	addi	r4,r4,4
    63b0:	394ab03a 	or	r5,r7,r5
    63b4:	197fff15 	stw	r5,-4(r3)
    63b8:	217fff17 	ldw	r5,-4(r4)
    63bc:	2a4ad83a 	srl	r5,r5,r9
    63c0:	223ff636 	bltu	r4,r8,639c <__lshift+0xa8>
    63c4:	51400115 	stw	r5,4(r10)
    63c8:	28001a1e 	bne	r5,zero,6434 <__lshift+0x140>
    63cc:	843fffc4 	addi	r16,r16,-1
    63d0:	14000415 	stw	r16,16(r2)
    63d4:	88000826 	beq	r17,zero,63f8 <__lshift+0x104>
    63d8:	89000117 	ldw	r4,4(r17)
    63dc:	90c01317 	ldw	r3,76(r18)
    63e0:	2109883a 	add	r4,r4,r4
    63e4:	2109883a 	add	r4,r4,r4
    63e8:	1907883a 	add	r3,r3,r4
    63ec:	19000017 	ldw	r4,0(r3)
    63f0:	89000015 	stw	r4,0(r17)
    63f4:	1c400015 	stw	r17,0(r3)
    63f8:	dfc00617 	ldw	ra,24(sp)
    63fc:	dd400517 	ldw	r21,20(sp)
    6400:	dd000417 	ldw	r20,16(sp)
    6404:	dcc00317 	ldw	r19,12(sp)
    6408:	dc800217 	ldw	r18,8(sp)
    640c:	dc400117 	ldw	r17,4(sp)
    6410:	dc000017 	ldw	r16,0(sp)
    6414:	dec00704 	addi	sp,sp,28
    6418:	f800283a 	ret
    641c:	21400017 	ldw	r5,0(r4)
    6420:	18c00104 	addi	r3,r3,4
    6424:	21000104 	addi	r4,r4,4
    6428:	197fff15 	stw	r5,-4(r3)
    642c:	223ffb36 	bltu	r4,r8,641c <__lshift+0x128>
    6430:	003fe606 	br	63cc <__lshift+0xd8>
    6434:	9c000084 	addi	r16,r19,2
    6438:	003fe406 	br	63cc <__lshift+0xd8>

0000643c <__mcmp>:
    643c:	20800417 	ldw	r2,16(r4)
    6440:	28c00417 	ldw	r3,16(r5)
    6444:	10c5c83a 	sub	r2,r2,r3
    6448:	1000111e 	bne	r2,zero,6490 <__mcmp+0x54>
    644c:	18c7883a 	add	r3,r3,r3
    6450:	18c7883a 	add	r3,r3,r3
    6454:	21000504 	addi	r4,r4,20
    6458:	29400504 	addi	r5,r5,20
    645c:	20c5883a 	add	r2,r4,r3
    6460:	28cb883a 	add	r5,r5,r3
    6464:	00000106 	br	646c <__mcmp+0x30>
    6468:	20800a2e 	bgeu	r4,r2,6494 <__mcmp+0x58>
    646c:	10bfff04 	addi	r2,r2,-4
    6470:	297fff04 	addi	r5,r5,-4
    6474:	11800017 	ldw	r6,0(r2)
    6478:	28c00017 	ldw	r3,0(r5)
    647c:	30fffa26 	beq	r6,r3,6468 <__mcmp+0x2c>
    6480:	30c00236 	bltu	r6,r3,648c <__mcmp+0x50>
    6484:	00800044 	movi	r2,1
    6488:	f800283a 	ret
    648c:	00bfffc4 	movi	r2,-1
    6490:	f800283a 	ret
    6494:	0005883a 	mov	r2,zero
    6498:	f800283a 	ret

0000649c <__mdiff>:
    649c:	28c00417 	ldw	r3,16(r5)
    64a0:	30800417 	ldw	r2,16(r6)
    64a4:	defffa04 	addi	sp,sp,-24
    64a8:	dcc00315 	stw	r19,12(sp)
    64ac:	dc800215 	stw	r18,8(sp)
    64b0:	dfc00515 	stw	ra,20(sp)
    64b4:	dd000415 	stw	r20,16(sp)
    64b8:	dc400115 	stw	r17,4(sp)
    64bc:	dc000015 	stw	r16,0(sp)
    64c0:	1887c83a 	sub	r3,r3,r2
    64c4:	2825883a 	mov	r18,r5
    64c8:	3027883a 	mov	r19,r6
    64cc:	1800141e 	bne	r3,zero,6520 <__mdiff+0x84>
    64d0:	1085883a 	add	r2,r2,r2
    64d4:	1085883a 	add	r2,r2,r2
    64d8:	2a000504 	addi	r8,r5,20
    64dc:	34000504 	addi	r16,r6,20
    64e0:	4087883a 	add	r3,r8,r2
    64e4:	8085883a 	add	r2,r16,r2
    64e8:	00000106 	br	64f0 <__mdiff+0x54>
    64ec:	40c0592e 	bgeu	r8,r3,6654 <__mdiff+0x1b8>
    64f0:	18ffff04 	addi	r3,r3,-4
    64f4:	10bfff04 	addi	r2,r2,-4
    64f8:	19c00017 	ldw	r7,0(r3)
    64fc:	11400017 	ldw	r5,0(r2)
    6500:	397ffa26 	beq	r7,r5,64ec <__mdiff+0x50>
    6504:	3940592e 	bgeu	r7,r5,666c <__mdiff+0x1d0>
    6508:	9005883a 	mov	r2,r18
    650c:	4023883a 	mov	r17,r8
    6510:	9825883a 	mov	r18,r19
    6514:	05000044 	movi	r20,1
    6518:	1027883a 	mov	r19,r2
    651c:	00000406 	br	6530 <__mdiff+0x94>
    6520:	18005616 	blt	r3,zero,667c <__mdiff+0x1e0>
    6524:	34400504 	addi	r17,r6,20
    6528:	2c000504 	addi	r16,r5,20
    652c:	0029883a 	mov	r20,zero
    6530:	91400117 	ldw	r5,4(r18)
    6534:	0005b740 	call	5b74 <_Balloc>
    6538:	92400417 	ldw	r9,16(r18)
    653c:	9b000417 	ldw	r12,16(r19)
    6540:	12c00504 	addi	r11,r2,20
    6544:	4a51883a 	add	r8,r9,r9
    6548:	6319883a 	add	r12,r12,r12
    654c:	4211883a 	add	r8,r8,r8
    6550:	6319883a 	add	r12,r12,r12
    6554:	15000315 	stw	r20,12(r2)
    6558:	8211883a 	add	r8,r16,r8
    655c:	8b19883a 	add	r12,r17,r12
    6560:	0007883a 	mov	r3,zero
    6564:	81400017 	ldw	r5,0(r16)
    6568:	89c00017 	ldw	r7,0(r17)
    656c:	59800104 	addi	r6,r11,4
    6570:	293fffcc 	andi	r4,r5,65535
    6574:	20c7883a 	add	r3,r4,r3
    6578:	393fffcc 	andi	r4,r7,65535
    657c:	1909c83a 	sub	r4,r3,r4
    6580:	280ad43a 	srli	r5,r5,16
    6584:	380ed43a 	srli	r7,r7,16
    6588:	2007d43a 	srai	r3,r4,16
    658c:	213fffcc 	andi	r4,r4,65535
    6590:	29cbc83a 	sub	r5,r5,r7
    6594:	28c7883a 	add	r3,r5,r3
    6598:	180a943a 	slli	r5,r3,16
    659c:	8c400104 	addi	r17,r17,4
    65a0:	84000104 	addi	r16,r16,4
    65a4:	2908b03a 	or	r4,r5,r4
    65a8:	59000015 	stw	r4,0(r11)
    65ac:	1807d43a 	srai	r3,r3,16
    65b0:	3015883a 	mov	r10,r6
    65b4:	3017883a 	mov	r11,r6
    65b8:	8b3fea36 	bltu	r17,r12,6564 <__mdiff+0xc8>
    65bc:	8200162e 	bgeu	r16,r8,6618 <__mdiff+0x17c>
    65c0:	8017883a 	mov	r11,r16
    65c4:	59400017 	ldw	r5,0(r11)
    65c8:	31800104 	addi	r6,r6,4
    65cc:	5ac00104 	addi	r11,r11,4
    65d0:	293fffcc 	andi	r4,r5,65535
    65d4:	20c7883a 	add	r3,r4,r3
    65d8:	280ed43a 	srli	r7,r5,16
    65dc:	180bd43a 	srai	r5,r3,16
    65e0:	193fffcc 	andi	r4,r3,65535
    65e4:	3947883a 	add	r3,r7,r5
    65e8:	180a943a 	slli	r5,r3,16
    65ec:	1807d43a 	srai	r3,r3,16
    65f0:	2908b03a 	or	r4,r5,r4
    65f4:	313fff15 	stw	r4,-4(r6)
    65f8:	5a3ff236 	bltu	r11,r8,65c4 <__mdiff+0x128>
    65fc:	0406303a 	nor	r3,zero,r16
    6600:	1a07883a 	add	r3,r3,r8
    6604:	1806d0ba 	srli	r3,r3,2
    6608:	18c00044 	addi	r3,r3,1
    660c:	18c7883a 	add	r3,r3,r3
    6610:	18c7883a 	add	r3,r3,r3
    6614:	50d5883a 	add	r10,r10,r3
    6618:	50ffff04 	addi	r3,r10,-4
    661c:	2000041e 	bne	r4,zero,6630 <__mdiff+0x194>
    6620:	18ffff04 	addi	r3,r3,-4
    6624:	19000017 	ldw	r4,0(r3)
    6628:	4a7fffc4 	addi	r9,r9,-1
    662c:	203ffc26 	beq	r4,zero,6620 <__mdiff+0x184>
    6630:	12400415 	stw	r9,16(r2)
    6634:	dfc00517 	ldw	ra,20(sp)
    6638:	dd000417 	ldw	r20,16(sp)
    663c:	dcc00317 	ldw	r19,12(sp)
    6640:	dc800217 	ldw	r18,8(sp)
    6644:	dc400117 	ldw	r17,4(sp)
    6648:	dc000017 	ldw	r16,0(sp)
    664c:	dec00604 	addi	sp,sp,24
    6650:	f800283a 	ret
    6654:	000b883a 	mov	r5,zero
    6658:	0005b740 	call	5b74 <_Balloc>
    665c:	00c00044 	movi	r3,1
    6660:	10c00415 	stw	r3,16(r2)
    6664:	10000515 	stw	zero,20(r2)
    6668:	003ff206 	br	6634 <__mdiff+0x198>
    666c:	8023883a 	mov	r17,r16
    6670:	0029883a 	mov	r20,zero
    6674:	4021883a 	mov	r16,r8
    6678:	003fad06 	br	6530 <__mdiff+0x94>
    667c:	9005883a 	mov	r2,r18
    6680:	94400504 	addi	r17,r18,20
    6684:	9c000504 	addi	r16,r19,20
    6688:	9825883a 	mov	r18,r19
    668c:	05000044 	movi	r20,1
    6690:	1027883a 	mov	r19,r2
    6694:	003fa606 	br	6530 <__mdiff+0x94>

00006698 <__ulp>:
    6698:	295ffc2c 	andhi	r5,r5,32752
    669c:	00bf3034 	movhi	r2,64704
    66a0:	2887883a 	add	r3,r5,r2
    66a4:	00c0020e 	bge	zero,r3,66b0 <__ulp+0x18>
    66a8:	0005883a 	mov	r2,zero
    66ac:	f800283a 	ret
    66b0:	00c7c83a 	sub	r3,zero,r3
    66b4:	1807d53a 	srai	r3,r3,20
    66b8:	008004c4 	movi	r2,19
    66bc:	10c00b0e 	bge	r2,r3,66ec <__ulp+0x54>
    66c0:	18bffb04 	addi	r2,r3,-20
    66c4:	01000784 	movi	r4,30
    66c8:	0007883a 	mov	r3,zero
    66cc:	20800516 	blt	r4,r2,66e4 <__ulp+0x4c>
    66d0:	010007c4 	movi	r4,31
    66d4:	2089c83a 	sub	r4,r4,r2
    66d8:	00800044 	movi	r2,1
    66dc:	1104983a 	sll	r2,r2,r4
    66e0:	f800283a 	ret
    66e4:	00800044 	movi	r2,1
    66e8:	f800283a 	ret
    66ec:	01400234 	movhi	r5,8
    66f0:	28c7d83a 	sra	r3,r5,r3
    66f4:	0005883a 	mov	r2,zero
    66f8:	f800283a 	ret

000066fc <__b2d>:
    66fc:	defffa04 	addi	sp,sp,-24
    6700:	dc000015 	stw	r16,0(sp)
    6704:	24000417 	ldw	r16,16(r4)
    6708:	dc400115 	stw	r17,4(sp)
    670c:	24400504 	addi	r17,r4,20
    6710:	8421883a 	add	r16,r16,r16
    6714:	8421883a 	add	r16,r16,r16
    6718:	8c21883a 	add	r16,r17,r16
    671c:	dc800215 	stw	r18,8(sp)
    6720:	84bfff17 	ldw	r18,-4(r16)
    6724:	dd000415 	stw	r20,16(sp)
    6728:	dcc00315 	stw	r19,12(sp)
    672c:	9009883a 	mov	r4,r18
    6730:	2829883a 	mov	r20,r5
    6734:	dfc00515 	stw	ra,20(sp)
    6738:	0005e680 	call	5e68 <__hi0bits>
    673c:	00c00804 	movi	r3,32
    6740:	1889c83a 	sub	r4,r3,r2
    6744:	a1000015 	stw	r4,0(r20)
    6748:	01000284 	movi	r4,10
    674c:	84ffff04 	addi	r19,r16,-4
    6750:	20801216 	blt	r4,r2,679c <__b2d+0xa0>
    6754:	018002c4 	movi	r6,11
    6758:	308dc83a 	sub	r6,r6,r2
    675c:	9186d83a 	srl	r3,r18,r6
    6760:	18cffc34 	orhi	r3,r3,16368
    6764:	8cc0212e 	bgeu	r17,r19,67ec <__b2d+0xf0>
    6768:	813ffe17 	ldw	r4,-8(r16)
    676c:	218cd83a 	srl	r6,r4,r6
    6770:	10800544 	addi	r2,r2,21
    6774:	9084983a 	sll	r2,r18,r2
    6778:	1184b03a 	or	r2,r2,r6
    677c:	dfc00517 	ldw	ra,20(sp)
    6780:	dd000417 	ldw	r20,16(sp)
    6784:	dcc00317 	ldw	r19,12(sp)
    6788:	dc800217 	ldw	r18,8(sp)
    678c:	dc400117 	ldw	r17,4(sp)
    6790:	dc000017 	ldw	r16,0(sp)
    6794:	dec00604 	addi	sp,sp,24
    6798:	f800283a 	ret
    679c:	8cc00f2e 	bgeu	r17,r19,67dc <__b2d+0xe0>
    67a0:	117ffd44 	addi	r5,r2,-11
    67a4:	80bffe17 	ldw	r2,-8(r16)
    67a8:	28000e26 	beq	r5,zero,67e4 <__b2d+0xe8>
    67ac:	1949c83a 	sub	r4,r3,r5
    67b0:	9164983a 	sll	r18,r18,r5
    67b4:	1106d83a 	srl	r3,r2,r4
    67b8:	81bffe04 	addi	r6,r16,-8
    67bc:	948ffc34 	orhi	r18,r18,16368
    67c0:	90c6b03a 	or	r3,r18,r3
    67c4:	89800e2e 	bgeu	r17,r6,6800 <__b2d+0x104>
    67c8:	81bffd17 	ldw	r6,-12(r16)
    67cc:	1144983a 	sll	r2,r2,r5
    67d0:	310ad83a 	srl	r5,r6,r4
    67d4:	2884b03a 	or	r2,r5,r2
    67d8:	003fe806 	br	677c <__b2d+0x80>
    67dc:	10bffd44 	addi	r2,r2,-11
    67e0:	1000041e 	bne	r2,zero,67f4 <__b2d+0xf8>
    67e4:	90cffc34 	orhi	r3,r18,16368
    67e8:	003fe406 	br	677c <__b2d+0x80>
    67ec:	000d883a 	mov	r6,zero
    67f0:	003fdf06 	br	6770 <__b2d+0x74>
    67f4:	90a4983a 	sll	r18,r18,r2
    67f8:	0005883a 	mov	r2,zero
    67fc:	003ff906 	br	67e4 <__b2d+0xe8>
    6800:	1144983a 	sll	r2,r2,r5
    6804:	003fdd06 	br	677c <__b2d+0x80>

00006808 <__d2b>:
    6808:	defff804 	addi	sp,sp,-32
    680c:	dc000215 	stw	r16,8(sp)
    6810:	3021883a 	mov	r16,r6
    6814:	dc400315 	stw	r17,12(sp)
    6818:	8022907a 	slli	r17,r16,1
    681c:	dd000615 	stw	r20,24(sp)
    6820:	2829883a 	mov	r20,r5
    6824:	01400044 	movi	r5,1
    6828:	dcc00515 	stw	r19,20(sp)
    682c:	dc800415 	stw	r18,16(sp)
    6830:	dfc00715 	stw	ra,28(sp)
    6834:	3825883a 	mov	r18,r7
    6838:	8822d57a 	srli	r17,r17,21
    683c:	0005b740 	call	5b74 <_Balloc>
    6840:	1027883a 	mov	r19,r2
    6844:	00800434 	movhi	r2,16
    6848:	10bfffc4 	addi	r2,r2,-1
    684c:	808c703a 	and	r6,r16,r2
    6850:	88000126 	beq	r17,zero,6858 <__d2b+0x50>
    6854:	31800434 	orhi	r6,r6,16
    6858:	d9800015 	stw	r6,0(sp)
    685c:	a0002426 	beq	r20,zero,68f0 <__d2b+0xe8>
    6860:	d9000104 	addi	r4,sp,4
    6864:	dd000115 	stw	r20,4(sp)
    6868:	0005ed00 	call	5ed0 <__lo0bits>
    686c:	d8c00017 	ldw	r3,0(sp)
    6870:	10002f1e 	bne	r2,zero,6930 <__d2b+0x128>
    6874:	d9000117 	ldw	r4,4(sp)
    6878:	99000515 	stw	r4,20(r19)
    687c:	1821003a 	cmpeq	r16,r3,zero
    6880:	01000084 	movi	r4,2
    6884:	2421c83a 	sub	r16,r4,r16
    6888:	98c00615 	stw	r3,24(r19)
    688c:	9c000415 	stw	r16,16(r19)
    6890:	88001f1e 	bne	r17,zero,6910 <__d2b+0x108>
    6894:	10bef384 	addi	r2,r2,-1074
    6898:	90800015 	stw	r2,0(r18)
    689c:	00900034 	movhi	r2,16384
    68a0:	10bfffc4 	addi	r2,r2,-1
    68a4:	8085883a 	add	r2,r16,r2
    68a8:	1085883a 	add	r2,r2,r2
    68ac:	1085883a 	add	r2,r2,r2
    68b0:	9885883a 	add	r2,r19,r2
    68b4:	11000517 	ldw	r4,20(r2)
    68b8:	8020917a 	slli	r16,r16,5
    68bc:	0005e680 	call	5e68 <__hi0bits>
    68c0:	d8c00817 	ldw	r3,32(sp)
    68c4:	8085c83a 	sub	r2,r16,r2
    68c8:	18800015 	stw	r2,0(r3)
    68cc:	9805883a 	mov	r2,r19
    68d0:	dfc00717 	ldw	ra,28(sp)
    68d4:	dd000617 	ldw	r20,24(sp)
    68d8:	dcc00517 	ldw	r19,20(sp)
    68dc:	dc800417 	ldw	r18,16(sp)
    68e0:	dc400317 	ldw	r17,12(sp)
    68e4:	dc000217 	ldw	r16,8(sp)
    68e8:	dec00804 	addi	sp,sp,32
    68ec:	f800283a 	ret
    68f0:	d809883a 	mov	r4,sp
    68f4:	0005ed00 	call	5ed0 <__lo0bits>
    68f8:	d8c00017 	ldw	r3,0(sp)
    68fc:	04000044 	movi	r16,1
    6900:	9c000415 	stw	r16,16(r19)
    6904:	98c00515 	stw	r3,20(r19)
    6908:	10800804 	addi	r2,r2,32
    690c:	883fe126 	beq	r17,zero,6894 <__d2b+0x8c>
    6910:	00c00d44 	movi	r3,53
    6914:	8c7ef344 	addi	r17,r17,-1075
    6918:	88a3883a 	add	r17,r17,r2
    691c:	1885c83a 	sub	r2,r3,r2
    6920:	d8c00817 	ldw	r3,32(sp)
    6924:	94400015 	stw	r17,0(r18)
    6928:	18800015 	stw	r2,0(r3)
    692c:	003fe706 	br	68cc <__d2b+0xc4>
    6930:	01000804 	movi	r4,32
    6934:	2089c83a 	sub	r4,r4,r2
    6938:	1908983a 	sll	r4,r3,r4
    693c:	d9400117 	ldw	r5,4(sp)
    6940:	1886d83a 	srl	r3,r3,r2
    6944:	2148b03a 	or	r4,r4,r5
    6948:	99000515 	stw	r4,20(r19)
    694c:	d8c00015 	stw	r3,0(sp)
    6950:	003fca06 	br	687c <__d2b+0x74>

00006954 <__ratio>:
    6954:	defff904 	addi	sp,sp,-28
    6958:	dc400315 	stw	r17,12(sp)
    695c:	2823883a 	mov	r17,r5
    6960:	d9400104 	addi	r5,sp,4
    6964:	dfc00615 	stw	ra,24(sp)
    6968:	dcc00515 	stw	r19,20(sp)
    696c:	dc800415 	stw	r18,16(sp)
    6970:	2027883a 	mov	r19,r4
    6974:	dc000215 	stw	r16,8(sp)
    6978:	00066fc0 	call	66fc <__b2d>
    697c:	d80b883a 	mov	r5,sp
    6980:	8809883a 	mov	r4,r17
    6984:	1025883a 	mov	r18,r2
    6988:	1821883a 	mov	r16,r3
    698c:	00066fc0 	call	66fc <__b2d>
    6990:	8a000417 	ldw	r8,16(r17)
    6994:	99000417 	ldw	r4,16(r19)
    6998:	d9400117 	ldw	r5,4(sp)
    699c:	2209c83a 	sub	r4,r4,r8
    69a0:	2010917a 	slli	r8,r4,5
    69a4:	d9000017 	ldw	r4,0(sp)
    69a8:	2909c83a 	sub	r4,r5,r4
    69ac:	4109883a 	add	r4,r8,r4
    69b0:	01000e0e 	bge	zero,r4,69ec <__ratio+0x98>
    69b4:	2008953a 	slli	r4,r4,20
    69b8:	2421883a 	add	r16,r4,r16
    69bc:	100d883a 	mov	r6,r2
    69c0:	180f883a 	mov	r7,r3
    69c4:	9009883a 	mov	r4,r18
    69c8:	800b883a 	mov	r5,r16
    69cc:	000aef00 	call	aef0 <__divdf3>
    69d0:	dfc00617 	ldw	ra,24(sp)
    69d4:	dcc00517 	ldw	r19,20(sp)
    69d8:	dc800417 	ldw	r18,16(sp)
    69dc:	dc400317 	ldw	r17,12(sp)
    69e0:	dc000217 	ldw	r16,8(sp)
    69e4:	dec00704 	addi	sp,sp,28
    69e8:	f800283a 	ret
    69ec:	2008953a 	slli	r4,r4,20
    69f0:	1907c83a 	sub	r3,r3,r4
    69f4:	003ff106 	br	69bc <__ratio+0x68>

000069f8 <_mprec_log10>:
    69f8:	defffe04 	addi	sp,sp,-8
    69fc:	dc000015 	stw	r16,0(sp)
    6a00:	dfc00115 	stw	ra,4(sp)
    6a04:	008005c4 	movi	r2,23
    6a08:	2021883a 	mov	r16,r4
    6a0c:	11000d0e 	bge	r2,r4,6a44 <_mprec_log10+0x4c>
    6a10:	0005883a 	mov	r2,zero
    6a14:	00cffc34 	movhi	r3,16368
    6a18:	843fffc4 	addi	r16,r16,-1
    6a1c:	000d883a 	mov	r6,zero
    6a20:	01d00934 	movhi	r7,16420
    6a24:	1009883a 	mov	r4,r2
    6a28:	180b883a 	mov	r5,r3
    6a2c:	000ba300 	call	ba30 <__muldf3>
    6a30:	803ff91e 	bne	r16,zero,6a18 <_mprec_log10+0x20>
    6a34:	dfc00117 	ldw	ra,4(sp)
    6a38:	dc000017 	ldw	r16,0(sp)
    6a3c:	dec00204 	addi	sp,sp,8
    6a40:	f800283a 	ret
    6a44:	202090fa 	slli	r16,r4,3
    6a48:	008000b4 	movhi	r2,2
    6a4c:	10a5c504 	addi	r2,r2,-26860
    6a50:	1421883a 	add	r16,r2,r16
    6a54:	80800017 	ldw	r2,0(r16)
    6a58:	80c00117 	ldw	r3,4(r16)
    6a5c:	dfc00117 	ldw	ra,4(sp)
    6a60:	dc000017 	ldw	r16,0(sp)
    6a64:	dec00204 	addi	sp,sp,8
    6a68:	f800283a 	ret

00006a6c <__copybits>:
    6a6c:	297fffc4 	addi	r5,r5,-1
    6a70:	280fd17a 	srai	r7,r5,5
    6a74:	30c00417 	ldw	r3,16(r6)
    6a78:	30800504 	addi	r2,r6,20
    6a7c:	39c00044 	addi	r7,r7,1
    6a80:	18c7883a 	add	r3,r3,r3
    6a84:	39cf883a 	add	r7,r7,r7
    6a88:	18c7883a 	add	r3,r3,r3
    6a8c:	39cf883a 	add	r7,r7,r7
    6a90:	10c7883a 	add	r3,r2,r3
    6a94:	21cf883a 	add	r7,r4,r7
    6a98:	10c00d2e 	bgeu	r2,r3,6ad0 <__copybits+0x64>
    6a9c:	200b883a 	mov	r5,r4
    6aa0:	12000017 	ldw	r8,0(r2)
    6aa4:	29400104 	addi	r5,r5,4
    6aa8:	10800104 	addi	r2,r2,4
    6aac:	2a3fff15 	stw	r8,-4(r5)
    6ab0:	10fffb36 	bltu	r2,r3,6aa0 <__copybits+0x34>
    6ab4:	1985c83a 	sub	r2,r3,r6
    6ab8:	10bffac4 	addi	r2,r2,-21
    6abc:	1004d0ba 	srli	r2,r2,2
    6ac0:	10800044 	addi	r2,r2,1
    6ac4:	1085883a 	add	r2,r2,r2
    6ac8:	1085883a 	add	r2,r2,r2
    6acc:	2089883a 	add	r4,r4,r2
    6ad0:	21c0032e 	bgeu	r4,r7,6ae0 <__copybits+0x74>
    6ad4:	20000015 	stw	zero,0(r4)
    6ad8:	21000104 	addi	r4,r4,4
    6adc:	21fffd36 	bltu	r4,r7,6ad4 <__copybits+0x68>
    6ae0:	f800283a 	ret

00006ae4 <__any_on>:
    6ae4:	20c00417 	ldw	r3,16(r4)
    6ae8:	2805d17a 	srai	r2,r5,5
    6aec:	21000504 	addi	r4,r4,20
    6af0:	18800d0e 	bge	r3,r2,6b28 <__any_on+0x44>
    6af4:	18c7883a 	add	r3,r3,r3
    6af8:	18c7883a 	add	r3,r3,r3
    6afc:	20c7883a 	add	r3,r4,r3
    6b00:	20c0192e 	bgeu	r4,r3,6b68 <__any_on+0x84>
    6b04:	18bfff17 	ldw	r2,-4(r3)
    6b08:	18ffff04 	addi	r3,r3,-4
    6b0c:	1000041e 	bne	r2,zero,6b20 <__any_on+0x3c>
    6b10:	20c0142e 	bgeu	r4,r3,6b64 <__any_on+0x80>
    6b14:	18ffff04 	addi	r3,r3,-4
    6b18:	19400017 	ldw	r5,0(r3)
    6b1c:	283ffc26 	beq	r5,zero,6b10 <__any_on+0x2c>
    6b20:	00800044 	movi	r2,1
    6b24:	f800283a 	ret
    6b28:	10c00a0e 	bge	r2,r3,6b54 <__any_on+0x70>
    6b2c:	1085883a 	add	r2,r2,r2
    6b30:	1085883a 	add	r2,r2,r2
    6b34:	294007cc 	andi	r5,r5,31
    6b38:	2087883a 	add	r3,r4,r2
    6b3c:	283ff026 	beq	r5,zero,6b00 <__any_on+0x1c>
    6b40:	19800017 	ldw	r6,0(r3)
    6b44:	3144d83a 	srl	r2,r6,r5
    6b48:	114a983a 	sll	r5,r2,r5
    6b4c:	317ff41e 	bne	r6,r5,6b20 <__any_on+0x3c>
    6b50:	003feb06 	br	6b00 <__any_on+0x1c>
    6b54:	1085883a 	add	r2,r2,r2
    6b58:	1085883a 	add	r2,r2,r2
    6b5c:	2087883a 	add	r3,r4,r2
    6b60:	003fe706 	br	6b00 <__any_on+0x1c>
    6b64:	f800283a 	ret
    6b68:	0005883a 	mov	r2,zero
    6b6c:	f800283a 	ret

00006b70 <__fpclassifyd>:
    6b70:	00a00034 	movhi	r2,32768
    6b74:	10bfffc4 	addi	r2,r2,-1
    6b78:	2884703a 	and	r2,r5,r2
    6b7c:	10000726 	beq	r2,zero,6b9c <__fpclassifyd+0x2c>
    6b80:	00fffc34 	movhi	r3,65520
    6b84:	019ff834 	movhi	r6,32736
    6b88:	28c7883a 	add	r3,r5,r3
    6b8c:	31bfffc4 	addi	r6,r6,-1
    6b90:	30c00536 	bltu	r6,r3,6ba8 <__fpclassifyd+0x38>
    6b94:	00800104 	movi	r2,4
    6b98:	f800283a 	ret
    6b9c:	2000021e 	bne	r4,zero,6ba8 <__fpclassifyd+0x38>
    6ba0:	00800084 	movi	r2,2
    6ba4:	f800283a 	ret
    6ba8:	00dffc34 	movhi	r3,32752
    6bac:	019ff834 	movhi	r6,32736
    6bb0:	28cb883a 	add	r5,r5,r3
    6bb4:	31bfffc4 	addi	r6,r6,-1
    6bb8:	317ff62e 	bgeu	r6,r5,6b94 <__fpclassifyd+0x24>
    6bbc:	01400434 	movhi	r5,16
    6bc0:	297fffc4 	addi	r5,r5,-1
    6bc4:	28800236 	bltu	r5,r2,6bd0 <__fpclassifyd+0x60>
    6bc8:	008000c4 	movi	r2,3
    6bcc:	f800283a 	ret
    6bd0:	10c00226 	beq	r2,r3,6bdc <__fpclassifyd+0x6c>
    6bd4:	0005883a 	mov	r2,zero
    6bd8:	f800283a 	ret
    6bdc:	2005003a 	cmpeq	r2,r4,zero
    6be0:	f800283a 	ret

00006be4 <_sbrk_r>:
    6be4:	defffd04 	addi	sp,sp,-12
    6be8:	dc000015 	stw	r16,0(sp)
    6bec:	040000b4 	movhi	r16,2
    6bf0:	dc400115 	stw	r17,4(sp)
    6bf4:	84365104 	addi	r16,r16,-9916
    6bf8:	2023883a 	mov	r17,r4
    6bfc:	2809883a 	mov	r4,r5
    6c00:	dfc00215 	stw	ra,8(sp)
    6c04:	80000015 	stw	zero,0(r16)
    6c08:	000d4840 	call	d484 <sbrk>
    6c0c:	00ffffc4 	movi	r3,-1
    6c10:	10c00526 	beq	r2,r3,6c28 <_sbrk_r+0x44>
    6c14:	dfc00217 	ldw	ra,8(sp)
    6c18:	dc400117 	ldw	r17,4(sp)
    6c1c:	dc000017 	ldw	r16,0(sp)
    6c20:	dec00304 	addi	sp,sp,12
    6c24:	f800283a 	ret
    6c28:	80c00017 	ldw	r3,0(r16)
    6c2c:	183ff926 	beq	r3,zero,6c14 <_sbrk_r+0x30>
    6c30:	88c00015 	stw	r3,0(r17)
    6c34:	003ff706 	br	6c14 <_sbrk_r+0x30>

00006c38 <__sread>:
    6c38:	defffe04 	addi	sp,sp,-8
    6c3c:	dc000015 	stw	r16,0(sp)
    6c40:	2821883a 	mov	r16,r5
    6c44:	2940038f 	ldh	r5,14(r5)
    6c48:	dfc00115 	stw	ra,4(sp)
    6c4c:	00090dc0 	call	90dc <_read_r>
    6c50:	10000716 	blt	r2,zero,6c70 <__sread+0x38>
    6c54:	80c01417 	ldw	r3,80(r16)
    6c58:	1887883a 	add	r3,r3,r2
    6c5c:	80c01415 	stw	r3,80(r16)
    6c60:	dfc00117 	ldw	ra,4(sp)
    6c64:	dc000017 	ldw	r16,0(sp)
    6c68:	dec00204 	addi	sp,sp,8
    6c6c:	f800283a 	ret
    6c70:	80c0030b 	ldhu	r3,12(r16)
    6c74:	18fbffcc 	andi	r3,r3,61439
    6c78:	80c0030d 	sth	r3,12(r16)
    6c7c:	dfc00117 	ldw	ra,4(sp)
    6c80:	dc000017 	ldw	r16,0(sp)
    6c84:	dec00204 	addi	sp,sp,8
    6c88:	f800283a 	ret

00006c8c <__seofread>:
    6c8c:	0005883a 	mov	r2,zero
    6c90:	f800283a 	ret

00006c94 <__swrite>:
    6c94:	2880030b 	ldhu	r2,12(r5)
    6c98:	defffb04 	addi	sp,sp,-20
    6c9c:	dcc00315 	stw	r19,12(sp)
    6ca0:	dc800215 	stw	r18,8(sp)
    6ca4:	dc400115 	stw	r17,4(sp)
    6ca8:	dc000015 	stw	r16,0(sp)
    6cac:	dfc00415 	stw	ra,16(sp)
    6cb0:	10c0400c 	andi	r3,r2,256
    6cb4:	2821883a 	mov	r16,r5
    6cb8:	2023883a 	mov	r17,r4
    6cbc:	3025883a 	mov	r18,r6
    6cc0:	3827883a 	mov	r19,r7
    6cc4:	18000526 	beq	r3,zero,6cdc <__swrite+0x48>
    6cc8:	2940038f 	ldh	r5,14(r5)
    6ccc:	01c00084 	movi	r7,2
    6cd0:	000d883a 	mov	r6,zero
    6cd4:	0008f200 	call	8f20 <_lseek_r>
    6cd8:	8080030b 	ldhu	r2,12(r16)
    6cdc:	8140038f 	ldh	r5,14(r16)
    6ce0:	10bbffcc 	andi	r2,r2,61439
    6ce4:	980f883a 	mov	r7,r19
    6ce8:	900d883a 	mov	r6,r18
    6cec:	8809883a 	mov	r4,r17
    6cf0:	8080030d 	sth	r2,12(r16)
    6cf4:	dfc00417 	ldw	ra,16(sp)
    6cf8:	dcc00317 	ldw	r19,12(sp)
    6cfc:	dc800217 	ldw	r18,8(sp)
    6d00:	dc400117 	ldw	r17,4(sp)
    6d04:	dc000017 	ldw	r16,0(sp)
    6d08:	dec00504 	addi	sp,sp,20
    6d0c:	00085301 	jmpi	8530 <_write_r>

00006d10 <__sseek>:
    6d10:	defffe04 	addi	sp,sp,-8
    6d14:	dc000015 	stw	r16,0(sp)
    6d18:	2821883a 	mov	r16,r5
    6d1c:	2940038f 	ldh	r5,14(r5)
    6d20:	dfc00115 	stw	ra,4(sp)
    6d24:	0008f200 	call	8f20 <_lseek_r>
    6d28:	00ffffc4 	movi	r3,-1
    6d2c:	10c00826 	beq	r2,r3,6d50 <__sseek+0x40>
    6d30:	80c0030b 	ldhu	r3,12(r16)
    6d34:	80801415 	stw	r2,80(r16)
    6d38:	18c40014 	ori	r3,r3,4096
    6d3c:	80c0030d 	sth	r3,12(r16)
    6d40:	dfc00117 	ldw	ra,4(sp)
    6d44:	dc000017 	ldw	r16,0(sp)
    6d48:	dec00204 	addi	sp,sp,8
    6d4c:	f800283a 	ret
    6d50:	80c0030b 	ldhu	r3,12(r16)
    6d54:	18fbffcc 	andi	r3,r3,61439
    6d58:	80c0030d 	sth	r3,12(r16)
    6d5c:	dfc00117 	ldw	ra,4(sp)
    6d60:	dc000017 	ldw	r16,0(sp)
    6d64:	dec00204 	addi	sp,sp,8
    6d68:	f800283a 	ret

00006d6c <__sclose>:
    6d6c:	2940038f 	ldh	r5,14(r5)
    6d70:	00085901 	jmpi	8590 <_close_r>

00006d74 <strcmp>:
    6d74:	2144b03a 	or	r2,r4,r5
    6d78:	108000cc 	andi	r2,r2,3
    6d7c:	1000171e 	bne	r2,zero,6ddc <strcmp+0x68>
    6d80:	20800017 	ldw	r2,0(r4)
    6d84:	28c00017 	ldw	r3,0(r5)
    6d88:	10c0141e 	bne	r2,r3,6ddc <strcmp+0x68>
    6d8c:	027fbff4 	movhi	r9,65279
    6d90:	4a7fbfc4 	addi	r9,r9,-257
    6d94:	0086303a 	nor	r3,zero,r2
    6d98:	02202074 	movhi	r8,32897
    6d9c:	1245883a 	add	r2,r2,r9
    6da0:	42202004 	addi	r8,r8,-32640
    6da4:	10c4703a 	and	r2,r2,r3
    6da8:	1204703a 	and	r2,r2,r8
    6dac:	10000226 	beq	r2,zero,6db8 <strcmp+0x44>
    6db0:	00002306 	br	6e40 <strcmp+0xcc>
    6db4:	1000221e 	bne	r2,zero,6e40 <strcmp+0xcc>
    6db8:	21000104 	addi	r4,r4,4
    6dbc:	20c00017 	ldw	r3,0(r4)
    6dc0:	29400104 	addi	r5,r5,4
    6dc4:	29800017 	ldw	r6,0(r5)
    6dc8:	1a4f883a 	add	r7,r3,r9
    6dcc:	00c4303a 	nor	r2,zero,r3
    6dd0:	3884703a 	and	r2,r7,r2
    6dd4:	1204703a 	and	r2,r2,r8
    6dd8:	19bff626 	beq	r3,r6,6db4 <strcmp+0x40>
    6ddc:	20800003 	ldbu	r2,0(r4)
    6de0:	10c03fcc 	andi	r3,r2,255
    6de4:	18c0201c 	xori	r3,r3,128
    6de8:	18ffe004 	addi	r3,r3,-128
    6dec:	18000c26 	beq	r3,zero,6e20 <strcmp+0xac>
    6df0:	29800007 	ldb	r6,0(r5)
    6df4:	19800326 	beq	r3,r6,6e04 <strcmp+0x90>
    6df8:	00001306 	br	6e48 <strcmp+0xd4>
    6dfc:	29800007 	ldb	r6,0(r5)
    6e00:	11800b1e 	bne	r2,r6,6e30 <strcmp+0xbc>
    6e04:	21000044 	addi	r4,r4,1
    6e08:	20c00003 	ldbu	r3,0(r4)
    6e0c:	29400044 	addi	r5,r5,1
    6e10:	18803fcc 	andi	r2,r3,255
    6e14:	1080201c 	xori	r2,r2,128
    6e18:	10bfe004 	addi	r2,r2,-128
    6e1c:	103ff71e 	bne	r2,zero,6dfc <strcmp+0x88>
    6e20:	0007883a 	mov	r3,zero
    6e24:	28800003 	ldbu	r2,0(r5)
    6e28:	1885c83a 	sub	r2,r3,r2
    6e2c:	f800283a 	ret
    6e30:	28800003 	ldbu	r2,0(r5)
    6e34:	18c03fcc 	andi	r3,r3,255
    6e38:	1885c83a 	sub	r2,r3,r2
    6e3c:	f800283a 	ret
    6e40:	0005883a 	mov	r2,zero
    6e44:	f800283a 	ret
    6e48:	10c03fcc 	andi	r3,r2,255
    6e4c:	003ff506 	br	6e24 <strcmp+0xb0>

00006e50 <strlen>:
    6e50:	208000cc 	andi	r2,r4,3
    6e54:	10002026 	beq	r2,zero,6ed8 <strlen+0x88>
    6e58:	20800007 	ldb	r2,0(r4)
    6e5c:	10002026 	beq	r2,zero,6ee0 <strlen+0x90>
    6e60:	2005883a 	mov	r2,r4
    6e64:	00000206 	br	6e70 <strlen+0x20>
    6e68:	10c00007 	ldb	r3,0(r2)
    6e6c:	18001826 	beq	r3,zero,6ed0 <strlen+0x80>
    6e70:	10800044 	addi	r2,r2,1
    6e74:	10c000cc 	andi	r3,r2,3
    6e78:	183ffb1e 	bne	r3,zero,6e68 <strlen+0x18>
    6e7c:	10c00017 	ldw	r3,0(r2)
    6e80:	01ffbff4 	movhi	r7,65279
    6e84:	39ffbfc4 	addi	r7,r7,-257
    6e88:	00ca303a 	nor	r5,zero,r3
    6e8c:	01a02074 	movhi	r6,32897
    6e90:	19c7883a 	add	r3,r3,r7
    6e94:	31a02004 	addi	r6,r6,-32640
    6e98:	1946703a 	and	r3,r3,r5
    6e9c:	1986703a 	and	r3,r3,r6
    6ea0:	1800091e 	bne	r3,zero,6ec8 <strlen+0x78>
    6ea4:	10800104 	addi	r2,r2,4
    6ea8:	10c00017 	ldw	r3,0(r2)
    6eac:	19cb883a 	add	r5,r3,r7
    6eb0:	00c6303a 	nor	r3,zero,r3
    6eb4:	28c6703a 	and	r3,r5,r3
    6eb8:	1986703a 	and	r3,r3,r6
    6ebc:	183ff926 	beq	r3,zero,6ea4 <strlen+0x54>
    6ec0:	00000106 	br	6ec8 <strlen+0x78>
    6ec4:	10800044 	addi	r2,r2,1
    6ec8:	10c00007 	ldb	r3,0(r2)
    6ecc:	183ffd1e 	bne	r3,zero,6ec4 <strlen+0x74>
    6ed0:	1105c83a 	sub	r2,r2,r4
    6ed4:	f800283a 	ret
    6ed8:	2005883a 	mov	r2,r4
    6edc:	003fe706 	br	6e7c <strlen+0x2c>
    6ee0:	0005883a 	mov	r2,zero
    6ee4:	f800283a 	ret

00006ee8 <__sprint_r.part.0>:
    6ee8:	28801917 	ldw	r2,100(r5)
    6eec:	defff604 	addi	sp,sp,-40
    6ef0:	dd400515 	stw	r21,20(sp)
    6ef4:	dfc00915 	stw	ra,36(sp)
    6ef8:	df000815 	stw	fp,32(sp)
    6efc:	ddc00715 	stw	r23,28(sp)
    6f00:	dd800615 	stw	r22,24(sp)
    6f04:	dd000415 	stw	r20,16(sp)
    6f08:	dcc00315 	stw	r19,12(sp)
    6f0c:	dc800215 	stw	r18,8(sp)
    6f10:	dc400115 	stw	r17,4(sp)
    6f14:	dc000015 	stw	r16,0(sp)
    6f18:	1088000c 	andi	r2,r2,8192
    6f1c:	302b883a 	mov	r21,r6
    6f20:	10002e26 	beq	r2,zero,6fdc <__sprint_r.part.0+0xf4>
    6f24:	30800217 	ldw	r2,8(r6)
    6f28:	35800017 	ldw	r22,0(r6)
    6f2c:	10002926 	beq	r2,zero,6fd4 <__sprint_r.part.0+0xec>
    6f30:	2827883a 	mov	r19,r5
    6f34:	2029883a 	mov	r20,r4
    6f38:	b5c00104 	addi	r23,r22,4
    6f3c:	04bfffc4 	movi	r18,-1
    6f40:	bc400017 	ldw	r17,0(r23)
    6f44:	b4000017 	ldw	r16,0(r22)
    6f48:	0039883a 	mov	fp,zero
    6f4c:	8822d0ba 	srli	r17,r17,2
    6f50:	8800031e 	bne	r17,zero,6f60 <__sprint_r.part.0+0x78>
    6f54:	00001806 	br	6fb8 <__sprint_r.part.0+0xd0>
    6f58:	84000104 	addi	r16,r16,4
    6f5c:	8f001526 	beq	r17,fp,6fb4 <__sprint_r.part.0+0xcc>
    6f60:	81400017 	ldw	r5,0(r16)
    6f64:	980d883a 	mov	r6,r19
    6f68:	a009883a 	mov	r4,r20
    6f6c:	00089100 	call	8910 <_fputwc_r>
    6f70:	e7000044 	addi	fp,fp,1
    6f74:	14bff81e 	bne	r2,r18,6f58 <__sprint_r.part.0+0x70>
    6f78:	9005883a 	mov	r2,r18
    6f7c:	a8000215 	stw	zero,8(r21)
    6f80:	a8000115 	stw	zero,4(r21)
    6f84:	dfc00917 	ldw	ra,36(sp)
    6f88:	df000817 	ldw	fp,32(sp)
    6f8c:	ddc00717 	ldw	r23,28(sp)
    6f90:	dd800617 	ldw	r22,24(sp)
    6f94:	dd400517 	ldw	r21,20(sp)
    6f98:	dd000417 	ldw	r20,16(sp)
    6f9c:	dcc00317 	ldw	r19,12(sp)
    6fa0:	dc800217 	ldw	r18,8(sp)
    6fa4:	dc400117 	ldw	r17,4(sp)
    6fa8:	dc000017 	ldw	r16,0(sp)
    6fac:	dec00a04 	addi	sp,sp,40
    6fb0:	f800283a 	ret
    6fb4:	a8800217 	ldw	r2,8(r21)
    6fb8:	8c63883a 	add	r17,r17,r17
    6fbc:	8c63883a 	add	r17,r17,r17
    6fc0:	1445c83a 	sub	r2,r2,r17
    6fc4:	a8800215 	stw	r2,8(r21)
    6fc8:	b5800204 	addi	r22,r22,8
    6fcc:	bdc00204 	addi	r23,r23,8
    6fd0:	103fdb1e 	bne	r2,zero,6f40 <__sprint_r.part.0+0x58>
    6fd4:	0005883a 	mov	r2,zero
    6fd8:	003fe806 	br	6f7c <__sprint_r.part.0+0x94>
    6fdc:	0008a100 	call	8a10 <__sfvwrite_r>
    6fe0:	003fe606 	br	6f7c <__sprint_r.part.0+0x94>

00006fe4 <__sprint_r>:
    6fe4:	30c00217 	ldw	r3,8(r6)
    6fe8:	18000126 	beq	r3,zero,6ff0 <__sprint_r+0xc>
    6fec:	0006ee81 	jmpi	6ee8 <__sprint_r.part.0>
    6ff0:	30000115 	stw	zero,4(r6)
    6ff4:	0005883a 	mov	r2,zero
    6ff8:	f800283a 	ret

00006ffc <___vfiprintf_internal_r>:
    6ffc:	deffc904 	addi	sp,sp,-220
    7000:	df003515 	stw	fp,212(sp)
    7004:	dd003115 	stw	r20,196(sp)
    7008:	dfc03615 	stw	ra,216(sp)
    700c:	ddc03415 	stw	r23,208(sp)
    7010:	dd803315 	stw	r22,204(sp)
    7014:	dd403215 	stw	r21,200(sp)
    7018:	dcc03015 	stw	r19,192(sp)
    701c:	dc802f15 	stw	r18,188(sp)
    7020:	dc402e15 	stw	r17,184(sp)
    7024:	dc002d15 	stw	r16,180(sp)
    7028:	d9002015 	stw	r4,128(sp)
    702c:	d9c02215 	stw	r7,136(sp)
    7030:	2829883a 	mov	r20,r5
    7034:	3039883a 	mov	fp,r6
    7038:	20000226 	beq	r4,zero,7044 <___vfiprintf_internal_r+0x48>
    703c:	20800e17 	ldw	r2,56(r4)
    7040:	1000cf26 	beq	r2,zero,7380 <___vfiprintf_internal_r+0x384>
    7044:	a080030b 	ldhu	r2,12(r20)
    7048:	10c8000c 	andi	r3,r2,8192
    704c:	1800061e 	bne	r3,zero,7068 <___vfiprintf_internal_r+0x6c>
    7050:	a1001917 	ldw	r4,100(r20)
    7054:	00f7ffc4 	movi	r3,-8193
    7058:	10880014 	ori	r2,r2,8192
    705c:	20c6703a 	and	r3,r4,r3
    7060:	a080030d 	sth	r2,12(r20)
    7064:	a0c01915 	stw	r3,100(r20)
    7068:	10c0020c 	andi	r3,r2,8
    706c:	1800a926 	beq	r3,zero,7314 <___vfiprintf_internal_r+0x318>
    7070:	a0c00417 	ldw	r3,16(r20)
    7074:	1800a726 	beq	r3,zero,7314 <___vfiprintf_internal_r+0x318>
    7078:	1080068c 	andi	r2,r2,26
    707c:	00c00284 	movi	r3,10
    7080:	10c0ac26 	beq	r2,r3,7334 <___vfiprintf_internal_r+0x338>
    7084:	da801a04 	addi	r10,sp,104
    7088:	da801e15 	stw	r10,120(sp)
    708c:	d8801e17 	ldw	r2,120(sp)
    7090:	da8019c4 	addi	r10,sp,103
    7094:	058000b4 	movhi	r22,2
    7098:	05c000b4 	movhi	r23,2
    709c:	da801f15 	stw	r10,124(sp)
    70a0:	1295c83a 	sub	r10,r2,r10
    70a4:	b5a5fb04 	addi	r22,r22,-26644
    70a8:	bde5f704 	addi	r23,r23,-26660
    70ac:	dec01a15 	stw	sp,104(sp)
    70b0:	d8001c15 	stw	zero,112(sp)
    70b4:	d8001b15 	stw	zero,108(sp)
    70b8:	d8002615 	stw	zero,152(sp)
    70bc:	d8002315 	stw	zero,140(sp)
    70c0:	da802715 	stw	r10,156(sp)
    70c4:	d811883a 	mov	r8,sp
    70c8:	dd002115 	stw	r20,132(sp)
    70cc:	e021883a 	mov	r16,fp
    70d0:	80800007 	ldb	r2,0(r16)
    70d4:	1003ea26 	beq	r2,zero,8080 <___vfiprintf_internal_r+0x1084>
    70d8:	00c00944 	movi	r3,37
    70dc:	8025883a 	mov	r18,r16
    70e0:	10c0021e 	bne	r2,r3,70ec <___vfiprintf_internal_r+0xf0>
    70e4:	00001606 	br	7140 <___vfiprintf_internal_r+0x144>
    70e8:	10c00326 	beq	r2,r3,70f8 <___vfiprintf_internal_r+0xfc>
    70ec:	94800044 	addi	r18,r18,1
    70f0:	90800007 	ldb	r2,0(r18)
    70f4:	103ffc1e 	bne	r2,zero,70e8 <___vfiprintf_internal_r+0xec>
    70f8:	9423c83a 	sub	r17,r18,r16
    70fc:	88001026 	beq	r17,zero,7140 <___vfiprintf_internal_r+0x144>
    7100:	d8c01c17 	ldw	r3,112(sp)
    7104:	d8801b17 	ldw	r2,108(sp)
    7108:	44000015 	stw	r16,0(r8)
    710c:	88c7883a 	add	r3,r17,r3
    7110:	10800044 	addi	r2,r2,1
    7114:	44400115 	stw	r17,4(r8)
    7118:	d8c01c15 	stw	r3,112(sp)
    711c:	d8801b15 	stw	r2,108(sp)
    7120:	010001c4 	movi	r4,7
    7124:	2080760e 	bge	r4,r2,7300 <___vfiprintf_internal_r+0x304>
    7128:	1803821e 	bne	r3,zero,7f34 <___vfiprintf_internal_r+0xf38>
    712c:	da802317 	ldw	r10,140(sp)
    7130:	d8001b15 	stw	zero,108(sp)
    7134:	d811883a 	mov	r8,sp
    7138:	5455883a 	add	r10,r10,r17
    713c:	da802315 	stw	r10,140(sp)
    7140:	90800007 	ldb	r2,0(r18)
    7144:	10044626 	beq	r2,zero,8260 <___vfiprintf_internal_r+0x1264>
    7148:	90c00047 	ldb	r3,1(r18)
    714c:	94000044 	addi	r16,r18,1
    7150:	d8001d85 	stb	zero,118(sp)
    7154:	0009883a 	mov	r4,zero
    7158:	000f883a 	mov	r7,zero
    715c:	027fffc4 	movi	r9,-1
    7160:	0023883a 	mov	r17,zero
    7164:	0029883a 	mov	r20,zero
    7168:	01401604 	movi	r5,88
    716c:	01800244 	movi	r6,9
    7170:	03400a84 	movi	r13,42
    7174:	03001b04 	movi	r12,108
    7178:	84000044 	addi	r16,r16,1
    717c:	18bff804 	addi	r2,r3,-32
    7180:	28827336 	bltu	r5,r2,7b50 <___vfiprintf_internal_r+0xb54>
    7184:	100490ba 	slli	r2,r2,2
    7188:	02800034 	movhi	r10,0
    718c:	529c6704 	addi	r10,r10,29084
    7190:	1285883a 	add	r2,r2,r10
    7194:	10800017 	ldw	r2,0(r2)
    7198:	1000683a 	jmp	r2
    719c:	00007884 	movi	zero,482
    71a0:	00007b50 	cmplti	zero,zero,493
    71a4:	00007b50 	cmplti	zero,zero,493
    71a8:	000078a4 	muli	zero,zero,482
    71ac:	00007b50 	cmplti	zero,zero,493
    71b0:	00007b50 	cmplti	zero,zero,493
    71b4:	00007b50 	cmplti	zero,zero,493
    71b8:	00007b50 	cmplti	zero,zero,493
    71bc:	00007b50 	cmplti	zero,zero,493
    71c0:	00007b50 	cmplti	zero,zero,493
    71c4:	00007a8c 	andi	zero,zero,490
    71c8:	00007aa8 	cmpgeui	zero,zero,490
    71cc:	00007b50 	cmplti	zero,zero,493
    71d0:	00007390 	cmplti	zero,zero,462
    71d4:	00007ab8 	rdprs	zero,zero,490
    71d8:	00007b50 	cmplti	zero,zero,493
    71dc:	000078b0 	cmpltui	zero,zero,482
    71e0:	000078bc 	xorhi	zero,zero,482
    71e4:	000078bc 	xorhi	zero,zero,482
    71e8:	000078bc 	xorhi	zero,zero,482
    71ec:	000078bc 	xorhi	zero,zero,482
    71f0:	000078bc 	xorhi	zero,zero,482
    71f4:	000078bc 	xorhi	zero,zero,482
    71f8:	000078bc 	xorhi	zero,zero,482
    71fc:	000078bc 	xorhi	zero,zero,482
    7200:	000078bc 	xorhi	zero,zero,482
    7204:	00007b50 	cmplti	zero,zero,493
    7208:	00007b50 	cmplti	zero,zero,493
    720c:	00007b50 	cmplti	zero,zero,493
    7210:	00007b50 	cmplti	zero,zero,493
    7214:	00007b50 	cmplti	zero,zero,493
    7218:	00007b50 	cmplti	zero,zero,493
    721c:	00007b50 	cmplti	zero,zero,493
    7220:	00007b50 	cmplti	zero,zero,493
    7224:	00007b50 	cmplti	zero,zero,493
    7228:	00007b50 	cmplti	zero,zero,493
    722c:	000078e8 	cmpgeui	zero,zero,483
    7230:	00007b50 	cmplti	zero,zero,493
    7234:	00007b50 	cmplti	zero,zero,493
    7238:	00007b50 	cmplti	zero,zero,493
    723c:	00007b50 	cmplti	zero,zero,493
    7240:	00007b50 	cmplti	zero,zero,493
    7244:	00007b50 	cmplti	zero,zero,493
    7248:	00007b50 	cmplti	zero,zero,493
    724c:	00007b50 	cmplti	zero,zero,493
    7250:	00007b50 	cmplti	zero,zero,493
    7254:	00007b50 	cmplti	zero,zero,493
    7258:	00007920 	cmpeqi	zero,zero,484
    725c:	00007b50 	cmplti	zero,zero,493
    7260:	00007b50 	cmplti	zero,zero,493
    7264:	00007b50 	cmplti	zero,zero,493
    7268:	00007b50 	cmplti	zero,zero,493
    726c:	00007b50 	cmplti	zero,zero,493
    7270:	00007978 	rdprs	zero,zero,485
    7274:	00007b50 	cmplti	zero,zero,493
    7278:	00007b50 	cmplti	zero,zero,493
    727c:	000079e8 	cmpgeui	zero,zero,487
    7280:	00007b50 	cmplti	zero,zero,493
    7284:	00007b50 	cmplti	zero,zero,493
    7288:	00007b50 	cmplti	zero,zero,493
    728c:	00007b50 	cmplti	zero,zero,493
    7290:	00007b50 	cmplti	zero,zero,493
    7294:	00007b50 	cmplti	zero,zero,493
    7298:	00007b50 	cmplti	zero,zero,493
    729c:	00007b50 	cmplti	zero,zero,493
    72a0:	00007b50 	cmplti	zero,zero,493
    72a4:	00007b50 	cmplti	zero,zero,493
    72a8:	00007794 	movui	zero,478
    72ac:	000077c0 	call	77c <___vfprintf_internal_r+0x2b0>
    72b0:	00007b50 	cmplti	zero,zero,493
    72b4:	00007b50 	cmplti	zero,zero,493
    72b8:	00007b50 	cmplti	zero,zero,493
    72bc:	00007af8 	rdprs	zero,zero,491
    72c0:	000077c0 	call	77c <___vfprintf_internal_r+0x2b0>
    72c4:	00007b50 	cmplti	zero,zero,493
    72c8:	00007b50 	cmplti	zero,zero,493
    72cc:	00007654 	movui	zero,473
    72d0:	00007b50 	cmplti	zero,zero,493
    72d4:	00007664 	muli	zero,zero,473
    72d8:	000076a0 	cmpeqi	zero,zero,474
    72dc:	0000739c 	xori	zero,zero,462
    72e0:	00007648 	cmpgei	zero,zero,473
    72e4:	00007b50 	cmplti	zero,zero,493
    72e8:	00007a24 	muli	zero,zero,488
    72ec:	00007b50 	cmplti	zero,zero,493
    72f0:	00007a7c 	xorhi	zero,zero,489
    72f4:	00007b50 	cmplti	zero,zero,493
    72f8:	00007b50 	cmplti	zero,zero,493
    72fc:	00007740 	call	774 <___vfprintf_internal_r+0x2a8>
    7300:	42000204 	addi	r8,r8,8
    7304:	da802317 	ldw	r10,140(sp)
    7308:	5455883a 	add	r10,r10,r17
    730c:	da802315 	stw	r10,140(sp)
    7310:	003f8b06 	br	7140 <___vfiprintf_internal_r+0x144>
    7314:	d9002017 	ldw	r4,128(sp)
    7318:	a00b883a 	mov	r5,r20
    731c:	000279c0 	call	279c <__swsetup_r>
    7320:	1003b11e 	bne	r2,zero,81e8 <___vfiprintf_internal_r+0x11ec>
    7324:	a080030b 	ldhu	r2,12(r20)
    7328:	00c00284 	movi	r3,10
    732c:	1080068c 	andi	r2,r2,26
    7330:	10ff541e 	bne	r2,r3,7084 <___vfiprintf_internal_r+0x88>
    7334:	a080038f 	ldh	r2,14(r20)
    7338:	103f5216 	blt	r2,zero,7084 <___vfiprintf_internal_r+0x88>
    733c:	d9c02217 	ldw	r7,136(sp)
    7340:	d9002017 	ldw	r4,128(sp)
    7344:	e00d883a 	mov	r6,fp
    7348:	a00b883a 	mov	r5,r20
    734c:	00084740 	call	8474 <__sbprintf>
    7350:	dfc03617 	ldw	ra,216(sp)
    7354:	df003517 	ldw	fp,212(sp)
    7358:	ddc03417 	ldw	r23,208(sp)
    735c:	dd803317 	ldw	r22,204(sp)
    7360:	dd403217 	ldw	r21,200(sp)
    7364:	dd003117 	ldw	r20,196(sp)
    7368:	dcc03017 	ldw	r19,192(sp)
    736c:	dc802f17 	ldw	r18,188(sp)
    7370:	dc402e17 	ldw	r17,184(sp)
    7374:	dc002d17 	ldw	r16,180(sp)
    7378:	dec03704 	addi	sp,sp,220
    737c:	f800283a 	ret
    7380:	00047700 	call	4770 <__sinit>
    7384:	003f2f06 	br	7044 <___vfiprintf_internal_r+0x48>
    7388:	0463c83a 	sub	r17,zero,r17
    738c:	d8802215 	stw	r2,136(sp)
    7390:	a5000114 	ori	r20,r20,4
    7394:	80c00007 	ldb	r3,0(r16)
    7398:	003f7706 	br	7178 <___vfiprintf_internal_r+0x17c>
    739c:	00800c04 	movi	r2,48
    73a0:	da802217 	ldw	r10,136(sp)
    73a4:	d8801d05 	stb	r2,116(sp)
    73a8:	00801e04 	movi	r2,120
    73ac:	d8801d45 	stb	r2,117(sp)
    73b0:	d8001d85 	stb	zero,118(sp)
    73b4:	50c00104 	addi	r3,r10,4
    73b8:	54800017 	ldw	r18,0(r10)
    73bc:	0027883a 	mov	r19,zero
    73c0:	a0800094 	ori	r2,r20,2
    73c4:	48030b16 	blt	r9,zero,7ff4 <___vfiprintf_internal_r+0xff8>
    73c8:	00bfdfc4 	movi	r2,-129
    73cc:	a096703a 	and	r11,r20,r2
    73d0:	d8c02215 	stw	r3,136(sp)
    73d4:	5d000094 	ori	r20,r11,2
    73d8:	90032b1e 	bne	r18,zero,8088 <___vfiprintf_internal_r+0x108c>
    73dc:	008000b4 	movhi	r2,2
    73e0:	10a59604 	addi	r2,r2,-27048
    73e4:	d8802615 	stw	r2,152(sp)
    73e8:	0039883a 	mov	fp,zero
    73ec:	48017b1e 	bne	r9,zero,79dc <___vfiprintf_internal_r+0x9e0>
    73f0:	0013883a 	mov	r9,zero
    73f4:	0027883a 	mov	r19,zero
    73f8:	dd401a04 	addi	r21,sp,104
    73fc:	4825883a 	mov	r18,r9
    7400:	4cc0010e 	bge	r9,r19,7408 <___vfiprintf_internal_r+0x40c>
    7404:	9825883a 	mov	r18,r19
    7408:	e7003fcc 	andi	fp,fp,255
    740c:	e700201c 	xori	fp,fp,128
    7410:	e73fe004 	addi	fp,fp,-128
    7414:	e0000126 	beq	fp,zero,741c <___vfiprintf_internal_r+0x420>
    7418:	94800044 	addi	r18,r18,1
    741c:	a380008c 	andi	r14,r20,2
    7420:	70000126 	beq	r14,zero,7428 <___vfiprintf_internal_r+0x42c>
    7424:	94800084 	addi	r18,r18,2
    7428:	a700210c 	andi	fp,r20,132
    742c:	e001df1e 	bne	fp,zero,7bac <___vfiprintf_internal_r+0xbb0>
    7430:	8c87c83a 	sub	r3,r17,r18
    7434:	00c1dd0e 	bge	zero,r3,7bac <___vfiprintf_internal_r+0xbb0>
    7438:	01c00404 	movi	r7,16
    743c:	d8801c17 	ldw	r2,112(sp)
    7440:	38c3ad0e 	bge	r7,r3,82f8 <___vfiprintf_internal_r+0x12fc>
    7444:	028000b4 	movhi	r10,2
    7448:	52a5fb04 	addi	r10,r10,-26644
    744c:	dc002915 	stw	r16,164(sp)
    7450:	d9801b17 	ldw	r6,108(sp)
    7454:	da802415 	stw	r10,144(sp)
    7458:	03c001c4 	movi	r15,7
    745c:	da402515 	stw	r9,148(sp)
    7460:	db802815 	stw	r14,160(sp)
    7464:	1821883a 	mov	r16,r3
    7468:	00000506 	br	7480 <___vfiprintf_internal_r+0x484>
    746c:	31400084 	addi	r5,r6,2
    7470:	42000204 	addi	r8,r8,8
    7474:	200d883a 	mov	r6,r4
    7478:	843ffc04 	addi	r16,r16,-16
    747c:	3c000d0e 	bge	r7,r16,74b4 <___vfiprintf_internal_r+0x4b8>
    7480:	10800404 	addi	r2,r2,16
    7484:	31000044 	addi	r4,r6,1
    7488:	45800015 	stw	r22,0(r8)
    748c:	41c00115 	stw	r7,4(r8)
    7490:	d8801c15 	stw	r2,112(sp)
    7494:	d9001b15 	stw	r4,108(sp)
    7498:	793ff40e 	bge	r15,r4,746c <___vfiprintf_internal_r+0x470>
    749c:	1001b51e 	bne	r2,zero,7b74 <___vfiprintf_internal_r+0xb78>
    74a0:	843ffc04 	addi	r16,r16,-16
    74a4:	000d883a 	mov	r6,zero
    74a8:	01400044 	movi	r5,1
    74ac:	d811883a 	mov	r8,sp
    74b0:	3c3ff316 	blt	r7,r16,7480 <___vfiprintf_internal_r+0x484>
    74b4:	8007883a 	mov	r3,r16
    74b8:	da402517 	ldw	r9,148(sp)
    74bc:	db802817 	ldw	r14,160(sp)
    74c0:	dc002917 	ldw	r16,164(sp)
    74c4:	da802417 	ldw	r10,144(sp)
    74c8:	1885883a 	add	r2,r3,r2
    74cc:	40c00115 	stw	r3,4(r8)
    74d0:	42800015 	stw	r10,0(r8)
    74d4:	d8801c15 	stw	r2,112(sp)
    74d8:	d9401b15 	stw	r5,108(sp)
    74dc:	00c001c4 	movi	r3,7
    74e0:	19426016 	blt	r3,r5,7e64 <___vfiprintf_internal_r+0xe68>
    74e4:	d8c01d87 	ldb	r3,118(sp)
    74e8:	42000204 	addi	r8,r8,8
    74ec:	29000044 	addi	r4,r5,1
    74f0:	1801b31e 	bne	r3,zero,7bc0 <___vfiprintf_internal_r+0xbc4>
    74f4:	7001c026 	beq	r14,zero,7bf8 <___vfiprintf_internal_r+0xbfc>
    74f8:	d8c01d04 	addi	r3,sp,116
    74fc:	10800084 	addi	r2,r2,2
    7500:	40c00015 	stw	r3,0(r8)
    7504:	00c00084 	movi	r3,2
    7508:	40c00115 	stw	r3,4(r8)
    750c:	d8801c15 	stw	r2,112(sp)
    7510:	d9001b15 	stw	r4,108(sp)
    7514:	00c001c4 	movi	r3,7
    7518:	1902650e 	bge	r3,r4,7eb0 <___vfiprintf_internal_r+0xeb4>
    751c:	10029a1e 	bne	r2,zero,7f88 <___vfiprintf_internal_r+0xf8c>
    7520:	00c02004 	movi	r3,128
    7524:	01000044 	movi	r4,1
    7528:	000b883a 	mov	r5,zero
    752c:	d811883a 	mov	r8,sp
    7530:	e0c1b31e 	bne	fp,r3,7c00 <___vfiprintf_internal_r+0xc04>
    7534:	8cb9c83a 	sub	fp,r17,r18
    7538:	0701b10e 	bge	zero,fp,7c00 <___vfiprintf_internal_r+0xc04>
    753c:	01c00404 	movi	r7,16
    7540:	3f03890e 	bge	r7,fp,8368 <___vfiprintf_internal_r+0x136c>
    7544:	00c000b4 	movhi	r3,2
    7548:	18e5f704 	addi	r3,r3,-26660
    754c:	d8c02415 	stw	r3,144(sp)
    7550:	8007883a 	mov	r3,r16
    7554:	034001c4 	movi	r13,7
    7558:	e021883a 	mov	r16,fp
    755c:	da402515 	stw	r9,148(sp)
    7560:	1839883a 	mov	fp,r3
    7564:	00000506 	br	757c <___vfiprintf_internal_r+0x580>
    7568:	29800084 	addi	r6,r5,2
    756c:	42000204 	addi	r8,r8,8
    7570:	180b883a 	mov	r5,r3
    7574:	843ffc04 	addi	r16,r16,-16
    7578:	3c000d0e 	bge	r7,r16,75b0 <___vfiprintf_internal_r+0x5b4>
    757c:	10800404 	addi	r2,r2,16
    7580:	28c00044 	addi	r3,r5,1
    7584:	45c00015 	stw	r23,0(r8)
    7588:	41c00115 	stw	r7,4(r8)
    758c:	d8801c15 	stw	r2,112(sp)
    7590:	d8c01b15 	stw	r3,108(sp)
    7594:	68fff40e 	bge	r13,r3,7568 <___vfiprintf_internal_r+0x56c>
    7598:	1002241e 	bne	r2,zero,7e2c <___vfiprintf_internal_r+0xe30>
    759c:	843ffc04 	addi	r16,r16,-16
    75a0:	01800044 	movi	r6,1
    75a4:	000b883a 	mov	r5,zero
    75a8:	d811883a 	mov	r8,sp
    75ac:	3c3ff316 	blt	r7,r16,757c <___vfiprintf_internal_r+0x580>
    75b0:	da402517 	ldw	r9,148(sp)
    75b4:	e007883a 	mov	r3,fp
    75b8:	8039883a 	mov	fp,r16
    75bc:	1821883a 	mov	r16,r3
    75c0:	d8c02417 	ldw	r3,144(sp)
    75c4:	1705883a 	add	r2,r2,fp
    75c8:	47000115 	stw	fp,4(r8)
    75cc:	40c00015 	stw	r3,0(r8)
    75d0:	d8801c15 	stw	r2,112(sp)
    75d4:	d9801b15 	stw	r6,108(sp)
    75d8:	00c001c4 	movi	r3,7
    75dc:	19827616 	blt	r3,r6,7fb8 <___vfiprintf_internal_r+0xfbc>
    75e0:	4cf9c83a 	sub	fp,r9,r19
    75e4:	42000204 	addi	r8,r8,8
    75e8:	31000044 	addi	r4,r6,1
    75ec:	300b883a 	mov	r5,r6
    75f0:	07018516 	blt	zero,fp,7c08 <___vfiprintf_internal_r+0xc0c>
    75f4:	9885883a 	add	r2,r19,r2
    75f8:	45400015 	stw	r21,0(r8)
    75fc:	44c00115 	stw	r19,4(r8)
    7600:	d8801c15 	stw	r2,112(sp)
    7604:	d9001b15 	stw	r4,108(sp)
    7608:	00c001c4 	movi	r3,7
    760c:	1901dd0e 	bge	r3,r4,7d84 <___vfiprintf_internal_r+0xd88>
    7610:	1002401e 	bne	r2,zero,7f14 <___vfiprintf_internal_r+0xf18>
    7614:	d8001b15 	stw	zero,108(sp)
    7618:	a2c0010c 	andi	r11,r20,4
    761c:	58000226 	beq	r11,zero,7628 <___vfiprintf_internal_r+0x62c>
    7620:	8ca7c83a 	sub	r19,r17,r18
    7624:	04c2f216 	blt	zero,r19,81f0 <___vfiprintf_internal_r+0x11f4>
    7628:	8c80010e 	bge	r17,r18,7630 <___vfiprintf_internal_r+0x634>
    762c:	9023883a 	mov	r17,r18
    7630:	da802317 	ldw	r10,140(sp)
    7634:	5455883a 	add	r10,r10,r17
    7638:	da802315 	stw	r10,140(sp)
    763c:	d8001b15 	stw	zero,108(sp)
    7640:	d811883a 	mov	r8,sp
    7644:	003ea206 	br	70d0 <___vfiprintf_internal_r+0xd4>
    7648:	a5000814 	ori	r20,r20,32
    764c:	80c00007 	ldb	r3,0(r16)
    7650:	003ec906 	br	7178 <___vfiprintf_internal_r+0x17c>
    7654:	80c00007 	ldb	r3,0(r16)
    7658:	1b030926 	beq	r3,r12,8280 <___vfiprintf_internal_r+0x1284>
    765c:	a5000414 	ori	r20,r20,16
    7660:	003ec506 	br	7178 <___vfiprintf_internal_r+0x17c>
    7664:	21003fcc 	andi	r4,r4,255
    7668:	20035e1e 	bne	r4,zero,83e4 <___vfiprintf_internal_r+0x13e8>
    766c:	a080080c 	andi	r2,r20,32
    7670:	1002a526 	beq	r2,zero,8108 <___vfiprintf_internal_r+0x110c>
    7674:	da802217 	ldw	r10,136(sp)
    7678:	50800017 	ldw	r2,0(r10)
    767c:	da802317 	ldw	r10,140(sp)
    7680:	5007d7fa 	srai	r3,r10,31
    7684:	da802217 	ldw	r10,136(sp)
    7688:	10c00115 	stw	r3,4(r2)
    768c:	52800104 	addi	r10,r10,4
    7690:	da802215 	stw	r10,136(sp)
    7694:	da802317 	ldw	r10,140(sp)
    7698:	12800015 	stw	r10,0(r2)
    769c:	003e8c06 	br	70d0 <___vfiprintf_internal_r+0xd4>
    76a0:	21003fcc 	andi	r4,r4,255
    76a4:	2003511e 	bne	r4,zero,83ec <___vfiprintf_internal_r+0x13f0>
    76a8:	a080080c 	andi	r2,r20,32
    76ac:	1000a126 	beq	r2,zero,7934 <___vfiprintf_internal_r+0x938>
    76b0:	da802217 	ldw	r10,136(sp)
    76b4:	d8001d85 	stb	zero,118(sp)
    76b8:	50800204 	addi	r2,r10,8
    76bc:	54800017 	ldw	r18,0(r10)
    76c0:	54c00117 	ldw	r19,4(r10)
    76c4:	4802b416 	blt	r9,zero,8198 <___vfiprintf_internal_r+0x119c>
    76c8:	013fdfc4 	movi	r4,-129
    76cc:	94c6b03a 	or	r3,r18,r19
    76d0:	d8802215 	stw	r2,136(sp)
    76d4:	a128703a 	and	r20,r20,r4
    76d8:	1800a226 	beq	r3,zero,7964 <___vfiprintf_internal_r+0x968>
    76dc:	0039883a 	mov	fp,zero
    76e0:	dd401a04 	addi	r21,sp,104
    76e4:	9006d0fa 	srli	r3,r18,3
    76e8:	9808977a 	slli	r4,r19,29
    76ec:	9826d0fa 	srli	r19,r19,3
    76f0:	948001cc 	andi	r18,r18,7
    76f4:	90800c04 	addi	r2,r18,48
    76f8:	ad7fffc4 	addi	r21,r21,-1
    76fc:	20e4b03a 	or	r18,r4,r3
    7700:	a8800005 	stb	r2,0(r21)
    7704:	94c6b03a 	or	r3,r18,r19
    7708:	183ff61e 	bne	r3,zero,76e4 <___vfiprintf_internal_r+0x6e8>
    770c:	a0c0004c 	andi	r3,r20,1
    7710:	18005926 	beq	r3,zero,7878 <___vfiprintf_internal_r+0x87c>
    7714:	10803fcc 	andi	r2,r2,255
    7718:	1080201c 	xori	r2,r2,128
    771c:	10bfe004 	addi	r2,r2,-128
    7720:	00c00c04 	movi	r3,48
    7724:	10c05426 	beq	r2,r3,7878 <___vfiprintf_internal_r+0x87c>
    7728:	da801e17 	ldw	r10,120(sp)
    772c:	a8bfffc4 	addi	r2,r21,-1
    7730:	a8ffffc5 	stb	r3,-1(r21)
    7734:	50a7c83a 	sub	r19,r10,r2
    7738:	102b883a 	mov	r21,r2
    773c:	003f2f06 	br	73fc <___vfiprintf_internal_r+0x400>
    7740:	21003fcc 	andi	r4,r4,255
    7744:	2003421e 	bne	r4,zero,8450 <___vfiprintf_internal_r+0x1454>
    7748:	008000b4 	movhi	r2,2
    774c:	10a59604 	addi	r2,r2,-27048
    7750:	d8802615 	stw	r2,152(sp)
    7754:	a080080c 	andi	r2,r20,32
    7758:	1000aa26 	beq	r2,zero,7a04 <___vfiprintf_internal_r+0xa08>
    775c:	da802217 	ldw	r10,136(sp)
    7760:	54800017 	ldw	r18,0(r10)
    7764:	54c00117 	ldw	r19,4(r10)
    7768:	52800204 	addi	r10,r10,8
    776c:	da802215 	stw	r10,136(sp)
    7770:	a080004c 	andi	r2,r20,1
    7774:	1001d226 	beq	r2,zero,7ec0 <___vfiprintf_internal_r+0xec4>
    7778:	94c4b03a 	or	r2,r18,r19
    777c:	1002351e 	bne	r2,zero,8054 <___vfiprintf_internal_r+0x1058>
    7780:	d8001d85 	stb	zero,118(sp)
    7784:	48022216 	blt	r9,zero,8010 <___vfiprintf_internal_r+0x1014>
    7788:	00bfdfc4 	movi	r2,-129
    778c:	a0a8703a 	and	r20,r20,r2
    7790:	003f1506 	br	73e8 <___vfiprintf_internal_r+0x3ec>
    7794:	da802217 	ldw	r10,136(sp)
    7798:	04800044 	movi	r18,1
    779c:	d8001d85 	stb	zero,118(sp)
    77a0:	50800017 	ldw	r2,0(r10)
    77a4:	52800104 	addi	r10,r10,4
    77a8:	da802215 	stw	r10,136(sp)
    77ac:	d8801005 	stb	r2,64(sp)
    77b0:	9027883a 	mov	r19,r18
    77b4:	dd401004 	addi	r21,sp,64
    77b8:	0013883a 	mov	r9,zero
    77bc:	003f1706 	br	741c <___vfiprintf_internal_r+0x420>
    77c0:	21003fcc 	andi	r4,r4,255
    77c4:	2003201e 	bne	r4,zero,8448 <___vfiprintf_internal_r+0x144c>
    77c8:	a080080c 	andi	r2,r20,32
    77cc:	10004b26 	beq	r2,zero,78fc <___vfiprintf_internal_r+0x900>
    77d0:	da802217 	ldw	r10,136(sp)
    77d4:	50800117 	ldw	r2,4(r10)
    77d8:	54800017 	ldw	r18,0(r10)
    77dc:	52800204 	addi	r10,r10,8
    77e0:	da802215 	stw	r10,136(sp)
    77e4:	1027883a 	mov	r19,r2
    77e8:	10022c16 	blt	r2,zero,809c <___vfiprintf_internal_r+0x10a0>
    77ec:	df001d83 	ldbu	fp,118(sp)
    77f0:	48007216 	blt	r9,zero,79bc <___vfiprintf_internal_r+0x9c0>
    77f4:	00ffdfc4 	movi	r3,-129
    77f8:	94c4b03a 	or	r2,r18,r19
    77fc:	a0e8703a 	and	r20,r20,r3
    7800:	1000cc26 	beq	r2,zero,7b34 <___vfiprintf_internal_r+0xb38>
    7804:	98021026 	beq	r19,zero,8048 <___vfiprintf_internal_r+0x104c>
    7808:	dc402415 	stw	r17,144(sp)
    780c:	dc002515 	stw	r16,148(sp)
    7810:	9823883a 	mov	r17,r19
    7814:	9021883a 	mov	r16,r18
    7818:	dd401a04 	addi	r21,sp,104
    781c:	4825883a 	mov	r18,r9
    7820:	4027883a 	mov	r19,r8
    7824:	8009883a 	mov	r4,r16
    7828:	880b883a 	mov	r5,r17
    782c:	01800284 	movi	r6,10
    7830:	000f883a 	mov	r7,zero
    7834:	0009f580 	call	9f58 <__umoddi3>
    7838:	10800c04 	addi	r2,r2,48
    783c:	ad7fffc4 	addi	r21,r21,-1
    7840:	8009883a 	mov	r4,r16
    7844:	880b883a 	mov	r5,r17
    7848:	a8800005 	stb	r2,0(r21)
    784c:	01800284 	movi	r6,10
    7850:	000f883a 	mov	r7,zero
    7854:	00099e00 	call	99e0 <__udivdi3>
    7858:	1021883a 	mov	r16,r2
    785c:	10c4b03a 	or	r2,r2,r3
    7860:	1823883a 	mov	r17,r3
    7864:	103fef1e 	bne	r2,zero,7824 <___vfiprintf_internal_r+0x828>
    7868:	dc402417 	ldw	r17,144(sp)
    786c:	dc002517 	ldw	r16,148(sp)
    7870:	9013883a 	mov	r9,r18
    7874:	9811883a 	mov	r8,r19
    7878:	da801e17 	ldw	r10,120(sp)
    787c:	5567c83a 	sub	r19,r10,r21
    7880:	003ede06 	br	73fc <___vfiprintf_internal_r+0x400>
    7884:	38803fcc 	andi	r2,r7,255
    7888:	1080201c 	xori	r2,r2,128
    788c:	10bfe004 	addi	r2,r2,-128
    7890:	1002371e 	bne	r2,zero,8170 <___vfiprintf_internal_r+0x1174>
    7894:	01000044 	movi	r4,1
    7898:	01c00804 	movi	r7,32
    789c:	80c00007 	ldb	r3,0(r16)
    78a0:	003e3506 	br	7178 <___vfiprintf_internal_r+0x17c>
    78a4:	a5000054 	ori	r20,r20,1
    78a8:	80c00007 	ldb	r3,0(r16)
    78ac:	003e3206 	br	7178 <___vfiprintf_internal_r+0x17c>
    78b0:	a5002014 	ori	r20,r20,128
    78b4:	80c00007 	ldb	r3,0(r16)
    78b8:	003e2f06 	br	7178 <___vfiprintf_internal_r+0x17c>
    78bc:	8015883a 	mov	r10,r16
    78c0:	0023883a 	mov	r17,zero
    78c4:	18bff404 	addi	r2,r3,-48
    78c8:	50c00007 	ldb	r3,0(r10)
    78cc:	8c4002a4 	muli	r17,r17,10
    78d0:	84000044 	addi	r16,r16,1
    78d4:	8015883a 	mov	r10,r16
    78d8:	1463883a 	add	r17,r2,r17
    78dc:	18bff404 	addi	r2,r3,-48
    78e0:	30bff92e 	bgeu	r6,r2,78c8 <___vfiprintf_internal_r+0x8cc>
    78e4:	003e2506 	br	717c <___vfiprintf_internal_r+0x180>
    78e8:	21003fcc 	andi	r4,r4,255
    78ec:	2002d41e 	bne	r4,zero,8440 <___vfiprintf_internal_r+0x1444>
    78f0:	a5000414 	ori	r20,r20,16
    78f4:	a080080c 	andi	r2,r20,32
    78f8:	103fb51e 	bne	r2,zero,77d0 <___vfiprintf_internal_r+0x7d4>
    78fc:	a080040c 	andi	r2,r20,16
    7900:	1001f826 	beq	r2,zero,80e4 <___vfiprintf_internal_r+0x10e8>
    7904:	da802217 	ldw	r10,136(sp)
    7908:	54800017 	ldw	r18,0(r10)
    790c:	52800104 	addi	r10,r10,4
    7910:	da802215 	stw	r10,136(sp)
    7914:	9027d7fa 	srai	r19,r18,31
    7918:	9805883a 	mov	r2,r19
    791c:	003fb206 	br	77e8 <___vfiprintf_internal_r+0x7ec>
    7920:	21003fcc 	andi	r4,r4,255
    7924:	2002c41e 	bne	r4,zero,8438 <___vfiprintf_internal_r+0x143c>
    7928:	a5000414 	ori	r20,r20,16
    792c:	a080080c 	andi	r2,r20,32
    7930:	103f5f1e 	bne	r2,zero,76b0 <___vfiprintf_internal_r+0x6b4>
    7934:	a080040c 	andi	r2,r20,16
    7938:	10020f26 	beq	r2,zero,8178 <___vfiprintf_internal_r+0x117c>
    793c:	da802217 	ldw	r10,136(sp)
    7940:	d8001d85 	stb	zero,118(sp)
    7944:	0027883a 	mov	r19,zero
    7948:	50800104 	addi	r2,r10,4
    794c:	54800017 	ldw	r18,0(r10)
    7950:	48021116 	blt	r9,zero,8198 <___vfiprintf_internal_r+0x119c>
    7954:	00ffdfc4 	movi	r3,-129
    7958:	d8802215 	stw	r2,136(sp)
    795c:	a0e8703a 	and	r20,r20,r3
    7960:	903f5e1e 	bne	r18,zero,76dc <___vfiprintf_internal_r+0x6e0>
    7964:	0039883a 	mov	fp,zero
    7968:	4802a626 	beq	r9,zero,8404 <___vfiprintf_internal_r+0x1408>
    796c:	0025883a 	mov	r18,zero
    7970:	0027883a 	mov	r19,zero
    7974:	003f5a06 	br	76e0 <___vfiprintf_internal_r+0x6e4>
    7978:	21003fcc 	andi	r4,r4,255
    797c:	20029f1e 	bne	r4,zero,83fc <___vfiprintf_internal_r+0x1400>
    7980:	a5000414 	ori	r20,r20,16
    7984:	a080080c 	andi	r2,r20,32
    7988:	10005e1e 	bne	r2,zero,7b04 <___vfiprintf_internal_r+0xb08>
    798c:	a080040c 	andi	r2,r20,16
    7990:	1001a21e 	bne	r2,zero,801c <___vfiprintf_internal_r+0x1020>
    7994:	a080100c 	andi	r2,r20,64
    7998:	d8001d85 	stb	zero,118(sp)
    799c:	da802217 	ldw	r10,136(sp)
    79a0:	1002231e 	bne	r2,zero,8230 <___vfiprintf_internal_r+0x1234>
    79a4:	50800104 	addi	r2,r10,4
    79a8:	54800017 	ldw	r18,0(r10)
    79ac:	0027883a 	mov	r19,zero
    79b0:	4801a00e 	bge	r9,zero,8034 <___vfiprintf_internal_r+0x1038>
    79b4:	d8802215 	stw	r2,136(sp)
    79b8:	0039883a 	mov	fp,zero
    79bc:	94c4b03a 	or	r2,r18,r19
    79c0:	103f901e 	bne	r2,zero,7804 <___vfiprintf_internal_r+0x808>
    79c4:	00800044 	movi	r2,1
    79c8:	10803fcc 	andi	r2,r2,255
    79cc:	00c00044 	movi	r3,1
    79d0:	10c05926 	beq	r2,r3,7b38 <___vfiprintf_internal_r+0xb3c>
    79d4:	00c00084 	movi	r3,2
    79d8:	10ffe41e 	bne	r2,r3,796c <___vfiprintf_internal_r+0x970>
    79dc:	0025883a 	mov	r18,zero
    79e0:	0027883a 	mov	r19,zero
    79e4:	00013d06 	br	7edc <___vfiprintf_internal_r+0xee0>
    79e8:	21003fcc 	andi	r4,r4,255
    79ec:	2002811e 	bne	r4,zero,83f4 <___vfiprintf_internal_r+0x13f8>
    79f0:	008000b4 	movhi	r2,2
    79f4:	10a59104 	addi	r2,r2,-27068
    79f8:	d8802615 	stw	r2,152(sp)
    79fc:	a080080c 	andi	r2,r20,32
    7a00:	103f561e 	bne	r2,zero,775c <___vfiprintf_internal_r+0x760>
    7a04:	a080040c 	andi	r2,r20,16
    7a08:	1001d126 	beq	r2,zero,8150 <___vfiprintf_internal_r+0x1154>
    7a0c:	da802217 	ldw	r10,136(sp)
    7a10:	0027883a 	mov	r19,zero
    7a14:	54800017 	ldw	r18,0(r10)
    7a18:	52800104 	addi	r10,r10,4
    7a1c:	da802215 	stw	r10,136(sp)
    7a20:	003f5306 	br	7770 <___vfiprintf_internal_r+0x774>
    7a24:	da802217 	ldw	r10,136(sp)
    7a28:	d8001d85 	stb	zero,118(sp)
    7a2c:	55400017 	ldw	r21,0(r10)
    7a30:	50c00104 	addi	r3,r10,4
    7a34:	a8024226 	beq	r21,zero,8340 <___vfiprintf_internal_r+0x1344>
    7a38:	48021816 	blt	r9,zero,829c <___vfiprintf_internal_r+0x12a0>
    7a3c:	480d883a 	mov	r6,r9
    7a40:	000b883a 	mov	r5,zero
    7a44:	a809883a 	mov	r4,r21
    7a48:	d8c02a15 	stw	r3,168(sp)
    7a4c:	da002b15 	stw	r8,172(sp)
    7a50:	da402c15 	stw	r9,176(sp)
    7a54:	00058200 	call	5820 <memchr>
    7a58:	d8c02a17 	ldw	r3,168(sp)
    7a5c:	da002b17 	ldw	r8,172(sp)
    7a60:	da402c17 	ldw	r9,176(sp)
    7a64:	10024826 	beq	r2,zero,8388 <___vfiprintf_internal_r+0x138c>
    7a68:	1567c83a 	sub	r19,r2,r21
    7a6c:	df001d83 	ldbu	fp,118(sp)
    7a70:	d8c02215 	stw	r3,136(sp)
    7a74:	0013883a 	mov	r9,zero
    7a78:	003e6006 	br	73fc <___vfiprintf_internal_r+0x400>
    7a7c:	21003fcc 	andi	r4,r4,255
    7a80:	203fc026 	beq	r4,zero,7984 <___vfiprintf_internal_r+0x988>
    7a84:	d9c01d85 	stb	r7,118(sp)
    7a88:	003fbe06 	br	7984 <___vfiprintf_internal_r+0x988>
    7a8c:	da802217 	ldw	r10,136(sp)
    7a90:	54400017 	ldw	r17,0(r10)
    7a94:	50800104 	addi	r2,r10,4
    7a98:	883e3b16 	blt	r17,zero,7388 <___vfiprintf_internal_r+0x38c>
    7a9c:	d8802215 	stw	r2,136(sp)
    7aa0:	80c00007 	ldb	r3,0(r16)
    7aa4:	003db406 	br	7178 <___vfiprintf_internal_r+0x17c>
    7aa8:	01000044 	movi	r4,1
    7aac:	01c00ac4 	movi	r7,43
    7ab0:	80c00007 	ldb	r3,0(r16)
    7ab4:	003db006 	br	7178 <___vfiprintf_internal_r+0x17c>
    7ab8:	80c00007 	ldb	r3,0(r16)
    7abc:	82800044 	addi	r10,r16,1
    7ac0:	1b423c26 	beq	r3,r13,83b4 <___vfiprintf_internal_r+0x13b8>
    7ac4:	18bff404 	addi	r2,r3,-48
    7ac8:	0013883a 	mov	r9,zero
    7acc:	30822b36 	bltu	r6,r2,837c <___vfiprintf_internal_r+0x1380>
    7ad0:	50c00007 	ldb	r3,0(r10)
    7ad4:	4a4002a4 	muli	r9,r9,10
    7ad8:	54000044 	addi	r16,r10,1
    7adc:	8015883a 	mov	r10,r16
    7ae0:	4893883a 	add	r9,r9,r2
    7ae4:	18bff404 	addi	r2,r3,-48
    7ae8:	30bff92e 	bgeu	r6,r2,7ad0 <___vfiprintf_internal_r+0xad4>
    7aec:	483da30e 	bge	r9,zero,717c <___vfiprintf_internal_r+0x180>
    7af0:	027fffc4 	movi	r9,-1
    7af4:	003da106 	br	717c <___vfiprintf_internal_r+0x180>
    7af8:	a5001014 	ori	r20,r20,64
    7afc:	80c00007 	ldb	r3,0(r16)
    7b00:	003d9d06 	br	7178 <___vfiprintf_internal_r+0x17c>
    7b04:	da802217 	ldw	r10,136(sp)
    7b08:	d8001d85 	stb	zero,118(sp)
    7b0c:	50c00204 	addi	r3,r10,8
    7b10:	54800017 	ldw	r18,0(r10)
    7b14:	54c00117 	ldw	r19,4(r10)
    7b18:	4801ca16 	blt	r9,zero,8244 <___vfiprintf_internal_r+0x1248>
    7b1c:	013fdfc4 	movi	r4,-129
    7b20:	94c4b03a 	or	r2,r18,r19
    7b24:	d8c02215 	stw	r3,136(sp)
    7b28:	a128703a 	and	r20,r20,r4
    7b2c:	0039883a 	mov	fp,zero
    7b30:	103f341e 	bne	r2,zero,7804 <___vfiprintf_internal_r+0x808>
    7b34:	483e2e26 	beq	r9,zero,73f0 <___vfiprintf_internal_r+0x3f4>
    7b38:	0025883a 	mov	r18,zero
    7b3c:	94800c04 	addi	r18,r18,48
    7b40:	dc8019c5 	stb	r18,103(sp)
    7b44:	dcc02717 	ldw	r19,156(sp)
    7b48:	dd4019c4 	addi	r21,sp,103
    7b4c:	003e2b06 	br	73fc <___vfiprintf_internal_r+0x400>
    7b50:	21003fcc 	andi	r4,r4,255
    7b54:	2002361e 	bne	r4,zero,8430 <___vfiprintf_internal_r+0x1434>
    7b58:	1801c126 	beq	r3,zero,8260 <___vfiprintf_internal_r+0x1264>
    7b5c:	04800044 	movi	r18,1
    7b60:	d8c01005 	stb	r3,64(sp)
    7b64:	d8001d85 	stb	zero,118(sp)
    7b68:	9027883a 	mov	r19,r18
    7b6c:	dd401004 	addi	r21,sp,64
    7b70:	003f1106 	br	77b8 <___vfiprintf_internal_r+0x7bc>
    7b74:	d9402117 	ldw	r5,132(sp)
    7b78:	d9002017 	ldw	r4,128(sp)
    7b7c:	d9801a04 	addi	r6,sp,104
    7b80:	d9c02b15 	stw	r7,172(sp)
    7b84:	dbc02a15 	stw	r15,168(sp)
    7b88:	0006ee80 	call	6ee8 <__sprint_r.part.0>
    7b8c:	d9c02b17 	ldw	r7,172(sp)
    7b90:	dbc02a17 	ldw	r15,168(sp)
    7b94:	10006d1e 	bne	r2,zero,7d4c <___vfiprintf_internal_r+0xd50>
    7b98:	d9801b17 	ldw	r6,108(sp)
    7b9c:	d8801c17 	ldw	r2,112(sp)
    7ba0:	d811883a 	mov	r8,sp
    7ba4:	31400044 	addi	r5,r6,1
    7ba8:	003e3306 	br	7478 <___vfiprintf_internal_r+0x47c>
    7bac:	d9401b17 	ldw	r5,108(sp)
    7bb0:	d8801c17 	ldw	r2,112(sp)
    7bb4:	29000044 	addi	r4,r5,1
    7bb8:	d8c01d87 	ldb	r3,118(sp)
    7bbc:	183e4d26 	beq	r3,zero,74f4 <___vfiprintf_internal_r+0x4f8>
    7bc0:	00c00044 	movi	r3,1
    7bc4:	d9401d84 	addi	r5,sp,118
    7bc8:	10c5883a 	add	r2,r2,r3
    7bcc:	41400015 	stw	r5,0(r8)
    7bd0:	40c00115 	stw	r3,4(r8)
    7bd4:	d8801c15 	stw	r2,112(sp)
    7bd8:	d9001b15 	stw	r4,108(sp)
    7bdc:	014001c4 	movi	r5,7
    7be0:	2900a90e 	bge	r5,r4,7e88 <___vfiprintf_internal_r+0xe8c>
    7be4:	1000da1e 	bne	r2,zero,7f50 <___vfiprintf_internal_r+0xf54>
    7be8:	7000ab1e 	bne	r14,zero,7e98 <___vfiprintf_internal_r+0xe9c>
    7bec:	000b883a 	mov	r5,zero
    7bf0:	1809883a 	mov	r4,r3
    7bf4:	d811883a 	mov	r8,sp
    7bf8:	00c02004 	movi	r3,128
    7bfc:	e0fe4d26 	beq	fp,r3,7534 <___vfiprintf_internal_r+0x538>
    7c00:	4cf9c83a 	sub	fp,r9,r19
    7c04:	073e7b0e 	bge	zero,fp,75f4 <___vfiprintf_internal_r+0x5f8>
    7c08:	01c00404 	movi	r7,16
    7c0c:	3f01900e 	bge	r7,fp,8250 <___vfiprintf_internal_r+0x1254>
    7c10:	00c000b4 	movhi	r3,2
    7c14:	18e5f704 	addi	r3,r3,-26660
    7c18:	d8c02415 	stw	r3,144(sp)
    7c1c:	034001c4 	movi	r13,7
    7c20:	00000506 	br	7c38 <___vfiprintf_internal_r+0xc3c>
    7c24:	29000084 	addi	r4,r5,2
    7c28:	42000204 	addi	r8,r8,8
    7c2c:	180b883a 	mov	r5,r3
    7c30:	e73ffc04 	addi	fp,fp,-16
    7c34:	3f000d0e 	bge	r7,fp,7c6c <___vfiprintf_internal_r+0xc70>
    7c38:	10800404 	addi	r2,r2,16
    7c3c:	28c00044 	addi	r3,r5,1
    7c40:	45c00015 	stw	r23,0(r8)
    7c44:	41c00115 	stw	r7,4(r8)
    7c48:	d8801c15 	stw	r2,112(sp)
    7c4c:	d8c01b15 	stw	r3,108(sp)
    7c50:	68fff40e 	bge	r13,r3,7c24 <___vfiprintf_internal_r+0xc28>
    7c54:	1000101e 	bne	r2,zero,7c98 <___vfiprintf_internal_r+0xc9c>
    7c58:	e73ffc04 	addi	fp,fp,-16
    7c5c:	01000044 	movi	r4,1
    7c60:	000b883a 	mov	r5,zero
    7c64:	d811883a 	mov	r8,sp
    7c68:	3f3ff316 	blt	r7,fp,7c38 <___vfiprintf_internal_r+0xc3c>
    7c6c:	da802417 	ldw	r10,144(sp)
    7c70:	1705883a 	add	r2,r2,fp
    7c74:	47000115 	stw	fp,4(r8)
    7c78:	42800015 	stw	r10,0(r8)
    7c7c:	d8801c15 	stw	r2,112(sp)
    7c80:	d9001b15 	stw	r4,108(sp)
    7c84:	00c001c4 	movi	r3,7
    7c88:	19003616 	blt	r3,r4,7d64 <___vfiprintf_internal_r+0xd68>
    7c8c:	42000204 	addi	r8,r8,8
    7c90:	21000044 	addi	r4,r4,1
    7c94:	003e5706 	br	75f4 <___vfiprintf_internal_r+0x5f8>
    7c98:	d9402117 	ldw	r5,132(sp)
    7c9c:	d9002017 	ldw	r4,128(sp)
    7ca0:	d9801a04 	addi	r6,sp,104
    7ca4:	d9c02b15 	stw	r7,172(sp)
    7ca8:	db402a15 	stw	r13,168(sp)
    7cac:	0006ee80 	call	6ee8 <__sprint_r.part.0>
    7cb0:	d9c02b17 	ldw	r7,172(sp)
    7cb4:	db402a17 	ldw	r13,168(sp)
    7cb8:	1000241e 	bne	r2,zero,7d4c <___vfiprintf_internal_r+0xd50>
    7cbc:	d9401b17 	ldw	r5,108(sp)
    7cc0:	d8801c17 	ldw	r2,112(sp)
    7cc4:	d811883a 	mov	r8,sp
    7cc8:	29000044 	addi	r4,r5,1
    7ccc:	003fd806 	br	7c30 <___vfiprintf_internal_r+0xc34>
    7cd0:	d9401b17 	ldw	r5,108(sp)
    7cd4:	00c000b4 	movhi	r3,2
    7cd8:	18e5fb04 	addi	r3,r3,-26644
    7cdc:	d8c02415 	stw	r3,144(sp)
    7ce0:	29400044 	addi	r5,r5,1
    7ce4:	d8c02417 	ldw	r3,144(sp)
    7ce8:	14c5883a 	add	r2,r2,r19
    7cec:	44c00115 	stw	r19,4(r8)
    7cf0:	40c00015 	stw	r3,0(r8)
    7cf4:	d8801c15 	stw	r2,112(sp)
    7cf8:	d9401b15 	stw	r5,108(sp)
    7cfc:	00c001c4 	movi	r3,7
    7d00:	1940070e 	bge	r3,r5,7d20 <___vfiprintf_internal_r+0xd24>
    7d04:	103e4826 	beq	r2,zero,7628 <___vfiprintf_internal_r+0x62c>
    7d08:	d9402117 	ldw	r5,132(sp)
    7d0c:	d9002017 	ldw	r4,128(sp)
    7d10:	d9801a04 	addi	r6,sp,104
    7d14:	0006ee80 	call	6ee8 <__sprint_r.part.0>
    7d18:	10000c1e 	bne	r2,zero,7d4c <___vfiprintf_internal_r+0xd50>
    7d1c:	d8801c17 	ldw	r2,112(sp)
    7d20:	8c80010e 	bge	r17,r18,7d28 <___vfiprintf_internal_r+0xd2c>
    7d24:	9023883a 	mov	r17,r18
    7d28:	da802317 	ldw	r10,140(sp)
    7d2c:	5455883a 	add	r10,r10,r17
    7d30:	da802315 	stw	r10,140(sp)
    7d34:	103e4126 	beq	r2,zero,763c <___vfiprintf_internal_r+0x640>
    7d38:	d9402117 	ldw	r5,132(sp)
    7d3c:	d9002017 	ldw	r4,128(sp)
    7d40:	d9801a04 	addi	r6,sp,104
    7d44:	0006ee80 	call	6ee8 <__sprint_r.part.0>
    7d48:	103e3c26 	beq	r2,zero,763c <___vfiprintf_internal_r+0x640>
    7d4c:	dd002117 	ldw	r20,132(sp)
    7d50:	a080030b 	ldhu	r2,12(r20)
    7d54:	1080100c 	andi	r2,r2,64
    7d58:	1001231e 	bne	r2,zero,81e8 <___vfiprintf_internal_r+0x11ec>
    7d5c:	d8802317 	ldw	r2,140(sp)
    7d60:	003d7b06 	br	7350 <___vfiprintf_internal_r+0x354>
    7d64:	1000991e 	bne	r2,zero,7fcc <___vfiprintf_internal_r+0xfd0>
    7d68:	00c00044 	movi	r3,1
    7d6c:	9805883a 	mov	r2,r19
    7d70:	dd400015 	stw	r21,0(sp)
    7d74:	dcc00115 	stw	r19,4(sp)
    7d78:	dcc01c15 	stw	r19,112(sp)
    7d7c:	d8c01b15 	stw	r3,108(sp)
    7d80:	d811883a 	mov	r8,sp
    7d84:	42000204 	addi	r8,r8,8
    7d88:	a2c0010c 	andi	r11,r20,4
    7d8c:	583fe426 	beq	r11,zero,7d20 <___vfiprintf_internal_r+0xd24>
    7d90:	8ca7c83a 	sub	r19,r17,r18
    7d94:	04ffe20e 	bge	zero,r19,7d20 <___vfiprintf_internal_r+0xd24>
    7d98:	01c00404 	movi	r7,16
    7d9c:	3cffcc0e 	bge	r7,r19,7cd0 <___vfiprintf_internal_r+0xcd4>
    7da0:	028000b4 	movhi	r10,2
    7da4:	52a5fb04 	addi	r10,r10,-26644
    7da8:	d9001b17 	ldw	r4,108(sp)
    7dac:	da802415 	stw	r10,144(sp)
    7db0:	382b883a 	mov	r21,r7
    7db4:	050001c4 	movi	r20,7
    7db8:	df002017 	ldw	fp,128(sp)
    7dbc:	00000506 	br	7dd4 <___vfiprintf_internal_r+0xdd8>
    7dc0:	21400084 	addi	r5,r4,2
    7dc4:	42000204 	addi	r8,r8,8
    7dc8:	1809883a 	mov	r4,r3
    7dcc:	9cfffc04 	addi	r19,r19,-16
    7dd0:	acffc40e 	bge	r21,r19,7ce4 <___vfiprintf_internal_r+0xce8>
    7dd4:	10800404 	addi	r2,r2,16
    7dd8:	20c00044 	addi	r3,r4,1
    7ddc:	45800015 	stw	r22,0(r8)
    7de0:	45400115 	stw	r21,4(r8)
    7de4:	d8801c15 	stw	r2,112(sp)
    7de8:	d8c01b15 	stw	r3,108(sp)
    7dec:	a0fff40e 	bge	r20,r3,7dc0 <___vfiprintf_internal_r+0xdc4>
    7df0:	1000041e 	bne	r2,zero,7e04 <___vfiprintf_internal_r+0xe08>
    7df4:	01400044 	movi	r5,1
    7df8:	0009883a 	mov	r4,zero
    7dfc:	d811883a 	mov	r8,sp
    7e00:	003ff206 	br	7dcc <___vfiprintf_internal_r+0xdd0>
    7e04:	d9402117 	ldw	r5,132(sp)
    7e08:	d9801a04 	addi	r6,sp,104
    7e0c:	e009883a 	mov	r4,fp
    7e10:	0006ee80 	call	6ee8 <__sprint_r.part.0>
    7e14:	103fcd1e 	bne	r2,zero,7d4c <___vfiprintf_internal_r+0xd50>
    7e18:	d9001b17 	ldw	r4,108(sp)
    7e1c:	d8801c17 	ldw	r2,112(sp)
    7e20:	d811883a 	mov	r8,sp
    7e24:	21400044 	addi	r5,r4,1
    7e28:	003fe806 	br	7dcc <___vfiprintf_internal_r+0xdd0>
    7e2c:	d9402117 	ldw	r5,132(sp)
    7e30:	d9002017 	ldw	r4,128(sp)
    7e34:	d9801a04 	addi	r6,sp,104
    7e38:	d9c02b15 	stw	r7,172(sp)
    7e3c:	db402a15 	stw	r13,168(sp)
    7e40:	0006ee80 	call	6ee8 <__sprint_r.part.0>
    7e44:	d9c02b17 	ldw	r7,172(sp)
    7e48:	db402a17 	ldw	r13,168(sp)
    7e4c:	103fbf1e 	bne	r2,zero,7d4c <___vfiprintf_internal_r+0xd50>
    7e50:	d9401b17 	ldw	r5,108(sp)
    7e54:	d8801c17 	ldw	r2,112(sp)
    7e58:	d811883a 	mov	r8,sp
    7e5c:	29800044 	addi	r6,r5,1
    7e60:	003dc406 	br	7574 <___vfiprintf_internal_r+0x578>
    7e64:	1000d21e 	bne	r2,zero,81b0 <___vfiprintf_internal_r+0x11b4>
    7e68:	d8c01d87 	ldb	r3,118(sp)
    7e6c:	18009526 	beq	r3,zero,80c4 <___vfiprintf_internal_r+0x10c8>
    7e70:	00800044 	movi	r2,1
    7e74:	d8c01d84 	addi	r3,sp,118
    7e78:	1009883a 	mov	r4,r2
    7e7c:	d8c00015 	stw	r3,0(sp)
    7e80:	d8800115 	stw	r2,4(sp)
    7e84:	d811883a 	mov	r8,sp
    7e88:	200b883a 	mov	r5,r4
    7e8c:	42000204 	addi	r8,r8,8
    7e90:	21000044 	addi	r4,r4,1
    7e94:	003d9706 	br	74f4 <___vfiprintf_internal_r+0x4f8>
    7e98:	d9001d04 	addi	r4,sp,116
    7e9c:	00800084 	movi	r2,2
    7ea0:	d9000015 	stw	r4,0(sp)
    7ea4:	d8800115 	stw	r2,4(sp)
    7ea8:	1809883a 	mov	r4,r3
    7eac:	d811883a 	mov	r8,sp
    7eb0:	200b883a 	mov	r5,r4
    7eb4:	42000204 	addi	r8,r8,8
    7eb8:	21000044 	addi	r4,r4,1
    7ebc:	003f4e06 	br	7bf8 <___vfiprintf_internal_r+0xbfc>
    7ec0:	d8001d85 	stb	zero,118(sp)
    7ec4:	48005016 	blt	r9,zero,8008 <___vfiprintf_internal_r+0x100c>
    7ec8:	00ffdfc4 	movi	r3,-129
    7ecc:	94c4b03a 	or	r2,r18,r19
    7ed0:	a0e8703a 	and	r20,r20,r3
    7ed4:	103d4426 	beq	r2,zero,73e8 <___vfiprintf_internal_r+0x3ec>
    7ed8:	0039883a 	mov	fp,zero
    7edc:	d9002617 	ldw	r4,152(sp)
    7ee0:	dd401a04 	addi	r21,sp,104
    7ee4:	908003cc 	andi	r2,r18,15
    7ee8:	9806973a 	slli	r3,r19,28
    7eec:	2085883a 	add	r2,r4,r2
    7ef0:	9024d13a 	srli	r18,r18,4
    7ef4:	10800003 	ldbu	r2,0(r2)
    7ef8:	9826d13a 	srli	r19,r19,4
    7efc:	ad7fffc4 	addi	r21,r21,-1
    7f00:	1ca4b03a 	or	r18,r3,r18
    7f04:	a8800005 	stb	r2,0(r21)
    7f08:	94c4b03a 	or	r2,r18,r19
    7f0c:	103ff51e 	bne	r2,zero,7ee4 <___vfiprintf_internal_r+0xee8>
    7f10:	003e5906 	br	7878 <___vfiprintf_internal_r+0x87c>
    7f14:	d9402117 	ldw	r5,132(sp)
    7f18:	d9002017 	ldw	r4,128(sp)
    7f1c:	d9801a04 	addi	r6,sp,104
    7f20:	0006ee80 	call	6ee8 <__sprint_r.part.0>
    7f24:	103f891e 	bne	r2,zero,7d4c <___vfiprintf_internal_r+0xd50>
    7f28:	d8801c17 	ldw	r2,112(sp)
    7f2c:	d811883a 	mov	r8,sp
    7f30:	003f9506 	br	7d88 <___vfiprintf_internal_r+0xd8c>
    7f34:	d9402117 	ldw	r5,132(sp)
    7f38:	d9002017 	ldw	r4,128(sp)
    7f3c:	d9801a04 	addi	r6,sp,104
    7f40:	0006ee80 	call	6ee8 <__sprint_r.part.0>
    7f44:	103f811e 	bne	r2,zero,7d4c <___vfiprintf_internal_r+0xd50>
    7f48:	d811883a 	mov	r8,sp
    7f4c:	003ced06 	br	7304 <___vfiprintf_internal_r+0x308>
    7f50:	d9402117 	ldw	r5,132(sp)
    7f54:	d9002017 	ldw	r4,128(sp)
    7f58:	d9801a04 	addi	r6,sp,104
    7f5c:	da402c15 	stw	r9,176(sp)
    7f60:	db802a15 	stw	r14,168(sp)
    7f64:	0006ee80 	call	6ee8 <__sprint_r.part.0>
    7f68:	da402c17 	ldw	r9,176(sp)
    7f6c:	db802a17 	ldw	r14,168(sp)
    7f70:	103f761e 	bne	r2,zero,7d4c <___vfiprintf_internal_r+0xd50>
    7f74:	d9401b17 	ldw	r5,108(sp)
    7f78:	d8801c17 	ldw	r2,112(sp)
    7f7c:	d811883a 	mov	r8,sp
    7f80:	29000044 	addi	r4,r5,1
    7f84:	003d5b06 	br	74f4 <___vfiprintf_internal_r+0x4f8>
    7f88:	d9402117 	ldw	r5,132(sp)
    7f8c:	d9002017 	ldw	r4,128(sp)
    7f90:	d9801a04 	addi	r6,sp,104
    7f94:	da402c15 	stw	r9,176(sp)
    7f98:	0006ee80 	call	6ee8 <__sprint_r.part.0>
    7f9c:	da402c17 	ldw	r9,176(sp)
    7fa0:	103f6a1e 	bne	r2,zero,7d4c <___vfiprintf_internal_r+0xd50>
    7fa4:	d9401b17 	ldw	r5,108(sp)
    7fa8:	d8801c17 	ldw	r2,112(sp)
    7fac:	d811883a 	mov	r8,sp
    7fb0:	29000044 	addi	r4,r5,1
    7fb4:	003f1006 	br	7bf8 <___vfiprintf_internal_r+0xbfc>
    7fb8:	1000c31e 	bne	r2,zero,82c8 <___vfiprintf_internal_r+0x12cc>
    7fbc:	01000044 	movi	r4,1
    7fc0:	000b883a 	mov	r5,zero
    7fc4:	d811883a 	mov	r8,sp
    7fc8:	003f0d06 	br	7c00 <___vfiprintf_internal_r+0xc04>
    7fcc:	d9402117 	ldw	r5,132(sp)
    7fd0:	d9002017 	ldw	r4,128(sp)
    7fd4:	d9801a04 	addi	r6,sp,104
    7fd8:	0006ee80 	call	6ee8 <__sprint_r.part.0>
    7fdc:	103f5b1e 	bne	r2,zero,7d4c <___vfiprintf_internal_r+0xd50>
    7fe0:	d9001b17 	ldw	r4,108(sp)
    7fe4:	d8801c17 	ldw	r2,112(sp)
    7fe8:	d811883a 	mov	r8,sp
    7fec:	21000044 	addi	r4,r4,1
    7ff0:	003d8006 	br	75f4 <___vfiprintf_internal_r+0x5f8>
    7ff4:	010000b4 	movhi	r4,2
    7ff8:	21259604 	addi	r4,r4,-27048
    7ffc:	d9002615 	stw	r4,152(sp)
    8000:	d8c02215 	stw	r3,136(sp)
    8004:	1029883a 	mov	r20,r2
    8008:	94c4b03a 	or	r2,r18,r19
    800c:	103fb21e 	bne	r2,zero,7ed8 <___vfiprintf_internal_r+0xedc>
    8010:	0039883a 	mov	fp,zero
    8014:	00800084 	movi	r2,2
    8018:	003e6b06 	br	79c8 <___vfiprintf_internal_r+0x9cc>
    801c:	da802217 	ldw	r10,136(sp)
    8020:	d8001d85 	stb	zero,118(sp)
    8024:	0027883a 	mov	r19,zero
    8028:	50800104 	addi	r2,r10,4
    802c:	54800017 	ldw	r18,0(r10)
    8030:	483e6016 	blt	r9,zero,79b4 <___vfiprintf_internal_r+0x9b8>
    8034:	00ffdfc4 	movi	r3,-129
    8038:	d8802215 	stw	r2,136(sp)
    803c:	a0e8703a 	and	r20,r20,r3
    8040:	0039883a 	mov	fp,zero
    8044:	903ebb26 	beq	r18,zero,7b34 <___vfiprintf_internal_r+0xb38>
    8048:	00800244 	movi	r2,9
    804c:	14bdee36 	bltu	r2,r18,7808 <___vfiprintf_internal_r+0x80c>
    8050:	003eba06 	br	7b3c <___vfiprintf_internal_r+0xb40>
    8054:	00800c04 	movi	r2,48
    8058:	d8c01d45 	stb	r3,117(sp)
    805c:	d8801d05 	stb	r2,116(sp)
    8060:	d8001d85 	stb	zero,118(sp)
    8064:	a0c00094 	ori	r3,r20,2
    8068:	4800a916 	blt	r9,zero,8310 <___vfiprintf_internal_r+0x1314>
    806c:	00bfdfc4 	movi	r2,-129
    8070:	a096703a 	and	r11,r20,r2
    8074:	5d000094 	ori	r20,r11,2
    8078:	0039883a 	mov	fp,zero
    807c:	003f9706 	br	7edc <___vfiprintf_internal_r+0xee0>
    8080:	8025883a 	mov	r18,r16
    8084:	003c2e06 	br	7140 <___vfiprintf_internal_r+0x144>
    8088:	008000b4 	movhi	r2,2
    808c:	10a59604 	addi	r2,r2,-27048
    8090:	0039883a 	mov	fp,zero
    8094:	d8802615 	stw	r2,152(sp)
    8098:	003f9006 	br	7edc <___vfiprintf_internal_r+0xee0>
    809c:	04a5c83a 	sub	r18,zero,r18
    80a0:	07000b44 	movi	fp,45
    80a4:	9004c03a 	cmpne	r2,r18,zero
    80a8:	04e7c83a 	sub	r19,zero,r19
    80ac:	df001d85 	stb	fp,118(sp)
    80b0:	98a7c83a 	sub	r19,r19,r2
    80b4:	48009f16 	blt	r9,zero,8334 <___vfiprintf_internal_r+0x1338>
    80b8:	00bfdfc4 	movi	r2,-129
    80bc:	a0a8703a 	and	r20,r20,r2
    80c0:	003dd006 	br	7804 <___vfiprintf_internal_r+0x808>
    80c4:	70004c26 	beq	r14,zero,81f8 <___vfiprintf_internal_r+0x11fc>
    80c8:	00800084 	movi	r2,2
    80cc:	d8c01d04 	addi	r3,sp,116
    80d0:	d8c00015 	stw	r3,0(sp)
    80d4:	d8800115 	stw	r2,4(sp)
    80d8:	01000044 	movi	r4,1
    80dc:	d811883a 	mov	r8,sp
    80e0:	003f7306 	br	7eb0 <___vfiprintf_internal_r+0xeb4>
    80e4:	a080100c 	andi	r2,r20,64
    80e8:	da802217 	ldw	r10,136(sp)
    80ec:	103e0626 	beq	r2,zero,7908 <___vfiprintf_internal_r+0x90c>
    80f0:	5480000f 	ldh	r18,0(r10)
    80f4:	52800104 	addi	r10,r10,4
    80f8:	da802215 	stw	r10,136(sp)
    80fc:	9027d7fa 	srai	r19,r18,31
    8100:	9805883a 	mov	r2,r19
    8104:	003db806 	br	77e8 <___vfiprintf_internal_r+0x7ec>
    8108:	a080040c 	andi	r2,r20,16
    810c:	1000091e 	bne	r2,zero,8134 <___vfiprintf_internal_r+0x1138>
    8110:	a2c0100c 	andi	r11,r20,64
    8114:	58000726 	beq	r11,zero,8134 <___vfiprintf_internal_r+0x1138>
    8118:	da802217 	ldw	r10,136(sp)
    811c:	50800017 	ldw	r2,0(r10)
    8120:	52800104 	addi	r10,r10,4
    8124:	da802215 	stw	r10,136(sp)
    8128:	da802317 	ldw	r10,140(sp)
    812c:	1280000d 	sth	r10,0(r2)
    8130:	003be706 	br	70d0 <___vfiprintf_internal_r+0xd4>
    8134:	da802217 	ldw	r10,136(sp)
    8138:	50800017 	ldw	r2,0(r10)
    813c:	52800104 	addi	r10,r10,4
    8140:	da802215 	stw	r10,136(sp)
    8144:	da802317 	ldw	r10,140(sp)
    8148:	12800015 	stw	r10,0(r2)
    814c:	003be006 	br	70d0 <___vfiprintf_internal_r+0xd4>
    8150:	a080100c 	andi	r2,r20,64
    8154:	da802217 	ldw	r10,136(sp)
    8158:	10003026 	beq	r2,zero,821c <___vfiprintf_internal_r+0x1220>
    815c:	5480000b 	ldhu	r18,0(r10)
    8160:	52800104 	addi	r10,r10,4
    8164:	0027883a 	mov	r19,zero
    8168:	da802215 	stw	r10,136(sp)
    816c:	003d8006 	br	7770 <___vfiprintf_internal_r+0x774>
    8170:	80c00007 	ldb	r3,0(r16)
    8174:	003c0006 	br	7178 <___vfiprintf_internal_r+0x17c>
    8178:	a080100c 	andi	r2,r20,64
    817c:	d8001d85 	stb	zero,118(sp)
    8180:	da802217 	ldw	r10,136(sp)
    8184:	1000201e 	bne	r2,zero,8208 <___vfiprintf_internal_r+0x120c>
    8188:	50800104 	addi	r2,r10,4
    818c:	54800017 	ldw	r18,0(r10)
    8190:	0027883a 	mov	r19,zero
    8194:	483def0e 	bge	r9,zero,7954 <___vfiprintf_internal_r+0x958>
    8198:	94c6b03a 	or	r3,r18,r19
    819c:	d8802215 	stw	r2,136(sp)
    81a0:	183d4e1e 	bne	r3,zero,76dc <___vfiprintf_internal_r+0x6e0>
    81a4:	0039883a 	mov	fp,zero
    81a8:	0005883a 	mov	r2,zero
    81ac:	003e0606 	br	79c8 <___vfiprintf_internal_r+0x9cc>
    81b0:	d9402117 	ldw	r5,132(sp)
    81b4:	d9002017 	ldw	r4,128(sp)
    81b8:	d9801a04 	addi	r6,sp,104
    81bc:	da402c15 	stw	r9,176(sp)
    81c0:	db802a15 	stw	r14,168(sp)
    81c4:	0006ee80 	call	6ee8 <__sprint_r.part.0>
    81c8:	da402c17 	ldw	r9,176(sp)
    81cc:	db802a17 	ldw	r14,168(sp)
    81d0:	103ede1e 	bne	r2,zero,7d4c <___vfiprintf_internal_r+0xd50>
    81d4:	d9401b17 	ldw	r5,108(sp)
    81d8:	d8801c17 	ldw	r2,112(sp)
    81dc:	d811883a 	mov	r8,sp
    81e0:	29000044 	addi	r4,r5,1
    81e4:	003e7406 	br	7bb8 <___vfiprintf_internal_r+0xbbc>
    81e8:	00bfffc4 	movi	r2,-1
    81ec:	003c5806 	br	7350 <___vfiprintf_internal_r+0x354>
    81f0:	d811883a 	mov	r8,sp
    81f4:	003ee806 	br	7d98 <___vfiprintf_internal_r+0xd9c>
    81f8:	000b883a 	mov	r5,zero
    81fc:	01000044 	movi	r4,1
    8200:	d811883a 	mov	r8,sp
    8204:	003e7c06 	br	7bf8 <___vfiprintf_internal_r+0xbfc>
    8208:	50800104 	addi	r2,r10,4
    820c:	5480000b 	ldhu	r18,0(r10)
    8210:	0027883a 	mov	r19,zero
    8214:	483dcf0e 	bge	r9,zero,7954 <___vfiprintf_internal_r+0x958>
    8218:	003fdf06 	br	8198 <___vfiprintf_internal_r+0x119c>
    821c:	54800017 	ldw	r18,0(r10)
    8220:	52800104 	addi	r10,r10,4
    8224:	0027883a 	mov	r19,zero
    8228:	da802215 	stw	r10,136(sp)
    822c:	003d5006 	br	7770 <___vfiprintf_internal_r+0x774>
    8230:	50800104 	addi	r2,r10,4
    8234:	5480000b 	ldhu	r18,0(r10)
    8238:	0027883a 	mov	r19,zero
    823c:	483f7d0e 	bge	r9,zero,8034 <___vfiprintf_internal_r+0x1038>
    8240:	003ddc06 	br	79b4 <___vfiprintf_internal_r+0x9b8>
    8244:	d8c02215 	stw	r3,136(sp)
    8248:	0039883a 	mov	fp,zero
    824c:	003ddb06 	br	79bc <___vfiprintf_internal_r+0x9c0>
    8250:	028000b4 	movhi	r10,2
    8254:	52a5f704 	addi	r10,r10,-26660
    8258:	da802415 	stw	r10,144(sp)
    825c:	003e8306 	br	7c6c <___vfiprintf_internal_r+0xc70>
    8260:	d8801c17 	ldw	r2,112(sp)
    8264:	dd002117 	ldw	r20,132(sp)
    8268:	103eb926 	beq	r2,zero,7d50 <___vfiprintf_internal_r+0xd54>
    826c:	d9002017 	ldw	r4,128(sp)
    8270:	d9801a04 	addi	r6,sp,104
    8274:	a00b883a 	mov	r5,r20
    8278:	0006ee80 	call	6ee8 <__sprint_r.part.0>
    827c:	003eb406 	br	7d50 <___vfiprintf_internal_r+0xd54>
    8280:	80c00043 	ldbu	r3,1(r16)
    8284:	a5000814 	ori	r20,r20,32
    8288:	84000044 	addi	r16,r16,1
    828c:	18c03fcc 	andi	r3,r3,255
    8290:	18c0201c 	xori	r3,r3,128
    8294:	18ffe004 	addi	r3,r3,-128
    8298:	003bb706 	br	7178 <___vfiprintf_internal_r+0x17c>
    829c:	a809883a 	mov	r4,r21
    82a0:	d8c02a15 	stw	r3,168(sp)
    82a4:	da002b15 	stw	r8,172(sp)
    82a8:	0006e500 	call	6e50 <strlen>
    82ac:	d8c02a17 	ldw	r3,168(sp)
    82b0:	1027883a 	mov	r19,r2
    82b4:	df001d83 	ldbu	fp,118(sp)
    82b8:	d8c02215 	stw	r3,136(sp)
    82bc:	0013883a 	mov	r9,zero
    82c0:	da002b17 	ldw	r8,172(sp)
    82c4:	003c4d06 	br	73fc <___vfiprintf_internal_r+0x400>
    82c8:	d9402117 	ldw	r5,132(sp)
    82cc:	d9002017 	ldw	r4,128(sp)
    82d0:	d9801a04 	addi	r6,sp,104
    82d4:	da402c15 	stw	r9,176(sp)
    82d8:	0006ee80 	call	6ee8 <__sprint_r.part.0>
    82dc:	da402c17 	ldw	r9,176(sp)
    82e0:	103e9a1e 	bne	r2,zero,7d4c <___vfiprintf_internal_r+0xd50>
    82e4:	d9401b17 	ldw	r5,108(sp)
    82e8:	d8801c17 	ldw	r2,112(sp)
    82ec:	d811883a 	mov	r8,sp
    82f0:	29000044 	addi	r4,r5,1
    82f4:	003e4206 	br	7c00 <___vfiprintf_internal_r+0xc04>
    82f8:	d9401b17 	ldw	r5,108(sp)
    82fc:	010000b4 	movhi	r4,2
    8300:	2125fb04 	addi	r4,r4,-26644
    8304:	d9002415 	stw	r4,144(sp)
    8308:	29400044 	addi	r5,r5,1
    830c:	003c6d06 	br	74c4 <___vfiprintf_internal_r+0x4c8>
    8310:	0039883a 	mov	fp,zero
    8314:	00800084 	movi	r2,2
    8318:	10803fcc 	andi	r2,r2,255
    831c:	01000044 	movi	r4,1
    8320:	11001e26 	beq	r2,r4,839c <___vfiprintf_internal_r+0x13a0>
    8324:	01000084 	movi	r4,2
    8328:	11001e1e 	bne	r2,r4,83a4 <___vfiprintf_internal_r+0x13a8>
    832c:	1829883a 	mov	r20,r3
    8330:	003eea06 	br	7edc <___vfiprintf_internal_r+0xee0>
    8334:	a007883a 	mov	r3,r20
    8338:	00800044 	movi	r2,1
    833c:	003ff606 	br	8318 <___vfiprintf_internal_r+0x131c>
    8340:	00800184 	movi	r2,6
    8344:	1240012e 	bgeu	r2,r9,834c <___vfiprintf_internal_r+0x1350>
    8348:	1013883a 	mov	r9,r2
    834c:	4827883a 	mov	r19,r9
    8350:	4825883a 	mov	r18,r9
    8354:	48001516 	blt	r9,zero,83ac <___vfiprintf_internal_r+0x13b0>
    8358:	054000b4 	movhi	r21,2
    835c:	d8c02215 	stw	r3,136(sp)
    8360:	ad659b04 	addi	r21,r21,-27028
    8364:	003d1406 	br	77b8 <___vfiprintf_internal_r+0x7bc>
    8368:	028000b4 	movhi	r10,2
    836c:	52a5f704 	addi	r10,r10,-26660
    8370:	da802415 	stw	r10,144(sp)
    8374:	200d883a 	mov	r6,r4
    8378:	003c9106 	br	75c0 <___vfiprintf_internal_r+0x5c4>
    837c:	5021883a 	mov	r16,r10
    8380:	0013883a 	mov	r9,zero
    8384:	003b7d06 	br	717c <___vfiprintf_internal_r+0x180>
    8388:	4827883a 	mov	r19,r9
    838c:	df001d83 	ldbu	fp,118(sp)
    8390:	d8c02215 	stw	r3,136(sp)
    8394:	0013883a 	mov	r9,zero
    8398:	003c1806 	br	73fc <___vfiprintf_internal_r+0x400>
    839c:	1829883a 	mov	r20,r3
    83a0:	003d1806 	br	7804 <___vfiprintf_internal_r+0x808>
    83a4:	1829883a 	mov	r20,r3
    83a8:	003ccd06 	br	76e0 <___vfiprintf_internal_r+0x6e4>
    83ac:	0025883a 	mov	r18,zero
    83b0:	003fe906 	br	8358 <___vfiprintf_internal_r+0x135c>
    83b4:	d8802217 	ldw	r2,136(sp)
    83b8:	80c00043 	ldbu	r3,1(r16)
    83bc:	5021883a 	mov	r16,r10
    83c0:	12400017 	ldw	r9,0(r2)
    83c4:	10800104 	addi	r2,r2,4
    83c8:	d8802215 	stw	r2,136(sp)
    83cc:	483faf0e 	bge	r9,zero,828c <___vfiprintf_internal_r+0x1290>
    83d0:	18c03fcc 	andi	r3,r3,255
    83d4:	18c0201c 	xori	r3,r3,128
    83d8:	027fffc4 	movi	r9,-1
    83dc:	18ffe004 	addi	r3,r3,-128
    83e0:	003b6506 	br	7178 <___vfiprintf_internal_r+0x17c>
    83e4:	d9c01d85 	stb	r7,118(sp)
    83e8:	003ca006 	br	766c <___vfiprintf_internal_r+0x670>
    83ec:	d9c01d85 	stb	r7,118(sp)
    83f0:	003cad06 	br	76a8 <___vfiprintf_internal_r+0x6ac>
    83f4:	d9c01d85 	stb	r7,118(sp)
    83f8:	003d7d06 	br	79f0 <___vfiprintf_internal_r+0x9f4>
    83fc:	d9c01d85 	stb	r7,118(sp)
    8400:	003d5f06 	br	7980 <___vfiprintf_internal_r+0x984>
    8404:	a080004c 	andi	r2,r20,1
    8408:	0039883a 	mov	fp,zero
    840c:	10000526 	beq	r2,zero,8424 <___vfiprintf_internal_r+0x1428>
    8410:	00800c04 	movi	r2,48
    8414:	d88019c5 	stb	r2,103(sp)
    8418:	dcc02717 	ldw	r19,156(sp)
    841c:	dd4019c4 	addi	r21,sp,103
    8420:	003bf606 	br	73fc <___vfiprintf_internal_r+0x400>
    8424:	0027883a 	mov	r19,zero
    8428:	dd401a04 	addi	r21,sp,104
    842c:	003bf306 	br	73fc <___vfiprintf_internal_r+0x400>
    8430:	d9c01d85 	stb	r7,118(sp)
    8434:	003dc806 	br	7b58 <___vfiprintf_internal_r+0xb5c>
    8438:	d9c01d85 	stb	r7,118(sp)
    843c:	003d3a06 	br	7928 <___vfiprintf_internal_r+0x92c>
    8440:	d9c01d85 	stb	r7,118(sp)
    8444:	003d2a06 	br	78f0 <___vfiprintf_internal_r+0x8f4>
    8448:	d9c01d85 	stb	r7,118(sp)
    844c:	003cde06 	br	77c8 <___vfiprintf_internal_r+0x7cc>
    8450:	d9c01d85 	stb	r7,118(sp)
    8454:	003cbc06 	br	7748 <___vfiprintf_internal_r+0x74c>

00008458 <__vfiprintf_internal>:
    8458:	008000b4 	movhi	r2,2
    845c:	10ae6604 	addi	r2,r2,-18024
    8460:	300f883a 	mov	r7,r6
    8464:	280d883a 	mov	r6,r5
    8468:	200b883a 	mov	r5,r4
    846c:	11000017 	ldw	r4,0(r2)
    8470:	0006ffc1 	jmpi	6ffc <___vfiprintf_internal_r>

00008474 <__sbprintf>:
    8474:	2880030b 	ldhu	r2,12(r5)
    8478:	2ac01917 	ldw	r11,100(r5)
    847c:	2a80038b 	ldhu	r10,14(r5)
    8480:	2a400717 	ldw	r9,28(r5)
    8484:	2a000917 	ldw	r8,36(r5)
    8488:	defee204 	addi	sp,sp,-1144
    848c:	00c10004 	movi	r3,1024
    8490:	dc011a15 	stw	r16,1128(sp)
    8494:	10bfff4c 	andi	r2,r2,65533
    8498:	2821883a 	mov	r16,r5
    849c:	d8cb883a 	add	r5,sp,r3
    84a0:	dc811c15 	stw	r18,1136(sp)
    84a4:	dc411b15 	stw	r17,1132(sp)
    84a8:	dfc11d15 	stw	ra,1140(sp)
    84ac:	2025883a 	mov	r18,r4
    84b0:	d881030d 	sth	r2,1036(sp)
    84b4:	dac11915 	stw	r11,1124(sp)
    84b8:	da81038d 	sth	r10,1038(sp)
    84bc:	da410715 	stw	r9,1052(sp)
    84c0:	da010915 	stw	r8,1060(sp)
    84c4:	dec10015 	stw	sp,1024(sp)
    84c8:	dec10415 	stw	sp,1040(sp)
    84cc:	d8c10215 	stw	r3,1032(sp)
    84d0:	d8c10515 	stw	r3,1044(sp)
    84d4:	d8010615 	stw	zero,1048(sp)
    84d8:	0006ffc0 	call	6ffc <___vfiprintf_internal_r>
    84dc:	1023883a 	mov	r17,r2
    84e0:	10000416 	blt	r2,zero,84f4 <__sbprintf+0x80>
    84e4:	d9410004 	addi	r5,sp,1024
    84e8:	9009883a 	mov	r4,r18
    84ec:	00043940 	call	4394 <_fflush_r>
    84f0:	10000d1e 	bne	r2,zero,8528 <__sbprintf+0xb4>
    84f4:	d881030b 	ldhu	r2,1036(sp)
    84f8:	1080100c 	andi	r2,r2,64
    84fc:	10000326 	beq	r2,zero,850c <__sbprintf+0x98>
    8500:	8080030b 	ldhu	r2,12(r16)
    8504:	10801014 	ori	r2,r2,64
    8508:	8080030d 	sth	r2,12(r16)
    850c:	8805883a 	mov	r2,r17
    8510:	dfc11d17 	ldw	ra,1140(sp)
    8514:	dc811c17 	ldw	r18,1136(sp)
    8518:	dc411b17 	ldw	r17,1132(sp)
    851c:	dc011a17 	ldw	r16,1128(sp)
    8520:	dec11e04 	addi	sp,sp,1144
    8524:	f800283a 	ret
    8528:	047fffc4 	movi	r17,-1
    852c:	003ff106 	br	84f4 <__sbprintf+0x80>

00008530 <_write_r>:
    8530:	defffd04 	addi	sp,sp,-12
    8534:	2805883a 	mov	r2,r5
    8538:	dc000015 	stw	r16,0(sp)
    853c:	040000b4 	movhi	r16,2
    8540:	dc400115 	stw	r17,4(sp)
    8544:	300b883a 	mov	r5,r6
    8548:	84365104 	addi	r16,r16,-9916
    854c:	2023883a 	mov	r17,r4
    8550:	380d883a 	mov	r6,r7
    8554:	1009883a 	mov	r4,r2
    8558:	dfc00215 	stw	ra,8(sp)
    855c:	80000015 	stw	zero,0(r16)
    8560:	000d5840 	call	d584 <write>
    8564:	00ffffc4 	movi	r3,-1
    8568:	10c00526 	beq	r2,r3,8580 <_write_r+0x50>
    856c:	dfc00217 	ldw	ra,8(sp)
    8570:	dc400117 	ldw	r17,4(sp)
    8574:	dc000017 	ldw	r16,0(sp)
    8578:	dec00304 	addi	sp,sp,12
    857c:	f800283a 	ret
    8580:	80c00017 	ldw	r3,0(r16)
    8584:	183ff926 	beq	r3,zero,856c <_write_r+0x3c>
    8588:	88c00015 	stw	r3,0(r17)
    858c:	003ff706 	br	856c <_write_r+0x3c>

00008590 <_close_r>:
    8590:	defffd04 	addi	sp,sp,-12
    8594:	dc000015 	stw	r16,0(sp)
    8598:	040000b4 	movhi	r16,2
    859c:	dc400115 	stw	r17,4(sp)
    85a0:	84365104 	addi	r16,r16,-9916
    85a4:	2023883a 	mov	r17,r4
    85a8:	2809883a 	mov	r4,r5
    85ac:	dfc00215 	stw	ra,8(sp)
    85b0:	80000015 	stw	zero,0(r16)
    85b4:	000ccfc0 	call	ccfc <close>
    85b8:	00ffffc4 	movi	r3,-1
    85bc:	10c00526 	beq	r2,r3,85d4 <_close_r+0x44>
    85c0:	dfc00217 	ldw	ra,8(sp)
    85c4:	dc400117 	ldw	r17,4(sp)
    85c8:	dc000017 	ldw	r16,0(sp)
    85cc:	dec00304 	addi	sp,sp,12
    85d0:	f800283a 	ret
    85d4:	80c00017 	ldw	r3,0(r16)
    85d8:	183ff926 	beq	r3,zero,85c0 <_close_r+0x30>
    85dc:	88c00015 	stw	r3,0(r17)
    85e0:	003ff706 	br	85c0 <_close_r+0x30>

000085e4 <_calloc_r>:
    85e4:	298b383a 	mul	r5,r5,r6
    85e8:	defffe04 	addi	sp,sp,-8
    85ec:	dfc00115 	stw	ra,4(sp)
    85f0:	dc000015 	stw	r16,0(sp)
    85f4:	00050140 	call	5014 <_malloc_r>
    85f8:	10002926 	beq	r2,zero,86a0 <_calloc_r+0xbc>
    85fc:	11bfff17 	ldw	r6,-4(r2)
    8600:	1021883a 	mov	r16,r2
    8604:	00bfff04 	movi	r2,-4
    8608:	308c703a 	and	r6,r6,r2
    860c:	00c00904 	movi	r3,36
    8610:	308d883a 	add	r6,r6,r2
    8614:	19801636 	bltu	r3,r6,8670 <_calloc_r+0x8c>
    8618:	008004c4 	movi	r2,19
    861c:	11800b2e 	bgeu	r2,r6,864c <_calloc_r+0x68>
    8620:	80000015 	stw	zero,0(r16)
    8624:	80000115 	stw	zero,4(r16)
    8628:	008006c4 	movi	r2,27
    862c:	11801a2e 	bgeu	r2,r6,8698 <_calloc_r+0xb4>
    8630:	80000215 	stw	zero,8(r16)
    8634:	80000315 	stw	zero,12(r16)
    8638:	30c0151e 	bne	r6,r3,8690 <_calloc_r+0xac>
    863c:	80000415 	stw	zero,16(r16)
    8640:	80800604 	addi	r2,r16,24
    8644:	80000515 	stw	zero,20(r16)
    8648:	00000106 	br	8650 <_calloc_r+0x6c>
    864c:	8005883a 	mov	r2,r16
    8650:	10000015 	stw	zero,0(r2)
    8654:	10000115 	stw	zero,4(r2)
    8658:	10000215 	stw	zero,8(r2)
    865c:	8005883a 	mov	r2,r16
    8660:	dfc00117 	ldw	ra,4(sp)
    8664:	dc000017 	ldw	r16,0(sp)
    8668:	dec00204 	addi	sp,sp,8
    866c:	f800283a 	ret
    8670:	000b883a 	mov	r5,zero
    8674:	8009883a 	mov	r4,r16
    8678:	0005a4c0 	call	5a4c <memset>
    867c:	8005883a 	mov	r2,r16
    8680:	dfc00117 	ldw	ra,4(sp)
    8684:	dc000017 	ldw	r16,0(sp)
    8688:	dec00204 	addi	sp,sp,8
    868c:	f800283a 	ret
    8690:	80800404 	addi	r2,r16,16
    8694:	003fee06 	br	8650 <_calloc_r+0x6c>
    8698:	80800204 	addi	r2,r16,8
    869c:	003fec06 	br	8650 <_calloc_r+0x6c>
    86a0:	0005883a 	mov	r2,zero
    86a4:	003fee06 	br	8660 <_calloc_r+0x7c>

000086a8 <_fclose_r>:
    86a8:	28003926 	beq	r5,zero,8790 <_fclose_r+0xe8>
    86ac:	defffc04 	addi	sp,sp,-16
    86b0:	dc400115 	stw	r17,4(sp)
    86b4:	dc000015 	stw	r16,0(sp)
    86b8:	dfc00315 	stw	ra,12(sp)
    86bc:	dc800215 	stw	r18,8(sp)
    86c0:	2023883a 	mov	r17,r4
    86c4:	2821883a 	mov	r16,r5
    86c8:	20000226 	beq	r4,zero,86d4 <_fclose_r+0x2c>
    86cc:	20800e17 	ldw	r2,56(r4)
    86d0:	10002726 	beq	r2,zero,8770 <_fclose_r+0xc8>
    86d4:	8080030f 	ldh	r2,12(r16)
    86d8:	1000071e 	bne	r2,zero,86f8 <_fclose_r+0x50>
    86dc:	0005883a 	mov	r2,zero
    86e0:	dfc00317 	ldw	ra,12(sp)
    86e4:	dc800217 	ldw	r18,8(sp)
    86e8:	dc400117 	ldw	r17,4(sp)
    86ec:	dc000017 	ldw	r16,0(sp)
    86f0:	dec00404 	addi	sp,sp,16
    86f4:	f800283a 	ret
    86f8:	800b883a 	mov	r5,r16
    86fc:	8809883a 	mov	r4,r17
    8700:	00041780 	call	4178 <__sflush_r>
    8704:	1025883a 	mov	r18,r2
    8708:	80800b17 	ldw	r2,44(r16)
    870c:	10000426 	beq	r2,zero,8720 <_fclose_r+0x78>
    8710:	81400717 	ldw	r5,28(r16)
    8714:	8809883a 	mov	r4,r17
    8718:	103ee83a 	callr	r2
    871c:	10001616 	blt	r2,zero,8778 <_fclose_r+0xd0>
    8720:	8080030b 	ldhu	r2,12(r16)
    8724:	1080200c 	andi	r2,r2,128
    8728:	1000151e 	bne	r2,zero,8780 <_fclose_r+0xd8>
    872c:	81400c17 	ldw	r5,48(r16)
    8730:	28000526 	beq	r5,zero,8748 <_fclose_r+0xa0>
    8734:	80801004 	addi	r2,r16,64
    8738:	28800226 	beq	r5,r2,8744 <_fclose_r+0x9c>
    873c:	8809883a 	mov	r4,r17
    8740:	00048e40 	call	48e4 <_free_r>
    8744:	80000c15 	stw	zero,48(r16)
    8748:	81401117 	ldw	r5,68(r16)
    874c:	28000326 	beq	r5,zero,875c <_fclose_r+0xb4>
    8750:	8809883a 	mov	r4,r17
    8754:	00048e40 	call	48e4 <_free_r>
    8758:	80001115 	stw	zero,68(r16)
    875c:	00047800 	call	4780 <__sfp_lock_acquire>
    8760:	8000030d 	sth	zero,12(r16)
    8764:	00047840 	call	4784 <__sfp_lock_release>
    8768:	9005883a 	mov	r2,r18
    876c:	003fdc06 	br	86e0 <_fclose_r+0x38>
    8770:	00047700 	call	4770 <__sinit>
    8774:	003fd706 	br	86d4 <_fclose_r+0x2c>
    8778:	04bfffc4 	movi	r18,-1
    877c:	003fe806 	br	8720 <_fclose_r+0x78>
    8780:	81400417 	ldw	r5,16(r16)
    8784:	8809883a 	mov	r4,r17
    8788:	00048e40 	call	48e4 <_free_r>
    878c:	003fe706 	br	872c <_fclose_r+0x84>
    8790:	0005883a 	mov	r2,zero
    8794:	f800283a 	ret

00008798 <fclose>:
    8798:	008000b4 	movhi	r2,2
    879c:	10ae6604 	addi	r2,r2,-18024
    87a0:	200b883a 	mov	r5,r4
    87a4:	11000017 	ldw	r4,0(r2)
    87a8:	00086a81 	jmpi	86a8 <_fclose_r>

000087ac <__fputwc>:
    87ac:	defff804 	addi	sp,sp,-32
    87b0:	dcc00415 	stw	r19,16(sp)
    87b4:	dc800315 	stw	r18,12(sp)
    87b8:	dc000115 	stw	r16,4(sp)
    87bc:	dfc00715 	stw	ra,28(sp)
    87c0:	dd400615 	stw	r21,24(sp)
    87c4:	dd000515 	stw	r20,20(sp)
    87c8:	dc400215 	stw	r17,8(sp)
    87cc:	2027883a 	mov	r19,r4
    87d0:	2825883a 	mov	r18,r5
    87d4:	3021883a 	mov	r16,r6
    87d8:	0004e040 	call	4e04 <__locale_mb_cur_max>
    87dc:	00c00044 	movi	r3,1
    87e0:	10c03e26 	beq	r2,r3,88dc <__fputwc+0x130>
    87e4:	81c01704 	addi	r7,r16,92
    87e8:	900d883a 	mov	r6,r18
    87ec:	d80b883a 	mov	r5,sp
    87f0:	9809883a 	mov	r4,r19
    87f4:	00097f80 	call	97f8 <_wcrtomb_r>
    87f8:	1029883a 	mov	r20,r2
    87fc:	00bfffc4 	movi	r2,-1
    8800:	a0802026 	beq	r20,r2,8884 <__fputwc+0xd8>
    8804:	d9400003 	ldbu	r5,0(sp)
    8808:	a0001c26 	beq	r20,zero,887c <__fputwc+0xd0>
    880c:	0023883a 	mov	r17,zero
    8810:	05400284 	movi	r21,10
    8814:	00000906 	br	883c <__fputwc+0x90>
    8818:	80800017 	ldw	r2,0(r16)
    881c:	11400005 	stb	r5,0(r2)
    8820:	80c00017 	ldw	r3,0(r16)
    8824:	18c00044 	addi	r3,r3,1
    8828:	80c00015 	stw	r3,0(r16)
    882c:	8c400044 	addi	r17,r17,1
    8830:	dc45883a 	add	r2,sp,r17
    8834:	8d00112e 	bgeu	r17,r20,887c <__fputwc+0xd0>
    8838:	11400003 	ldbu	r5,0(r2)
    883c:	80c00217 	ldw	r3,8(r16)
    8840:	18ffffc4 	addi	r3,r3,-1
    8844:	80c00215 	stw	r3,8(r16)
    8848:	183ff30e 	bge	r3,zero,8818 <__fputwc+0x6c>
    884c:	80800617 	ldw	r2,24(r16)
    8850:	18801916 	blt	r3,r2,88b8 <__fputwc+0x10c>
    8854:	80800017 	ldw	r2,0(r16)
    8858:	11400005 	stb	r5,0(r2)
    885c:	80800017 	ldw	r2,0(r16)
    8860:	10c00003 	ldbu	r3,0(r2)
    8864:	10800044 	addi	r2,r2,1
    8868:	1d402326 	beq	r3,r21,88f8 <__fputwc+0x14c>
    886c:	80800015 	stw	r2,0(r16)
    8870:	8c400044 	addi	r17,r17,1
    8874:	dc45883a 	add	r2,sp,r17
    8878:	8d3fef36 	bltu	r17,r20,8838 <__fputwc+0x8c>
    887c:	9005883a 	mov	r2,r18
    8880:	00000406 	br	8894 <__fputwc+0xe8>
    8884:	80c0030b 	ldhu	r3,12(r16)
    8888:	a005883a 	mov	r2,r20
    888c:	18c01014 	ori	r3,r3,64
    8890:	80c0030d 	sth	r3,12(r16)
    8894:	dfc00717 	ldw	ra,28(sp)
    8898:	dd400617 	ldw	r21,24(sp)
    889c:	dd000517 	ldw	r20,20(sp)
    88a0:	dcc00417 	ldw	r19,16(sp)
    88a4:	dc800317 	ldw	r18,12(sp)
    88a8:	dc400217 	ldw	r17,8(sp)
    88ac:	dc000117 	ldw	r16,4(sp)
    88b0:	dec00804 	addi	sp,sp,32
    88b4:	f800283a 	ret
    88b8:	800d883a 	mov	r6,r16
    88bc:	29403fcc 	andi	r5,r5,255
    88c0:	9809883a 	mov	r4,r19
    88c4:	00096a00 	call	96a0 <__swbuf_r>
    88c8:	10bfffe0 	cmpeqi	r2,r2,-1
    88cc:	10803fcc 	andi	r2,r2,255
    88d0:	103fd626 	beq	r2,zero,882c <__fputwc+0x80>
    88d4:	00bfffc4 	movi	r2,-1
    88d8:	003fee06 	br	8894 <__fputwc+0xe8>
    88dc:	90ffffc4 	addi	r3,r18,-1
    88e0:	01003f84 	movi	r4,254
    88e4:	20ffbf36 	bltu	r4,r3,87e4 <__fputwc+0x38>
    88e8:	900b883a 	mov	r5,r18
    88ec:	dc800005 	stb	r18,0(sp)
    88f0:	1029883a 	mov	r20,r2
    88f4:	003fc506 	br	880c <__fputwc+0x60>
    88f8:	800d883a 	mov	r6,r16
    88fc:	a80b883a 	mov	r5,r21
    8900:	9809883a 	mov	r4,r19
    8904:	00096a00 	call	96a0 <__swbuf_r>
    8908:	10bfffe0 	cmpeqi	r2,r2,-1
    890c:	003fef06 	br	88cc <__fputwc+0x120>

00008910 <_fputwc_r>:
    8910:	3080030b 	ldhu	r2,12(r6)
    8914:	10c8000c 	andi	r3,r2,8192
    8918:	1800051e 	bne	r3,zero,8930 <_fputwc_r+0x20>
    891c:	30c01917 	ldw	r3,100(r6)
    8920:	10880014 	ori	r2,r2,8192
    8924:	3080030d 	sth	r2,12(r6)
    8928:	18880014 	ori	r2,r3,8192
    892c:	30801915 	stw	r2,100(r6)
    8930:	00087ac1 	jmpi	87ac <__fputwc>

00008934 <fputwc>:
    8934:	008000b4 	movhi	r2,2
    8938:	defffc04 	addi	sp,sp,-16
    893c:	10ae6604 	addi	r2,r2,-18024
    8940:	dc000115 	stw	r16,4(sp)
    8944:	14000017 	ldw	r16,0(r2)
    8948:	dc400215 	stw	r17,8(sp)
    894c:	dfc00315 	stw	ra,12(sp)
    8950:	2023883a 	mov	r17,r4
    8954:	80000226 	beq	r16,zero,8960 <fputwc+0x2c>
    8958:	80800e17 	ldw	r2,56(r16)
    895c:	10001026 	beq	r2,zero,89a0 <fputwc+0x6c>
    8960:	2880030b 	ldhu	r2,12(r5)
    8964:	10c8000c 	andi	r3,r2,8192
    8968:	1800051e 	bne	r3,zero,8980 <fputwc+0x4c>
    896c:	28c01917 	ldw	r3,100(r5)
    8970:	10880014 	ori	r2,r2,8192
    8974:	2880030d 	sth	r2,12(r5)
    8978:	18880014 	ori	r2,r3,8192
    897c:	28801915 	stw	r2,100(r5)
    8980:	280d883a 	mov	r6,r5
    8984:	8009883a 	mov	r4,r16
    8988:	880b883a 	mov	r5,r17
    898c:	dfc00317 	ldw	ra,12(sp)
    8990:	dc400217 	ldw	r17,8(sp)
    8994:	dc000117 	ldw	r16,4(sp)
    8998:	dec00404 	addi	sp,sp,16
    899c:	00087ac1 	jmpi	87ac <__fputwc>
    89a0:	8009883a 	mov	r4,r16
    89a4:	d9400015 	stw	r5,0(sp)
    89a8:	00047700 	call	4770 <__sinit>
    89ac:	d9400017 	ldw	r5,0(sp)
    89b0:	003feb06 	br	8960 <fputwc+0x2c>

000089b4 <_fstat_r>:
    89b4:	defffd04 	addi	sp,sp,-12
    89b8:	2805883a 	mov	r2,r5
    89bc:	dc000015 	stw	r16,0(sp)
    89c0:	040000b4 	movhi	r16,2
    89c4:	dc400115 	stw	r17,4(sp)
    89c8:	84365104 	addi	r16,r16,-9916
    89cc:	2023883a 	mov	r17,r4
    89d0:	300b883a 	mov	r5,r6
    89d4:	1009883a 	mov	r4,r2
    89d8:	dfc00215 	stw	ra,8(sp)
    89dc:	80000015 	stw	zero,0(r16)
    89e0:	000ce480 	call	ce48 <fstat>
    89e4:	00ffffc4 	movi	r3,-1
    89e8:	10c00526 	beq	r2,r3,8a00 <_fstat_r+0x4c>
    89ec:	dfc00217 	ldw	ra,8(sp)
    89f0:	dc400117 	ldw	r17,4(sp)
    89f4:	dc000017 	ldw	r16,0(sp)
    89f8:	dec00304 	addi	sp,sp,12
    89fc:	f800283a 	ret
    8a00:	80c00017 	ldw	r3,0(r16)
    8a04:	183ff926 	beq	r3,zero,89ec <_fstat_r+0x38>
    8a08:	88c00015 	stw	r3,0(r17)
    8a0c:	003ff706 	br	89ec <_fstat_r+0x38>

00008a10 <__sfvwrite_r>:
    8a10:	30800217 	ldw	r2,8(r6)
    8a14:	10006726 	beq	r2,zero,8bb4 <__sfvwrite_r+0x1a4>
    8a18:	28c0030b 	ldhu	r3,12(r5)
    8a1c:	defff404 	addi	sp,sp,-48
    8a20:	dd400715 	stw	r21,28(sp)
    8a24:	dd000615 	stw	r20,24(sp)
    8a28:	dc000215 	stw	r16,8(sp)
    8a2c:	dfc00b15 	stw	ra,44(sp)
    8a30:	df000a15 	stw	fp,40(sp)
    8a34:	ddc00915 	stw	r23,36(sp)
    8a38:	dd800815 	stw	r22,32(sp)
    8a3c:	dcc00515 	stw	r19,20(sp)
    8a40:	dc800415 	stw	r18,16(sp)
    8a44:	dc400315 	stw	r17,12(sp)
    8a48:	1880020c 	andi	r2,r3,8
    8a4c:	2821883a 	mov	r16,r5
    8a50:	202b883a 	mov	r21,r4
    8a54:	3029883a 	mov	r20,r6
    8a58:	10002726 	beq	r2,zero,8af8 <__sfvwrite_r+0xe8>
    8a5c:	28800417 	ldw	r2,16(r5)
    8a60:	10002526 	beq	r2,zero,8af8 <__sfvwrite_r+0xe8>
    8a64:	1880008c 	andi	r2,r3,2
    8a68:	a4400017 	ldw	r17,0(r20)
    8a6c:	10002a26 	beq	r2,zero,8b18 <__sfvwrite_r+0x108>
    8a70:	05a00034 	movhi	r22,32768
    8a74:	0027883a 	mov	r19,zero
    8a78:	0025883a 	mov	r18,zero
    8a7c:	b5bf0004 	addi	r22,r22,-1024
    8a80:	980d883a 	mov	r6,r19
    8a84:	a809883a 	mov	r4,r21
    8a88:	90004626 	beq	r18,zero,8ba4 <__sfvwrite_r+0x194>
    8a8c:	900f883a 	mov	r7,r18
    8a90:	b480022e 	bgeu	r22,r18,8a9c <__sfvwrite_r+0x8c>
    8a94:	01e00034 	movhi	r7,32768
    8a98:	39ff0004 	addi	r7,r7,-1024
    8a9c:	80800917 	ldw	r2,36(r16)
    8aa0:	81400717 	ldw	r5,28(r16)
    8aa4:	103ee83a 	callr	r2
    8aa8:	0080570e 	bge	zero,r2,8c08 <__sfvwrite_r+0x1f8>
    8aac:	a0c00217 	ldw	r3,8(r20)
    8ab0:	98a7883a 	add	r19,r19,r2
    8ab4:	90a5c83a 	sub	r18,r18,r2
    8ab8:	1885c83a 	sub	r2,r3,r2
    8abc:	a0800215 	stw	r2,8(r20)
    8ac0:	103fef1e 	bne	r2,zero,8a80 <__sfvwrite_r+0x70>
    8ac4:	0005883a 	mov	r2,zero
    8ac8:	dfc00b17 	ldw	ra,44(sp)
    8acc:	df000a17 	ldw	fp,40(sp)
    8ad0:	ddc00917 	ldw	r23,36(sp)
    8ad4:	dd800817 	ldw	r22,32(sp)
    8ad8:	dd400717 	ldw	r21,28(sp)
    8adc:	dd000617 	ldw	r20,24(sp)
    8ae0:	dcc00517 	ldw	r19,20(sp)
    8ae4:	dc800417 	ldw	r18,16(sp)
    8ae8:	dc400317 	ldw	r17,12(sp)
    8aec:	dc000217 	ldw	r16,8(sp)
    8af0:	dec00c04 	addi	sp,sp,48
    8af4:	f800283a 	ret
    8af8:	800b883a 	mov	r5,r16
    8afc:	a809883a 	mov	r4,r21
    8b00:	000279c0 	call	279c <__swsetup_r>
    8b04:	1000eb1e 	bne	r2,zero,8eb4 <__sfvwrite_r+0x4a4>
    8b08:	80c0030b 	ldhu	r3,12(r16)
    8b0c:	a4400017 	ldw	r17,0(r20)
    8b10:	1880008c 	andi	r2,r3,2
    8b14:	103fd61e 	bne	r2,zero,8a70 <__sfvwrite_r+0x60>
    8b18:	1880004c 	andi	r2,r3,1
    8b1c:	10003f1e 	bne	r2,zero,8c1c <__sfvwrite_r+0x20c>
    8b20:	0039883a 	mov	fp,zero
    8b24:	0025883a 	mov	r18,zero
    8b28:	90001a26 	beq	r18,zero,8b94 <__sfvwrite_r+0x184>
    8b2c:	1880800c 	andi	r2,r3,512
    8b30:	84c00217 	ldw	r19,8(r16)
    8b34:	10002126 	beq	r2,zero,8bbc <__sfvwrite_r+0x1ac>
    8b38:	982f883a 	mov	r23,r19
    8b3c:	94c09336 	bltu	r18,r19,8d8c <__sfvwrite_r+0x37c>
    8b40:	1881200c 	andi	r2,r3,1152
    8b44:	10009e1e 	bne	r2,zero,8dc0 <__sfvwrite_r+0x3b0>
    8b48:	81000017 	ldw	r4,0(r16)
    8b4c:	b80d883a 	mov	r6,r23
    8b50:	e00b883a 	mov	r5,fp
    8b54:	0008f800 	call	8f80 <memmove>
    8b58:	80c00217 	ldw	r3,8(r16)
    8b5c:	81000017 	ldw	r4,0(r16)
    8b60:	9005883a 	mov	r2,r18
    8b64:	1ce7c83a 	sub	r19,r3,r19
    8b68:	25cf883a 	add	r7,r4,r23
    8b6c:	84c00215 	stw	r19,8(r16)
    8b70:	81c00015 	stw	r7,0(r16)
    8b74:	a0c00217 	ldw	r3,8(r20)
    8b78:	e0b9883a 	add	fp,fp,r2
    8b7c:	90a5c83a 	sub	r18,r18,r2
    8b80:	18a7c83a 	sub	r19,r3,r2
    8b84:	a4c00215 	stw	r19,8(r20)
    8b88:	983fce26 	beq	r19,zero,8ac4 <__sfvwrite_r+0xb4>
    8b8c:	80c0030b 	ldhu	r3,12(r16)
    8b90:	903fe61e 	bne	r18,zero,8b2c <__sfvwrite_r+0x11c>
    8b94:	8f000017 	ldw	fp,0(r17)
    8b98:	8c800117 	ldw	r18,4(r17)
    8b9c:	8c400204 	addi	r17,r17,8
    8ba0:	003fe106 	br	8b28 <__sfvwrite_r+0x118>
    8ba4:	8cc00017 	ldw	r19,0(r17)
    8ba8:	8c800117 	ldw	r18,4(r17)
    8bac:	8c400204 	addi	r17,r17,8
    8bb0:	003fb306 	br	8a80 <__sfvwrite_r+0x70>
    8bb4:	0005883a 	mov	r2,zero
    8bb8:	f800283a 	ret
    8bbc:	81000017 	ldw	r4,0(r16)
    8bc0:	80800417 	ldw	r2,16(r16)
    8bc4:	11005736 	bltu	r2,r4,8d24 <__sfvwrite_r+0x314>
    8bc8:	85c00517 	ldw	r23,20(r16)
    8bcc:	95c05536 	bltu	r18,r23,8d24 <__sfvwrite_r+0x314>
    8bd0:	00a00034 	movhi	r2,32768
    8bd4:	10bfffc4 	addi	r2,r2,-1
    8bd8:	9009883a 	mov	r4,r18
    8bdc:	1480012e 	bgeu	r2,r18,8be4 <__sfvwrite_r+0x1d4>
    8be0:	1009883a 	mov	r4,r2
    8be4:	b80b883a 	mov	r5,r23
    8be8:	000a4900 	call	a490 <__divsi3>
    8bec:	15cf383a 	mul	r7,r2,r23
    8bf0:	81400717 	ldw	r5,28(r16)
    8bf4:	80800917 	ldw	r2,36(r16)
    8bf8:	e00d883a 	mov	r6,fp
    8bfc:	a809883a 	mov	r4,r21
    8c00:	103ee83a 	callr	r2
    8c04:	00bfdb16 	blt	zero,r2,8b74 <__sfvwrite_r+0x164>
    8c08:	8080030b 	ldhu	r2,12(r16)
    8c0c:	10801014 	ori	r2,r2,64
    8c10:	8080030d 	sth	r2,12(r16)
    8c14:	00bfffc4 	movi	r2,-1
    8c18:	003fab06 	br	8ac8 <__sfvwrite_r+0xb8>
    8c1c:	0027883a 	mov	r19,zero
    8c20:	0011883a 	mov	r8,zero
    8c24:	0039883a 	mov	fp,zero
    8c28:	0025883a 	mov	r18,zero
    8c2c:	90001f26 	beq	r18,zero,8cac <__sfvwrite_r+0x29c>
    8c30:	40005a26 	beq	r8,zero,8d9c <__sfvwrite_r+0x38c>
    8c34:	982d883a 	mov	r22,r19
    8c38:	94c0012e 	bgeu	r18,r19,8c40 <__sfvwrite_r+0x230>
    8c3c:	902d883a 	mov	r22,r18
    8c40:	81000017 	ldw	r4,0(r16)
    8c44:	80800417 	ldw	r2,16(r16)
    8c48:	b02f883a 	mov	r23,r22
    8c4c:	81c00517 	ldw	r7,20(r16)
    8c50:	1100032e 	bgeu	r2,r4,8c60 <__sfvwrite_r+0x250>
    8c54:	80c00217 	ldw	r3,8(r16)
    8c58:	38c7883a 	add	r3,r7,r3
    8c5c:	1d801816 	blt	r3,r22,8cc0 <__sfvwrite_r+0x2b0>
    8c60:	b1c03e16 	blt	r22,r7,8d5c <__sfvwrite_r+0x34c>
    8c64:	80800917 	ldw	r2,36(r16)
    8c68:	81400717 	ldw	r5,28(r16)
    8c6c:	e00d883a 	mov	r6,fp
    8c70:	da000115 	stw	r8,4(sp)
    8c74:	a809883a 	mov	r4,r21
    8c78:	103ee83a 	callr	r2
    8c7c:	102f883a 	mov	r23,r2
    8c80:	da000117 	ldw	r8,4(sp)
    8c84:	00bfe00e 	bge	zero,r2,8c08 <__sfvwrite_r+0x1f8>
    8c88:	9de7c83a 	sub	r19,r19,r23
    8c8c:	98001f26 	beq	r19,zero,8d0c <__sfvwrite_r+0x2fc>
    8c90:	a0800217 	ldw	r2,8(r20)
    8c94:	e5f9883a 	add	fp,fp,r23
    8c98:	95e5c83a 	sub	r18,r18,r23
    8c9c:	15efc83a 	sub	r23,r2,r23
    8ca0:	a5c00215 	stw	r23,8(r20)
    8ca4:	b83f8726 	beq	r23,zero,8ac4 <__sfvwrite_r+0xb4>
    8ca8:	903fe11e 	bne	r18,zero,8c30 <__sfvwrite_r+0x220>
    8cac:	8f000017 	ldw	fp,0(r17)
    8cb0:	8c800117 	ldw	r18,4(r17)
    8cb4:	0011883a 	mov	r8,zero
    8cb8:	8c400204 	addi	r17,r17,8
    8cbc:	003fdb06 	br	8c2c <__sfvwrite_r+0x21c>
    8cc0:	180d883a 	mov	r6,r3
    8cc4:	e00b883a 	mov	r5,fp
    8cc8:	da000115 	stw	r8,4(sp)
    8ccc:	d8c00015 	stw	r3,0(sp)
    8cd0:	0008f800 	call	8f80 <memmove>
    8cd4:	d8c00017 	ldw	r3,0(sp)
    8cd8:	80800017 	ldw	r2,0(r16)
    8cdc:	800b883a 	mov	r5,r16
    8ce0:	a809883a 	mov	r4,r21
    8ce4:	10c5883a 	add	r2,r2,r3
    8ce8:	80800015 	stw	r2,0(r16)
    8cec:	d8c00015 	stw	r3,0(sp)
    8cf0:	00043940 	call	4394 <_fflush_r>
    8cf4:	d8c00017 	ldw	r3,0(sp)
    8cf8:	da000117 	ldw	r8,4(sp)
    8cfc:	103fc21e 	bne	r2,zero,8c08 <__sfvwrite_r+0x1f8>
    8d00:	182f883a 	mov	r23,r3
    8d04:	9de7c83a 	sub	r19,r19,r23
    8d08:	983fe11e 	bne	r19,zero,8c90 <__sfvwrite_r+0x280>
    8d0c:	800b883a 	mov	r5,r16
    8d10:	a809883a 	mov	r4,r21
    8d14:	00043940 	call	4394 <_fflush_r>
    8d18:	103fbb1e 	bne	r2,zero,8c08 <__sfvwrite_r+0x1f8>
    8d1c:	0011883a 	mov	r8,zero
    8d20:	003fdb06 	br	8c90 <__sfvwrite_r+0x280>
    8d24:	94c0012e 	bgeu	r18,r19,8d2c <__sfvwrite_r+0x31c>
    8d28:	9027883a 	mov	r19,r18
    8d2c:	980d883a 	mov	r6,r19
    8d30:	e00b883a 	mov	r5,fp
    8d34:	0008f800 	call	8f80 <memmove>
    8d38:	80800217 	ldw	r2,8(r16)
    8d3c:	80c00017 	ldw	r3,0(r16)
    8d40:	14c5c83a 	sub	r2,r2,r19
    8d44:	1cc7883a 	add	r3,r3,r19
    8d48:	80800215 	stw	r2,8(r16)
    8d4c:	80c00015 	stw	r3,0(r16)
    8d50:	10004326 	beq	r2,zero,8e60 <__sfvwrite_r+0x450>
    8d54:	9805883a 	mov	r2,r19
    8d58:	003f8606 	br	8b74 <__sfvwrite_r+0x164>
    8d5c:	b00d883a 	mov	r6,r22
    8d60:	e00b883a 	mov	r5,fp
    8d64:	da000115 	stw	r8,4(sp)
    8d68:	0008f800 	call	8f80 <memmove>
    8d6c:	80800217 	ldw	r2,8(r16)
    8d70:	80c00017 	ldw	r3,0(r16)
    8d74:	da000117 	ldw	r8,4(sp)
    8d78:	1585c83a 	sub	r2,r2,r22
    8d7c:	1dad883a 	add	r22,r3,r22
    8d80:	80800215 	stw	r2,8(r16)
    8d84:	85800015 	stw	r22,0(r16)
    8d88:	003fbf06 	br	8c88 <__sfvwrite_r+0x278>
    8d8c:	81000017 	ldw	r4,0(r16)
    8d90:	9027883a 	mov	r19,r18
    8d94:	902f883a 	mov	r23,r18
    8d98:	003f6c06 	br	8b4c <__sfvwrite_r+0x13c>
    8d9c:	900d883a 	mov	r6,r18
    8da0:	01400284 	movi	r5,10
    8da4:	e009883a 	mov	r4,fp
    8da8:	00058200 	call	5820 <memchr>
    8dac:	10003e26 	beq	r2,zero,8ea8 <__sfvwrite_r+0x498>
    8db0:	10800044 	addi	r2,r2,1
    8db4:	1727c83a 	sub	r19,r2,fp
    8db8:	02000044 	movi	r8,1
    8dbc:	003f9d06 	br	8c34 <__sfvwrite_r+0x224>
    8dc0:	80800517 	ldw	r2,20(r16)
    8dc4:	81400417 	ldw	r5,16(r16)
    8dc8:	81c00017 	ldw	r7,0(r16)
    8dcc:	10a7883a 	add	r19,r2,r2
    8dd0:	9885883a 	add	r2,r19,r2
    8dd4:	1026d7fa 	srli	r19,r2,31
    8dd8:	396dc83a 	sub	r22,r7,r5
    8ddc:	b1000044 	addi	r4,r22,1
    8de0:	9885883a 	add	r2,r19,r2
    8de4:	1027d07a 	srai	r19,r2,1
    8de8:	2485883a 	add	r2,r4,r18
    8dec:	980d883a 	mov	r6,r19
    8df0:	9880022e 	bgeu	r19,r2,8dfc <__sfvwrite_r+0x3ec>
    8df4:	1027883a 	mov	r19,r2
    8df8:	100d883a 	mov	r6,r2
    8dfc:	18c1000c 	andi	r3,r3,1024
    8e00:	18001c26 	beq	r3,zero,8e74 <__sfvwrite_r+0x464>
    8e04:	300b883a 	mov	r5,r6
    8e08:	a809883a 	mov	r4,r21
    8e0c:	00050140 	call	5014 <_malloc_r>
    8e10:	102f883a 	mov	r23,r2
    8e14:	10002926 	beq	r2,zero,8ebc <__sfvwrite_r+0x4ac>
    8e18:	81400417 	ldw	r5,16(r16)
    8e1c:	b00d883a 	mov	r6,r22
    8e20:	1009883a 	mov	r4,r2
    8e24:	00059040 	call	5904 <memcpy>
    8e28:	8080030b 	ldhu	r2,12(r16)
    8e2c:	00fedfc4 	movi	r3,-1153
    8e30:	10c4703a 	and	r2,r2,r3
    8e34:	10802014 	ori	r2,r2,128
    8e38:	8080030d 	sth	r2,12(r16)
    8e3c:	bd89883a 	add	r4,r23,r22
    8e40:	9d8fc83a 	sub	r7,r19,r22
    8e44:	85c00415 	stw	r23,16(r16)
    8e48:	84c00515 	stw	r19,20(r16)
    8e4c:	81000015 	stw	r4,0(r16)
    8e50:	9027883a 	mov	r19,r18
    8e54:	81c00215 	stw	r7,8(r16)
    8e58:	902f883a 	mov	r23,r18
    8e5c:	003f3b06 	br	8b4c <__sfvwrite_r+0x13c>
    8e60:	800b883a 	mov	r5,r16
    8e64:	a809883a 	mov	r4,r21
    8e68:	00043940 	call	4394 <_fflush_r>
    8e6c:	103fb926 	beq	r2,zero,8d54 <__sfvwrite_r+0x344>
    8e70:	003f6506 	br	8c08 <__sfvwrite_r+0x1f8>
    8e74:	a809883a 	mov	r4,r21
    8e78:	000913c0 	call	913c <_realloc_r>
    8e7c:	102f883a 	mov	r23,r2
    8e80:	103fee1e 	bne	r2,zero,8e3c <__sfvwrite_r+0x42c>
    8e84:	81400417 	ldw	r5,16(r16)
    8e88:	a809883a 	mov	r4,r21
    8e8c:	00048e40 	call	48e4 <_free_r>
    8e90:	8080030b 	ldhu	r2,12(r16)
    8e94:	00ffdfc4 	movi	r3,-129
    8e98:	1884703a 	and	r2,r3,r2
    8e9c:	00c00304 	movi	r3,12
    8ea0:	a8c00015 	stw	r3,0(r21)
    8ea4:	003f5906 	br	8c0c <__sfvwrite_r+0x1fc>
    8ea8:	94c00044 	addi	r19,r18,1
    8eac:	02000044 	movi	r8,1
    8eb0:	003f6006 	br	8c34 <__sfvwrite_r+0x224>
    8eb4:	00bfffc4 	movi	r2,-1
    8eb8:	003f0306 	br	8ac8 <__sfvwrite_r+0xb8>
    8ebc:	00800304 	movi	r2,12
    8ec0:	a8800015 	stw	r2,0(r21)
    8ec4:	8080030b 	ldhu	r2,12(r16)
    8ec8:	003f5006 	br	8c0c <__sfvwrite_r+0x1fc>

00008ecc <_isatty_r>:
    8ecc:	defffd04 	addi	sp,sp,-12
    8ed0:	dc000015 	stw	r16,0(sp)
    8ed4:	040000b4 	movhi	r16,2
    8ed8:	dc400115 	stw	r17,4(sp)
    8edc:	84365104 	addi	r16,r16,-9916
    8ee0:	2023883a 	mov	r17,r4
    8ee4:	2809883a 	mov	r4,r5
    8ee8:	dfc00215 	stw	ra,8(sp)
    8eec:	80000015 	stw	zero,0(r16)
    8ef0:	000cf480 	call	cf48 <isatty>
    8ef4:	00ffffc4 	movi	r3,-1
    8ef8:	10c00526 	beq	r2,r3,8f10 <_isatty_r+0x44>
    8efc:	dfc00217 	ldw	ra,8(sp)
    8f00:	dc400117 	ldw	r17,4(sp)
    8f04:	dc000017 	ldw	r16,0(sp)
    8f08:	dec00304 	addi	sp,sp,12
    8f0c:	f800283a 	ret
    8f10:	80c00017 	ldw	r3,0(r16)
    8f14:	183ff926 	beq	r3,zero,8efc <_isatty_r+0x30>
    8f18:	88c00015 	stw	r3,0(r17)
    8f1c:	003ff706 	br	8efc <_isatty_r+0x30>

00008f20 <_lseek_r>:
    8f20:	defffd04 	addi	sp,sp,-12
    8f24:	2805883a 	mov	r2,r5
    8f28:	dc000015 	stw	r16,0(sp)
    8f2c:	040000b4 	movhi	r16,2
    8f30:	dc400115 	stw	r17,4(sp)
    8f34:	300b883a 	mov	r5,r6
    8f38:	84365104 	addi	r16,r16,-9916
    8f3c:	2023883a 	mov	r17,r4
    8f40:	380d883a 	mov	r6,r7
    8f44:	1009883a 	mov	r4,r2
    8f48:	dfc00215 	stw	ra,8(sp)
    8f4c:	80000015 	stw	zero,0(r16)
    8f50:	000d1280 	call	d128 <lseek>
    8f54:	00ffffc4 	movi	r3,-1
    8f58:	10c00526 	beq	r2,r3,8f70 <_lseek_r+0x50>
    8f5c:	dfc00217 	ldw	ra,8(sp)
    8f60:	dc400117 	ldw	r17,4(sp)
    8f64:	dc000017 	ldw	r16,0(sp)
    8f68:	dec00304 	addi	sp,sp,12
    8f6c:	f800283a 	ret
    8f70:	80c00017 	ldw	r3,0(r16)
    8f74:	183ff926 	beq	r3,zero,8f5c <_lseek_r+0x3c>
    8f78:	88c00015 	stw	r3,0(r17)
    8f7c:	003ff706 	br	8f5c <_lseek_r+0x3c>

00008f80 <memmove>:
    8f80:	2005883a 	mov	r2,r4
    8f84:	29000b2e 	bgeu	r5,r4,8fb4 <memmove+0x34>
    8f88:	298f883a 	add	r7,r5,r6
    8f8c:	21c0092e 	bgeu	r4,r7,8fb4 <memmove+0x34>
    8f90:	2187883a 	add	r3,r4,r6
    8f94:	198bc83a 	sub	r5,r3,r6
    8f98:	30004826 	beq	r6,zero,90bc <memmove+0x13c>
    8f9c:	39ffffc4 	addi	r7,r7,-1
    8fa0:	39000003 	ldbu	r4,0(r7)
    8fa4:	18ffffc4 	addi	r3,r3,-1
    8fa8:	19000005 	stb	r4,0(r3)
    8fac:	28fffb1e 	bne	r5,r3,8f9c <memmove+0x1c>
    8fb0:	f800283a 	ret
    8fb4:	00c003c4 	movi	r3,15
    8fb8:	1980412e 	bgeu	r3,r6,90c0 <memmove+0x140>
    8fbc:	2886b03a 	or	r3,r5,r2
    8fc0:	18c000cc 	andi	r3,r3,3
    8fc4:	1800401e 	bne	r3,zero,90c8 <memmove+0x148>
    8fc8:	33fffc04 	addi	r15,r6,-16
    8fcc:	781ed13a 	srli	r15,r15,4
    8fd0:	28c00104 	addi	r3,r5,4
    8fd4:	13400104 	addi	r13,r2,4
    8fd8:	781c913a 	slli	r14,r15,4
    8fdc:	2b000204 	addi	r12,r5,8
    8fe0:	12c00204 	addi	r11,r2,8
    8fe4:	73800504 	addi	r14,r14,20
    8fe8:	2a800304 	addi	r10,r5,12
    8fec:	12400304 	addi	r9,r2,12
    8ff0:	2b9d883a 	add	r14,r5,r14
    8ff4:	2811883a 	mov	r8,r5
    8ff8:	100f883a 	mov	r7,r2
    8ffc:	41000017 	ldw	r4,0(r8)
    9000:	39c00404 	addi	r7,r7,16
    9004:	18c00404 	addi	r3,r3,16
    9008:	393ffc15 	stw	r4,-16(r7)
    900c:	193ffc17 	ldw	r4,-16(r3)
    9010:	6b400404 	addi	r13,r13,16
    9014:	5ac00404 	addi	r11,r11,16
    9018:	693ffc15 	stw	r4,-16(r13)
    901c:	61000017 	ldw	r4,0(r12)
    9020:	4a400404 	addi	r9,r9,16
    9024:	42000404 	addi	r8,r8,16
    9028:	593ffc15 	stw	r4,-16(r11)
    902c:	51000017 	ldw	r4,0(r10)
    9030:	63000404 	addi	r12,r12,16
    9034:	52800404 	addi	r10,r10,16
    9038:	493ffc15 	stw	r4,-16(r9)
    903c:	1bbfef1e 	bne	r3,r14,8ffc <memmove+0x7c>
    9040:	79000044 	addi	r4,r15,1
    9044:	2008913a 	slli	r4,r4,4
    9048:	328003cc 	andi	r10,r6,15
    904c:	02c000c4 	movi	r11,3
    9050:	1107883a 	add	r3,r2,r4
    9054:	290b883a 	add	r5,r5,r4
    9058:	5a801e2e 	bgeu	r11,r10,90d4 <memmove+0x154>
    905c:	1813883a 	mov	r9,r3
    9060:	2811883a 	mov	r8,r5
    9064:	500f883a 	mov	r7,r10
    9068:	41000017 	ldw	r4,0(r8)
    906c:	4a400104 	addi	r9,r9,4
    9070:	39ffff04 	addi	r7,r7,-4
    9074:	493fff15 	stw	r4,-4(r9)
    9078:	42000104 	addi	r8,r8,4
    907c:	59fffa36 	bltu	r11,r7,9068 <memmove+0xe8>
    9080:	513fff04 	addi	r4,r10,-4
    9084:	2008d0ba 	srli	r4,r4,2
    9088:	318000cc 	andi	r6,r6,3
    908c:	21000044 	addi	r4,r4,1
    9090:	2109883a 	add	r4,r4,r4
    9094:	2109883a 	add	r4,r4,r4
    9098:	1907883a 	add	r3,r3,r4
    909c:	290b883a 	add	r5,r5,r4
    90a0:	30000b26 	beq	r6,zero,90d0 <memmove+0x150>
    90a4:	198d883a 	add	r6,r3,r6
    90a8:	29c00003 	ldbu	r7,0(r5)
    90ac:	18c00044 	addi	r3,r3,1
    90b0:	29400044 	addi	r5,r5,1
    90b4:	19ffffc5 	stb	r7,-1(r3)
    90b8:	19bffb1e 	bne	r3,r6,90a8 <memmove+0x128>
    90bc:	f800283a 	ret
    90c0:	1007883a 	mov	r3,r2
    90c4:	003ff606 	br	90a0 <memmove+0x120>
    90c8:	1007883a 	mov	r3,r2
    90cc:	003ff506 	br	90a4 <memmove+0x124>
    90d0:	f800283a 	ret
    90d4:	500d883a 	mov	r6,r10
    90d8:	003ff106 	br	90a0 <memmove+0x120>

000090dc <_read_r>:
    90dc:	defffd04 	addi	sp,sp,-12
    90e0:	2805883a 	mov	r2,r5
    90e4:	dc000015 	stw	r16,0(sp)
    90e8:	040000b4 	movhi	r16,2
    90ec:	dc400115 	stw	r17,4(sp)
    90f0:	300b883a 	mov	r5,r6
    90f4:	84365104 	addi	r16,r16,-9916
    90f8:	2023883a 	mov	r17,r4
    90fc:	380d883a 	mov	r6,r7
    9100:	1009883a 	mov	r4,r2
    9104:	dfc00215 	stw	ra,8(sp)
    9108:	80000015 	stw	zero,0(r16)
    910c:	000d3240 	call	d324 <read>
    9110:	00ffffc4 	movi	r3,-1
    9114:	10c00526 	beq	r2,r3,912c <_read_r+0x50>
    9118:	dfc00217 	ldw	ra,8(sp)
    911c:	dc400117 	ldw	r17,4(sp)
    9120:	dc000017 	ldw	r16,0(sp)
    9124:	dec00304 	addi	sp,sp,12
    9128:	f800283a 	ret
    912c:	80c00017 	ldw	r3,0(r16)
    9130:	183ff926 	beq	r3,zero,9118 <_read_r+0x3c>
    9134:	88c00015 	stw	r3,0(r17)
    9138:	003ff706 	br	9118 <_read_r+0x3c>

0000913c <_realloc_r>:
    913c:	defff604 	addi	sp,sp,-40
    9140:	dc400115 	stw	r17,4(sp)
    9144:	dfc00915 	stw	ra,36(sp)
    9148:	df000815 	stw	fp,32(sp)
    914c:	ddc00715 	stw	r23,28(sp)
    9150:	dd800615 	stw	r22,24(sp)
    9154:	dd400515 	stw	r21,20(sp)
    9158:	dd000415 	stw	r20,16(sp)
    915c:	dcc00315 	stw	r19,12(sp)
    9160:	dc800215 	stw	r18,8(sp)
    9164:	dc000015 	stw	r16,0(sp)
    9168:	3023883a 	mov	r17,r6
    916c:	2800b626 	beq	r5,zero,9448 <_realloc_r+0x30c>
    9170:	2829883a 	mov	r20,r5
    9174:	2025883a 	mov	r18,r4
    9178:	000d7b80 	call	d7b8 <__malloc_lock>
    917c:	a0ffff17 	ldw	r3,-4(r20)
    9180:	043fff04 	movi	r16,-4
    9184:	888002c4 	addi	r2,r17,11
    9188:	01000584 	movi	r4,22
    918c:	a57ffe04 	addi	r21,r20,-8
    9190:	1c20703a 	and	r16,r3,r16
    9194:	2080332e 	bgeu	r4,r2,9264 <_realloc_r+0x128>
    9198:	05bffe04 	movi	r22,-8
    919c:	15ac703a 	and	r22,r2,r22
    91a0:	b005883a 	mov	r2,r22
    91a4:	b0005716 	blt	r22,zero,9304 <_realloc_r+0x1c8>
    91a8:	b4405636 	bltu	r22,r17,9304 <_realloc_r+0x1c8>
    91ac:	8080300e 	bge	r16,r2,9270 <_realloc_r+0x134>
    91b0:	070000b4 	movhi	fp,2
    91b4:	e7280f04 	addi	fp,fp,-24516
    91b8:	e2000217 	ldw	r8,8(fp)
    91bc:	ac09883a 	add	r4,r21,r16
    91c0:	22006126 	beq	r4,r8,9348 <_realloc_r+0x20c>
    91c4:	22400117 	ldw	r9,4(r4)
    91c8:	01ffff84 	movi	r7,-2
    91cc:	49ce703a 	and	r7,r9,r7
    91d0:	21cf883a 	add	r7,r4,r7
    91d4:	39800117 	ldw	r6,4(r7)
    91d8:	3180004c 	andi	r6,r6,1
    91dc:	30003e26 	beq	r6,zero,92d8 <_realloc_r+0x19c>
    91e0:	18c0004c 	andi	r3,r3,1
    91e4:	18008126 	beq	r3,zero,93ec <_realloc_r+0x2b0>
    91e8:	880b883a 	mov	r5,r17
    91ec:	9009883a 	mov	r4,r18
    91f0:	00050140 	call	5014 <_malloc_r>
    91f4:	1023883a 	mov	r17,r2
    91f8:	10011e26 	beq	r2,zero,9674 <_realloc_r+0x538>
    91fc:	a0ffff17 	ldw	r3,-4(r20)
    9200:	113ffe04 	addi	r4,r2,-8
    9204:	00bfff84 	movi	r2,-2
    9208:	1884703a 	and	r2,r3,r2
    920c:	a885883a 	add	r2,r21,r2
    9210:	2080ee26 	beq	r4,r2,95cc <_realloc_r+0x490>
    9214:	81bfff04 	addi	r6,r16,-4
    9218:	00800904 	movi	r2,36
    921c:	1180b836 	bltu	r2,r6,9500 <_realloc_r+0x3c4>
    9220:	00c004c4 	movi	r3,19
    9224:	19809536 	bltu	r3,r6,947c <_realloc_r+0x340>
    9228:	8805883a 	mov	r2,r17
    922c:	a007883a 	mov	r3,r20
    9230:	19000017 	ldw	r4,0(r3)
    9234:	11000015 	stw	r4,0(r2)
    9238:	19000117 	ldw	r4,4(r3)
    923c:	11000115 	stw	r4,4(r2)
    9240:	18c00217 	ldw	r3,8(r3)
    9244:	10c00215 	stw	r3,8(r2)
    9248:	a00b883a 	mov	r5,r20
    924c:	9009883a 	mov	r4,r18
    9250:	00048e40 	call	48e4 <_free_r>
    9254:	9009883a 	mov	r4,r18
    9258:	000d8f00 	call	d8f0 <__malloc_unlock>
    925c:	8805883a 	mov	r2,r17
    9260:	00001106 	br	92a8 <_realloc_r+0x16c>
    9264:	00800404 	movi	r2,16
    9268:	102d883a 	mov	r22,r2
    926c:	003fce06 	br	91a8 <_realloc_r+0x6c>
    9270:	a023883a 	mov	r17,r20
    9274:	858fc83a 	sub	r7,r16,r22
    9278:	008003c4 	movi	r2,15
    927c:	18c0004c 	andi	r3,r3,1
    9280:	11c02436 	bltu	r2,r7,9314 <_realloc_r+0x1d8>
    9284:	1c06b03a 	or	r3,r3,r16
    9288:	a8c00115 	stw	r3,4(r21)
    928c:	ac21883a 	add	r16,r21,r16
    9290:	80800117 	ldw	r2,4(r16)
    9294:	10800054 	ori	r2,r2,1
    9298:	80800115 	stw	r2,4(r16)
    929c:	9009883a 	mov	r4,r18
    92a0:	000d8f00 	call	d8f0 <__malloc_unlock>
    92a4:	8805883a 	mov	r2,r17
    92a8:	dfc00917 	ldw	ra,36(sp)
    92ac:	df000817 	ldw	fp,32(sp)
    92b0:	ddc00717 	ldw	r23,28(sp)
    92b4:	dd800617 	ldw	r22,24(sp)
    92b8:	dd400517 	ldw	r21,20(sp)
    92bc:	dd000417 	ldw	r20,16(sp)
    92c0:	dcc00317 	ldw	r19,12(sp)
    92c4:	dc800217 	ldw	r18,8(sp)
    92c8:	dc400117 	ldw	r17,4(sp)
    92cc:	dc000017 	ldw	r16,0(sp)
    92d0:	dec00a04 	addi	sp,sp,40
    92d4:	f800283a 	ret
    92d8:	017fff04 	movi	r5,-4
    92dc:	494a703a 	and	r5,r9,r5
    92e0:	814d883a 	add	r6,r16,r5
    92e4:	30801e16 	blt	r6,r2,9360 <_realloc_r+0x224>
    92e8:	20800317 	ldw	r2,12(r4)
    92ec:	21000217 	ldw	r4,8(r4)
    92f0:	a023883a 	mov	r17,r20
    92f4:	3021883a 	mov	r16,r6
    92f8:	20800315 	stw	r2,12(r4)
    92fc:	11000215 	stw	r4,8(r2)
    9300:	003fdc06 	br	9274 <_realloc_r+0x138>
    9304:	00800304 	movi	r2,12
    9308:	90800015 	stw	r2,0(r18)
    930c:	0005883a 	mov	r2,zero
    9310:	003fe506 	br	92a8 <_realloc_r+0x16c>
    9314:	1d86b03a 	or	r3,r3,r22
    9318:	a8c00115 	stw	r3,4(r21)
    931c:	ad8b883a 	add	r5,r21,r22
    9320:	38c00054 	ori	r3,r7,1
    9324:	28c00115 	stw	r3,4(r5)
    9328:	29cf883a 	add	r7,r5,r7
    932c:	38c00117 	ldw	r3,4(r7)
    9330:	29400204 	addi	r5,r5,8
    9334:	9009883a 	mov	r4,r18
    9338:	18800054 	ori	r2,r3,1
    933c:	38800115 	stw	r2,4(r7)
    9340:	00048e40 	call	48e4 <_free_r>
    9344:	003fd506 	br	929c <_realloc_r+0x160>
    9348:	21c00117 	ldw	r7,4(r4)
    934c:	017fff04 	movi	r5,-4
    9350:	b1800404 	addi	r6,r22,16
    9354:	394a703a 	and	r5,r7,r5
    9358:	814f883a 	add	r7,r16,r5
    935c:	39805b0e 	bge	r7,r6,94cc <_realloc_r+0x390>
    9360:	18c0004c 	andi	r3,r3,1
    9364:	183fa01e 	bne	r3,zero,91e8 <_realloc_r+0xac>
    9368:	a4fffe17 	ldw	r19,-8(r20)
    936c:	00ffff04 	movi	r3,-4
    9370:	ace7c83a 	sub	r19,r21,r19
    9374:	99800117 	ldw	r6,4(r19)
    9378:	30c6703a 	and	r3,r6,r3
    937c:	20002026 	beq	r4,zero,9400 <_realloc_r+0x2c4>
    9380:	80ef883a 	add	r23,r16,r3
    9384:	b96f883a 	add	r23,r23,r5
    9388:	22006126 	beq	r4,r8,9510 <_realloc_r+0x3d4>
    938c:	b8801c16 	blt	r23,r2,9400 <_realloc_r+0x2c4>
    9390:	20800317 	ldw	r2,12(r4)
    9394:	20c00217 	ldw	r3,8(r4)
    9398:	81bfff04 	addi	r6,r16,-4
    939c:	01000904 	movi	r4,36
    93a0:	18800315 	stw	r2,12(r3)
    93a4:	10c00215 	stw	r3,8(r2)
    93a8:	98c00217 	ldw	r3,8(r19)
    93ac:	98800317 	ldw	r2,12(r19)
    93b0:	9c400204 	addi	r17,r19,8
    93b4:	18800315 	stw	r2,12(r3)
    93b8:	10c00215 	stw	r3,8(r2)
    93bc:	21801b36 	bltu	r4,r6,942c <_realloc_r+0x2f0>
    93c0:	008004c4 	movi	r2,19
    93c4:	1180362e 	bgeu	r2,r6,94a0 <_realloc_r+0x364>
    93c8:	a0800017 	ldw	r2,0(r20)
    93cc:	98800215 	stw	r2,8(r19)
    93d0:	a0800117 	ldw	r2,4(r20)
    93d4:	98800315 	stw	r2,12(r19)
    93d8:	008006c4 	movi	r2,27
    93dc:	11808136 	bltu	r2,r6,95e4 <_realloc_r+0x4a8>
    93e0:	98800404 	addi	r2,r19,16
    93e4:	a5000204 	addi	r20,r20,8
    93e8:	00002e06 	br	94a4 <_realloc_r+0x368>
    93ec:	a4fffe17 	ldw	r19,-8(r20)
    93f0:	00ffff04 	movi	r3,-4
    93f4:	ace7c83a 	sub	r19,r21,r19
    93f8:	99000117 	ldw	r4,4(r19)
    93fc:	20c6703a 	and	r3,r4,r3
    9400:	983f7926 	beq	r19,zero,91e8 <_realloc_r+0xac>
    9404:	80ef883a 	add	r23,r16,r3
    9408:	b8bf7716 	blt	r23,r2,91e8 <_realloc_r+0xac>
    940c:	98800317 	ldw	r2,12(r19)
    9410:	98c00217 	ldw	r3,8(r19)
    9414:	81bfff04 	addi	r6,r16,-4
    9418:	01000904 	movi	r4,36
    941c:	18800315 	stw	r2,12(r3)
    9420:	10c00215 	stw	r3,8(r2)
    9424:	9c400204 	addi	r17,r19,8
    9428:	21bfe52e 	bgeu	r4,r6,93c0 <_realloc_r+0x284>
    942c:	a00b883a 	mov	r5,r20
    9430:	8809883a 	mov	r4,r17
    9434:	0008f800 	call	8f80 <memmove>
    9438:	98c00117 	ldw	r3,4(r19)
    943c:	b821883a 	mov	r16,r23
    9440:	982b883a 	mov	r21,r19
    9444:	003f8b06 	br	9274 <_realloc_r+0x138>
    9448:	300b883a 	mov	r5,r6
    944c:	dfc00917 	ldw	ra,36(sp)
    9450:	df000817 	ldw	fp,32(sp)
    9454:	ddc00717 	ldw	r23,28(sp)
    9458:	dd800617 	ldw	r22,24(sp)
    945c:	dd400517 	ldw	r21,20(sp)
    9460:	dd000417 	ldw	r20,16(sp)
    9464:	dcc00317 	ldw	r19,12(sp)
    9468:	dc800217 	ldw	r18,8(sp)
    946c:	dc400117 	ldw	r17,4(sp)
    9470:	dc000017 	ldw	r16,0(sp)
    9474:	dec00a04 	addi	sp,sp,40
    9478:	00050141 	jmpi	5014 <_malloc_r>
    947c:	a0c00017 	ldw	r3,0(r20)
    9480:	88c00015 	stw	r3,0(r17)
    9484:	a0c00117 	ldw	r3,4(r20)
    9488:	88c00115 	stw	r3,4(r17)
    948c:	00c006c4 	movi	r3,27
    9490:	19804636 	bltu	r3,r6,95ac <_realloc_r+0x470>
    9494:	88800204 	addi	r2,r17,8
    9498:	a0c00204 	addi	r3,r20,8
    949c:	003f6406 	br	9230 <_realloc_r+0xf4>
    94a0:	8805883a 	mov	r2,r17
    94a4:	a0c00017 	ldw	r3,0(r20)
    94a8:	b821883a 	mov	r16,r23
    94ac:	982b883a 	mov	r21,r19
    94b0:	10c00015 	stw	r3,0(r2)
    94b4:	a0c00117 	ldw	r3,4(r20)
    94b8:	10c00115 	stw	r3,4(r2)
    94bc:	a0c00217 	ldw	r3,8(r20)
    94c0:	10c00215 	stw	r3,8(r2)
    94c4:	98c00117 	ldw	r3,4(r19)
    94c8:	003f6a06 	br	9274 <_realloc_r+0x138>
    94cc:	adab883a 	add	r21,r21,r22
    94d0:	3d85c83a 	sub	r2,r7,r22
    94d4:	e5400215 	stw	r21,8(fp)
    94d8:	10800054 	ori	r2,r2,1
    94dc:	a8800115 	stw	r2,4(r21)
    94e0:	a0bfff17 	ldw	r2,-4(r20)
    94e4:	9009883a 	mov	r4,r18
    94e8:	1080004c 	andi	r2,r2,1
    94ec:	1584b03a 	or	r2,r2,r22
    94f0:	a0bfff15 	stw	r2,-4(r20)
    94f4:	000d8f00 	call	d8f0 <__malloc_unlock>
    94f8:	a005883a 	mov	r2,r20
    94fc:	003f6a06 	br	92a8 <_realloc_r+0x16c>
    9500:	a00b883a 	mov	r5,r20
    9504:	8809883a 	mov	r4,r17
    9508:	0008f800 	call	8f80 <memmove>
    950c:	003f4e06 	br	9248 <_realloc_r+0x10c>
    9510:	b1000404 	addi	r4,r22,16
    9514:	b93fba16 	blt	r23,r4,9400 <_realloc_r+0x2c4>
    9518:	98800317 	ldw	r2,12(r19)
    951c:	98c00217 	ldw	r3,8(r19)
    9520:	81bfff04 	addi	r6,r16,-4
    9524:	01000904 	movi	r4,36
    9528:	18800315 	stw	r2,12(r3)
    952c:	10c00215 	stw	r3,8(r2)
    9530:	9c400204 	addi	r17,r19,8
    9534:	21804336 	bltu	r4,r6,9644 <_realloc_r+0x508>
    9538:	008004c4 	movi	r2,19
    953c:	11803f2e 	bgeu	r2,r6,963c <_realloc_r+0x500>
    9540:	a0800017 	ldw	r2,0(r20)
    9544:	98800215 	stw	r2,8(r19)
    9548:	a0800117 	ldw	r2,4(r20)
    954c:	98800315 	stw	r2,12(r19)
    9550:	008006c4 	movi	r2,27
    9554:	11803f36 	bltu	r2,r6,9654 <_realloc_r+0x518>
    9558:	98800404 	addi	r2,r19,16
    955c:	a5000204 	addi	r20,r20,8
    9560:	a0c00017 	ldw	r3,0(r20)
    9564:	10c00015 	stw	r3,0(r2)
    9568:	a0c00117 	ldw	r3,4(r20)
    956c:	10c00115 	stw	r3,4(r2)
    9570:	a0c00217 	ldw	r3,8(r20)
    9574:	10c00215 	stw	r3,8(r2)
    9578:	9d87883a 	add	r3,r19,r22
    957c:	bd85c83a 	sub	r2,r23,r22
    9580:	e0c00215 	stw	r3,8(fp)
    9584:	10800054 	ori	r2,r2,1
    9588:	18800115 	stw	r2,4(r3)
    958c:	98800117 	ldw	r2,4(r19)
    9590:	9009883a 	mov	r4,r18
    9594:	1080004c 	andi	r2,r2,1
    9598:	1584b03a 	or	r2,r2,r22
    959c:	98800115 	stw	r2,4(r19)
    95a0:	000d8f00 	call	d8f0 <__malloc_unlock>
    95a4:	8805883a 	mov	r2,r17
    95a8:	003f3f06 	br	92a8 <_realloc_r+0x16c>
    95ac:	a0c00217 	ldw	r3,8(r20)
    95b0:	88c00215 	stw	r3,8(r17)
    95b4:	a0c00317 	ldw	r3,12(r20)
    95b8:	88c00315 	stw	r3,12(r17)
    95bc:	30801126 	beq	r6,r2,9604 <_realloc_r+0x4c8>
    95c0:	88800404 	addi	r2,r17,16
    95c4:	a0c00404 	addi	r3,r20,16
    95c8:	003f1906 	br	9230 <_realloc_r+0xf4>
    95cc:	893fff17 	ldw	r4,-4(r17)
    95d0:	00bfff04 	movi	r2,-4
    95d4:	a023883a 	mov	r17,r20
    95d8:	2084703a 	and	r2,r4,r2
    95dc:	80a1883a 	add	r16,r16,r2
    95e0:	003f2406 	br	9274 <_realloc_r+0x138>
    95e4:	a0800217 	ldw	r2,8(r20)
    95e8:	98800415 	stw	r2,16(r19)
    95ec:	a0800317 	ldw	r2,12(r20)
    95f0:	98800515 	stw	r2,20(r19)
    95f4:	31000a26 	beq	r6,r4,9620 <_realloc_r+0x4e4>
    95f8:	98800604 	addi	r2,r19,24
    95fc:	a5000404 	addi	r20,r20,16
    9600:	003fa806 	br	94a4 <_realloc_r+0x368>
    9604:	a1000417 	ldw	r4,16(r20)
    9608:	88800604 	addi	r2,r17,24
    960c:	a0c00604 	addi	r3,r20,24
    9610:	89000415 	stw	r4,16(r17)
    9614:	a1000517 	ldw	r4,20(r20)
    9618:	89000515 	stw	r4,20(r17)
    961c:	003f0406 	br	9230 <_realloc_r+0xf4>
    9620:	a0c00417 	ldw	r3,16(r20)
    9624:	a5000604 	addi	r20,r20,24
    9628:	98800804 	addi	r2,r19,32
    962c:	98c00615 	stw	r3,24(r19)
    9630:	a0ffff17 	ldw	r3,-4(r20)
    9634:	98c00715 	stw	r3,28(r19)
    9638:	003f9a06 	br	94a4 <_realloc_r+0x368>
    963c:	8805883a 	mov	r2,r17
    9640:	003fc706 	br	9560 <_realloc_r+0x424>
    9644:	a00b883a 	mov	r5,r20
    9648:	8809883a 	mov	r4,r17
    964c:	0008f800 	call	8f80 <memmove>
    9650:	003fc906 	br	9578 <_realloc_r+0x43c>
    9654:	a0800217 	ldw	r2,8(r20)
    9658:	98800415 	stw	r2,16(r19)
    965c:	a0800317 	ldw	r2,12(r20)
    9660:	98800515 	stw	r2,20(r19)
    9664:	31000726 	beq	r6,r4,9684 <_realloc_r+0x548>
    9668:	98800604 	addi	r2,r19,24
    966c:	a5000404 	addi	r20,r20,16
    9670:	003fbb06 	br	9560 <_realloc_r+0x424>
    9674:	9009883a 	mov	r4,r18
    9678:	000d8f00 	call	d8f0 <__malloc_unlock>
    967c:	0005883a 	mov	r2,zero
    9680:	003f0906 	br	92a8 <_realloc_r+0x16c>
    9684:	a0c00417 	ldw	r3,16(r20)
    9688:	a5000604 	addi	r20,r20,24
    968c:	98800804 	addi	r2,r19,32
    9690:	98c00615 	stw	r3,24(r19)
    9694:	a0ffff17 	ldw	r3,-4(r20)
    9698:	98c00715 	stw	r3,28(r19)
    969c:	003fb006 	br	9560 <_realloc_r+0x424>

000096a0 <__swbuf_r>:
    96a0:	defffb04 	addi	sp,sp,-20
    96a4:	dcc00315 	stw	r19,12(sp)
    96a8:	dc800215 	stw	r18,8(sp)
    96ac:	dc000015 	stw	r16,0(sp)
    96b0:	dfc00415 	stw	ra,16(sp)
    96b4:	dc400115 	stw	r17,4(sp)
    96b8:	2025883a 	mov	r18,r4
    96bc:	2827883a 	mov	r19,r5
    96c0:	3021883a 	mov	r16,r6
    96c4:	20000226 	beq	r4,zero,96d0 <__swbuf_r+0x30>
    96c8:	20800e17 	ldw	r2,56(r4)
    96cc:	10004226 	beq	r2,zero,97d8 <__swbuf_r+0x138>
    96d0:	80800617 	ldw	r2,24(r16)
    96d4:	8100030b 	ldhu	r4,12(r16)
    96d8:	80800215 	stw	r2,8(r16)
    96dc:	2080020c 	andi	r2,r4,8
    96e0:	10003626 	beq	r2,zero,97bc <__swbuf_r+0x11c>
    96e4:	80c00417 	ldw	r3,16(r16)
    96e8:	18003426 	beq	r3,zero,97bc <__swbuf_r+0x11c>
    96ec:	2088000c 	andi	r2,r4,8192
    96f0:	9c403fcc 	andi	r17,r19,255
    96f4:	10001a26 	beq	r2,zero,9760 <__swbuf_r+0xc0>
    96f8:	80800017 	ldw	r2,0(r16)
    96fc:	81000517 	ldw	r4,20(r16)
    9700:	10c7c83a 	sub	r3,r2,r3
    9704:	1900200e 	bge	r3,r4,9788 <__swbuf_r+0xe8>
    9708:	18c00044 	addi	r3,r3,1
    970c:	81000217 	ldw	r4,8(r16)
    9710:	11400044 	addi	r5,r2,1
    9714:	81400015 	stw	r5,0(r16)
    9718:	213fffc4 	addi	r4,r4,-1
    971c:	81000215 	stw	r4,8(r16)
    9720:	14c00005 	stb	r19,0(r2)
    9724:	80800517 	ldw	r2,20(r16)
    9728:	10c01e26 	beq	r2,r3,97a4 <__swbuf_r+0x104>
    972c:	8080030b 	ldhu	r2,12(r16)
    9730:	1080004c 	andi	r2,r2,1
    9734:	10000226 	beq	r2,zero,9740 <__swbuf_r+0xa0>
    9738:	00800284 	movi	r2,10
    973c:	88801926 	beq	r17,r2,97a4 <__swbuf_r+0x104>
    9740:	8805883a 	mov	r2,r17
    9744:	dfc00417 	ldw	ra,16(sp)
    9748:	dcc00317 	ldw	r19,12(sp)
    974c:	dc800217 	ldw	r18,8(sp)
    9750:	dc400117 	ldw	r17,4(sp)
    9754:	dc000017 	ldw	r16,0(sp)
    9758:	dec00504 	addi	sp,sp,20
    975c:	f800283a 	ret
    9760:	81401917 	ldw	r5,100(r16)
    9764:	00b7ffc4 	movi	r2,-8193
    9768:	21080014 	ori	r4,r4,8192
    976c:	2884703a 	and	r2,r5,r2
    9770:	80801915 	stw	r2,100(r16)
    9774:	80800017 	ldw	r2,0(r16)
    9778:	8100030d 	sth	r4,12(r16)
    977c:	81000517 	ldw	r4,20(r16)
    9780:	10c7c83a 	sub	r3,r2,r3
    9784:	193fe016 	blt	r3,r4,9708 <__swbuf_r+0x68>
    9788:	800b883a 	mov	r5,r16
    978c:	9009883a 	mov	r4,r18
    9790:	00043940 	call	4394 <_fflush_r>
    9794:	1000071e 	bne	r2,zero,97b4 <__swbuf_r+0x114>
    9798:	80800017 	ldw	r2,0(r16)
    979c:	00c00044 	movi	r3,1
    97a0:	003fda06 	br	970c <__swbuf_r+0x6c>
    97a4:	800b883a 	mov	r5,r16
    97a8:	9009883a 	mov	r4,r18
    97ac:	00043940 	call	4394 <_fflush_r>
    97b0:	103fe326 	beq	r2,zero,9740 <__swbuf_r+0xa0>
    97b4:	00bfffc4 	movi	r2,-1
    97b8:	003fe206 	br	9744 <__swbuf_r+0xa4>
    97bc:	800b883a 	mov	r5,r16
    97c0:	9009883a 	mov	r4,r18
    97c4:	000279c0 	call	279c <__swsetup_r>
    97c8:	103ffa1e 	bne	r2,zero,97b4 <__swbuf_r+0x114>
    97cc:	8100030b 	ldhu	r4,12(r16)
    97d0:	80c00417 	ldw	r3,16(r16)
    97d4:	003fc506 	br	96ec <__swbuf_r+0x4c>
    97d8:	00047700 	call	4770 <__sinit>
    97dc:	003fbc06 	br	96d0 <__swbuf_r+0x30>

000097e0 <__swbuf>:
    97e0:	008000b4 	movhi	r2,2
    97e4:	10ae6604 	addi	r2,r2,-18024
    97e8:	280d883a 	mov	r6,r5
    97ec:	200b883a 	mov	r5,r4
    97f0:	11000017 	ldw	r4,0(r2)
    97f4:	00096a01 	jmpi	96a0 <__swbuf_r>

000097f8 <_wcrtomb_r>:
    97f8:	defff604 	addi	sp,sp,-40
    97fc:	008000b4 	movhi	r2,2
    9800:	dc800815 	stw	r18,32(sp)
    9804:	dc400715 	stw	r17,28(sp)
    9808:	dc000615 	stw	r16,24(sp)
    980c:	10ae6a04 	addi	r2,r2,-18008
    9810:	dfc00915 	stw	ra,36(sp)
    9814:	2021883a 	mov	r16,r4
    9818:	3823883a 	mov	r17,r7
    981c:	14800017 	ldw	r18,0(r2)
    9820:	28001426 	beq	r5,zero,9874 <_wcrtomb_r+0x7c>
    9824:	d9400415 	stw	r5,16(sp)
    9828:	d9800515 	stw	r6,20(sp)
    982c:	0004df80 	call	4df8 <__locale_charset>
    9830:	d9800517 	ldw	r6,20(sp)
    9834:	d9400417 	ldw	r5,16(sp)
    9838:	100f883a 	mov	r7,r2
    983c:	dc400015 	stw	r17,0(sp)
    9840:	8009883a 	mov	r4,r16
    9844:	903ee83a 	callr	r18
    9848:	00ffffc4 	movi	r3,-1
    984c:	10c0031e 	bne	r2,r3,985c <_wcrtomb_r+0x64>
    9850:	88000015 	stw	zero,0(r17)
    9854:	00c02284 	movi	r3,138
    9858:	80c00015 	stw	r3,0(r16)
    985c:	dfc00917 	ldw	ra,36(sp)
    9860:	dc800817 	ldw	r18,32(sp)
    9864:	dc400717 	ldw	r17,28(sp)
    9868:	dc000617 	ldw	r16,24(sp)
    986c:	dec00a04 	addi	sp,sp,40
    9870:	f800283a 	ret
    9874:	0004df80 	call	4df8 <__locale_charset>
    9878:	100f883a 	mov	r7,r2
    987c:	dc400015 	stw	r17,0(sp)
    9880:	000d883a 	mov	r6,zero
    9884:	d9400104 	addi	r5,sp,4
    9888:	8009883a 	mov	r4,r16
    988c:	903ee83a 	callr	r18
    9890:	003fed06 	br	9848 <_wcrtomb_r+0x50>

00009894 <wcrtomb>:
    9894:	defff604 	addi	sp,sp,-40
    9898:	008000b4 	movhi	r2,2
    989c:	dc800615 	stw	r18,24(sp)
    98a0:	dc400515 	stw	r17,20(sp)
    98a4:	10ae6604 	addi	r2,r2,-18024
    98a8:	dfc00915 	stw	ra,36(sp)
    98ac:	dd000815 	stw	r20,32(sp)
    98b0:	dcc00715 	stw	r19,28(sp)
    98b4:	dc000415 	stw	r16,16(sp)
    98b8:	3025883a 	mov	r18,r6
    98bc:	14400017 	ldw	r17,0(r2)
    98c0:	20001926 	beq	r4,zero,9928 <wcrtomb+0x94>
    98c4:	008000b4 	movhi	r2,2
    98c8:	10ae6a04 	addi	r2,r2,-18008
    98cc:	15000017 	ldw	r20,0(r2)
    98d0:	2021883a 	mov	r16,r4
    98d4:	2827883a 	mov	r19,r5
    98d8:	0004df80 	call	4df8 <__locale_charset>
    98dc:	100f883a 	mov	r7,r2
    98e0:	dc800015 	stw	r18,0(sp)
    98e4:	980d883a 	mov	r6,r19
    98e8:	800b883a 	mov	r5,r16
    98ec:	8809883a 	mov	r4,r17
    98f0:	a03ee83a 	callr	r20
    98f4:	00ffffc4 	movi	r3,-1
    98f8:	10c0031e 	bne	r2,r3,9908 <wcrtomb+0x74>
    98fc:	90000015 	stw	zero,0(r18)
    9900:	00c02284 	movi	r3,138
    9904:	88c00015 	stw	r3,0(r17)
    9908:	dfc00917 	ldw	ra,36(sp)
    990c:	dd000817 	ldw	r20,32(sp)
    9910:	dcc00717 	ldw	r19,28(sp)
    9914:	dc800617 	ldw	r18,24(sp)
    9918:	dc400517 	ldw	r17,20(sp)
    991c:	dc000417 	ldw	r16,16(sp)
    9920:	dec00a04 	addi	sp,sp,40
    9924:	f800283a 	ret
    9928:	008000b4 	movhi	r2,2
    992c:	10ae6a04 	addi	r2,r2,-18008
    9930:	14000017 	ldw	r16,0(r2)
    9934:	0004df80 	call	4df8 <__locale_charset>
    9938:	100f883a 	mov	r7,r2
    993c:	dc800015 	stw	r18,0(sp)
    9940:	000d883a 	mov	r6,zero
    9944:	d9400104 	addi	r5,sp,4
    9948:	8809883a 	mov	r4,r17
    994c:	803ee83a 	callr	r16
    9950:	003fe806 	br	98f4 <wcrtomb+0x60>

00009954 <__ascii_wctomb>:
    9954:	28000526 	beq	r5,zero,996c <__ascii_wctomb+0x18>
    9958:	00803fc4 	movi	r2,255
    995c:	11800536 	bltu	r2,r6,9974 <__ascii_wctomb+0x20>
    9960:	29800005 	stb	r6,0(r5)
    9964:	00800044 	movi	r2,1
    9968:	f800283a 	ret
    996c:	0005883a 	mov	r2,zero
    9970:	f800283a 	ret
    9974:	00802284 	movi	r2,138
    9978:	20800015 	stw	r2,0(r4)
    997c:	00bfffc4 	movi	r2,-1
    9980:	f800283a 	ret

00009984 <_wctomb_r>:
    9984:	008000b4 	movhi	r2,2
    9988:	defff904 	addi	sp,sp,-28
    998c:	10ae6a04 	addi	r2,r2,-18008
    9990:	dfc00615 	stw	ra,24(sp)
    9994:	dc400515 	stw	r17,20(sp)
    9998:	dc000415 	stw	r16,16(sp)
    999c:	3823883a 	mov	r17,r7
    99a0:	14000017 	ldw	r16,0(r2)
    99a4:	d9000115 	stw	r4,4(sp)
    99a8:	d9400215 	stw	r5,8(sp)
    99ac:	d9800315 	stw	r6,12(sp)
    99b0:	0004df80 	call	4df8 <__locale_charset>
    99b4:	d9800317 	ldw	r6,12(sp)
    99b8:	d9400217 	ldw	r5,8(sp)
    99bc:	d9000117 	ldw	r4,4(sp)
    99c0:	100f883a 	mov	r7,r2
    99c4:	dc400015 	stw	r17,0(sp)
    99c8:	803ee83a 	callr	r16
    99cc:	dfc00617 	ldw	ra,24(sp)
    99d0:	dc400517 	ldw	r17,20(sp)
    99d4:	dc000417 	ldw	r16,16(sp)
    99d8:	dec00704 	addi	sp,sp,28
    99dc:	f800283a 	ret

000099e0 <__udivdi3>:
    99e0:	defff504 	addi	sp,sp,-44
    99e4:	dcc00415 	stw	r19,16(sp)
    99e8:	dc000115 	stw	r16,4(sp)
    99ec:	dfc00a15 	stw	ra,40(sp)
    99f0:	df000915 	stw	fp,36(sp)
    99f4:	ddc00815 	stw	r23,32(sp)
    99f8:	dd800715 	stw	r22,28(sp)
    99fc:	dd400615 	stw	r21,24(sp)
    9a00:	dd000515 	stw	r20,20(sp)
    9a04:	dc800315 	stw	r18,12(sp)
    9a08:	dc400215 	stw	r17,8(sp)
    9a0c:	2027883a 	mov	r19,r4
    9a10:	2821883a 	mov	r16,r5
    9a14:	3800411e 	bne	r7,zero,9b1c <__udivdi3+0x13c>
    9a18:	3023883a 	mov	r17,r6
    9a1c:	2025883a 	mov	r18,r4
    9a20:	2980522e 	bgeu	r5,r6,9b6c <__udivdi3+0x18c>
    9a24:	00bfffd4 	movui	r2,65535
    9a28:	282d883a 	mov	r22,r5
    9a2c:	1180a836 	bltu	r2,r6,9cd0 <__udivdi3+0x2f0>
    9a30:	00803fc4 	movi	r2,255
    9a34:	1185803a 	cmpltu	r2,r2,r6
    9a38:	100490fa 	slli	r2,r2,3
    9a3c:	3086d83a 	srl	r3,r6,r2
    9a40:	010000b4 	movhi	r4,2
    9a44:	2125ff04 	addi	r4,r4,-26628
    9a48:	20c7883a 	add	r3,r4,r3
    9a4c:	18c00003 	ldbu	r3,0(r3)
    9a50:	1885883a 	add	r2,r3,r2
    9a54:	00c00804 	movi	r3,32
    9a58:	1887c83a 	sub	r3,r3,r2
    9a5c:	18000526 	beq	r3,zero,9a74 <__udivdi3+0x94>
    9a60:	80e0983a 	sll	r16,r16,r3
    9a64:	9884d83a 	srl	r2,r19,r2
    9a68:	30e2983a 	sll	r17,r6,r3
    9a6c:	98e4983a 	sll	r18,r19,r3
    9a70:	142cb03a 	or	r22,r2,r16
    9a74:	882ad43a 	srli	r21,r17,16
    9a78:	b009883a 	mov	r4,r22
    9a7c:	8d3fffcc 	andi	r20,r17,65535
    9a80:	a80b883a 	mov	r5,r21
    9a84:	000a5ec0 	call	a5ec <__umodsi3>
    9a88:	b009883a 	mov	r4,r22
    9a8c:	a80b883a 	mov	r5,r21
    9a90:	1027883a 	mov	r19,r2
    9a94:	000a5880 	call	a588 <__udivsi3>
    9a98:	102d883a 	mov	r22,r2
    9a9c:	9826943a 	slli	r19,r19,16
    9aa0:	9004d43a 	srli	r2,r18,16
    9aa4:	a5a1383a 	mul	r16,r20,r22
    9aa8:	14c4b03a 	or	r2,r2,r19
    9aac:	1400052e 	bgeu	r2,r16,9ac4 <__udivdi3+0xe4>
    9ab0:	1445883a 	add	r2,r2,r17
    9ab4:	b0ffffc4 	addi	r3,r22,-1
    9ab8:	14400136 	bltu	r2,r17,9ac0 <__udivdi3+0xe0>
    9abc:	14012336 	bltu	r2,r16,9f4c <__udivdi3+0x56c>
    9ac0:	182d883a 	mov	r22,r3
    9ac4:	1421c83a 	sub	r16,r2,r16
    9ac8:	a80b883a 	mov	r5,r21
    9acc:	8009883a 	mov	r4,r16
    9ad0:	000a5ec0 	call	a5ec <__umodsi3>
    9ad4:	1027883a 	mov	r19,r2
    9ad8:	a80b883a 	mov	r5,r21
    9adc:	8009883a 	mov	r4,r16
    9ae0:	000a5880 	call	a588 <__udivsi3>
    9ae4:	9826943a 	slli	r19,r19,16
    9ae8:	a0a9383a 	mul	r20,r20,r2
    9aec:	94bfffcc 	andi	r18,r18,65535
    9af0:	94e4b03a 	or	r18,r18,r19
    9af4:	9500052e 	bgeu	r18,r20,9b0c <__udivdi3+0x12c>
    9af8:	8ca5883a 	add	r18,r17,r18
    9afc:	10ffffc4 	addi	r3,r2,-1
    9b00:	9440f136 	bltu	r18,r17,9ec8 <__udivdi3+0x4e8>
    9b04:	9500f02e 	bgeu	r18,r20,9ec8 <__udivdi3+0x4e8>
    9b08:	10bfff84 	addi	r2,r2,-2
    9b0c:	b00c943a 	slli	r6,r22,16
    9b10:	0007883a 	mov	r3,zero
    9b14:	3084b03a 	or	r2,r6,r2
    9b18:	00005906 	br	9c80 <__udivdi3+0x2a0>
    9b1c:	29c05636 	bltu	r5,r7,9c78 <__udivdi3+0x298>
    9b20:	00bfffd4 	movui	r2,65535
    9b24:	11c0622e 	bgeu	r2,r7,9cb0 <__udivdi3+0x2d0>
    9b28:	00804034 	movhi	r2,256
    9b2c:	10bfffc4 	addi	r2,r2,-1
    9b30:	11c0ee36 	bltu	r2,r7,9eec <__udivdi3+0x50c>
    9b34:	00800404 	movi	r2,16
    9b38:	3886d83a 	srl	r3,r7,r2
    9b3c:	010000b4 	movhi	r4,2
    9b40:	2125ff04 	addi	r4,r4,-26628
    9b44:	20c7883a 	add	r3,r4,r3
    9b48:	18c00003 	ldbu	r3,0(r3)
    9b4c:	05400804 	movi	r21,32
    9b50:	1885883a 	add	r2,r3,r2
    9b54:	a8abc83a 	sub	r21,r21,r2
    9b58:	a800621e 	bne	r21,zero,9ce4 <__udivdi3+0x304>
    9b5c:	3c00e936 	bltu	r7,r16,9f04 <__udivdi3+0x524>
    9b60:	9985403a 	cmpgeu	r2,r19,r6
    9b64:	0007883a 	mov	r3,zero
    9b68:	00004506 	br	9c80 <__udivdi3+0x2a0>
    9b6c:	3000041e 	bne	r6,zero,9b80 <__udivdi3+0x1a0>
    9b70:	000b883a 	mov	r5,zero
    9b74:	01000044 	movi	r4,1
    9b78:	000a5880 	call	a588 <__udivsi3>
    9b7c:	1023883a 	mov	r17,r2
    9b80:	00bfffd4 	movui	r2,65535
    9b84:	14404e2e 	bgeu	r2,r17,9cc0 <__udivdi3+0x2e0>
    9b88:	00804034 	movhi	r2,256
    9b8c:	10bfffc4 	addi	r2,r2,-1
    9b90:	1440d836 	bltu	r2,r17,9ef4 <__udivdi3+0x514>
    9b94:	00800404 	movi	r2,16
    9b98:	8886d83a 	srl	r3,r17,r2
    9b9c:	010000b4 	movhi	r4,2
    9ba0:	2125ff04 	addi	r4,r4,-26628
    9ba4:	20c7883a 	add	r3,r4,r3
    9ba8:	18c00003 	ldbu	r3,0(r3)
    9bac:	1885883a 	add	r2,r3,r2
    9bb0:	00c00804 	movi	r3,32
    9bb4:	1887c83a 	sub	r3,r3,r2
    9bb8:	18008f1e 	bne	r3,zero,9df8 <__udivdi3+0x418>
    9bbc:	882ad43a 	srli	r21,r17,16
    9bc0:	8461c83a 	sub	r16,r16,r17
    9bc4:	8d3fffcc 	andi	r20,r17,65535
    9bc8:	00c00044 	movi	r3,1
    9bcc:	8009883a 	mov	r4,r16
    9bd0:	a80b883a 	mov	r5,r21
    9bd4:	d8c00015 	stw	r3,0(sp)
    9bd8:	000a5ec0 	call	a5ec <__umodsi3>
    9bdc:	8009883a 	mov	r4,r16
    9be0:	a80b883a 	mov	r5,r21
    9be4:	1027883a 	mov	r19,r2
    9be8:	000a5880 	call	a588 <__udivsi3>
    9bec:	9826943a 	slli	r19,r19,16
    9bf0:	9008d43a 	srli	r4,r18,16
    9bf4:	1521383a 	mul	r16,r2,r20
    9bf8:	102d883a 	mov	r22,r2
    9bfc:	24c8b03a 	or	r4,r4,r19
    9c00:	d8c00017 	ldw	r3,0(sp)
    9c04:	2400052e 	bgeu	r4,r16,9c1c <__udivdi3+0x23c>
    9c08:	2449883a 	add	r4,r4,r17
    9c0c:	b0bfffc4 	addi	r2,r22,-1
    9c10:	24400136 	bltu	r4,r17,9c18 <__udivdi3+0x238>
    9c14:	2400ca36 	bltu	r4,r16,9f40 <__udivdi3+0x560>
    9c18:	102d883a 	mov	r22,r2
    9c1c:	2421c83a 	sub	r16,r4,r16
    9c20:	a80b883a 	mov	r5,r21
    9c24:	8009883a 	mov	r4,r16
    9c28:	d8c00015 	stw	r3,0(sp)
    9c2c:	000a5ec0 	call	a5ec <__umodsi3>
    9c30:	1027883a 	mov	r19,r2
    9c34:	a80b883a 	mov	r5,r21
    9c38:	8009883a 	mov	r4,r16
    9c3c:	000a5880 	call	a588 <__udivsi3>
    9c40:	9826943a 	slli	r19,r19,16
    9c44:	1529383a 	mul	r20,r2,r20
    9c48:	94bfffcc 	andi	r18,r18,65535
    9c4c:	94e4b03a 	or	r18,r18,r19
    9c50:	d8c00017 	ldw	r3,0(sp)
    9c54:	9500052e 	bgeu	r18,r20,9c6c <__udivdi3+0x28c>
    9c58:	8ca5883a 	add	r18,r17,r18
    9c5c:	113fffc4 	addi	r4,r2,-1
    9c60:	94409736 	bltu	r18,r17,9ec0 <__udivdi3+0x4e0>
    9c64:	9500962e 	bgeu	r18,r20,9ec0 <__udivdi3+0x4e0>
    9c68:	10bfff84 	addi	r2,r2,-2
    9c6c:	b00c943a 	slli	r6,r22,16
    9c70:	3084b03a 	or	r2,r6,r2
    9c74:	00000206 	br	9c80 <__udivdi3+0x2a0>
    9c78:	0007883a 	mov	r3,zero
    9c7c:	0005883a 	mov	r2,zero
    9c80:	dfc00a17 	ldw	ra,40(sp)
    9c84:	df000917 	ldw	fp,36(sp)
    9c88:	ddc00817 	ldw	r23,32(sp)
    9c8c:	dd800717 	ldw	r22,28(sp)
    9c90:	dd400617 	ldw	r21,24(sp)
    9c94:	dd000517 	ldw	r20,20(sp)
    9c98:	dcc00417 	ldw	r19,16(sp)
    9c9c:	dc800317 	ldw	r18,12(sp)
    9ca0:	dc400217 	ldw	r17,8(sp)
    9ca4:	dc000117 	ldw	r16,4(sp)
    9ca8:	dec00b04 	addi	sp,sp,44
    9cac:	f800283a 	ret
    9cb0:	00803fc4 	movi	r2,255
    9cb4:	11c5803a 	cmpltu	r2,r2,r7
    9cb8:	100490fa 	slli	r2,r2,3
    9cbc:	003f9e06 	br	9b38 <__udivdi3+0x158>
    9cc0:	00803fc4 	movi	r2,255
    9cc4:	1445803a 	cmpltu	r2,r2,r17
    9cc8:	100490fa 	slli	r2,r2,3
    9ccc:	003fb206 	br	9b98 <__udivdi3+0x1b8>
    9cd0:	00804034 	movhi	r2,256
    9cd4:	10bfffc4 	addi	r2,r2,-1
    9cd8:	11808836 	bltu	r2,r6,9efc <__udivdi3+0x51c>
    9cdc:	00800404 	movi	r2,16
    9ce0:	003f5606 	br	9a3c <__udivdi3+0x5c>
    9ce4:	30aed83a 	srl	r23,r6,r2
    9ce8:	3d4e983a 	sll	r7,r7,r21
    9cec:	80acd83a 	srl	r22,r16,r2
    9cf0:	9884d83a 	srl	r2,r19,r2
    9cf4:	3deeb03a 	or	r23,r7,r23
    9cf8:	b824d43a 	srli	r18,r23,16
    9cfc:	8560983a 	sll	r16,r16,r21
    9d00:	b009883a 	mov	r4,r22
    9d04:	900b883a 	mov	r5,r18
    9d08:	3568983a 	sll	r20,r6,r21
    9d0c:	1420b03a 	or	r16,r2,r16
    9d10:	000a5ec0 	call	a5ec <__umodsi3>
    9d14:	b009883a 	mov	r4,r22
    9d18:	900b883a 	mov	r5,r18
    9d1c:	1023883a 	mov	r17,r2
    9d20:	000a5880 	call	a588 <__udivsi3>
    9d24:	8808943a 	slli	r4,r17,16
    9d28:	bf3fffcc 	andi	fp,r23,65535
    9d2c:	8006d43a 	srli	r3,r16,16
    9d30:	e0a3383a 	mul	r17,fp,r2
    9d34:	100d883a 	mov	r6,r2
    9d38:	1906b03a 	or	r3,r3,r4
    9d3c:	1c40042e 	bgeu	r3,r17,9d50 <__udivdi3+0x370>
    9d40:	1dc7883a 	add	r3,r3,r23
    9d44:	10bfffc4 	addi	r2,r2,-1
    9d48:	1dc0752e 	bgeu	r3,r23,9f20 <__udivdi3+0x540>
    9d4c:	100d883a 	mov	r6,r2
    9d50:	1c63c83a 	sub	r17,r3,r17
    9d54:	900b883a 	mov	r5,r18
    9d58:	8809883a 	mov	r4,r17
    9d5c:	d9800015 	stw	r6,0(sp)
    9d60:	000a5ec0 	call	a5ec <__umodsi3>
    9d64:	102d883a 	mov	r22,r2
    9d68:	8809883a 	mov	r4,r17
    9d6c:	900b883a 	mov	r5,r18
    9d70:	000a5880 	call	a588 <__udivsi3>
    9d74:	b02c943a 	slli	r22,r22,16
    9d78:	e089383a 	mul	r4,fp,r2
    9d7c:	843fffcc 	andi	r16,r16,65535
    9d80:	85a0b03a 	or	r16,r16,r22
    9d84:	d9800017 	ldw	r6,0(sp)
    9d88:	8100042e 	bgeu	r16,r4,9d9c <__udivdi3+0x3bc>
    9d8c:	85e1883a 	add	r16,r16,r23
    9d90:	10ffffc4 	addi	r3,r2,-1
    9d94:	85c05e2e 	bgeu	r16,r23,9f10 <__udivdi3+0x530>
    9d98:	1805883a 	mov	r2,r3
    9d9c:	300c943a 	slli	r6,r6,16
    9da0:	a17fffcc 	andi	r5,r20,65535
    9da4:	a028d43a 	srli	r20,r20,16
    9da8:	3084b03a 	or	r2,r6,r2
    9dac:	10ffffcc 	andi	r3,r2,65535
    9db0:	100cd43a 	srli	r6,r2,16
    9db4:	194f383a 	mul	r7,r3,r5
    9db8:	1d07383a 	mul	r3,r3,r20
    9dbc:	314b383a 	mul	r5,r6,r5
    9dc0:	3810d43a 	srli	r8,r7,16
    9dc4:	8121c83a 	sub	r16,r16,r4
    9dc8:	1947883a 	add	r3,r3,r5
    9dcc:	40c7883a 	add	r3,r8,r3
    9dd0:	350d383a 	mul	r6,r6,r20
    9dd4:	1940022e 	bgeu	r3,r5,9de0 <__udivdi3+0x400>
    9dd8:	01000074 	movhi	r4,1
    9ddc:	310d883a 	add	r6,r6,r4
    9de0:	1828d43a 	srli	r20,r3,16
    9de4:	a18d883a 	add	r6,r20,r6
    9de8:	81803e36 	bltu	r16,r6,9ee4 <__udivdi3+0x504>
    9dec:	81803826 	beq	r16,r6,9ed0 <__udivdi3+0x4f0>
    9df0:	0007883a 	mov	r3,zero
    9df4:	003fa206 	br	9c80 <__udivdi3+0x2a0>
    9df8:	88e2983a 	sll	r17,r17,r3
    9dfc:	80a8d83a 	srl	r20,r16,r2
    9e00:	80e0983a 	sll	r16,r16,r3
    9e04:	882ad43a 	srli	r21,r17,16
    9e08:	9884d83a 	srl	r2,r19,r2
    9e0c:	a009883a 	mov	r4,r20
    9e10:	a80b883a 	mov	r5,r21
    9e14:	142eb03a 	or	r23,r2,r16
    9e18:	98e4983a 	sll	r18,r19,r3
    9e1c:	000a5ec0 	call	a5ec <__umodsi3>
    9e20:	a009883a 	mov	r4,r20
    9e24:	a80b883a 	mov	r5,r21
    9e28:	1021883a 	mov	r16,r2
    9e2c:	000a5880 	call	a588 <__udivsi3>
    9e30:	1039883a 	mov	fp,r2
    9e34:	8d3fffcc 	andi	r20,r17,65535
    9e38:	8020943a 	slli	r16,r16,16
    9e3c:	b804d43a 	srli	r2,r23,16
    9e40:	a72d383a 	mul	r22,r20,fp
    9e44:	1404b03a 	or	r2,r2,r16
    9e48:	1580062e 	bgeu	r2,r22,9e64 <__udivdi3+0x484>
    9e4c:	1445883a 	add	r2,r2,r17
    9e50:	e0ffffc4 	addi	r3,fp,-1
    9e54:	14403836 	bltu	r2,r17,9f38 <__udivdi3+0x558>
    9e58:	1580372e 	bgeu	r2,r22,9f38 <__udivdi3+0x558>
    9e5c:	e73fff84 	addi	fp,fp,-2
    9e60:	1445883a 	add	r2,r2,r17
    9e64:	15adc83a 	sub	r22,r2,r22
    9e68:	a80b883a 	mov	r5,r21
    9e6c:	b009883a 	mov	r4,r22
    9e70:	000a5ec0 	call	a5ec <__umodsi3>
    9e74:	1027883a 	mov	r19,r2
    9e78:	b009883a 	mov	r4,r22
    9e7c:	a80b883a 	mov	r5,r21
    9e80:	000a5880 	call	a588 <__udivsi3>
    9e84:	9826943a 	slli	r19,r19,16
    9e88:	a0a1383a 	mul	r16,r20,r2
    9e8c:	b93fffcc 	andi	r4,r23,65535
    9e90:	24c8b03a 	or	r4,r4,r19
    9e94:	2400062e 	bgeu	r4,r16,9eb0 <__udivdi3+0x4d0>
    9e98:	2449883a 	add	r4,r4,r17
    9e9c:	10ffffc4 	addi	r3,r2,-1
    9ea0:	24402336 	bltu	r4,r17,9f30 <__udivdi3+0x550>
    9ea4:	2400222e 	bgeu	r4,r16,9f30 <__udivdi3+0x550>
    9ea8:	10bfff84 	addi	r2,r2,-2
    9eac:	2449883a 	add	r4,r4,r17
    9eb0:	e038943a 	slli	fp,fp,16
    9eb4:	2421c83a 	sub	r16,r4,r16
    9eb8:	e086b03a 	or	r3,fp,r2
    9ebc:	003f4306 	br	9bcc <__udivdi3+0x1ec>
    9ec0:	2005883a 	mov	r2,r4
    9ec4:	003f6906 	br	9c6c <__udivdi3+0x28c>
    9ec8:	1805883a 	mov	r2,r3
    9ecc:	003f0f06 	br	9b0c <__udivdi3+0x12c>
    9ed0:	1806943a 	slli	r3,r3,16
    9ed4:	9d66983a 	sll	r19,r19,r21
    9ed8:	39ffffcc 	andi	r7,r7,65535
    9edc:	19c7883a 	add	r3,r3,r7
    9ee0:	98ffc32e 	bgeu	r19,r3,9df0 <__udivdi3+0x410>
    9ee4:	10bfffc4 	addi	r2,r2,-1
    9ee8:	003fc106 	br	9df0 <__udivdi3+0x410>
    9eec:	00800604 	movi	r2,24
    9ef0:	003f1106 	br	9b38 <__udivdi3+0x158>
    9ef4:	00800604 	movi	r2,24
    9ef8:	003f2706 	br	9b98 <__udivdi3+0x1b8>
    9efc:	00800604 	movi	r2,24
    9f00:	003ece06 	br	9a3c <__udivdi3+0x5c>
    9f04:	0007883a 	mov	r3,zero
    9f08:	00800044 	movi	r2,1
    9f0c:	003f5c06 	br	9c80 <__udivdi3+0x2a0>
    9f10:	813fa12e 	bgeu	r16,r4,9d98 <__udivdi3+0x3b8>
    9f14:	10bfff84 	addi	r2,r2,-2
    9f18:	85e1883a 	add	r16,r16,r23
    9f1c:	003f9f06 	br	9d9c <__udivdi3+0x3bc>
    9f20:	1c7f8a2e 	bgeu	r3,r17,9d4c <__udivdi3+0x36c>
    9f24:	31bfff84 	addi	r6,r6,-2
    9f28:	1dc7883a 	add	r3,r3,r23
    9f2c:	003f8806 	br	9d50 <__udivdi3+0x370>
    9f30:	1805883a 	mov	r2,r3
    9f34:	003fde06 	br	9eb0 <__udivdi3+0x4d0>
    9f38:	1839883a 	mov	fp,r3
    9f3c:	003fc906 	br	9e64 <__udivdi3+0x484>
    9f40:	b5bfff84 	addi	r22,r22,-2
    9f44:	2449883a 	add	r4,r4,r17
    9f48:	003f3406 	br	9c1c <__udivdi3+0x23c>
    9f4c:	b5bfff84 	addi	r22,r22,-2
    9f50:	1445883a 	add	r2,r2,r17
    9f54:	003edb06 	br	9ac4 <__udivdi3+0xe4>

00009f58 <__umoddi3>:
    9f58:	defff404 	addi	sp,sp,-48
    9f5c:	df000a15 	stw	fp,40(sp)
    9f60:	dc400315 	stw	r17,12(sp)
    9f64:	dc000215 	stw	r16,8(sp)
    9f68:	dfc00b15 	stw	ra,44(sp)
    9f6c:	ddc00915 	stw	r23,36(sp)
    9f70:	dd800815 	stw	r22,32(sp)
    9f74:	dd400715 	stw	r21,28(sp)
    9f78:	dd000615 	stw	r20,24(sp)
    9f7c:	dcc00515 	stw	r19,20(sp)
    9f80:	dc800415 	stw	r18,16(sp)
    9f84:	2021883a 	mov	r16,r4
    9f88:	2823883a 	mov	r17,r5
    9f8c:	2839883a 	mov	fp,r5
    9f90:	38003c1e 	bne	r7,zero,a084 <__umoddi3+0x12c>
    9f94:	3027883a 	mov	r19,r6
    9f98:	2029883a 	mov	r20,r4
    9f9c:	2980512e 	bgeu	r5,r6,a0e4 <__umoddi3+0x18c>
    9fa0:	00bfffd4 	movui	r2,65535
    9fa4:	11809a36 	bltu	r2,r6,a210 <__umoddi3+0x2b8>
    9fa8:	01003fc4 	movi	r4,255
    9fac:	2189803a 	cmpltu	r4,r4,r6
    9fb0:	200890fa 	slli	r4,r4,3
    9fb4:	3104d83a 	srl	r2,r6,r4
    9fb8:	00c000b4 	movhi	r3,2
    9fbc:	18e5ff04 	addi	r3,r3,-26628
    9fc0:	1885883a 	add	r2,r3,r2
    9fc4:	10c00003 	ldbu	r3,0(r2)
    9fc8:	00800804 	movi	r2,32
    9fcc:	1909883a 	add	r4,r3,r4
    9fd0:	1125c83a 	sub	r18,r2,r4
    9fd4:	90000526 	beq	r18,zero,9fec <__umoddi3+0x94>
    9fd8:	8ca2983a 	sll	r17,r17,r18
    9fdc:	8108d83a 	srl	r4,r16,r4
    9fe0:	34a6983a 	sll	r19,r6,r18
    9fe4:	84a8983a 	sll	r20,r16,r18
    9fe8:	2478b03a 	or	fp,r4,r17
    9fec:	982ed43a 	srli	r23,r19,16
    9ff0:	e009883a 	mov	r4,fp
    9ff4:	9dbfffcc 	andi	r22,r19,65535
    9ff8:	b80b883a 	mov	r5,r23
    9ffc:	000a5ec0 	call	a5ec <__umodsi3>
    a000:	e009883a 	mov	r4,fp
    a004:	b80b883a 	mov	r5,r23
    a008:	102b883a 	mov	r21,r2
    a00c:	000a5880 	call	a588 <__udivsi3>
    a010:	a806943a 	slli	r3,r21,16
    a014:	a008d43a 	srli	r4,r20,16
    a018:	b085383a 	mul	r2,r22,r2
    a01c:	20c8b03a 	or	r4,r4,r3
    a020:	2080032e 	bgeu	r4,r2,a030 <__umoddi3+0xd8>
    a024:	24c9883a 	add	r4,r4,r19
    a028:	24c00136 	bltu	r4,r19,a030 <__umoddi3+0xd8>
    a02c:	20811036 	bltu	r4,r2,a470 <__umoddi3+0x518>
    a030:	20abc83a 	sub	r21,r4,r2
    a034:	b80b883a 	mov	r5,r23
    a038:	a809883a 	mov	r4,r21
    a03c:	000a5ec0 	call	a5ec <__umodsi3>
    a040:	1023883a 	mov	r17,r2
    a044:	b80b883a 	mov	r5,r23
    a048:	a809883a 	mov	r4,r21
    a04c:	000a5880 	call	a588 <__udivsi3>
    a050:	8822943a 	slli	r17,r17,16
    a054:	b085383a 	mul	r2,r22,r2
    a058:	a0ffffcc 	andi	r3,r20,65535
    a05c:	1c46b03a 	or	r3,r3,r17
    a060:	1880042e 	bgeu	r3,r2,a074 <__umoddi3+0x11c>
    a064:	1cc7883a 	add	r3,r3,r19
    a068:	1cc00236 	bltu	r3,r19,a074 <__umoddi3+0x11c>
    a06c:	1880012e 	bgeu	r3,r2,a074 <__umoddi3+0x11c>
    a070:	1cc7883a 	add	r3,r3,r19
    a074:	1885c83a 	sub	r2,r3,r2
    a078:	1484d83a 	srl	r2,r2,r18
    a07c:	0007883a 	mov	r3,zero
    a080:	00004f06 	br	a1c0 <__umoddi3+0x268>
    a084:	29c04c36 	bltu	r5,r7,a1b8 <__umoddi3+0x260>
    a088:	00bfffd4 	movui	r2,65535
    a08c:	11c0582e 	bgeu	r2,r7,a1f0 <__umoddi3+0x298>
    a090:	00804034 	movhi	r2,256
    a094:	10bfffc4 	addi	r2,r2,-1
    a098:	11c0e736 	bltu	r2,r7,a438 <__umoddi3+0x4e0>
    a09c:	01000404 	movi	r4,16
    a0a0:	3904d83a 	srl	r2,r7,r4
    a0a4:	00c000b4 	movhi	r3,2
    a0a8:	18e5ff04 	addi	r3,r3,-26628
    a0ac:	1885883a 	add	r2,r3,r2
    a0b0:	14c00003 	ldbu	r19,0(r2)
    a0b4:	00c00804 	movi	r3,32
    a0b8:	9927883a 	add	r19,r19,r4
    a0bc:	1ce9c83a 	sub	r20,r3,r19
    a0c0:	a000581e 	bne	r20,zero,a224 <__umoddi3+0x2cc>
    a0c4:	3c400136 	bltu	r7,r17,a0cc <__umoddi3+0x174>
    a0c8:	8180eb36 	bltu	r16,r6,a478 <__umoddi3+0x520>
    a0cc:	8185c83a 	sub	r2,r16,r6
    a0d0:	89e3c83a 	sub	r17,r17,r7
    a0d4:	8089803a 	cmpltu	r4,r16,r2
    a0d8:	8939c83a 	sub	fp,r17,r4
    a0dc:	e007883a 	mov	r3,fp
    a0e0:	00003706 	br	a1c0 <__umoddi3+0x268>
    a0e4:	3000041e 	bne	r6,zero,a0f8 <__umoddi3+0x1a0>
    a0e8:	000b883a 	mov	r5,zero
    a0ec:	01000044 	movi	r4,1
    a0f0:	000a5880 	call	a588 <__udivsi3>
    a0f4:	1027883a 	mov	r19,r2
    a0f8:	00bfffd4 	movui	r2,65535
    a0fc:	14c0402e 	bgeu	r2,r19,a200 <__umoddi3+0x2a8>
    a100:	00804034 	movhi	r2,256
    a104:	10bfffc4 	addi	r2,r2,-1
    a108:	14c0cd36 	bltu	r2,r19,a440 <__umoddi3+0x4e8>
    a10c:	00800404 	movi	r2,16
    a110:	9886d83a 	srl	r3,r19,r2
    a114:	010000b4 	movhi	r4,2
    a118:	2125ff04 	addi	r4,r4,-26628
    a11c:	20c7883a 	add	r3,r4,r3
    a120:	18c00003 	ldbu	r3,0(r3)
    a124:	1887883a 	add	r3,r3,r2
    a128:	00800804 	movi	r2,32
    a12c:	10e5c83a 	sub	r18,r2,r3
    a130:	9000901e 	bne	r18,zero,a374 <__umoddi3+0x41c>
    a134:	982cd43a 	srli	r22,r19,16
    a138:	8ce3c83a 	sub	r17,r17,r19
    a13c:	9d7fffcc 	andi	r21,r19,65535
    a140:	b00b883a 	mov	r5,r22
    a144:	8809883a 	mov	r4,r17
    a148:	000a5ec0 	call	a5ec <__umodsi3>
    a14c:	8809883a 	mov	r4,r17
    a150:	b00b883a 	mov	r5,r22
    a154:	1021883a 	mov	r16,r2
    a158:	000a5880 	call	a588 <__udivsi3>
    a15c:	8006943a 	slli	r3,r16,16
    a160:	a008d43a 	srli	r4,r20,16
    a164:	1545383a 	mul	r2,r2,r21
    a168:	20c8b03a 	or	r4,r4,r3
    a16c:	2080042e 	bgeu	r4,r2,a180 <__umoddi3+0x228>
    a170:	24c9883a 	add	r4,r4,r19
    a174:	24c00236 	bltu	r4,r19,a180 <__umoddi3+0x228>
    a178:	2080012e 	bgeu	r4,r2,a180 <__umoddi3+0x228>
    a17c:	24c9883a 	add	r4,r4,r19
    a180:	20a1c83a 	sub	r16,r4,r2
    a184:	b00b883a 	mov	r5,r22
    a188:	8009883a 	mov	r4,r16
    a18c:	000a5ec0 	call	a5ec <__umodsi3>
    a190:	1023883a 	mov	r17,r2
    a194:	b00b883a 	mov	r5,r22
    a198:	8009883a 	mov	r4,r16
    a19c:	000a5880 	call	a588 <__udivsi3>
    a1a0:	8822943a 	slli	r17,r17,16
    a1a4:	1545383a 	mul	r2,r2,r21
    a1a8:	a53fffcc 	andi	r20,r20,65535
    a1ac:	a446b03a 	or	r3,r20,r17
    a1b0:	18bfb02e 	bgeu	r3,r2,a074 <__umoddi3+0x11c>
    a1b4:	003fab06 	br	a064 <__umoddi3+0x10c>
    a1b8:	2005883a 	mov	r2,r4
    a1bc:	2807883a 	mov	r3,r5
    a1c0:	dfc00b17 	ldw	ra,44(sp)
    a1c4:	df000a17 	ldw	fp,40(sp)
    a1c8:	ddc00917 	ldw	r23,36(sp)
    a1cc:	dd800817 	ldw	r22,32(sp)
    a1d0:	dd400717 	ldw	r21,28(sp)
    a1d4:	dd000617 	ldw	r20,24(sp)
    a1d8:	dcc00517 	ldw	r19,20(sp)
    a1dc:	dc800417 	ldw	r18,16(sp)
    a1e0:	dc400317 	ldw	r17,12(sp)
    a1e4:	dc000217 	ldw	r16,8(sp)
    a1e8:	dec00c04 	addi	sp,sp,48
    a1ec:	f800283a 	ret
    a1f0:	04c03fc4 	movi	r19,255
    a1f4:	99c9803a 	cmpltu	r4,r19,r7
    a1f8:	200890fa 	slli	r4,r4,3
    a1fc:	003fa806 	br	a0a0 <__umoddi3+0x148>
    a200:	00803fc4 	movi	r2,255
    a204:	14c5803a 	cmpltu	r2,r2,r19
    a208:	100490fa 	slli	r2,r2,3
    a20c:	003fc006 	br	a110 <__umoddi3+0x1b8>
    a210:	00804034 	movhi	r2,256
    a214:	10bfffc4 	addi	r2,r2,-1
    a218:	11808b36 	bltu	r2,r6,a448 <__umoddi3+0x4f0>
    a21c:	01000404 	movi	r4,16
    a220:	003f6406 	br	9fb4 <__umoddi3+0x5c>
    a224:	34c4d83a 	srl	r2,r6,r19
    a228:	3d0e983a 	sll	r7,r7,r20
    a22c:	8cf8d83a 	srl	fp,r17,r19
    a230:	8d10983a 	sll	r8,r17,r20
    a234:	38aab03a 	or	r21,r7,r2
    a238:	a82cd43a 	srli	r22,r21,16
    a23c:	84e2d83a 	srl	r17,r16,r19
    a240:	e009883a 	mov	r4,fp
    a244:	b00b883a 	mov	r5,r22
    a248:	8a22b03a 	or	r17,r17,r8
    a24c:	3524983a 	sll	r18,r6,r20
    a250:	000a5ec0 	call	a5ec <__umodsi3>
    a254:	e009883a 	mov	r4,fp
    a258:	b00b883a 	mov	r5,r22
    a25c:	102f883a 	mov	r23,r2
    a260:	000a5880 	call	a588 <__udivsi3>
    a264:	100d883a 	mov	r6,r2
    a268:	b808943a 	slli	r4,r23,16
    a26c:	aa3fffcc 	andi	r8,r21,65535
    a270:	8804d43a 	srli	r2,r17,16
    a274:	41af383a 	mul	r23,r8,r6
    a278:	8520983a 	sll	r16,r16,r20
    a27c:	1104b03a 	or	r2,r2,r4
    a280:	15c0042e 	bgeu	r2,r23,a294 <__umoddi3+0x33c>
    a284:	1545883a 	add	r2,r2,r21
    a288:	30ffffc4 	addi	r3,r6,-1
    a28c:	1540742e 	bgeu	r2,r21,a460 <__umoddi3+0x508>
    a290:	180d883a 	mov	r6,r3
    a294:	15efc83a 	sub	r23,r2,r23
    a298:	b00b883a 	mov	r5,r22
    a29c:	b809883a 	mov	r4,r23
    a2a0:	d9800115 	stw	r6,4(sp)
    a2a4:	da000015 	stw	r8,0(sp)
    a2a8:	000a5ec0 	call	a5ec <__umodsi3>
    a2ac:	b00b883a 	mov	r5,r22
    a2b0:	b809883a 	mov	r4,r23
    a2b4:	1039883a 	mov	fp,r2
    a2b8:	000a5880 	call	a588 <__udivsi3>
    a2bc:	da000017 	ldw	r8,0(sp)
    a2c0:	e038943a 	slli	fp,fp,16
    a2c4:	100b883a 	mov	r5,r2
    a2c8:	4089383a 	mul	r4,r8,r2
    a2cc:	8a3fffcc 	andi	r8,r17,65535
    a2d0:	4710b03a 	or	r8,r8,fp
    a2d4:	d9800117 	ldw	r6,4(sp)
    a2d8:	4100042e 	bgeu	r8,r4,a2ec <__umoddi3+0x394>
    a2dc:	4551883a 	add	r8,r8,r21
    a2e0:	10bfffc4 	addi	r2,r2,-1
    a2e4:	45405a2e 	bgeu	r8,r21,a450 <__umoddi3+0x4f8>
    a2e8:	100b883a 	mov	r5,r2
    a2ec:	300c943a 	slli	r6,r6,16
    a2f0:	91ffffcc 	andi	r7,r18,65535
    a2f4:	9004d43a 	srli	r2,r18,16
    a2f8:	314cb03a 	or	r6,r6,r5
    a2fc:	317fffcc 	andi	r5,r6,65535
    a300:	300cd43a 	srli	r6,r6,16
    a304:	29d3383a 	mul	r9,r5,r7
    a308:	288b383a 	mul	r5,r5,r2
    a30c:	31cf383a 	mul	r7,r6,r7
    a310:	4806d43a 	srli	r3,r9,16
    a314:	4111c83a 	sub	r8,r8,r4
    a318:	29cb883a 	add	r5,r5,r7
    a31c:	194b883a 	add	r5,r3,r5
    a320:	3085383a 	mul	r2,r6,r2
    a324:	29c0022e 	bgeu	r5,r7,a330 <__umoddi3+0x3d8>
    a328:	00c00074 	movhi	r3,1
    a32c:	10c5883a 	add	r2,r2,r3
    a330:	2808d43a 	srli	r4,r5,16
    a334:	280a943a 	slli	r5,r5,16
    a338:	4a7fffcc 	andi	r9,r9,65535
    a33c:	2085883a 	add	r2,r4,r2
    a340:	2a4b883a 	add	r5,r5,r9
    a344:	40803636 	bltu	r8,r2,a420 <__umoddi3+0x4c8>
    a348:	40804d26 	beq	r8,r2,a480 <__umoddi3+0x528>
    a34c:	4089c83a 	sub	r4,r8,r2
    a350:	280f883a 	mov	r7,r5
    a354:	81cfc83a 	sub	r7,r16,r7
    a358:	81c7803a 	cmpltu	r3,r16,r7
    a35c:	20c7c83a 	sub	r3,r4,r3
    a360:	1cc4983a 	sll	r2,r3,r19
    a364:	3d0ed83a 	srl	r7,r7,r20
    a368:	1d06d83a 	srl	r3,r3,r20
    a36c:	11c4b03a 	or	r2,r2,r7
    a370:	003f9306 	br	a1c0 <__umoddi3+0x268>
    a374:	9ca6983a 	sll	r19,r19,r18
    a378:	88e8d83a 	srl	r20,r17,r3
    a37c:	80c4d83a 	srl	r2,r16,r3
    a380:	982cd43a 	srli	r22,r19,16
    a384:	8ca2983a 	sll	r17,r17,r18
    a388:	a009883a 	mov	r4,r20
    a38c:	b00b883a 	mov	r5,r22
    a390:	1478b03a 	or	fp,r2,r17
    a394:	000a5ec0 	call	a5ec <__umodsi3>
    a398:	a009883a 	mov	r4,r20
    a39c:	b00b883a 	mov	r5,r22
    a3a0:	1023883a 	mov	r17,r2
    a3a4:	000a5880 	call	a588 <__udivsi3>
    a3a8:	9d7fffcc 	andi	r21,r19,65535
    a3ac:	880a943a 	slli	r5,r17,16
    a3b0:	e008d43a 	srli	r4,fp,16
    a3b4:	a885383a 	mul	r2,r21,r2
    a3b8:	84a8983a 	sll	r20,r16,r18
    a3bc:	2148b03a 	or	r4,r4,r5
    a3c0:	2080042e 	bgeu	r4,r2,a3d4 <__umoddi3+0x47c>
    a3c4:	24c9883a 	add	r4,r4,r19
    a3c8:	24c00236 	bltu	r4,r19,a3d4 <__umoddi3+0x47c>
    a3cc:	2080012e 	bgeu	r4,r2,a3d4 <__umoddi3+0x47c>
    a3d0:	24c9883a 	add	r4,r4,r19
    a3d4:	20a3c83a 	sub	r17,r4,r2
    a3d8:	b00b883a 	mov	r5,r22
    a3dc:	8809883a 	mov	r4,r17
    a3e0:	000a5ec0 	call	a5ec <__umodsi3>
    a3e4:	102f883a 	mov	r23,r2
    a3e8:	8809883a 	mov	r4,r17
    a3ec:	b00b883a 	mov	r5,r22
    a3f0:	000a5880 	call	a588 <__udivsi3>
    a3f4:	b82e943a 	slli	r23,r23,16
    a3f8:	a885383a 	mul	r2,r21,r2
    a3fc:	e13fffcc 	andi	r4,fp,65535
    a400:	25c8b03a 	or	r4,r4,r23
    a404:	2080042e 	bgeu	r4,r2,a418 <__umoddi3+0x4c0>
    a408:	24c9883a 	add	r4,r4,r19
    a40c:	24c00236 	bltu	r4,r19,a418 <__umoddi3+0x4c0>
    a410:	2080012e 	bgeu	r4,r2,a418 <__umoddi3+0x4c0>
    a414:	24c9883a 	add	r4,r4,r19
    a418:	20a3c83a 	sub	r17,r4,r2
    a41c:	003f4806 	br	a140 <__umoddi3+0x1e8>
    a420:	2c8fc83a 	sub	r7,r5,r18
    a424:	1545c83a 	sub	r2,r2,r21
    a428:	29cb803a 	cmpltu	r5,r5,r7
    a42c:	1145c83a 	sub	r2,r2,r5
    a430:	4089c83a 	sub	r4,r8,r2
    a434:	003fc706 	br	a354 <__umoddi3+0x3fc>
    a438:	01000604 	movi	r4,24
    a43c:	003f1806 	br	a0a0 <__umoddi3+0x148>
    a440:	00800604 	movi	r2,24
    a444:	003f3206 	br	a110 <__umoddi3+0x1b8>
    a448:	01000604 	movi	r4,24
    a44c:	003ed906 	br	9fb4 <__umoddi3+0x5c>
    a450:	413fa52e 	bgeu	r8,r4,a2e8 <__umoddi3+0x390>
    a454:	297fff84 	addi	r5,r5,-2
    a458:	4551883a 	add	r8,r8,r21
    a45c:	003fa306 	br	a2ec <__umoddi3+0x394>
    a460:	15ff8b2e 	bgeu	r2,r23,a290 <__umoddi3+0x338>
    a464:	31bfff84 	addi	r6,r6,-2
    a468:	1545883a 	add	r2,r2,r21
    a46c:	003f8906 	br	a294 <__umoddi3+0x33c>
    a470:	24c9883a 	add	r4,r4,r19
    a474:	003eee06 	br	a030 <__umoddi3+0xd8>
    a478:	8005883a 	mov	r2,r16
    a47c:	003f1706 	br	a0dc <__umoddi3+0x184>
    a480:	817fe736 	bltu	r16,r5,a420 <__umoddi3+0x4c8>
    a484:	280f883a 	mov	r7,r5
    a488:	0009883a 	mov	r4,zero
    a48c:	003fb106 	br	a354 <__umoddi3+0x3fc>

0000a490 <__divsi3>:
    a490:	20001b16 	blt	r4,zero,a500 <__divsi3+0x70>
    a494:	000f883a 	mov	r7,zero
    a498:	28001616 	blt	r5,zero,a4f4 <__divsi3+0x64>
    a49c:	200d883a 	mov	r6,r4
    a4a0:	29001a2e 	bgeu	r5,r4,a50c <__divsi3+0x7c>
    a4a4:	00800804 	movi	r2,32
    a4a8:	00c00044 	movi	r3,1
    a4ac:	00000106 	br	a4b4 <__divsi3+0x24>
    a4b0:	10000d26 	beq	r2,zero,a4e8 <__divsi3+0x58>
    a4b4:	294b883a 	add	r5,r5,r5
    a4b8:	10bfffc4 	addi	r2,r2,-1
    a4bc:	18c7883a 	add	r3,r3,r3
    a4c0:	293ffb36 	bltu	r5,r4,a4b0 <__divsi3+0x20>
    a4c4:	0005883a 	mov	r2,zero
    a4c8:	18000726 	beq	r3,zero,a4e8 <__divsi3+0x58>
    a4cc:	0005883a 	mov	r2,zero
    a4d0:	31400236 	bltu	r6,r5,a4dc <__divsi3+0x4c>
    a4d4:	314dc83a 	sub	r6,r6,r5
    a4d8:	10c4b03a 	or	r2,r2,r3
    a4dc:	1806d07a 	srli	r3,r3,1
    a4e0:	280ad07a 	srli	r5,r5,1
    a4e4:	183ffa1e 	bne	r3,zero,a4d0 <__divsi3+0x40>
    a4e8:	38000126 	beq	r7,zero,a4f0 <__divsi3+0x60>
    a4ec:	0085c83a 	sub	r2,zero,r2
    a4f0:	f800283a 	ret
    a4f4:	014bc83a 	sub	r5,zero,r5
    a4f8:	39c0005c 	xori	r7,r7,1
    a4fc:	003fe706 	br	a49c <__divsi3+0xc>
    a500:	0109c83a 	sub	r4,zero,r4
    a504:	01c00044 	movi	r7,1
    a508:	003fe306 	br	a498 <__divsi3+0x8>
    a50c:	00c00044 	movi	r3,1
    a510:	003fee06 	br	a4cc <__divsi3+0x3c>

0000a514 <__modsi3>:
    a514:	20001716 	blt	r4,zero,a574 <__modsi3+0x60>
    a518:	000f883a 	mov	r7,zero
    a51c:	2005883a 	mov	r2,r4
    a520:	28001216 	blt	r5,zero,a56c <__modsi3+0x58>
    a524:	2900162e 	bgeu	r5,r4,a580 <__modsi3+0x6c>
    a528:	01800804 	movi	r6,32
    a52c:	00c00044 	movi	r3,1
    a530:	00000106 	br	a538 <__modsi3+0x24>
    a534:	30000a26 	beq	r6,zero,a560 <__modsi3+0x4c>
    a538:	294b883a 	add	r5,r5,r5
    a53c:	31bfffc4 	addi	r6,r6,-1
    a540:	18c7883a 	add	r3,r3,r3
    a544:	293ffb36 	bltu	r5,r4,a534 <__modsi3+0x20>
    a548:	18000526 	beq	r3,zero,a560 <__modsi3+0x4c>
    a54c:	1806d07a 	srli	r3,r3,1
    a550:	11400136 	bltu	r2,r5,a558 <__modsi3+0x44>
    a554:	1145c83a 	sub	r2,r2,r5
    a558:	280ad07a 	srli	r5,r5,1
    a55c:	183ffb1e 	bne	r3,zero,a54c <__modsi3+0x38>
    a560:	38000126 	beq	r7,zero,a568 <__modsi3+0x54>
    a564:	0085c83a 	sub	r2,zero,r2
    a568:	f800283a 	ret
    a56c:	014bc83a 	sub	r5,zero,r5
    a570:	003fec06 	br	a524 <__modsi3+0x10>
    a574:	0109c83a 	sub	r4,zero,r4
    a578:	01c00044 	movi	r7,1
    a57c:	003fe706 	br	a51c <__modsi3+0x8>
    a580:	00c00044 	movi	r3,1
    a584:	003ff106 	br	a54c <__modsi3+0x38>

0000a588 <__udivsi3>:
    a588:	200d883a 	mov	r6,r4
    a58c:	2900152e 	bgeu	r5,r4,a5e4 <__udivsi3+0x5c>
    a590:	28001416 	blt	r5,zero,a5e4 <__udivsi3+0x5c>
    a594:	00800804 	movi	r2,32
    a598:	00c00044 	movi	r3,1
    a59c:	00000206 	br	a5a8 <__udivsi3+0x20>
    a5a0:	10000e26 	beq	r2,zero,a5dc <__udivsi3+0x54>
    a5a4:	28000516 	blt	r5,zero,a5bc <__udivsi3+0x34>
    a5a8:	294b883a 	add	r5,r5,r5
    a5ac:	10bfffc4 	addi	r2,r2,-1
    a5b0:	18c7883a 	add	r3,r3,r3
    a5b4:	293ffa36 	bltu	r5,r4,a5a0 <__udivsi3+0x18>
    a5b8:	18000826 	beq	r3,zero,a5dc <__udivsi3+0x54>
    a5bc:	0005883a 	mov	r2,zero
    a5c0:	31400236 	bltu	r6,r5,a5cc <__udivsi3+0x44>
    a5c4:	314dc83a 	sub	r6,r6,r5
    a5c8:	10c4b03a 	or	r2,r2,r3
    a5cc:	1806d07a 	srli	r3,r3,1
    a5d0:	280ad07a 	srli	r5,r5,1
    a5d4:	183ffa1e 	bne	r3,zero,a5c0 <__udivsi3+0x38>
    a5d8:	f800283a 	ret
    a5dc:	0005883a 	mov	r2,zero
    a5e0:	f800283a 	ret
    a5e4:	00c00044 	movi	r3,1
    a5e8:	003ff406 	br	a5bc <__udivsi3+0x34>

0000a5ec <__umodsi3>:
    a5ec:	2005883a 	mov	r2,r4
    a5f0:	2900122e 	bgeu	r5,r4,a63c <__umodsi3+0x50>
    a5f4:	28001116 	blt	r5,zero,a63c <__umodsi3+0x50>
    a5f8:	01800804 	movi	r6,32
    a5fc:	00c00044 	movi	r3,1
    a600:	00000206 	br	a60c <__umodsi3+0x20>
    a604:	30000c26 	beq	r6,zero,a638 <__umodsi3+0x4c>
    a608:	28000516 	blt	r5,zero,a620 <__umodsi3+0x34>
    a60c:	294b883a 	add	r5,r5,r5
    a610:	31bfffc4 	addi	r6,r6,-1
    a614:	18c7883a 	add	r3,r3,r3
    a618:	293ffa36 	bltu	r5,r4,a604 <__umodsi3+0x18>
    a61c:	18000626 	beq	r3,zero,a638 <__umodsi3+0x4c>
    a620:	1806d07a 	srli	r3,r3,1
    a624:	11400136 	bltu	r2,r5,a62c <__umodsi3+0x40>
    a628:	1145c83a 	sub	r2,r2,r5
    a62c:	280ad07a 	srli	r5,r5,1
    a630:	183ffb1e 	bne	r3,zero,a620 <__umodsi3+0x34>
    a634:	f800283a 	ret
    a638:	f800283a 	ret
    a63c:	00c00044 	movi	r3,1
    a640:	003ff706 	br	a620 <__umodsi3+0x34>

0000a644 <__adddf3>:
    a644:	02c00434 	movhi	r11,16
    a648:	5affffc4 	addi	r11,r11,-1
    a64c:	2806d7fa 	srli	r3,r5,31
    a650:	2ad4703a 	and	r10,r5,r11
    a654:	3ad2703a 	and	r9,r7,r11
    a658:	3804d53a 	srli	r2,r7,20
    a65c:	3018d77a 	srli	r12,r6,29
    a660:	280ad53a 	srli	r5,r5,20
    a664:	501490fa 	slli	r10,r10,3
    a668:	2010d77a 	srli	r8,r4,29
    a66c:	481290fa 	slli	r9,r9,3
    a670:	380ed7fa 	srli	r7,r7,31
    a674:	defffb04 	addi	sp,sp,-20
    a678:	dc800215 	stw	r18,8(sp)
    a67c:	dc400115 	stw	r17,4(sp)
    a680:	dc000015 	stw	r16,0(sp)
    a684:	dfc00415 	stw	ra,16(sp)
    a688:	dcc00315 	stw	r19,12(sp)
    a68c:	1c803fcc 	andi	r18,r3,255
    a690:	2c01ffcc 	andi	r16,r5,2047
    a694:	5210b03a 	or	r8,r10,r8
    a698:	202290fa 	slli	r17,r4,3
    a69c:	1081ffcc 	andi	r2,r2,2047
    a6a0:	4b12b03a 	or	r9,r9,r12
    a6a4:	300c90fa 	slli	r6,r6,3
    a6a8:	91c07526 	beq	r18,r7,a880 <__adddf3+0x23c>
    a6ac:	8087c83a 	sub	r3,r16,r2
    a6b0:	00c0ab0e 	bge	zero,r3,a960 <__adddf3+0x31c>
    a6b4:	10002a1e 	bne	r2,zero,a760 <__adddf3+0x11c>
    a6b8:	4984b03a 	or	r2,r9,r6
    a6bc:	1000961e 	bne	r2,zero,a918 <__adddf3+0x2d4>
    a6c0:	888001cc 	andi	r2,r17,7
    a6c4:	10000726 	beq	r2,zero,a6e4 <__adddf3+0xa0>
    a6c8:	888003cc 	andi	r2,r17,15
    a6cc:	00c00104 	movi	r3,4
    a6d0:	10c00426 	beq	r2,r3,a6e4 <__adddf3+0xa0>
    a6d4:	88c7883a 	add	r3,r17,r3
    a6d8:	1c63803a 	cmpltu	r17,r3,r17
    a6dc:	4451883a 	add	r8,r8,r17
    a6e0:	1823883a 	mov	r17,r3
    a6e4:	4080202c 	andhi	r2,r8,128
    a6e8:	10005926 	beq	r2,zero,a850 <__adddf3+0x20c>
    a6ec:	84000044 	addi	r16,r16,1
    a6f0:	0081ffc4 	movi	r2,2047
    a6f4:	8080ba26 	beq	r16,r2,a9e0 <__adddf3+0x39c>
    a6f8:	00bfe034 	movhi	r2,65408
    a6fc:	10bfffc4 	addi	r2,r2,-1
    a700:	4090703a 	and	r8,r8,r2
    a704:	4004977a 	slli	r2,r8,29
    a708:	4010927a 	slli	r8,r8,9
    a70c:	8822d0fa 	srli	r17,r17,3
    a710:	8401ffcc 	andi	r16,r16,2047
    a714:	4010d33a 	srli	r8,r8,12
    a718:	9007883a 	mov	r3,r18
    a71c:	1444b03a 	or	r2,r2,r17
    a720:	8401ffcc 	andi	r16,r16,2047
    a724:	8020953a 	slli	r16,r16,20
    a728:	18c03fcc 	andi	r3,r3,255
    a72c:	01000434 	movhi	r4,16
    a730:	213fffc4 	addi	r4,r4,-1
    a734:	180697fa 	slli	r3,r3,31
    a738:	4110703a 	and	r8,r8,r4
    a73c:	4410b03a 	or	r8,r8,r16
    a740:	40c6b03a 	or	r3,r8,r3
    a744:	dfc00417 	ldw	ra,16(sp)
    a748:	dcc00317 	ldw	r19,12(sp)
    a74c:	dc800217 	ldw	r18,8(sp)
    a750:	dc400117 	ldw	r17,4(sp)
    a754:	dc000017 	ldw	r16,0(sp)
    a758:	dec00504 	addi	sp,sp,20
    a75c:	f800283a 	ret
    a760:	0081ffc4 	movi	r2,2047
    a764:	80bfd626 	beq	r16,r2,a6c0 <__adddf3+0x7c>
    a768:	4a402034 	orhi	r9,r9,128
    a76c:	00800e04 	movi	r2,56
    a770:	10c09f16 	blt	r2,r3,a9f0 <__adddf3+0x3ac>
    a774:	008007c4 	movi	r2,31
    a778:	10c0c216 	blt	r2,r3,aa84 <__adddf3+0x440>
    a77c:	00800804 	movi	r2,32
    a780:	10c5c83a 	sub	r2,r2,r3
    a784:	488a983a 	sll	r5,r9,r2
    a788:	30c8d83a 	srl	r4,r6,r3
    a78c:	3084983a 	sll	r2,r6,r2
    a790:	48c6d83a 	srl	r3,r9,r3
    a794:	290cb03a 	or	r6,r5,r4
    a798:	1004c03a 	cmpne	r2,r2,zero
    a79c:	308cb03a 	or	r6,r6,r2
    a7a0:	898dc83a 	sub	r6,r17,r6
    a7a4:	89a3803a 	cmpltu	r17,r17,r6
    a7a8:	40d1c83a 	sub	r8,r8,r3
    a7ac:	4451c83a 	sub	r8,r8,r17
    a7b0:	3023883a 	mov	r17,r6
    a7b4:	4080202c 	andhi	r2,r8,128
    a7b8:	10002326 	beq	r2,zero,a848 <__adddf3+0x204>
    a7bc:	04c02034 	movhi	r19,128
    a7c0:	9cffffc4 	addi	r19,r19,-1
    a7c4:	44e6703a 	and	r19,r8,r19
    a7c8:	98007626 	beq	r19,zero,a9a4 <__adddf3+0x360>
    a7cc:	9809883a 	mov	r4,r19
    a7d0:	000cc480 	call	cc48 <__clzsi2>
    a7d4:	10fffe04 	addi	r3,r2,-8
    a7d8:	010007c4 	movi	r4,31
    a7dc:	20c07716 	blt	r4,r3,a9bc <__adddf3+0x378>
    a7e0:	00800804 	movi	r2,32
    a7e4:	10c5c83a 	sub	r2,r2,r3
    a7e8:	8884d83a 	srl	r2,r17,r2
    a7ec:	98d0983a 	sll	r8,r19,r3
    a7f0:	88e2983a 	sll	r17,r17,r3
    a7f4:	1204b03a 	or	r2,r2,r8
    a7f8:	1c007416 	blt	r3,r16,a9cc <__adddf3+0x388>
    a7fc:	1c21c83a 	sub	r16,r3,r16
    a800:	82000044 	addi	r8,r16,1
    a804:	00c007c4 	movi	r3,31
    a808:	1a009116 	blt	r3,r8,aa50 <__adddf3+0x40c>
    a80c:	00c00804 	movi	r3,32
    a810:	1a07c83a 	sub	r3,r3,r8
    a814:	8a08d83a 	srl	r4,r17,r8
    a818:	88e2983a 	sll	r17,r17,r3
    a81c:	10c6983a 	sll	r3,r2,r3
    a820:	1210d83a 	srl	r8,r2,r8
    a824:	8804c03a 	cmpne	r2,r17,zero
    a828:	1906b03a 	or	r3,r3,r4
    a82c:	18a2b03a 	or	r17,r3,r2
    a830:	0021883a 	mov	r16,zero
    a834:	003fa206 	br	a6c0 <__adddf3+0x7c>
    a838:	1890b03a 	or	r8,r3,r2
    a83c:	40017d26 	beq	r8,zero,ae34 <__adddf3+0x7f0>
    a840:	1011883a 	mov	r8,r2
    a844:	1823883a 	mov	r17,r3
    a848:	888001cc 	andi	r2,r17,7
    a84c:	103f9e1e 	bne	r2,zero,a6c8 <__adddf3+0x84>
    a850:	4004977a 	slli	r2,r8,29
    a854:	8822d0fa 	srli	r17,r17,3
    a858:	4010d0fa 	srli	r8,r8,3
    a85c:	9007883a 	mov	r3,r18
    a860:	1444b03a 	or	r2,r2,r17
    a864:	0101ffc4 	movi	r4,2047
    a868:	81002426 	beq	r16,r4,a8fc <__adddf3+0x2b8>
    a86c:	8120703a 	and	r16,r16,r4
    a870:	01000434 	movhi	r4,16
    a874:	213fffc4 	addi	r4,r4,-1
    a878:	4110703a 	and	r8,r8,r4
    a87c:	003fa806 	br	a720 <__adddf3+0xdc>
    a880:	8089c83a 	sub	r4,r16,r2
    a884:	01005e0e 	bge	zero,r4,aa00 <__adddf3+0x3bc>
    a888:	10002b26 	beq	r2,zero,a938 <__adddf3+0x2f4>
    a88c:	0081ffc4 	movi	r2,2047
    a890:	80bf8b26 	beq	r16,r2,a6c0 <__adddf3+0x7c>
    a894:	4a402034 	orhi	r9,r9,128
    a898:	00800e04 	movi	r2,56
    a89c:	1100a40e 	bge	r2,r4,ab30 <__adddf3+0x4ec>
    a8a0:	498cb03a 	or	r6,r9,r6
    a8a4:	300ac03a 	cmpne	r5,r6,zero
    a8a8:	0013883a 	mov	r9,zero
    a8ac:	2c4b883a 	add	r5,r5,r17
    a8b0:	2c63803a 	cmpltu	r17,r5,r17
    a8b4:	4a11883a 	add	r8,r9,r8
    a8b8:	8a11883a 	add	r8,r17,r8
    a8bc:	2823883a 	mov	r17,r5
    a8c0:	4080202c 	andhi	r2,r8,128
    a8c4:	103fe026 	beq	r2,zero,a848 <__adddf3+0x204>
    a8c8:	84000044 	addi	r16,r16,1
    a8cc:	0081ffc4 	movi	r2,2047
    a8d0:	8080d226 	beq	r16,r2,ac1c <__adddf3+0x5d8>
    a8d4:	00bfe034 	movhi	r2,65408
    a8d8:	10bfffc4 	addi	r2,r2,-1
    a8dc:	4090703a 	and	r8,r8,r2
    a8e0:	880ad07a 	srli	r5,r17,1
    a8e4:	400897fa 	slli	r4,r8,31
    a8e8:	88c0004c 	andi	r3,r17,1
    a8ec:	28e2b03a 	or	r17,r5,r3
    a8f0:	4010d07a 	srli	r8,r8,1
    a8f4:	2462b03a 	or	r17,r4,r17
    a8f8:	003f7106 	br	a6c0 <__adddf3+0x7c>
    a8fc:	4088b03a 	or	r4,r8,r2
    a900:	20014526 	beq	r4,zero,ae18 <__adddf3+0x7d4>
    a904:	01000434 	movhi	r4,16
    a908:	42000234 	orhi	r8,r8,8
    a90c:	213fffc4 	addi	r4,r4,-1
    a910:	4110703a 	and	r8,r8,r4
    a914:	003f8206 	br	a720 <__adddf3+0xdc>
    a918:	18ffffc4 	addi	r3,r3,-1
    a91c:	1800491e 	bne	r3,zero,aa44 <__adddf3+0x400>
    a920:	898bc83a 	sub	r5,r17,r6
    a924:	8963803a 	cmpltu	r17,r17,r5
    a928:	4251c83a 	sub	r8,r8,r9
    a92c:	4451c83a 	sub	r8,r8,r17
    a930:	2823883a 	mov	r17,r5
    a934:	003f9f06 	br	a7b4 <__adddf3+0x170>
    a938:	4984b03a 	or	r2,r9,r6
    a93c:	103f6026 	beq	r2,zero,a6c0 <__adddf3+0x7c>
    a940:	213fffc4 	addi	r4,r4,-1
    a944:	2000931e 	bne	r4,zero,ab94 <__adddf3+0x550>
    a948:	898d883a 	add	r6,r17,r6
    a94c:	3463803a 	cmpltu	r17,r6,r17
    a950:	4251883a 	add	r8,r8,r9
    a954:	8a11883a 	add	r8,r17,r8
    a958:	3023883a 	mov	r17,r6
    a95c:	003fd806 	br	a8c0 <__adddf3+0x27c>
    a960:	1800541e 	bne	r3,zero,aab4 <__adddf3+0x470>
    a964:	80800044 	addi	r2,r16,1
    a968:	1081ffcc 	andi	r2,r2,2047
    a96c:	00c00044 	movi	r3,1
    a970:	1880a00e 	bge	r3,r2,abf4 <__adddf3+0x5b0>
    a974:	8989c83a 	sub	r4,r17,r6
    a978:	8905803a 	cmpltu	r2,r17,r4
    a97c:	4267c83a 	sub	r19,r8,r9
    a980:	98a7c83a 	sub	r19,r19,r2
    a984:	9880202c 	andhi	r2,r19,128
    a988:	10006326 	beq	r2,zero,ab18 <__adddf3+0x4d4>
    a98c:	3463c83a 	sub	r17,r6,r17
    a990:	4a07c83a 	sub	r3,r9,r8
    a994:	344d803a 	cmpltu	r6,r6,r17
    a998:	19a7c83a 	sub	r19,r3,r6
    a99c:	3825883a 	mov	r18,r7
    a9a0:	983f8a1e 	bne	r19,zero,a7cc <__adddf3+0x188>
    a9a4:	8809883a 	mov	r4,r17
    a9a8:	000cc480 	call	cc48 <__clzsi2>
    a9ac:	10800804 	addi	r2,r2,32
    a9b0:	10fffe04 	addi	r3,r2,-8
    a9b4:	010007c4 	movi	r4,31
    a9b8:	20ff890e 	bge	r4,r3,a7e0 <__adddf3+0x19c>
    a9bc:	10bff604 	addi	r2,r2,-40
    a9c0:	8884983a 	sll	r2,r17,r2
    a9c4:	0023883a 	mov	r17,zero
    a9c8:	1c3f8c0e 	bge	r3,r16,a7fc <__adddf3+0x1b8>
    a9cc:	023fe034 	movhi	r8,65408
    a9d0:	423fffc4 	addi	r8,r8,-1
    a9d4:	80e1c83a 	sub	r16,r16,r3
    a9d8:	1210703a 	and	r8,r2,r8
    a9dc:	003f3806 	br	a6c0 <__adddf3+0x7c>
    a9e0:	9007883a 	mov	r3,r18
    a9e4:	0011883a 	mov	r8,zero
    a9e8:	0005883a 	mov	r2,zero
    a9ec:	003f4c06 	br	a720 <__adddf3+0xdc>
    a9f0:	498cb03a 	or	r6,r9,r6
    a9f4:	300cc03a 	cmpne	r6,r6,zero
    a9f8:	0007883a 	mov	r3,zero
    a9fc:	003f6806 	br	a7a0 <__adddf3+0x15c>
    aa00:	20009c1e 	bne	r4,zero,ac74 <__adddf3+0x630>
    aa04:	80800044 	addi	r2,r16,1
    aa08:	1141ffcc 	andi	r5,r2,2047
    aa0c:	01000044 	movi	r4,1
    aa10:	2140670e 	bge	r4,r5,abb0 <__adddf3+0x56c>
    aa14:	0101ffc4 	movi	r4,2047
    aa18:	11007f26 	beq	r2,r4,ac18 <__adddf3+0x5d4>
    aa1c:	898d883a 	add	r6,r17,r6
    aa20:	4247883a 	add	r3,r8,r9
    aa24:	3451803a 	cmpltu	r8,r6,r17
    aa28:	40d1883a 	add	r8,r8,r3
    aa2c:	402297fa 	slli	r17,r8,31
    aa30:	300cd07a 	srli	r6,r6,1
    aa34:	4010d07a 	srli	r8,r8,1
    aa38:	1021883a 	mov	r16,r2
    aa3c:	89a2b03a 	or	r17,r17,r6
    aa40:	003f1f06 	br	a6c0 <__adddf3+0x7c>
    aa44:	0081ffc4 	movi	r2,2047
    aa48:	80bf481e 	bne	r16,r2,a76c <__adddf3+0x128>
    aa4c:	003f1c06 	br	a6c0 <__adddf3+0x7c>
    aa50:	843ff844 	addi	r16,r16,-31
    aa54:	01000804 	movi	r4,32
    aa58:	1406d83a 	srl	r3,r2,r16
    aa5c:	41005026 	beq	r8,r4,aba0 <__adddf3+0x55c>
    aa60:	01001004 	movi	r4,64
    aa64:	2211c83a 	sub	r8,r4,r8
    aa68:	1204983a 	sll	r2,r2,r8
    aa6c:	88a2b03a 	or	r17,r17,r2
    aa70:	8822c03a 	cmpne	r17,r17,zero
    aa74:	1c62b03a 	or	r17,r3,r17
    aa78:	0011883a 	mov	r8,zero
    aa7c:	0021883a 	mov	r16,zero
    aa80:	003f7106 	br	a848 <__adddf3+0x204>
    aa84:	193ff804 	addi	r4,r3,-32
    aa88:	00800804 	movi	r2,32
    aa8c:	4908d83a 	srl	r4,r9,r4
    aa90:	18804526 	beq	r3,r2,aba8 <__adddf3+0x564>
    aa94:	00801004 	movi	r2,64
    aa98:	10c5c83a 	sub	r2,r2,r3
    aa9c:	4886983a 	sll	r3,r9,r2
    aaa0:	198cb03a 	or	r6,r3,r6
    aaa4:	300cc03a 	cmpne	r6,r6,zero
    aaa8:	218cb03a 	or	r6,r4,r6
    aaac:	0007883a 	mov	r3,zero
    aab0:	003f3b06 	br	a7a0 <__adddf3+0x15c>
    aab4:	80002a26 	beq	r16,zero,ab60 <__adddf3+0x51c>
    aab8:	0101ffc4 	movi	r4,2047
    aabc:	11006826 	beq	r2,r4,ac60 <__adddf3+0x61c>
    aac0:	00c7c83a 	sub	r3,zero,r3
    aac4:	42002034 	orhi	r8,r8,128
    aac8:	01000e04 	movi	r4,56
    aacc:	20c07c16 	blt	r4,r3,acc0 <__adddf3+0x67c>
    aad0:	010007c4 	movi	r4,31
    aad4:	20c0da16 	blt	r4,r3,ae40 <__adddf3+0x7fc>
    aad8:	01000804 	movi	r4,32
    aadc:	20c9c83a 	sub	r4,r4,r3
    aae0:	4114983a 	sll	r10,r8,r4
    aae4:	88cad83a 	srl	r5,r17,r3
    aae8:	8908983a 	sll	r4,r17,r4
    aaec:	40c6d83a 	srl	r3,r8,r3
    aaf0:	5162b03a 	or	r17,r10,r5
    aaf4:	2008c03a 	cmpne	r4,r4,zero
    aaf8:	8922b03a 	or	r17,r17,r4
    aafc:	3463c83a 	sub	r17,r6,r17
    ab00:	48c7c83a 	sub	r3,r9,r3
    ab04:	344d803a 	cmpltu	r6,r6,r17
    ab08:	1991c83a 	sub	r8,r3,r6
    ab0c:	1021883a 	mov	r16,r2
    ab10:	3825883a 	mov	r18,r7
    ab14:	003f2706 	br	a7b4 <__adddf3+0x170>
    ab18:	24d0b03a 	or	r8,r4,r19
    ab1c:	40001b1e 	bne	r8,zero,ab8c <__adddf3+0x548>
    ab20:	0005883a 	mov	r2,zero
    ab24:	0007883a 	mov	r3,zero
    ab28:	0021883a 	mov	r16,zero
    ab2c:	003f4d06 	br	a864 <__adddf3+0x220>
    ab30:	008007c4 	movi	r2,31
    ab34:	11003c16 	blt	r2,r4,ac28 <__adddf3+0x5e4>
    ab38:	00800804 	movi	r2,32
    ab3c:	1105c83a 	sub	r2,r2,r4
    ab40:	488e983a 	sll	r7,r9,r2
    ab44:	310ad83a 	srl	r5,r6,r4
    ab48:	3084983a 	sll	r2,r6,r2
    ab4c:	4912d83a 	srl	r9,r9,r4
    ab50:	394ab03a 	or	r5,r7,r5
    ab54:	1004c03a 	cmpne	r2,r2,zero
    ab58:	288ab03a 	or	r5,r5,r2
    ab5c:	003f5306 	br	a8ac <__adddf3+0x268>
    ab60:	4448b03a 	or	r4,r8,r17
    ab64:	20003e26 	beq	r4,zero,ac60 <__adddf3+0x61c>
    ab68:	00c6303a 	nor	r3,zero,r3
    ab6c:	18003a1e 	bne	r3,zero,ac58 <__adddf3+0x614>
    ab70:	3463c83a 	sub	r17,r6,r17
    ab74:	4a07c83a 	sub	r3,r9,r8
    ab78:	344d803a 	cmpltu	r6,r6,r17
    ab7c:	1991c83a 	sub	r8,r3,r6
    ab80:	1021883a 	mov	r16,r2
    ab84:	3825883a 	mov	r18,r7
    ab88:	003f0a06 	br	a7b4 <__adddf3+0x170>
    ab8c:	2023883a 	mov	r17,r4
    ab90:	003f0d06 	br	a7c8 <__adddf3+0x184>
    ab94:	0081ffc4 	movi	r2,2047
    ab98:	80bf3f1e 	bne	r16,r2,a898 <__adddf3+0x254>
    ab9c:	003ec806 	br	a6c0 <__adddf3+0x7c>
    aba0:	0005883a 	mov	r2,zero
    aba4:	003fb106 	br	aa6c <__adddf3+0x428>
    aba8:	0007883a 	mov	r3,zero
    abac:	003fbc06 	br	aaa0 <__adddf3+0x45c>
    abb0:	4444b03a 	or	r2,r8,r17
    abb4:	8000871e 	bne	r16,zero,add4 <__adddf3+0x790>
    abb8:	1000ba26 	beq	r2,zero,aea4 <__adddf3+0x860>
    abbc:	4984b03a 	or	r2,r9,r6
    abc0:	103ebf26 	beq	r2,zero,a6c0 <__adddf3+0x7c>
    abc4:	8985883a 	add	r2,r17,r6
    abc8:	4247883a 	add	r3,r8,r9
    abcc:	1451803a 	cmpltu	r8,r2,r17
    abd0:	40d1883a 	add	r8,r8,r3
    abd4:	40c0202c 	andhi	r3,r8,128
    abd8:	1023883a 	mov	r17,r2
    abdc:	183f1a26 	beq	r3,zero,a848 <__adddf3+0x204>
    abe0:	00bfe034 	movhi	r2,65408
    abe4:	10bfffc4 	addi	r2,r2,-1
    abe8:	2021883a 	mov	r16,r4
    abec:	4090703a 	and	r8,r8,r2
    abf0:	003eb306 	br	a6c0 <__adddf3+0x7c>
    abf4:	4444b03a 	or	r2,r8,r17
    abf8:	8000291e 	bne	r16,zero,aca0 <__adddf3+0x65c>
    abfc:	10004b1e 	bne	r2,zero,ad2c <__adddf3+0x6e8>
    ac00:	4990b03a 	or	r8,r9,r6
    ac04:	40008b26 	beq	r8,zero,ae34 <__adddf3+0x7f0>
    ac08:	4811883a 	mov	r8,r9
    ac0c:	3023883a 	mov	r17,r6
    ac10:	3825883a 	mov	r18,r7
    ac14:	003eaa06 	br	a6c0 <__adddf3+0x7c>
    ac18:	1021883a 	mov	r16,r2
    ac1c:	0011883a 	mov	r8,zero
    ac20:	0005883a 	mov	r2,zero
    ac24:	003f0f06 	br	a864 <__adddf3+0x220>
    ac28:	217ff804 	addi	r5,r4,-32
    ac2c:	00800804 	movi	r2,32
    ac30:	494ad83a 	srl	r5,r9,r5
    ac34:	20807d26 	beq	r4,r2,ae2c <__adddf3+0x7e8>
    ac38:	00801004 	movi	r2,64
    ac3c:	1109c83a 	sub	r4,r2,r4
    ac40:	4912983a 	sll	r9,r9,r4
    ac44:	498cb03a 	or	r6,r9,r6
    ac48:	300cc03a 	cmpne	r6,r6,zero
    ac4c:	298ab03a 	or	r5,r5,r6
    ac50:	0013883a 	mov	r9,zero
    ac54:	003f1506 	br	a8ac <__adddf3+0x268>
    ac58:	0101ffc4 	movi	r4,2047
    ac5c:	113f9a1e 	bne	r2,r4,aac8 <__adddf3+0x484>
    ac60:	4811883a 	mov	r8,r9
    ac64:	3023883a 	mov	r17,r6
    ac68:	1021883a 	mov	r16,r2
    ac6c:	3825883a 	mov	r18,r7
    ac70:	003e9306 	br	a6c0 <__adddf3+0x7c>
    ac74:	8000161e 	bne	r16,zero,acd0 <__adddf3+0x68c>
    ac78:	444ab03a 	or	r5,r8,r17
    ac7c:	28005126 	beq	r5,zero,adc4 <__adddf3+0x780>
    ac80:	0108303a 	nor	r4,zero,r4
    ac84:	20004d1e 	bne	r4,zero,adbc <__adddf3+0x778>
    ac88:	89a3883a 	add	r17,r17,r6
    ac8c:	4253883a 	add	r9,r8,r9
    ac90:	898d803a 	cmpltu	r6,r17,r6
    ac94:	3251883a 	add	r8,r6,r9
    ac98:	1021883a 	mov	r16,r2
    ac9c:	003f0806 	br	a8c0 <__adddf3+0x27c>
    aca0:	1000301e 	bne	r2,zero,ad64 <__adddf3+0x720>
    aca4:	4984b03a 	or	r2,r9,r6
    aca8:	10007126 	beq	r2,zero,ae70 <__adddf3+0x82c>
    acac:	4811883a 	mov	r8,r9
    acb0:	3023883a 	mov	r17,r6
    acb4:	3825883a 	mov	r18,r7
    acb8:	0401ffc4 	movi	r16,2047
    acbc:	003e8006 	br	a6c0 <__adddf3+0x7c>
    acc0:	4462b03a 	or	r17,r8,r17
    acc4:	8822c03a 	cmpne	r17,r17,zero
    acc8:	0007883a 	mov	r3,zero
    accc:	003f8b06 	br	aafc <__adddf3+0x4b8>
    acd0:	0141ffc4 	movi	r5,2047
    acd4:	11403b26 	beq	r2,r5,adc4 <__adddf3+0x780>
    acd8:	0109c83a 	sub	r4,zero,r4
    acdc:	42002034 	orhi	r8,r8,128
    ace0:	01400e04 	movi	r5,56
    ace4:	29006716 	blt	r5,r4,ae84 <__adddf3+0x840>
    ace8:	014007c4 	movi	r5,31
    acec:	29007016 	blt	r5,r4,aeb0 <__adddf3+0x86c>
    acf0:	01400804 	movi	r5,32
    acf4:	290bc83a 	sub	r5,r5,r4
    acf8:	4154983a 	sll	r10,r8,r5
    acfc:	890ed83a 	srl	r7,r17,r4
    ad00:	894a983a 	sll	r5,r17,r5
    ad04:	4108d83a 	srl	r4,r8,r4
    ad08:	51e2b03a 	or	r17,r10,r7
    ad0c:	280ac03a 	cmpne	r5,r5,zero
    ad10:	8962b03a 	or	r17,r17,r5
    ad14:	89a3883a 	add	r17,r17,r6
    ad18:	2253883a 	add	r9,r4,r9
    ad1c:	898d803a 	cmpltu	r6,r17,r6
    ad20:	3251883a 	add	r8,r6,r9
    ad24:	1021883a 	mov	r16,r2
    ad28:	003ee506 	br	a8c0 <__adddf3+0x27c>
    ad2c:	4984b03a 	or	r2,r9,r6
    ad30:	103e6326 	beq	r2,zero,a6c0 <__adddf3+0x7c>
    ad34:	8987c83a 	sub	r3,r17,r6
    ad38:	88c9803a 	cmpltu	r4,r17,r3
    ad3c:	4245c83a 	sub	r2,r8,r9
    ad40:	1105c83a 	sub	r2,r2,r4
    ad44:	1100202c 	andhi	r4,r2,128
    ad48:	203ebb26 	beq	r4,zero,a838 <__adddf3+0x1f4>
    ad4c:	3463c83a 	sub	r17,r6,r17
    ad50:	4a07c83a 	sub	r3,r9,r8
    ad54:	344d803a 	cmpltu	r6,r6,r17
    ad58:	1991c83a 	sub	r8,r3,r6
    ad5c:	3825883a 	mov	r18,r7
    ad60:	003e5706 	br	a6c0 <__adddf3+0x7c>
    ad64:	4984b03a 	or	r2,r9,r6
    ad68:	10002e26 	beq	r2,zero,ae24 <__adddf3+0x7e0>
    ad6c:	4004d0fa 	srli	r2,r8,3
    ad70:	8822d0fa 	srli	r17,r17,3
    ad74:	4010977a 	slli	r8,r8,29
    ad78:	10c0022c 	andhi	r3,r2,8
    ad7c:	4462b03a 	or	r17,r8,r17
    ad80:	18000826 	beq	r3,zero,ada4 <__adddf3+0x760>
    ad84:	4808d0fa 	srli	r4,r9,3
    ad88:	20c0022c 	andhi	r3,r4,8
    ad8c:	1800051e 	bne	r3,zero,ada4 <__adddf3+0x760>
    ad90:	300cd0fa 	srli	r6,r6,3
    ad94:	4806977a 	slli	r3,r9,29
    ad98:	2005883a 	mov	r2,r4
    ad9c:	3825883a 	mov	r18,r7
    ada0:	19a2b03a 	or	r17,r3,r6
    ada4:	8810d77a 	srli	r8,r17,29
    ada8:	100490fa 	slli	r2,r2,3
    adac:	882290fa 	slli	r17,r17,3
    adb0:	0401ffc4 	movi	r16,2047
    adb4:	4090b03a 	or	r8,r8,r2
    adb8:	003e4106 	br	a6c0 <__adddf3+0x7c>
    adbc:	0141ffc4 	movi	r5,2047
    adc0:	117fc71e 	bne	r2,r5,ace0 <__adddf3+0x69c>
    adc4:	4811883a 	mov	r8,r9
    adc8:	3023883a 	mov	r17,r6
    adcc:	1021883a 	mov	r16,r2
    add0:	003e3b06 	br	a6c0 <__adddf3+0x7c>
    add4:	10002f26 	beq	r2,zero,ae94 <__adddf3+0x850>
    add8:	4984b03a 	or	r2,r9,r6
    addc:	10001126 	beq	r2,zero,ae24 <__adddf3+0x7e0>
    ade0:	4004d0fa 	srli	r2,r8,3
    ade4:	8822d0fa 	srli	r17,r17,3
    ade8:	4010977a 	slli	r8,r8,29
    adec:	10c0022c 	andhi	r3,r2,8
    adf0:	4462b03a 	or	r17,r8,r17
    adf4:	183feb26 	beq	r3,zero,ada4 <__adddf3+0x760>
    adf8:	4808d0fa 	srli	r4,r9,3
    adfc:	20c0022c 	andhi	r3,r4,8
    ae00:	183fe81e 	bne	r3,zero,ada4 <__adddf3+0x760>
    ae04:	300cd0fa 	srli	r6,r6,3
    ae08:	4806977a 	slli	r3,r9,29
    ae0c:	2005883a 	mov	r2,r4
    ae10:	19a2b03a 	or	r17,r3,r6
    ae14:	003fe306 	br	ada4 <__adddf3+0x760>
    ae18:	0011883a 	mov	r8,zero
    ae1c:	0005883a 	mov	r2,zero
    ae20:	003e3f06 	br	a720 <__adddf3+0xdc>
    ae24:	0401ffc4 	movi	r16,2047
    ae28:	003e2506 	br	a6c0 <__adddf3+0x7c>
    ae2c:	0013883a 	mov	r9,zero
    ae30:	003f8406 	br	ac44 <__adddf3+0x600>
    ae34:	0005883a 	mov	r2,zero
    ae38:	0007883a 	mov	r3,zero
    ae3c:	003e8906 	br	a864 <__adddf3+0x220>
    ae40:	197ff804 	addi	r5,r3,-32
    ae44:	01000804 	movi	r4,32
    ae48:	414ad83a 	srl	r5,r8,r5
    ae4c:	19002426 	beq	r3,r4,aee0 <__adddf3+0x89c>
    ae50:	01001004 	movi	r4,64
    ae54:	20c7c83a 	sub	r3,r4,r3
    ae58:	40c6983a 	sll	r3,r8,r3
    ae5c:	1c46b03a 	or	r3,r3,r17
    ae60:	1806c03a 	cmpne	r3,r3,zero
    ae64:	28e2b03a 	or	r17,r5,r3
    ae68:	0007883a 	mov	r3,zero
    ae6c:	003f2306 	br	aafc <__adddf3+0x4b8>
    ae70:	0007883a 	mov	r3,zero
    ae74:	5811883a 	mov	r8,r11
    ae78:	00bfffc4 	movi	r2,-1
    ae7c:	0401ffc4 	movi	r16,2047
    ae80:	003e7806 	br	a864 <__adddf3+0x220>
    ae84:	4462b03a 	or	r17,r8,r17
    ae88:	8822c03a 	cmpne	r17,r17,zero
    ae8c:	0009883a 	mov	r4,zero
    ae90:	003fa006 	br	ad14 <__adddf3+0x6d0>
    ae94:	4811883a 	mov	r8,r9
    ae98:	3023883a 	mov	r17,r6
    ae9c:	0401ffc4 	movi	r16,2047
    aea0:	003e0706 	br	a6c0 <__adddf3+0x7c>
    aea4:	4811883a 	mov	r8,r9
    aea8:	3023883a 	mov	r17,r6
    aeac:	003e0406 	br	a6c0 <__adddf3+0x7c>
    aeb0:	21fff804 	addi	r7,r4,-32
    aeb4:	01400804 	movi	r5,32
    aeb8:	41ced83a 	srl	r7,r8,r7
    aebc:	21400a26 	beq	r4,r5,aee8 <__adddf3+0x8a4>
    aec0:	01401004 	movi	r5,64
    aec4:	2909c83a 	sub	r4,r5,r4
    aec8:	4108983a 	sll	r4,r8,r4
    aecc:	2448b03a 	or	r4,r4,r17
    aed0:	2008c03a 	cmpne	r4,r4,zero
    aed4:	3922b03a 	or	r17,r7,r4
    aed8:	0009883a 	mov	r4,zero
    aedc:	003f8d06 	br	ad14 <__adddf3+0x6d0>
    aee0:	0007883a 	mov	r3,zero
    aee4:	003fdd06 	br	ae5c <__adddf3+0x818>
    aee8:	0009883a 	mov	r4,zero
    aeec:	003ff706 	br	aecc <__adddf3+0x888>

0000aef0 <__divdf3>:
    aef0:	defff204 	addi	sp,sp,-56
    aef4:	dd400915 	stw	r21,36(sp)
    aef8:	282ad53a 	srli	r21,r5,20
    aefc:	dd000815 	stw	r20,32(sp)
    af00:	2828d7fa 	srli	r20,r5,31
    af04:	dc000415 	stw	r16,16(sp)
    af08:	04000434 	movhi	r16,16
    af0c:	df000c15 	stw	fp,48(sp)
    af10:	843fffc4 	addi	r16,r16,-1
    af14:	dfc00d15 	stw	ra,52(sp)
    af18:	ddc00b15 	stw	r23,44(sp)
    af1c:	dd800a15 	stw	r22,40(sp)
    af20:	dcc00715 	stw	r19,28(sp)
    af24:	dc800615 	stw	r18,24(sp)
    af28:	dc400515 	stw	r17,20(sp)
    af2c:	ad41ffcc 	andi	r21,r21,2047
    af30:	2c20703a 	and	r16,r5,r16
    af34:	a7003fcc 	andi	fp,r20,255
    af38:	a8006126 	beq	r21,zero,b0c0 <__divdf3+0x1d0>
    af3c:	0081ffc4 	movi	r2,2047
    af40:	2025883a 	mov	r18,r4
    af44:	a8803726 	beq	r21,r2,b024 <__divdf3+0x134>
    af48:	80c00434 	orhi	r3,r16,16
    af4c:	180690fa 	slli	r3,r3,3
    af50:	2020d77a 	srli	r16,r4,29
    af54:	202490fa 	slli	r18,r4,3
    af58:	ad7f0044 	addi	r21,r21,-1023
    af5c:	80e0b03a 	or	r16,r16,r3
    af60:	0027883a 	mov	r19,zero
    af64:	0013883a 	mov	r9,zero
    af68:	3808d53a 	srli	r4,r7,20
    af6c:	382cd7fa 	srli	r22,r7,31
    af70:	04400434 	movhi	r17,16
    af74:	8c7fffc4 	addi	r17,r17,-1
    af78:	2101ffcc 	andi	r4,r4,2047
    af7c:	3011883a 	mov	r8,r6
    af80:	3c62703a 	and	r17,r7,r17
    af84:	b5c03fcc 	andi	r23,r22,255
    af88:	20006c26 	beq	r4,zero,b13c <__divdf3+0x24c>
    af8c:	0081ffc4 	movi	r2,2047
    af90:	20806426 	beq	r4,r2,b124 <__divdf3+0x234>
    af94:	88c00434 	orhi	r3,r17,16
    af98:	180690fa 	slli	r3,r3,3
    af9c:	3022d77a 	srli	r17,r6,29
    afa0:	301090fa 	slli	r8,r6,3
    afa4:	213f0044 	addi	r4,r4,-1023
    afa8:	88e2b03a 	or	r17,r17,r3
    afac:	000d883a 	mov	r6,zero
    afb0:	a584f03a 	xor	r2,r20,r22
    afb4:	34cab03a 	or	r5,r6,r19
    afb8:	1007883a 	mov	r3,r2
    afbc:	14c03fcc 	andi	r19,r2,255
    afc0:	008003c4 	movi	r2,15
    afc4:	a92bc83a 	sub	r21,r21,r4
    afc8:	11409036 	bltu	r2,r5,b20c <__divdf3+0x31c>
    afcc:	280a90ba 	slli	r5,r5,2
    afd0:	00800074 	movhi	r2,1
    afd4:	10abf904 	addi	r2,r2,-20508
    afd8:	288b883a 	add	r5,r5,r2
    afdc:	28800017 	ldw	r2,0(r5)
    afe0:	1000683a 	jmp	r2
    afe4:	0000b20c 	andi	zero,zero,712
    afe8:	0000b05c 	xori	zero,zero,705
    afec:	0000b1fc 	xorhi	zero,zero,711
    aff0:	0000b050 	cmplti	zero,zero,705
    aff4:	0000b1fc 	xorhi	zero,zero,711
    aff8:	0000b1d0 	cmplti	zero,zero,711
    affc:	0000b1fc 	xorhi	zero,zero,711
    b000:	0000b050 	cmplti	zero,zero,705
    b004:	0000b05c 	xori	zero,zero,705
    b008:	0000b05c 	xori	zero,zero,705
    b00c:	0000b1d0 	cmplti	zero,zero,711
    b010:	0000b050 	cmplti	zero,zero,705
    b014:	0000b040 	call	b04 <___vfprintf_internal_r+0x638>
    b018:	0000b040 	call	b04 <___vfprintf_internal_r+0x638>
    b01c:	0000b040 	call	b04 <___vfprintf_internal_r+0x638>
    b020:	0000b4f0 	cmpltui	zero,zero,723
    b024:	2404b03a 	or	r2,r4,r16
    b028:	1000661e 	bne	r2,zero,b1c4 <__divdf3+0x2d4>
    b02c:	04c00204 	movi	r19,8
    b030:	0021883a 	mov	r16,zero
    b034:	0025883a 	mov	r18,zero
    b038:	02400084 	movi	r9,2
    b03c:	003fca06 	br	af68 <__divdf3+0x78>
    b040:	8023883a 	mov	r17,r16
    b044:	9011883a 	mov	r8,r18
    b048:	e02f883a 	mov	r23,fp
    b04c:	480d883a 	mov	r6,r9
    b050:	00800084 	movi	r2,2
    b054:	3081311e 	bne	r6,r2,b51c <__divdf3+0x62c>
    b058:	b827883a 	mov	r19,r23
    b05c:	98c0004c 	andi	r3,r19,1
    b060:	0081ffc4 	movi	r2,2047
    b064:	000b883a 	mov	r5,zero
    b068:	0025883a 	mov	r18,zero
    b06c:	1004953a 	slli	r2,r2,20
    b070:	18c03fcc 	andi	r3,r3,255
    b074:	04400434 	movhi	r17,16
    b078:	8c7fffc4 	addi	r17,r17,-1
    b07c:	180697fa 	slli	r3,r3,31
    b080:	2c4a703a 	and	r5,r5,r17
    b084:	288ab03a 	or	r5,r5,r2
    b088:	28c6b03a 	or	r3,r5,r3
    b08c:	9005883a 	mov	r2,r18
    b090:	dfc00d17 	ldw	ra,52(sp)
    b094:	df000c17 	ldw	fp,48(sp)
    b098:	ddc00b17 	ldw	r23,44(sp)
    b09c:	dd800a17 	ldw	r22,40(sp)
    b0a0:	dd400917 	ldw	r21,36(sp)
    b0a4:	dd000817 	ldw	r20,32(sp)
    b0a8:	dcc00717 	ldw	r19,28(sp)
    b0ac:	dc800617 	ldw	r18,24(sp)
    b0b0:	dc400517 	ldw	r17,20(sp)
    b0b4:	dc000417 	ldw	r16,16(sp)
    b0b8:	dec00e04 	addi	sp,sp,56
    b0bc:	f800283a 	ret
    b0c0:	2404b03a 	or	r2,r4,r16
    b0c4:	2027883a 	mov	r19,r4
    b0c8:	10003926 	beq	r2,zero,b1b0 <__divdf3+0x2c0>
    b0cc:	80012e26 	beq	r16,zero,b588 <__divdf3+0x698>
    b0d0:	8009883a 	mov	r4,r16
    b0d4:	d9800315 	stw	r6,12(sp)
    b0d8:	d9c00215 	stw	r7,8(sp)
    b0dc:	000cc480 	call	cc48 <__clzsi2>
    b0e0:	d9800317 	ldw	r6,12(sp)
    b0e4:	d9c00217 	ldw	r7,8(sp)
    b0e8:	10fffd44 	addi	r3,r2,-11
    b0ec:	01000704 	movi	r4,28
    b0f0:	20c12116 	blt	r4,r3,b578 <__divdf3+0x688>
    b0f4:	01000744 	movi	r4,29
    b0f8:	147ffe04 	addi	r17,r2,-8
    b0fc:	20c9c83a 	sub	r4,r4,r3
    b100:	8460983a 	sll	r16,r16,r17
    b104:	9908d83a 	srl	r4,r19,r4
    b108:	9c64983a 	sll	r18,r19,r17
    b10c:	2420b03a 	or	r16,r4,r16
    b110:	057f0084 	movi	r21,-1022
    b114:	a8ebc83a 	sub	r21,r21,r3
    b118:	0027883a 	mov	r19,zero
    b11c:	0013883a 	mov	r9,zero
    b120:	003f9106 	br	af68 <__divdf3+0x78>
    b124:	3444b03a 	or	r2,r6,r17
    b128:	10001f1e 	bne	r2,zero,b1a8 <__divdf3+0x2b8>
    b12c:	0023883a 	mov	r17,zero
    b130:	0011883a 	mov	r8,zero
    b134:	01800084 	movi	r6,2
    b138:	003f9d06 	br	afb0 <__divdf3+0xc0>
    b13c:	3444b03a 	or	r2,r6,r17
    b140:	10001526 	beq	r2,zero,b198 <__divdf3+0x2a8>
    b144:	88011b26 	beq	r17,zero,b5b4 <__divdf3+0x6c4>
    b148:	8809883a 	mov	r4,r17
    b14c:	d9800315 	stw	r6,12(sp)
    b150:	da400115 	stw	r9,4(sp)
    b154:	000cc480 	call	cc48 <__clzsi2>
    b158:	d9800317 	ldw	r6,12(sp)
    b15c:	da400117 	ldw	r9,4(sp)
    b160:	10fffd44 	addi	r3,r2,-11
    b164:	01000704 	movi	r4,28
    b168:	20c10e16 	blt	r4,r3,b5a4 <__divdf3+0x6b4>
    b16c:	01000744 	movi	r4,29
    b170:	123ffe04 	addi	r8,r2,-8
    b174:	20c9c83a 	sub	r4,r4,r3
    b178:	8a22983a 	sll	r17,r17,r8
    b17c:	3108d83a 	srl	r4,r6,r4
    b180:	3210983a 	sll	r8,r6,r8
    b184:	2462b03a 	or	r17,r4,r17
    b188:	013f0084 	movi	r4,-1022
    b18c:	20c9c83a 	sub	r4,r4,r3
    b190:	000d883a 	mov	r6,zero
    b194:	003f8606 	br	afb0 <__divdf3+0xc0>
    b198:	0023883a 	mov	r17,zero
    b19c:	0011883a 	mov	r8,zero
    b1a0:	01800044 	movi	r6,1
    b1a4:	003f8206 	br	afb0 <__divdf3+0xc0>
    b1a8:	018000c4 	movi	r6,3
    b1ac:	003f8006 	br	afb0 <__divdf3+0xc0>
    b1b0:	04c00104 	movi	r19,4
    b1b4:	0021883a 	mov	r16,zero
    b1b8:	0025883a 	mov	r18,zero
    b1bc:	02400044 	movi	r9,1
    b1c0:	003f6906 	br	af68 <__divdf3+0x78>
    b1c4:	04c00304 	movi	r19,12
    b1c8:	024000c4 	movi	r9,3
    b1cc:	003f6606 	br	af68 <__divdf3+0x78>
    b1d0:	01400434 	movhi	r5,16
    b1d4:	0007883a 	mov	r3,zero
    b1d8:	297fffc4 	addi	r5,r5,-1
    b1dc:	04bfffc4 	movi	r18,-1
    b1e0:	0081ffc4 	movi	r2,2047
    b1e4:	003fa106 	br	b06c <__divdf3+0x17c>
    b1e8:	00c00044 	movi	r3,1
    b1ec:	1887c83a 	sub	r3,r3,r2
    b1f0:	01000e04 	movi	r4,56
    b1f4:	20c1210e 	bge	r4,r3,b67c <__divdf3+0x78c>
    b1f8:	98c0004c 	andi	r3,r19,1
    b1fc:	0005883a 	mov	r2,zero
    b200:	000b883a 	mov	r5,zero
    b204:	0025883a 	mov	r18,zero
    b208:	003f9806 	br	b06c <__divdf3+0x17c>
    b20c:	8c00fd36 	bltu	r17,r16,b604 <__divdf3+0x714>
    b210:	8440fb26 	beq	r16,r17,b600 <__divdf3+0x710>
    b214:	8007883a 	mov	r3,r16
    b218:	ad7fffc4 	addi	r21,r21,-1
    b21c:	0021883a 	mov	r16,zero
    b220:	400ad63a 	srli	r5,r8,24
    b224:	8822923a 	slli	r17,r17,8
    b228:	1809883a 	mov	r4,r3
    b22c:	402c923a 	slli	r22,r8,8
    b230:	8978b03a 	or	fp,r17,r5
    b234:	e028d43a 	srli	r20,fp,16
    b238:	d8c00015 	stw	r3,0(sp)
    b23c:	e5ffffcc 	andi	r23,fp,65535
    b240:	a00b883a 	mov	r5,r20
    b244:	000a5880 	call	a588 <__udivsi3>
    b248:	d8c00017 	ldw	r3,0(sp)
    b24c:	a00b883a 	mov	r5,r20
    b250:	d8800315 	stw	r2,12(sp)
    b254:	1809883a 	mov	r4,r3
    b258:	000a5ec0 	call	a5ec <__umodsi3>
    b25c:	d9800317 	ldw	r6,12(sp)
    b260:	1006943a 	slli	r3,r2,16
    b264:	9004d43a 	srli	r2,r18,16
    b268:	b9a3383a 	mul	r17,r23,r6
    b26c:	10c4b03a 	or	r2,r2,r3
    b270:	1440062e 	bgeu	r2,r17,b28c <__divdf3+0x39c>
    b274:	1705883a 	add	r2,r2,fp
    b278:	30ffffc4 	addi	r3,r6,-1
    b27c:	1700ee36 	bltu	r2,fp,b638 <__divdf3+0x748>
    b280:	1440ed2e 	bgeu	r2,r17,b638 <__divdf3+0x748>
    b284:	31bfff84 	addi	r6,r6,-2
    b288:	1705883a 	add	r2,r2,fp
    b28c:	1463c83a 	sub	r17,r2,r17
    b290:	a00b883a 	mov	r5,r20
    b294:	8809883a 	mov	r4,r17
    b298:	d9800315 	stw	r6,12(sp)
    b29c:	000a5880 	call	a588 <__udivsi3>
    b2a0:	a00b883a 	mov	r5,r20
    b2a4:	8809883a 	mov	r4,r17
    b2a8:	d8800215 	stw	r2,8(sp)
    b2ac:	000a5ec0 	call	a5ec <__umodsi3>
    b2b0:	d9c00217 	ldw	r7,8(sp)
    b2b4:	1004943a 	slli	r2,r2,16
    b2b8:	94bfffcc 	andi	r18,r18,65535
    b2bc:	b9d1383a 	mul	r8,r23,r7
    b2c0:	90a4b03a 	or	r18,r18,r2
    b2c4:	d9800317 	ldw	r6,12(sp)
    b2c8:	9200062e 	bgeu	r18,r8,b2e4 <__divdf3+0x3f4>
    b2cc:	9725883a 	add	r18,r18,fp
    b2d0:	38bfffc4 	addi	r2,r7,-1
    b2d4:	9700d636 	bltu	r18,fp,b630 <__divdf3+0x740>
    b2d8:	9200d52e 	bgeu	r18,r8,b630 <__divdf3+0x740>
    b2dc:	39ffff84 	addi	r7,r7,-2
    b2e0:	9725883a 	add	r18,r18,fp
    b2e4:	3004943a 	slli	r2,r6,16
    b2e8:	b012d43a 	srli	r9,r22,16
    b2ec:	b1bfffcc 	andi	r6,r22,65535
    b2f0:	11e2b03a 	or	r17,r2,r7
    b2f4:	8806d43a 	srli	r3,r17,16
    b2f8:	893fffcc 	andi	r4,r17,65535
    b2fc:	218b383a 	mul	r5,r4,r6
    b300:	30c5383a 	mul	r2,r6,r3
    b304:	2249383a 	mul	r4,r4,r9
    b308:	280ed43a 	srli	r7,r5,16
    b30c:	9225c83a 	sub	r18,r18,r8
    b310:	2089883a 	add	r4,r4,r2
    b314:	3909883a 	add	r4,r7,r4
    b318:	1a47383a 	mul	r3,r3,r9
    b31c:	2080022e 	bgeu	r4,r2,b328 <__divdf3+0x438>
    b320:	00800074 	movhi	r2,1
    b324:	1887883a 	add	r3,r3,r2
    b328:	2004d43a 	srli	r2,r4,16
    b32c:	2008943a 	slli	r4,r4,16
    b330:	297fffcc 	andi	r5,r5,65535
    b334:	10c7883a 	add	r3,r2,r3
    b338:	2149883a 	add	r4,r4,r5
    b33c:	90c0a536 	bltu	r18,r3,b5d4 <__divdf3+0x6e4>
    b340:	90c0bf26 	beq	r18,r3,b640 <__divdf3+0x750>
    b344:	90c7c83a 	sub	r3,r18,r3
    b348:	810fc83a 	sub	r7,r16,r4
    b34c:	81e5803a 	cmpltu	r18,r16,r7
    b350:	1ca5c83a 	sub	r18,r3,r18
    b354:	e480c126 	beq	fp,r18,b65c <__divdf3+0x76c>
    b358:	a00b883a 	mov	r5,r20
    b35c:	9009883a 	mov	r4,r18
    b360:	d9800315 	stw	r6,12(sp)
    b364:	d9c00215 	stw	r7,8(sp)
    b368:	da400115 	stw	r9,4(sp)
    b36c:	000a5880 	call	a588 <__udivsi3>
    b370:	a00b883a 	mov	r5,r20
    b374:	9009883a 	mov	r4,r18
    b378:	d8800015 	stw	r2,0(sp)
    b37c:	000a5ec0 	call	a5ec <__umodsi3>
    b380:	d9c00217 	ldw	r7,8(sp)
    b384:	da000017 	ldw	r8,0(sp)
    b388:	1006943a 	slli	r3,r2,16
    b38c:	3804d43a 	srli	r2,r7,16
    b390:	ba21383a 	mul	r16,r23,r8
    b394:	d9800317 	ldw	r6,12(sp)
    b398:	10c4b03a 	or	r2,r2,r3
    b39c:	da400117 	ldw	r9,4(sp)
    b3a0:	1400062e 	bgeu	r2,r16,b3bc <__divdf3+0x4cc>
    b3a4:	1705883a 	add	r2,r2,fp
    b3a8:	40ffffc4 	addi	r3,r8,-1
    b3ac:	1700ad36 	bltu	r2,fp,b664 <__divdf3+0x774>
    b3b0:	1400ac2e 	bgeu	r2,r16,b664 <__divdf3+0x774>
    b3b4:	423fff84 	addi	r8,r8,-2
    b3b8:	1705883a 	add	r2,r2,fp
    b3bc:	1421c83a 	sub	r16,r2,r16
    b3c0:	a00b883a 	mov	r5,r20
    b3c4:	8009883a 	mov	r4,r16
    b3c8:	d9800315 	stw	r6,12(sp)
    b3cc:	d9c00215 	stw	r7,8(sp)
    b3d0:	da000015 	stw	r8,0(sp)
    b3d4:	da400115 	stw	r9,4(sp)
    b3d8:	000a5880 	call	a588 <__udivsi3>
    b3dc:	8009883a 	mov	r4,r16
    b3e0:	a00b883a 	mov	r5,r20
    b3e4:	1025883a 	mov	r18,r2
    b3e8:	000a5ec0 	call	a5ec <__umodsi3>
    b3ec:	d9c00217 	ldw	r7,8(sp)
    b3f0:	1004943a 	slli	r2,r2,16
    b3f4:	bcaf383a 	mul	r23,r23,r18
    b3f8:	393fffcc 	andi	r4,r7,65535
    b3fc:	2088b03a 	or	r4,r4,r2
    b400:	d9800317 	ldw	r6,12(sp)
    b404:	da000017 	ldw	r8,0(sp)
    b408:	da400117 	ldw	r9,4(sp)
    b40c:	25c0062e 	bgeu	r4,r23,b428 <__divdf3+0x538>
    b410:	2709883a 	add	r4,r4,fp
    b414:	90bfffc4 	addi	r2,r18,-1
    b418:	27009436 	bltu	r4,fp,b66c <__divdf3+0x77c>
    b41c:	25c0932e 	bgeu	r4,r23,b66c <__divdf3+0x77c>
    b420:	94bfff84 	addi	r18,r18,-2
    b424:	2709883a 	add	r4,r4,fp
    b428:	4004943a 	slli	r2,r8,16
    b42c:	25efc83a 	sub	r23,r4,r23
    b430:	1490b03a 	or	r8,r2,r18
    b434:	4008d43a 	srli	r4,r8,16
    b438:	40ffffcc 	andi	r3,r8,65535
    b43c:	30c5383a 	mul	r2,r6,r3
    b440:	1a47383a 	mul	r3,r3,r9
    b444:	310d383a 	mul	r6,r6,r4
    b448:	100ad43a 	srli	r5,r2,16
    b44c:	4913383a 	mul	r9,r9,r4
    b450:	1987883a 	add	r3,r3,r6
    b454:	28c7883a 	add	r3,r5,r3
    b458:	1980022e 	bgeu	r3,r6,b464 <__divdf3+0x574>
    b45c:	01000074 	movhi	r4,1
    b460:	4913883a 	add	r9,r9,r4
    b464:	1808d43a 	srli	r4,r3,16
    b468:	1806943a 	slli	r3,r3,16
    b46c:	10bfffcc 	andi	r2,r2,65535
    b470:	2253883a 	add	r9,r4,r9
    b474:	1887883a 	add	r3,r3,r2
    b478:	ba403836 	bltu	r23,r9,b55c <__divdf3+0x66c>
    b47c:	ba403626 	beq	r23,r9,b558 <__divdf3+0x668>
    b480:	42000054 	ori	r8,r8,1
    b484:	a880ffc4 	addi	r2,r21,1023
    b488:	00bf570e 	bge	zero,r2,b1e8 <__divdf3+0x2f8>
    b48c:	40c001cc 	andi	r3,r8,7
    b490:	18000726 	beq	r3,zero,b4b0 <__divdf3+0x5c0>
    b494:	40c003cc 	andi	r3,r8,15
    b498:	01000104 	movi	r4,4
    b49c:	19000426 	beq	r3,r4,b4b0 <__divdf3+0x5c0>
    b4a0:	4107883a 	add	r3,r8,r4
    b4a4:	1a11803a 	cmpltu	r8,r3,r8
    b4a8:	8a23883a 	add	r17,r17,r8
    b4ac:	1811883a 	mov	r8,r3
    b4b0:	88c0402c 	andhi	r3,r17,256
    b4b4:	18000426 	beq	r3,zero,b4c8 <__divdf3+0x5d8>
    b4b8:	00ffc034 	movhi	r3,65280
    b4bc:	18ffffc4 	addi	r3,r3,-1
    b4c0:	a8810004 	addi	r2,r21,1024
    b4c4:	88e2703a 	and	r17,r17,r3
    b4c8:	00c1ff84 	movi	r3,2046
    b4cc:	18bee316 	blt	r3,r2,b05c <__divdf3+0x16c>
    b4d0:	8824977a 	slli	r18,r17,29
    b4d4:	4010d0fa 	srli	r8,r8,3
    b4d8:	8822927a 	slli	r17,r17,9
    b4dc:	1081ffcc 	andi	r2,r2,2047
    b4e0:	9224b03a 	or	r18,r18,r8
    b4e4:	880ad33a 	srli	r5,r17,12
    b4e8:	98c0004c 	andi	r3,r19,1
    b4ec:	003edf06 	br	b06c <__divdf3+0x17c>
    b4f0:	8080022c 	andhi	r2,r16,8
    b4f4:	10001226 	beq	r2,zero,b540 <__divdf3+0x650>
    b4f8:	8880022c 	andhi	r2,r17,8
    b4fc:	1000101e 	bne	r2,zero,b540 <__divdf3+0x650>
    b500:	00800434 	movhi	r2,16
    b504:	89400234 	orhi	r5,r17,8
    b508:	10bfffc4 	addi	r2,r2,-1
    b50c:	b007883a 	mov	r3,r22
    b510:	288a703a 	and	r5,r5,r2
    b514:	4025883a 	mov	r18,r8
    b518:	003f3106 	br	b1e0 <__divdf3+0x2f0>
    b51c:	008000c4 	movi	r2,3
    b520:	3080a626 	beq	r6,r2,b7bc <__divdf3+0x8cc>
    b524:	00800044 	movi	r2,1
    b528:	3080521e 	bne	r6,r2,b674 <__divdf3+0x784>
    b52c:	b807883a 	mov	r3,r23
    b530:	0005883a 	mov	r2,zero
    b534:	000b883a 	mov	r5,zero
    b538:	0025883a 	mov	r18,zero
    b53c:	003ecb06 	br	b06c <__divdf3+0x17c>
    b540:	00800434 	movhi	r2,16
    b544:	81400234 	orhi	r5,r16,8
    b548:	10bfffc4 	addi	r2,r2,-1
    b54c:	a007883a 	mov	r3,r20
    b550:	288a703a 	and	r5,r5,r2
    b554:	003f2206 	br	b1e0 <__divdf3+0x2f0>
    b558:	183fca26 	beq	r3,zero,b484 <__divdf3+0x594>
    b55c:	e5ef883a 	add	r23,fp,r23
    b560:	40bfffc4 	addi	r2,r8,-1
    b564:	bf00392e 	bgeu	r23,fp,b64c <__divdf3+0x75c>
    b568:	1011883a 	mov	r8,r2
    b56c:	ba7fc41e 	bne	r23,r9,b480 <__divdf3+0x590>
    b570:	b0ffc31e 	bne	r22,r3,b480 <__divdf3+0x590>
    b574:	003fc306 	br	b484 <__divdf3+0x594>
    b578:	10bff604 	addi	r2,r2,-40
    b57c:	98a0983a 	sll	r16,r19,r2
    b580:	0025883a 	mov	r18,zero
    b584:	003ee206 	br	b110 <__divdf3+0x220>
    b588:	d9800315 	stw	r6,12(sp)
    b58c:	d9c00215 	stw	r7,8(sp)
    b590:	000cc480 	call	cc48 <__clzsi2>
    b594:	10800804 	addi	r2,r2,32
    b598:	d9c00217 	ldw	r7,8(sp)
    b59c:	d9800317 	ldw	r6,12(sp)
    b5a0:	003ed106 	br	b0e8 <__divdf3+0x1f8>
    b5a4:	10bff604 	addi	r2,r2,-40
    b5a8:	30a2983a 	sll	r17,r6,r2
    b5ac:	0011883a 	mov	r8,zero
    b5b0:	003ef506 	br	b188 <__divdf3+0x298>
    b5b4:	3009883a 	mov	r4,r6
    b5b8:	d9800315 	stw	r6,12(sp)
    b5bc:	da400115 	stw	r9,4(sp)
    b5c0:	000cc480 	call	cc48 <__clzsi2>
    b5c4:	10800804 	addi	r2,r2,32
    b5c8:	da400117 	ldw	r9,4(sp)
    b5cc:	d9800317 	ldw	r6,12(sp)
    b5d0:	003ee306 	br	b160 <__divdf3+0x270>
    b5d4:	85a1883a 	add	r16,r16,r22
    b5d8:	8585803a 	cmpltu	r2,r16,r22
    b5dc:	1705883a 	add	r2,r2,fp
    b5e0:	14a5883a 	add	r18,r2,r18
    b5e4:	88bfffc4 	addi	r2,r17,-1
    b5e8:	e4800c2e 	bgeu	fp,r18,b61c <__divdf3+0x72c>
    b5ec:	90c03e36 	bltu	r18,r3,b6e8 <__divdf3+0x7f8>
    b5f0:	1c806926 	beq	r3,r18,b798 <__divdf3+0x8a8>
    b5f4:	90c7c83a 	sub	r3,r18,r3
    b5f8:	1023883a 	mov	r17,r2
    b5fc:	003f5206 	br	b348 <__divdf3+0x458>
    b600:	923f0436 	bltu	r18,r8,b214 <__divdf3+0x324>
    b604:	800897fa 	slli	r4,r16,31
    b608:	9004d07a 	srli	r2,r18,1
    b60c:	8006d07a 	srli	r3,r16,1
    b610:	902097fa 	slli	r16,r18,31
    b614:	20a4b03a 	or	r18,r4,r2
    b618:	003f0106 	br	b220 <__divdf3+0x330>
    b61c:	e4bff51e 	bne	fp,r18,b5f4 <__divdf3+0x704>
    b620:	85bff22e 	bgeu	r16,r22,b5ec <__divdf3+0x6fc>
    b624:	e0c7c83a 	sub	r3,fp,r3
    b628:	1023883a 	mov	r17,r2
    b62c:	003f4606 	br	b348 <__divdf3+0x458>
    b630:	100f883a 	mov	r7,r2
    b634:	003f2b06 	br	b2e4 <__divdf3+0x3f4>
    b638:	180d883a 	mov	r6,r3
    b63c:	003f1306 	br	b28c <__divdf3+0x39c>
    b640:	813fe436 	bltu	r16,r4,b5d4 <__divdf3+0x6e4>
    b644:	0007883a 	mov	r3,zero
    b648:	003f3f06 	br	b348 <__divdf3+0x458>
    b64c:	ba402c36 	bltu	r23,r9,b700 <__divdf3+0x810>
    b650:	4dc05426 	beq	r9,r23,b7a4 <__divdf3+0x8b4>
    b654:	1011883a 	mov	r8,r2
    b658:	003f8906 	br	b480 <__divdf3+0x590>
    b65c:	023fffc4 	movi	r8,-1
    b660:	003f8806 	br	b484 <__divdf3+0x594>
    b664:	1811883a 	mov	r8,r3
    b668:	003f5406 	br	b3bc <__divdf3+0x4cc>
    b66c:	1025883a 	mov	r18,r2
    b670:	003f6d06 	br	b428 <__divdf3+0x538>
    b674:	b827883a 	mov	r19,r23
    b678:	003f8206 	br	b484 <__divdf3+0x594>
    b67c:	010007c4 	movi	r4,31
    b680:	20c02616 	blt	r4,r3,b71c <__divdf3+0x82c>
    b684:	00800804 	movi	r2,32
    b688:	10c5c83a 	sub	r2,r2,r3
    b68c:	888a983a 	sll	r5,r17,r2
    b690:	40c8d83a 	srl	r4,r8,r3
    b694:	4084983a 	sll	r2,r8,r2
    b698:	88e2d83a 	srl	r17,r17,r3
    b69c:	2906b03a 	or	r3,r5,r4
    b6a0:	1004c03a 	cmpne	r2,r2,zero
    b6a4:	1886b03a 	or	r3,r3,r2
    b6a8:	188001cc 	andi	r2,r3,7
    b6ac:	10000726 	beq	r2,zero,b6cc <__divdf3+0x7dc>
    b6b0:	188003cc 	andi	r2,r3,15
    b6b4:	01000104 	movi	r4,4
    b6b8:	11000426 	beq	r2,r4,b6cc <__divdf3+0x7dc>
    b6bc:	1805883a 	mov	r2,r3
    b6c0:	10c00104 	addi	r3,r2,4
    b6c4:	1885803a 	cmpltu	r2,r3,r2
    b6c8:	88a3883a 	add	r17,r17,r2
    b6cc:	8880202c 	andhi	r2,r17,128
    b6d0:	10002726 	beq	r2,zero,b770 <__divdf3+0x880>
    b6d4:	98c0004c 	andi	r3,r19,1
    b6d8:	00800044 	movi	r2,1
    b6dc:	000b883a 	mov	r5,zero
    b6e0:	0025883a 	mov	r18,zero
    b6e4:	003e6106 	br	b06c <__divdf3+0x17c>
    b6e8:	85a1883a 	add	r16,r16,r22
    b6ec:	8585803a 	cmpltu	r2,r16,r22
    b6f0:	1705883a 	add	r2,r2,fp
    b6f4:	14a5883a 	add	r18,r2,r18
    b6f8:	8c7fff84 	addi	r17,r17,-2
    b6fc:	003f1106 	br	b344 <__divdf3+0x454>
    b700:	b589883a 	add	r4,r22,r22
    b704:	25ad803a 	cmpltu	r22,r4,r22
    b708:	b739883a 	add	fp,r22,fp
    b70c:	40bfff84 	addi	r2,r8,-2
    b710:	bf2f883a 	add	r23,r23,fp
    b714:	202d883a 	mov	r22,r4
    b718:	003f9306 	br	b568 <__divdf3+0x678>
    b71c:	013ff844 	movi	r4,-31
    b720:	2085c83a 	sub	r2,r4,r2
    b724:	8888d83a 	srl	r4,r17,r2
    b728:	00800804 	movi	r2,32
    b72c:	18802126 	beq	r3,r2,b7b4 <__divdf3+0x8c4>
    b730:	00801004 	movi	r2,64
    b734:	10c5c83a 	sub	r2,r2,r3
    b738:	8884983a 	sll	r2,r17,r2
    b73c:	1204b03a 	or	r2,r2,r8
    b740:	1004c03a 	cmpne	r2,r2,zero
    b744:	2084b03a 	or	r2,r4,r2
    b748:	144001cc 	andi	r17,r2,7
    b74c:	88000d1e 	bne	r17,zero,b784 <__divdf3+0x894>
    b750:	000b883a 	mov	r5,zero
    b754:	1024d0fa 	srli	r18,r2,3
    b758:	98c0004c 	andi	r3,r19,1
    b75c:	0005883a 	mov	r2,zero
    b760:	9464b03a 	or	r18,r18,r17
    b764:	003e4106 	br	b06c <__divdf3+0x17c>
    b768:	1007883a 	mov	r3,r2
    b76c:	0023883a 	mov	r17,zero
    b770:	880a927a 	slli	r5,r17,9
    b774:	1805883a 	mov	r2,r3
    b778:	8822977a 	slli	r17,r17,29
    b77c:	280ad33a 	srli	r5,r5,12
    b780:	003ff406 	br	b754 <__divdf3+0x864>
    b784:	10c003cc 	andi	r3,r2,15
    b788:	01000104 	movi	r4,4
    b78c:	193ff626 	beq	r3,r4,b768 <__divdf3+0x878>
    b790:	0023883a 	mov	r17,zero
    b794:	003fca06 	br	b6c0 <__divdf3+0x7d0>
    b798:	813fd336 	bltu	r16,r4,b6e8 <__divdf3+0x7f8>
    b79c:	1023883a 	mov	r17,r2
    b7a0:	003fa806 	br	b644 <__divdf3+0x754>
    b7a4:	b0ffd636 	bltu	r22,r3,b700 <__divdf3+0x810>
    b7a8:	1011883a 	mov	r8,r2
    b7ac:	b0ff341e 	bne	r22,r3,b480 <__divdf3+0x590>
    b7b0:	003f3406 	br	b484 <__divdf3+0x594>
    b7b4:	0005883a 	mov	r2,zero
    b7b8:	003fe006 	br	b73c <__divdf3+0x84c>
    b7bc:	00800434 	movhi	r2,16
    b7c0:	89400234 	orhi	r5,r17,8
    b7c4:	10bfffc4 	addi	r2,r2,-1
    b7c8:	b807883a 	mov	r3,r23
    b7cc:	288a703a 	and	r5,r5,r2
    b7d0:	4025883a 	mov	r18,r8
    b7d4:	003e8206 	br	b1e0 <__divdf3+0x2f0>

0000b7d8 <__eqdf2>:
    b7d8:	2804d53a 	srli	r2,r5,20
    b7dc:	3806d53a 	srli	r3,r7,20
    b7e0:	02000434 	movhi	r8,16
    b7e4:	423fffc4 	addi	r8,r8,-1
    b7e8:	1081ffcc 	andi	r2,r2,2047
    b7ec:	0281ffc4 	movi	r10,2047
    b7f0:	2a12703a 	and	r9,r5,r8
    b7f4:	18c1ffcc 	andi	r3,r3,2047
    b7f8:	3a10703a 	and	r8,r7,r8
    b7fc:	280ad7fa 	srli	r5,r5,31
    b800:	380ed7fa 	srli	r7,r7,31
    b804:	12801026 	beq	r2,r10,b848 <__eqdf2+0x70>
    b808:	0281ffc4 	movi	r10,2047
    b80c:	1a800a26 	beq	r3,r10,b838 <__eqdf2+0x60>
    b810:	10c00226 	beq	r2,r3,b81c <__eqdf2+0x44>
    b814:	00800044 	movi	r2,1
    b818:	f800283a 	ret
    b81c:	4a3ffd1e 	bne	r9,r8,b814 <__eqdf2+0x3c>
    b820:	21bffc1e 	bne	r4,r6,b814 <__eqdf2+0x3c>
    b824:	29c00c26 	beq	r5,r7,b858 <__eqdf2+0x80>
    b828:	103ffa1e 	bne	r2,zero,b814 <__eqdf2+0x3c>
    b82c:	2244b03a 	or	r2,r4,r9
    b830:	1004c03a 	cmpne	r2,r2,zero
    b834:	f800283a 	ret
    b838:	3214b03a 	or	r10,r6,r8
    b83c:	503ff426 	beq	r10,zero,b810 <__eqdf2+0x38>
    b840:	00800044 	movi	r2,1
    b844:	f800283a 	ret
    b848:	2254b03a 	or	r10,r4,r9
    b84c:	503fee26 	beq	r10,zero,b808 <__eqdf2+0x30>
    b850:	00800044 	movi	r2,1
    b854:	f800283a 	ret
    b858:	0005883a 	mov	r2,zero
    b85c:	f800283a 	ret

0000b860 <__gedf2>:
    b860:	2804d53a 	srli	r2,r5,20
    b864:	3806d53a 	srli	r3,r7,20
    b868:	02000434 	movhi	r8,16
    b86c:	423fffc4 	addi	r8,r8,-1
    b870:	1081ffcc 	andi	r2,r2,2047
    b874:	0241ffc4 	movi	r9,2047
    b878:	2a14703a 	and	r10,r5,r8
    b87c:	18c1ffcc 	andi	r3,r3,2047
    b880:	3a10703a 	and	r8,r7,r8
    b884:	280ad7fa 	srli	r5,r5,31
    b888:	380ed7fa 	srli	r7,r7,31
    b88c:	12401d26 	beq	r2,r9,b904 <__gedf2+0xa4>
    b890:	0241ffc4 	movi	r9,2047
    b894:	1a401226 	beq	r3,r9,b8e0 <__gedf2+0x80>
    b898:	1000081e 	bne	r2,zero,b8bc <__gedf2+0x5c>
    b89c:	2296b03a 	or	r11,r4,r10
    b8a0:	5813003a 	cmpeq	r9,r11,zero
    b8a4:	1800091e 	bne	r3,zero,b8cc <__gedf2+0x6c>
    b8a8:	3218b03a 	or	r12,r6,r8
    b8ac:	6000071e 	bne	r12,zero,b8cc <__gedf2+0x6c>
    b8b0:	0005883a 	mov	r2,zero
    b8b4:	5800101e 	bne	r11,zero,b8f8 <__gedf2+0x98>
    b8b8:	f800283a 	ret
    b8bc:	18000c1e 	bne	r3,zero,b8f0 <__gedf2+0x90>
    b8c0:	3212b03a 	or	r9,r6,r8
    b8c4:	48000c26 	beq	r9,zero,b8f8 <__gedf2+0x98>
    b8c8:	0013883a 	mov	r9,zero
    b8cc:	39c03fcc 	andi	r7,r7,255
    b8d0:	48000826 	beq	r9,zero,b8f4 <__gedf2+0x94>
    b8d4:	38000926 	beq	r7,zero,b8fc <__gedf2+0x9c>
    b8d8:	00800044 	movi	r2,1
    b8dc:	f800283a 	ret
    b8e0:	3212b03a 	or	r9,r6,r8
    b8e4:	483fec26 	beq	r9,zero,b898 <__gedf2+0x38>
    b8e8:	00bfff84 	movi	r2,-2
    b8ec:	f800283a 	ret
    b8f0:	39c03fcc 	andi	r7,r7,255
    b8f4:	29c00626 	beq	r5,r7,b910 <__gedf2+0xb0>
    b8f8:	283ff726 	beq	r5,zero,b8d8 <__gedf2+0x78>
    b8fc:	00bfffc4 	movi	r2,-1
    b900:	f800283a 	ret
    b904:	2292b03a 	or	r9,r4,r10
    b908:	483fe126 	beq	r9,zero,b890 <__gedf2+0x30>
    b90c:	003ff606 	br	b8e8 <__gedf2+0x88>
    b910:	18bff916 	blt	r3,r2,b8f8 <__gedf2+0x98>
    b914:	10c00316 	blt	r2,r3,b924 <__gedf2+0xc4>
    b918:	42bff736 	bltu	r8,r10,b8f8 <__gedf2+0x98>
    b91c:	52000326 	beq	r10,r8,b92c <__gedf2+0xcc>
    b920:	5200042e 	bgeu	r10,r8,b934 <__gedf2+0xd4>
    b924:	283fec1e 	bne	r5,zero,b8d8 <__gedf2+0x78>
    b928:	003ff406 	br	b8fc <__gedf2+0x9c>
    b92c:	313ff236 	bltu	r6,r4,b8f8 <__gedf2+0x98>
    b930:	21bffc36 	bltu	r4,r6,b924 <__gedf2+0xc4>
    b934:	0005883a 	mov	r2,zero
    b938:	f800283a 	ret

0000b93c <__ledf2>:
    b93c:	2804d53a 	srli	r2,r5,20
    b940:	3810d53a 	srli	r8,r7,20
    b944:	00c00434 	movhi	r3,16
    b948:	18ffffc4 	addi	r3,r3,-1
    b94c:	1081ffcc 	andi	r2,r2,2047
    b950:	0241ffc4 	movi	r9,2047
    b954:	28d4703a 	and	r10,r5,r3
    b958:	4201ffcc 	andi	r8,r8,2047
    b95c:	38c6703a 	and	r3,r7,r3
    b960:	280ad7fa 	srli	r5,r5,31
    b964:	380ed7fa 	srli	r7,r7,31
    b968:	12401f26 	beq	r2,r9,b9e8 <__ledf2+0xac>
    b96c:	0241ffc4 	movi	r9,2047
    b970:	42401426 	beq	r8,r9,b9c4 <__ledf2+0x88>
    b974:	1000091e 	bne	r2,zero,b99c <__ledf2+0x60>
    b978:	2296b03a 	or	r11,r4,r10
    b97c:	5813003a 	cmpeq	r9,r11,zero
    b980:	29403fcc 	andi	r5,r5,255
    b984:	40000a1e 	bne	r8,zero,b9b0 <__ledf2+0x74>
    b988:	30d8b03a 	or	r12,r6,r3
    b98c:	6000081e 	bne	r12,zero,b9b0 <__ledf2+0x74>
    b990:	0005883a 	mov	r2,zero
    b994:	5800111e 	bne	r11,zero,b9dc <__ledf2+0xa0>
    b998:	f800283a 	ret
    b99c:	29403fcc 	andi	r5,r5,255
    b9a0:	40000c1e 	bne	r8,zero,b9d4 <__ledf2+0x98>
    b9a4:	30d2b03a 	or	r9,r6,r3
    b9a8:	48000c26 	beq	r9,zero,b9dc <__ledf2+0xa0>
    b9ac:	0013883a 	mov	r9,zero
    b9b0:	39c03fcc 	andi	r7,r7,255
    b9b4:	48000826 	beq	r9,zero,b9d8 <__ledf2+0x9c>
    b9b8:	38001126 	beq	r7,zero,ba00 <__ledf2+0xc4>
    b9bc:	00800044 	movi	r2,1
    b9c0:	f800283a 	ret
    b9c4:	30d2b03a 	or	r9,r6,r3
    b9c8:	483fea26 	beq	r9,zero,b974 <__ledf2+0x38>
    b9cc:	00800084 	movi	r2,2
    b9d0:	f800283a 	ret
    b9d4:	39c03fcc 	andi	r7,r7,255
    b9d8:	39400726 	beq	r7,r5,b9f8 <__ledf2+0xbc>
    b9dc:	2800081e 	bne	r5,zero,ba00 <__ledf2+0xc4>
    b9e0:	00800044 	movi	r2,1
    b9e4:	f800283a 	ret
    b9e8:	2292b03a 	or	r9,r4,r10
    b9ec:	483fdf26 	beq	r9,zero,b96c <__ledf2+0x30>
    b9f0:	00800084 	movi	r2,2
    b9f4:	f800283a 	ret
    b9f8:	4080030e 	bge	r8,r2,ba08 <__ledf2+0xcc>
    b9fc:	383fef26 	beq	r7,zero,b9bc <__ledf2+0x80>
    ba00:	00bfffc4 	movi	r2,-1
    ba04:	f800283a 	ret
    ba08:	123feb16 	blt	r2,r8,b9b8 <__ledf2+0x7c>
    ba0c:	1abff336 	bltu	r3,r10,b9dc <__ledf2+0xa0>
    ba10:	50c00326 	beq	r10,r3,ba20 <__ledf2+0xe4>
    ba14:	50c0042e 	bgeu	r10,r3,ba28 <__ledf2+0xec>
    ba18:	283fe81e 	bne	r5,zero,b9bc <__ledf2+0x80>
    ba1c:	003ff806 	br	ba00 <__ledf2+0xc4>
    ba20:	313fee36 	bltu	r6,r4,b9dc <__ledf2+0xa0>
    ba24:	21bffc36 	bltu	r4,r6,ba18 <__ledf2+0xdc>
    ba28:	0005883a 	mov	r2,zero
    ba2c:	f800283a 	ret

0000ba30 <__muldf3>:
    ba30:	defff304 	addi	sp,sp,-52
    ba34:	dd400815 	stw	r21,32(sp)
    ba38:	282ad53a 	srli	r21,r5,20
    ba3c:	dd800915 	stw	r22,36(sp)
    ba40:	282cd7fa 	srli	r22,r5,31
    ba44:	dc000315 	stw	r16,12(sp)
    ba48:	04000434 	movhi	r16,16
    ba4c:	dd000715 	stw	r20,28(sp)
    ba50:	843fffc4 	addi	r16,r16,-1
    ba54:	dfc00c15 	stw	ra,48(sp)
    ba58:	df000b15 	stw	fp,44(sp)
    ba5c:	ddc00a15 	stw	r23,40(sp)
    ba60:	dcc00615 	stw	r19,24(sp)
    ba64:	dc800515 	stw	r18,20(sp)
    ba68:	dc400415 	stw	r17,16(sp)
    ba6c:	ad41ffcc 	andi	r21,r21,2047
    ba70:	2c20703a 	and	r16,r5,r16
    ba74:	b029883a 	mov	r20,r22
    ba78:	b2403fcc 	andi	r9,r22,255
    ba7c:	a8006026 	beq	r21,zero,bc00 <__muldf3+0x1d0>
    ba80:	0081ffc4 	movi	r2,2047
    ba84:	2027883a 	mov	r19,r4
    ba88:	a8803626 	beq	r21,r2,bb64 <__muldf3+0x134>
    ba8c:	80c00434 	orhi	r3,r16,16
    ba90:	180690fa 	slli	r3,r3,3
    ba94:	2020d77a 	srli	r16,r4,29
    ba98:	202690fa 	slli	r19,r4,3
    ba9c:	ad7f0044 	addi	r21,r21,-1023
    baa0:	80e0b03a 	or	r16,r16,r3
    baa4:	0025883a 	mov	r18,zero
    baa8:	0039883a 	mov	fp,zero
    baac:	3808d53a 	srli	r4,r7,20
    bab0:	382ed7fa 	srli	r23,r7,31
    bab4:	04400434 	movhi	r17,16
    bab8:	8c7fffc4 	addi	r17,r17,-1
    babc:	2101ffcc 	andi	r4,r4,2047
    bac0:	3011883a 	mov	r8,r6
    bac4:	3c62703a 	and	r17,r7,r17
    bac8:	ba803fcc 	andi	r10,r23,255
    bacc:	20006d26 	beq	r4,zero,bc84 <__muldf3+0x254>
    bad0:	0081ffc4 	movi	r2,2047
    bad4:	20806526 	beq	r4,r2,bc6c <__muldf3+0x23c>
    bad8:	88c00434 	orhi	r3,r17,16
    badc:	180690fa 	slli	r3,r3,3
    bae0:	3022d77a 	srli	r17,r6,29
    bae4:	301090fa 	slli	r8,r6,3
    bae8:	213f0044 	addi	r4,r4,-1023
    baec:	88e2b03a 	or	r17,r17,r3
    baf0:	000b883a 	mov	r5,zero
    baf4:	a909883a 	add	r4,r21,r4
    baf8:	2c84b03a 	or	r2,r5,r18
    bafc:	00c003c4 	movi	r3,15
    bb00:	bdacf03a 	xor	r22,r23,r22
    bb04:	22c00044 	addi	r11,r4,1
    bb08:	18809936 	bltu	r3,r2,bd70 <__muldf3+0x340>
    bb0c:	100490ba 	slli	r2,r2,2
    bb10:	00c00074 	movhi	r3,1
    bb14:	18eec904 	addi	r3,r3,-17628
    bb18:	10c5883a 	add	r2,r2,r3
    bb1c:	10800017 	ldw	r2,0(r2)
    bb20:	1000683a 	jmp	r2
    bb24:	0000bd70 	cmpltui	zero,zero,757
    bb28:	0000bb84 	movi	zero,750
    bb2c:	0000bb84 	movi	zero,750
    bb30:	0000bb80 	call	bb8 <___vfprintf_internal_r+0x6ec>
    bb34:	0000bd4c 	andi	zero,zero,757
    bb38:	0000bd4c 	andi	zero,zero,757
    bb3c:	0000bd34 	movhi	zero,756
    bb40:	0000bb80 	call	bb8 <___vfprintf_internal_r+0x6ec>
    bb44:	0000bd4c 	andi	zero,zero,757
    bb48:	0000bd34 	movhi	zero,756
    bb4c:	0000bd4c 	andi	zero,zero,757
    bb50:	0000bb80 	call	bb8 <___vfprintf_internal_r+0x6ec>
    bb54:	0000bd5c 	xori	zero,zero,757
    bb58:	0000bd5c 	xori	zero,zero,757
    bb5c:	0000bd5c 	xori	zero,zero,757
    bb60:	0000bf78 	rdprs	zero,zero,765
    bb64:	2404b03a 	or	r2,r4,r16
    bb68:	10006f1e 	bne	r2,zero,bd28 <__muldf3+0x2f8>
    bb6c:	04800204 	movi	r18,8
    bb70:	0021883a 	mov	r16,zero
    bb74:	0027883a 	mov	r19,zero
    bb78:	07000084 	movi	fp,2
    bb7c:	003fcb06 	br	baac <__muldf3+0x7c>
    bb80:	502d883a 	mov	r22,r10
    bb84:	00800084 	movi	r2,2
    bb88:	28805726 	beq	r5,r2,bce8 <__muldf3+0x2b8>
    bb8c:	008000c4 	movi	r2,3
    bb90:	28816626 	beq	r5,r2,c12c <__muldf3+0x6fc>
    bb94:	00800044 	movi	r2,1
    bb98:	2881411e 	bne	r5,r2,c0a0 <__muldf3+0x670>
    bb9c:	b029883a 	mov	r20,r22
    bba0:	0005883a 	mov	r2,zero
    bba4:	000b883a 	mov	r5,zero
    bba8:	0027883a 	mov	r19,zero
    bbac:	1004953a 	slli	r2,r2,20
    bbb0:	a0c03fcc 	andi	r3,r20,255
    bbb4:	04400434 	movhi	r17,16
    bbb8:	8c7fffc4 	addi	r17,r17,-1
    bbbc:	180697fa 	slli	r3,r3,31
    bbc0:	2c4a703a 	and	r5,r5,r17
    bbc4:	288ab03a 	or	r5,r5,r2
    bbc8:	28c6b03a 	or	r3,r5,r3
    bbcc:	9805883a 	mov	r2,r19
    bbd0:	dfc00c17 	ldw	ra,48(sp)
    bbd4:	df000b17 	ldw	fp,44(sp)
    bbd8:	ddc00a17 	ldw	r23,40(sp)
    bbdc:	dd800917 	ldw	r22,36(sp)
    bbe0:	dd400817 	ldw	r21,32(sp)
    bbe4:	dd000717 	ldw	r20,28(sp)
    bbe8:	dcc00617 	ldw	r19,24(sp)
    bbec:	dc800517 	ldw	r18,20(sp)
    bbf0:	dc400417 	ldw	r17,16(sp)
    bbf4:	dc000317 	ldw	r16,12(sp)
    bbf8:	dec00d04 	addi	sp,sp,52
    bbfc:	f800283a 	ret
    bc00:	2404b03a 	or	r2,r4,r16
    bc04:	2025883a 	mov	r18,r4
    bc08:	10004226 	beq	r2,zero,bd14 <__muldf3+0x2e4>
    bc0c:	8000fc26 	beq	r16,zero,c000 <__muldf3+0x5d0>
    bc10:	8009883a 	mov	r4,r16
    bc14:	d9800215 	stw	r6,8(sp)
    bc18:	d9c00015 	stw	r7,0(sp)
    bc1c:	da400115 	stw	r9,4(sp)
    bc20:	000cc480 	call	cc48 <__clzsi2>
    bc24:	d9800217 	ldw	r6,8(sp)
    bc28:	d9c00017 	ldw	r7,0(sp)
    bc2c:	da400117 	ldw	r9,4(sp)
    bc30:	10fffd44 	addi	r3,r2,-11
    bc34:	01000704 	movi	r4,28
    bc38:	20c0ed16 	blt	r4,r3,bff0 <__muldf3+0x5c0>
    bc3c:	01000744 	movi	r4,29
    bc40:	147ffe04 	addi	r17,r2,-8
    bc44:	20c9c83a 	sub	r4,r4,r3
    bc48:	8460983a 	sll	r16,r16,r17
    bc4c:	9108d83a 	srl	r4,r18,r4
    bc50:	9466983a 	sll	r19,r18,r17
    bc54:	2420b03a 	or	r16,r4,r16
    bc58:	013f0084 	movi	r4,-1022
    bc5c:	20ebc83a 	sub	r21,r4,r3
    bc60:	0025883a 	mov	r18,zero
    bc64:	0039883a 	mov	fp,zero
    bc68:	003f9006 	br	baac <__muldf3+0x7c>
    bc6c:	3444b03a 	or	r2,r6,r17
    bc70:	1000261e 	bne	r2,zero,bd0c <__muldf3+0x2dc>
    bc74:	0023883a 	mov	r17,zero
    bc78:	0011883a 	mov	r8,zero
    bc7c:	01400084 	movi	r5,2
    bc80:	003f9c06 	br	baf4 <__muldf3+0xc4>
    bc84:	3444b03a 	or	r2,r6,r17
    bc88:	10001c26 	beq	r2,zero,bcfc <__muldf3+0x2cc>
    bc8c:	8800ce26 	beq	r17,zero,bfc8 <__muldf3+0x598>
    bc90:	8809883a 	mov	r4,r17
    bc94:	d9800215 	stw	r6,8(sp)
    bc98:	da400115 	stw	r9,4(sp)
    bc9c:	da800015 	stw	r10,0(sp)
    bca0:	000cc480 	call	cc48 <__clzsi2>
    bca4:	d9800217 	ldw	r6,8(sp)
    bca8:	da400117 	ldw	r9,4(sp)
    bcac:	da800017 	ldw	r10,0(sp)
    bcb0:	113ffd44 	addi	r4,r2,-11
    bcb4:	00c00704 	movi	r3,28
    bcb8:	1900bf16 	blt	r3,r4,bfb8 <__muldf3+0x588>
    bcbc:	00c00744 	movi	r3,29
    bcc0:	123ffe04 	addi	r8,r2,-8
    bcc4:	1907c83a 	sub	r3,r3,r4
    bcc8:	8a22983a 	sll	r17,r17,r8
    bccc:	30c6d83a 	srl	r3,r6,r3
    bcd0:	3210983a 	sll	r8,r6,r8
    bcd4:	1c62b03a 	or	r17,r3,r17
    bcd8:	017f0084 	movi	r5,-1022
    bcdc:	2909c83a 	sub	r4,r5,r4
    bce0:	000b883a 	mov	r5,zero
    bce4:	003f8306 	br	baf4 <__muldf3+0xc4>
    bce8:	b029883a 	mov	r20,r22
    bcec:	0081ffc4 	movi	r2,2047
    bcf0:	000b883a 	mov	r5,zero
    bcf4:	0027883a 	mov	r19,zero
    bcf8:	003fac06 	br	bbac <__muldf3+0x17c>
    bcfc:	0023883a 	mov	r17,zero
    bd00:	0011883a 	mov	r8,zero
    bd04:	01400044 	movi	r5,1
    bd08:	003f7a06 	br	baf4 <__muldf3+0xc4>
    bd0c:	014000c4 	movi	r5,3
    bd10:	003f7806 	br	baf4 <__muldf3+0xc4>
    bd14:	04800104 	movi	r18,4
    bd18:	0021883a 	mov	r16,zero
    bd1c:	0027883a 	mov	r19,zero
    bd20:	07000044 	movi	fp,1
    bd24:	003f6106 	br	baac <__muldf3+0x7c>
    bd28:	04800304 	movi	r18,12
    bd2c:	070000c4 	movi	fp,3
    bd30:	003f5e06 	br	baac <__muldf3+0x7c>
    bd34:	01400434 	movhi	r5,16
    bd38:	0029883a 	mov	r20,zero
    bd3c:	297fffc4 	addi	r5,r5,-1
    bd40:	04ffffc4 	movi	r19,-1
    bd44:	0081ffc4 	movi	r2,2047
    bd48:	003f9806 	br	bbac <__muldf3+0x17c>
    bd4c:	8023883a 	mov	r17,r16
    bd50:	9811883a 	mov	r8,r19
    bd54:	e00b883a 	mov	r5,fp
    bd58:	003f8a06 	br	bb84 <__muldf3+0x154>
    bd5c:	8023883a 	mov	r17,r16
    bd60:	9811883a 	mov	r8,r19
    bd64:	482d883a 	mov	r22,r9
    bd68:	e00b883a 	mov	r5,fp
    bd6c:	003f8506 	br	bb84 <__muldf3+0x154>
    bd70:	980ad43a 	srli	r5,r19,16
    bd74:	401ad43a 	srli	r13,r8,16
    bd78:	9cffffcc 	andi	r19,r19,65535
    bd7c:	423fffcc 	andi	r8,r8,65535
    bd80:	44d9383a 	mul	r12,r8,r19
    bd84:	4145383a 	mul	r2,r8,r5
    bd88:	6ccd383a 	mul	r6,r13,r19
    bd8c:	6006d43a 	srli	r3,r12,16
    bd90:	2b5d383a 	mul	r14,r5,r13
    bd94:	308d883a 	add	r6,r6,r2
    bd98:	198d883a 	add	r6,r3,r6
    bd9c:	3080022e 	bgeu	r6,r2,bda8 <__muldf3+0x378>
    bda0:	00800074 	movhi	r2,1
    bda4:	709d883a 	add	r14,r14,r2
    bda8:	8828d43a 	srli	r20,r17,16
    bdac:	8bffffcc 	andi	r15,r17,65535
    bdb0:	7ce3383a 	mul	r17,r15,r19
    bdb4:	7945383a 	mul	r2,r15,r5
    bdb8:	a4e7383a 	mul	r19,r20,r19
    bdbc:	8814d43a 	srli	r10,r17,16
    bdc0:	3012943a 	slli	r9,r6,16
    bdc4:	98a7883a 	add	r19,r19,r2
    bdc8:	633fffcc 	andi	r12,r12,65535
    bdcc:	54d5883a 	add	r10,r10,r19
    bdd0:	3006d43a 	srli	r3,r6,16
    bdd4:	4b13883a 	add	r9,r9,r12
    bdd8:	2d0b383a 	mul	r5,r5,r20
    bddc:	5080022e 	bgeu	r10,r2,bde8 <__muldf3+0x3b8>
    bde0:	00800074 	movhi	r2,1
    bde4:	288b883a 	add	r5,r5,r2
    bde8:	802ad43a 	srli	r21,r16,16
    bdec:	843fffcc 	andi	r16,r16,65535
    bdf0:	440d383a 	mul	r6,r8,r16
    bdf4:	4565383a 	mul	r18,r8,r21
    bdf8:	8359383a 	mul	r12,r16,r13
    bdfc:	500e943a 	slli	r7,r10,16
    be00:	3010d43a 	srli	r8,r6,16
    be04:	5026d43a 	srli	r19,r10,16
    be08:	6499883a 	add	r12,r12,r18
    be0c:	8abfffcc 	andi	r10,r17,65535
    be10:	3a95883a 	add	r10,r7,r10
    be14:	4319883a 	add	r12,r8,r12
    be18:	9967883a 	add	r19,r19,r5
    be1c:	1a87883a 	add	r3,r3,r10
    be20:	6d5b383a 	mul	r13,r13,r21
    be24:	6480022e 	bgeu	r12,r18,be30 <__muldf3+0x400>
    be28:	00800074 	movhi	r2,1
    be2c:	689b883a 	add	r13,r13,r2
    be30:	7c25383a 	mul	r18,r15,r16
    be34:	7d4b383a 	mul	r5,r15,r21
    be38:	850f383a 	mul	r7,r16,r20
    be3c:	901ed43a 	srli	r15,r18,16
    be40:	6004d43a 	srli	r2,r12,16
    be44:	6010943a 	slli	r8,r12,16
    be48:	394f883a 	add	r7,r7,r5
    be4c:	333fffcc 	andi	r12,r6,65535
    be50:	79df883a 	add	r15,r15,r7
    be54:	135b883a 	add	r13,r2,r13
    be58:	a563383a 	mul	r17,r20,r21
    be5c:	4305883a 	add	r2,r8,r12
    be60:	7940022e 	bgeu	r15,r5,be6c <__muldf3+0x43c>
    be64:	01400074 	movhi	r5,1
    be68:	8963883a 	add	r17,r17,r5
    be6c:	780a943a 	slli	r5,r15,16
    be70:	91bfffcc 	andi	r6,r18,65535
    be74:	70c7883a 	add	r3,r14,r3
    be78:	298d883a 	add	r6,r5,r6
    be7c:	1a8f803a 	cmpltu	r7,r3,r10
    be80:	34cb883a 	add	r5,r6,r19
    be84:	10c7883a 	add	r3,r2,r3
    be88:	3955883a 	add	r10,r7,r5
    be8c:	1885803a 	cmpltu	r2,r3,r2
    be90:	6a91883a 	add	r8,r13,r10
    be94:	780cd43a 	srli	r6,r15,16
    be98:	1219883a 	add	r12,r2,r8
    be9c:	2ccb803a 	cmpltu	r5,r5,r19
    bea0:	51cf803a 	cmpltu	r7,r10,r7
    bea4:	29ceb03a 	or	r7,r5,r7
    bea8:	4351803a 	cmpltu	r8,r8,r13
    beac:	608b803a 	cmpltu	r5,r12,r2
    beb0:	4144b03a 	or	r2,r8,r5
    beb4:	398f883a 	add	r7,r7,r6
    beb8:	3885883a 	add	r2,r7,r2
    bebc:	1810927a 	slli	r8,r3,9
    bec0:	1445883a 	add	r2,r2,r17
    bec4:	1004927a 	slli	r2,r2,9
    bec8:	6022d5fa 	srli	r17,r12,23
    becc:	1806d5fa 	srli	r3,r3,23
    bed0:	4252b03a 	or	r9,r8,r9
    bed4:	600a927a 	slli	r5,r12,9
    bed8:	4810c03a 	cmpne	r8,r9,zero
    bedc:	1462b03a 	or	r17,r2,r17
    bee0:	40c6b03a 	or	r3,r8,r3
    bee4:	8880402c 	andhi	r2,r17,256
    bee8:	1950b03a 	or	r8,r3,r5
    beec:	10000726 	beq	r2,zero,bf0c <__muldf3+0x4dc>
    bef0:	4006d07a 	srli	r3,r8,1
    bef4:	880497fa 	slli	r2,r17,31
    bef8:	4200004c 	andi	r8,r8,1
    befc:	8822d07a 	srli	r17,r17,1
    bf00:	1a10b03a 	or	r8,r3,r8
    bf04:	1210b03a 	or	r8,r2,r8
    bf08:	5809883a 	mov	r4,r11
    bf0c:	2080ffc4 	addi	r2,r4,1023
    bf10:	0080440e 	bge	zero,r2,c024 <__muldf3+0x5f4>
    bf14:	40c001cc 	andi	r3,r8,7
    bf18:	18000726 	beq	r3,zero,bf38 <__muldf3+0x508>
    bf1c:	40c003cc 	andi	r3,r8,15
    bf20:	01400104 	movi	r5,4
    bf24:	19400426 	beq	r3,r5,bf38 <__muldf3+0x508>
    bf28:	4147883a 	add	r3,r8,r5
    bf2c:	1a11803a 	cmpltu	r8,r3,r8
    bf30:	8a23883a 	add	r17,r17,r8
    bf34:	1811883a 	mov	r8,r3
    bf38:	88c0402c 	andhi	r3,r17,256
    bf3c:	18000426 	beq	r3,zero,bf50 <__muldf3+0x520>
    bf40:	00ffc034 	movhi	r3,65280
    bf44:	18ffffc4 	addi	r3,r3,-1
    bf48:	20810004 	addi	r2,r4,1024
    bf4c:	88e2703a 	and	r17,r17,r3
    bf50:	00c1ff84 	movi	r3,2046
    bf54:	18bf6416 	blt	r3,r2,bce8 <__muldf3+0x2b8>
    bf58:	8826977a 	slli	r19,r17,29
    bf5c:	4010d0fa 	srli	r8,r8,3
    bf60:	8822927a 	slli	r17,r17,9
    bf64:	1081ffcc 	andi	r2,r2,2047
    bf68:	9a26b03a 	or	r19,r19,r8
    bf6c:	880ad33a 	srli	r5,r17,12
    bf70:	b029883a 	mov	r20,r22
    bf74:	003f0d06 	br	bbac <__muldf3+0x17c>
    bf78:	8080022c 	andhi	r2,r16,8
    bf7c:	10000926 	beq	r2,zero,bfa4 <__muldf3+0x574>
    bf80:	8880022c 	andhi	r2,r17,8
    bf84:	1000071e 	bne	r2,zero,bfa4 <__muldf3+0x574>
    bf88:	00800434 	movhi	r2,16
    bf8c:	89400234 	orhi	r5,r17,8
    bf90:	10bfffc4 	addi	r2,r2,-1
    bf94:	b829883a 	mov	r20,r23
    bf98:	288a703a 	and	r5,r5,r2
    bf9c:	4027883a 	mov	r19,r8
    bfa0:	003f6806 	br	bd44 <__muldf3+0x314>
    bfa4:	00800434 	movhi	r2,16
    bfa8:	81400234 	orhi	r5,r16,8
    bfac:	10bfffc4 	addi	r2,r2,-1
    bfb0:	288a703a 	and	r5,r5,r2
    bfb4:	003f6306 	br	bd44 <__muldf3+0x314>
    bfb8:	10bff604 	addi	r2,r2,-40
    bfbc:	30a2983a 	sll	r17,r6,r2
    bfc0:	0011883a 	mov	r8,zero
    bfc4:	003f4406 	br	bcd8 <__muldf3+0x2a8>
    bfc8:	3009883a 	mov	r4,r6
    bfcc:	d9800215 	stw	r6,8(sp)
    bfd0:	da400115 	stw	r9,4(sp)
    bfd4:	da800015 	stw	r10,0(sp)
    bfd8:	000cc480 	call	cc48 <__clzsi2>
    bfdc:	10800804 	addi	r2,r2,32
    bfe0:	da800017 	ldw	r10,0(sp)
    bfe4:	da400117 	ldw	r9,4(sp)
    bfe8:	d9800217 	ldw	r6,8(sp)
    bfec:	003f3006 	br	bcb0 <__muldf3+0x280>
    bff0:	10bff604 	addi	r2,r2,-40
    bff4:	90a0983a 	sll	r16,r18,r2
    bff8:	0027883a 	mov	r19,zero
    bffc:	003f1606 	br	bc58 <__muldf3+0x228>
    c000:	d9800215 	stw	r6,8(sp)
    c004:	d9c00015 	stw	r7,0(sp)
    c008:	da400115 	stw	r9,4(sp)
    c00c:	000cc480 	call	cc48 <__clzsi2>
    c010:	10800804 	addi	r2,r2,32
    c014:	da400117 	ldw	r9,4(sp)
    c018:	d9c00017 	ldw	r7,0(sp)
    c01c:	d9800217 	ldw	r6,8(sp)
    c020:	003f0306 	br	bc30 <__muldf3+0x200>
    c024:	00c00044 	movi	r3,1
    c028:	1887c83a 	sub	r3,r3,r2
    c02c:	01000e04 	movi	r4,56
    c030:	20feda16 	blt	r4,r3,bb9c <__muldf3+0x16c>
    c034:	010007c4 	movi	r4,31
    c038:	20c01b16 	blt	r4,r3,c0a8 <__muldf3+0x678>
    c03c:	00800804 	movi	r2,32
    c040:	10c5c83a 	sub	r2,r2,r3
    c044:	888a983a 	sll	r5,r17,r2
    c048:	40c8d83a 	srl	r4,r8,r3
    c04c:	4084983a 	sll	r2,r8,r2
    c050:	88e2d83a 	srl	r17,r17,r3
    c054:	2906b03a 	or	r3,r5,r4
    c058:	1004c03a 	cmpne	r2,r2,zero
    c05c:	1886b03a 	or	r3,r3,r2
    c060:	188001cc 	andi	r2,r3,7
    c064:	10000726 	beq	r2,zero,c084 <__muldf3+0x654>
    c068:	188003cc 	andi	r2,r3,15
    c06c:	01000104 	movi	r4,4
    c070:	11000426 	beq	r2,r4,c084 <__muldf3+0x654>
    c074:	1805883a 	mov	r2,r3
    c078:	10c00104 	addi	r3,r2,4
    c07c:	1885803a 	cmpltu	r2,r3,r2
    c080:	88a3883a 	add	r17,r17,r2
    c084:	8880202c 	andhi	r2,r17,128
    c088:	10001c26 	beq	r2,zero,c0fc <__muldf3+0x6cc>
    c08c:	b029883a 	mov	r20,r22
    c090:	00800044 	movi	r2,1
    c094:	000b883a 	mov	r5,zero
    c098:	0027883a 	mov	r19,zero
    c09c:	003ec306 	br	bbac <__muldf3+0x17c>
    c0a0:	5809883a 	mov	r4,r11
    c0a4:	003f9906 	br	bf0c <__muldf3+0x4dc>
    c0a8:	013ff844 	movi	r4,-31
    c0ac:	2085c83a 	sub	r2,r4,r2
    c0b0:	8888d83a 	srl	r4,r17,r2
    c0b4:	00800804 	movi	r2,32
    c0b8:	18801a26 	beq	r3,r2,c124 <__muldf3+0x6f4>
    c0bc:	00801004 	movi	r2,64
    c0c0:	10c5c83a 	sub	r2,r2,r3
    c0c4:	8884983a 	sll	r2,r17,r2
    c0c8:	1204b03a 	or	r2,r2,r8
    c0cc:	1004c03a 	cmpne	r2,r2,zero
    c0d0:	2084b03a 	or	r2,r4,r2
    c0d4:	144001cc 	andi	r17,r2,7
    c0d8:	88000d1e 	bne	r17,zero,c110 <__muldf3+0x6e0>
    c0dc:	000b883a 	mov	r5,zero
    c0e0:	1026d0fa 	srli	r19,r2,3
    c0e4:	b029883a 	mov	r20,r22
    c0e8:	0005883a 	mov	r2,zero
    c0ec:	9c66b03a 	or	r19,r19,r17
    c0f0:	003eae06 	br	bbac <__muldf3+0x17c>
    c0f4:	1007883a 	mov	r3,r2
    c0f8:	0023883a 	mov	r17,zero
    c0fc:	880a927a 	slli	r5,r17,9
    c100:	1805883a 	mov	r2,r3
    c104:	8822977a 	slli	r17,r17,29
    c108:	280ad33a 	srli	r5,r5,12
    c10c:	003ff406 	br	c0e0 <__muldf3+0x6b0>
    c110:	10c003cc 	andi	r3,r2,15
    c114:	01000104 	movi	r4,4
    c118:	193ff626 	beq	r3,r4,c0f4 <__muldf3+0x6c4>
    c11c:	0023883a 	mov	r17,zero
    c120:	003fd506 	br	c078 <__muldf3+0x648>
    c124:	0005883a 	mov	r2,zero
    c128:	003fe706 	br	c0c8 <__muldf3+0x698>
    c12c:	00800434 	movhi	r2,16
    c130:	89400234 	orhi	r5,r17,8
    c134:	10bfffc4 	addi	r2,r2,-1
    c138:	b029883a 	mov	r20,r22
    c13c:	288a703a 	and	r5,r5,r2
    c140:	4027883a 	mov	r19,r8
    c144:	003eff06 	br	bd44 <__muldf3+0x314>

0000c148 <__subdf3>:
    c148:	02000434 	movhi	r8,16
    c14c:	423fffc4 	addi	r8,r8,-1
    c150:	defffb04 	addi	sp,sp,-20
    c154:	2a14703a 	and	r10,r5,r8
    c158:	3812d53a 	srli	r9,r7,20
    c15c:	3a10703a 	and	r8,r7,r8
    c160:	2006d77a 	srli	r3,r4,29
    c164:	3004d77a 	srli	r2,r6,29
    c168:	dc000015 	stw	r16,0(sp)
    c16c:	501490fa 	slli	r10,r10,3
    c170:	2820d53a 	srli	r16,r5,20
    c174:	401090fa 	slli	r8,r8,3
    c178:	dc800215 	stw	r18,8(sp)
    c17c:	dc400115 	stw	r17,4(sp)
    c180:	dfc00415 	stw	ra,16(sp)
    c184:	202290fa 	slli	r17,r4,3
    c188:	dcc00315 	stw	r19,12(sp)
    c18c:	4a41ffcc 	andi	r9,r9,2047
    c190:	0101ffc4 	movi	r4,2047
    c194:	2824d7fa 	srli	r18,r5,31
    c198:	8401ffcc 	andi	r16,r16,2047
    c19c:	50c6b03a 	or	r3,r10,r3
    c1a0:	380ed7fa 	srli	r7,r7,31
    c1a4:	408ab03a 	or	r5,r8,r2
    c1a8:	300c90fa 	slli	r6,r6,3
    c1ac:	49009626 	beq	r9,r4,c408 <__subdf3+0x2c0>
    c1b0:	39c0005c 	xori	r7,r7,1
    c1b4:	8245c83a 	sub	r2,r16,r9
    c1b8:	3c807426 	beq	r7,r18,c38c <__subdf3+0x244>
    c1bc:	0080af0e 	bge	zero,r2,c47c <__subdf3+0x334>
    c1c0:	48002a1e 	bne	r9,zero,c26c <__subdf3+0x124>
    c1c4:	2988b03a 	or	r4,r5,r6
    c1c8:	20009a1e 	bne	r4,zero,c434 <__subdf3+0x2ec>
    c1cc:	888001cc 	andi	r2,r17,7
    c1d0:	10000726 	beq	r2,zero,c1f0 <__subdf3+0xa8>
    c1d4:	888003cc 	andi	r2,r17,15
    c1d8:	01000104 	movi	r4,4
    c1dc:	11000426 	beq	r2,r4,c1f0 <__subdf3+0xa8>
    c1e0:	890b883a 	add	r5,r17,r4
    c1e4:	2c63803a 	cmpltu	r17,r5,r17
    c1e8:	1c47883a 	add	r3,r3,r17
    c1ec:	2823883a 	mov	r17,r5
    c1f0:	1880202c 	andhi	r2,r3,128
    c1f4:	10005926 	beq	r2,zero,c35c <__subdf3+0x214>
    c1f8:	84000044 	addi	r16,r16,1
    c1fc:	0081ffc4 	movi	r2,2047
    c200:	8080be26 	beq	r16,r2,c4fc <__subdf3+0x3b4>
    c204:	017fe034 	movhi	r5,65408
    c208:	297fffc4 	addi	r5,r5,-1
    c20c:	1946703a 	and	r3,r3,r5
    c210:	1804977a 	slli	r2,r3,29
    c214:	1806927a 	slli	r3,r3,9
    c218:	8822d0fa 	srli	r17,r17,3
    c21c:	8401ffcc 	andi	r16,r16,2047
    c220:	180ad33a 	srli	r5,r3,12
    c224:	9100004c 	andi	r4,r18,1
    c228:	1444b03a 	or	r2,r2,r17
    c22c:	80c1ffcc 	andi	r3,r16,2047
    c230:	1820953a 	slli	r16,r3,20
    c234:	20c03fcc 	andi	r3,r4,255
    c238:	180897fa 	slli	r4,r3,31
    c23c:	00c00434 	movhi	r3,16
    c240:	18ffffc4 	addi	r3,r3,-1
    c244:	28c6703a 	and	r3,r5,r3
    c248:	1c06b03a 	or	r3,r3,r16
    c24c:	1906b03a 	or	r3,r3,r4
    c250:	dfc00417 	ldw	ra,16(sp)
    c254:	dcc00317 	ldw	r19,12(sp)
    c258:	dc800217 	ldw	r18,8(sp)
    c25c:	dc400117 	ldw	r17,4(sp)
    c260:	dc000017 	ldw	r16,0(sp)
    c264:	dec00504 	addi	sp,sp,20
    c268:	f800283a 	ret
    c26c:	0101ffc4 	movi	r4,2047
    c270:	813fd626 	beq	r16,r4,c1cc <__subdf3+0x84>
    c274:	29402034 	orhi	r5,r5,128
    c278:	01000e04 	movi	r4,56
    c27c:	2080a316 	blt	r4,r2,c50c <__subdf3+0x3c4>
    c280:	010007c4 	movi	r4,31
    c284:	2080c616 	blt	r4,r2,c5a0 <__subdf3+0x458>
    c288:	01000804 	movi	r4,32
    c28c:	2089c83a 	sub	r4,r4,r2
    c290:	2910983a 	sll	r8,r5,r4
    c294:	308ed83a 	srl	r7,r6,r2
    c298:	3108983a 	sll	r4,r6,r4
    c29c:	2884d83a 	srl	r2,r5,r2
    c2a0:	41ccb03a 	or	r6,r8,r7
    c2a4:	2008c03a 	cmpne	r4,r4,zero
    c2a8:	310cb03a 	or	r6,r6,r4
    c2ac:	898dc83a 	sub	r6,r17,r6
    c2b0:	89a3803a 	cmpltu	r17,r17,r6
    c2b4:	1887c83a 	sub	r3,r3,r2
    c2b8:	1c47c83a 	sub	r3,r3,r17
    c2bc:	3023883a 	mov	r17,r6
    c2c0:	1880202c 	andhi	r2,r3,128
    c2c4:	10002326 	beq	r2,zero,c354 <__subdf3+0x20c>
    c2c8:	04c02034 	movhi	r19,128
    c2cc:	9cffffc4 	addi	r19,r19,-1
    c2d0:	1ce6703a 	and	r19,r3,r19
    c2d4:	98007a26 	beq	r19,zero,c4c0 <__subdf3+0x378>
    c2d8:	9809883a 	mov	r4,r19
    c2dc:	000cc480 	call	cc48 <__clzsi2>
    c2e0:	113ffe04 	addi	r4,r2,-8
    c2e4:	00c007c4 	movi	r3,31
    c2e8:	19007b16 	blt	r3,r4,c4d8 <__subdf3+0x390>
    c2ec:	00800804 	movi	r2,32
    c2f0:	1105c83a 	sub	r2,r2,r4
    c2f4:	8884d83a 	srl	r2,r17,r2
    c2f8:	9906983a 	sll	r3,r19,r4
    c2fc:	8922983a 	sll	r17,r17,r4
    c300:	10c4b03a 	or	r2,r2,r3
    c304:	24007816 	blt	r4,r16,c4e8 <__subdf3+0x3a0>
    c308:	2421c83a 	sub	r16,r4,r16
    c30c:	80c00044 	addi	r3,r16,1
    c310:	010007c4 	movi	r4,31
    c314:	20c09516 	blt	r4,r3,c56c <__subdf3+0x424>
    c318:	01400804 	movi	r5,32
    c31c:	28cbc83a 	sub	r5,r5,r3
    c320:	88c8d83a 	srl	r4,r17,r3
    c324:	8962983a 	sll	r17,r17,r5
    c328:	114a983a 	sll	r5,r2,r5
    c32c:	10c6d83a 	srl	r3,r2,r3
    c330:	8804c03a 	cmpne	r2,r17,zero
    c334:	290ab03a 	or	r5,r5,r4
    c338:	28a2b03a 	or	r17,r5,r2
    c33c:	0021883a 	mov	r16,zero
    c340:	003fa206 	br	c1cc <__subdf3+0x84>
    c344:	2090b03a 	or	r8,r4,r2
    c348:	40018e26 	beq	r8,zero,c984 <__subdf3+0x83c>
    c34c:	1007883a 	mov	r3,r2
    c350:	2023883a 	mov	r17,r4
    c354:	888001cc 	andi	r2,r17,7
    c358:	103f9e1e 	bne	r2,zero,c1d4 <__subdf3+0x8c>
    c35c:	1804977a 	slli	r2,r3,29
    c360:	8822d0fa 	srli	r17,r17,3
    c364:	1810d0fa 	srli	r8,r3,3
    c368:	9100004c 	andi	r4,r18,1
    c36c:	1444b03a 	or	r2,r2,r17
    c370:	00c1ffc4 	movi	r3,2047
    c374:	80c02826 	beq	r16,r3,c418 <__subdf3+0x2d0>
    c378:	01400434 	movhi	r5,16
    c37c:	297fffc4 	addi	r5,r5,-1
    c380:	80e0703a 	and	r16,r16,r3
    c384:	414a703a 	and	r5,r8,r5
    c388:	003fa806 	br	c22c <__subdf3+0xe4>
    c38c:	0080630e 	bge	zero,r2,c51c <__subdf3+0x3d4>
    c390:	48003026 	beq	r9,zero,c454 <__subdf3+0x30c>
    c394:	0101ffc4 	movi	r4,2047
    c398:	813f8c26 	beq	r16,r4,c1cc <__subdf3+0x84>
    c39c:	29402034 	orhi	r5,r5,128
    c3a0:	01000e04 	movi	r4,56
    c3a4:	2080a90e 	bge	r4,r2,c64c <__subdf3+0x504>
    c3a8:	298cb03a 	or	r6,r5,r6
    c3ac:	3012c03a 	cmpne	r9,r6,zero
    c3b0:	0005883a 	mov	r2,zero
    c3b4:	4c53883a 	add	r9,r9,r17
    c3b8:	4c63803a 	cmpltu	r17,r9,r17
    c3bc:	10c7883a 	add	r3,r2,r3
    c3c0:	88c7883a 	add	r3,r17,r3
    c3c4:	4823883a 	mov	r17,r9
    c3c8:	1880202c 	andhi	r2,r3,128
    c3cc:	1000d026 	beq	r2,zero,c710 <__subdf3+0x5c8>
    c3d0:	84000044 	addi	r16,r16,1
    c3d4:	0081ffc4 	movi	r2,2047
    c3d8:	8080fe26 	beq	r16,r2,c7d4 <__subdf3+0x68c>
    c3dc:	00bfe034 	movhi	r2,65408
    c3e0:	10bfffc4 	addi	r2,r2,-1
    c3e4:	1886703a 	and	r3,r3,r2
    c3e8:	880ad07a 	srli	r5,r17,1
    c3ec:	180497fa 	slli	r2,r3,31
    c3f0:	8900004c 	andi	r4,r17,1
    c3f4:	2922b03a 	or	r17,r5,r4
    c3f8:	1806d07a 	srli	r3,r3,1
    c3fc:	1462b03a 	or	r17,r2,r17
    c400:	3825883a 	mov	r18,r7
    c404:	003f7106 	br	c1cc <__subdf3+0x84>
    c408:	2984b03a 	or	r2,r5,r6
    c40c:	103f6826 	beq	r2,zero,c1b0 <__subdf3+0x68>
    c410:	39c03fcc 	andi	r7,r7,255
    c414:	003f6706 	br	c1b4 <__subdf3+0x6c>
    c418:	4086b03a 	or	r3,r8,r2
    c41c:	18015226 	beq	r3,zero,c968 <__subdf3+0x820>
    c420:	00c00434 	movhi	r3,16
    c424:	41400234 	orhi	r5,r8,8
    c428:	18ffffc4 	addi	r3,r3,-1
    c42c:	28ca703a 	and	r5,r5,r3
    c430:	003f7e06 	br	c22c <__subdf3+0xe4>
    c434:	10bfffc4 	addi	r2,r2,-1
    c438:	1000491e 	bne	r2,zero,c560 <__subdf3+0x418>
    c43c:	898fc83a 	sub	r7,r17,r6
    c440:	89e3803a 	cmpltu	r17,r17,r7
    c444:	1947c83a 	sub	r3,r3,r5
    c448:	1c47c83a 	sub	r3,r3,r17
    c44c:	3823883a 	mov	r17,r7
    c450:	003f9b06 	br	c2c0 <__subdf3+0x178>
    c454:	2988b03a 	or	r4,r5,r6
    c458:	203f5c26 	beq	r4,zero,c1cc <__subdf3+0x84>
    c45c:	10bfffc4 	addi	r2,r2,-1
    c460:	1000931e 	bne	r2,zero,c6b0 <__subdf3+0x568>
    c464:	898d883a 	add	r6,r17,r6
    c468:	3463803a 	cmpltu	r17,r6,r17
    c46c:	1947883a 	add	r3,r3,r5
    c470:	88c7883a 	add	r3,r17,r3
    c474:	3023883a 	mov	r17,r6
    c478:	003fd306 	br	c3c8 <__subdf3+0x280>
    c47c:	1000541e 	bne	r2,zero,c5d0 <__subdf3+0x488>
    c480:	80800044 	addi	r2,r16,1
    c484:	1081ffcc 	andi	r2,r2,2047
    c488:	01000044 	movi	r4,1
    c48c:	2080a20e 	bge	r4,r2,c718 <__subdf3+0x5d0>
    c490:	8989c83a 	sub	r4,r17,r6
    c494:	8905803a 	cmpltu	r2,r17,r4
    c498:	1967c83a 	sub	r19,r3,r5
    c49c:	98a7c83a 	sub	r19,r19,r2
    c4a0:	9880202c 	andhi	r2,r19,128
    c4a4:	10006326 	beq	r2,zero,c634 <__subdf3+0x4ec>
    c4a8:	3463c83a 	sub	r17,r6,r17
    c4ac:	28c7c83a 	sub	r3,r5,r3
    c4b0:	344d803a 	cmpltu	r6,r6,r17
    c4b4:	19a7c83a 	sub	r19,r3,r6
    c4b8:	3825883a 	mov	r18,r7
    c4bc:	983f861e 	bne	r19,zero,c2d8 <__subdf3+0x190>
    c4c0:	8809883a 	mov	r4,r17
    c4c4:	000cc480 	call	cc48 <__clzsi2>
    c4c8:	10800804 	addi	r2,r2,32
    c4cc:	113ffe04 	addi	r4,r2,-8
    c4d0:	00c007c4 	movi	r3,31
    c4d4:	193f850e 	bge	r3,r4,c2ec <__subdf3+0x1a4>
    c4d8:	10bff604 	addi	r2,r2,-40
    c4dc:	8884983a 	sll	r2,r17,r2
    c4e0:	0023883a 	mov	r17,zero
    c4e4:	243f880e 	bge	r4,r16,c308 <__subdf3+0x1c0>
    c4e8:	00ffe034 	movhi	r3,65408
    c4ec:	18ffffc4 	addi	r3,r3,-1
    c4f0:	8121c83a 	sub	r16,r16,r4
    c4f4:	10c6703a 	and	r3,r2,r3
    c4f8:	003f3406 	br	c1cc <__subdf3+0x84>
    c4fc:	9100004c 	andi	r4,r18,1
    c500:	000b883a 	mov	r5,zero
    c504:	0005883a 	mov	r2,zero
    c508:	003f4806 	br	c22c <__subdf3+0xe4>
    c50c:	298cb03a 	or	r6,r5,r6
    c510:	300cc03a 	cmpne	r6,r6,zero
    c514:	0005883a 	mov	r2,zero
    c518:	003f6406 	br	c2ac <__subdf3+0x164>
    c51c:	10009a1e 	bne	r2,zero,c788 <__subdf3+0x640>
    c520:	82400044 	addi	r9,r16,1
    c524:	4881ffcc 	andi	r2,r9,2047
    c528:	02800044 	movi	r10,1
    c52c:	5080670e 	bge	r10,r2,c6cc <__subdf3+0x584>
    c530:	0081ffc4 	movi	r2,2047
    c534:	4880af26 	beq	r9,r2,c7f4 <__subdf3+0x6ac>
    c538:	898d883a 	add	r6,r17,r6
    c53c:	1945883a 	add	r2,r3,r5
    c540:	3447803a 	cmpltu	r3,r6,r17
    c544:	1887883a 	add	r3,r3,r2
    c548:	182297fa 	slli	r17,r3,31
    c54c:	300cd07a 	srli	r6,r6,1
    c550:	1806d07a 	srli	r3,r3,1
    c554:	4821883a 	mov	r16,r9
    c558:	89a2b03a 	or	r17,r17,r6
    c55c:	003f1b06 	br	c1cc <__subdf3+0x84>
    c560:	0101ffc4 	movi	r4,2047
    c564:	813f441e 	bne	r16,r4,c278 <__subdf3+0x130>
    c568:	003f1806 	br	c1cc <__subdf3+0x84>
    c56c:	843ff844 	addi	r16,r16,-31
    c570:	01400804 	movi	r5,32
    c574:	1408d83a 	srl	r4,r2,r16
    c578:	19405026 	beq	r3,r5,c6bc <__subdf3+0x574>
    c57c:	01401004 	movi	r5,64
    c580:	28c7c83a 	sub	r3,r5,r3
    c584:	10c4983a 	sll	r2,r2,r3
    c588:	88a2b03a 	or	r17,r17,r2
    c58c:	8822c03a 	cmpne	r17,r17,zero
    c590:	2462b03a 	or	r17,r4,r17
    c594:	0007883a 	mov	r3,zero
    c598:	0021883a 	mov	r16,zero
    c59c:	003f6d06 	br	c354 <__subdf3+0x20c>
    c5a0:	11fff804 	addi	r7,r2,-32
    c5a4:	01000804 	movi	r4,32
    c5a8:	29ced83a 	srl	r7,r5,r7
    c5ac:	11004526 	beq	r2,r4,c6c4 <__subdf3+0x57c>
    c5b0:	01001004 	movi	r4,64
    c5b4:	2089c83a 	sub	r4,r4,r2
    c5b8:	2904983a 	sll	r2,r5,r4
    c5bc:	118cb03a 	or	r6,r2,r6
    c5c0:	300cc03a 	cmpne	r6,r6,zero
    c5c4:	398cb03a 	or	r6,r7,r6
    c5c8:	0005883a 	mov	r2,zero
    c5cc:	003f3706 	br	c2ac <__subdf3+0x164>
    c5d0:	80002a26 	beq	r16,zero,c67c <__subdf3+0x534>
    c5d4:	0101ffc4 	movi	r4,2047
    c5d8:	49006626 	beq	r9,r4,c774 <__subdf3+0x62c>
    c5dc:	0085c83a 	sub	r2,zero,r2
    c5e0:	18c02034 	orhi	r3,r3,128
    c5e4:	01000e04 	movi	r4,56
    c5e8:	20807e16 	blt	r4,r2,c7e4 <__subdf3+0x69c>
    c5ec:	010007c4 	movi	r4,31
    c5f0:	2080e716 	blt	r4,r2,c990 <__subdf3+0x848>
    c5f4:	01000804 	movi	r4,32
    c5f8:	2089c83a 	sub	r4,r4,r2
    c5fc:	1914983a 	sll	r10,r3,r4
    c600:	8890d83a 	srl	r8,r17,r2
    c604:	8908983a 	sll	r4,r17,r4
    c608:	1884d83a 	srl	r2,r3,r2
    c60c:	5222b03a 	or	r17,r10,r8
    c610:	2006c03a 	cmpne	r3,r4,zero
    c614:	88e2b03a 	or	r17,r17,r3
    c618:	3463c83a 	sub	r17,r6,r17
    c61c:	2885c83a 	sub	r2,r5,r2
    c620:	344d803a 	cmpltu	r6,r6,r17
    c624:	1187c83a 	sub	r3,r2,r6
    c628:	4821883a 	mov	r16,r9
    c62c:	3825883a 	mov	r18,r7
    c630:	003f2306 	br	c2c0 <__subdf3+0x178>
    c634:	24d0b03a 	or	r8,r4,r19
    c638:	40001b1e 	bne	r8,zero,c6a8 <__subdf3+0x560>
    c63c:	0005883a 	mov	r2,zero
    c640:	0009883a 	mov	r4,zero
    c644:	0021883a 	mov	r16,zero
    c648:	003f4906 	br	c370 <__subdf3+0x228>
    c64c:	010007c4 	movi	r4,31
    c650:	20803a16 	blt	r4,r2,c73c <__subdf3+0x5f4>
    c654:	01000804 	movi	r4,32
    c658:	2089c83a 	sub	r4,r4,r2
    c65c:	2912983a 	sll	r9,r5,r4
    c660:	3090d83a 	srl	r8,r6,r2
    c664:	3108983a 	sll	r4,r6,r4
    c668:	2884d83a 	srl	r2,r5,r2
    c66c:	4a12b03a 	or	r9,r9,r8
    c670:	2008c03a 	cmpne	r4,r4,zero
    c674:	4912b03a 	or	r9,r9,r4
    c678:	003f4e06 	br	c3b4 <__subdf3+0x26c>
    c67c:	1c48b03a 	or	r4,r3,r17
    c680:	20003c26 	beq	r4,zero,c774 <__subdf3+0x62c>
    c684:	0084303a 	nor	r2,zero,r2
    c688:	1000381e 	bne	r2,zero,c76c <__subdf3+0x624>
    c68c:	3463c83a 	sub	r17,r6,r17
    c690:	28c5c83a 	sub	r2,r5,r3
    c694:	344d803a 	cmpltu	r6,r6,r17
    c698:	1187c83a 	sub	r3,r2,r6
    c69c:	4821883a 	mov	r16,r9
    c6a0:	3825883a 	mov	r18,r7
    c6a4:	003f0606 	br	c2c0 <__subdf3+0x178>
    c6a8:	2023883a 	mov	r17,r4
    c6ac:	003f0906 	br	c2d4 <__subdf3+0x18c>
    c6b0:	0101ffc4 	movi	r4,2047
    c6b4:	813f3a1e 	bne	r16,r4,c3a0 <__subdf3+0x258>
    c6b8:	003ec406 	br	c1cc <__subdf3+0x84>
    c6bc:	0005883a 	mov	r2,zero
    c6c0:	003fb106 	br	c588 <__subdf3+0x440>
    c6c4:	0005883a 	mov	r2,zero
    c6c8:	003fbc06 	br	c5bc <__subdf3+0x474>
    c6cc:	1c44b03a 	or	r2,r3,r17
    c6d0:	80008e1e 	bne	r16,zero,c90c <__subdf3+0x7c4>
    c6d4:	1000c826 	beq	r2,zero,c9f8 <__subdf3+0x8b0>
    c6d8:	2984b03a 	or	r2,r5,r6
    c6dc:	103ebb26 	beq	r2,zero,c1cc <__subdf3+0x84>
    c6e0:	8989883a 	add	r4,r17,r6
    c6e4:	1945883a 	add	r2,r3,r5
    c6e8:	2447803a 	cmpltu	r3,r4,r17
    c6ec:	1887883a 	add	r3,r3,r2
    c6f0:	1880202c 	andhi	r2,r3,128
    c6f4:	2023883a 	mov	r17,r4
    c6f8:	103f1626 	beq	r2,zero,c354 <__subdf3+0x20c>
    c6fc:	00bfe034 	movhi	r2,65408
    c700:	10bfffc4 	addi	r2,r2,-1
    c704:	5021883a 	mov	r16,r10
    c708:	1886703a 	and	r3,r3,r2
    c70c:	003eaf06 	br	c1cc <__subdf3+0x84>
    c710:	3825883a 	mov	r18,r7
    c714:	003f0f06 	br	c354 <__subdf3+0x20c>
    c718:	1c44b03a 	or	r2,r3,r17
    c71c:	8000251e 	bne	r16,zero,c7b4 <__subdf3+0x66c>
    c720:	1000661e 	bne	r2,zero,c8bc <__subdf3+0x774>
    c724:	2990b03a 	or	r8,r5,r6
    c728:	40009626 	beq	r8,zero,c984 <__subdf3+0x83c>
    c72c:	2807883a 	mov	r3,r5
    c730:	3023883a 	mov	r17,r6
    c734:	3825883a 	mov	r18,r7
    c738:	003ea406 	br	c1cc <__subdf3+0x84>
    c73c:	127ff804 	addi	r9,r2,-32
    c740:	01000804 	movi	r4,32
    c744:	2a52d83a 	srl	r9,r5,r9
    c748:	11008c26 	beq	r2,r4,c97c <__subdf3+0x834>
    c74c:	01001004 	movi	r4,64
    c750:	2085c83a 	sub	r2,r4,r2
    c754:	2884983a 	sll	r2,r5,r2
    c758:	118cb03a 	or	r6,r2,r6
    c75c:	300cc03a 	cmpne	r6,r6,zero
    c760:	4992b03a 	or	r9,r9,r6
    c764:	0005883a 	mov	r2,zero
    c768:	003f1206 	br	c3b4 <__subdf3+0x26c>
    c76c:	0101ffc4 	movi	r4,2047
    c770:	493f9c1e 	bne	r9,r4,c5e4 <__subdf3+0x49c>
    c774:	2807883a 	mov	r3,r5
    c778:	3023883a 	mov	r17,r6
    c77c:	4821883a 	mov	r16,r9
    c780:	3825883a 	mov	r18,r7
    c784:	003e9106 	br	c1cc <__subdf3+0x84>
    c788:	80001f1e 	bne	r16,zero,c808 <__subdf3+0x6c0>
    c78c:	1c48b03a 	or	r4,r3,r17
    c790:	20005a26 	beq	r4,zero,c8fc <__subdf3+0x7b4>
    c794:	0084303a 	nor	r2,zero,r2
    c798:	1000561e 	bne	r2,zero,c8f4 <__subdf3+0x7ac>
    c79c:	89a3883a 	add	r17,r17,r6
    c7a0:	1945883a 	add	r2,r3,r5
    c7a4:	898d803a 	cmpltu	r6,r17,r6
    c7a8:	3087883a 	add	r3,r6,r2
    c7ac:	4821883a 	mov	r16,r9
    c7b0:	003f0506 	br	c3c8 <__subdf3+0x280>
    c7b4:	10002b1e 	bne	r2,zero,c864 <__subdf3+0x71c>
    c7b8:	2984b03a 	or	r2,r5,r6
    c7bc:	10008026 	beq	r2,zero,c9c0 <__subdf3+0x878>
    c7c0:	2807883a 	mov	r3,r5
    c7c4:	3023883a 	mov	r17,r6
    c7c8:	3825883a 	mov	r18,r7
    c7cc:	0401ffc4 	movi	r16,2047
    c7d0:	003e7e06 	br	c1cc <__subdf3+0x84>
    c7d4:	3809883a 	mov	r4,r7
    c7d8:	0011883a 	mov	r8,zero
    c7dc:	0005883a 	mov	r2,zero
    c7e0:	003ee306 	br	c370 <__subdf3+0x228>
    c7e4:	1c62b03a 	or	r17,r3,r17
    c7e8:	8822c03a 	cmpne	r17,r17,zero
    c7ec:	0005883a 	mov	r2,zero
    c7f0:	003f8906 	br	c618 <__subdf3+0x4d0>
    c7f4:	3809883a 	mov	r4,r7
    c7f8:	4821883a 	mov	r16,r9
    c7fc:	0011883a 	mov	r8,zero
    c800:	0005883a 	mov	r2,zero
    c804:	003eda06 	br	c370 <__subdf3+0x228>
    c808:	0101ffc4 	movi	r4,2047
    c80c:	49003b26 	beq	r9,r4,c8fc <__subdf3+0x7b4>
    c810:	0085c83a 	sub	r2,zero,r2
    c814:	18c02034 	orhi	r3,r3,128
    c818:	01000e04 	movi	r4,56
    c81c:	20806e16 	blt	r4,r2,c9d8 <__subdf3+0x890>
    c820:	010007c4 	movi	r4,31
    c824:	20807716 	blt	r4,r2,ca04 <__subdf3+0x8bc>
    c828:	01000804 	movi	r4,32
    c82c:	2089c83a 	sub	r4,r4,r2
    c830:	1914983a 	sll	r10,r3,r4
    c834:	8890d83a 	srl	r8,r17,r2
    c838:	8908983a 	sll	r4,r17,r4
    c83c:	1884d83a 	srl	r2,r3,r2
    c840:	5222b03a 	or	r17,r10,r8
    c844:	2006c03a 	cmpne	r3,r4,zero
    c848:	88e2b03a 	or	r17,r17,r3
    c84c:	89a3883a 	add	r17,r17,r6
    c850:	1145883a 	add	r2,r2,r5
    c854:	898d803a 	cmpltu	r6,r17,r6
    c858:	3087883a 	add	r3,r6,r2
    c85c:	4821883a 	mov	r16,r9
    c860:	003ed906 	br	c3c8 <__subdf3+0x280>
    c864:	2984b03a 	or	r2,r5,r6
    c868:	10004226 	beq	r2,zero,c974 <__subdf3+0x82c>
    c86c:	1808d0fa 	srli	r4,r3,3
    c870:	8822d0fa 	srli	r17,r17,3
    c874:	1806977a 	slli	r3,r3,29
    c878:	2080022c 	andhi	r2,r4,8
    c87c:	1c62b03a 	or	r17,r3,r17
    c880:	10000826 	beq	r2,zero,c8a4 <__subdf3+0x75c>
    c884:	2812d0fa 	srli	r9,r5,3
    c888:	4880022c 	andhi	r2,r9,8
    c88c:	1000051e 	bne	r2,zero,c8a4 <__subdf3+0x75c>
    c890:	300cd0fa 	srli	r6,r6,3
    c894:	2804977a 	slli	r2,r5,29
    c898:	4809883a 	mov	r4,r9
    c89c:	3825883a 	mov	r18,r7
    c8a0:	11a2b03a 	or	r17,r2,r6
    c8a4:	8806d77a 	srli	r3,r17,29
    c8a8:	200890fa 	slli	r4,r4,3
    c8ac:	882290fa 	slli	r17,r17,3
    c8b0:	0401ffc4 	movi	r16,2047
    c8b4:	1906b03a 	or	r3,r3,r4
    c8b8:	003e4406 	br	c1cc <__subdf3+0x84>
    c8bc:	2984b03a 	or	r2,r5,r6
    c8c0:	103e4226 	beq	r2,zero,c1cc <__subdf3+0x84>
    c8c4:	8989c83a 	sub	r4,r17,r6
    c8c8:	8911803a 	cmpltu	r8,r17,r4
    c8cc:	1945c83a 	sub	r2,r3,r5
    c8d0:	1205c83a 	sub	r2,r2,r8
    c8d4:	1200202c 	andhi	r8,r2,128
    c8d8:	403e9a26 	beq	r8,zero,c344 <__subdf3+0x1fc>
    c8dc:	3463c83a 	sub	r17,r6,r17
    c8e0:	28c5c83a 	sub	r2,r5,r3
    c8e4:	344d803a 	cmpltu	r6,r6,r17
    c8e8:	1187c83a 	sub	r3,r2,r6
    c8ec:	3825883a 	mov	r18,r7
    c8f0:	003e3606 	br	c1cc <__subdf3+0x84>
    c8f4:	0101ffc4 	movi	r4,2047
    c8f8:	493fc71e 	bne	r9,r4,c818 <__subdf3+0x6d0>
    c8fc:	2807883a 	mov	r3,r5
    c900:	3023883a 	mov	r17,r6
    c904:	4821883a 	mov	r16,r9
    c908:	003e3006 	br	c1cc <__subdf3+0x84>
    c90c:	10003626 	beq	r2,zero,c9e8 <__subdf3+0x8a0>
    c910:	2984b03a 	or	r2,r5,r6
    c914:	10001726 	beq	r2,zero,c974 <__subdf3+0x82c>
    c918:	1808d0fa 	srli	r4,r3,3
    c91c:	8822d0fa 	srli	r17,r17,3
    c920:	1806977a 	slli	r3,r3,29
    c924:	2080022c 	andhi	r2,r4,8
    c928:	1c62b03a 	or	r17,r3,r17
    c92c:	10000726 	beq	r2,zero,c94c <__subdf3+0x804>
    c930:	2812d0fa 	srli	r9,r5,3
    c934:	4880022c 	andhi	r2,r9,8
    c938:	1000041e 	bne	r2,zero,c94c <__subdf3+0x804>
    c93c:	300cd0fa 	srli	r6,r6,3
    c940:	2804977a 	slli	r2,r5,29
    c944:	4809883a 	mov	r4,r9
    c948:	11a2b03a 	or	r17,r2,r6
    c94c:	8806d77a 	srli	r3,r17,29
    c950:	200890fa 	slli	r4,r4,3
    c954:	882290fa 	slli	r17,r17,3
    c958:	3825883a 	mov	r18,r7
    c95c:	1906b03a 	or	r3,r3,r4
    c960:	0401ffc4 	movi	r16,2047
    c964:	003e1906 	br	c1cc <__subdf3+0x84>
    c968:	000b883a 	mov	r5,zero
    c96c:	0005883a 	mov	r2,zero
    c970:	003e2e06 	br	c22c <__subdf3+0xe4>
    c974:	0401ffc4 	movi	r16,2047
    c978:	003e1406 	br	c1cc <__subdf3+0x84>
    c97c:	0005883a 	mov	r2,zero
    c980:	003f7506 	br	c758 <__subdf3+0x610>
    c984:	0005883a 	mov	r2,zero
    c988:	0009883a 	mov	r4,zero
    c98c:	003e7806 	br	c370 <__subdf3+0x228>
    c990:	123ff804 	addi	r8,r2,-32
    c994:	01000804 	movi	r4,32
    c998:	1a10d83a 	srl	r8,r3,r8
    c99c:	11002526 	beq	r2,r4,ca34 <__subdf3+0x8ec>
    c9a0:	01001004 	movi	r4,64
    c9a4:	2085c83a 	sub	r2,r4,r2
    c9a8:	1884983a 	sll	r2,r3,r2
    c9ac:	1444b03a 	or	r2,r2,r17
    c9b0:	1004c03a 	cmpne	r2,r2,zero
    c9b4:	40a2b03a 	or	r17,r8,r2
    c9b8:	0005883a 	mov	r2,zero
    c9bc:	003f1606 	br	c618 <__subdf3+0x4d0>
    c9c0:	02000434 	movhi	r8,16
    c9c4:	0009883a 	mov	r4,zero
    c9c8:	423fffc4 	addi	r8,r8,-1
    c9cc:	00bfffc4 	movi	r2,-1
    c9d0:	0401ffc4 	movi	r16,2047
    c9d4:	003e6606 	br	c370 <__subdf3+0x228>
    c9d8:	1c62b03a 	or	r17,r3,r17
    c9dc:	8822c03a 	cmpne	r17,r17,zero
    c9e0:	0005883a 	mov	r2,zero
    c9e4:	003f9906 	br	c84c <__subdf3+0x704>
    c9e8:	2807883a 	mov	r3,r5
    c9ec:	3023883a 	mov	r17,r6
    c9f0:	0401ffc4 	movi	r16,2047
    c9f4:	003df506 	br	c1cc <__subdf3+0x84>
    c9f8:	2807883a 	mov	r3,r5
    c9fc:	3023883a 	mov	r17,r6
    ca00:	003df206 	br	c1cc <__subdf3+0x84>
    ca04:	123ff804 	addi	r8,r2,-32
    ca08:	01000804 	movi	r4,32
    ca0c:	1a10d83a 	srl	r8,r3,r8
    ca10:	11000a26 	beq	r2,r4,ca3c <__subdf3+0x8f4>
    ca14:	01001004 	movi	r4,64
    ca18:	2085c83a 	sub	r2,r4,r2
    ca1c:	1884983a 	sll	r2,r3,r2
    ca20:	1444b03a 	or	r2,r2,r17
    ca24:	1004c03a 	cmpne	r2,r2,zero
    ca28:	40a2b03a 	or	r17,r8,r2
    ca2c:	0005883a 	mov	r2,zero
    ca30:	003f8606 	br	c84c <__subdf3+0x704>
    ca34:	0005883a 	mov	r2,zero
    ca38:	003fdc06 	br	c9ac <__subdf3+0x864>
    ca3c:	0005883a 	mov	r2,zero
    ca40:	003ff706 	br	ca20 <__subdf3+0x8d8>

0000ca44 <__fixdfsi>:
    ca44:	280cd53a 	srli	r6,r5,20
    ca48:	00c00434 	movhi	r3,16
    ca4c:	18ffffc4 	addi	r3,r3,-1
    ca50:	3181ffcc 	andi	r6,r6,2047
    ca54:	01c0ff84 	movi	r7,1022
    ca58:	28c6703a 	and	r3,r5,r3
    ca5c:	280ad7fa 	srli	r5,r5,31
    ca60:	3980120e 	bge	r7,r6,caac <__fixdfsi+0x68>
    ca64:	00810744 	movi	r2,1053
    ca68:	11800c16 	blt	r2,r6,ca9c <__fixdfsi+0x58>
    ca6c:	00810cc4 	movi	r2,1075
    ca70:	1185c83a 	sub	r2,r2,r6
    ca74:	01c007c4 	movi	r7,31
    ca78:	18c00434 	orhi	r3,r3,16
    ca7c:	38800d16 	blt	r7,r2,cab4 <__fixdfsi+0x70>
    ca80:	31befb44 	addi	r6,r6,-1043
    ca84:	2084d83a 	srl	r2,r4,r2
    ca88:	1986983a 	sll	r3,r3,r6
    ca8c:	1884b03a 	or	r2,r3,r2
    ca90:	28000726 	beq	r5,zero,cab0 <__fixdfsi+0x6c>
    ca94:	0085c83a 	sub	r2,zero,r2
    ca98:	f800283a 	ret
    ca9c:	00a00034 	movhi	r2,32768
    caa0:	10bfffc4 	addi	r2,r2,-1
    caa4:	2885883a 	add	r2,r5,r2
    caa8:	f800283a 	ret
    caac:	0005883a 	mov	r2,zero
    cab0:	f800283a 	ret
    cab4:	008104c4 	movi	r2,1043
    cab8:	1185c83a 	sub	r2,r2,r6
    cabc:	1884d83a 	srl	r2,r3,r2
    cac0:	003ff306 	br	ca90 <__fixdfsi+0x4c>

0000cac4 <__floatsidf>:
    cac4:	defffd04 	addi	sp,sp,-12
    cac8:	dfc00215 	stw	ra,8(sp)
    cacc:	dc400115 	stw	r17,4(sp)
    cad0:	dc000015 	stw	r16,0(sp)
    cad4:	20002b26 	beq	r4,zero,cb84 <__floatsidf+0xc0>
    cad8:	2023883a 	mov	r17,r4
    cadc:	2020d7fa 	srli	r16,r4,31
    cae0:	20002d16 	blt	r4,zero,cb98 <__floatsidf+0xd4>
    cae4:	8809883a 	mov	r4,r17
    cae8:	000cc480 	call	cc48 <__clzsi2>
    caec:	01410784 	movi	r5,1054
    caf0:	288bc83a 	sub	r5,r5,r2
    caf4:	01010cc4 	movi	r4,1075
    caf8:	2149c83a 	sub	r4,r4,r5
    cafc:	00c007c4 	movi	r3,31
    cb00:	1900160e 	bge	r3,r4,cb5c <__floatsidf+0x98>
    cb04:	00c104c4 	movi	r3,1043
    cb08:	1947c83a 	sub	r3,r3,r5
    cb0c:	88c6983a 	sll	r3,r17,r3
    cb10:	00800434 	movhi	r2,16
    cb14:	10bfffc4 	addi	r2,r2,-1
    cb18:	1886703a 	and	r3,r3,r2
    cb1c:	2941ffcc 	andi	r5,r5,2047
    cb20:	800d883a 	mov	r6,r16
    cb24:	0005883a 	mov	r2,zero
    cb28:	280a953a 	slli	r5,r5,20
    cb2c:	31803fcc 	andi	r6,r6,255
    cb30:	01000434 	movhi	r4,16
    cb34:	300c97fa 	slli	r6,r6,31
    cb38:	213fffc4 	addi	r4,r4,-1
    cb3c:	1906703a 	and	r3,r3,r4
    cb40:	1946b03a 	or	r3,r3,r5
    cb44:	1986b03a 	or	r3,r3,r6
    cb48:	dfc00217 	ldw	ra,8(sp)
    cb4c:	dc400117 	ldw	r17,4(sp)
    cb50:	dc000017 	ldw	r16,0(sp)
    cb54:	dec00304 	addi	sp,sp,12
    cb58:	f800283a 	ret
    cb5c:	00c002c4 	movi	r3,11
    cb60:	1887c83a 	sub	r3,r3,r2
    cb64:	88c6d83a 	srl	r3,r17,r3
    cb68:	8904983a 	sll	r2,r17,r4
    cb6c:	01000434 	movhi	r4,16
    cb70:	213fffc4 	addi	r4,r4,-1
    cb74:	2941ffcc 	andi	r5,r5,2047
    cb78:	1906703a 	and	r3,r3,r4
    cb7c:	800d883a 	mov	r6,r16
    cb80:	003fe906 	br	cb28 <__floatsidf+0x64>
    cb84:	000d883a 	mov	r6,zero
    cb88:	000b883a 	mov	r5,zero
    cb8c:	0007883a 	mov	r3,zero
    cb90:	0005883a 	mov	r2,zero
    cb94:	003fe406 	br	cb28 <__floatsidf+0x64>
    cb98:	0123c83a 	sub	r17,zero,r4
    cb9c:	003fd106 	br	cae4 <__floatsidf+0x20>

0000cba0 <__floatunsidf>:
    cba0:	defffe04 	addi	sp,sp,-8
    cba4:	dc000015 	stw	r16,0(sp)
    cba8:	dfc00115 	stw	ra,4(sp)
    cbac:	2021883a 	mov	r16,r4
    cbb0:	20002226 	beq	r4,zero,cc3c <__floatunsidf+0x9c>
    cbb4:	000cc480 	call	cc48 <__clzsi2>
    cbb8:	01010784 	movi	r4,1054
    cbbc:	2089c83a 	sub	r4,r4,r2
    cbc0:	01810cc4 	movi	r6,1075
    cbc4:	310dc83a 	sub	r6,r6,r4
    cbc8:	00c007c4 	movi	r3,31
    cbcc:	1980120e 	bge	r3,r6,cc18 <__floatunsidf+0x78>
    cbd0:	00c104c4 	movi	r3,1043
    cbd4:	1907c83a 	sub	r3,r3,r4
    cbd8:	80ca983a 	sll	r5,r16,r3
    cbdc:	00800434 	movhi	r2,16
    cbe0:	10bfffc4 	addi	r2,r2,-1
    cbe4:	2101ffcc 	andi	r4,r4,2047
    cbe8:	0021883a 	mov	r16,zero
    cbec:	288a703a 	and	r5,r5,r2
    cbf0:	2008953a 	slli	r4,r4,20
    cbf4:	00c00434 	movhi	r3,16
    cbf8:	18ffffc4 	addi	r3,r3,-1
    cbfc:	28c6703a 	and	r3,r5,r3
    cc00:	8005883a 	mov	r2,r16
    cc04:	1906b03a 	or	r3,r3,r4
    cc08:	dfc00117 	ldw	ra,4(sp)
    cc0c:	dc000017 	ldw	r16,0(sp)
    cc10:	dec00204 	addi	sp,sp,8
    cc14:	f800283a 	ret
    cc18:	00c002c4 	movi	r3,11
    cc1c:	188bc83a 	sub	r5,r3,r2
    cc20:	814ad83a 	srl	r5,r16,r5
    cc24:	00c00434 	movhi	r3,16
    cc28:	18ffffc4 	addi	r3,r3,-1
    cc2c:	81a0983a 	sll	r16,r16,r6
    cc30:	2101ffcc 	andi	r4,r4,2047
    cc34:	28ca703a 	and	r5,r5,r3
    cc38:	003fed06 	br	cbf0 <__floatunsidf+0x50>
    cc3c:	0009883a 	mov	r4,zero
    cc40:	000b883a 	mov	r5,zero
    cc44:	003fea06 	br	cbf0 <__floatunsidf+0x50>

0000cc48 <__clzsi2>:
    cc48:	00bfffd4 	movui	r2,65535
    cc4c:	11000536 	bltu	r2,r4,cc64 <__clzsi2+0x1c>
    cc50:	00803fc4 	movi	r2,255
    cc54:	11000f36 	bltu	r2,r4,cc94 <__clzsi2+0x4c>
    cc58:	00800804 	movi	r2,32
    cc5c:	0007883a 	mov	r3,zero
    cc60:	00000506 	br	cc78 <__clzsi2+0x30>
    cc64:	00804034 	movhi	r2,256
    cc68:	10bfffc4 	addi	r2,r2,-1
    cc6c:	11000c2e 	bgeu	r2,r4,cca0 <__clzsi2+0x58>
    cc70:	00800204 	movi	r2,8
    cc74:	00c00604 	movi	r3,24
    cc78:	20c8d83a 	srl	r4,r4,r3
    cc7c:	00c000b4 	movhi	r3,2
    cc80:	18e5ff04 	addi	r3,r3,-26628
    cc84:	1909883a 	add	r4,r3,r4
    cc88:	20c00003 	ldbu	r3,0(r4)
    cc8c:	10c5c83a 	sub	r2,r2,r3
    cc90:	f800283a 	ret
    cc94:	00800604 	movi	r2,24
    cc98:	00c00204 	movi	r3,8
    cc9c:	003ff606 	br	cc78 <__clzsi2+0x30>
    cca0:	00800404 	movi	r2,16
    cca4:	1007883a 	mov	r3,r2
    cca8:	003ff306 	br	cc78 <__clzsi2+0x30>

0000ccac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ccac:	defffe04 	addi	sp,sp,-8
    ccb0:	dfc00115 	stw	ra,4(sp)
    ccb4:	df000015 	stw	fp,0(sp)
    ccb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ccbc:	008000b4 	movhi	r2,2
    ccc0:	10ae7004 	addi	r2,r2,-17984
    ccc4:	10800017 	ldw	r2,0(r2)
    ccc8:	10000526 	beq	r2,zero,cce0 <alt_get_errno+0x34>
    cccc:	008000b4 	movhi	r2,2
    ccd0:	10ae7004 	addi	r2,r2,-17984
    ccd4:	10800017 	ldw	r2,0(r2)
    ccd8:	103ee83a 	callr	r2
    ccdc:	00000206 	br	cce8 <alt_get_errno+0x3c>
    cce0:	008000b4 	movhi	r2,2
    cce4:	10b65104 	addi	r2,r2,-9916
}
    cce8:	e037883a 	mov	sp,fp
    ccec:	dfc00117 	ldw	ra,4(sp)
    ccf0:	df000017 	ldw	fp,0(sp)
    ccf4:	dec00204 	addi	sp,sp,8
    ccf8:	f800283a 	ret

0000ccfc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ccfc:	defffb04 	addi	sp,sp,-20
    cd00:	dfc00415 	stw	ra,16(sp)
    cd04:	df000315 	stw	fp,12(sp)
    cd08:	df000304 	addi	fp,sp,12
    cd0c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cd10:	e0bfff17 	ldw	r2,-4(fp)
    cd14:	10000616 	blt	r2,zero,cd30 <close+0x34>
    cd18:	e0bfff17 	ldw	r2,-4(fp)
    cd1c:	10c00324 	muli	r3,r2,12
    cd20:	008000b4 	movhi	r2,2
    cd24:	10a91b04 	addi	r2,r2,-23444
    cd28:	1885883a 	add	r2,r3,r2
    cd2c:	00000106 	br	cd34 <close+0x38>
    cd30:	0005883a 	mov	r2,zero
    cd34:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    cd38:	e0bffd17 	ldw	r2,-12(fp)
    cd3c:	10001926 	beq	r2,zero,cda4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    cd40:	e0bffd17 	ldw	r2,-12(fp)
    cd44:	10800017 	ldw	r2,0(r2)
    cd48:	10800417 	ldw	r2,16(r2)
    cd4c:	10000626 	beq	r2,zero,cd68 <close+0x6c>
    cd50:	e0bffd17 	ldw	r2,-12(fp)
    cd54:	10800017 	ldw	r2,0(r2)
    cd58:	10800417 	ldw	r2,16(r2)
    cd5c:	e13ffd17 	ldw	r4,-12(fp)
    cd60:	103ee83a 	callr	r2
    cd64:	00000106 	br	cd6c <close+0x70>
    cd68:	0005883a 	mov	r2,zero
    cd6c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    cd70:	e13fff17 	ldw	r4,-4(fp)
    cd74:	000d4200 	call	d420 <alt_release_fd>
    if (rval < 0)
    cd78:	e0bffe17 	ldw	r2,-8(fp)
    cd7c:	1000070e 	bge	r2,zero,cd9c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    cd80:	000ccac0 	call	ccac <alt_get_errno>
    cd84:	1007883a 	mov	r3,r2
    cd88:	e0bffe17 	ldw	r2,-8(fp)
    cd8c:	0085c83a 	sub	r2,zero,r2
    cd90:	18800015 	stw	r2,0(r3)
      return -1;
    cd94:	00bfffc4 	movi	r2,-1
    cd98:	00000706 	br	cdb8 <close+0xbc>
    }
    return 0;
    cd9c:	0005883a 	mov	r2,zero
    cda0:	00000506 	br	cdb8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cda4:	000ccac0 	call	ccac <alt_get_errno>
    cda8:	1007883a 	mov	r3,r2
    cdac:	00801444 	movi	r2,81
    cdb0:	18800015 	stw	r2,0(r3)
    return -1;
    cdb4:	00bfffc4 	movi	r2,-1
  }
}
    cdb8:	e037883a 	mov	sp,fp
    cdbc:	dfc00117 	ldw	ra,4(sp)
    cdc0:	df000017 	ldw	fp,0(sp)
    cdc4:	dec00204 	addi	sp,sp,8
    cdc8:	f800283a 	ret

0000cdcc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    cdcc:	defffc04 	addi	sp,sp,-16
    cdd0:	df000315 	stw	fp,12(sp)
    cdd4:	df000304 	addi	fp,sp,12
    cdd8:	e13ffd15 	stw	r4,-12(fp)
    cddc:	e17ffe15 	stw	r5,-8(fp)
    cde0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    cde4:	e0bfff17 	ldw	r2,-4(fp)
}
    cde8:	e037883a 	mov	sp,fp
    cdec:	df000017 	ldw	fp,0(sp)
    cdf0:	dec00104 	addi	sp,sp,4
    cdf4:	f800283a 	ret

0000cdf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cdf8:	defffe04 	addi	sp,sp,-8
    cdfc:	dfc00115 	stw	ra,4(sp)
    ce00:	df000015 	stw	fp,0(sp)
    ce04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ce08:	008000b4 	movhi	r2,2
    ce0c:	10ae7004 	addi	r2,r2,-17984
    ce10:	10800017 	ldw	r2,0(r2)
    ce14:	10000526 	beq	r2,zero,ce2c <alt_get_errno+0x34>
    ce18:	008000b4 	movhi	r2,2
    ce1c:	10ae7004 	addi	r2,r2,-17984
    ce20:	10800017 	ldw	r2,0(r2)
    ce24:	103ee83a 	callr	r2
    ce28:	00000206 	br	ce34 <alt_get_errno+0x3c>
    ce2c:	008000b4 	movhi	r2,2
    ce30:	10b65104 	addi	r2,r2,-9916
}
    ce34:	e037883a 	mov	sp,fp
    ce38:	dfc00117 	ldw	ra,4(sp)
    ce3c:	df000017 	ldw	fp,0(sp)
    ce40:	dec00204 	addi	sp,sp,8
    ce44:	f800283a 	ret

0000ce48 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    ce48:	defffb04 	addi	sp,sp,-20
    ce4c:	dfc00415 	stw	ra,16(sp)
    ce50:	df000315 	stw	fp,12(sp)
    ce54:	df000304 	addi	fp,sp,12
    ce58:	e13ffe15 	stw	r4,-8(fp)
    ce5c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ce60:	e0bffe17 	ldw	r2,-8(fp)
    ce64:	10000616 	blt	r2,zero,ce80 <fstat+0x38>
    ce68:	e0bffe17 	ldw	r2,-8(fp)
    ce6c:	10c00324 	muli	r3,r2,12
    ce70:	008000b4 	movhi	r2,2
    ce74:	10a91b04 	addi	r2,r2,-23444
    ce78:	1885883a 	add	r2,r3,r2
    ce7c:	00000106 	br	ce84 <fstat+0x3c>
    ce80:	0005883a 	mov	r2,zero
    ce84:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    ce88:	e0bffd17 	ldw	r2,-12(fp)
    ce8c:	10001026 	beq	r2,zero,ced0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    ce90:	e0bffd17 	ldw	r2,-12(fp)
    ce94:	10800017 	ldw	r2,0(r2)
    ce98:	10800817 	ldw	r2,32(r2)
    ce9c:	10000726 	beq	r2,zero,cebc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    cea0:	e0bffd17 	ldw	r2,-12(fp)
    cea4:	10800017 	ldw	r2,0(r2)
    cea8:	10800817 	ldw	r2,32(r2)
    ceac:	e17fff17 	ldw	r5,-4(fp)
    ceb0:	e13ffd17 	ldw	r4,-12(fp)
    ceb4:	103ee83a 	callr	r2
    ceb8:	00000a06 	br	cee4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    cebc:	e0bfff17 	ldw	r2,-4(fp)
    cec0:	00c80004 	movi	r3,8192
    cec4:	10c00115 	stw	r3,4(r2)
      return 0;
    cec8:	0005883a 	mov	r2,zero
    cecc:	00000506 	br	cee4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ced0:	000cdf80 	call	cdf8 <alt_get_errno>
    ced4:	1007883a 	mov	r3,r2
    ced8:	00801444 	movi	r2,81
    cedc:	18800015 	stw	r2,0(r3)
    return -1;
    cee0:	00bfffc4 	movi	r2,-1
  }
}
    cee4:	e037883a 	mov	sp,fp
    cee8:	dfc00117 	ldw	ra,4(sp)
    ceec:	df000017 	ldw	fp,0(sp)
    cef0:	dec00204 	addi	sp,sp,8
    cef4:	f800283a 	ret

0000cef8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cef8:	defffe04 	addi	sp,sp,-8
    cefc:	dfc00115 	stw	ra,4(sp)
    cf00:	df000015 	stw	fp,0(sp)
    cf04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cf08:	008000b4 	movhi	r2,2
    cf0c:	10ae7004 	addi	r2,r2,-17984
    cf10:	10800017 	ldw	r2,0(r2)
    cf14:	10000526 	beq	r2,zero,cf2c <alt_get_errno+0x34>
    cf18:	008000b4 	movhi	r2,2
    cf1c:	10ae7004 	addi	r2,r2,-17984
    cf20:	10800017 	ldw	r2,0(r2)
    cf24:	103ee83a 	callr	r2
    cf28:	00000206 	br	cf34 <alt_get_errno+0x3c>
    cf2c:	008000b4 	movhi	r2,2
    cf30:	10b65104 	addi	r2,r2,-9916
}
    cf34:	e037883a 	mov	sp,fp
    cf38:	dfc00117 	ldw	ra,4(sp)
    cf3c:	df000017 	ldw	fp,0(sp)
    cf40:	dec00204 	addi	sp,sp,8
    cf44:	f800283a 	ret

0000cf48 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    cf48:	deffed04 	addi	sp,sp,-76
    cf4c:	dfc01215 	stw	ra,72(sp)
    cf50:	df001115 	stw	fp,68(sp)
    cf54:	df001104 	addi	fp,sp,68
    cf58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cf5c:	e0bfff17 	ldw	r2,-4(fp)
    cf60:	10000616 	blt	r2,zero,cf7c <isatty+0x34>
    cf64:	e0bfff17 	ldw	r2,-4(fp)
    cf68:	10c00324 	muli	r3,r2,12
    cf6c:	008000b4 	movhi	r2,2
    cf70:	10a91b04 	addi	r2,r2,-23444
    cf74:	1885883a 	add	r2,r3,r2
    cf78:	00000106 	br	cf80 <isatty+0x38>
    cf7c:	0005883a 	mov	r2,zero
    cf80:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    cf84:	e0bfef17 	ldw	r2,-68(fp)
    cf88:	10000e26 	beq	r2,zero,cfc4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    cf8c:	e0bfef17 	ldw	r2,-68(fp)
    cf90:	10800017 	ldw	r2,0(r2)
    cf94:	10800817 	ldw	r2,32(r2)
    cf98:	1000021e 	bne	r2,zero,cfa4 <isatty+0x5c>
    {
      return 1;
    cf9c:	00800044 	movi	r2,1
    cfa0:	00000d06 	br	cfd8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    cfa4:	e0bff004 	addi	r2,fp,-64
    cfa8:	100b883a 	mov	r5,r2
    cfac:	e13fff17 	ldw	r4,-4(fp)
    cfb0:	000ce480 	call	ce48 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    cfb4:	e0bff117 	ldw	r2,-60(fp)
    cfb8:	10880020 	cmpeqi	r2,r2,8192
    cfbc:	10803fcc 	andi	r2,r2,255
    cfc0:	00000506 	br	cfd8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cfc4:	000cef80 	call	cef8 <alt_get_errno>
    cfc8:	1007883a 	mov	r3,r2
    cfcc:	00801444 	movi	r2,81
    cfd0:	18800015 	stw	r2,0(r3)
    return 0;
    cfd4:	0005883a 	mov	r2,zero
  }
}
    cfd8:	e037883a 	mov	sp,fp
    cfdc:	dfc00117 	ldw	ra,4(sp)
    cfe0:	df000017 	ldw	fp,0(sp)
    cfe4:	dec00204 	addi	sp,sp,8
    cfe8:	f800283a 	ret

0000cfec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    cfec:	defffc04 	addi	sp,sp,-16
    cff0:	df000315 	stw	fp,12(sp)
    cff4:	df000304 	addi	fp,sp,12
    cff8:	e13ffd15 	stw	r4,-12(fp)
    cffc:	e17ffe15 	stw	r5,-8(fp)
    d000:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d004:	e0fffe17 	ldw	r3,-8(fp)
    d008:	e0bffd17 	ldw	r2,-12(fp)
    d00c:	18800c26 	beq	r3,r2,d040 <alt_load_section+0x54>
  {
    while( to != end )
    d010:	00000806 	br	d034 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d014:	e0bffe17 	ldw	r2,-8(fp)
    d018:	10c00104 	addi	r3,r2,4
    d01c:	e0fffe15 	stw	r3,-8(fp)
    d020:	e0fffd17 	ldw	r3,-12(fp)
    d024:	19000104 	addi	r4,r3,4
    d028:	e13ffd15 	stw	r4,-12(fp)
    d02c:	18c00017 	ldw	r3,0(r3)
    d030:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d034:	e0fffe17 	ldw	r3,-8(fp)
    d038:	e0bfff17 	ldw	r2,-4(fp)
    d03c:	18bff51e 	bne	r3,r2,d014 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    d040:	0001883a 	nop
    d044:	e037883a 	mov	sp,fp
    d048:	df000017 	ldw	fp,0(sp)
    d04c:	dec00104 	addi	sp,sp,4
    d050:	f800283a 	ret

0000d054 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d054:	defffe04 	addi	sp,sp,-8
    d058:	dfc00115 	stw	ra,4(sp)
    d05c:	df000015 	stw	fp,0(sp)
    d060:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d064:	018000b4 	movhi	r6,2
    d068:	31ae9404 	addi	r6,r6,-17840
    d06c:	014000b4 	movhi	r5,2
    d070:	2966e404 	addi	r5,r5,-25712
    d074:	010000b4 	movhi	r4,2
    d078:	212e9404 	addi	r4,r4,-17840
    d07c:	000cfec0 	call	cfec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d080:	01800034 	movhi	r6,0
    d084:	31809204 	addi	r6,r6,584
    d088:	01400034 	movhi	r5,0
    d08c:	29400804 	addi	r5,r5,32
    d090:	01000034 	movhi	r4,0
    d094:	21000804 	addi	r4,r4,32
    d098:	000cfec0 	call	cfec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d09c:	018000b4 	movhi	r6,2
    d0a0:	31a6e404 	addi	r6,r6,-25712
    d0a4:	014000b4 	movhi	r5,2
    d0a8:	29658504 	addi	r5,r5,-27116
    d0ac:	010000b4 	movhi	r4,2
    d0b0:	21258504 	addi	r4,r4,-27116
    d0b4:	000cfec0 	call	cfec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d0b8:	00182200 	call	18220 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d0bc:	00184840 	call	18484 <alt_icache_flush_all>
}
    d0c0:	0001883a 	nop
    d0c4:	e037883a 	mov	sp,fp
    d0c8:	dfc00117 	ldw	ra,4(sp)
    d0cc:	df000017 	ldw	fp,0(sp)
    d0d0:	dec00204 	addi	sp,sp,8
    d0d4:	f800283a 	ret

0000d0d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d0d8:	defffe04 	addi	sp,sp,-8
    d0dc:	dfc00115 	stw	ra,4(sp)
    d0e0:	df000015 	stw	fp,0(sp)
    d0e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d0e8:	008000b4 	movhi	r2,2
    d0ec:	10ae7004 	addi	r2,r2,-17984
    d0f0:	10800017 	ldw	r2,0(r2)
    d0f4:	10000526 	beq	r2,zero,d10c <alt_get_errno+0x34>
    d0f8:	008000b4 	movhi	r2,2
    d0fc:	10ae7004 	addi	r2,r2,-17984
    d100:	10800017 	ldw	r2,0(r2)
    d104:	103ee83a 	callr	r2
    d108:	00000206 	br	d114 <alt_get_errno+0x3c>
    d10c:	008000b4 	movhi	r2,2
    d110:	10b65104 	addi	r2,r2,-9916
}
    d114:	e037883a 	mov	sp,fp
    d118:	dfc00117 	ldw	ra,4(sp)
    d11c:	df000017 	ldw	fp,0(sp)
    d120:	dec00204 	addi	sp,sp,8
    d124:	f800283a 	ret

0000d128 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d128:	defff904 	addi	sp,sp,-28
    d12c:	dfc00615 	stw	ra,24(sp)
    d130:	df000515 	stw	fp,20(sp)
    d134:	df000504 	addi	fp,sp,20
    d138:	e13ffd15 	stw	r4,-12(fp)
    d13c:	e17ffe15 	stw	r5,-8(fp)
    d140:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d144:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d148:	e0bffd17 	ldw	r2,-12(fp)
    d14c:	10000616 	blt	r2,zero,d168 <lseek+0x40>
    d150:	e0bffd17 	ldw	r2,-12(fp)
    d154:	10c00324 	muli	r3,r2,12
    d158:	008000b4 	movhi	r2,2
    d15c:	10a91b04 	addi	r2,r2,-23444
    d160:	1885883a 	add	r2,r3,r2
    d164:	00000106 	br	d16c <lseek+0x44>
    d168:	0005883a 	mov	r2,zero
    d16c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d170:	e0bffc17 	ldw	r2,-16(fp)
    d174:	10001026 	beq	r2,zero,d1b8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d178:	e0bffc17 	ldw	r2,-16(fp)
    d17c:	10800017 	ldw	r2,0(r2)
    d180:	10800717 	ldw	r2,28(r2)
    d184:	10000926 	beq	r2,zero,d1ac <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d188:	e0bffc17 	ldw	r2,-16(fp)
    d18c:	10800017 	ldw	r2,0(r2)
    d190:	10800717 	ldw	r2,28(r2)
    d194:	e1bfff17 	ldw	r6,-4(fp)
    d198:	e17ffe17 	ldw	r5,-8(fp)
    d19c:	e13ffc17 	ldw	r4,-16(fp)
    d1a0:	103ee83a 	callr	r2
    d1a4:	e0bffb15 	stw	r2,-20(fp)
    d1a8:	00000506 	br	d1c0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d1ac:	00bfde84 	movi	r2,-134
    d1b0:	e0bffb15 	stw	r2,-20(fp)
    d1b4:	00000206 	br	d1c0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d1b8:	00bfebc4 	movi	r2,-81
    d1bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d1c0:	e0bffb17 	ldw	r2,-20(fp)
    d1c4:	1000070e 	bge	r2,zero,d1e4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d1c8:	000d0d80 	call	d0d8 <alt_get_errno>
    d1cc:	1007883a 	mov	r3,r2
    d1d0:	e0bffb17 	ldw	r2,-20(fp)
    d1d4:	0085c83a 	sub	r2,zero,r2
    d1d8:	18800015 	stw	r2,0(r3)
    rc = -1;
    d1dc:	00bfffc4 	movi	r2,-1
    d1e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d1e4:	e0bffb17 	ldw	r2,-20(fp)
}
    d1e8:	e037883a 	mov	sp,fp
    d1ec:	dfc00117 	ldw	ra,4(sp)
    d1f0:	df000017 	ldw	fp,0(sp)
    d1f4:	dec00204 	addi	sp,sp,8
    d1f8:	f800283a 	ret

0000d1fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d1fc:	defff904 	addi	sp,sp,-28
    d200:	dfc00615 	stw	ra,24(sp)
    d204:	df000515 	stw	fp,20(sp)
    d208:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d20c:	0009883a 	mov	r4,zero
    d210:	0015c480 	call	15c48 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d214:	000e2dc0 	call	e2dc <OSInit>
    d218:	01000044 	movi	r4,1
    d21c:	001333c0 	call	1333c <OSSemCreate>
    d220:	1007883a 	mov	r3,r2
    d224:	008000b4 	movhi	r2,2
    d228:	10b65704 	addi	r2,r2,-9892
    d22c:	10c00015 	stw	r3,0(r2)
    d230:	01000044 	movi	r4,1
    d234:	001333c0 	call	1333c <OSSemCreate>
    d238:	1007883a 	mov	r3,r2
    d23c:	008000b4 	movhi	r2,2
    d240:	10b65904 	addi	r2,r2,-9884
    d244:	10c00015 	stw	r3,0(r2)
    d248:	008000b4 	movhi	r2,2
    d24c:	10b65204 	addi	r2,r2,-9912
    d250:	e0bffc15 	stw	r2,-16(fp)
    d254:	00800044 	movi	r2,1
    d258:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    d25c:	e0bffd0b 	ldhu	r2,-12(fp)
    d260:	1009883a 	mov	r4,r2
    d264:	001333c0 	call	1333c <OSSemCreate>
    d268:	1007883a 	mov	r3,r2
    d26c:	e0bffc17 	ldw	r2,-16(fp)
    d270:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d274:	0015c800 	call	15c80 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d278:	018000b4 	movhi	r6,2
    d27c:	31a64204 	addi	r6,r6,-26360
    d280:	014000b4 	movhi	r5,2
    d284:	29664204 	addi	r5,r5,-26360
    d288:	010000b4 	movhi	r4,2
    d28c:	21264204 	addi	r4,r4,-26360
    d290:	001857c0 	call	1857c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d294:	00183340 	call	18334 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d298:	010000b4 	movhi	r4,2
    d29c:	2120e504 	addi	r4,r4,-31852
    d2a0:	00192780 	call	19278 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d2a4:	d0a7ee17 	ldw	r2,-24648(gp)
    d2a8:	d0e7ef17 	ldw	r3,-24644(gp)
    d2ac:	d127f017 	ldw	r4,-24640(gp)
    d2b0:	200d883a 	mov	r6,r4
    d2b4:	180b883a 	mov	r5,r3
    d2b8:	1009883a 	mov	r4,r2
    d2bc:	00002840 	call	284 <main>
    d2c0:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    d2c4:	01000044 	movi	r4,1
    d2c8:	000ccfc0 	call	ccfc <close>
  exit (result);
    d2cc:	e13ffb17 	ldw	r4,-20(fp)
    d2d0:	001928c0 	call	1928c <exit>

0000d2d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d2d4:	defffe04 	addi	sp,sp,-8
    d2d8:	dfc00115 	stw	ra,4(sp)
    d2dc:	df000015 	stw	fp,0(sp)
    d2e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d2e4:	008000b4 	movhi	r2,2
    d2e8:	10ae7004 	addi	r2,r2,-17984
    d2ec:	10800017 	ldw	r2,0(r2)
    d2f0:	10000526 	beq	r2,zero,d308 <alt_get_errno+0x34>
    d2f4:	008000b4 	movhi	r2,2
    d2f8:	10ae7004 	addi	r2,r2,-17984
    d2fc:	10800017 	ldw	r2,0(r2)
    d300:	103ee83a 	callr	r2
    d304:	00000206 	br	d310 <alt_get_errno+0x3c>
    d308:	008000b4 	movhi	r2,2
    d30c:	10b65104 	addi	r2,r2,-9916
}
    d310:	e037883a 	mov	sp,fp
    d314:	dfc00117 	ldw	ra,4(sp)
    d318:	df000017 	ldw	fp,0(sp)
    d31c:	dec00204 	addi	sp,sp,8
    d320:	f800283a 	ret

0000d324 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d324:	defff904 	addi	sp,sp,-28
    d328:	dfc00615 	stw	ra,24(sp)
    d32c:	df000515 	stw	fp,20(sp)
    d330:	df000504 	addi	fp,sp,20
    d334:	e13ffd15 	stw	r4,-12(fp)
    d338:	e17ffe15 	stw	r5,-8(fp)
    d33c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d340:	e0bffd17 	ldw	r2,-12(fp)
    d344:	10000616 	blt	r2,zero,d360 <read+0x3c>
    d348:	e0bffd17 	ldw	r2,-12(fp)
    d34c:	10c00324 	muli	r3,r2,12
    d350:	008000b4 	movhi	r2,2
    d354:	10a91b04 	addi	r2,r2,-23444
    d358:	1885883a 	add	r2,r3,r2
    d35c:	00000106 	br	d364 <read+0x40>
    d360:	0005883a 	mov	r2,zero
    d364:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d368:	e0bffb17 	ldw	r2,-20(fp)
    d36c:	10002226 	beq	r2,zero,d3f8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d370:	e0bffb17 	ldw	r2,-20(fp)
    d374:	10800217 	ldw	r2,8(r2)
    d378:	108000cc 	andi	r2,r2,3
    d37c:	10800060 	cmpeqi	r2,r2,1
    d380:	1000181e 	bne	r2,zero,d3e4 <read+0xc0>
        (fd->dev->read))
    d384:	e0bffb17 	ldw	r2,-20(fp)
    d388:	10800017 	ldw	r2,0(r2)
    d38c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d390:	10001426 	beq	r2,zero,d3e4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d394:	e0bffb17 	ldw	r2,-20(fp)
    d398:	10800017 	ldw	r2,0(r2)
    d39c:	10800517 	ldw	r2,20(r2)
    d3a0:	e0ffff17 	ldw	r3,-4(fp)
    d3a4:	180d883a 	mov	r6,r3
    d3a8:	e17ffe17 	ldw	r5,-8(fp)
    d3ac:	e13ffb17 	ldw	r4,-20(fp)
    d3b0:	103ee83a 	callr	r2
    d3b4:	e0bffc15 	stw	r2,-16(fp)
    d3b8:	e0bffc17 	ldw	r2,-16(fp)
    d3bc:	1000070e 	bge	r2,zero,d3dc <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d3c0:	000d2d40 	call	d2d4 <alt_get_errno>
    d3c4:	1007883a 	mov	r3,r2
    d3c8:	e0bffc17 	ldw	r2,-16(fp)
    d3cc:	0085c83a 	sub	r2,zero,r2
    d3d0:	18800015 	stw	r2,0(r3)
          return -1;
    d3d4:	00bfffc4 	movi	r2,-1
    d3d8:	00000c06 	br	d40c <read+0xe8>
        }
        return rval;
    d3dc:	e0bffc17 	ldw	r2,-16(fp)
    d3e0:	00000a06 	br	d40c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d3e4:	000d2d40 	call	d2d4 <alt_get_errno>
    d3e8:	1007883a 	mov	r3,r2
    d3ec:	00800344 	movi	r2,13
    d3f0:	18800015 	stw	r2,0(r3)
    d3f4:	00000406 	br	d408 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d3f8:	000d2d40 	call	d2d4 <alt_get_errno>
    d3fc:	1007883a 	mov	r3,r2
    d400:	00801444 	movi	r2,81
    d404:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d408:	00bfffc4 	movi	r2,-1
}
    d40c:	e037883a 	mov	sp,fp
    d410:	dfc00117 	ldw	ra,4(sp)
    d414:	df000017 	ldw	fp,0(sp)
    d418:	dec00204 	addi	sp,sp,8
    d41c:	f800283a 	ret

0000d420 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d420:	defffe04 	addi	sp,sp,-8
    d424:	df000115 	stw	fp,4(sp)
    d428:	df000104 	addi	fp,sp,4
    d42c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d430:	e0bfff17 	ldw	r2,-4(fp)
    d434:	108000d0 	cmplti	r2,r2,3
    d438:	10000d1e 	bne	r2,zero,d470 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d43c:	008000b4 	movhi	r2,2
    d440:	10a91b04 	addi	r2,r2,-23444
    d444:	e0ffff17 	ldw	r3,-4(fp)
    d448:	18c00324 	muli	r3,r3,12
    d44c:	10c5883a 	add	r2,r2,r3
    d450:	10800204 	addi	r2,r2,8
    d454:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d458:	008000b4 	movhi	r2,2
    d45c:	10a91b04 	addi	r2,r2,-23444
    d460:	e0ffff17 	ldw	r3,-4(fp)
    d464:	18c00324 	muli	r3,r3,12
    d468:	10c5883a 	add	r2,r2,r3
    d46c:	10000015 	stw	zero,0(r2)
  }
}
    d470:	0001883a 	nop
    d474:	e037883a 	mov	sp,fp
    d478:	df000017 	ldw	fp,0(sp)
    d47c:	dec00104 	addi	sp,sp,4
    d480:	f800283a 	ret

0000d484 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d484:	defff904 	addi	sp,sp,-28
    d488:	df000615 	stw	fp,24(sp)
    d48c:	df000604 	addi	fp,sp,24
    d490:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d494:	0005303a 	rdctl	r2,status
    d498:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d49c:	e0fffe17 	ldw	r3,-8(fp)
    d4a0:	00bfff84 	movi	r2,-2
    d4a4:	1884703a 	and	r2,r3,r2
    d4a8:	1001703a 	wrctl	status,r2
  
  return context;
    d4ac:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d4b0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d4b4:	d0a00c17 	ldw	r2,-32720(gp)
    d4b8:	10c000c4 	addi	r3,r2,3
    d4bc:	00bfff04 	movi	r2,-4
    d4c0:	1884703a 	and	r2,r3,r2
    d4c4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d4c8:	d0e00c17 	ldw	r3,-32720(gp)
    d4cc:	e0bfff17 	ldw	r2,-4(fp)
    d4d0:	1887883a 	add	r3,r3,r2
    d4d4:	00810034 	movhi	r2,1024
    d4d8:	10800004 	addi	r2,r2,0
    d4dc:	10c0062e 	bgeu	r2,r3,d4f8 <sbrk+0x74>
    d4e0:	e0bffb17 	ldw	r2,-20(fp)
    d4e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d4e8:	e0bffa17 	ldw	r2,-24(fp)
    d4ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d4f0:	00bfffc4 	movi	r2,-1
    d4f4:	00000b06 	br	d524 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d4f8:	d0a00c17 	ldw	r2,-32720(gp)
    d4fc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    d500:	d0e00c17 	ldw	r3,-32720(gp)
    d504:	e0bfff17 	ldw	r2,-4(fp)
    d508:	1885883a 	add	r2,r3,r2
    d50c:	d0a00c15 	stw	r2,-32720(gp)
    d510:	e0bffb17 	ldw	r2,-20(fp)
    d514:	e0bffc15 	stw	r2,-16(fp)
    d518:	e0bffc17 	ldw	r2,-16(fp)
    d51c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d520:	e0bffd17 	ldw	r2,-12(fp)
} 
    d524:	e037883a 	mov	sp,fp
    d528:	df000017 	ldw	fp,0(sp)
    d52c:	dec00104 	addi	sp,sp,4
    d530:	f800283a 	ret

0000d534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d534:	defffe04 	addi	sp,sp,-8
    d538:	dfc00115 	stw	ra,4(sp)
    d53c:	df000015 	stw	fp,0(sp)
    d540:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d544:	008000b4 	movhi	r2,2
    d548:	10ae7004 	addi	r2,r2,-17984
    d54c:	10800017 	ldw	r2,0(r2)
    d550:	10000526 	beq	r2,zero,d568 <alt_get_errno+0x34>
    d554:	008000b4 	movhi	r2,2
    d558:	10ae7004 	addi	r2,r2,-17984
    d55c:	10800017 	ldw	r2,0(r2)
    d560:	103ee83a 	callr	r2
    d564:	00000206 	br	d570 <alt_get_errno+0x3c>
    d568:	008000b4 	movhi	r2,2
    d56c:	10b65104 	addi	r2,r2,-9916
}
    d570:	e037883a 	mov	sp,fp
    d574:	dfc00117 	ldw	ra,4(sp)
    d578:	df000017 	ldw	fp,0(sp)
    d57c:	dec00204 	addi	sp,sp,8
    d580:	f800283a 	ret

0000d584 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d584:	defff904 	addi	sp,sp,-28
    d588:	dfc00615 	stw	ra,24(sp)
    d58c:	df000515 	stw	fp,20(sp)
    d590:	df000504 	addi	fp,sp,20
    d594:	e13ffd15 	stw	r4,-12(fp)
    d598:	e17ffe15 	stw	r5,-8(fp)
    d59c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d5a0:	e0bffd17 	ldw	r2,-12(fp)
    d5a4:	10000616 	blt	r2,zero,d5c0 <write+0x3c>
    d5a8:	e0bffd17 	ldw	r2,-12(fp)
    d5ac:	10c00324 	muli	r3,r2,12
    d5b0:	008000b4 	movhi	r2,2
    d5b4:	10a91b04 	addi	r2,r2,-23444
    d5b8:	1885883a 	add	r2,r3,r2
    d5bc:	00000106 	br	d5c4 <write+0x40>
    d5c0:	0005883a 	mov	r2,zero
    d5c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d5c8:	e0bffb17 	ldw	r2,-20(fp)
    d5cc:	10002126 	beq	r2,zero,d654 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d5d0:	e0bffb17 	ldw	r2,-20(fp)
    d5d4:	10800217 	ldw	r2,8(r2)
    d5d8:	108000cc 	andi	r2,r2,3
    d5dc:	10001826 	beq	r2,zero,d640 <write+0xbc>
    d5e0:	e0bffb17 	ldw	r2,-20(fp)
    d5e4:	10800017 	ldw	r2,0(r2)
    d5e8:	10800617 	ldw	r2,24(r2)
    d5ec:	10001426 	beq	r2,zero,d640 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d5f0:	e0bffb17 	ldw	r2,-20(fp)
    d5f4:	10800017 	ldw	r2,0(r2)
    d5f8:	10800617 	ldw	r2,24(r2)
    d5fc:	e0ffff17 	ldw	r3,-4(fp)
    d600:	180d883a 	mov	r6,r3
    d604:	e17ffe17 	ldw	r5,-8(fp)
    d608:	e13ffb17 	ldw	r4,-20(fp)
    d60c:	103ee83a 	callr	r2
    d610:	e0bffc15 	stw	r2,-16(fp)
    d614:	e0bffc17 	ldw	r2,-16(fp)
    d618:	1000070e 	bge	r2,zero,d638 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d61c:	000d5340 	call	d534 <alt_get_errno>
    d620:	1007883a 	mov	r3,r2
    d624:	e0bffc17 	ldw	r2,-16(fp)
    d628:	0085c83a 	sub	r2,zero,r2
    d62c:	18800015 	stw	r2,0(r3)
        return -1;
    d630:	00bfffc4 	movi	r2,-1
    d634:	00000c06 	br	d668 <write+0xe4>
      }
      return rval;
    d638:	e0bffc17 	ldw	r2,-16(fp)
    d63c:	00000a06 	br	d668 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d640:	000d5340 	call	d534 <alt_get_errno>
    d644:	1007883a 	mov	r3,r2
    d648:	00800344 	movi	r2,13
    d64c:	18800015 	stw	r2,0(r3)
    d650:	00000406 	br	d664 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d654:	000d5340 	call	d534 <alt_get_errno>
    d658:	1007883a 	mov	r3,r2
    d65c:	00801444 	movi	r2,81
    d660:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d664:	00bfffc4 	movi	r2,-1
}
    d668:	e037883a 	mov	sp,fp
    d66c:	dfc00117 	ldw	ra,4(sp)
    d670:	df000017 	ldw	fp,0(sp)
    d674:	dec00204 	addi	sp,sp,8
    d678:	f800283a 	ret

0000d67c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    d67c:	deffdf04 	addi	sp,sp,-132
    d680:	dfc02015 	stw	ra,128(sp)
    d684:	df001f15 	stw	fp,124(sp)
    d688:	df001f04 	addi	fp,sp,124
    d68c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    d690:	e0bfe204 	addi	r2,fp,-120
    d694:	100b883a 	mov	r5,r2
    d698:	01003fc4 	movi	r4,255
    d69c:	00155040 	call	15504 <OSTaskQuery>
    d6a0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    d6a4:	e0bffe83 	ldbu	r2,-6(fp)
    d6a8:	10803fcc 	andi	r2,r2,255
    d6ac:	1000221e 	bne	r2,zero,d738 <__env_lock+0xbc>
    return;

  id = tcb.OSTCBPrio;
    d6b0:	e0bfee83 	ldbu	r2,-70(fp)
    d6b4:	10803fcc 	andi	r2,r2,255
    d6b8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    d6bc:	008000b4 	movhi	r2,2
    d6c0:	10b65704 	addi	r2,r2,-9892
    d6c4:	10800017 	ldw	r2,0(r2)
    d6c8:	e0fffd04 	addi	r3,fp,-12
    d6cc:	180b883a 	mov	r5,r3
    d6d0:	1009883a 	mov	r4,r2
    d6d4:	0013b8c0 	call	13b8c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    d6d8:	e0bffe43 	ldbu	r2,-7(fp)
    d6dc:	10803fcc 	andi	r2,r2,255
    d6e0:	10000726 	beq	r2,zero,d700 <__env_lock+0x84>
    d6e4:	d0a00d17 	ldw	r2,-32716(gp)
    d6e8:	e0ffe117 	ldw	r3,-124(fp)
    d6ec:	1880041e 	bne	r3,r2,d700 <__env_lock+0x84>
  {
    /* we do; just count the recursion */

    locks++;
    d6f0:	d0a7f117 	ldw	r2,-24636(gp)
    d6f4:	10800044 	addi	r2,r2,1
    d6f8:	d0a7f115 	stw	r2,-24636(gp)
    d6fc:	00000c06 	br	d730 <__env_lock+0xb4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    d700:	008000b4 	movhi	r2,2
    d704:	10b65704 	addi	r2,r2,-9892
    d708:	10800017 	ldw	r2,0(r2)
    d70c:	e0fffe84 	addi	r3,fp,-6
    d710:	180d883a 	mov	r6,r3
    d714:	000b883a 	mov	r5,zero
    d718:	1009883a 	mov	r4,r2
    d71c:	00136a40 	call	136a4 <OSSemPend>
    locks  = 1;
    d720:	00800044 	movi	r2,1
    d724:	d0a7f115 	stw	r2,-24636(gp)
    lockid = id;
    d728:	e0bfe117 	ldw	r2,-124(fp)
    d72c:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    d730:	0001883a 	nop
    d734:	00000106 	br	d73c <__env_lock+0xc0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    d738:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    d73c:	e037883a 	mov	sp,fp
    d740:	dfc00117 	ldw	ra,4(sp)
    d744:	df000017 	ldw	fp,0(sp)
    d748:	dec00204 	addi	sp,sp,8
    d74c:	f800283a 	ret

0000d750 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    d750:	defffd04 	addi	sp,sp,-12
    d754:	dfc00215 	stw	ra,8(sp)
    d758:	df000115 	stw	fp,4(sp)
    d75c:	df000104 	addi	fp,sp,4
    d760:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    d764:	d0a7f117 	ldw	r2,-24636(gp)
    d768:	10000d26 	beq	r2,zero,d7a0 <__env_unlock+0x50>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    d76c:	d0a7f117 	ldw	r2,-24636(gp)
    d770:	10bfffc4 	addi	r2,r2,-1
    d774:	d0a7f115 	stw	r2,-24636(gp)
    d778:	d0a7f117 	ldw	r2,-24636(gp)
    d77c:	1000091e 	bne	r2,zero,d7a4 <__env_unlock+0x54>
  {
    lockid = -1;
    d780:	00bfffc4 	movi	r2,-1
    d784:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
    d788:	008000b4 	movhi	r2,2
    d78c:	10b65704 	addi	r2,r2,-9892
    d790:	10800017 	ldw	r2,0(r2)
    d794:	1009883a 	mov	r4,r2
    d798:	0013a7c0 	call	13a7c <OSSemPost>
    d79c:	00000106 	br	d7a4 <__env_unlock+0x54>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    d7a0:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    d7a4:	e037883a 	mov	sp,fp
    d7a8:	dfc00117 	ldw	ra,4(sp)
    d7ac:	df000017 	ldw	fp,0(sp)
    d7b0:	dec00204 	addi	sp,sp,8
    d7b4:	f800283a 	ret

0000d7b8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    d7b8:	deffdb04 	addi	sp,sp,-148
    d7bc:	dfc02415 	stw	ra,144(sp)
    d7c0:	df002315 	stw	fp,140(sp)
    d7c4:	df002304 	addi	fp,sp,140
    d7c8:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d7cc:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    d7d0:	008000b4 	movhi	r2,2
    d7d4:	10b65a44 	addi	r2,r2,-9879
    d7d8:	10800003 	ldbu	r2,0(r2)
    d7dc:	10803fcc 	andi	r2,r2,255
    d7e0:	10800060 	cmpeqi	r2,r2,1
    d7e4:	10003a26 	beq	r2,zero,d8d0 <__malloc_lock+0x118>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    d7e8:	e0bfe204 	addi	r2,fp,-120
    d7ec:	100b883a 	mov	r5,r2
    d7f0:	01003fc4 	movi	r4,255
    d7f4:	00155040 	call	15504 <OSTaskQuery>
    d7f8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    d7fc:	e0bffe83 	ldbu	r2,-6(fp)
    d800:	10803fcc 	andi	r2,r2,255
    d804:	1000341e 	bne	r2,zero,d8d8 <__malloc_lock+0x120>
    return;

  id = tcb.OSTCBPrio;
    d808:	e0bfee83 	ldbu	r2,-70(fp)
    d80c:	10803fcc 	andi	r2,r2,255
    d810:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    d814:	008000b4 	movhi	r2,2
    d818:	10b65904 	addi	r2,r2,-9884
    d81c:	10800017 	ldw	r2,0(r2)
    d820:	e0fffd04 	addi	r3,fp,-12
    d824:	180b883a 	mov	r5,r3
    d828:	1009883a 	mov	r4,r2
    d82c:	0013b8c0 	call	13b8c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d830:	0005303a 	rdctl	r2,status
    d834:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d838:	e0ffe117 	ldw	r3,-124(fp)
    d83c:	00bfff84 	movi	r2,-2
    d840:	1884703a 	and	r2,r3,r2
    d844:	1001703a 	wrctl	status,r2
  
  return context;
    d848:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    d84c:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    d850:	e0bffd0b 	ldhu	r2,-12(fp)
    d854:	10bfffcc 	andi	r2,r2,65535
    d858:	10000b1e 	bne	r2,zero,d888 <__malloc_lock+0xd0>
    d85c:	d0a00e17 	ldw	r2,-32712(gp)
    d860:	e0ffde17 	ldw	r3,-136(fp)
    d864:	1880081e 	bne	r3,r2,d888 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    d868:	d0a7f317 	ldw	r2,-24628(gp)
    d86c:	10800044 	addi	r2,r2,1
    d870:	d0a7f315 	stw	r2,-24628(gp)
    d874:	e0bfdd17 	ldw	r2,-140(fp)
    d878:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d87c:	e0bfdf17 	ldw	r2,-132(fp)
    d880:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    d884:	00001006 	br	d8c8 <__malloc_lock+0x110>
    d888:	e0bfdd17 	ldw	r2,-140(fp)
    d88c:	e0bfe015 	stw	r2,-128(fp)
    d890:	e0bfe017 	ldw	r2,-128(fp)
    d894:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    d898:	008000b4 	movhi	r2,2
    d89c:	10b65904 	addi	r2,r2,-9884
    d8a0:	10800017 	ldw	r2,0(r2)
    d8a4:	e0fffe84 	addi	r3,fp,-6
    d8a8:	180d883a 	mov	r6,r3
    d8ac:	000b883a 	mov	r5,zero
    d8b0:	1009883a 	mov	r4,r2
    d8b4:	00136a40 	call	136a4 <OSSemPend>
    locks  = 1;
    d8b8:	00800044 	movi	r2,1
    d8bc:	d0a7f315 	stw	r2,-24628(gp)
    lockid = id;
    d8c0:	e0bfde17 	ldw	r2,-136(fp)
    d8c4:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    d8c8:	0001883a 	nop
    d8cc:	00000306 	br	d8dc <__malloc_lock+0x124>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    d8d0:	0001883a 	nop
    d8d4:	00000106 	br	d8dc <__malloc_lock+0x124>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    d8d8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    d8dc:	e037883a 	mov	sp,fp
    d8e0:	dfc00117 	ldw	ra,4(sp)
    d8e4:	df000017 	ldw	fp,0(sp)
    d8e8:	dec00204 	addi	sp,sp,8
    d8ec:	f800283a 	ret

0000d8f0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d8f0:	defff804 	addi	sp,sp,-32
    d8f4:	dfc00715 	stw	ra,28(sp)
    d8f8:	df000615 	stw	fp,24(sp)
    d8fc:	df000604 	addi	fp,sp,24
    d900:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d904:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    d908:	008000b4 	movhi	r2,2
    d90c:	10b65a44 	addi	r2,r2,-9879
    d910:	10800003 	ldbu	r2,0(r2)
    d914:	10803fcc 	andi	r2,r2,255
    d918:	10800060 	cmpeqi	r2,r2,1
    d91c:	10002526 	beq	r2,zero,d9b4 <__malloc_unlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d920:	0005303a 	rdctl	r2,status
    d924:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d928:	e0fffe17 	ldw	r3,-8(fp)
    d92c:	00bfff84 	movi	r2,-2
    d930:	1884703a 	and	r2,r3,r2
    d934:	1001703a 	wrctl	status,r2
  
  return context;
    d938:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    d93c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    d940:	d0a7f317 	ldw	r2,-24628(gp)
    d944:	1000051e 	bne	r2,zero,d95c <__malloc_unlock+0x6c>
    d948:	e0bffa17 	ldw	r2,-24(fp)
    d94c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d950:	e0bffb17 	ldw	r2,-20(fp)
    d954:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    d958:	00001706 	br	d9b8 <__malloc_unlock+0xc8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    d95c:	d0a7f317 	ldw	r2,-24628(gp)
    d960:	10bfffc4 	addi	r2,r2,-1
    d964:	d0a7f315 	stw	r2,-24628(gp)
    d968:	d0a7f317 	ldw	r2,-24628(gp)
    d96c:	10000c1e 	bne	r2,zero,d9a0 <__malloc_unlock+0xb0>
  {
    lockid = -1;
    d970:	00bfffc4 	movi	r2,-1
    d974:	d0a00e15 	stw	r2,-32712(gp)
    d978:	e0bffa17 	ldw	r2,-24(fp)
    d97c:	e0bffc15 	stw	r2,-16(fp)
    d980:	e0bffc17 	ldw	r2,-16(fp)
    d984:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    d988:	008000b4 	movhi	r2,2
    d98c:	10b65904 	addi	r2,r2,-9884
    d990:	10800017 	ldw	r2,0(r2)
    d994:	1009883a 	mov	r4,r2
    d998:	0013a7c0 	call	13a7c <OSSemPost>
    d99c:	00000606 	br	d9b8 <__malloc_unlock+0xc8>
    d9a0:	e0bffa17 	ldw	r2,-24(fp)
    d9a4:	e0bffd15 	stw	r2,-12(fp)
    d9a8:	e0bffd17 	ldw	r2,-12(fp)
    d9ac:	1001703a 	wrctl	status,r2
    d9b0:	00000106 	br	d9b8 <__malloc_unlock+0xc8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    d9b4:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    d9b8:	e037883a 	mov	sp,fp
    d9bc:	dfc00117 	ldw	ra,4(sp)
    d9c0:	df000017 	ldw	fp,0(sp)
    d9c4:	dec00204 	addi	sp,sp,8
    d9c8:	f800283a 	ret

0000d9cc <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    d9cc:	defff704 	addi	sp,sp,-36
    d9d0:	dfc00815 	stw	ra,32(sp)
    d9d4:	df000715 	stw	fp,28(sp)
    d9d8:	df000704 	addi	fp,sp,28
    d9dc:	e13ffd15 	stw	r4,-12(fp)
    d9e0:	e17ffe15 	stw	r5,-8(fp)
    d9e4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d9e8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    d9ec:	e0bfff17 	ldw	r2,-4(fp)
    d9f0:	1000021e 	bne	r2,zero,d9fc <OSEventNameGet+0x30>
        return (0);
    d9f4:	0005883a 	mov	r2,zero
    d9f8:	00003906 	br	dae0 <OSEventNameGet+0x114>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    d9fc:	e0bffd17 	ldw	r2,-12(fp)
    da00:	1000051e 	bne	r2,zero,da18 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    da04:	e0bfff17 	ldw	r2,-4(fp)
    da08:	00c00104 	movi	r3,4
    da0c:	10c00005 	stb	r3,0(r2)
        return (0);
    da10:	0005883a 	mov	r2,zero
    da14:	00003206 	br	dae0 <OSEventNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    da18:	e0bffe17 	ldw	r2,-8(fp)
    da1c:	1000051e 	bne	r2,zero,da34 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    da20:	e0bfff17 	ldw	r2,-4(fp)
    da24:	00c00304 	movi	r3,12
    da28:	10c00005 	stb	r3,0(r2)
        return (0);
    da2c:	0005883a 	mov	r2,zero
    da30:	00002b06 	br	dae0 <OSEventNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    da34:	008000b4 	movhi	r2,2
    da38:	10b66804 	addi	r2,r2,-9824
    da3c:	10800003 	ldbu	r2,0(r2)
    da40:	10803fcc 	andi	r2,r2,255
    da44:	10000526 	beq	r2,zero,da5c <OSEventNameGet+0x90>
        *perr  = OS_ERR_NAME_GET_ISR;
    da48:	e0bfff17 	ldw	r2,-4(fp)
    da4c:	00c00444 	movi	r3,17
    da50:	10c00005 	stb	r3,0(r2)
        return (0);
    da54:	0005883a 	mov	r2,zero
    da58:	00002106 	br	dae0 <OSEventNameGet+0x114>
    }
    switch (pevent->OSEventType) {
    da5c:	e0bffd17 	ldw	r2,-12(fp)
    da60:	10800003 	ldbu	r2,0(r2)
    da64:	10803fcc 	andi	r2,r2,255
    da68:	10bfffc4 	addi	r2,r2,-1
    da6c:	10800128 	cmpgeui	r2,r2,4
    da70:	10000526 	beq	r2,zero,da88 <OSEventNameGet+0xbc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    da74:	e0bfff17 	ldw	r2,-4(fp)
    da78:	00c00044 	movi	r3,1
    da7c:	10c00005 	stb	r3,0(r2)
             return (0);
    da80:	0005883a 	mov	r2,zero
    da84:	00001606 	br	dae0 <OSEventNameGet+0x114>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    da88:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    da8c:	0005303a 	rdctl	r2,status
    da90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    da94:	e0fffb17 	ldw	r3,-20(fp)
    da98:	00bfff84 	movi	r2,-2
    da9c:	1884703a 	and	r2,r3,r2
    daa0:	1001703a 	wrctl	status,r2
  
  return context;
    daa4:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    daa8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    daac:	e0bffd17 	ldw	r2,-12(fp)
    dab0:	10800384 	addi	r2,r2,14
    dab4:	100b883a 	mov	r5,r2
    dab8:	e13ffe17 	ldw	r4,-8(fp)
    dabc:	000f8980 	call	f898 <OS_StrCopy>
    dac0:	e0bffa05 	stb	r2,-24(fp)
    dac4:	e0bff917 	ldw	r2,-28(fp)
    dac8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dacc:	e0bffc17 	ldw	r2,-16(fp)
    dad0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    dad4:	e0bfff17 	ldw	r2,-4(fp)
    dad8:	10000005 	stb	zero,0(r2)
    return (len);
    dadc:	e0bffa03 	ldbu	r2,-24(fp)
}
    dae0:	e037883a 	mov	sp,fp
    dae4:	dfc00117 	ldw	ra,4(sp)
    dae8:	df000017 	ldw	fp,0(sp)
    daec:	dec00204 	addi	sp,sp,8
    daf0:	f800283a 	ret

0000daf4 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    daf4:	defff604 	addi	sp,sp,-40
    daf8:	dfc00915 	stw	ra,36(sp)
    dafc:	df000815 	stw	fp,32(sp)
    db00:	df000804 	addi	fp,sp,32
    db04:	e13ffd15 	stw	r4,-12(fp)
    db08:	e17ffe15 	stw	r5,-8(fp)
    db0c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    db10:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    db14:	e0bfff17 	ldw	r2,-4(fp)
    db18:	10004226 	beq	r2,zero,dc24 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    db1c:	e0bffd17 	ldw	r2,-12(fp)
    db20:	1000041e 	bne	r2,zero,db34 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    db24:	e0bfff17 	ldw	r2,-4(fp)
    db28:	00c00104 	movi	r3,4
    db2c:	10c00005 	stb	r3,0(r2)
        return;
    db30:	00003d06 	br	dc28 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    db34:	e0bffe17 	ldw	r2,-8(fp)
    db38:	1000041e 	bne	r2,zero,db4c <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    db3c:	e0bfff17 	ldw	r2,-4(fp)
    db40:	00c00304 	movi	r3,12
    db44:	10c00005 	stb	r3,0(r2)
        return;
    db48:	00003706 	br	dc28 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    db4c:	008000b4 	movhi	r2,2
    db50:	10b66804 	addi	r2,r2,-9824
    db54:	10800003 	ldbu	r2,0(r2)
    db58:	10803fcc 	andi	r2,r2,255
    db5c:	10000426 	beq	r2,zero,db70 <OSEventNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
    db60:	e0bfff17 	ldw	r2,-4(fp)
    db64:	00c00484 	movi	r3,18
    db68:	10c00005 	stb	r3,0(r2)
        return;
    db6c:	00002e06 	br	dc28 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
    db70:	e0bffd17 	ldw	r2,-12(fp)
    db74:	10800003 	ldbu	r2,0(r2)
    db78:	10803fcc 	andi	r2,r2,255
    db7c:	10bfffc4 	addi	r2,r2,-1
    db80:	10800128 	cmpgeui	r2,r2,4
    db84:	10000426 	beq	r2,zero,db98 <OSEventNameSet+0xa4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    db88:	e0bfff17 	ldw	r2,-4(fp)
    db8c:	00c00044 	movi	r3,1
    db90:	10c00005 	stb	r3,0(r2)
             return;
    db94:	00002406 	br	dc28 <OSEventNameSet+0x134>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    db98:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    db9c:	0005303a 	rdctl	r2,status
    dba0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dba4:	e0fffc17 	ldw	r3,-16(fp)
    dba8:	00bfff84 	movi	r2,-2
    dbac:	1884703a 	and	r2,r3,r2
    dbb0:	1001703a 	wrctl	status,r2
  
  return context;
    dbb4:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    dbb8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    dbbc:	e13ffe17 	ldw	r4,-8(fp)
    dbc0:	000f90c0 	call	f90c <OS_StrLen>
    dbc4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    dbc8:	e0bffa03 	ldbu	r2,-24(fp)
    dbcc:	10800830 	cmpltui	r2,r2,32
    dbd0:	1000081e 	bne	r2,zero,dbf4 <OSEventNameSet+0x100>
    dbd4:	e0bff817 	ldw	r2,-32(fp)
    dbd8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dbdc:	e0bff917 	ldw	r2,-28(fp)
    dbe0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    dbe4:	e0bfff17 	ldw	r2,-4(fp)
    dbe8:	00c002c4 	movi	r3,11
    dbec:	10c00005 	stb	r3,0(r2)
        return;
    dbf0:	00000d06 	br	dc28 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    dbf4:	e0bffd17 	ldw	r2,-12(fp)
    dbf8:	10800384 	addi	r2,r2,14
    dbfc:	e17ffe17 	ldw	r5,-8(fp)
    dc00:	1009883a 	mov	r4,r2
    dc04:	000f8980 	call	f898 <OS_StrCopy>
    dc08:	e0bff817 	ldw	r2,-32(fp)
    dc0c:	e0bffb15 	stw	r2,-20(fp)
    dc10:	e0bffb17 	ldw	r2,-20(fp)
    dc14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    dc18:	e0bfff17 	ldw	r2,-4(fp)
    dc1c:	10000005 	stb	zero,0(r2)
    dc20:	00000106 	br	dc28 <OSEventNameSet+0x134>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    dc24:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    dc28:	e037883a 	mov	sp,fp
    dc2c:	dfc00117 	ldw	ra,4(sp)
    dc30:	df000017 	ldw	fp,0(sp)
    dc34:	dec00204 	addi	sp,sp,8
    dc38:	f800283a 	ret

0000dc3c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    dc3c:	deffed04 	addi	sp,sp,-76
    dc40:	dfc01215 	stw	ra,72(sp)
    dc44:	df001115 	stw	fp,68(sp)
    dc48:	df001104 	addi	fp,sp,68
    dc4c:	e13ffc15 	stw	r4,-16(fp)
    dc50:	e17ffd15 	stw	r5,-12(fp)
    dc54:	e1bffe15 	stw	r6,-8(fp)
    dc58:	3805883a 	mov	r2,r7
    dc5c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    dc60:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    dc64:	e0800217 	ldw	r2,8(fp)
    dc68:	1000021e 	bne	r2,zero,dc74 <OSEventPendMulti+0x38>
        return (0);
    dc6c:	0005883a 	mov	r2,zero
    dc70:	00019506 	br	e2c8 <OSEventPendMulti+0x68c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    dc74:	e0bffc17 	ldw	r2,-16(fp)
    dc78:	1000051e 	bne	r2,zero,dc90 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    dc7c:	e0800217 	ldw	r2,8(fp)
    dc80:	00c00104 	movi	r3,4
    dc84:	10c00005 	stb	r3,0(r2)
        return (0);
    dc88:	0005883a 	mov	r2,zero
    dc8c:	00018e06 	br	e2c8 <OSEventPendMulti+0x68c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    dc90:	e0bffd17 	ldw	r2,-12(fp)
    dc94:	1000051e 	bne	r2,zero,dcac <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    dc98:	e0800217 	ldw	r2,8(fp)
    dc9c:	00c00104 	movi	r3,4
    dca0:	10c00005 	stb	r3,0(r2)
        return (0);
    dca4:	0005883a 	mov	r2,zero
    dca8:	00018706 	br	e2c8 <OSEventPendMulti+0x68c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    dcac:	e0bffe17 	ldw	r2,-8(fp)
    dcb0:	1000051e 	bne	r2,zero,dcc8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    dcb4:	e0800217 	ldw	r2,8(fp)
    dcb8:	00c00104 	movi	r3,4
    dcbc:	10c00005 	stb	r3,0(r2)
        return (0);
    dcc0:	0005883a 	mov	r2,zero
    dcc4:	00018006 	br	e2c8 <OSEventPendMulti+0x68c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    dcc8:	e0bffd17 	ldw	r2,-12(fp)
    dccc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    dcd0:	e0bffc17 	ldw	r2,-16(fp)
    dcd4:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    dcd8:	e0bfef17 	ldw	r2,-68(fp)
    dcdc:	10800017 	ldw	r2,0(r2)
    dce0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    dce4:	00001906 	br	dd4c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    dce8:	e0bff017 	ldw	r2,-64(fp)
    dcec:	10800003 	ldbu	r2,0(r2)
    dcf0:	10803fcc 	andi	r2,r2,255
    dcf4:	10c000a0 	cmpeqi	r3,r2,2
    dcf8:	1800091e 	bne	r3,zero,dd20 <OSEventPendMulti+0xe4>
    dcfc:	10c000e0 	cmpeqi	r3,r2,3
    dd00:	1800091e 	bne	r3,zero,dd28 <OSEventPendMulti+0xec>
    dd04:	10800060 	cmpeqi	r2,r2,1
    dd08:	1000091e 	bne	r2,zero,dd30 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    dd0c:	e0800217 	ldw	r2,8(fp)
    dd10:	00c00044 	movi	r3,1
    dd14:	10c00005 	stb	r3,0(r2)
                 return (0);
    dd18:	0005883a 	mov	r2,zero
    dd1c:	00016a06 	br	e2c8 <OSEventPendMulti+0x68c>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    dd20:	0001883a 	nop
    dd24:	00000306 	br	dd34 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    dd28:	0001883a 	nop
    dd2c:	00000106 	br	dd34 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    dd30:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    dd34:	e0bfef17 	ldw	r2,-68(fp)
    dd38:	10800104 	addi	r2,r2,4
    dd3c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    dd40:	e0bfef17 	ldw	r2,-68(fp)
    dd44:	10800017 	ldw	r2,0(r2)
    dd48:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    dd4c:	e0bff017 	ldw	r2,-64(fp)
    dd50:	103fe51e 	bne	r2,zero,dce8 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    dd54:	008000b4 	movhi	r2,2
    dd58:	10b66804 	addi	r2,r2,-9824
    dd5c:	10800003 	ldbu	r2,0(r2)
    dd60:	10803fcc 	andi	r2,r2,255
    dd64:	10000526 	beq	r2,zero,dd7c <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    dd68:	e0800217 	ldw	r2,8(fp)
    dd6c:	00c00084 	movi	r3,2
    dd70:	10c00005 	stb	r3,0(r2)
        return (0);
    dd74:	0005883a 	mov	r2,zero
    dd78:	00015306 	br	e2c8 <OSEventPendMulti+0x68c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    dd7c:	008000b4 	movhi	r2,2
    dd80:	10b65a04 	addi	r2,r2,-9880
    dd84:	10800003 	ldbu	r2,0(r2)
    dd88:	10803fcc 	andi	r2,r2,255
    dd8c:	10000526 	beq	r2,zero,dda4 <OSEventPendMulti+0x168>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    dd90:	e0800217 	ldw	r2,8(fp)
    dd94:	00c00344 	movi	r3,13
    dd98:	10c00005 	stb	r3,0(r2)
        return (0);
    dd9c:	0005883a 	mov	r2,zero
    dda0:	00014906 	br	e2c8 <OSEventPendMulti+0x68c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dda4:	0005303a 	rdctl	r2,status
    dda8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ddac:	e0fffb17 	ldw	r3,-20(fp)
    ddb0:	00bfff84 	movi	r2,-2
    ddb4:	1884703a 	and	r2,r3,r2
    ddb8:	1001703a 	wrctl	status,r2
  
  return context;
    ddbc:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    ddc0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    ddc4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    ddc8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    ddcc:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    ddd0:	e0bffc17 	ldw	r2,-16(fp)
    ddd4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    ddd8:	e0bfef17 	ldw	r2,-68(fp)
    dddc:	10800017 	ldw	r2,0(r2)
    dde0:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    dde4:	00008106 	br	dfec <OSEventPendMulti+0x3b0>
        switch (pevent->OSEventType) {
    dde8:	e0bff017 	ldw	r2,-64(fp)
    ddec:	10800003 	ldbu	r2,0(r2)
    ddf0:	10803fcc 	andi	r2,r2,255
    ddf4:	10c000a0 	cmpeqi	r3,r2,2
    ddf8:	18003c1e 	bne	r3,zero,deec <OSEventPendMulti+0x2b0>
    ddfc:	10c000e0 	cmpeqi	r3,r2,3
    de00:	1800031e 	bne	r3,zero,de10 <OSEventPendMulti+0x1d4>
    de04:	10800060 	cmpeqi	r2,r2,1
    de08:	10001e1e 	bne	r2,zero,de84 <OSEventPendMulti+0x248>
    de0c:	00006606 	br	dfa8 <OSEventPendMulti+0x36c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    de10:	e0bff017 	ldw	r2,-64(fp)
    de14:	1080020b 	ldhu	r2,8(r2)
    de18:	10bfffcc 	andi	r2,r2,65535
    de1c:	10001526 	beq	r2,zero,de74 <OSEventPendMulti+0x238>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    de20:	e0bff017 	ldw	r2,-64(fp)
    de24:	1080020b 	ldhu	r2,8(r2)
    de28:	10bfffc4 	addi	r2,r2,-1
    de2c:	1007883a 	mov	r3,r2
    de30:	e0bff017 	ldw	r2,-64(fp)
    de34:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    de38:	e0bffd17 	ldw	r2,-12(fp)
    de3c:	10c00104 	addi	r3,r2,4
    de40:	e0fffd15 	stw	r3,-12(fp)
    de44:	e0fff017 	ldw	r3,-64(fp)
    de48:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    de4c:	00800044 	movi	r2,1
    de50:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    de54:	e0bffe17 	ldw	r2,-8(fp)
    de58:	10c00104 	addi	r3,r2,4
    de5c:	e0fffe15 	stw	r3,-8(fp)
    de60:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    de64:	e0bff18b 	ldhu	r2,-58(fp)
    de68:	10800044 	addi	r2,r2,1
    de6c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    de70:	00005806 	br	dfd4 <OSEventPendMulti+0x398>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    de74:	e0bff203 	ldbu	r2,-56(fp)
    de78:	10800054 	ori	r2,r2,1
    de7c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    de80:	00005406 	br	dfd4 <OSEventPendMulti+0x398>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    de84:	e0bff017 	ldw	r2,-64(fp)
    de88:	10800117 	ldw	r2,4(r2)
    de8c:	10001326 	beq	r2,zero,dedc <OSEventPendMulti+0x2a0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    de90:	e0bffe17 	ldw	r2,-8(fp)
    de94:	10c00104 	addi	r3,r2,4
    de98:	e0fffe15 	stw	r3,-8(fp)
    de9c:	e0fff017 	ldw	r3,-64(fp)
    dea0:	18c00117 	ldw	r3,4(r3)
    dea4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    dea8:	e0bff017 	ldw	r2,-64(fp)
    deac:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    deb0:	e0bffd17 	ldw	r2,-12(fp)
    deb4:	10c00104 	addi	r3,r2,4
    deb8:	e0fffd15 	stw	r3,-12(fp)
    debc:	e0fff017 	ldw	r3,-64(fp)
    dec0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    dec4:	00800044 	movi	r2,1
    dec8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    decc:	e0bff18b 	ldhu	r2,-58(fp)
    ded0:	10800044 	addi	r2,r2,1
    ded4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    ded8:	00003e06 	br	dfd4 <OSEventPendMulti+0x398>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    dedc:	e0bff203 	ldbu	r2,-56(fp)
    dee0:	10800094 	ori	r2,r2,2
    dee4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    dee8:	00003a06 	br	dfd4 <OSEventPendMulti+0x398>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    deec:	e0bff017 	ldw	r2,-64(fp)
    def0:	10800117 	ldw	r2,4(r2)
    def4:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    def8:	e0bff517 	ldw	r2,-44(fp)
    defc:	1080058b 	ldhu	r2,22(r2)
    df00:	10bfffcc 	andi	r2,r2,65535
    df04:	10002426 	beq	r2,zero,df98 <OSEventPendMulti+0x35c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    df08:	e0bffe17 	ldw	r2,-8(fp)
    df0c:	10c00104 	addi	r3,r2,4
    df10:	e0fffe15 	stw	r3,-8(fp)
    df14:	e0fff517 	ldw	r3,-44(fp)
    df18:	18c00417 	ldw	r3,16(r3)
    df1c:	19400104 	addi	r5,r3,4
    df20:	e13ff517 	ldw	r4,-44(fp)
    df24:	21400415 	stw	r5,16(r4)
    df28:	18c00017 	ldw	r3,0(r3)
    df2c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    df30:	e0bff517 	ldw	r2,-44(fp)
    df34:	10c00417 	ldw	r3,16(r2)
    df38:	e0bff517 	ldw	r2,-44(fp)
    df3c:	10800217 	ldw	r2,8(r2)
    df40:	1880041e 	bne	r3,r2,df54 <OSEventPendMulti+0x318>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    df44:	e0bff517 	ldw	r2,-44(fp)
    df48:	10c00117 	ldw	r3,4(r2)
    df4c:	e0bff517 	ldw	r2,-44(fp)
    df50:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    df54:	e0bff517 	ldw	r2,-44(fp)
    df58:	1080058b 	ldhu	r2,22(r2)
    df5c:	10bfffc4 	addi	r2,r2,-1
    df60:	1007883a 	mov	r3,r2
    df64:	e0bff517 	ldw	r2,-44(fp)
    df68:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    df6c:	e0bffd17 	ldw	r2,-12(fp)
    df70:	10c00104 	addi	r3,r2,4
    df74:	e0fffd15 	stw	r3,-12(fp)
    df78:	e0fff017 	ldw	r3,-64(fp)
    df7c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    df80:	00800044 	movi	r2,1
    df84:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    df88:	e0bff18b 	ldhu	r2,-58(fp)
    df8c:	10800044 	addi	r2,r2,1
    df90:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    df94:	00000f06 	br	dfd4 <OSEventPendMulti+0x398>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    df98:	e0bff203 	ldbu	r2,-56(fp)
    df9c:	10800114 	ori	r2,r2,4
    dfa0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    dfa4:	00000b06 	br	dfd4 <OSEventPendMulti+0x398>
    dfa8:	e0bff317 	ldw	r2,-52(fp)
    dfac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dfb0:	e0bff417 	ldw	r2,-48(fp)
    dfb4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    dfb8:	e0bffd17 	ldw	r2,-12(fp)
    dfbc:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    dfc0:	e0800217 	ldw	r2,8(fp)
    dfc4:	00c00044 	movi	r3,1
    dfc8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    dfcc:	e0bff18b 	ldhu	r2,-58(fp)
    dfd0:	0000bd06 	br	e2c8 <OSEventPendMulti+0x68c>
        }
        pevents++;
    dfd4:	e0bfef17 	ldw	r2,-68(fp)
    dfd8:	10800104 	addi	r2,r2,4
    dfdc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    dfe0:	e0bfef17 	ldw	r2,-68(fp)
    dfe4:	10800017 	ldw	r2,0(r2)
    dfe8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    dfec:	e0bff017 	ldw	r2,-64(fp)
    dff0:	103f7d1e 	bne	r2,zero,dde8 <OSEventPendMulti+0x1ac>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    dff4:	e0bff103 	ldbu	r2,-60(fp)
    dff8:	10800058 	cmpnei	r2,r2,1
    dffc:	10000a1e 	bne	r2,zero,e028 <OSEventPendMulti+0x3ec>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    e000:	e0bffd17 	ldw	r2,-12(fp)
    e004:	10000015 	stw	zero,0(r2)
    e008:	e0bff317 	ldw	r2,-52(fp)
    e00c:	e0bff615 	stw	r2,-40(fp)
    e010:	e0bff617 	ldw	r2,-40(fp)
    e014:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    e018:	e0800217 	ldw	r2,8(fp)
    e01c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    e020:	e0bff18b 	ldhu	r2,-58(fp)
    e024:	0000a806 	br	e2c8 <OSEventPendMulti+0x68c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    e028:	008000b4 	movhi	r2,2
    e02c:	10b66904 	addi	r2,r2,-9820
    e030:	10c00017 	ldw	r3,0(r2)
    e034:	008000b4 	movhi	r2,2
    e038:	10b66904 	addi	r2,r2,-9820
    e03c:	10800017 	ldw	r2,0(r2)
    e040:	11000c03 	ldbu	r4,48(r2)
    e044:	e0bff203 	ldbu	r2,-56(fp)
    e048:	2084b03a 	or	r2,r4,r2
    e04c:	1009883a 	mov	r4,r2
    e050:	00bfe004 	movi	r2,-128
    e054:	2084b03a 	or	r2,r4,r2
    e058:	18800c05 	stb	r2,48(r3)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    e05c:	008000b4 	movhi	r2,2
    e060:	10b66904 	addi	r2,r2,-9820
    e064:	10800017 	ldw	r2,0(r2)
    e068:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    e06c:	008000b4 	movhi	r2,2
    e070:	10b66904 	addi	r2,r2,-9820
    e074:	10800017 	ldw	r2,0(r2)
    e078:	e0ffff0b 	ldhu	r3,-4(fp)
    e07c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    e080:	e13ffc17 	ldw	r4,-16(fp)
    e084:	000ee540 	call	ee54 <OS_EventTaskWaitMulti>
    e088:	e0bff317 	ldw	r2,-52(fp)
    e08c:	e0bff915 	stw	r2,-28(fp)
    e090:	e0bff917 	ldw	r2,-28(fp)
    e094:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    e098:	000f6f40 	call	f6f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e09c:	0005303a 	rdctl	r2,status
    e0a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e0a4:	e0fff717 	ldw	r3,-36(fp)
    e0a8:	00bfff84 	movi	r2,-2
    e0ac:	1884703a 	and	r2,r3,r2
    e0b0:	1001703a 	wrctl	status,r2
  
  return context;
    e0b4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    e0b8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    e0bc:	008000b4 	movhi	r2,2
    e0c0:	10b66904 	addi	r2,r2,-9820
    e0c4:	10800017 	ldw	r2,0(r2)
    e0c8:	10800c43 	ldbu	r2,49(r2)
    e0cc:	10803fcc 	andi	r2,r2,255
    e0d0:	10000226 	beq	r2,zero,e0dc <OSEventPendMulti+0x4a0>
    e0d4:	108000a0 	cmpeqi	r2,r2,2
    e0d8:	10001e26 	beq	r2,zero,e154 <OSEventPendMulti+0x518>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    e0dc:	008000b4 	movhi	r2,2
    e0e0:	10b66904 	addi	r2,r2,-9820
    e0e4:	10800017 	ldw	r2,0(r2)
    e0e8:	10800717 	ldw	r2,28(r2)
    e0ec:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    e0f0:	e0bff017 	ldw	r2,-64(fp)
    e0f4:	10000b26 	beq	r2,zero,e124 <OSEventPendMulti+0x4e8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    e0f8:	e0bffd17 	ldw	r2,-12(fp)
    e0fc:	10c00104 	addi	r3,r2,4
    e100:	e0fffd15 	stw	r3,-12(fp)
    e104:	e0fff017 	ldw	r3,-64(fp)
    e108:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    e10c:	e0bffd17 	ldw	r2,-12(fp)
    e110:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    e114:	e0bff18b 	ldhu	r2,-58(fp)
    e118:	10800044 	addi	r2,r2,1
    e11c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    e120:	00001306 	br	e170 <OSEventPendMulti+0x534>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    e124:	008000b4 	movhi	r2,2
    e128:	10b66904 	addi	r2,r2,-9820
    e12c:	10800017 	ldw	r2,0(r2)
    e130:	00c00044 	movi	r3,1
    e134:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e138:	008000b4 	movhi	r2,2
    e13c:	10b66904 	addi	r2,r2,-9820
    e140:	10800017 	ldw	r2,0(r2)
    e144:	e17ffc17 	ldw	r5,-16(fp)
    e148:	1009883a 	mov	r4,r2
    e14c:	000f0c40 	call	f0c4 <OS_EventTaskRemoveMulti>
             }
			 break;
    e150:	00000706 	br	e170 <OSEventPendMulti+0x534>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e154:	008000b4 	movhi	r2,2
    e158:	10b66904 	addi	r2,r2,-9820
    e15c:	10800017 	ldw	r2,0(r2)
    e160:	e17ffc17 	ldw	r5,-16(fp)
    e164:	1009883a 	mov	r4,r2
    e168:	000f0c40 	call	f0c4 <OS_EventTaskRemoveMulti>
             break;
    e16c:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    e170:	008000b4 	movhi	r2,2
    e174:	10b66904 	addi	r2,r2,-9820
    e178:	10800017 	ldw	r2,0(r2)
    e17c:	10800c43 	ldbu	r2,49(r2)
    e180:	10803fcc 	andi	r2,r2,255
    e184:	10000326 	beq	r2,zero,e194 <OSEventPendMulti+0x558>
    e188:	108000a0 	cmpeqi	r2,r2,2
    e18c:	1000251e 	bne	r2,zero,e224 <OSEventPendMulti+0x5e8>
    e190:	00002c06 	br	e244 <OSEventPendMulti+0x608>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    e194:	e0bff017 	ldw	r2,-64(fp)
    e198:	10800003 	ldbu	r2,0(r2)
    e19c:	10803fcc 	andi	r2,r2,255
    e1a0:	0080120e 	bge	zero,r2,e1ec <OSEventPendMulti+0x5b0>
    e1a4:	10c000d0 	cmplti	r3,r2,3
    e1a8:	1800071e 	bne	r3,zero,e1c8 <OSEventPendMulti+0x58c>
    e1ac:	108000e0 	cmpeqi	r2,r2,3
    e1b0:	10000e26 	beq	r2,zero,e1ec <OSEventPendMulti+0x5b0>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    e1b4:	e0bffe17 	ldw	r2,-8(fp)
    e1b8:	10c00104 	addi	r3,r2,4
    e1bc:	e0fffe15 	stw	r3,-8(fp)
    e1c0:	10000015 	stw	zero,0(r2)
                      break;
    e1c4:	00001406 	br	e218 <OSEventPendMulti+0x5dc>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    e1c8:	e0fffe17 	ldw	r3,-8(fp)
    e1cc:	18800104 	addi	r2,r3,4
    e1d0:	e0bffe15 	stw	r2,-8(fp)
    e1d4:	008000b4 	movhi	r2,2
    e1d8:	10b66904 	addi	r2,r2,-9820
    e1dc:	10800017 	ldw	r2,0(r2)
    e1e0:	10800917 	ldw	r2,36(r2)
    e1e4:	18800015 	stw	r2,0(r3)
                      break;
    e1e8:	00000b06 	br	e218 <OSEventPendMulti+0x5dc>
    e1ec:	e0bff317 	ldw	r2,-52(fp)
    e1f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e1f4:	e0bff817 	ldw	r2,-32(fp)
    e1f8:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    e1fc:	e0bffd17 	ldw	r2,-12(fp)
    e200:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    e204:	e0800217 	ldw	r2,8(fp)
    e208:	00c00044 	movi	r3,1
    e20c:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    e210:	e0bff18b 	ldhu	r2,-58(fp)
    e214:	00002c06 	br	e2c8 <OSEventPendMulti+0x68c>
             }
            *perr = OS_ERR_NONE;
    e218:	e0800217 	ldw	r2,8(fp)
    e21c:	10000005 	stb	zero,0(r2)
             break;
    e220:	00001006 	br	e264 <OSEventPendMulti+0x628>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    e224:	e0bffe17 	ldw	r2,-8(fp)
    e228:	10c00104 	addi	r3,r2,4
    e22c:	e0fffe15 	stw	r3,-8(fp)
    e230:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    e234:	e0800217 	ldw	r2,8(fp)
    e238:	00c00384 	movi	r3,14
    e23c:	10c00005 	stb	r3,0(r2)
             break;
    e240:	00000806 	br	e264 <OSEventPendMulti+0x628>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    e244:	e0bffe17 	ldw	r2,-8(fp)
    e248:	10c00104 	addi	r3,r2,4
    e24c:	e0fffe15 	stw	r3,-8(fp)
    e250:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    e254:	e0800217 	ldw	r2,8(fp)
    e258:	00c00284 	movi	r3,10
    e25c:	10c00005 	stb	r3,0(r2)
             break;
    e260:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    e264:	008000b4 	movhi	r2,2
    e268:	10b66904 	addi	r2,r2,-9820
    e26c:	10800017 	ldw	r2,0(r2)
    e270:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    e274:	008000b4 	movhi	r2,2
    e278:	10b66904 	addi	r2,r2,-9820
    e27c:	10800017 	ldw	r2,0(r2)
    e280:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    e284:	008000b4 	movhi	r2,2
    e288:	10b66904 	addi	r2,r2,-9820
    e28c:	10800017 	ldw	r2,0(r2)
    e290:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    e294:	008000b4 	movhi	r2,2
    e298:	10b66904 	addi	r2,r2,-9820
    e29c:	10800017 	ldw	r2,0(r2)
    e2a0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    e2a4:	008000b4 	movhi	r2,2
    e2a8:	10b66904 	addi	r2,r2,-9820
    e2ac:	10800017 	ldw	r2,0(r2)
    e2b0:	10000915 	stw	zero,36(r2)
    e2b4:	e0bff317 	ldw	r2,-52(fp)
    e2b8:	e0bffa15 	stw	r2,-24(fp)
    e2bc:	e0bffa17 	ldw	r2,-24(fp)
    e2c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    e2c4:	e0bff18b 	ldhu	r2,-58(fp)
}
    e2c8:	e037883a 	mov	sp,fp
    e2cc:	dfc00117 	ldw	ra,4(sp)
    e2d0:	df000017 	ldw	fp,0(sp)
    e2d4:	dec00204 	addi	sp,sp,8
    e2d8:	f800283a 	ret

0000e2dc <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    e2dc:	defffe04 	addi	sp,sp,-8
    e2e0:	dfc00115 	stw	ra,4(sp)
    e2e4:	df000015 	stw	fp,0(sp)
    e2e8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    e2ec:	0018eb80 	call	18eb8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    e2f0:	000f3140 	call	f314 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    e2f4:	000f3ac0 	call	f3ac <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    e2f8:	000f5440 	call	f544 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    e2fc:	000f22c0 	call	f22c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    e300:	00116500 	call	11650 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    e304:	0011fa40 	call	11fa4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    e308:	00131dc0 	call	131dc <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    e30c:	000f4440 	call	f444 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    e310:	000f4c40 	call	f4c4 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    e314:	0018ed80 	call	18ed8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    e318:	000ff040 	call	ff04 <OSDebugInit>
#endif
}
    e31c:	0001883a 	nop
    e320:	e037883a 	mov	sp,fp
    e324:	dfc00117 	ldw	ra,4(sp)
    e328:	df000017 	ldw	fp,0(sp)
    e32c:	dec00204 	addi	sp,sp,8
    e330:	f800283a 	ret

0000e334 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    e334:	defffc04 	addi	sp,sp,-16
    e338:	df000315 	stw	fp,12(sp)
    e33c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e340:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    e344:	008000b4 	movhi	r2,2
    e348:	10b65a44 	addi	r2,r2,-9879
    e34c:	10800003 	ldbu	r2,0(r2)
    e350:	10803fcc 	andi	r2,r2,255
    e354:	10800058 	cmpnei	r2,r2,1
    e358:	10001a1e 	bne	r2,zero,e3c4 <OSIntEnter+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e35c:	0005303a 	rdctl	r2,status
    e360:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e364:	e0ffff17 	ldw	r3,-4(fp)
    e368:	00bfff84 	movi	r2,-2
    e36c:	1884703a 	and	r2,r3,r2
    e370:	1001703a 	wrctl	status,r2
  
  return context;
    e374:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    e378:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    e37c:	008000b4 	movhi	r2,2
    e380:	10b66804 	addi	r2,r2,-9824
    e384:	10800003 	ldbu	r2,0(r2)
    e388:	10803fcc 	andi	r2,r2,255
    e38c:	10803fe0 	cmpeqi	r2,r2,255
    e390:	1000081e 	bne	r2,zero,e3b4 <OSIntEnter+0x80>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    e394:	008000b4 	movhi	r2,2
    e398:	10b66804 	addi	r2,r2,-9824
    e39c:	10800003 	ldbu	r2,0(r2)
    e3a0:	10800044 	addi	r2,r2,1
    e3a4:	1007883a 	mov	r3,r2
    e3a8:	008000b4 	movhi	r2,2
    e3ac:	10b66804 	addi	r2,r2,-9824
    e3b0:	10c00005 	stb	r3,0(r2)
    e3b4:	e0bffd17 	ldw	r2,-12(fp)
    e3b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e3bc:	e0bffe17 	ldw	r2,-8(fp)
    e3c0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    e3c4:	0001883a 	nop
    e3c8:	e037883a 	mov	sp,fp
    e3cc:	df000017 	ldw	fp,0(sp)
    e3d0:	dec00104 	addi	sp,sp,4
    e3d4:	f800283a 	ret

0000e3d8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    e3d8:	defffb04 	addi	sp,sp,-20
    e3dc:	dfc00415 	stw	ra,16(sp)
    e3e0:	df000315 	stw	fp,12(sp)
    e3e4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e3e8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    e3ec:	008000b4 	movhi	r2,2
    e3f0:	10b65a44 	addi	r2,r2,-9879
    e3f4:	10800003 	ldbu	r2,0(r2)
    e3f8:	10803fcc 	andi	r2,r2,255
    e3fc:	10800058 	cmpnei	r2,r2,1
    e400:	1000481e 	bne	r2,zero,e524 <OSIntExit+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e404:	0005303a 	rdctl	r2,status
    e408:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e40c:	e0ffff17 	ldw	r3,-4(fp)
    e410:	00bfff84 	movi	r2,-2
    e414:	1884703a 	and	r2,r3,r2
    e418:	1001703a 	wrctl	status,r2
  
  return context;
    e41c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    e420:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    e424:	008000b4 	movhi	r2,2
    e428:	10b66804 	addi	r2,r2,-9824
    e42c:	10800003 	ldbu	r2,0(r2)
    e430:	10803fcc 	andi	r2,r2,255
    e434:	10000826 	beq	r2,zero,e458 <OSIntExit+0x80>
            OSIntNesting--;
    e438:	008000b4 	movhi	r2,2
    e43c:	10b66804 	addi	r2,r2,-9824
    e440:	10800003 	ldbu	r2,0(r2)
    e444:	10bfffc4 	addi	r2,r2,-1
    e448:	1007883a 	mov	r3,r2
    e44c:	008000b4 	movhi	r2,2
    e450:	10b66804 	addi	r2,r2,-9824
    e454:	10c00005 	stb	r3,0(r2)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    e458:	008000b4 	movhi	r2,2
    e45c:	10b66804 	addi	r2,r2,-9824
    e460:	10800003 	ldbu	r2,0(r2)
    e464:	10803fcc 	andi	r2,r2,255
    e468:	10002a1e 	bne	r2,zero,e514 <OSIntExit+0x13c>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    e46c:	008000b4 	movhi	r2,2
    e470:	10b65a04 	addi	r2,r2,-9880
    e474:	10800003 	ldbu	r2,0(r2)
    e478:	10803fcc 	andi	r2,r2,255
    e47c:	1000251e 	bne	r2,zero,e514 <OSIntExit+0x13c>
                OS_SchedNew();
    e480:	000f80c0 	call	f80c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    e484:	008000b4 	movhi	r2,2
    e488:	10b65c04 	addi	r2,r2,-9872
    e48c:	10c00003 	ldbu	r3,0(r2)
    e490:	008000b4 	movhi	r2,2
    e494:	10b65c44 	addi	r2,r2,-9871
    e498:	10800003 	ldbu	r2,0(r2)
    e49c:	18c03fcc 	andi	r3,r3,255
    e4a0:	10803fcc 	andi	r2,r2,255
    e4a4:	18801b26 	beq	r3,r2,e514 <OSIntExit+0x13c>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    e4a8:	008000b4 	movhi	r2,2
    e4ac:	10b65c04 	addi	r2,r2,-9872
    e4b0:	10800003 	ldbu	r2,0(r2)
    e4b4:	10c03fcc 	andi	r3,r2,255
    e4b8:	008000b4 	movhi	r2,2
    e4bc:	1082f304 	addi	r2,r2,3020
    e4c0:	18c7883a 	add	r3,r3,r3
    e4c4:	18c7883a 	add	r3,r3,r3
    e4c8:	10c5883a 	add	r2,r2,r3
    e4cc:	10c00017 	ldw	r3,0(r2)
    e4d0:	008000b4 	movhi	r2,2
    e4d4:	10b66404 	addi	r2,r2,-9840
    e4d8:	10c00015 	stw	r3,0(r2)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    e4dc:	008000b4 	movhi	r2,2
    e4e0:	10b66404 	addi	r2,r2,-9840
    e4e4:	10800017 	ldw	r2,0(r2)
    e4e8:	10c00e17 	ldw	r3,56(r2)
    e4ec:	18c00044 	addi	r3,r3,1
    e4f0:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    e4f4:	008000b4 	movhi	r2,2
    e4f8:	10b65f04 	addi	r2,r2,-9860
    e4fc:	10800017 	ldw	r2,0(r2)
    e500:	10c00044 	addi	r3,r2,1
    e504:	008000b4 	movhi	r2,2
    e508:	10b65f04 	addi	r2,r2,-9860
    e50c:	10c00015 	stw	r3,0(r2)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    e510:	0018be40 	call	18be4 <OSCtxSw>
    e514:	e0bffd17 	ldw	r2,-12(fp)
    e518:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e51c:	e0bffe17 	ldw	r2,-8(fp)
    e520:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    e524:	0001883a 	nop
    e528:	e037883a 	mov	sp,fp
    e52c:	dfc00117 	ldw	ra,4(sp)
    e530:	df000017 	ldw	fp,0(sp)
    e534:	dec00204 	addi	sp,sp,8
    e538:	f800283a 	ret

0000e53c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    e53c:	defffc04 	addi	sp,sp,-16
    e540:	df000315 	stw	fp,12(sp)
    e544:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e548:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    e54c:	008000b4 	movhi	r2,2
    e550:	10b65a44 	addi	r2,r2,-9879
    e554:	10800003 	ldbu	r2,0(r2)
    e558:	10803fcc 	andi	r2,r2,255
    e55c:	10800058 	cmpnei	r2,r2,1
    e560:	10001f1e 	bne	r2,zero,e5e0 <OSSchedLock+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e564:	0005303a 	rdctl	r2,status
    e568:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e56c:	e0ffff17 	ldw	r3,-4(fp)
    e570:	00bfff84 	movi	r2,-2
    e574:	1884703a 	and	r2,r3,r2
    e578:	1001703a 	wrctl	status,r2
  
  return context;
    e57c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    e580:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    e584:	008000b4 	movhi	r2,2
    e588:	10b66804 	addi	r2,r2,-9824
    e58c:	10800003 	ldbu	r2,0(r2)
    e590:	10803fcc 	andi	r2,r2,255
    e594:	10000e1e 	bne	r2,zero,e5d0 <OSSchedLock+0x94>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    e598:	008000b4 	movhi	r2,2
    e59c:	10b65a04 	addi	r2,r2,-9880
    e5a0:	10800003 	ldbu	r2,0(r2)
    e5a4:	10803fcc 	andi	r2,r2,255
    e5a8:	10803fe0 	cmpeqi	r2,r2,255
    e5ac:	1000081e 	bne	r2,zero,e5d0 <OSSchedLock+0x94>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    e5b0:	008000b4 	movhi	r2,2
    e5b4:	10b65a04 	addi	r2,r2,-9880
    e5b8:	10800003 	ldbu	r2,0(r2)
    e5bc:	10800044 	addi	r2,r2,1
    e5c0:	1007883a 	mov	r3,r2
    e5c4:	008000b4 	movhi	r2,2
    e5c8:	10b65a04 	addi	r2,r2,-9880
    e5cc:	10c00005 	stb	r3,0(r2)
    e5d0:	e0bffd17 	ldw	r2,-12(fp)
    e5d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e5d8:	e0bffe17 	ldw	r2,-8(fp)
    e5dc:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    e5e0:	0001883a 	nop
    e5e4:	e037883a 	mov	sp,fp
    e5e8:	df000017 	ldw	fp,0(sp)
    e5ec:	dec00104 	addi	sp,sp,4
    e5f0:	f800283a 	ret

0000e5f4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    e5f4:	defff804 	addi	sp,sp,-32
    e5f8:	dfc00715 	stw	ra,28(sp)
    e5fc:	df000615 	stw	fp,24(sp)
    e600:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e604:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    e608:	008000b4 	movhi	r2,2
    e60c:	10b65a44 	addi	r2,r2,-9879
    e610:	10800003 	ldbu	r2,0(r2)
    e614:	10803fcc 	andi	r2,r2,255
    e618:	10800058 	cmpnei	r2,r2,1
    e61c:	1000331e 	bne	r2,zero,e6ec <OSSchedUnlock+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e620:	0005303a 	rdctl	r2,status
    e624:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e628:	e0ffff17 	ldw	r3,-4(fp)
    e62c:	00bfff84 	movi	r2,-2
    e630:	1884703a 	and	r2,r3,r2
    e634:	1001703a 	wrctl	status,r2
  
  return context;
    e638:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    e63c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    e640:	008000b4 	movhi	r2,2
    e644:	10b65a04 	addi	r2,r2,-9880
    e648:	10800003 	ldbu	r2,0(r2)
    e64c:	10803fcc 	andi	r2,r2,255
    e650:	10002226 	beq	r2,zero,e6dc <OSSchedUnlock+0xe8>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    e654:	008000b4 	movhi	r2,2
    e658:	10b65a04 	addi	r2,r2,-9880
    e65c:	10800003 	ldbu	r2,0(r2)
    e660:	10bfffc4 	addi	r2,r2,-1
    e664:	1007883a 	mov	r3,r2
    e668:	008000b4 	movhi	r2,2
    e66c:	10b65a04 	addi	r2,r2,-9880
    e670:	10c00005 	stb	r3,0(r2)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    e674:	008000b4 	movhi	r2,2
    e678:	10b65a04 	addi	r2,r2,-9880
    e67c:	10800003 	ldbu	r2,0(r2)
    e680:	10803fcc 	andi	r2,r2,255
    e684:	1000101e 	bne	r2,zero,e6c8 <OSSchedUnlock+0xd4>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    e688:	008000b4 	movhi	r2,2
    e68c:	10b66804 	addi	r2,r2,-9824
    e690:	10800003 	ldbu	r2,0(r2)
    e694:	10803fcc 	andi	r2,r2,255
    e698:	1000061e 	bne	r2,zero,e6b4 <OSSchedUnlock+0xc0>
    e69c:	e0bffa17 	ldw	r2,-24(fp)
    e6a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e6a4:	e0bffb17 	ldw	r2,-20(fp)
    e6a8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    e6ac:	000f6f40 	call	f6f4 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    e6b0:	00000e06 	br	e6ec <OSSchedUnlock+0xf8>
    e6b4:	e0bffa17 	ldw	r2,-24(fp)
    e6b8:	e0bffc15 	stw	r2,-16(fp)
    e6bc:	e0bffc17 	ldw	r2,-16(fp)
    e6c0:	1001703a 	wrctl	status,r2
    e6c4:	00000906 	br	e6ec <OSSchedUnlock+0xf8>
    e6c8:	e0bffa17 	ldw	r2,-24(fp)
    e6cc:	e0bffd15 	stw	r2,-12(fp)
    e6d0:	e0bffd17 	ldw	r2,-12(fp)
    e6d4:	1001703a 	wrctl	status,r2
    e6d8:	00000406 	br	e6ec <OSSchedUnlock+0xf8>
    e6dc:	e0bffa17 	ldw	r2,-24(fp)
    e6e0:	e0bffe15 	stw	r2,-8(fp)
    e6e4:	e0bffe17 	ldw	r2,-8(fp)
    e6e8:	1001703a 	wrctl	status,r2
    e6ec:	0001883a 	nop
    e6f0:	e037883a 	mov	sp,fp
    e6f4:	dfc00117 	ldw	ra,4(sp)
    e6f8:	df000017 	ldw	fp,0(sp)
    e6fc:	dec00204 	addi	sp,sp,8
    e700:	f800283a 	ret

0000e704 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    e704:	defffe04 	addi	sp,sp,-8
    e708:	dfc00115 	stw	ra,4(sp)
    e70c:	df000015 	stw	fp,0(sp)
    e710:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    e714:	008000b4 	movhi	r2,2
    e718:	10b65a44 	addi	r2,r2,-9879
    e71c:	10800003 	ldbu	r2,0(r2)
    e720:	10803fcc 	andi	r2,r2,255
    e724:	10001b1e 	bne	r2,zero,e794 <OSStart+0x90>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    e728:	000f80c0 	call	f80c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    e72c:	008000b4 	movhi	r2,2
    e730:	10b65c04 	addi	r2,r2,-9872
    e734:	10c00003 	ldbu	r3,0(r2)
    e738:	008000b4 	movhi	r2,2
    e73c:	10b65c44 	addi	r2,r2,-9871
    e740:	10c00005 	stb	r3,0(r2)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    e744:	008000b4 	movhi	r2,2
    e748:	10b65c04 	addi	r2,r2,-9872
    e74c:	10800003 	ldbu	r2,0(r2)
    e750:	10c03fcc 	andi	r3,r2,255
    e754:	008000b4 	movhi	r2,2
    e758:	1082f304 	addi	r2,r2,3020
    e75c:	18c7883a 	add	r3,r3,r3
    e760:	18c7883a 	add	r3,r3,r3
    e764:	10c5883a 	add	r2,r2,r3
    e768:	10c00017 	ldw	r3,0(r2)
    e76c:	008000b4 	movhi	r2,2
    e770:	10b66404 	addi	r2,r2,-9840
    e774:	10c00015 	stw	r3,0(r2)
        OSTCBCur      = OSTCBHighRdy;
    e778:	008000b4 	movhi	r2,2
    e77c:	10b66404 	addi	r2,r2,-9840
    e780:	10c00017 	ldw	r3,0(r2)
    e784:	008000b4 	movhi	r2,2
    e788:	10b66904 	addi	r2,r2,-9820
    e78c:	10c00015 	stw	r3,0(r2)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    e790:	0018c700 	call	18c70 <OSStartHighRdy>
    }
}
    e794:	0001883a 	nop
    e798:	e037883a 	mov	sp,fp
    e79c:	dfc00117 	ldw	ra,4(sp)
    e7a0:	df000017 	ldw	fp,0(sp)
    e7a4:	dec00204 	addi	sp,sp,8
    e7a8:	f800283a 	ret

0000e7ac <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    e7ac:	defff904 	addi	sp,sp,-28
    e7b0:	dfc00615 	stw	ra,24(sp)
    e7b4:	df000515 	stw	fp,20(sp)
    e7b8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e7bc:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    e7c0:	01000084 	movi	r4,2
    e7c4:	00156a00 	call	156a0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e7c8:	0005303a 	rdctl	r2,status
    e7cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e7d0:	e0fffc17 	ldw	r3,-16(fp)
    e7d4:	00bfff84 	movi	r2,-2
    e7d8:	1884703a 	and	r2,r3,r2
    e7dc:	1001703a 	wrctl	status,r2
  
  return context;
    e7e0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    e7e4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    e7e8:	008000b4 	movhi	r2,2
    e7ec:	10b65b04 	addi	r2,r2,-9876
    e7f0:	10000015 	stw	zero,0(r2)
    e7f4:	e0bffb17 	ldw	r2,-20(fp)
    e7f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e7fc:	e0bffd17 	ldw	r2,-12(fp)
    e800:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    e804:	0009883a 	mov	r4,zero
    e808:	00156a00 	call	156a0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e80c:	0005303a 	rdctl	r2,status
    e810:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e814:	e0fffe17 	ldw	r3,-8(fp)
    e818:	00bfff84 	movi	r2,-2
    e81c:	1884703a 	and	r2,r3,r2
    e820:	1001703a 	wrctl	status,r2
  
  return context;
    e824:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    e828:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    e82c:	008000b4 	movhi	r2,2
    e830:	10b65b04 	addi	r2,r2,-9876
    e834:	10c00017 	ldw	r3,0(r2)
    e838:	008000b4 	movhi	r2,2
    e83c:	10b66004 	addi	r2,r2,-9856
    e840:	10c00015 	stw	r3,0(r2)
    OSStatRdy    = OS_TRUE;
    e844:	008000b4 	movhi	r2,2
    e848:	10b66c04 	addi	r2,r2,-9808
    e84c:	00c00044 	movi	r3,1
    e850:	10c00005 	stb	r3,0(r2)
    e854:	e0bffb17 	ldw	r2,-20(fp)
    e858:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e85c:	e0bfff17 	ldw	r2,-4(fp)
    e860:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    e864:	0001883a 	nop
    e868:	e037883a 	mov	sp,fp
    e86c:	dfc00117 	ldw	ra,4(sp)
    e870:	df000017 	ldw	fp,0(sp)
    e874:	dec00204 	addi	sp,sp,8
    e878:	f800283a 	ret

0000e87c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    e87c:	defff704 	addi	sp,sp,-36
    e880:	dfc00815 	stw	ra,32(sp)
    e884:	df000715 	stw	fp,28(sp)
    e888:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    e88c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    e890:	0018e980 	call	18e98 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e894:	0005303a 	rdctl	r2,status
    e898:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e89c:	e0fffd17 	ldw	r3,-12(fp)
    e8a0:	00bfff84 	movi	r2,-2
    e8a4:	1884703a 	and	r2,r3,r2
    e8a8:	1001703a 	wrctl	status,r2
  
  return context;
    e8ac:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    e8b0:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    e8b4:	008000b4 	movhi	r2,2
    e8b8:	10b66a04 	addi	r2,r2,-9816
    e8bc:	10800017 	ldw	r2,0(r2)
    e8c0:	10c00044 	addi	r3,r2,1
    e8c4:	008000b4 	movhi	r2,2
    e8c8:	10b66a04 	addi	r2,r2,-9816
    e8cc:	10c00015 	stw	r3,0(r2)
    e8d0:	e0bffb17 	ldw	r2,-20(fp)
    e8d4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e8d8:	e0bfff17 	ldw	r2,-4(fp)
    e8dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    e8e0:	008000b4 	movhi	r2,2
    e8e4:	10b65a44 	addi	r2,r2,-9879
    e8e8:	10800003 	ldbu	r2,0(r2)
    e8ec:	10803fcc 	andi	r2,r2,255
    e8f0:	10800058 	cmpnei	r2,r2,1
    e8f4:	1000791e 	bne	r2,zero,eadc <OSTimeTick+0x260>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    e8f8:	008000b4 	movhi	r2,2
    e8fc:	10b65e04 	addi	r2,r2,-9864
    e900:	10800003 	ldbu	r2,0(r2)
    e904:	10803fcc 	andi	r2,r2,255
    e908:	10c00060 	cmpeqi	r3,r2,1
    e90c:	1800061e 	bne	r3,zero,e928 <OSTimeTick+0xac>
    e910:	10c000a0 	cmpeqi	r3,r2,2
    e914:	1800061e 	bne	r3,zero,e930 <OSTimeTick+0xb4>
    e918:	10000c1e 	bne	r2,zero,e94c <OSTimeTick+0xd0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    e91c:	00800044 	movi	r2,1
    e920:	e0bffa05 	stb	r2,-24(fp)
                 break;
    e924:	00000f06 	br	e964 <OSTimeTick+0xe8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    e928:	e03ffa05 	stb	zero,-24(fp)
                 break;
    e92c:	00000d06 	br	e964 <OSTimeTick+0xe8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    e930:	00800044 	movi	r2,1
    e934:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    e938:	008000b4 	movhi	r2,2
    e93c:	10b65e04 	addi	r2,r2,-9864
    e940:	00c00044 	movi	r3,1
    e944:	10c00005 	stb	r3,0(r2)
                 break;
    e948:	00000606 	br	e964 <OSTimeTick+0xe8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    e94c:	00800044 	movi	r2,1
    e950:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    e954:	008000b4 	movhi	r2,2
    e958:	10b65e04 	addi	r2,r2,-9864
    e95c:	10000005 	stb	zero,0(r2)
                 break;
    e960:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    e964:	e0bffa03 	ldbu	r2,-24(fp)
    e968:	10005b26 	beq	r2,zero,ead8 <OSTimeTick+0x25c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    e96c:	008000b4 	movhi	r2,2
    e970:	10b65d04 	addi	r2,r2,-9868
    e974:	10800017 	ldw	r2,0(r2)
    e978:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    e97c:	00005006 	br	eac0 <OSTimeTick+0x244>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e980:	0005303a 	rdctl	r2,status
    e984:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e988:	e0fffc17 	ldw	r3,-16(fp)
    e98c:	00bfff84 	movi	r2,-2
    e990:	1884703a 	and	r2,r3,r2
    e994:	1001703a 	wrctl	status,r2
  
  return context;
    e998:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    e99c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    e9a0:	e0bff917 	ldw	r2,-28(fp)
    e9a4:	10800b8b 	ldhu	r2,46(r2)
    e9a8:	10bfffcc 	andi	r2,r2,65535
    e9ac:	10003d26 	beq	r2,zero,eaa4 <OSTimeTick+0x228>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    e9b0:	e0bff917 	ldw	r2,-28(fp)
    e9b4:	10800b8b 	ldhu	r2,46(r2)
    e9b8:	10bfffc4 	addi	r2,r2,-1
    e9bc:	1007883a 	mov	r3,r2
    e9c0:	e0bff917 	ldw	r2,-28(fp)
    e9c4:	10c00b8d 	sth	r3,46(r2)
    e9c8:	e0bff917 	ldw	r2,-28(fp)
    e9cc:	10800b8b 	ldhu	r2,46(r2)
    e9d0:	10bfffcc 	andi	r2,r2,65535
    e9d4:	1000331e 	bne	r2,zero,eaa4 <OSTimeTick+0x228>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    e9d8:	e0bff917 	ldw	r2,-28(fp)
    e9dc:	10800c03 	ldbu	r2,48(r2)
    e9e0:	10803fcc 	andi	r2,r2,255
    e9e4:	10800dcc 	andi	r2,r2,55
    e9e8:	10000b26 	beq	r2,zero,ea18 <OSTimeTick+0x19c>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    e9ec:	e0bff917 	ldw	r2,-28(fp)
    e9f0:	10c00c03 	ldbu	r3,48(r2)
    e9f4:	00bff204 	movi	r2,-56
    e9f8:	1884703a 	and	r2,r3,r2
    e9fc:	1007883a 	mov	r3,r2
    ea00:	e0bff917 	ldw	r2,-28(fp)
    ea04:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    ea08:	e0bff917 	ldw	r2,-28(fp)
    ea0c:	00c00044 	movi	r3,1
    ea10:	10c00c45 	stb	r3,49(r2)
    ea14:	00000206 	br	ea20 <OSTimeTick+0x1a4>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    ea18:	e0bff917 	ldw	r2,-28(fp)
    ea1c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    ea20:	e0bff917 	ldw	r2,-28(fp)
    ea24:	10800c03 	ldbu	r2,48(r2)
    ea28:	10803fcc 	andi	r2,r2,255
    ea2c:	1080020c 	andi	r2,r2,8
    ea30:	10001c1e 	bne	r2,zero,eaa4 <OSTimeTick+0x228>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    ea34:	e0bff917 	ldw	r2,-28(fp)
    ea38:	10c00d83 	ldbu	r3,54(r2)
    ea3c:	008000b4 	movhi	r2,2
    ea40:	10b66604 	addi	r2,r2,-9832
    ea44:	10800003 	ldbu	r2,0(r2)
    ea48:	1884b03a 	or	r2,r3,r2
    ea4c:	1007883a 	mov	r3,r2
    ea50:	008000b4 	movhi	r2,2
    ea54:	10b66604 	addi	r2,r2,-9832
    ea58:	10c00005 	stb	r3,0(r2)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    ea5c:	e0bff917 	ldw	r2,-28(fp)
    ea60:	10800d03 	ldbu	r2,52(r2)
    ea64:	10c03fcc 	andi	r3,r2,255
    ea68:	e0bff917 	ldw	r2,-28(fp)
    ea6c:	10800d03 	ldbu	r2,52(r2)
    ea70:	11003fcc 	andi	r4,r2,255
    ea74:	008000b4 	movhi	r2,2
    ea78:	10b66644 	addi	r2,r2,-9831
    ea7c:	1105883a 	add	r2,r2,r4
    ea80:	11000003 	ldbu	r4,0(r2)
    ea84:	e0bff917 	ldw	r2,-28(fp)
    ea88:	10800d43 	ldbu	r2,53(r2)
    ea8c:	2084b03a 	or	r2,r4,r2
    ea90:	1009883a 	mov	r4,r2
    ea94:	008000b4 	movhi	r2,2
    ea98:	10b66644 	addi	r2,r2,-9831
    ea9c:	10c5883a 	add	r2,r2,r3
    eaa0:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    eaa4:	e0bff917 	ldw	r2,-28(fp)
    eaa8:	10800517 	ldw	r2,20(r2)
    eaac:	e0bff915 	stw	r2,-28(fp)
    eab0:	e0bffb17 	ldw	r2,-20(fp)
    eab4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eab8:	e0bffe17 	ldw	r2,-8(fp)
    eabc:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    eac0:	e0bff917 	ldw	r2,-28(fp)
    eac4:	10800c83 	ldbu	r2,50(r2)
    eac8:	10803fcc 	andi	r2,r2,255
    eacc:	10800518 	cmpnei	r2,r2,20
    ead0:	103fab1e 	bne	r2,zero,e980 <OSTimeTick+0x104>
    ead4:	00000106 	br	eadc <OSTimeTick+0x260>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    ead8:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    eadc:	e037883a 	mov	sp,fp
    eae0:	dfc00117 	ldw	ra,4(sp)
    eae4:	df000017 	ldw	fp,0(sp)
    eae8:	dec00204 	addi	sp,sp,8
    eaec:	f800283a 	ret

0000eaf0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    eaf0:	deffff04 	addi	sp,sp,-4
    eaf4:	df000015 	stw	fp,0(sp)
    eaf8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    eafc:	00804784 	movi	r2,286
}
    eb00:	e037883a 	mov	sp,fp
    eb04:	df000017 	ldw	fp,0(sp)
    eb08:	dec00104 	addi	sp,sp,4
    eb0c:	f800283a 	ret

0000eb10 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    eb10:	deffff04 	addi	sp,sp,-4
    eb14:	df000015 	stw	fp,0(sp)
    eb18:	d839883a 	mov	fp,sp
}
    eb1c:	0001883a 	nop
    eb20:	e037883a 	mov	sp,fp
    eb24:	df000017 	ldw	fp,0(sp)
    eb28:	dec00104 	addi	sp,sp,4
    eb2c:	f800283a 	ret

0000eb30 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    eb30:	defff804 	addi	sp,sp,-32
    eb34:	dfc00715 	stw	ra,28(sp)
    eb38:	df000615 	stw	fp,24(sp)
    eb3c:	df000604 	addi	fp,sp,24
    eb40:	e13ffc15 	stw	r4,-16(fp)
    eb44:	e17ffd15 	stw	r5,-12(fp)
    eb48:	3007883a 	mov	r3,r6
    eb4c:	3805883a 	mov	r2,r7
    eb50:	e0fffe05 	stb	r3,-8(fp)
    eb54:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    eb58:	e0bffc17 	ldw	r2,-16(fp)
    eb5c:	10800283 	ldbu	r2,10(r2)
    eb60:	10c03fcc 	andi	r3,r2,255
    eb64:	008000b4 	movhi	r2,2
    eb68:	10a64604 	addi	r2,r2,-26344
    eb6c:	10c5883a 	add	r2,r2,r3
    eb70:	10800003 	ldbu	r2,0(r2)
    eb74:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    eb78:	e0bffa03 	ldbu	r2,-24(fp)
    eb7c:	e0fffc17 	ldw	r3,-16(fp)
    eb80:	1885883a 	add	r2,r3,r2
    eb84:	108002c4 	addi	r2,r2,11
    eb88:	10800003 	ldbu	r2,0(r2)
    eb8c:	10c03fcc 	andi	r3,r2,255
    eb90:	008000b4 	movhi	r2,2
    eb94:	10a64604 	addi	r2,r2,-26344
    eb98:	10c5883a 	add	r2,r2,r3
    eb9c:	10800003 	ldbu	r2,0(r2)
    eba0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    eba4:	e0bffa03 	ldbu	r2,-24(fp)
    eba8:	100490fa 	slli	r2,r2,3
    ebac:	1007883a 	mov	r3,r2
    ebb0:	e0bffa43 	ldbu	r2,-23(fp)
    ebb4:	1885883a 	add	r2,r3,r2
    ebb8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    ebbc:	e0fffa83 	ldbu	r3,-22(fp)
    ebc0:	008000b4 	movhi	r2,2
    ebc4:	1082f304 	addi	r2,r2,3020
    ebc8:	18c7883a 	add	r3,r3,r3
    ebcc:	18c7883a 	add	r3,r3,r3
    ebd0:	10c5883a 	add	r2,r2,r3
    ebd4:	10800017 	ldw	r2,0(r2)
    ebd8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    ebdc:	e0bffb17 	ldw	r2,-20(fp)
    ebe0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    ebe4:	e0bffb17 	ldw	r2,-20(fp)
    ebe8:	e0fffd17 	ldw	r3,-12(fp)
    ebec:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ebf0:	e0bffb17 	ldw	r2,-20(fp)
    ebf4:	10800c03 	ldbu	r2,48(r2)
    ebf8:	1007883a 	mov	r3,r2
    ebfc:	e0bffe03 	ldbu	r2,-8(fp)
    ec00:	0084303a 	nor	r2,zero,r2
    ec04:	1884703a 	and	r2,r3,r2
    ec08:	1007883a 	mov	r3,r2
    ec0c:	e0bffb17 	ldw	r2,-20(fp)
    ec10:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    ec14:	e0bffb17 	ldw	r2,-20(fp)
    ec18:	e0ffff03 	ldbu	r3,-4(fp)
    ec1c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    ec20:	e0bffb17 	ldw	r2,-20(fp)
    ec24:	10800c03 	ldbu	r2,48(r2)
    ec28:	10803fcc 	andi	r2,r2,255
    ec2c:	1080020c 	andi	r2,r2,8
    ec30:	1000181e 	bne	r2,zero,ec94 <OS_EventTaskRdy+0x164>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    ec34:	e0bffb17 	ldw	r2,-20(fp)
    ec38:	10c00d83 	ldbu	r3,54(r2)
    ec3c:	008000b4 	movhi	r2,2
    ec40:	10b66604 	addi	r2,r2,-9832
    ec44:	10800003 	ldbu	r2,0(r2)
    ec48:	1884b03a 	or	r2,r3,r2
    ec4c:	1007883a 	mov	r3,r2
    ec50:	008000b4 	movhi	r2,2
    ec54:	10b66604 	addi	r2,r2,-9832
    ec58:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    ec5c:	e0fffa03 	ldbu	r3,-24(fp)
    ec60:	e13ffa03 	ldbu	r4,-24(fp)
    ec64:	008000b4 	movhi	r2,2
    ec68:	10b66644 	addi	r2,r2,-9831
    ec6c:	1105883a 	add	r2,r2,r4
    ec70:	11000003 	ldbu	r4,0(r2)
    ec74:	e0bffb17 	ldw	r2,-20(fp)
    ec78:	10800d43 	ldbu	r2,53(r2)
    ec7c:	2084b03a 	or	r2,r4,r2
    ec80:	1009883a 	mov	r4,r2
    ec84:	008000b4 	movhi	r2,2
    ec88:	10b66644 	addi	r2,r2,-9831
    ec8c:	10c5883a 	add	r2,r2,r3
    ec90:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    ec94:	e17ffc17 	ldw	r5,-16(fp)
    ec98:	e13ffb17 	ldw	r4,-20(fp)
    ec9c:	000f00c0 	call	f00c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    eca0:	e0bffb17 	ldw	r2,-20(fp)
    eca4:	10800817 	ldw	r2,32(r2)
    eca8:	10000826 	beq	r2,zero,eccc <OS_EventTaskRdy+0x19c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    ecac:	e0bffb17 	ldw	r2,-20(fp)
    ecb0:	10800817 	ldw	r2,32(r2)
    ecb4:	100b883a 	mov	r5,r2
    ecb8:	e13ffb17 	ldw	r4,-20(fp)
    ecbc:	000f0c40 	call	f0c4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    ecc0:	e0bffb17 	ldw	r2,-20(fp)
    ecc4:	e0fffc17 	ldw	r3,-16(fp)
    ecc8:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    eccc:	e0bffa83 	ldbu	r2,-22(fp)
}
    ecd0:	e037883a 	mov	sp,fp
    ecd4:	dfc00117 	ldw	ra,4(sp)
    ecd8:	df000017 	ldw	fp,0(sp)
    ecdc:	dec00204 	addi	sp,sp,8
    ece0:	f800283a 	ret

0000ece4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    ece4:	defffd04 	addi	sp,sp,-12
    ece8:	df000215 	stw	fp,8(sp)
    ecec:	df000204 	addi	fp,sp,8
    ecf0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    ecf4:	008000b4 	movhi	r2,2
    ecf8:	10b66904 	addi	r2,r2,-9820
    ecfc:	10800017 	ldw	r2,0(r2)
    ed00:	e0ffff17 	ldw	r3,-4(fp)
    ed04:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    ed08:	008000b4 	movhi	r2,2
    ed0c:	10b66904 	addi	r2,r2,-9820
    ed10:	10800017 	ldw	r2,0(r2)
    ed14:	10800d03 	ldbu	r2,52(r2)
    ed18:	10c03fcc 	andi	r3,r2,255
    ed1c:	008000b4 	movhi	r2,2
    ed20:	10b66904 	addi	r2,r2,-9820
    ed24:	10800017 	ldw	r2,0(r2)
    ed28:	10800d03 	ldbu	r2,52(r2)
    ed2c:	10803fcc 	andi	r2,r2,255
    ed30:	e13fff17 	ldw	r4,-4(fp)
    ed34:	2085883a 	add	r2,r4,r2
    ed38:	108002c4 	addi	r2,r2,11
    ed3c:	11000003 	ldbu	r4,0(r2)
    ed40:	008000b4 	movhi	r2,2
    ed44:	10b66904 	addi	r2,r2,-9820
    ed48:	10800017 	ldw	r2,0(r2)
    ed4c:	10800d43 	ldbu	r2,53(r2)
    ed50:	2084b03a 	or	r2,r4,r2
    ed54:	1009883a 	mov	r4,r2
    ed58:	e0bfff17 	ldw	r2,-4(fp)
    ed5c:	10c5883a 	add	r2,r2,r3
    ed60:	108002c4 	addi	r2,r2,11
    ed64:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    ed68:	e0bfff17 	ldw	r2,-4(fp)
    ed6c:	10c00283 	ldbu	r3,10(r2)
    ed70:	008000b4 	movhi	r2,2
    ed74:	10b66904 	addi	r2,r2,-9820
    ed78:	10800017 	ldw	r2,0(r2)
    ed7c:	10800d83 	ldbu	r2,54(r2)
    ed80:	1884b03a 	or	r2,r3,r2
    ed84:	1007883a 	mov	r3,r2
    ed88:	e0bfff17 	ldw	r2,-4(fp)
    ed8c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    ed90:	008000b4 	movhi	r2,2
    ed94:	10b66904 	addi	r2,r2,-9820
    ed98:	10800017 	ldw	r2,0(r2)
    ed9c:	10800d03 	ldbu	r2,52(r2)
    eda0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    eda4:	e0fffe03 	ldbu	r3,-8(fp)
    eda8:	e13ffe03 	ldbu	r4,-8(fp)
    edac:	008000b4 	movhi	r2,2
    edb0:	10b66644 	addi	r2,r2,-9831
    edb4:	1105883a 	add	r2,r2,r4
    edb8:	10800003 	ldbu	r2,0(r2)
    edbc:	1009883a 	mov	r4,r2
    edc0:	008000b4 	movhi	r2,2
    edc4:	10b66904 	addi	r2,r2,-9820
    edc8:	10800017 	ldw	r2,0(r2)
    edcc:	10800d43 	ldbu	r2,53(r2)
    edd0:	0084303a 	nor	r2,zero,r2
    edd4:	2084703a 	and	r2,r4,r2
    edd8:	1009883a 	mov	r4,r2
    eddc:	008000b4 	movhi	r2,2
    ede0:	10b66644 	addi	r2,r2,-9831
    ede4:	10c5883a 	add	r2,r2,r3
    ede8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    edec:	e0fffe03 	ldbu	r3,-8(fp)
    edf0:	008000b4 	movhi	r2,2
    edf4:	10b66644 	addi	r2,r2,-9831
    edf8:	10c5883a 	add	r2,r2,r3
    edfc:	10800003 	ldbu	r2,0(r2)
    ee00:	10803fcc 	andi	r2,r2,255
    ee04:	10000e1e 	bne	r2,zero,ee40 <OS_EventTaskWait+0x15c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    ee08:	008000b4 	movhi	r2,2
    ee0c:	10b66904 	addi	r2,r2,-9820
    ee10:	10800017 	ldw	r2,0(r2)
    ee14:	10800d83 	ldbu	r2,54(r2)
    ee18:	0084303a 	nor	r2,zero,r2
    ee1c:	1007883a 	mov	r3,r2
    ee20:	008000b4 	movhi	r2,2
    ee24:	10b66604 	addi	r2,r2,-9832
    ee28:	10800003 	ldbu	r2,0(r2)
    ee2c:	1884703a 	and	r2,r3,r2
    ee30:	1007883a 	mov	r3,r2
    ee34:	008000b4 	movhi	r2,2
    ee38:	10b66604 	addi	r2,r2,-9832
    ee3c:	10c00005 	stb	r3,0(r2)
    }
}
    ee40:	0001883a 	nop
    ee44:	e037883a 	mov	sp,fp
    ee48:	df000017 	ldw	fp,0(sp)
    ee4c:	dec00104 	addi	sp,sp,4
    ee50:	f800283a 	ret

0000ee54 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    ee54:	defffb04 	addi	sp,sp,-20
    ee58:	df000415 	stw	fp,16(sp)
    ee5c:	df000404 	addi	fp,sp,16
    ee60:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    ee64:	008000b4 	movhi	r2,2
    ee68:	10b66904 	addi	r2,r2,-9820
    ee6c:	10800017 	ldw	r2,0(r2)
    ee70:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    ee74:	008000b4 	movhi	r2,2
    ee78:	10b66904 	addi	r2,r2,-9820
    ee7c:	10800017 	ldw	r2,0(r2)
    ee80:	e0ffff17 	ldw	r3,-4(fp)
    ee84:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    ee88:	e0bfff17 	ldw	r2,-4(fp)
    ee8c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    ee90:	e0bffc17 	ldw	r2,-16(fp)
    ee94:	10800017 	ldw	r2,0(r2)
    ee98:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    ee9c:	00002806 	br	ef40 <OS_EventTaskWaitMulti+0xec>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    eea0:	008000b4 	movhi	r2,2
    eea4:	10b66904 	addi	r2,r2,-9820
    eea8:	10800017 	ldw	r2,0(r2)
    eeac:	10800d03 	ldbu	r2,52(r2)
    eeb0:	10c03fcc 	andi	r3,r2,255
    eeb4:	008000b4 	movhi	r2,2
    eeb8:	10b66904 	addi	r2,r2,-9820
    eebc:	10800017 	ldw	r2,0(r2)
    eec0:	10800d03 	ldbu	r2,52(r2)
    eec4:	10803fcc 	andi	r2,r2,255
    eec8:	e13ffd17 	ldw	r4,-12(fp)
    eecc:	2085883a 	add	r2,r4,r2
    eed0:	108002c4 	addi	r2,r2,11
    eed4:	11000003 	ldbu	r4,0(r2)
    eed8:	008000b4 	movhi	r2,2
    eedc:	10b66904 	addi	r2,r2,-9820
    eee0:	10800017 	ldw	r2,0(r2)
    eee4:	10800d43 	ldbu	r2,53(r2)
    eee8:	2084b03a 	or	r2,r4,r2
    eeec:	1009883a 	mov	r4,r2
    eef0:	e0bffd17 	ldw	r2,-12(fp)
    eef4:	10c5883a 	add	r2,r2,r3
    eef8:	108002c4 	addi	r2,r2,11
    eefc:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    ef00:	e0bffd17 	ldw	r2,-12(fp)
    ef04:	10c00283 	ldbu	r3,10(r2)
    ef08:	008000b4 	movhi	r2,2
    ef0c:	10b66904 	addi	r2,r2,-9820
    ef10:	10800017 	ldw	r2,0(r2)
    ef14:	10800d83 	ldbu	r2,54(r2)
    ef18:	1884b03a 	or	r2,r3,r2
    ef1c:	1007883a 	mov	r3,r2
    ef20:	e0bffd17 	ldw	r2,-12(fp)
    ef24:	10c00285 	stb	r3,10(r2)
        pevents++;
    ef28:	e0bffc17 	ldw	r2,-16(fp)
    ef2c:	10800104 	addi	r2,r2,4
    ef30:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    ef34:	e0bffc17 	ldw	r2,-16(fp)
    ef38:	10800017 	ldw	r2,0(r2)
    ef3c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    ef40:	e0bffd17 	ldw	r2,-12(fp)
    ef44:	103fd61e 	bne	r2,zero,eea0 <OS_EventTaskWaitMulti+0x4c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    ef48:	008000b4 	movhi	r2,2
    ef4c:	10b66904 	addi	r2,r2,-9820
    ef50:	10800017 	ldw	r2,0(r2)
    ef54:	10800d03 	ldbu	r2,52(r2)
    ef58:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    ef5c:	e0fffe03 	ldbu	r3,-8(fp)
    ef60:	e13ffe03 	ldbu	r4,-8(fp)
    ef64:	008000b4 	movhi	r2,2
    ef68:	10b66644 	addi	r2,r2,-9831
    ef6c:	1105883a 	add	r2,r2,r4
    ef70:	10800003 	ldbu	r2,0(r2)
    ef74:	1009883a 	mov	r4,r2
    ef78:	008000b4 	movhi	r2,2
    ef7c:	10b66904 	addi	r2,r2,-9820
    ef80:	10800017 	ldw	r2,0(r2)
    ef84:	10800d43 	ldbu	r2,53(r2)
    ef88:	0084303a 	nor	r2,zero,r2
    ef8c:	2084703a 	and	r2,r4,r2
    ef90:	1009883a 	mov	r4,r2
    ef94:	008000b4 	movhi	r2,2
    ef98:	10b66644 	addi	r2,r2,-9831
    ef9c:	10c5883a 	add	r2,r2,r3
    efa0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    efa4:	e0fffe03 	ldbu	r3,-8(fp)
    efa8:	008000b4 	movhi	r2,2
    efac:	10b66644 	addi	r2,r2,-9831
    efb0:	10c5883a 	add	r2,r2,r3
    efb4:	10800003 	ldbu	r2,0(r2)
    efb8:	10803fcc 	andi	r2,r2,255
    efbc:	10000e1e 	bne	r2,zero,eff8 <OS_EventTaskWaitMulti+0x1a4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    efc0:	008000b4 	movhi	r2,2
    efc4:	10b66904 	addi	r2,r2,-9820
    efc8:	10800017 	ldw	r2,0(r2)
    efcc:	10800d83 	ldbu	r2,54(r2)
    efd0:	0084303a 	nor	r2,zero,r2
    efd4:	1007883a 	mov	r3,r2
    efd8:	008000b4 	movhi	r2,2
    efdc:	10b66604 	addi	r2,r2,-9832
    efe0:	10800003 	ldbu	r2,0(r2)
    efe4:	1884703a 	and	r2,r3,r2
    efe8:	1007883a 	mov	r3,r2
    efec:	008000b4 	movhi	r2,2
    eff0:	10b66604 	addi	r2,r2,-9832
    eff4:	10c00005 	stb	r3,0(r2)
    }
}
    eff8:	0001883a 	nop
    effc:	e037883a 	mov	sp,fp
    f000:	df000017 	ldw	fp,0(sp)
    f004:	dec00104 	addi	sp,sp,4
    f008:	f800283a 	ret

0000f00c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    f00c:	defffc04 	addi	sp,sp,-16
    f010:	df000315 	stw	fp,12(sp)
    f014:	df000304 	addi	fp,sp,12
    f018:	e13ffe15 	stw	r4,-8(fp)
    f01c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    f020:	e0bffe17 	ldw	r2,-8(fp)
    f024:	10800d03 	ldbu	r2,52(r2)
    f028:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    f02c:	e0bffd03 	ldbu	r2,-12(fp)
    f030:	e0fffd03 	ldbu	r3,-12(fp)
    f034:	e13fff17 	ldw	r4,-4(fp)
    f038:	20c7883a 	add	r3,r4,r3
    f03c:	18c002c4 	addi	r3,r3,11
    f040:	18c00003 	ldbu	r3,0(r3)
    f044:	1809883a 	mov	r4,r3
    f048:	e0fffe17 	ldw	r3,-8(fp)
    f04c:	18c00d43 	ldbu	r3,53(r3)
    f050:	00c6303a 	nor	r3,zero,r3
    f054:	20c6703a 	and	r3,r4,r3
    f058:	1809883a 	mov	r4,r3
    f05c:	e0ffff17 	ldw	r3,-4(fp)
    f060:	1885883a 	add	r2,r3,r2
    f064:	108002c4 	addi	r2,r2,11
    f068:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    f06c:	e0bffd03 	ldbu	r2,-12(fp)
    f070:	e0ffff17 	ldw	r3,-4(fp)
    f074:	1885883a 	add	r2,r3,r2
    f078:	108002c4 	addi	r2,r2,11
    f07c:	10800003 	ldbu	r2,0(r2)
    f080:	10803fcc 	andi	r2,r2,255
    f084:	10000a1e 	bne	r2,zero,f0b0 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    f088:	e0bfff17 	ldw	r2,-4(fp)
    f08c:	10800283 	ldbu	r2,10(r2)
    f090:	1007883a 	mov	r3,r2
    f094:	e0bffe17 	ldw	r2,-8(fp)
    f098:	10800d83 	ldbu	r2,54(r2)
    f09c:	0084303a 	nor	r2,zero,r2
    f0a0:	1884703a 	and	r2,r3,r2
    f0a4:	1007883a 	mov	r3,r2
    f0a8:	e0bfff17 	ldw	r2,-4(fp)
    f0ac:	10c00285 	stb	r3,10(r2)
    }
}
    f0b0:	0001883a 	nop
    f0b4:	e037883a 	mov	sp,fp
    f0b8:	df000017 	ldw	fp,0(sp)
    f0bc:	dec00104 	addi	sp,sp,4
    f0c0:	f800283a 	ret

0000f0c4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    f0c4:	defffa04 	addi	sp,sp,-24
    f0c8:	df000515 	stw	fp,20(sp)
    f0cc:	df000504 	addi	fp,sp,20
    f0d0:	e13ffe15 	stw	r4,-8(fp)
    f0d4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    f0d8:	e0bffe17 	ldw	r2,-8(fp)
    f0dc:	10800d03 	ldbu	r2,52(r2)
    f0e0:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    f0e4:	e0bffe17 	ldw	r2,-8(fp)
    f0e8:	10800d83 	ldbu	r2,54(r2)
    f0ec:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    f0f0:	e0bffe17 	ldw	r2,-8(fp)
    f0f4:	10800d43 	ldbu	r2,53(r2)
    f0f8:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    f0fc:	e0bfff17 	ldw	r2,-4(fp)
    f100:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    f104:	e0bffb17 	ldw	r2,-20(fp)
    f108:	10800017 	ldw	r2,0(r2)
    f10c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f110:	00002506 	br	f1a8 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    f114:	e0bffd03 	ldbu	r2,-12(fp)
    f118:	e0fffd03 	ldbu	r3,-12(fp)
    f11c:	e13ffc17 	ldw	r4,-16(fp)
    f120:	20c7883a 	add	r3,r4,r3
    f124:	18c002c4 	addi	r3,r3,11
    f128:	18c00003 	ldbu	r3,0(r3)
    f12c:	1809883a 	mov	r4,r3
    f130:	e0fffd83 	ldbu	r3,-10(fp)
    f134:	00c6303a 	nor	r3,zero,r3
    f138:	20c6703a 	and	r3,r4,r3
    f13c:	1809883a 	mov	r4,r3
    f140:	e0fffc17 	ldw	r3,-16(fp)
    f144:	1885883a 	add	r2,r3,r2
    f148:	108002c4 	addi	r2,r2,11
    f14c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    f150:	e0bffd03 	ldbu	r2,-12(fp)
    f154:	e0fffc17 	ldw	r3,-16(fp)
    f158:	1885883a 	add	r2,r3,r2
    f15c:	108002c4 	addi	r2,r2,11
    f160:	10800003 	ldbu	r2,0(r2)
    f164:	10803fcc 	andi	r2,r2,255
    f168:	1000091e 	bne	r2,zero,f190 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    f16c:	e0bffc17 	ldw	r2,-16(fp)
    f170:	10800283 	ldbu	r2,10(r2)
    f174:	1007883a 	mov	r3,r2
    f178:	e0bffd43 	ldbu	r2,-11(fp)
    f17c:	0084303a 	nor	r2,zero,r2
    f180:	1884703a 	and	r2,r3,r2
    f184:	1007883a 	mov	r3,r2
    f188:	e0bffc17 	ldw	r2,-16(fp)
    f18c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    f190:	e0bffb17 	ldw	r2,-20(fp)
    f194:	10800104 	addi	r2,r2,4
    f198:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    f19c:	e0bffb17 	ldw	r2,-20(fp)
    f1a0:	10800017 	ldw	r2,0(r2)
    f1a4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f1a8:	e0bffc17 	ldw	r2,-16(fp)
    f1ac:	103fd91e 	bne	r2,zero,f114 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    f1b0:	0001883a 	nop
    f1b4:	e037883a 	mov	sp,fp
    f1b8:	df000017 	ldw	fp,0(sp)
    f1bc:	dec00104 	addi	sp,sp,4
    f1c0:	f800283a 	ret

0000f1c4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    f1c4:	defffc04 	addi	sp,sp,-16
    f1c8:	df000315 	stw	fp,12(sp)
    f1cc:	df000304 	addi	fp,sp,12
    f1d0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    f1d4:	e0bfff17 	ldw	r2,-4(fp)
    f1d8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    f1dc:	e0bfff17 	ldw	r2,-4(fp)
    f1e0:	108002c4 	addi	r2,r2,11
    f1e4:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f1e8:	e03ffe05 	stb	zero,-8(fp)
    f1ec:	00000706 	br	f20c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    f1f0:	e0bffd17 	ldw	r2,-12(fp)
    f1f4:	10c00044 	addi	r3,r2,1
    f1f8:	e0fffd15 	stw	r3,-12(fp)
    f1fc:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f200:	e0bffe03 	ldbu	r2,-8(fp)
    f204:	10800044 	addi	r2,r2,1
    f208:	e0bffe05 	stb	r2,-8(fp)
    f20c:	e0bffe03 	ldbu	r2,-8(fp)
    f210:	108000f0 	cmpltui	r2,r2,3
    f214:	103ff61e 	bne	r2,zero,f1f0 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
    f218:	0001883a 	nop
    f21c:	e037883a 	mov	sp,fp
    f220:	df000017 	ldw	fp,0(sp)
    f224:	dec00104 	addi	sp,sp,4
    f228:	f800283a 	ret

0000f22c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    f22c:	defffb04 	addi	sp,sp,-20
    f230:	dfc00415 	stw	ra,16(sp)
    f234:	df000315 	stw	fp,12(sp)
    f238:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    f23c:	0142d004 	movi	r5,2880
    f240:	010000b4 	movhi	r4,2
    f244:	213edf04 	addi	r4,r4,-1156
    f248:	000f6380 	call	f638 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    f24c:	008000b4 	movhi	r2,2
    f250:	10bedf04 	addi	r2,r2,-1156
    f254:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    f258:	008000b4 	movhi	r2,2
    f25c:	10beeb04 	addi	r2,r2,-1108
    f260:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f264:	e03ffd0d 	sth	zero,-12(fp)
    f268:	00001306 	br	f2b8 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    f26c:	e0bffe17 	ldw	r2,-8(fp)
    f270:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    f274:	e0bffe17 	ldw	r2,-8(fp)
    f278:	e0ffff17 	ldw	r3,-4(fp)
    f27c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    f280:	e0bffe17 	ldw	r2,-8(fp)
    f284:	00c00fc4 	movi	r3,63
    f288:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    f28c:	e0bffe17 	ldw	r2,-8(fp)
    f290:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    f294:	e0bffe17 	ldw	r2,-8(fp)
    f298:	10800c04 	addi	r2,r2,48
    f29c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    f2a0:	e0bfff17 	ldw	r2,-4(fp)
    f2a4:	10800c04 	addi	r2,r2,48
    f2a8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f2ac:	e0bffd0b 	ldhu	r2,-12(fp)
    f2b0:	10800044 	addi	r2,r2,1
    f2b4:	e0bffd0d 	sth	r2,-12(fp)
    f2b8:	e0bffd0b 	ldhu	r2,-12(fp)
    f2bc:	10800ef0 	cmpltui	r2,r2,59
    f2c0:	103fea1e 	bne	r2,zero,f26c <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    f2c4:	e0bffe17 	ldw	r2,-8(fp)
    f2c8:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    f2cc:	e0bffe17 	ldw	r2,-8(fp)
    f2d0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    f2d4:	e0bffe17 	ldw	r2,-8(fp)
    f2d8:	00c00fc4 	movi	r3,63
    f2dc:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    f2e0:	e0bffe17 	ldw	r2,-8(fp)
    f2e4:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    f2e8:	008000b4 	movhi	r2,2
    f2ec:	10b66704 	addi	r2,r2,-9828
    f2f0:	00c000b4 	movhi	r3,2
    f2f4:	18fedf04 	addi	r3,r3,-1156
    f2f8:	10c00015 	stw	r3,0(r2)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    f2fc:	0001883a 	nop
    f300:	e037883a 	mov	sp,fp
    f304:	dfc00117 	ldw	ra,4(sp)
    f308:	df000017 	ldw	fp,0(sp)
    f30c:	dec00204 	addi	sp,sp,8
    f310:	f800283a 	ret

0000f314 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    f314:	deffff04 	addi	sp,sp,-4
    f318:	df000015 	stw	fp,0(sp)
    f31c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    f320:	008000b4 	movhi	r2,2
    f324:	10b66a04 	addi	r2,r2,-9816
    f328:	10000015 	stw	zero,0(r2)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    f32c:	008000b4 	movhi	r2,2
    f330:	10b66804 	addi	r2,r2,-9824
    f334:	10000005 	stb	zero,0(r2)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    f338:	008000b4 	movhi	r2,2
    f33c:	10b65a04 	addi	r2,r2,-9880
    f340:	10000005 	stb	zero,0(r2)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    f344:	008000b4 	movhi	r2,2
    f348:	10b66244 	addi	r2,r2,-9847
    f34c:	10000005 	stb	zero,0(r2)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    f350:	008000b4 	movhi	r2,2
    f354:	10b65a44 	addi	r2,r2,-9879
    f358:	10000005 	stb	zero,0(r2)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    f35c:	008000b4 	movhi	r2,2
    f360:	10b65f04 	addi	r2,r2,-9860
    f364:	10000015 	stw	zero,0(r2)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    f368:	008000b4 	movhi	r2,2
    f36c:	10b65b04 	addi	r2,r2,-9876
    f370:	10000015 	stw	zero,0(r2)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    f374:	008000b4 	movhi	r2,2
    f378:	10b66d04 	addi	r2,r2,-9804
    f37c:	10000015 	stw	zero,0(r2)
    OSIdleCtrMax  = 0L;
    f380:	008000b4 	movhi	r2,2
    f384:	10b66004 	addi	r2,r2,-9856
    f388:	10000015 	stw	zero,0(r2)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    f38c:	008000b4 	movhi	r2,2
    f390:	10b66c04 	addi	r2,r2,-9808
    f394:	10000005 	stb	zero,0(r2)
#endif
}
    f398:	0001883a 	nop
    f39c:	e037883a 	mov	sp,fp
    f3a0:	df000017 	ldw	fp,0(sp)
    f3a4:	dec00104 	addi	sp,sp,4
    f3a8:	f800283a 	ret

0000f3ac <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    f3ac:	defffd04 	addi	sp,sp,-12
    f3b0:	df000215 	stw	fp,8(sp)
    f3b4:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    f3b8:	008000b4 	movhi	r2,2
    f3bc:	10b66604 	addi	r2,r2,-9832
    f3c0:	10000005 	stb	zero,0(r2)
    prdytbl       = &OSRdyTbl[0];
    f3c4:	008000b4 	movhi	r2,2
    f3c8:	10b66644 	addi	r2,r2,-9831
    f3cc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f3d0:	e03ffe05 	stb	zero,-8(fp)
    f3d4:	00000706 	br	f3f4 <OS_InitRdyList+0x48>
        *prdytbl++ = 0;
    f3d8:	e0bfff17 	ldw	r2,-4(fp)
    f3dc:	10c00044 	addi	r3,r2,1
    f3e0:	e0ffff15 	stw	r3,-4(fp)
    f3e4:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f3e8:	e0bffe03 	ldbu	r2,-8(fp)
    f3ec:	10800044 	addi	r2,r2,1
    f3f0:	e0bffe05 	stb	r2,-8(fp)
    f3f4:	e0bffe03 	ldbu	r2,-8(fp)
    f3f8:	108000f0 	cmpltui	r2,r2,3
    f3fc:	103ff61e 	bne	r2,zero,f3d8 <OS_InitRdyList+0x2c>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    f400:	008000b4 	movhi	r2,2
    f404:	10b65c44 	addi	r2,r2,-9871
    f408:	10000005 	stb	zero,0(r2)
    OSPrioHighRdy = 0;
    f40c:	008000b4 	movhi	r2,2
    f410:	10b65c04 	addi	r2,r2,-9872
    f414:	10000005 	stb	zero,0(r2)

    OSTCBHighRdy  = (OS_TCB *)0;
    f418:	008000b4 	movhi	r2,2
    f41c:	10b66404 	addi	r2,r2,-9840
    f420:	10000015 	stw	zero,0(r2)
    OSTCBCur      = (OS_TCB *)0;
    f424:	008000b4 	movhi	r2,2
    f428:	10b66904 	addi	r2,r2,-9820
    f42c:	10000015 	stw	zero,0(r2)
}
    f430:	0001883a 	nop
    f434:	e037883a 	mov	sp,fp
    f438:	df000017 	ldw	fp,0(sp)
    f43c:	dec00104 	addi	sp,sp,4
    f440:	f800283a 	ret

0000f444 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    f444:	defff804 	addi	sp,sp,-32
    f448:	dfc00715 	stw	ra,28(sp)
    f44c:	df000615 	stw	fp,24(sp)
    f450:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    f454:	008000c4 	movi	r2,3
    f458:	d8800415 	stw	r2,16(sp)
    f45c:	d8000315 	stw	zero,12(sp)
    f460:	00808004 	movi	r2,512
    f464:	d8800215 	stw	r2,8(sp)
    f468:	008000b4 	movhi	r2,2
    f46c:	10bcdf04 	addi	r2,r2,-3204
    f470:	d8800115 	stw	r2,4(sp)
    f474:	00bfffd4 	movui	r2,65535
    f478:	d8800015 	stw	r2,0(sp)
    f47c:	01c00504 	movi	r7,20
    f480:	018000b4 	movhi	r6,2
    f484:	31bede04 	addi	r6,r6,-1160
    f488:	000b883a 	mov	r5,zero
    f48c:	01000074 	movhi	r4,1
    f490:	213e5804 	addi	r4,r4,-1696
    f494:	00144980 	call	14498 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    f498:	e1bfff04 	addi	r6,fp,-4
    f49c:	014000b4 	movhi	r5,2
    f4a0:	29668604 	addi	r5,r5,-26088
    f4a4:	01000504 	movi	r4,20
    f4a8:	0014d6c0 	call	14d6c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    f4ac:	0001883a 	nop
    f4b0:	e037883a 	mov	sp,fp
    f4b4:	dfc00117 	ldw	ra,4(sp)
    f4b8:	df000017 	ldw	fp,0(sp)
    f4bc:	dec00204 	addi	sp,sp,8
    f4c0:	f800283a 	ret

0000f4c4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    f4c4:	defff804 	addi	sp,sp,-32
    f4c8:	dfc00715 	stw	ra,28(sp)
    f4cc:	df000615 	stw	fp,24(sp)
    f4d0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    f4d4:	008000c4 	movi	r2,3
    f4d8:	d8800415 	stw	r2,16(sp)
    f4dc:	d8000315 	stw	zero,12(sp)
    f4e0:	00808004 	movi	r2,512
    f4e4:	d8800215 	stw	r2,8(sp)
    f4e8:	008000b4 	movhi	r2,2
    f4ec:	10ba6704 	addi	r2,r2,-5732
    f4f0:	d8800115 	stw	r2,4(sp)
    f4f4:	00bfff94 	movui	r2,65534
    f4f8:	d8800015 	stw	r2,0(sp)
    f4fc:	01c004c4 	movi	r7,19
    f500:	018000b4 	movhi	r6,2
    f504:	31bc6604 	addi	r6,r6,-3688
    f508:	000b883a 	mov	r5,zero
    f50c:	01000074 	movhi	r4,1
    f510:	213e7304 	addi	r4,r4,-1588
    f514:	00144980 	call	14498 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    f518:	e1bfff04 	addi	r6,fp,-4
    f51c:	014000b4 	movhi	r5,2
    f520:	29668a04 	addi	r5,r5,-26072
    f524:	010004c4 	movi	r4,19
    f528:	0014d6c0 	call	14d6c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    f52c:	0001883a 	nop
    f530:	e037883a 	mov	sp,fp
    f534:	dfc00117 	ldw	ra,4(sp)
    f538:	df000017 	ldw	fp,0(sp)
    f53c:	dec00204 	addi	sp,sp,8
    f540:	f800283a 	ret

0000f544 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    f544:	defffb04 	addi	sp,sp,-20
    f548:	dfc00415 	stw	ra,16(sp)
    f54c:	df000315 	stw	fp,12(sp)
    f550:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    f554:	01414404 	movi	r5,1296
    f558:	010000b4 	movhi	r4,2
    f55c:	2101af04 	addi	r4,r4,1724
    f560:	000f6380 	call	f638 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    f564:	01401504 	movi	r5,84
    f568:	010000b4 	movhi	r4,2
    f56c:	2102f304 	addi	r4,r4,3020
    f570:	000f6380 	call	f638 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    f574:	008000b4 	movhi	r2,2
    f578:	1081af04 	addi	r2,r2,1724
    f57c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    f580:	008000b4 	movhi	r2,2
    f584:	1081ca04 	addi	r2,r2,1832
    f588:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f58c:	e03ffd05 	stb	zero,-12(fp)
    f590:	00001106 	br	f5d8 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    f594:	e0bffe17 	ldw	r2,-8(fp)
    f598:	e0ffff17 	ldw	r3,-4(fp)
    f59c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    f5a0:	e0bffe17 	ldw	r2,-8(fp)
    f5a4:	00c00fc4 	movi	r3,63
    f5a8:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f5ac:	e0bffe17 	ldw	r2,-8(fp)
    f5b0:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    f5b4:	e0bffe17 	ldw	r2,-8(fp)
    f5b8:	10801b04 	addi	r2,r2,108
    f5bc:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    f5c0:	e0bfff17 	ldw	r2,-4(fp)
    f5c4:	10801b04 	addi	r2,r2,108
    f5c8:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f5cc:	e0bffd03 	ldbu	r2,-12(fp)
    f5d0:	10800044 	addi	r2,r2,1
    f5d4:	e0bffd05 	stb	r2,-12(fp)
    f5d8:	e0bffd03 	ldbu	r2,-12(fp)
    f5dc:	108002f0 	cmpltui	r2,r2,11
    f5e0:	103fec1e 	bne	r2,zero,f594 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    f5e4:	e0bffe17 	ldw	r2,-8(fp)
    f5e8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    f5ec:	e0bffe17 	ldw	r2,-8(fp)
    f5f0:	00c00fc4 	movi	r3,63
    f5f4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f5f8:	e0bffe17 	ldw	r2,-8(fp)
    f5fc:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    f600:	008000b4 	movhi	r2,2
    f604:	10b65d04 	addi	r2,r2,-9868
    f608:	10000015 	stw	zero,0(r2)
    OSTCBFreeList           = &OSTCBTbl[0];
    f60c:	008000b4 	movhi	r2,2
    f610:	10b66104 	addi	r2,r2,-9852
    f614:	00c000b4 	movhi	r3,2
    f618:	18c1af04 	addi	r3,r3,1724
    f61c:	10c00015 	stw	r3,0(r2)
}
    f620:	0001883a 	nop
    f624:	e037883a 	mov	sp,fp
    f628:	dfc00117 	ldw	ra,4(sp)
    f62c:	df000017 	ldw	fp,0(sp)
    f630:	dec00204 	addi	sp,sp,8
    f634:	f800283a 	ret

0000f638 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    f638:	defffd04 	addi	sp,sp,-12
    f63c:	df000215 	stw	fp,8(sp)
    f640:	df000204 	addi	fp,sp,8
    f644:	e13ffe15 	stw	r4,-8(fp)
    f648:	2805883a 	mov	r2,r5
    f64c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    f650:	00000706 	br	f670 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    f654:	e0bffe17 	ldw	r2,-8(fp)
    f658:	10c00044 	addi	r3,r2,1
    f65c:	e0fffe15 	stw	r3,-8(fp)
    f660:	10000005 	stb	zero,0(r2)
        size--;
    f664:	e0bfff0b 	ldhu	r2,-4(fp)
    f668:	10bfffc4 	addi	r2,r2,-1
    f66c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    f670:	e0bfff0b 	ldhu	r2,-4(fp)
    f674:	103ff71e 	bne	r2,zero,f654 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    f678:	0001883a 	nop
    f67c:	e037883a 	mov	sp,fp
    f680:	df000017 	ldw	fp,0(sp)
    f684:	dec00104 	addi	sp,sp,4
    f688:	f800283a 	ret

0000f68c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    f68c:	defffc04 	addi	sp,sp,-16
    f690:	df000315 	stw	fp,12(sp)
    f694:	df000304 	addi	fp,sp,12
    f698:	e13ffd15 	stw	r4,-12(fp)
    f69c:	e17ffe15 	stw	r5,-8(fp)
    f6a0:	3005883a 	mov	r2,r6
    f6a4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    f6a8:	00000b06 	br	f6d8 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    f6ac:	e0bffd17 	ldw	r2,-12(fp)
    f6b0:	10c00044 	addi	r3,r2,1
    f6b4:	e0fffd15 	stw	r3,-12(fp)
    f6b8:	e0fffe17 	ldw	r3,-8(fp)
    f6bc:	19000044 	addi	r4,r3,1
    f6c0:	e13ffe15 	stw	r4,-8(fp)
    f6c4:	18c00003 	ldbu	r3,0(r3)
    f6c8:	10c00005 	stb	r3,0(r2)
        size--;
    f6cc:	e0bfff0b 	ldhu	r2,-4(fp)
    f6d0:	10bfffc4 	addi	r2,r2,-1
    f6d4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    f6d8:	e0bfff0b 	ldhu	r2,-4(fp)
    f6dc:	103ff31e 	bne	r2,zero,f6ac <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
    f6e0:	0001883a 	nop
    f6e4:	e037883a 	mov	sp,fp
    f6e8:	df000017 	ldw	fp,0(sp)
    f6ec:	dec00104 	addi	sp,sp,4
    f6f0:	f800283a 	ret

0000f6f4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    f6f4:	defffb04 	addi	sp,sp,-20
    f6f8:	dfc00415 	stw	ra,16(sp)
    f6fc:	df000315 	stw	fp,12(sp)
    f700:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    f704:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f708:	0005303a 	rdctl	r2,status
    f70c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f710:	e0ffff17 	ldw	r3,-4(fp)
    f714:	00bfff84 	movi	r2,-2
    f718:	1884703a 	and	r2,r3,r2
    f71c:	1001703a 	wrctl	status,r2
  
  return context;
    f720:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    f724:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    f728:	008000b4 	movhi	r2,2
    f72c:	10b66804 	addi	r2,r2,-9824
    f730:	10800003 	ldbu	r2,0(r2)
    f734:	10803fcc 	andi	r2,r2,255
    f738:	10002a1e 	bne	r2,zero,f7e4 <OS_Sched+0xf0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    f73c:	008000b4 	movhi	r2,2
    f740:	10b65a04 	addi	r2,r2,-9880
    f744:	10800003 	ldbu	r2,0(r2)
    f748:	10803fcc 	andi	r2,r2,255
    f74c:	1000251e 	bne	r2,zero,f7e4 <OS_Sched+0xf0>
            OS_SchedNew();
    f750:	000f80c0 	call	f80c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    f754:	008000b4 	movhi	r2,2
    f758:	10b65c04 	addi	r2,r2,-9872
    f75c:	10c00003 	ldbu	r3,0(r2)
    f760:	008000b4 	movhi	r2,2
    f764:	10b65c44 	addi	r2,r2,-9871
    f768:	10800003 	ldbu	r2,0(r2)
    f76c:	18c03fcc 	andi	r3,r3,255
    f770:	10803fcc 	andi	r2,r2,255
    f774:	18801b26 	beq	r3,r2,f7e4 <OS_Sched+0xf0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    f778:	008000b4 	movhi	r2,2
    f77c:	10b65c04 	addi	r2,r2,-9872
    f780:	10800003 	ldbu	r2,0(r2)
    f784:	10c03fcc 	andi	r3,r2,255
    f788:	008000b4 	movhi	r2,2
    f78c:	1082f304 	addi	r2,r2,3020
    f790:	18c7883a 	add	r3,r3,r3
    f794:	18c7883a 	add	r3,r3,r3
    f798:	10c5883a 	add	r2,r2,r3
    f79c:	10c00017 	ldw	r3,0(r2)
    f7a0:	008000b4 	movhi	r2,2
    f7a4:	10b66404 	addi	r2,r2,-9840
    f7a8:	10c00015 	stw	r3,0(r2)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    f7ac:	008000b4 	movhi	r2,2
    f7b0:	10b66404 	addi	r2,r2,-9840
    f7b4:	10800017 	ldw	r2,0(r2)
    f7b8:	10c00e17 	ldw	r3,56(r2)
    f7bc:	18c00044 	addi	r3,r3,1
    f7c0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    f7c4:	008000b4 	movhi	r2,2
    f7c8:	10b65f04 	addi	r2,r2,-9860
    f7cc:	10800017 	ldw	r2,0(r2)
    f7d0:	10c00044 	addi	r3,r2,1
    f7d4:	008000b4 	movhi	r2,2
    f7d8:	10b65f04 	addi	r2,r2,-9860
    f7dc:	10c00015 	stw	r3,0(r2)
                OS_TASK_SW();                          /* Perform a context switch                     */
    f7e0:	0018be40 	call	18be4 <OSCtxSw>
    f7e4:	e0bffd17 	ldw	r2,-12(fp)
    f7e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f7ec:	e0bffe17 	ldw	r2,-8(fp)
    f7f0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    f7f4:	0001883a 	nop
    f7f8:	e037883a 	mov	sp,fp
    f7fc:	dfc00117 	ldw	ra,4(sp)
    f800:	df000017 	ldw	fp,0(sp)
    f804:	dec00204 	addi	sp,sp,8
    f808:	f800283a 	ret

0000f80c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    f80c:	defffe04 	addi	sp,sp,-8
    f810:	df000115 	stw	fp,4(sp)
    f814:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    f818:	008000b4 	movhi	r2,2
    f81c:	10b66604 	addi	r2,r2,-9832
    f820:	10800003 	ldbu	r2,0(r2)
    f824:	10c03fcc 	andi	r3,r2,255
    f828:	008000b4 	movhi	r2,2
    f82c:	10a64604 	addi	r2,r2,-26344
    f830:	10c5883a 	add	r2,r2,r3
    f834:	10800003 	ldbu	r2,0(r2)
    f838:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    f83c:	e0bfff03 	ldbu	r2,-4(fp)
    f840:	100490fa 	slli	r2,r2,3
    f844:	1009883a 	mov	r4,r2
    f848:	e0ffff03 	ldbu	r3,-4(fp)
    f84c:	008000b4 	movhi	r2,2
    f850:	10b66644 	addi	r2,r2,-9831
    f854:	10c5883a 	add	r2,r2,r3
    f858:	10800003 	ldbu	r2,0(r2)
    f85c:	10c03fcc 	andi	r3,r2,255
    f860:	008000b4 	movhi	r2,2
    f864:	10a64604 	addi	r2,r2,-26344
    f868:	10c5883a 	add	r2,r2,r3
    f86c:	10800003 	ldbu	r2,0(r2)
    f870:	2085883a 	add	r2,r4,r2
    f874:	1007883a 	mov	r3,r2
    f878:	008000b4 	movhi	r2,2
    f87c:	10b65c04 	addi	r2,r2,-9872
    f880:	10c00005 	stb	r3,0(r2)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    f884:	0001883a 	nop
    f888:	e037883a 	mov	sp,fp
    f88c:	df000017 	ldw	fp,0(sp)
    f890:	dec00104 	addi	sp,sp,4
    f894:	f800283a 	ret

0000f898 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    f898:	defffc04 	addi	sp,sp,-16
    f89c:	df000315 	stw	fp,12(sp)
    f8a0:	df000304 	addi	fp,sp,12
    f8a4:	e13ffe15 	stw	r4,-8(fp)
    f8a8:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    f8ac:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    f8b0:	00000b06 	br	f8e0 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    f8b4:	e0bffe17 	ldw	r2,-8(fp)
    f8b8:	10c00044 	addi	r3,r2,1
    f8bc:	e0fffe15 	stw	r3,-8(fp)
    f8c0:	e0ffff17 	ldw	r3,-4(fp)
    f8c4:	19000044 	addi	r4,r3,1
    f8c8:	e13fff15 	stw	r4,-4(fp)
    f8cc:	18c00003 	ldbu	r3,0(r3)
    f8d0:	10c00005 	stb	r3,0(r2)
        len++;
    f8d4:	e0bffd03 	ldbu	r2,-12(fp)
    f8d8:	10800044 	addi	r2,r2,1
    f8dc:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    f8e0:	e0bfff17 	ldw	r2,-4(fp)
    f8e4:	10800003 	ldbu	r2,0(r2)
    f8e8:	10803fcc 	andi	r2,r2,255
    f8ec:	103ff11e 	bne	r2,zero,f8b4 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    f8f0:	e0bffe17 	ldw	r2,-8(fp)
    f8f4:	10000005 	stb	zero,0(r2)
    return (len);
    f8f8:	e0bffd03 	ldbu	r2,-12(fp)
}
    f8fc:	e037883a 	mov	sp,fp
    f900:	df000017 	ldw	fp,0(sp)
    f904:	dec00104 	addi	sp,sp,4
    f908:	f800283a 	ret

0000f90c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    f90c:	defffd04 	addi	sp,sp,-12
    f910:	df000215 	stw	fp,8(sp)
    f914:	df000204 	addi	fp,sp,8
    f918:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    f91c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    f920:	00000606 	br	f93c <OS_StrLen+0x30>
        psrc++;
    f924:	e0bfff17 	ldw	r2,-4(fp)
    f928:	10800044 	addi	r2,r2,1
    f92c:	e0bfff15 	stw	r2,-4(fp)
        len++;
    f930:	e0bffe03 	ldbu	r2,-8(fp)
    f934:	10800044 	addi	r2,r2,1
    f938:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    f93c:	e0bfff17 	ldw	r2,-4(fp)
    f940:	10800003 	ldbu	r2,0(r2)
    f944:	10803fcc 	andi	r2,r2,255
    f948:	103ff61e 	bne	r2,zero,f924 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
    f94c:	e0bffe03 	ldbu	r2,-8(fp)
}
    f950:	e037883a 	mov	sp,fp
    f954:	df000017 	ldw	fp,0(sp)
    f958:	dec00104 	addi	sp,sp,4
    f95c:	f800283a 	ret

0000f960 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    f960:	defffa04 	addi	sp,sp,-24
    f964:	dfc00515 	stw	ra,20(sp)
    f968:	df000415 	stw	fp,16(sp)
    f96c:	df000404 	addi	fp,sp,16
    f970:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f974:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f978:	0005303a 	rdctl	r2,status
    f97c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f980:	e0fffd17 	ldw	r3,-12(fp)
    f984:	00bfff84 	movi	r2,-2
    f988:	1884703a 	and	r2,r3,r2
    f98c:	1001703a 	wrctl	status,r2
  
  return context;
    f990:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    f994:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    f998:	008000b4 	movhi	r2,2
    f99c:	10b65b04 	addi	r2,r2,-9876
    f9a0:	10800017 	ldw	r2,0(r2)
    f9a4:	10c00044 	addi	r3,r2,1
    f9a8:	008000b4 	movhi	r2,2
    f9ac:	10b65b04 	addi	r2,r2,-9876
    f9b0:	10c00015 	stw	r3,0(r2)
    f9b4:	e0bffc17 	ldw	r2,-16(fp)
    f9b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f9bc:	e0bffe17 	ldw	r2,-8(fp)
    f9c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    f9c4:	0018ef80 	call	18ef8 <OSTaskIdleHook>
    }
    f9c8:	003feb06 	br	f978 <OS_TaskIdle+0x18>

0000f9cc <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    f9cc:	defff804 	addi	sp,sp,-32
    f9d0:	dfc00715 	stw	ra,28(sp)
    f9d4:	df000615 	stw	fp,24(sp)
    f9d8:	dc400515 	stw	r17,20(sp)
    f9dc:	dc000415 	stw	r16,16(sp)
    f9e0:	df000604 	addi	fp,sp,24
    f9e4:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f9e8:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    f9ec:	00000206 	br	f9f8 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    f9f0:	01000044 	movi	r4,1
    f9f4:	00156a00 	call	156a0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    f9f8:	008000b4 	movhi	r2,2
    f9fc:	10b66c04 	addi	r2,r2,-9808
    fa00:	10800003 	ldbu	r2,0(r2)
    fa04:	10803fcc 	andi	r2,r2,255
    fa08:	103ff926 	beq	r2,zero,f9f0 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    fa0c:	008000b4 	movhi	r2,2
    fa10:	10b66004 	addi	r2,r2,-9856
    fa14:	10c00017 	ldw	r3,0(r2)
    fa18:	00947b34 	movhi	r2,20972
    fa1c:	10a147c4 	addi	r2,r2,-31457
    fa20:	1888383a 	mulxuu	r4,r3,r2
    fa24:	1885383a 	mul	r2,r3,r2
    fa28:	1021883a 	mov	r16,r2
    fa2c:	2023883a 	mov	r17,r4
    fa30:	8806d17a 	srli	r3,r17,5
    fa34:	008000b4 	movhi	r2,2
    fa38:	10b66004 	addi	r2,r2,-9856
    fa3c:	10c00015 	stw	r3,0(r2)
    if (OSIdleCtrMax == 0L) {
    fa40:	008000b4 	movhi	r2,2
    fa44:	10b66004 	addi	r2,r2,-9856
    fa48:	10800017 	ldw	r2,0(r2)
    fa4c:	1000051e 	bne	r2,zero,fa64 <OS_TaskStat+0x98>
        OSCPUUsage = 0;
    fa50:	008000b4 	movhi	r2,2
    fa54:	10b66204 	addi	r2,r2,-9848
    fa58:	10000005 	stb	zero,0(r2)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    fa5c:	01003fc4 	movi	r4,255
    fa60:	00152f00 	call	152f0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa64:	0005303a 	rdctl	r2,status
    fa68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa6c:	e0fffb17 	ldw	r3,-20(fp)
    fa70:	00bfff84 	movi	r2,-2
    fa74:	1884703a 	and	r2,r3,r2
    fa78:	1001703a 	wrctl	status,r2
  
  return context;
    fa7c:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    fa80:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    fa84:	008000b4 	movhi	r2,2
    fa88:	10b65b04 	addi	r2,r2,-9876
    fa8c:	10c00017 	ldw	r3,0(r2)
    fa90:	008000b4 	movhi	r2,2
    fa94:	10b66d04 	addi	r2,r2,-9804
    fa98:	10c00015 	stw	r3,0(r2)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    fa9c:	008000b4 	movhi	r2,2
    faa0:	10b65b04 	addi	r2,r2,-9876
    faa4:	10000015 	stw	zero,0(r2)
    faa8:	e0bffa17 	ldw	r2,-24(fp)
    faac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fab0:	e0bffc17 	ldw	r2,-16(fp)
    fab4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    fab8:	008000b4 	movhi	r2,2
    fabc:	10b66d04 	addi	r2,r2,-9804
    fac0:	10c00017 	ldw	r3,0(r2)
    fac4:	008000b4 	movhi	r2,2
    fac8:	10b66004 	addi	r2,r2,-9856
    facc:	10800017 	ldw	r2,0(r2)
    fad0:	1885203a 	divu	r2,r3,r2
    fad4:	1007883a 	mov	r3,r2
    fad8:	00801904 	movi	r2,100
    fadc:	10c5c83a 	sub	r2,r2,r3
    fae0:	1007883a 	mov	r3,r2
    fae4:	008000b4 	movhi	r2,2
    fae8:	10b66204 	addi	r2,r2,-9848
    faec:	10c00005 	stb	r3,0(r2)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    faf0:	0018e780 	call	18e78 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    faf4:	000fb040 	call	fb04 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    faf8:	0009883a 	mov	r4,zero
    fafc:	00156a00 	call	156a0 <OSTimeDly>
    }
    fb00:	003fd806 	br	fa64 <OS_TaskStat+0x98>

0000fb04 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    fb04:	defffa04 	addi	sp,sp,-24
    fb08:	dfc00515 	stw	ra,20(sp)
    fb0c:	df000415 	stw	fp,16(sp)
    fb10:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    fb14:	e03ffc05 	stb	zero,-16(fp)
    fb18:	00002406 	br	fbac <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    fb1c:	e0bffc03 	ldbu	r2,-16(fp)
    fb20:	e0fffe04 	addi	r3,fp,-8
    fb24:	180b883a 	mov	r5,r3
    fb28:	1009883a 	mov	r4,r2
    fb2c:	00151280 	call	15128 <OSTaskStkChk>
    fb30:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    fb34:	e0bffc43 	ldbu	r2,-15(fp)
    fb38:	1000191e 	bne	r2,zero,fba0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    fb3c:	e0fffc03 	ldbu	r3,-16(fp)
    fb40:	008000b4 	movhi	r2,2
    fb44:	1082f304 	addi	r2,r2,3020
    fb48:	18c7883a 	add	r3,r3,r3
    fb4c:	18c7883a 	add	r3,r3,r3
    fb50:	10c5883a 	add	r2,r2,r3
    fb54:	10800017 	ldw	r2,0(r2)
    fb58:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    fb5c:	e0bffd17 	ldw	r2,-12(fp)
    fb60:	10000f26 	beq	r2,zero,fba0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    fb64:	e0bffd17 	ldw	r2,-12(fp)
    fb68:	10800060 	cmpeqi	r2,r2,1
    fb6c:	10000c1e 	bne	r2,zero,fba0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    fb70:	e0bffd17 	ldw	r2,-12(fp)
    fb74:	10c00217 	ldw	r3,8(r2)
    fb78:	e0bffd17 	ldw	r2,-12(fp)
    fb7c:	10800317 	ldw	r2,12(r2)
    fb80:	1085883a 	add	r2,r2,r2
    fb84:	1085883a 	add	r2,r2,r2
    fb88:	1887883a 	add	r3,r3,r2
    fb8c:	e0bffd17 	ldw	r2,-12(fp)
    fb90:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    fb94:	e0ffff17 	ldw	r3,-4(fp)
    fb98:	e0bffd17 	ldw	r2,-12(fp)
    fb9c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    fba0:	e0bffc03 	ldbu	r2,-16(fp)
    fba4:	10800044 	addi	r2,r2,1
    fba8:	e0bffc05 	stb	r2,-16(fp)
    fbac:	e0bffc03 	ldbu	r2,-16(fp)
    fbb0:	10800570 	cmpltui	r2,r2,21
    fbb4:	103fd91e 	bne	r2,zero,fb1c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
    fbb8:	0001883a 	nop
    fbbc:	e037883a 	mov	sp,fp
    fbc0:	dfc00117 	ldw	ra,4(sp)
    fbc4:	df000017 	ldw	fp,0(sp)
    fbc8:	dec00204 	addi	sp,sp,8
    fbcc:	f800283a 	ret

0000fbd0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    fbd0:	defff204 	addi	sp,sp,-56
    fbd4:	dfc00d15 	stw	ra,52(sp)
    fbd8:	df000c15 	stw	fp,48(sp)
    fbdc:	df000c04 	addi	fp,sp,48
    fbe0:	e17ffc15 	stw	r5,-16(fp)
    fbe4:	e1bffd15 	stw	r6,-12(fp)
    fbe8:	3807883a 	mov	r3,r7
    fbec:	e0800417 	ldw	r2,16(fp)
    fbf0:	e13ffb05 	stb	r4,-20(fp)
    fbf4:	e0fffe0d 	sth	r3,-8(fp)
    fbf8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    fbfc:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc00:	0005303a 	rdctl	r2,status
    fc04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc08:	e0fffa17 	ldw	r3,-24(fp)
    fc0c:	00bfff84 	movi	r2,-2
    fc10:	1884703a 	and	r2,r3,r2
    fc14:	1001703a 	wrctl	status,r2
  
  return context;
    fc18:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
    fc1c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    fc20:	008000b4 	movhi	r2,2
    fc24:	10b66104 	addi	r2,r2,-9852
    fc28:	10800017 	ldw	r2,0(r2)
    fc2c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
    fc30:	e0bff617 	ldw	r2,-40(fp)
    fc34:	1000a926 	beq	r2,zero,fedc <OS_TCBInit+0x30c>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    fc38:	e0bff617 	ldw	r2,-40(fp)
    fc3c:	10c00517 	ldw	r3,20(r2)
    fc40:	008000b4 	movhi	r2,2
    fc44:	10b66104 	addi	r2,r2,-9852
    fc48:	10c00015 	stw	r3,0(r2)
    fc4c:	e0bff417 	ldw	r2,-48(fp)
    fc50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc54:	e0bff817 	ldw	r2,-32(fp)
    fc58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    fc5c:	e0bff617 	ldw	r2,-40(fp)
    fc60:	e0fffc17 	ldw	r3,-16(fp)
    fc64:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    fc68:	e0bff617 	ldw	r2,-40(fp)
    fc6c:	e0fffb03 	ldbu	r3,-20(fp)
    fc70:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    fc74:	e0bff617 	ldw	r2,-40(fp)
    fc78:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    fc7c:	e0bff617 	ldw	r2,-40(fp)
    fc80:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    fc84:	e0bff617 	ldw	r2,-40(fp)
    fc88:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    fc8c:	e0bff617 	ldw	r2,-40(fp)
    fc90:	e0c00317 	ldw	r3,12(fp)
    fc94:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    fc98:	e0bff617 	ldw	r2,-40(fp)
    fc9c:	e0c00217 	ldw	r3,8(fp)
    fca0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    fca4:	e0bff617 	ldw	r2,-40(fp)
    fca8:	e0fffd17 	ldw	r3,-12(fp)
    fcac:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    fcb0:	e0bff617 	ldw	r2,-40(fp)
    fcb4:	e0ffff0b 	ldhu	r3,-4(fp)
    fcb8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    fcbc:	e0bff617 	ldw	r2,-40(fp)
    fcc0:	e0fffe0b 	ldhu	r3,-8(fp)
    fcc4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    fcc8:	e0bff617 	ldw	r2,-40(fp)
    fccc:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    fcd0:	e0bffb03 	ldbu	r2,-20(fp)
    fcd4:	1004d0fa 	srli	r2,r2,3
    fcd8:	1007883a 	mov	r3,r2
    fcdc:	e0bff617 	ldw	r2,-40(fp)
    fce0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    fce4:	e0bffb03 	ldbu	r2,-20(fp)
    fce8:	108001cc 	andi	r2,r2,7
    fcec:	1007883a 	mov	r3,r2
    fcf0:	e0bff617 	ldw	r2,-40(fp)
    fcf4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    fcf8:	e0bff617 	ldw	r2,-40(fp)
    fcfc:	10800d03 	ldbu	r2,52(r2)
    fd00:	10803fcc 	andi	r2,r2,255
    fd04:	00c00044 	movi	r3,1
    fd08:	1884983a 	sll	r2,r3,r2
    fd0c:	1007883a 	mov	r3,r2
    fd10:	e0bff617 	ldw	r2,-40(fp)
    fd14:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    fd18:	e0bff617 	ldw	r2,-40(fp)
    fd1c:	10800cc3 	ldbu	r2,51(r2)
    fd20:	10803fcc 	andi	r2,r2,255
    fd24:	00c00044 	movi	r3,1
    fd28:	1884983a 	sll	r2,r3,r2
    fd2c:	1007883a 	mov	r3,r2
    fd30:	e0bff617 	ldw	r2,-40(fp)
    fd34:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    fd38:	e0bff617 	ldw	r2,-40(fp)
    fd3c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    fd40:	e0bff617 	ldw	r2,-40(fp)
    fd44:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    fd48:	e0bff617 	ldw	r2,-40(fp)
    fd4c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    fd50:	e0bff617 	ldw	r2,-40(fp)
    fd54:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    fd58:	e0bff617 	ldw	r2,-40(fp)
    fd5c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    fd60:	e0bff617 	ldw	r2,-40(fp)
    fd64:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    fd68:	e0bff617 	ldw	r2,-40(fp)
    fd6c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    fd70:	e0bff617 	ldw	r2,-40(fp)
    fd74:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    fd78:	e0bff617 	ldw	r2,-40(fp)
    fd7c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    fd80:	e0bff617 	ldw	r2,-40(fp)
    fd84:	00c00fc4 	movi	r3,63
    fd88:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    fd8c:	e0bff617 	ldw	r2,-40(fp)
    fd90:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    fd94:	e13ff617 	ldw	r4,-40(fp)
    fd98:	0018f180 	call	18f18 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    fd9c:	e13ff617 	ldw	r4,-40(fp)
    fda0:	0018e100 	call	18e10 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fda4:	0005303a 	rdctl	r2,status
    fda8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fdac:	e0fff517 	ldw	r3,-44(fp)
    fdb0:	00bfff84 	movi	r2,-2
    fdb4:	1884703a 	and	r2,r3,r2
    fdb8:	1001703a 	wrctl	status,r2
  
  return context;
    fdbc:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
    fdc0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    fdc4:	e0fffb03 	ldbu	r3,-20(fp)
    fdc8:	008000b4 	movhi	r2,2
    fdcc:	1082f304 	addi	r2,r2,3020
    fdd0:	18c7883a 	add	r3,r3,r3
    fdd4:	18c7883a 	add	r3,r3,r3
    fdd8:	10c5883a 	add	r2,r2,r3
    fddc:	e0fff617 	ldw	r3,-40(fp)
    fde0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    fde4:	008000b4 	movhi	r2,2
    fde8:	10b65d04 	addi	r2,r2,-9868
    fdec:	10c00017 	ldw	r3,0(r2)
    fdf0:	e0bff617 	ldw	r2,-40(fp)
    fdf4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    fdf8:	e0bff617 	ldw	r2,-40(fp)
    fdfc:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    fe00:	008000b4 	movhi	r2,2
    fe04:	10b65d04 	addi	r2,r2,-9868
    fe08:	10800017 	ldw	r2,0(r2)
    fe0c:	10000526 	beq	r2,zero,fe24 <OS_TCBInit+0x254>
            OSTCBList->OSTCBPrev = ptcb;
    fe10:	008000b4 	movhi	r2,2
    fe14:	10b65d04 	addi	r2,r2,-9868
    fe18:	10800017 	ldw	r2,0(r2)
    fe1c:	e0fff617 	ldw	r3,-40(fp)
    fe20:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    fe24:	008000b4 	movhi	r2,2
    fe28:	10b65d04 	addi	r2,r2,-9868
    fe2c:	e0fff617 	ldw	r3,-40(fp)
    fe30:	10c00015 	stw	r3,0(r2)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    fe34:	e0bff617 	ldw	r2,-40(fp)
    fe38:	10c00d83 	ldbu	r3,54(r2)
    fe3c:	008000b4 	movhi	r2,2
    fe40:	10b66604 	addi	r2,r2,-9832
    fe44:	10800003 	ldbu	r2,0(r2)
    fe48:	1884b03a 	or	r2,r3,r2
    fe4c:	1007883a 	mov	r3,r2
    fe50:	008000b4 	movhi	r2,2
    fe54:	10b66604 	addi	r2,r2,-9832
    fe58:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    fe5c:	e0bff617 	ldw	r2,-40(fp)
    fe60:	10800d03 	ldbu	r2,52(r2)
    fe64:	10c03fcc 	andi	r3,r2,255
    fe68:	e0bff617 	ldw	r2,-40(fp)
    fe6c:	10800d03 	ldbu	r2,52(r2)
    fe70:	11003fcc 	andi	r4,r2,255
    fe74:	008000b4 	movhi	r2,2
    fe78:	10b66644 	addi	r2,r2,-9831
    fe7c:	1105883a 	add	r2,r2,r4
    fe80:	11000003 	ldbu	r4,0(r2)
    fe84:	e0bff617 	ldw	r2,-40(fp)
    fe88:	10800d43 	ldbu	r2,53(r2)
    fe8c:	2084b03a 	or	r2,r4,r2
    fe90:	1009883a 	mov	r4,r2
    fe94:	008000b4 	movhi	r2,2
    fe98:	10b66644 	addi	r2,r2,-9831
    fe9c:	10c5883a 	add	r2,r2,r3
    fea0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    fea4:	008000b4 	movhi	r2,2
    fea8:	10b66244 	addi	r2,r2,-9847
    feac:	10800003 	ldbu	r2,0(r2)
    feb0:	10800044 	addi	r2,r2,1
    feb4:	1007883a 	mov	r3,r2
    feb8:	008000b4 	movhi	r2,2
    febc:	10b66244 	addi	r2,r2,-9847
    fec0:	10c00005 	stb	r3,0(r2)
    fec4:	e0bff417 	ldw	r2,-48(fp)
    fec8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fecc:	e0bff717 	ldw	r2,-36(fp)
    fed0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    fed4:	0005883a 	mov	r2,zero
    fed8:	00000506 	br	fef0 <OS_TCBInit+0x320>
    fedc:	e0bff417 	ldw	r2,-48(fp)
    fee0:	e0bff915 	stw	r2,-28(fp)
    fee4:	e0bff917 	ldw	r2,-28(fp)
    fee8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    feec:	00801084 	movi	r2,66
}
    fef0:	e037883a 	mov	sp,fp
    fef4:	dfc00117 	ldw	ra,4(sp)
    fef8:	df000017 	ldw	fp,0(sp)
    fefc:	dec00204 	addi	sp,sp,8
    ff00:	f800283a 	ret

0000ff04 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    ff04:	defffe04 	addi	sp,sp,-8
    ff08:	df000115 	stw	fp,4(sp)
    ff0c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    ff10:	d0a00f04 	addi	r2,gp,-32708
    ff14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    ff18:	d0a01004 	addi	r2,gp,-32704
    ff1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    ff20:	d0a01184 	addi	r2,gp,-32698
    ff24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    ff28:	d0a01204 	addi	r2,gp,-32696
    ff2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    ff30:	d0a01104 	addi	r2,gp,-32700
    ff34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    ff38:	d0a01284 	addi	r2,gp,-32694
    ff3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    ff40:	d0a01304 	addi	r2,gp,-32692
    ff44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    ff48:	d0a01384 	addi	r2,gp,-32690
    ff4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    ff50:	d0a01404 	addi	r2,gp,-32688
    ff54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    ff58:	d0a01484 	addi	r2,gp,-32686
    ff5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    ff60:	d0a01504 	addi	r2,gp,-32684
    ff64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    ff68:	d0a01584 	addi	r2,gp,-32682
    ff6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    ff70:	d0a01604 	addi	r2,gp,-32680
    ff74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    ff78:	d0a01684 	addi	r2,gp,-32678
    ff7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    ff80:	d0a01704 	addi	r2,gp,-32676
    ff84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    ff88:	d0a01784 	addi	r2,gp,-32674
    ff8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    ff90:	d0a01804 	addi	r2,gp,-32672
    ff94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    ff98:	d0a01884 	addi	r2,gp,-32670
    ff9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    ffa0:	d0a01904 	addi	r2,gp,-32668
    ffa4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    ffa8:	d0a01984 	addi	r2,gp,-32666
    ffac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    ffb0:	d0a01a04 	addi	r2,gp,-32664
    ffb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    ffb8:	d0a01a84 	addi	r2,gp,-32662
    ffbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    ffc0:	d0a01b04 	addi	r2,gp,-32660
    ffc4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    ffc8:	d0a01b84 	addi	r2,gp,-32658
    ffcc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    ffd0:	d0a01c04 	addi	r2,gp,-32656
    ffd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    ffd8:	d0a01c84 	addi	r2,gp,-32654
    ffdc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    ffe0:	d0a01d04 	addi	r2,gp,-32652
    ffe4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    ffe8:	d0a01d84 	addi	r2,gp,-32650
    ffec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    fff0:	d0a01e04 	addi	r2,gp,-32648
    fff4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    fff8:	d0a01e84 	addi	r2,gp,-32646
    fffc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   10000:	d0a01f04 	addi	r2,gp,-32644
   10004:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   10008:	d0a01f84 	addi	r2,gp,-32642
   1000c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   10010:	d0a02004 	addi	r2,gp,-32640
   10014:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   10018:	d0a02084 	addi	r2,gp,-32638
   1001c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   10020:	d0a02104 	addi	r2,gp,-32636
   10024:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   10028:	d0a02184 	addi	r2,gp,-32634
   1002c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   10030:	d0a02204 	addi	r2,gp,-32632
   10034:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   10038:	d0a02284 	addi	r2,gp,-32630
   1003c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   10040:	d0a02304 	addi	r2,gp,-32628
   10044:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   10048:	d0a02384 	addi	r2,gp,-32626
   1004c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   10050:	d0a02404 	addi	r2,gp,-32624
   10054:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   10058:	d0a02484 	addi	r2,gp,-32622
   1005c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   10060:	d0a02504 	addi	r2,gp,-32620
   10064:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   10068:	d0a02584 	addi	r2,gp,-32618
   1006c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   10070:	d0a02604 	addi	r2,gp,-32616
   10074:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   10078:	d0a02b04 	addi	r2,gp,-32596
   1007c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   10080:	0001883a 	nop
   10084:	e037883a 	mov	sp,fp
   10088:	df000017 	ldw	fp,0(sp)
   1008c:	dec00104 	addi	sp,sp,4
   10090:	f800283a 	ret

00010094 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   10094:	defff204 	addi	sp,sp,-56
   10098:	df000d15 	stw	fp,52(sp)
   1009c:	df000d04 	addi	fp,sp,52
   100a0:	e13ffc15 	stw	r4,-16(fp)
   100a4:	2807883a 	mov	r3,r5
   100a8:	3005883a 	mov	r2,r6
   100ac:	e1ffff15 	stw	r7,-4(fp)
   100b0:	e0fffd0d 	sth	r3,-12(fp)
   100b4:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   100b8:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   100bc:	e0bfff17 	ldw	r2,-4(fp)
   100c0:	1000021e 	bne	r2,zero,100cc <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   100c4:	0005883a 	mov	r2,zero
   100c8:	0000b006 	br	1038c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   100cc:	e0bffc17 	ldw	r2,-16(fp)
   100d0:	1000051e 	bne	r2,zero,100e8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   100d4:	e0bfff17 	ldw	r2,-4(fp)
   100d8:	00c01b84 	movi	r3,110
   100dc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   100e0:	0005883a 	mov	r2,zero
   100e4:	0000a906 	br	1038c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   100e8:	e0bffc17 	ldw	r2,-16(fp)
   100ec:	10800003 	ldbu	r2,0(r2)
   100f0:	10803fcc 	andi	r2,r2,255
   100f4:	10800160 	cmpeqi	r2,r2,5
   100f8:	1000051e 	bne	r2,zero,10110 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   100fc:	e0bfff17 	ldw	r2,-4(fp)
   10100:	00c00044 	movi	r3,1
   10104:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10108:	0005883a 	mov	r2,zero
   1010c:	00009f06 	br	1038c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   10110:	e0fffe03 	ldbu	r3,-8(fp)
   10114:	00bfe004 	movi	r2,-128
   10118:	1884703a 	and	r2,r3,r2
   1011c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   10120:	e0bff503 	ldbu	r2,-44(fp)
   10124:	10000626 	beq	r2,zero,10140 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   10128:	e0bffe03 	ldbu	r2,-8(fp)
   1012c:	10801fcc 	andi	r2,r2,127
   10130:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   10134:	00800044 	movi	r2,1
   10138:	e0bff385 	stb	r2,-50(fp)
   1013c:	00000106 	br	10144 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   10140:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   10144:	e0bfff17 	ldw	r2,-4(fp)
   10148:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1014c:	0005303a 	rdctl	r2,status
   10150:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10154:	e0fffb17 	ldw	r3,-20(fp)
   10158:	00bfff84 	movi	r2,-2
   1015c:	1884703a 	and	r2,r3,r2
   10160:	1001703a 	wrctl	status,r2
  
  return context;
   10164:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   10168:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   1016c:	e0bffe03 	ldbu	r2,-8(fp)
   10170:	10c00060 	cmpeqi	r3,r2,1
   10174:	18005f1e 	bne	r3,zero,102f4 <OSFlagAccept+0x260>
   10178:	10c00088 	cmpgei	r3,r2,2
   1017c:	1800021e 	bne	r3,zero,10188 <OSFlagAccept+0xf4>
   10180:	10003f26 	beq	r2,zero,10280 <OSFlagAccept+0x1ec>
   10184:	00007706 	br	10364 <OSFlagAccept+0x2d0>
   10188:	10c000a0 	cmpeqi	r3,r2,2
   1018c:	1800031e 	bne	r3,zero,1019c <OSFlagAccept+0x108>
   10190:	108000e0 	cmpeqi	r2,r2,3
   10194:	10001e1e 	bne	r2,zero,10210 <OSFlagAccept+0x17c>
   10198:	00007206 	br	10364 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1019c:	e0bffc17 	ldw	r2,-16(fp)
   101a0:	10c0020b 	ldhu	r3,8(r2)
   101a4:	e0bffd0b 	ldhu	r2,-12(fp)
   101a8:	1884703a 	and	r2,r3,r2
   101ac:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   101b0:	e0fff30b 	ldhu	r3,-52(fp)
   101b4:	e0bffd0b 	ldhu	r2,-12(fp)
   101b8:	18800d1e 	bne	r3,r2,101f0 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   101bc:	e0bff383 	ldbu	r2,-50(fp)
   101c0:	10800058 	cmpnei	r2,r2,1
   101c4:	10000d1e 	bne	r2,zero,101fc <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   101c8:	e0bffc17 	ldw	r2,-16(fp)
   101cc:	1080020b 	ldhu	r2,8(r2)
   101d0:	1007883a 	mov	r3,r2
   101d4:	e0bff30b 	ldhu	r2,-52(fp)
   101d8:	0084303a 	nor	r2,zero,r2
   101dc:	1884703a 	and	r2,r3,r2
   101e0:	1007883a 	mov	r3,r2
   101e4:	e0bffc17 	ldw	r2,-16(fp)
   101e8:	10c0020d 	sth	r3,8(r2)
   101ec:	00000306 	br	101fc <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   101f0:	e0bfff17 	ldw	r2,-4(fp)
   101f4:	00c01c04 	movi	r3,112
   101f8:	10c00005 	stb	r3,0(r2)
   101fc:	e0bff417 	ldw	r2,-48(fp)
   10200:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10204:	e0bff617 	ldw	r2,-40(fp)
   10208:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1020c:	00005e06 	br	10388 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   10210:	e0bffc17 	ldw	r2,-16(fp)
   10214:	10c0020b 	ldhu	r3,8(r2)
   10218:	e0bffd0b 	ldhu	r2,-12(fp)
   1021c:	1884703a 	and	r2,r3,r2
   10220:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   10224:	e0bff30b 	ldhu	r2,-52(fp)
   10228:	10000d26 	beq	r2,zero,10260 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1022c:	e0bff383 	ldbu	r2,-50(fp)
   10230:	10800058 	cmpnei	r2,r2,1
   10234:	10000d1e 	bne	r2,zero,1026c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10238:	e0bffc17 	ldw	r2,-16(fp)
   1023c:	1080020b 	ldhu	r2,8(r2)
   10240:	1007883a 	mov	r3,r2
   10244:	e0bff30b 	ldhu	r2,-52(fp)
   10248:	0084303a 	nor	r2,zero,r2
   1024c:	1884703a 	and	r2,r3,r2
   10250:	1007883a 	mov	r3,r2
   10254:	e0bffc17 	ldw	r2,-16(fp)
   10258:	10c0020d 	sth	r3,8(r2)
   1025c:	00000306 	br	1026c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10260:	e0bfff17 	ldw	r2,-4(fp)
   10264:	00c01c04 	movi	r3,112
   10268:	10c00005 	stb	r3,0(r2)
   1026c:	e0bff417 	ldw	r2,-48(fp)
   10270:	e0bff715 	stw	r2,-36(fp)
   10274:	e0bff717 	ldw	r2,-36(fp)
   10278:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1027c:	00004206 	br	10388 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10280:	e0bffc17 	ldw	r2,-16(fp)
   10284:	1080020b 	ldhu	r2,8(r2)
   10288:	0084303a 	nor	r2,zero,r2
   1028c:	1007883a 	mov	r3,r2
   10290:	e0bffd0b 	ldhu	r2,-12(fp)
   10294:	1884703a 	and	r2,r3,r2
   10298:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1029c:	e0fff30b 	ldhu	r3,-52(fp)
   102a0:	e0bffd0b 	ldhu	r2,-12(fp)
   102a4:	18800b1e 	bne	r3,r2,102d4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   102a8:	e0bff383 	ldbu	r2,-50(fp)
   102ac:	10800058 	cmpnei	r2,r2,1
   102b0:	10000b1e 	bne	r2,zero,102e0 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   102b4:	e0bffc17 	ldw	r2,-16(fp)
   102b8:	10c0020b 	ldhu	r3,8(r2)
   102bc:	e0bff30b 	ldhu	r2,-52(fp)
   102c0:	1884b03a 	or	r2,r3,r2
   102c4:	1007883a 	mov	r3,r2
   102c8:	e0bffc17 	ldw	r2,-16(fp)
   102cc:	10c0020d 	sth	r3,8(r2)
   102d0:	00000306 	br	102e0 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   102d4:	e0bfff17 	ldw	r2,-4(fp)
   102d8:	00c01c04 	movi	r3,112
   102dc:	10c00005 	stb	r3,0(r2)
   102e0:	e0bff417 	ldw	r2,-48(fp)
   102e4:	e0bff815 	stw	r2,-32(fp)
   102e8:	e0bff817 	ldw	r2,-32(fp)
   102ec:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   102f0:	00002506 	br	10388 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   102f4:	e0bffc17 	ldw	r2,-16(fp)
   102f8:	1080020b 	ldhu	r2,8(r2)
   102fc:	0084303a 	nor	r2,zero,r2
   10300:	1007883a 	mov	r3,r2
   10304:	e0bffd0b 	ldhu	r2,-12(fp)
   10308:	1884703a 	and	r2,r3,r2
   1030c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   10310:	e0bff30b 	ldhu	r2,-52(fp)
   10314:	10000b26 	beq	r2,zero,10344 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10318:	e0bff383 	ldbu	r2,-50(fp)
   1031c:	10800058 	cmpnei	r2,r2,1
   10320:	10000b1e 	bne	r2,zero,10350 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10324:	e0bffc17 	ldw	r2,-16(fp)
   10328:	10c0020b 	ldhu	r3,8(r2)
   1032c:	e0bff30b 	ldhu	r2,-52(fp)
   10330:	1884b03a 	or	r2,r3,r2
   10334:	1007883a 	mov	r3,r2
   10338:	e0bffc17 	ldw	r2,-16(fp)
   1033c:	10c0020d 	sth	r3,8(r2)
   10340:	00000306 	br	10350 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10344:	e0bfff17 	ldw	r2,-4(fp)
   10348:	00c01c04 	movi	r3,112
   1034c:	10c00005 	stb	r3,0(r2)
   10350:	e0bff417 	ldw	r2,-48(fp)
   10354:	e0bff915 	stw	r2,-28(fp)
   10358:	e0bff917 	ldw	r2,-28(fp)
   1035c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10360:	00000906 	br	10388 <OSFlagAccept+0x2f4>
   10364:	e0bff417 	ldw	r2,-48(fp)
   10368:	e0bffa15 	stw	r2,-24(fp)
   1036c:	e0bffa17 	ldw	r2,-24(fp)
   10370:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   10374:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   10378:	e0bfff17 	ldw	r2,-4(fp)
   1037c:	00c01bc4 	movi	r3,111
   10380:	10c00005 	stb	r3,0(r2)
             break;
   10384:	0001883a 	nop
    }
    return (flags_rdy);
   10388:	e0bff30b 	ldhu	r2,-52(fp)
}
   1038c:	e037883a 	mov	sp,fp
   10390:	df000017 	ldw	fp,0(sp)
   10394:	dec00104 	addi	sp,sp,4
   10398:	f800283a 	ret

0001039c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   1039c:	defff804 	addi	sp,sp,-32
   103a0:	df000715 	stw	fp,28(sp)
   103a4:	df000704 	addi	fp,sp,28
   103a8:	2005883a 	mov	r2,r4
   103ac:	e17fff15 	stw	r5,-4(fp)
   103b0:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   103b4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   103b8:	e0bfff17 	ldw	r2,-4(fp)
   103bc:	1000021e 	bne	r2,zero,103c8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   103c0:	0005883a 	mov	r2,zero
   103c4:	00003b06 	br	104b4 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   103c8:	008000b4 	movhi	r2,2
   103cc:	10b66804 	addi	r2,r2,-9824
   103d0:	10800003 	ldbu	r2,0(r2)
   103d4:	10803fcc 	andi	r2,r2,255
   103d8:	10000526 	beq	r2,zero,103f0 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   103dc:	e0bfff17 	ldw	r2,-4(fp)
   103e0:	00c00404 	movi	r3,16
   103e4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   103e8:	0005883a 	mov	r2,zero
   103ec:	00003106 	br	104b4 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   103f0:	0005303a 	rdctl	r2,status
   103f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   103f8:	e0fffd17 	ldw	r3,-12(fp)
   103fc:	00bfff84 	movi	r2,-2
   10400:	1884703a 	and	r2,r3,r2
   10404:	1001703a 	wrctl	status,r2
  
  return context;
   10408:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1040c:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   10410:	008000b4 	movhi	r2,2
   10414:	10b66b04 	addi	r2,r2,-9812
   10418:	10800017 	ldw	r2,0(r2)
   1041c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   10420:	e0bffb17 	ldw	r2,-20(fp)
   10424:	10001b26 	beq	r2,zero,10494 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   10428:	008000b4 	movhi	r2,2
   1042c:	10b66b04 	addi	r2,r2,-9812
   10430:	10800017 	ldw	r2,0(r2)
   10434:	10c00117 	ldw	r3,4(r2)
   10438:	008000b4 	movhi	r2,2
   1043c:	10b66b04 	addi	r2,r2,-9812
   10440:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   10444:	e0bffb17 	ldw	r2,-20(fp)
   10448:	00c00144 	movi	r3,5
   1044c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   10450:	e0bffb17 	ldw	r2,-20(fp)
   10454:	e0fffe0b 	ldhu	r3,-8(fp)
   10458:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   1045c:	e0bffb17 	ldw	r2,-20(fp)
   10460:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   10464:	e0bffb17 	ldw	r2,-20(fp)
   10468:	00c00fc4 	movi	r3,63
   1046c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10470:	e0bffb17 	ldw	r2,-20(fp)
   10474:	100002c5 	stb	zero,11(r2)
   10478:	e0bff917 	ldw	r2,-28(fp)
   1047c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10480:	e0bffa17 	ldw	r2,-24(fp)
   10484:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   10488:	e0bfff17 	ldw	r2,-4(fp)
   1048c:	10000005 	stb	zero,0(r2)
   10490:	00000706 	br	104b0 <OSFlagCreate+0x114>
   10494:	e0bff917 	ldw	r2,-28(fp)
   10498:	e0bffc15 	stw	r2,-16(fp)
   1049c:	e0bffc17 	ldw	r2,-16(fp)
   104a0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   104a4:	e0bfff17 	ldw	r2,-4(fp)
   104a8:	00c01c84 	movi	r3,114
   104ac:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   104b0:	e0bffb17 	ldw	r2,-20(fp)
}
   104b4:	e037883a 	mov	sp,fp
   104b8:	df000017 	ldw	fp,0(sp)
   104bc:	dec00104 	addi	sp,sp,4
   104c0:	f800283a 	ret

000104c4 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   104c4:	defff204 	addi	sp,sp,-56
   104c8:	dfc00d15 	stw	ra,52(sp)
   104cc:	df000c15 	stw	fp,48(sp)
   104d0:	df000c04 	addi	fp,sp,48
   104d4:	e13ffd15 	stw	r4,-12(fp)
   104d8:	2805883a 	mov	r2,r5
   104dc:	e1bfff15 	stw	r6,-4(fp)
   104e0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   104e4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   104e8:	e0bfff17 	ldw	r2,-4(fp)
   104ec:	1000021e 	bne	r2,zero,104f8 <OSFlagDel+0x34>
        return (pgrp);
   104f0:	e0bffd17 	ldw	r2,-12(fp)
   104f4:	00008a06 	br	10720 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   104f8:	e0bffd17 	ldw	r2,-12(fp)
   104fc:	1000051e 	bne	r2,zero,10514 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10500:	e0bfff17 	ldw	r2,-4(fp)
   10504:	00c01b84 	movi	r3,110
   10508:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1050c:	e0bffd17 	ldw	r2,-12(fp)
   10510:	00008306 	br	10720 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10514:	008000b4 	movhi	r2,2
   10518:	10b66804 	addi	r2,r2,-9824
   1051c:	10800003 	ldbu	r2,0(r2)
   10520:	10803fcc 	andi	r2,r2,255
   10524:	10000526 	beq	r2,zero,1053c <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   10528:	e0bfff17 	ldw	r2,-4(fp)
   1052c:	00c003c4 	movi	r3,15
   10530:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10534:	e0bffd17 	ldw	r2,-12(fp)
   10538:	00007906 	br	10720 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   1053c:	e0bffd17 	ldw	r2,-12(fp)
   10540:	10800003 	ldbu	r2,0(r2)
   10544:	10803fcc 	andi	r2,r2,255
   10548:	10800160 	cmpeqi	r2,r2,5
   1054c:	1000051e 	bne	r2,zero,10564 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   10550:	e0bfff17 	ldw	r2,-4(fp)
   10554:	00c00044 	movi	r3,1
   10558:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1055c:	e0bffd17 	ldw	r2,-12(fp)
   10560:	00006f06 	br	10720 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10564:	0005303a 	rdctl	r2,status
   10568:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1056c:	e0fffc17 	ldw	r3,-16(fp)
   10570:	00bfff84 	movi	r2,-2
   10574:	1884703a 	and	r2,r3,r2
   10578:	1001703a 	wrctl	status,r2
  
  return context;
   1057c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10580:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   10584:	e0bffd17 	ldw	r2,-12(fp)
   10588:	10800117 	ldw	r2,4(r2)
   1058c:	10000326 	beq	r2,zero,1059c <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   10590:	00800044 	movi	r2,1
   10594:	e0bff405 	stb	r2,-48(fp)
   10598:	00000106 	br	105a0 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1059c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   105a0:	e0bffe03 	ldbu	r2,-8(fp)
   105a4:	10000326 	beq	r2,zero,105b4 <OSFlagDel+0xf0>
   105a8:	10800060 	cmpeqi	r2,r2,1
   105ac:	1000271e 	bne	r2,zero,1064c <OSFlagDel+0x188>
   105b0:	00005006 	br	106f4 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   105b4:	e0bff403 	ldbu	r2,-48(fp)
   105b8:	10001a1e 	bne	r2,zero,10624 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   105bc:	e0bffd17 	ldw	r2,-12(fp)
   105c0:	00c00fc4 	movi	r3,63
   105c4:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   105c8:	e0bffd17 	ldw	r2,-12(fp)
   105cc:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   105d0:	e0bffd17 	ldw	r2,-12(fp)
   105d4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   105d8:	008000b4 	movhi	r2,2
   105dc:	10b66b04 	addi	r2,r2,-9812
   105e0:	10c00017 	ldw	r3,0(r2)
   105e4:	e0bffd17 	ldw	r2,-12(fp)
   105e8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   105ec:	e0bffd17 	ldw	r2,-12(fp)
   105f0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   105f4:	008000b4 	movhi	r2,2
   105f8:	10b66b04 	addi	r2,r2,-9812
   105fc:	e0fffd17 	ldw	r3,-12(fp)
   10600:	10c00015 	stw	r3,0(r2)
   10604:	e0bff717 	ldw	r2,-36(fp)
   10608:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1060c:	e0bff817 	ldw	r2,-32(fp)
   10610:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   10614:	e0bfff17 	ldw	r2,-4(fp)
   10618:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   1061c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   10620:	00003e06 	br	1071c <OSFlagDel+0x258>
   10624:	e0bff717 	ldw	r2,-36(fp)
   10628:	e0bff915 	stw	r2,-28(fp)
   1062c:	e0bff917 	ldw	r2,-28(fp)
   10630:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   10634:	e0bfff17 	ldw	r2,-4(fp)
   10638:	00c01244 	movi	r3,73
   1063c:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   10640:	e0bffd17 	ldw	r2,-12(fp)
   10644:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   10648:	00003406 	br	1071c <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1064c:	e0bffd17 	ldw	r2,-12(fp)
   10650:	10800117 	ldw	r2,4(r2)
   10654:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   10658:	00000606 	br	10674 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   1065c:	000b883a 	mov	r5,zero
   10660:	e13ff517 	ldw	r4,-44(fp)
   10664:	00117380 	call	11738 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   10668:	e0bff517 	ldw	r2,-44(fp)
   1066c:	10800017 	ldw	r2,0(r2)
   10670:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   10674:	e0bff517 	ldw	r2,-44(fp)
   10678:	103ff81e 	bne	r2,zero,1065c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   1067c:	e0bffd17 	ldw	r2,-12(fp)
   10680:	00c00fc4 	movi	r3,63
   10684:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10688:	e0bffd17 	ldw	r2,-12(fp)
   1068c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10690:	e0bffd17 	ldw	r2,-12(fp)
   10694:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   10698:	008000b4 	movhi	r2,2
   1069c:	10b66b04 	addi	r2,r2,-9812
   106a0:	10c00017 	ldw	r3,0(r2)
   106a4:	e0bffd17 	ldw	r2,-12(fp)
   106a8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   106ac:	e0bffd17 	ldw	r2,-12(fp)
   106b0:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   106b4:	008000b4 	movhi	r2,2
   106b8:	10b66b04 	addi	r2,r2,-9812
   106bc:	e0fffd17 	ldw	r3,-12(fp)
   106c0:	10c00015 	stw	r3,0(r2)
   106c4:	e0bff717 	ldw	r2,-36(fp)
   106c8:	e0bffa15 	stw	r2,-24(fp)
   106cc:	e0bffa17 	ldw	r2,-24(fp)
   106d0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   106d4:	e0bff403 	ldbu	r2,-48(fp)
   106d8:	10800058 	cmpnei	r2,r2,1
   106dc:	1000011e 	bne	r2,zero,106e4 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   106e0:	000f6f40 	call	f6f4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   106e4:	e0bfff17 	ldw	r2,-4(fp)
   106e8:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   106ec:	e03ff615 	stw	zero,-40(fp)
             break;
   106f0:	00000a06 	br	1071c <OSFlagDel+0x258>
   106f4:	e0bff717 	ldw	r2,-36(fp)
   106f8:	e0bffb15 	stw	r2,-20(fp)
   106fc:	e0bffb17 	ldw	r2,-20(fp)
   10700:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   10704:	e0bfff17 	ldw	r2,-4(fp)
   10708:	00c001c4 	movi	r3,7
   1070c:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   10710:	e0bffd17 	ldw	r2,-12(fp)
   10714:	e0bff615 	stw	r2,-40(fp)
             break;
   10718:	0001883a 	nop
    }
    return (pgrp_return);
   1071c:	e0bff617 	ldw	r2,-40(fp)
}
   10720:	e037883a 	mov	sp,fp
   10724:	dfc00117 	ldw	ra,4(sp)
   10728:	df000017 	ldw	fp,0(sp)
   1072c:	dec00204 	addi	sp,sp,8
   10730:	f800283a 	ret

00010734 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10734:	defff604 	addi	sp,sp,-40
   10738:	dfc00915 	stw	ra,36(sp)
   1073c:	df000815 	stw	fp,32(sp)
   10740:	df000804 	addi	fp,sp,32
   10744:	e13ffd15 	stw	r4,-12(fp)
   10748:	e17ffe15 	stw	r5,-8(fp)
   1074c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10750:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10754:	e0bfff17 	ldw	r2,-4(fp)
   10758:	1000021e 	bne	r2,zero,10764 <OSFlagNameGet+0x30>
        return (0);
   1075c:	0005883a 	mov	r2,zero
   10760:	00003b06 	br	10850 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10764:	e0bffd17 	ldw	r2,-12(fp)
   10768:	1000051e 	bne	r2,zero,10780 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1076c:	e0bfff17 	ldw	r2,-4(fp)
   10770:	00c01b84 	movi	r3,110
   10774:	10c00005 	stb	r3,0(r2)
        return (0);
   10778:	0005883a 	mov	r2,zero
   1077c:	00003406 	br	10850 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10780:	e0bffe17 	ldw	r2,-8(fp)
   10784:	1000051e 	bne	r2,zero,1079c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10788:	e0bfff17 	ldw	r2,-4(fp)
   1078c:	00c00304 	movi	r3,12
   10790:	10c00005 	stb	r3,0(r2)
        return (0);
   10794:	0005883a 	mov	r2,zero
   10798:	00002d06 	br	10850 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1079c:	008000b4 	movhi	r2,2
   107a0:	10b66804 	addi	r2,r2,-9824
   107a4:	10800003 	ldbu	r2,0(r2)
   107a8:	10803fcc 	andi	r2,r2,255
   107ac:	10000526 	beq	r2,zero,107c4 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   107b0:	e0bfff17 	ldw	r2,-4(fp)
   107b4:	00c00444 	movi	r3,17
   107b8:	10c00005 	stb	r3,0(r2)
        return (0);
   107bc:	0005883a 	mov	r2,zero
   107c0:	00002306 	br	10850 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107c4:	0005303a 	rdctl	r2,status
   107c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107cc:	e0fffc17 	ldw	r3,-16(fp)
   107d0:	00bfff84 	movi	r2,-2
   107d4:	1884703a 	and	r2,r3,r2
   107d8:	1001703a 	wrctl	status,r2
  
  return context;
   107dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   107e0:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   107e4:	e0bffd17 	ldw	r2,-12(fp)
   107e8:	10800003 	ldbu	r2,0(r2)
   107ec:	10803fcc 	andi	r2,r2,255
   107f0:	10800160 	cmpeqi	r2,r2,5
   107f4:	1000091e 	bne	r2,zero,1081c <OSFlagNameGet+0xe8>
   107f8:	e0bff817 	ldw	r2,-32(fp)
   107fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10800:	e0bff917 	ldw	r2,-28(fp)
   10804:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10808:	e0bfff17 	ldw	r2,-4(fp)
   1080c:	00c00044 	movi	r3,1
   10810:	10c00005 	stb	r3,0(r2)
        return (0);
   10814:	0005883a 	mov	r2,zero
   10818:	00000d06 	br	10850 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   1081c:	e0bffd17 	ldw	r2,-12(fp)
   10820:	10800284 	addi	r2,r2,10
   10824:	100b883a 	mov	r5,r2
   10828:	e13ffe17 	ldw	r4,-8(fp)
   1082c:	000f8980 	call	f898 <OS_StrCopy>
   10830:	e0bffb05 	stb	r2,-20(fp)
   10834:	e0bff817 	ldw	r2,-32(fp)
   10838:	e0bffa15 	stw	r2,-24(fp)
   1083c:	e0bffa17 	ldw	r2,-24(fp)
   10840:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10844:	e0bfff17 	ldw	r2,-4(fp)
   10848:	10000005 	stb	zero,0(r2)
    return (len);
   1084c:	e0bffb03 	ldbu	r2,-20(fp)
}
   10850:	e037883a 	mov	sp,fp
   10854:	dfc00117 	ldw	ra,4(sp)
   10858:	df000017 	ldw	fp,0(sp)
   1085c:	dec00204 	addi	sp,sp,8
   10860:	f800283a 	ret

00010864 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10864:	defff504 	addi	sp,sp,-44
   10868:	dfc00a15 	stw	ra,40(sp)
   1086c:	df000915 	stw	fp,36(sp)
   10870:	df000904 	addi	fp,sp,36
   10874:	e13ffd15 	stw	r4,-12(fp)
   10878:	e17ffe15 	stw	r5,-8(fp)
   1087c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10880:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10884:	e0bfff17 	ldw	r2,-4(fp)
   10888:	10004526 	beq	r2,zero,109a0 <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1088c:	e0bffd17 	ldw	r2,-12(fp)
   10890:	1000041e 	bne	r2,zero,108a4 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10894:	e0bfff17 	ldw	r2,-4(fp)
   10898:	00c01b84 	movi	r3,110
   1089c:	10c00005 	stb	r3,0(r2)
        return;
   108a0:	00004006 	br	109a4 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   108a4:	e0bffe17 	ldw	r2,-8(fp)
   108a8:	1000041e 	bne	r2,zero,108bc <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   108ac:	e0bfff17 	ldw	r2,-4(fp)
   108b0:	00c00304 	movi	r3,12
   108b4:	10c00005 	stb	r3,0(r2)
        return;
   108b8:	00003a06 	br	109a4 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   108bc:	008000b4 	movhi	r2,2
   108c0:	10b66804 	addi	r2,r2,-9824
   108c4:	10800003 	ldbu	r2,0(r2)
   108c8:	10803fcc 	andi	r2,r2,255
   108cc:	10000426 	beq	r2,zero,108e0 <OSFlagNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
   108d0:	e0bfff17 	ldw	r2,-4(fp)
   108d4:	00c00484 	movi	r3,18
   108d8:	10c00005 	stb	r3,0(r2)
        return;
   108dc:	00003106 	br	109a4 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108e0:	0005303a 	rdctl	r2,status
   108e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108e8:	e0fffc17 	ldw	r3,-16(fp)
   108ec:	00bfff84 	movi	r2,-2
   108f0:	1884703a 	and	r2,r3,r2
   108f4:	1001703a 	wrctl	status,r2
  
  return context;
   108f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   108fc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   10900:	e0bffd17 	ldw	r2,-12(fp)
   10904:	10800003 	ldbu	r2,0(r2)
   10908:	10803fcc 	andi	r2,r2,255
   1090c:	10800160 	cmpeqi	r2,r2,5
   10910:	1000081e 	bne	r2,zero,10934 <OSFlagNameSet+0xd0>
   10914:	e0bff717 	ldw	r2,-36(fp)
   10918:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1091c:	e0bff817 	ldw	r2,-32(fp)
   10920:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10924:	e0bfff17 	ldw	r2,-4(fp)
   10928:	00c00044 	movi	r3,1
   1092c:	10c00005 	stb	r3,0(r2)
        return;
   10930:	00001c06 	br	109a4 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   10934:	e13ffe17 	ldw	r4,-8(fp)
   10938:	000f90c0 	call	f90c <OS_StrLen>
   1093c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   10940:	e0bffa03 	ldbu	r2,-24(fp)
   10944:	10800830 	cmpltui	r2,r2,32
   10948:	1000081e 	bne	r2,zero,1096c <OSFlagNameSet+0x108>
   1094c:	e0bff717 	ldw	r2,-36(fp)
   10950:	e0bff915 	stw	r2,-28(fp)
   10954:	e0bff917 	ldw	r2,-28(fp)
   10958:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   1095c:	e0bfff17 	ldw	r2,-4(fp)
   10960:	00c01cc4 	movi	r3,115
   10964:	10c00005 	stb	r3,0(r2)
        return;
   10968:	00000e06 	br	109a4 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   1096c:	e0bffd17 	ldw	r2,-12(fp)
   10970:	10800284 	addi	r2,r2,10
   10974:	e17ffe17 	ldw	r5,-8(fp)
   10978:	1009883a 	mov	r4,r2
   1097c:	000f8980 	call	f898 <OS_StrCopy>
   10980:	e0bff717 	ldw	r2,-36(fp)
   10984:	e0bffb15 	stw	r2,-20(fp)
   10988:	e0bffb17 	ldw	r2,-20(fp)
   1098c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10990:	e0bfff17 	ldw	r2,-4(fp)
   10994:	10000005 	stb	zero,0(r2)
    return;
   10998:	0001883a 	nop
   1099c:	00000106 	br	109a4 <OSFlagNameSet+0x140>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   109a0:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   109a4:	e037883a 	mov	sp,fp
   109a8:	dfc00117 	ldw	ra,4(sp)
   109ac:	df000017 	ldw	fp,0(sp)
   109b0:	dec00204 	addi	sp,sp,8
   109b4:	f800283a 	ret

000109b8 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   109b8:	deffe104 	addi	sp,sp,-124
   109bc:	dfc01e15 	stw	ra,120(sp)
   109c0:	df001d15 	stw	fp,116(sp)
   109c4:	df001d04 	addi	fp,sp,116
   109c8:	e13ffc15 	stw	r4,-16(fp)
   109cc:	2809883a 	mov	r4,r5
   109d0:	3007883a 	mov	r3,r6
   109d4:	3805883a 	mov	r2,r7
   109d8:	e13ffd0d 	sth	r4,-12(fp)
   109dc:	e0fffe05 	stb	r3,-8(fp)
   109e0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   109e4:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   109e8:	e0800217 	ldw	r2,8(fp)
   109ec:	1000021e 	bne	r2,zero,109f8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   109f0:	0005883a 	mov	r2,zero
   109f4:	00016f06 	br	10fb4 <OSFlagPend+0x5fc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   109f8:	e0bffc17 	ldw	r2,-16(fp)
   109fc:	1000051e 	bne	r2,zero,10a14 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10a00:	e0800217 	ldw	r2,8(fp)
   10a04:	00c01b84 	movi	r3,110
   10a08:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10a0c:	0005883a 	mov	r2,zero
   10a10:	00016806 	br	10fb4 <OSFlagPend+0x5fc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10a14:	008000b4 	movhi	r2,2
   10a18:	10b66804 	addi	r2,r2,-9824
   10a1c:	10800003 	ldbu	r2,0(r2)
   10a20:	10803fcc 	andi	r2,r2,255
   10a24:	10000526 	beq	r2,zero,10a3c <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   10a28:	e0800217 	ldw	r2,8(fp)
   10a2c:	00c00084 	movi	r3,2
   10a30:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10a34:	0005883a 	mov	r2,zero
   10a38:	00015e06 	br	10fb4 <OSFlagPend+0x5fc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   10a3c:	008000b4 	movhi	r2,2
   10a40:	10b65a04 	addi	r2,r2,-9880
   10a44:	10800003 	ldbu	r2,0(r2)
   10a48:	10803fcc 	andi	r2,r2,255
   10a4c:	10000526 	beq	r2,zero,10a64 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   10a50:	e0800217 	ldw	r2,8(fp)
   10a54:	00c00344 	movi	r3,13
   10a58:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10a5c:	0005883a 	mov	r2,zero
   10a60:	00015406 	br	10fb4 <OSFlagPend+0x5fc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   10a64:	e0bffc17 	ldw	r2,-16(fp)
   10a68:	10800003 	ldbu	r2,0(r2)
   10a6c:	10803fcc 	andi	r2,r2,255
   10a70:	10800160 	cmpeqi	r2,r2,5
   10a74:	1000051e 	bne	r2,zero,10a8c <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   10a78:	e0800217 	ldw	r2,8(fp)
   10a7c:	00c00044 	movi	r3,1
   10a80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10a84:	0005883a 	mov	r2,zero
   10a88:	00014a06 	br	10fb4 <OSFlagPend+0x5fc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   10a8c:	e0fffe03 	ldbu	r3,-8(fp)
   10a90:	00bfe004 	movi	r2,-128
   10a94:	1884703a 	and	r2,r3,r2
   10a98:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   10a9c:	e0bfe603 	ldbu	r2,-104(fp)
   10aa0:	10000626 	beq	r2,zero,10abc <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   10aa4:	e0bffe03 	ldbu	r2,-8(fp)
   10aa8:	10801fcc 	andi	r2,r2,127
   10aac:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   10ab0:	00800044 	movi	r2,1
   10ab4:	e0bfe405 	stb	r2,-112(fp)
   10ab8:	00000106 	br	10ac0 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   10abc:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ac0:	0005303a 	rdctl	r2,status
   10ac4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ac8:	e0fff617 	ldw	r3,-40(fp)
   10acc:	00bfff84 	movi	r2,-2
   10ad0:	1884703a 	and	r2,r3,r2
   10ad4:	1001703a 	wrctl	status,r2
  
  return context;
   10ad8:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   10adc:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   10ae0:	e0bffe03 	ldbu	r2,-8(fp)
   10ae4:	10c00060 	cmpeqi	r3,r2,1
   10ae8:	1800981e 	bne	r3,zero,10d4c <OSFlagPend+0x394>
   10aec:	10c00088 	cmpgei	r3,r2,2
   10af0:	1800021e 	bne	r3,zero,10afc <OSFlagPend+0x144>
   10af4:	10006526 	beq	r2,zero,10c8c <OSFlagPend+0x2d4>
   10af8:	0000c306 	br	10e08 <OSFlagPend+0x450>
   10afc:	10c000a0 	cmpeqi	r3,r2,2
   10b00:	1800031e 	bne	r3,zero,10b10 <OSFlagPend+0x158>
   10b04:	108000e0 	cmpeqi	r2,r2,3
   10b08:	1000311e 	bne	r2,zero,10bd0 <OSFlagPend+0x218>
   10b0c:	0000be06 	br	10e08 <OSFlagPend+0x450>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   10b10:	e0bffc17 	ldw	r2,-16(fp)
   10b14:	10c0020b 	ldhu	r3,8(r2)
   10b18:	e0bffd0b 	ldhu	r2,-12(fp)
   10b1c:	1884703a 	and	r2,r3,r2
   10b20:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10b24:	e0ffe80b 	ldhu	r3,-96(fp)
   10b28:	e0bffd0b 	ldhu	r2,-12(fp)
   10b2c:	1880191e 	bne	r3,r2,10b94 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10b30:	e0bfe403 	ldbu	r2,-112(fp)
   10b34:	10800058 	cmpnei	r2,r2,1
   10b38:	1000091e 	bne	r2,zero,10b60 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   10b3c:	e0bffc17 	ldw	r2,-16(fp)
   10b40:	1080020b 	ldhu	r2,8(r2)
   10b44:	1007883a 	mov	r3,r2
   10b48:	e0bfe80b 	ldhu	r2,-96(fp)
   10b4c:	0084303a 	nor	r2,zero,r2
   10b50:	1884703a 	and	r2,r3,r2
   10b54:	1007883a 	mov	r3,r2
   10b58:	e0bffc17 	ldw	r2,-16(fp)
   10b5c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10b60:	008000b4 	movhi	r2,2
   10b64:	10b66904 	addi	r2,r2,-9820
   10b68:	10800017 	ldw	r2,0(r2)
   10b6c:	e0ffe80b 	ldhu	r3,-96(fp)
   10b70:	10c00b0d 	sth	r3,44(r2)
   10b74:	e0bfe517 	ldw	r2,-108(fp)
   10b78:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b7c:	e0bfe717 	ldw	r2,-100(fp)
   10b80:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10b84:	e0800217 	ldw	r2,8(fp)
   10b88:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10b8c:	e0bfe80b 	ldhu	r2,-96(fp)
   10b90:	00010806 	br	10fb4 <OSFlagPend+0x5fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10b94:	e13ffd0b 	ldhu	r4,-12(fp)
   10b98:	e17ffe03 	ldbu	r5,-8(fp)
   10b9c:	e0bfff0b 	ldhu	r2,-4(fp)
   10ba0:	e0fff704 	addi	r3,fp,-36
   10ba4:	d8800015 	stw	r2,0(sp)
   10ba8:	280f883a 	mov	r7,r5
   10bac:	200d883a 	mov	r6,r4
   10bb0:	180b883a 	mov	r5,r3
   10bb4:	e13ffc17 	ldw	r4,-16(fp)
   10bb8:	00114880 	call	11488 <OS_FlagBlock>
   10bbc:	e0bfe517 	ldw	r2,-108(fp)
   10bc0:	e0bfe915 	stw	r2,-92(fp)
   10bc4:	e0bfe917 	ldw	r2,-92(fp)
   10bc8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10bcc:	00009806 	br	10e30 <OSFlagPend+0x478>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   10bd0:	e0bffc17 	ldw	r2,-16(fp)
   10bd4:	10c0020b 	ldhu	r3,8(r2)
   10bd8:	e0bffd0b 	ldhu	r2,-12(fp)
   10bdc:	1884703a 	and	r2,r3,r2
   10be0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   10be4:	e0bfe80b 	ldhu	r2,-96(fp)
   10be8:	10001926 	beq	r2,zero,10c50 <OSFlagPend+0x298>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10bec:	e0bfe403 	ldbu	r2,-112(fp)
   10bf0:	10800058 	cmpnei	r2,r2,1
   10bf4:	1000091e 	bne	r2,zero,10c1c <OSFlagPend+0x264>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10bf8:	e0bffc17 	ldw	r2,-16(fp)
   10bfc:	1080020b 	ldhu	r2,8(r2)
   10c00:	1007883a 	mov	r3,r2
   10c04:	e0bfe80b 	ldhu	r2,-96(fp)
   10c08:	0084303a 	nor	r2,zero,r2
   10c0c:	1884703a 	and	r2,r3,r2
   10c10:	1007883a 	mov	r3,r2
   10c14:	e0bffc17 	ldw	r2,-16(fp)
   10c18:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10c1c:	008000b4 	movhi	r2,2
   10c20:	10b66904 	addi	r2,r2,-9820
   10c24:	10800017 	ldw	r2,0(r2)
   10c28:	e0ffe80b 	ldhu	r3,-96(fp)
   10c2c:	10c00b0d 	sth	r3,44(r2)
   10c30:	e0bfe517 	ldw	r2,-108(fp)
   10c34:	e0bfea15 	stw	r2,-88(fp)
   10c38:	e0bfea17 	ldw	r2,-88(fp)
   10c3c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10c40:	e0800217 	ldw	r2,8(fp)
   10c44:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10c48:	e0bfe80b 	ldhu	r2,-96(fp)
   10c4c:	0000d906 	br	10fb4 <OSFlagPend+0x5fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10c50:	e13ffd0b 	ldhu	r4,-12(fp)
   10c54:	e17ffe03 	ldbu	r5,-8(fp)
   10c58:	e0bfff0b 	ldhu	r2,-4(fp)
   10c5c:	e0fff704 	addi	r3,fp,-36
   10c60:	d8800015 	stw	r2,0(sp)
   10c64:	280f883a 	mov	r7,r5
   10c68:	200d883a 	mov	r6,r4
   10c6c:	180b883a 	mov	r5,r3
   10c70:	e13ffc17 	ldw	r4,-16(fp)
   10c74:	00114880 	call	11488 <OS_FlagBlock>
   10c78:	e0bfe517 	ldw	r2,-108(fp)
   10c7c:	e0bfeb15 	stw	r2,-84(fp)
   10c80:	e0bfeb17 	ldw	r2,-84(fp)
   10c84:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10c88:	00006906 	br	10e30 <OSFlagPend+0x478>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10c8c:	e0bffc17 	ldw	r2,-16(fp)
   10c90:	1080020b 	ldhu	r2,8(r2)
   10c94:	0084303a 	nor	r2,zero,r2
   10c98:	1007883a 	mov	r3,r2
   10c9c:	e0bffd0b 	ldhu	r2,-12(fp)
   10ca0:	1884703a 	and	r2,r3,r2
   10ca4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10ca8:	e0ffe80b 	ldhu	r3,-96(fp)
   10cac:	e0bffd0b 	ldhu	r2,-12(fp)
   10cb0:	1880171e 	bne	r3,r2,10d10 <OSFlagPend+0x358>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10cb4:	e0bfe403 	ldbu	r2,-112(fp)
   10cb8:	10800058 	cmpnei	r2,r2,1
   10cbc:	1000071e 	bne	r2,zero,10cdc <OSFlagPend+0x324>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   10cc0:	e0bffc17 	ldw	r2,-16(fp)
   10cc4:	10c0020b 	ldhu	r3,8(r2)
   10cc8:	e0bfe80b 	ldhu	r2,-96(fp)
   10ccc:	1884b03a 	or	r2,r3,r2
   10cd0:	1007883a 	mov	r3,r2
   10cd4:	e0bffc17 	ldw	r2,-16(fp)
   10cd8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10cdc:	008000b4 	movhi	r2,2
   10ce0:	10b66904 	addi	r2,r2,-9820
   10ce4:	10800017 	ldw	r2,0(r2)
   10ce8:	e0ffe80b 	ldhu	r3,-96(fp)
   10cec:	10c00b0d 	sth	r3,44(r2)
   10cf0:	e0bfe517 	ldw	r2,-108(fp)
   10cf4:	e0bfec15 	stw	r2,-80(fp)
   10cf8:	e0bfec17 	ldw	r2,-80(fp)
   10cfc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10d00:	e0800217 	ldw	r2,8(fp)
   10d04:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10d08:	e0bfe80b 	ldhu	r2,-96(fp)
   10d0c:	0000a906 	br	10fb4 <OSFlagPend+0x5fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10d10:	e13ffd0b 	ldhu	r4,-12(fp)
   10d14:	e17ffe03 	ldbu	r5,-8(fp)
   10d18:	e0bfff0b 	ldhu	r2,-4(fp)
   10d1c:	e0fff704 	addi	r3,fp,-36
   10d20:	d8800015 	stw	r2,0(sp)
   10d24:	280f883a 	mov	r7,r5
   10d28:	200d883a 	mov	r6,r4
   10d2c:	180b883a 	mov	r5,r3
   10d30:	e13ffc17 	ldw	r4,-16(fp)
   10d34:	00114880 	call	11488 <OS_FlagBlock>
   10d38:	e0bfe517 	ldw	r2,-108(fp)
   10d3c:	e0bfed15 	stw	r2,-76(fp)
   10d40:	e0bfed17 	ldw	r2,-76(fp)
   10d44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10d48:	00003906 	br	10e30 <OSFlagPend+0x478>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10d4c:	e0bffc17 	ldw	r2,-16(fp)
   10d50:	1080020b 	ldhu	r2,8(r2)
   10d54:	0084303a 	nor	r2,zero,r2
   10d58:	1007883a 	mov	r3,r2
   10d5c:	e0bffd0b 	ldhu	r2,-12(fp)
   10d60:	1884703a 	and	r2,r3,r2
   10d64:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   10d68:	e0bfe80b 	ldhu	r2,-96(fp)
   10d6c:	10001726 	beq	r2,zero,10dcc <OSFlagPend+0x414>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10d70:	e0bfe403 	ldbu	r2,-112(fp)
   10d74:	10800058 	cmpnei	r2,r2,1
   10d78:	1000071e 	bne	r2,zero,10d98 <OSFlagPend+0x3e0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10d7c:	e0bffc17 	ldw	r2,-16(fp)
   10d80:	10c0020b 	ldhu	r3,8(r2)
   10d84:	e0bfe80b 	ldhu	r2,-96(fp)
   10d88:	1884b03a 	or	r2,r3,r2
   10d8c:	1007883a 	mov	r3,r2
   10d90:	e0bffc17 	ldw	r2,-16(fp)
   10d94:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10d98:	008000b4 	movhi	r2,2
   10d9c:	10b66904 	addi	r2,r2,-9820
   10da0:	10800017 	ldw	r2,0(r2)
   10da4:	e0ffe80b 	ldhu	r3,-96(fp)
   10da8:	10c00b0d 	sth	r3,44(r2)
   10dac:	e0bfe517 	ldw	r2,-108(fp)
   10db0:	e0bfee15 	stw	r2,-72(fp)
   10db4:	e0bfee17 	ldw	r2,-72(fp)
   10db8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10dbc:	e0800217 	ldw	r2,8(fp)
   10dc0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10dc4:	e0bfe80b 	ldhu	r2,-96(fp)
   10dc8:	00007a06 	br	10fb4 <OSFlagPend+0x5fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10dcc:	e13ffd0b 	ldhu	r4,-12(fp)
   10dd0:	e17ffe03 	ldbu	r5,-8(fp)
   10dd4:	e0bfff0b 	ldhu	r2,-4(fp)
   10dd8:	e0fff704 	addi	r3,fp,-36
   10ddc:	d8800015 	stw	r2,0(sp)
   10de0:	280f883a 	mov	r7,r5
   10de4:	200d883a 	mov	r6,r4
   10de8:	180b883a 	mov	r5,r3
   10dec:	e13ffc17 	ldw	r4,-16(fp)
   10df0:	00114880 	call	11488 <OS_FlagBlock>
   10df4:	e0bfe517 	ldw	r2,-108(fp)
   10df8:	e0bfef15 	stw	r2,-68(fp)
   10dfc:	e0bfef17 	ldw	r2,-68(fp)
   10e00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10e04:	00000a06 	br	10e30 <OSFlagPend+0x478>
   10e08:	e0bfe517 	ldw	r2,-108(fp)
   10e0c:	e0bff015 	stw	r2,-64(fp)
   10e10:	e0bff017 	ldw	r2,-64(fp)
   10e14:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   10e18:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   10e1c:	e0800217 	ldw	r2,8(fp)
   10e20:	00c01bc4 	movi	r3,111
   10e24:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   10e28:	e0bfe80b 	ldhu	r2,-96(fp)
   10e2c:	00006106 	br	10fb4 <OSFlagPend+0x5fc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   10e30:	000f6f40 	call	f6f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e34:	0005303a 	rdctl	r2,status
   10e38:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e3c:	e0fff117 	ldw	r3,-60(fp)
   10e40:	00bfff84 	movi	r2,-2
   10e44:	1884703a 	and	r2,r3,r2
   10e48:	1001703a 	wrctl	status,r2
  
  return context;
   10e4c:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   10e50:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   10e54:	008000b4 	movhi	r2,2
   10e58:	10b66904 	addi	r2,r2,-9820
   10e5c:	10800017 	ldw	r2,0(r2)
   10e60:	10800c43 	ldbu	r2,49(r2)
   10e64:	10803fcc 	andi	r2,r2,255
   10e68:	10002226 	beq	r2,zero,10ef4 <OSFlagPend+0x53c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   10e6c:	008000b4 	movhi	r2,2
   10e70:	10b66904 	addi	r2,r2,-9820
   10e74:	10800017 	ldw	r2,0(r2)
   10e78:	10800c43 	ldbu	r2,49(r2)
   10e7c:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   10e80:	008000b4 	movhi	r2,2
   10e84:	10b66904 	addi	r2,r2,-9820
   10e88:	10800017 	ldw	r2,0(r2)
   10e8c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   10e90:	e0bff704 	addi	r2,fp,-36
   10e94:	1009883a 	mov	r4,r2
   10e98:	00118480 	call	11848 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   10e9c:	008000b4 	movhi	r2,2
   10ea0:	10b66904 	addi	r2,r2,-9820
   10ea4:	10800017 	ldw	r2,0(r2)
   10ea8:	10000c05 	stb	zero,48(r2)
   10eac:	e0bfe517 	ldw	r2,-108(fp)
   10eb0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10eb4:	e0bff217 	ldw	r2,-56(fp)
   10eb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   10ebc:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   10ec0:	e0bff303 	ldbu	r2,-52(fp)
   10ec4:	108000a0 	cmpeqi	r2,r2,2
   10ec8:	10000426 	beq	r2,zero,10edc <OSFlagPend+0x524>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   10ecc:	e0800217 	ldw	r2,8(fp)
   10ed0:	00c00384 	movi	r3,14
   10ed4:	10c00005 	stb	r3,0(r2)
                 break;
   10ed8:	00000406 	br	10eec <OSFlagPend+0x534>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   10edc:	e0800217 	ldw	r2,8(fp)
   10ee0:	00c00284 	movi	r3,10
   10ee4:	10c00005 	stb	r3,0(r2)
                 break;
   10ee8:	0001883a 	nop
        }
        return (flags_rdy);
   10eec:	e0bfe80b 	ldhu	r2,-96(fp)
   10ef0:	00003006 	br	10fb4 <OSFlagPend+0x5fc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   10ef4:	008000b4 	movhi	r2,2
   10ef8:	10b66904 	addi	r2,r2,-9820
   10efc:	10800017 	ldw	r2,0(r2)
   10f00:	10800b0b 	ldhu	r2,44(r2)
   10f04:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   10f08:	e0bfe403 	ldbu	r2,-112(fp)
   10f0c:	10800058 	cmpnei	r2,r2,1
   10f10:	1000211e 	bne	r2,zero,10f98 <OSFlagPend+0x5e0>
        switch (wait_type) {
   10f14:	e0bffe03 	ldbu	r2,-8(fp)
   10f18:	10001616 	blt	r2,zero,10f74 <OSFlagPend+0x5bc>
   10f1c:	10c00090 	cmplti	r3,r2,2
   10f20:	18000c1e 	bne	r3,zero,10f54 <OSFlagPend+0x59c>
   10f24:	10800108 	cmpgei	r2,r2,4
   10f28:	1000121e 	bne	r2,zero,10f74 <OSFlagPend+0x5bc>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   10f2c:	e0bffc17 	ldw	r2,-16(fp)
   10f30:	1080020b 	ldhu	r2,8(r2)
   10f34:	1007883a 	mov	r3,r2
   10f38:	e0bfe80b 	ldhu	r2,-96(fp)
   10f3c:	0084303a 	nor	r2,zero,r2
   10f40:	1884703a 	and	r2,r3,r2
   10f44:	1007883a 	mov	r3,r2
   10f48:	e0bffc17 	ldw	r2,-16(fp)
   10f4c:	10c0020d 	sth	r3,8(r2)
                 break;
   10f50:	00001106 	br	10f98 <OSFlagPend+0x5e0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   10f54:	e0bffc17 	ldw	r2,-16(fp)
   10f58:	10c0020b 	ldhu	r3,8(r2)
   10f5c:	e0bfe80b 	ldhu	r2,-96(fp)
   10f60:	1884b03a 	or	r2,r3,r2
   10f64:	1007883a 	mov	r3,r2
   10f68:	e0bffc17 	ldw	r2,-16(fp)
   10f6c:	10c0020d 	sth	r3,8(r2)
                 break;
   10f70:	00000906 	br	10f98 <OSFlagPend+0x5e0>
   10f74:	e0bfe517 	ldw	r2,-108(fp)
   10f78:	e0bff415 	stw	r2,-48(fp)
   10f7c:	e0bff417 	ldw	r2,-48(fp)
   10f80:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   10f84:	e0800217 	ldw	r2,8(fp)
   10f88:	00c01bc4 	movi	r3,111
   10f8c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   10f90:	0005883a 	mov	r2,zero
   10f94:	00000706 	br	10fb4 <OSFlagPend+0x5fc>
   10f98:	e0bfe517 	ldw	r2,-108(fp)
   10f9c:	e0bff515 	stw	r2,-44(fp)
   10fa0:	e0bff517 	ldw	r2,-44(fp)
   10fa4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   10fa8:	e0800217 	ldw	r2,8(fp)
   10fac:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   10fb0:	e0bfe80b 	ldhu	r2,-96(fp)
}
   10fb4:	e037883a 	mov	sp,fp
   10fb8:	dfc00117 	ldw	ra,4(sp)
   10fbc:	df000017 	ldw	fp,0(sp)
   10fc0:	dec00204 	addi	sp,sp,8
   10fc4:	f800283a 	ret

00010fc8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   10fc8:	defffb04 	addi	sp,sp,-20
   10fcc:	df000415 	stw	fp,16(sp)
   10fd0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10fd4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10fd8:	0005303a 	rdctl	r2,status
   10fdc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fe0:	e0fffe17 	ldw	r3,-8(fp)
   10fe4:	00bfff84 	movi	r2,-2
   10fe8:	1884703a 	and	r2,r3,r2
   10fec:	1001703a 	wrctl	status,r2
  
  return context;
   10ff0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   10ff4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   10ff8:	008000b4 	movhi	r2,2
   10ffc:	10b66904 	addi	r2,r2,-9820
   11000:	10800017 	ldw	r2,0(r2)
   11004:	10800b0b 	ldhu	r2,44(r2)
   11008:	e0bffd0d 	sth	r2,-12(fp)
   1100c:	e0bffc17 	ldw	r2,-16(fp)
   11010:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11014:	e0bfff17 	ldw	r2,-4(fp)
   11018:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   1101c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   11020:	e037883a 	mov	sp,fp
   11024:	df000017 	ldw	fp,0(sp)
   11028:	dec00104 	addi	sp,sp,4
   1102c:	f800283a 	ret

00011030 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   11030:	deffef04 	addi	sp,sp,-68
   11034:	dfc01015 	stw	ra,64(sp)
   11038:	df000f15 	stw	fp,60(sp)
   1103c:	df000f04 	addi	fp,sp,60
   11040:	e13ffc15 	stw	r4,-16(fp)
   11044:	2807883a 	mov	r3,r5
   11048:	3005883a 	mov	r2,r6
   1104c:	e1ffff15 	stw	r7,-4(fp)
   11050:	e0fffd0d 	sth	r3,-12(fp)
   11054:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   11058:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1105c:	e0bfff17 	ldw	r2,-4(fp)
   11060:	1000021e 	bne	r2,zero,1106c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   11064:	0005883a 	mov	r2,zero
   11068:	0000d106 	br	113b0 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   1106c:	e0bffc17 	ldw	r2,-16(fp)
   11070:	1000051e 	bne	r2,zero,11088 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11074:	e0bfff17 	ldw	r2,-4(fp)
   11078:	00c01b84 	movi	r3,110
   1107c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11080:	0005883a 	mov	r2,zero
   11084:	0000ca06 	br	113b0 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   11088:	e0bffc17 	ldw	r2,-16(fp)
   1108c:	10800003 	ldbu	r2,0(r2)
   11090:	10803fcc 	andi	r2,r2,255
   11094:	10800160 	cmpeqi	r2,r2,5
   11098:	1000051e 	bne	r2,zero,110b0 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   1109c:	e0bfff17 	ldw	r2,-4(fp)
   110a0:	00c00044 	movi	r3,1
   110a4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   110a8:	0005883a 	mov	r2,zero
   110ac:	0000c006 	br	113b0 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   110b0:	0005303a 	rdctl	r2,status
   110b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   110b8:	e0fffb17 	ldw	r3,-20(fp)
   110bc:	00bfff84 	movi	r2,-2
   110c0:	1884703a 	and	r2,r3,r2
   110c4:	1001703a 	wrctl	status,r2
  
  return context;
   110c8:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   110cc:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   110d0:	e0bffe03 	ldbu	r2,-8(fp)
   110d4:	10000326 	beq	r2,zero,110e4 <OSFlagPost+0xb4>
   110d8:	10800060 	cmpeqi	r2,r2,1
   110dc:	10000b1e 	bne	r2,zero,1110c <OSFlagPost+0xdc>
   110e0:	00001206 	br	1112c <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   110e4:	e0bffc17 	ldw	r2,-16(fp)
   110e8:	1080020b 	ldhu	r2,8(r2)
   110ec:	1007883a 	mov	r3,r2
   110f0:	e0bffd0b 	ldhu	r2,-12(fp)
   110f4:	0084303a 	nor	r2,zero,r2
   110f8:	1884703a 	and	r2,r3,r2
   110fc:	1007883a 	mov	r3,r2
   11100:	e0bffc17 	ldw	r2,-16(fp)
   11104:	10c0020d 	sth	r3,8(r2)
             break;
   11108:	00001106 	br	11150 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   1110c:	e0bffc17 	ldw	r2,-16(fp)
   11110:	10c0020b 	ldhu	r3,8(r2)
   11114:	e0bffd0b 	ldhu	r2,-12(fp)
   11118:	1884b03a 	or	r2,r3,r2
   1111c:	1007883a 	mov	r3,r2
   11120:	e0bffc17 	ldw	r2,-16(fp)
   11124:	10c0020d 	sth	r3,8(r2)
             break;
   11128:	00000906 	br	11150 <OSFlagPost+0x120>
   1112c:	e0bff317 	ldw	r2,-52(fp)
   11130:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11134:	e0bff417 	ldw	r2,-48(fp)
   11138:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   1113c:	e0bfff17 	ldw	r2,-4(fp)
   11140:	00c01c44 	movi	r3,113
   11144:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   11148:	0005883a 	mov	r2,zero
   1114c:	00009806 	br	113b0 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   11150:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   11154:	e0bffc17 	ldw	r2,-16(fp)
   11158:	10800117 	ldw	r2,4(r2)
   1115c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   11160:	00007706 	br	11340 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   11164:	e0bff117 	ldw	r2,-60(fp)
   11168:	10800483 	ldbu	r2,18(r2)
   1116c:	10803fcc 	andi	r2,r2,255
   11170:	10c00060 	cmpeqi	r3,r2,1
   11174:	18004a1e 	bne	r3,zero,112a0 <OSFlagPost+0x270>
   11178:	10c00088 	cmpgei	r3,r2,2
   1117c:	1800021e 	bne	r3,zero,11188 <OSFlagPost+0x158>
   11180:	10002f26 	beq	r2,zero,11240 <OSFlagPost+0x210>
   11184:	00005b06 	br	112f4 <OSFlagPost+0x2c4>
   11188:	10c000a0 	cmpeqi	r3,r2,2
   1118c:	1800031e 	bne	r3,zero,1119c <OSFlagPost+0x16c>
   11190:	108000e0 	cmpeqi	r2,r2,3
   11194:	1000171e 	bne	r2,zero,111f4 <OSFlagPost+0x1c4>
   11198:	00005606 	br	112f4 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1119c:	e0bffc17 	ldw	r2,-16(fp)
   111a0:	10c0020b 	ldhu	r3,8(r2)
   111a4:	e0bff117 	ldw	r2,-60(fp)
   111a8:	1080040b 	ldhu	r2,16(r2)
   111ac:	1884703a 	and	r2,r3,r2
   111b0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   111b4:	e0bff117 	ldw	r2,-60(fp)
   111b8:	1080040b 	ldhu	r2,16(r2)
   111bc:	10ffffcc 	andi	r3,r2,65535
   111c0:	e0bff60b 	ldhu	r2,-40(fp)
   111c4:	1880541e 	bne	r3,r2,11318 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   111c8:	e0bff60b 	ldhu	r2,-40(fp)
   111cc:	100b883a 	mov	r5,r2
   111d0:	e13ff117 	ldw	r4,-60(fp)
   111d4:	00117380 	call	11738 <OS_FlagTaskRdy>
   111d8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   111dc:	e0bff683 	ldbu	r2,-38(fp)
   111e0:	10800058 	cmpnei	r2,r2,1
   111e4:	10004c1e 	bne	r2,zero,11318 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   111e8:	00800044 	movi	r2,1
   111ec:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   111f0:	00004906 	br	11318 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   111f4:	e0bffc17 	ldw	r2,-16(fp)
   111f8:	10c0020b 	ldhu	r3,8(r2)
   111fc:	e0bff117 	ldw	r2,-60(fp)
   11200:	1080040b 	ldhu	r2,16(r2)
   11204:	1884703a 	and	r2,r3,r2
   11208:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1120c:	e0bff60b 	ldhu	r2,-40(fp)
   11210:	10004326 	beq	r2,zero,11320 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11214:	e0bff60b 	ldhu	r2,-40(fp)
   11218:	100b883a 	mov	r5,r2
   1121c:	e13ff117 	ldw	r4,-60(fp)
   11220:	00117380 	call	11738 <OS_FlagTaskRdy>
   11224:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   11228:	e0bff683 	ldbu	r2,-38(fp)
   1122c:	10800058 	cmpnei	r2,r2,1
   11230:	10003b1e 	bne	r2,zero,11320 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11234:	00800044 	movi	r2,1
   11238:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1123c:	00003806 	br	11320 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11240:	e0bffc17 	ldw	r2,-16(fp)
   11244:	1080020b 	ldhu	r2,8(r2)
   11248:	0084303a 	nor	r2,zero,r2
   1124c:	1007883a 	mov	r3,r2
   11250:	e0bff117 	ldw	r2,-60(fp)
   11254:	1080040b 	ldhu	r2,16(r2)
   11258:	1884703a 	and	r2,r3,r2
   1125c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   11260:	e0bff117 	ldw	r2,-60(fp)
   11264:	1080040b 	ldhu	r2,16(r2)
   11268:	10ffffcc 	andi	r3,r2,65535
   1126c:	e0bff60b 	ldhu	r2,-40(fp)
   11270:	18802d1e 	bne	r3,r2,11328 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11274:	e0bff60b 	ldhu	r2,-40(fp)
   11278:	100b883a 	mov	r5,r2
   1127c:	e13ff117 	ldw	r4,-60(fp)
   11280:	00117380 	call	11738 <OS_FlagTaskRdy>
   11284:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   11288:	e0bff683 	ldbu	r2,-38(fp)
   1128c:	10800058 	cmpnei	r2,r2,1
   11290:	1000251e 	bne	r2,zero,11328 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11294:	00800044 	movi	r2,1
   11298:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1129c:	00002206 	br	11328 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   112a0:	e0bffc17 	ldw	r2,-16(fp)
   112a4:	1080020b 	ldhu	r2,8(r2)
   112a8:	0084303a 	nor	r2,zero,r2
   112ac:	1007883a 	mov	r3,r2
   112b0:	e0bff117 	ldw	r2,-60(fp)
   112b4:	1080040b 	ldhu	r2,16(r2)
   112b8:	1884703a 	and	r2,r3,r2
   112bc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   112c0:	e0bff60b 	ldhu	r2,-40(fp)
   112c4:	10001a26 	beq	r2,zero,11330 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   112c8:	e0bff60b 	ldhu	r2,-40(fp)
   112cc:	100b883a 	mov	r5,r2
   112d0:	e13ff117 	ldw	r4,-60(fp)
   112d4:	00117380 	call	11738 <OS_FlagTaskRdy>
   112d8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   112dc:	e0bff683 	ldbu	r2,-38(fp)
   112e0:	10800058 	cmpnei	r2,r2,1
   112e4:	1000121e 	bne	r2,zero,11330 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   112e8:	00800044 	movi	r2,1
   112ec:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   112f0:	00000f06 	br	11330 <OSFlagPost+0x300>
   112f4:	e0bff317 	ldw	r2,-52(fp)
   112f8:	e0bff515 	stw	r2,-44(fp)
   112fc:	e0bff517 	ldw	r2,-44(fp)
   11300:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   11304:	e0bfff17 	ldw	r2,-4(fp)
   11308:	00c01bc4 	movi	r3,111
   1130c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   11310:	0005883a 	mov	r2,zero
   11314:	00002606 	br	113b0 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   11318:	0001883a 	nop
   1131c:	00000506 	br	11334 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   11320:	0001883a 	nop
   11324:	00000306 	br	11334 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   11328:	0001883a 	nop
   1132c:	00000106 	br	11334 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   11330:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   11334:	e0bff117 	ldw	r2,-60(fp)
   11338:	10800017 	ldw	r2,0(r2)
   1133c:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   11340:	e0bff117 	ldw	r2,-60(fp)
   11344:	103f871e 	bne	r2,zero,11164 <OSFlagPost+0x134>
   11348:	e0bff317 	ldw	r2,-52(fp)
   1134c:	e0bff715 	stw	r2,-36(fp)
   11350:	e0bff717 	ldw	r2,-36(fp)
   11354:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   11358:	e0bff203 	ldbu	r2,-56(fp)
   1135c:	10800058 	cmpnei	r2,r2,1
   11360:	1000011e 	bne	r2,zero,11368 <OSFlagPost+0x338>
        OS_Sched();
   11364:	000f6f40 	call	f6f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11368:	0005303a 	rdctl	r2,status
   1136c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11370:	e0fffa17 	ldw	r3,-24(fp)
   11374:	00bfff84 	movi	r2,-2
   11378:	1884703a 	and	r2,r3,r2
   1137c:	1001703a 	wrctl	status,r2
  
  return context;
   11380:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   11384:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   11388:	e0bffc17 	ldw	r2,-16(fp)
   1138c:	1080020b 	ldhu	r2,8(r2)
   11390:	e0bff90d 	sth	r2,-28(fp)
   11394:	e0bff317 	ldw	r2,-52(fp)
   11398:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1139c:	e0bff817 	ldw	r2,-32(fp)
   113a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   113a4:	e0bfff17 	ldw	r2,-4(fp)
   113a8:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   113ac:	e0bff90b 	ldhu	r2,-28(fp)
}
   113b0:	e037883a 	mov	sp,fp
   113b4:	dfc00117 	ldw	ra,4(sp)
   113b8:	df000017 	ldw	fp,0(sp)
   113bc:	dec00204 	addi	sp,sp,8
   113c0:	f800283a 	ret

000113c4 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   113c4:	defff904 	addi	sp,sp,-28
   113c8:	df000615 	stw	fp,24(sp)
   113cc:	df000604 	addi	fp,sp,24
   113d0:	e13ffe15 	stw	r4,-8(fp)
   113d4:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   113d8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   113dc:	e0bfff17 	ldw	r2,-4(fp)
   113e0:	1000021e 	bne	r2,zero,113ec <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   113e4:	0005883a 	mov	r2,zero
   113e8:	00002306 	br	11478 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   113ec:	e0bffe17 	ldw	r2,-8(fp)
   113f0:	1000051e 	bne	r2,zero,11408 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   113f4:	e0bfff17 	ldw	r2,-4(fp)
   113f8:	00c01b84 	movi	r3,110
   113fc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11400:	0005883a 	mov	r2,zero
   11404:	00001c06 	br	11478 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   11408:	e0bffe17 	ldw	r2,-8(fp)
   1140c:	10800003 	ldbu	r2,0(r2)
   11410:	10803fcc 	andi	r2,r2,255
   11414:	10800160 	cmpeqi	r2,r2,5
   11418:	1000051e 	bne	r2,zero,11430 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1141c:	e0bfff17 	ldw	r2,-4(fp)
   11420:	00c00044 	movi	r3,1
   11424:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11428:	0005883a 	mov	r2,zero
   1142c:	00001206 	br	11478 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11430:	0005303a 	rdctl	r2,status
   11434:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11438:	e0fffc17 	ldw	r3,-16(fp)
   1143c:	00bfff84 	movi	r2,-2
   11440:	1884703a 	and	r2,r3,r2
   11444:	1001703a 	wrctl	status,r2
  
  return context;
   11448:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1144c:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   11450:	e0bffe17 	ldw	r2,-8(fp)
   11454:	1080020b 	ldhu	r2,8(r2)
   11458:	e0bffb0d 	sth	r2,-20(fp)
   1145c:	e0bffa17 	ldw	r2,-24(fp)
   11460:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11464:	e0bffd17 	ldw	r2,-12(fp)
   11468:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1146c:	e0bfff17 	ldw	r2,-4(fp)
   11470:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   11474:	e0bffb0b 	ldhu	r2,-20(fp)
}
   11478:	e037883a 	mov	sp,fp
   1147c:	df000017 	ldw	fp,0(sp)
   11480:	dec00104 	addi	sp,sp,4
   11484:	f800283a 	ret

00011488 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   11488:	defff804 	addi	sp,sp,-32
   1148c:	df000715 	stw	fp,28(sp)
   11490:	df000704 	addi	fp,sp,28
   11494:	e13ffb15 	stw	r4,-20(fp)
   11498:	e17ffc15 	stw	r5,-16(fp)
   1149c:	3009883a 	mov	r4,r6
   114a0:	3807883a 	mov	r3,r7
   114a4:	e0800117 	ldw	r2,4(fp)
   114a8:	e13ffd0d 	sth	r4,-12(fp)
   114ac:	e0fffe05 	stb	r3,-8(fp)
   114b0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   114b4:	008000b4 	movhi	r2,2
   114b8:	10b66904 	addi	r2,r2,-9820
   114bc:	10c00017 	ldw	r3,0(r2)
   114c0:	008000b4 	movhi	r2,2
   114c4:	10b66904 	addi	r2,r2,-9820
   114c8:	10800017 	ldw	r2,0(r2)
   114cc:	10800c03 	ldbu	r2,48(r2)
   114d0:	10800814 	ori	r2,r2,32
   114d4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   114d8:	008000b4 	movhi	r2,2
   114dc:	10b66904 	addi	r2,r2,-9820
   114e0:	10800017 	ldw	r2,0(r2)
   114e4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   114e8:	008000b4 	movhi	r2,2
   114ec:	10b66904 	addi	r2,r2,-9820
   114f0:	10800017 	ldw	r2,0(r2)
   114f4:	e0ffff0b 	ldhu	r3,-4(fp)
   114f8:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   114fc:	008000b4 	movhi	r2,2
   11500:	10b66904 	addi	r2,r2,-9820
   11504:	10800017 	ldw	r2,0(r2)
   11508:	e0fffc17 	ldw	r3,-16(fp)
   1150c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   11510:	e0bffc17 	ldw	r2,-16(fp)
   11514:	e0fffd0b 	ldhu	r3,-12(fp)
   11518:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   1151c:	e0bffc17 	ldw	r2,-16(fp)
   11520:	e0fffe03 	ldbu	r3,-8(fp)
   11524:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   11528:	008000b4 	movhi	r2,2
   1152c:	10b66904 	addi	r2,r2,-9820
   11530:	10c00017 	ldw	r3,0(r2)
   11534:	e0bffc17 	ldw	r2,-16(fp)
   11538:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   1153c:	e0bffb17 	ldw	r2,-20(fp)
   11540:	10c00117 	ldw	r3,4(r2)
   11544:	e0bffc17 	ldw	r2,-16(fp)
   11548:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   1154c:	e0bffc17 	ldw	r2,-16(fp)
   11550:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   11554:	e0bffc17 	ldw	r2,-16(fp)
   11558:	e0fffb17 	ldw	r3,-20(fp)
   1155c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   11560:	e0bffb17 	ldw	r2,-20(fp)
   11564:	10800117 	ldw	r2,4(r2)
   11568:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   1156c:	e0bff917 	ldw	r2,-28(fp)
   11570:	10000326 	beq	r2,zero,11580 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   11574:	e0bff917 	ldw	r2,-28(fp)
   11578:	e0fffc17 	ldw	r3,-16(fp)
   1157c:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   11580:	e0bffb17 	ldw	r2,-20(fp)
   11584:	e0fffc17 	ldw	r3,-16(fp)
   11588:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   1158c:	008000b4 	movhi	r2,2
   11590:	10b66904 	addi	r2,r2,-9820
   11594:	10800017 	ldw	r2,0(r2)
   11598:	10800d03 	ldbu	r2,52(r2)
   1159c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   115a0:	e0fffa03 	ldbu	r3,-24(fp)
   115a4:	e13ffa03 	ldbu	r4,-24(fp)
   115a8:	008000b4 	movhi	r2,2
   115ac:	10b66644 	addi	r2,r2,-9831
   115b0:	1105883a 	add	r2,r2,r4
   115b4:	10800003 	ldbu	r2,0(r2)
   115b8:	1009883a 	mov	r4,r2
   115bc:	008000b4 	movhi	r2,2
   115c0:	10b66904 	addi	r2,r2,-9820
   115c4:	10800017 	ldw	r2,0(r2)
   115c8:	10800d43 	ldbu	r2,53(r2)
   115cc:	0084303a 	nor	r2,zero,r2
   115d0:	2084703a 	and	r2,r4,r2
   115d4:	1009883a 	mov	r4,r2
   115d8:	008000b4 	movhi	r2,2
   115dc:	10b66644 	addi	r2,r2,-9831
   115e0:	10c5883a 	add	r2,r2,r3
   115e4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   115e8:	e0fffa03 	ldbu	r3,-24(fp)
   115ec:	008000b4 	movhi	r2,2
   115f0:	10b66644 	addi	r2,r2,-9831
   115f4:	10c5883a 	add	r2,r2,r3
   115f8:	10800003 	ldbu	r2,0(r2)
   115fc:	10803fcc 	andi	r2,r2,255
   11600:	10000e1e 	bne	r2,zero,1163c <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   11604:	008000b4 	movhi	r2,2
   11608:	10b66904 	addi	r2,r2,-9820
   1160c:	10800017 	ldw	r2,0(r2)
   11610:	10800d83 	ldbu	r2,54(r2)
   11614:	0084303a 	nor	r2,zero,r2
   11618:	1007883a 	mov	r3,r2
   1161c:	008000b4 	movhi	r2,2
   11620:	10b66604 	addi	r2,r2,-9832
   11624:	10800003 	ldbu	r2,0(r2)
   11628:	1884703a 	and	r2,r3,r2
   1162c:	1007883a 	mov	r3,r2
   11630:	008000b4 	movhi	r2,2
   11634:	10b66604 	addi	r2,r2,-9832
   11638:	10c00005 	stb	r3,0(r2)
    }
}
   1163c:	0001883a 	nop
   11640:	e037883a 	mov	sp,fp
   11644:	df000017 	ldw	fp,0(sp)
   11648:	dec00104 	addi	sp,sp,4
   1164c:	f800283a 	ret

00011650 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   11650:	defffb04 	addi	sp,sp,-20
   11654:	dfc00415 	stw	ra,16(sp)
   11658:	df000315 	stw	fp,12(sp)
   1165c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   11660:	0140dc04 	movi	r5,880
   11664:	010000b4 	movhi	r4,2
   11668:	21367f04 	addi	r4,r4,-9732
   1166c:	000f6380 	call	f638 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   11670:	008000b4 	movhi	r2,2
   11674:	10b67f04 	addi	r2,r2,-9732
   11678:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   1167c:	008000b4 	movhi	r2,2
   11680:	10b68a04 	addi	r2,r2,-9688
   11684:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   11688:	e03ffd0d 	sth	zero,-12(fp)
   1168c:	00001306 	br	116dc <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11690:	e0bffe17 	ldw	r2,-8(fp)
   11694:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   11698:	e0bffe17 	ldw	r2,-8(fp)
   1169c:	e0ffff17 	ldw	r3,-4(fp)
   116a0:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   116a4:	e0bffe17 	ldw	r2,-8(fp)
   116a8:	00c00fc4 	movi	r3,63
   116ac:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   116b0:	e0bffe17 	ldw	r2,-8(fp)
   116b4:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   116b8:	e0bffe17 	ldw	r2,-8(fp)
   116bc:	10800b04 	addi	r2,r2,44
   116c0:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   116c4:	e0bfff17 	ldw	r2,-4(fp)
   116c8:	10800b04 	addi	r2,r2,44
   116cc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   116d0:	e0bffd0b 	ldhu	r2,-12(fp)
   116d4:	10800044 	addi	r2,r2,1
   116d8:	e0bffd0d 	sth	r2,-12(fp)
   116dc:	e0bffd0b 	ldhu	r2,-12(fp)
   116e0:	108004f0 	cmpltui	r2,r2,19
   116e4:	103fea1e 	bne	r2,zero,11690 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   116e8:	e0bffe17 	ldw	r2,-8(fp)
   116ec:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   116f0:	e0bffe17 	ldw	r2,-8(fp)
   116f4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   116f8:	e0bffe17 	ldw	r2,-8(fp)
   116fc:	00c00fc4 	movi	r3,63
   11700:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11704:	e0bffe17 	ldw	r2,-8(fp)
   11708:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   1170c:	008000b4 	movhi	r2,2
   11710:	10b66b04 	addi	r2,r2,-9812
   11714:	00c000b4 	movhi	r3,2
   11718:	18f67f04 	addi	r3,r3,-9732
   1171c:	10c00015 	stw	r3,0(r2)
#endif
}
   11720:	0001883a 	nop
   11724:	e037883a 	mov	sp,fp
   11728:	dfc00117 	ldw	ra,4(sp)
   1172c:	df000017 	ldw	fp,0(sp)
   11730:	dec00204 	addi	sp,sp,8
   11734:	f800283a 	ret

00011738 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   11738:	defffa04 	addi	sp,sp,-24
   1173c:	dfc00515 	stw	ra,20(sp)
   11740:	df000415 	stw	fp,16(sp)
   11744:	df000404 	addi	fp,sp,16
   11748:	e13ffe15 	stw	r4,-8(fp)
   1174c:	2805883a 	mov	r2,r5
   11750:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   11754:	e0bffe17 	ldw	r2,-8(fp)
   11758:	10800217 	ldw	r2,8(r2)
   1175c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   11760:	e0bffd17 	ldw	r2,-12(fp)
   11764:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   11768:	e0bffd17 	ldw	r2,-12(fp)
   1176c:	e0ffff0b 	ldhu	r3,-4(fp)
   11770:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   11774:	e0bffd17 	ldw	r2,-12(fp)
   11778:	10c00c03 	ldbu	r3,48(r2)
   1177c:	00bff7c4 	movi	r2,-33
   11780:	1884703a 	and	r2,r3,r2
   11784:	1007883a 	mov	r3,r2
   11788:	e0bffd17 	ldw	r2,-12(fp)
   1178c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   11790:	e0bffd17 	ldw	r2,-12(fp)
   11794:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   11798:	e0bffd17 	ldw	r2,-12(fp)
   1179c:	10800c03 	ldbu	r2,48(r2)
   117a0:	10803fcc 	andi	r2,r2,255
   117a4:	10001f1e 	bne	r2,zero,11824 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   117a8:	e0bffd17 	ldw	r2,-12(fp)
   117ac:	10c00d83 	ldbu	r3,54(r2)
   117b0:	008000b4 	movhi	r2,2
   117b4:	10b66604 	addi	r2,r2,-9832
   117b8:	10800003 	ldbu	r2,0(r2)
   117bc:	1884b03a 	or	r2,r3,r2
   117c0:	1007883a 	mov	r3,r2
   117c4:	008000b4 	movhi	r2,2
   117c8:	10b66604 	addi	r2,r2,-9832
   117cc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   117d0:	e0bffd17 	ldw	r2,-12(fp)
   117d4:	10800d03 	ldbu	r2,52(r2)
   117d8:	10c03fcc 	andi	r3,r2,255
   117dc:	e0bffd17 	ldw	r2,-12(fp)
   117e0:	10800d03 	ldbu	r2,52(r2)
   117e4:	11003fcc 	andi	r4,r2,255
   117e8:	008000b4 	movhi	r2,2
   117ec:	10b66644 	addi	r2,r2,-9831
   117f0:	1105883a 	add	r2,r2,r4
   117f4:	11000003 	ldbu	r4,0(r2)
   117f8:	e0bffd17 	ldw	r2,-12(fp)
   117fc:	10800d43 	ldbu	r2,53(r2)
   11800:	2084b03a 	or	r2,r4,r2
   11804:	1009883a 	mov	r4,r2
   11808:	008000b4 	movhi	r2,2
   1180c:	10b66644 	addi	r2,r2,-9831
   11810:	10c5883a 	add	r2,r2,r3
   11814:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   11818:	00800044 	movi	r2,1
   1181c:	e0bffc05 	stb	r2,-16(fp)
   11820:	00000106 	br	11828 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   11824:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   11828:	e13ffe17 	ldw	r4,-8(fp)
   1182c:	00118480 	call	11848 <OS_FlagUnlink>
    return (sched);
   11830:	e0bffc03 	ldbu	r2,-16(fp)
}
   11834:	e037883a 	mov	sp,fp
   11838:	dfc00117 	ldw	ra,4(sp)
   1183c:	df000017 	ldw	fp,0(sp)
   11840:	dec00204 	addi	sp,sp,8
   11844:	f800283a 	ret

00011848 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   11848:	defffa04 	addi	sp,sp,-24
   1184c:	df000515 	stw	fp,20(sp)
   11850:	df000504 	addi	fp,sp,20
   11854:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   11858:	e0bfff17 	ldw	r2,-4(fp)
   1185c:	10800117 	ldw	r2,4(r2)
   11860:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   11864:	e0bfff17 	ldw	r2,-4(fp)
   11868:	10800017 	ldw	r2,0(r2)
   1186c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   11870:	e0bffb17 	ldw	r2,-20(fp)
   11874:	10000b1e 	bne	r2,zero,118a4 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   11878:	e0bfff17 	ldw	r2,-4(fp)
   1187c:	10800317 	ldw	r2,12(r2)
   11880:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   11884:	e0bffd17 	ldw	r2,-12(fp)
   11888:	e0fffc17 	ldw	r3,-16(fp)
   1188c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   11890:	e0bffc17 	ldw	r2,-16(fp)
   11894:	10000b26 	beq	r2,zero,118c4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   11898:	e0bffc17 	ldw	r2,-16(fp)
   1189c:	10000115 	stw	zero,4(r2)
   118a0:	00000806 	br	118c4 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   118a4:	e0bffb17 	ldw	r2,-20(fp)
   118a8:	e0fffc17 	ldw	r3,-16(fp)
   118ac:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   118b0:	e0bffc17 	ldw	r2,-16(fp)
   118b4:	10000326 	beq	r2,zero,118c4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   118b8:	e0bffc17 	ldw	r2,-16(fp)
   118bc:	e0fffb17 	ldw	r3,-20(fp)
   118c0:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   118c4:	e0bfff17 	ldw	r2,-4(fp)
   118c8:	10800217 	ldw	r2,8(r2)
   118cc:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   118d0:	e0bffe17 	ldw	r2,-8(fp)
   118d4:	10000a15 	stw	zero,40(r2)
#endif
}
   118d8:	0001883a 	nop
   118dc:	e037883a 	mov	sp,fp
   118e0:	df000017 	ldw	fp,0(sp)
   118e4:	dec00104 	addi	sp,sp,4
   118e8:	f800283a 	ret

000118ec <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   118ec:	defff404 	addi	sp,sp,-48
   118f0:	df000b15 	stw	fp,44(sp)
   118f4:	df000b04 	addi	fp,sp,44
   118f8:	e13ffc15 	stw	r4,-16(fp)
   118fc:	e17ffd15 	stw	r5,-12(fp)
   11900:	e1bffe15 	stw	r6,-8(fp)
   11904:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11908:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1190c:	e0bfff17 	ldw	r2,-4(fp)
   11910:	1000021e 	bne	r2,zero,1191c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   11914:	0005883a 	mov	r2,zero
   11918:	00006d06 	br	11ad0 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   1191c:	e0bffc17 	ldw	r2,-16(fp)
   11920:	1000051e 	bne	r2,zero,11938 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11924:	e0bfff17 	ldw	r2,-4(fp)
   11928:	00c01884 	movi	r3,98
   1192c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11930:	0005883a 	mov	r2,zero
   11934:	00006606 	br	11ad0 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   11938:	e0bffc17 	ldw	r2,-16(fp)
   1193c:	108000cc 	andi	r2,r2,3
   11940:	10000526 	beq	r2,zero,11958 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11944:	e0bfff17 	ldw	r2,-4(fp)
   11948:	00c01884 	movi	r3,98
   1194c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11950:	0005883a 	mov	r2,zero
   11954:	00005e06 	br	11ad0 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   11958:	e0bffd17 	ldw	r2,-12(fp)
   1195c:	108000a8 	cmpgeui	r2,r2,2
   11960:	1000051e 	bne	r2,zero,11978 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   11964:	e0bfff17 	ldw	r2,-4(fp)
   11968:	00c016c4 	movi	r3,91
   1196c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11970:	0005883a 	mov	r2,zero
   11974:	00005606 	br	11ad0 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   11978:	e0bffe17 	ldw	r2,-8(fp)
   1197c:	10800128 	cmpgeui	r2,r2,4
   11980:	1000051e 	bne	r2,zero,11998 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   11984:	e0bfff17 	ldw	r2,-4(fp)
   11988:	00c01704 	movi	r3,92
   1198c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11990:	0005883a 	mov	r2,zero
   11994:	00004e06 	br	11ad0 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11998:	0005303a 	rdctl	r2,status
   1199c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119a0:	e0fffb17 	ldw	r3,-20(fp)
   119a4:	00bfff84 	movi	r2,-2
   119a8:	1884703a 	and	r2,r3,r2
   119ac:	1001703a 	wrctl	status,r2
  
  return context;
   119b0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   119b4:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   119b8:	008000b4 	movhi	r2,2
   119bc:	10b66304 	addi	r2,r2,-9844
   119c0:	10800017 	ldw	r2,0(r2)
   119c4:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   119c8:	008000b4 	movhi	r2,2
   119cc:	10b66304 	addi	r2,r2,-9844
   119d0:	10800017 	ldw	r2,0(r2)
   119d4:	10000726 	beq	r2,zero,119f4 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   119d8:	008000b4 	movhi	r2,2
   119dc:	10b66304 	addi	r2,r2,-9844
   119e0:	10800017 	ldw	r2,0(r2)
   119e4:	10c00117 	ldw	r3,4(r2)
   119e8:	008000b4 	movhi	r2,2
   119ec:	10b66304 	addi	r2,r2,-9844
   119f0:	10c00015 	stw	r3,0(r2)
   119f4:	e0bff817 	ldw	r2,-32(fp)
   119f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119fc:	e0bff917 	ldw	r2,-28(fp)
   11a00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   11a04:	e0bffa17 	ldw	r2,-24(fp)
   11a08:	1000051e 	bne	r2,zero,11a20 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   11a0c:	e0bfff17 	ldw	r2,-4(fp)
   11a10:	00c01684 	movi	r3,90
   11a14:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11a18:	0005883a 	mov	r2,zero
   11a1c:	00002c06 	br	11ad0 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   11a20:	e0bffc17 	ldw	r2,-16(fp)
   11a24:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   11a28:	e0fffc17 	ldw	r3,-16(fp)
   11a2c:	e0bffe17 	ldw	r2,-8(fp)
   11a30:	1885883a 	add	r2,r3,r2
   11a34:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   11a38:	e03ff715 	stw	zero,-36(fp)
   11a3c:	00000c06 	br	11a70 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   11a40:	e0bff617 	ldw	r2,-40(fp)
   11a44:	e0fff517 	ldw	r3,-44(fp)
   11a48:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   11a4c:	e0bff517 	ldw	r2,-44(fp)
   11a50:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   11a54:	e0fff517 	ldw	r3,-44(fp)
   11a58:	e0bffe17 	ldw	r2,-8(fp)
   11a5c:	1885883a 	add	r2,r3,r2
   11a60:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   11a64:	e0bff717 	ldw	r2,-36(fp)
   11a68:	10800044 	addi	r2,r2,1
   11a6c:	e0bff715 	stw	r2,-36(fp)
   11a70:	e0bffd17 	ldw	r2,-12(fp)
   11a74:	10bfffc4 	addi	r2,r2,-1
   11a78:	e0fff717 	ldw	r3,-36(fp)
   11a7c:	18bff036 	bltu	r3,r2,11a40 <OSMemCreate+0x154>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   11a80:	e0bff617 	ldw	r2,-40(fp)
   11a84:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   11a88:	e0bffa17 	ldw	r2,-24(fp)
   11a8c:	e0fffc17 	ldw	r3,-16(fp)
   11a90:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   11a94:	e0bffa17 	ldw	r2,-24(fp)
   11a98:	e0fffc17 	ldw	r3,-16(fp)
   11a9c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   11aa0:	e0bffa17 	ldw	r2,-24(fp)
   11aa4:	e0fffd17 	ldw	r3,-12(fp)
   11aa8:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   11aac:	e0bffa17 	ldw	r2,-24(fp)
   11ab0:	e0fffd17 	ldw	r3,-12(fp)
   11ab4:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   11ab8:	e0bffa17 	ldw	r2,-24(fp)
   11abc:	e0fffe17 	ldw	r3,-8(fp)
   11ac0:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   11ac4:	e0bfff17 	ldw	r2,-4(fp)
   11ac8:	10000005 	stb	zero,0(r2)
    return (pmem);
   11acc:	e0bffa17 	ldw	r2,-24(fp)
}
   11ad0:	e037883a 	mov	sp,fp
   11ad4:	df000017 	ldw	fp,0(sp)
   11ad8:	dec00104 	addi	sp,sp,4
   11adc:	f800283a 	ret

00011ae0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   11ae0:	defff804 	addi	sp,sp,-32
   11ae4:	df000715 	stw	fp,28(sp)
   11ae8:	df000704 	addi	fp,sp,28
   11aec:	e13ffe15 	stw	r4,-8(fp)
   11af0:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11af4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11af8:	e0bfff17 	ldw	r2,-4(fp)
   11afc:	1000021e 	bne	r2,zero,11b08 <OSMemGet+0x28>
        return ((void *)0);
   11b00:	0005883a 	mov	r2,zero
   11b04:	00002e06 	br	11bc0 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   11b08:	e0bffe17 	ldw	r2,-8(fp)
   11b0c:	1000051e 	bne	r2,zero,11b24 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11b10:	e0bfff17 	ldw	r2,-4(fp)
   11b14:	00c01804 	movi	r3,96
   11b18:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11b1c:	0005883a 	mov	r2,zero
   11b20:	00002706 	br	11bc0 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b24:	0005303a 	rdctl	r2,status
   11b28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b2c:	e0fffd17 	ldw	r3,-12(fp)
   11b30:	00bfff84 	movi	r2,-2
   11b34:	1884703a 	and	r2,r3,r2
   11b38:	1001703a 	wrctl	status,r2
  
  return context;
   11b3c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11b40:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   11b44:	e0bffe17 	ldw	r2,-8(fp)
   11b48:	10800417 	ldw	r2,16(r2)
   11b4c:	10001426 	beq	r2,zero,11ba0 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   11b50:	e0bffe17 	ldw	r2,-8(fp)
   11b54:	10800117 	ldw	r2,4(r2)
   11b58:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   11b5c:	e0bffb17 	ldw	r2,-20(fp)
   11b60:	10c00017 	ldw	r3,0(r2)
   11b64:	e0bffe17 	ldw	r2,-8(fp)
   11b68:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   11b6c:	e0bffe17 	ldw	r2,-8(fp)
   11b70:	10800417 	ldw	r2,16(r2)
   11b74:	10ffffc4 	addi	r3,r2,-1
   11b78:	e0bffe17 	ldw	r2,-8(fp)
   11b7c:	10c00415 	stw	r3,16(r2)
   11b80:	e0bff917 	ldw	r2,-28(fp)
   11b84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b88:	e0bffa17 	ldw	r2,-24(fp)
   11b8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   11b90:	e0bfff17 	ldw	r2,-4(fp)
   11b94:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   11b98:	e0bffb17 	ldw	r2,-20(fp)
   11b9c:	00000806 	br	11bc0 <OSMemGet+0xe0>
   11ba0:	e0bff917 	ldw	r2,-28(fp)
   11ba4:	e0bffc15 	stw	r2,-16(fp)
   11ba8:	e0bffc17 	ldw	r2,-16(fp)
   11bac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   11bb0:	e0bfff17 	ldw	r2,-4(fp)
   11bb4:	00c01744 	movi	r3,93
   11bb8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   11bbc:	0005883a 	mov	r2,zero
}
   11bc0:	e037883a 	mov	sp,fp
   11bc4:	df000017 	ldw	fp,0(sp)
   11bc8:	dec00104 	addi	sp,sp,4
   11bcc:	f800283a 	ret

00011bd0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   11bd0:	defff704 	addi	sp,sp,-36
   11bd4:	dfc00815 	stw	ra,32(sp)
   11bd8:	df000715 	stw	fp,28(sp)
   11bdc:	df000704 	addi	fp,sp,28
   11be0:	e13ffd15 	stw	r4,-12(fp)
   11be4:	e17ffe15 	stw	r5,-8(fp)
   11be8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11bec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11bf0:	e0bfff17 	ldw	r2,-4(fp)
   11bf4:	1000021e 	bne	r2,zero,11c00 <OSMemNameGet+0x30>
        return (0);
   11bf8:	0005883a 	mov	r2,zero
   11bfc:	00002d06 	br	11cb4 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   11c00:	e0bffd17 	ldw	r2,-12(fp)
   11c04:	1000051e 	bne	r2,zero,11c1c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11c08:	e0bfff17 	ldw	r2,-4(fp)
   11c0c:	00c01804 	movi	r3,96
   11c10:	10c00005 	stb	r3,0(r2)
        return (0);
   11c14:	0005883a 	mov	r2,zero
   11c18:	00002606 	br	11cb4 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11c1c:	e0bffe17 	ldw	r2,-8(fp)
   11c20:	1000051e 	bne	r2,zero,11c38 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   11c24:	e0bfff17 	ldw	r2,-4(fp)
   11c28:	00c00304 	movi	r3,12
   11c2c:	10c00005 	stb	r3,0(r2)
        return (0);
   11c30:	0005883a 	mov	r2,zero
   11c34:	00001f06 	br	11cb4 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11c38:	008000b4 	movhi	r2,2
   11c3c:	10b66804 	addi	r2,r2,-9824
   11c40:	10800003 	ldbu	r2,0(r2)
   11c44:	10803fcc 	andi	r2,r2,255
   11c48:	10000526 	beq	r2,zero,11c60 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   11c4c:	e0bfff17 	ldw	r2,-4(fp)
   11c50:	00c00444 	movi	r3,17
   11c54:	10c00005 	stb	r3,0(r2)
        return (0);
   11c58:	0005883a 	mov	r2,zero
   11c5c:	00001506 	br	11cb4 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c60:	0005303a 	rdctl	r2,status
   11c64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c68:	e0fffb17 	ldw	r3,-20(fp)
   11c6c:	00bfff84 	movi	r2,-2
   11c70:	1884703a 	and	r2,r3,r2
   11c74:	1001703a 	wrctl	status,r2
  
  return context;
   11c78:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   11c7c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   11c80:	e0bffd17 	ldw	r2,-12(fp)
   11c84:	10800504 	addi	r2,r2,20
   11c88:	100b883a 	mov	r5,r2
   11c8c:	e13ffe17 	ldw	r4,-8(fp)
   11c90:	000f8980 	call	f898 <OS_StrCopy>
   11c94:	e0bffa05 	stb	r2,-24(fp)
   11c98:	e0bff917 	ldw	r2,-28(fp)
   11c9c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ca0:	e0bffc17 	ldw	r2,-16(fp)
   11ca4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11ca8:	e0bfff17 	ldw	r2,-4(fp)
   11cac:	10000005 	stb	zero,0(r2)
    return (len);
   11cb0:	e0bffa03 	ldbu	r2,-24(fp)
}
   11cb4:	e037883a 	mov	sp,fp
   11cb8:	dfc00117 	ldw	ra,4(sp)
   11cbc:	df000017 	ldw	fp,0(sp)
   11cc0:	dec00204 	addi	sp,sp,8
   11cc4:	f800283a 	ret

00011cc8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   11cc8:	defff604 	addi	sp,sp,-40
   11ccc:	dfc00915 	stw	ra,36(sp)
   11cd0:	df000815 	stw	fp,32(sp)
   11cd4:	df000804 	addi	fp,sp,32
   11cd8:	e13ffd15 	stw	r4,-12(fp)
   11cdc:	e17ffe15 	stw	r5,-8(fp)
   11ce0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11ce4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11ce8:	e0bfff17 	ldw	r2,-4(fp)
   11cec:	10003726 	beq	r2,zero,11dcc <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   11cf0:	e0bffd17 	ldw	r2,-12(fp)
   11cf4:	1000041e 	bne	r2,zero,11d08 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11cf8:	e0bfff17 	ldw	r2,-4(fp)
   11cfc:	00c01804 	movi	r3,96
   11d00:	10c00005 	stb	r3,0(r2)
        return;
   11d04:	00003206 	br	11dd0 <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11d08:	e0bffe17 	ldw	r2,-8(fp)
   11d0c:	1000041e 	bne	r2,zero,11d20 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   11d10:	e0bfff17 	ldw	r2,-4(fp)
   11d14:	00c00304 	movi	r3,12
   11d18:	10c00005 	stb	r3,0(r2)
        return;
   11d1c:	00002c06 	br	11dd0 <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11d20:	008000b4 	movhi	r2,2
   11d24:	10b66804 	addi	r2,r2,-9824
   11d28:	10800003 	ldbu	r2,0(r2)
   11d2c:	10803fcc 	andi	r2,r2,255
   11d30:	10000426 	beq	r2,zero,11d44 <OSMemNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
   11d34:	e0bfff17 	ldw	r2,-4(fp)
   11d38:	00c00484 	movi	r3,18
   11d3c:	10c00005 	stb	r3,0(r2)
        return;
   11d40:	00002306 	br	11dd0 <OSMemNameSet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d44:	0005303a 	rdctl	r2,status
   11d48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d4c:	e0fffc17 	ldw	r3,-16(fp)
   11d50:	00bfff84 	movi	r2,-2
   11d54:	1884703a 	and	r2,r3,r2
   11d58:	1001703a 	wrctl	status,r2
  
  return context;
   11d5c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11d60:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   11d64:	e13ffe17 	ldw	r4,-8(fp)
   11d68:	000f90c0 	call	f90c <OS_StrLen>
   11d6c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   11d70:	e0bffa03 	ldbu	r2,-24(fp)
   11d74:	10800830 	cmpltui	r2,r2,32
   11d78:	1000081e 	bne	r2,zero,11d9c <OSMemNameSet+0xd4>
   11d7c:	e0bff817 	ldw	r2,-32(fp)
   11d80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11d84:	e0bff917 	ldw	r2,-28(fp)
   11d88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   11d8c:	e0bfff17 	ldw	r2,-4(fp)
   11d90:	00c018c4 	movi	r3,99
   11d94:	10c00005 	stb	r3,0(r2)
        return;
   11d98:	00000d06 	br	11dd0 <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   11d9c:	e0bffd17 	ldw	r2,-12(fp)
   11da0:	10800504 	addi	r2,r2,20
   11da4:	e17ffe17 	ldw	r5,-8(fp)
   11da8:	1009883a 	mov	r4,r2
   11dac:	000f8980 	call	f898 <OS_StrCopy>
   11db0:	e0bff817 	ldw	r2,-32(fp)
   11db4:	e0bffb15 	stw	r2,-20(fp)
   11db8:	e0bffb17 	ldw	r2,-20(fp)
   11dbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11dc0:	e0bfff17 	ldw	r2,-4(fp)
   11dc4:	10000005 	stb	zero,0(r2)
   11dc8:	00000106 	br	11dd0 <OSMemNameSet+0x108>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   11dcc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   11dd0:	e037883a 	mov	sp,fp
   11dd4:	dfc00117 	ldw	ra,4(sp)
   11dd8:	df000017 	ldw	fp,0(sp)
   11ddc:	dec00204 	addi	sp,sp,8
   11de0:	f800283a 	ret

00011de4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   11de4:	defff904 	addi	sp,sp,-28
   11de8:	df000615 	stw	fp,24(sp)
   11dec:	df000604 	addi	fp,sp,24
   11df0:	e13ffe15 	stw	r4,-8(fp)
   11df4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11df8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11dfc:	e0bffe17 	ldw	r2,-8(fp)
   11e00:	1000021e 	bne	r2,zero,11e0c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11e04:	00801804 	movi	r2,96
   11e08:	00002806 	br	11eac <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   11e0c:	e0bfff17 	ldw	r2,-4(fp)
   11e10:	1000021e 	bne	r2,zero,11e1c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   11e14:	008017c4 	movi	r2,95
   11e18:	00002406 	br	11eac <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e1c:	0005303a 	rdctl	r2,status
   11e20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e24:	e0fffd17 	ldw	r3,-12(fp)
   11e28:	00bfff84 	movi	r2,-2
   11e2c:	1884703a 	and	r2,r3,r2
   11e30:	1001703a 	wrctl	status,r2
  
  return context;
   11e34:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11e38:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   11e3c:	e0bffe17 	ldw	r2,-8(fp)
   11e40:	10c00417 	ldw	r3,16(r2)
   11e44:	e0bffe17 	ldw	r2,-8(fp)
   11e48:	10800317 	ldw	r2,12(r2)
   11e4c:	18800636 	bltu	r3,r2,11e68 <OSMemPut+0x84>
   11e50:	e0bffa17 	ldw	r2,-24(fp)
   11e54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e58:	e0bffb17 	ldw	r2,-20(fp)
   11e5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   11e60:	00801784 	movi	r2,94
   11e64:	00001106 	br	11eac <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   11e68:	e0bffe17 	ldw	r2,-8(fp)
   11e6c:	10c00117 	ldw	r3,4(r2)
   11e70:	e0bfff17 	ldw	r2,-4(fp)
   11e74:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   11e78:	e0bffe17 	ldw	r2,-8(fp)
   11e7c:	e0ffff17 	ldw	r3,-4(fp)
   11e80:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   11e84:	e0bffe17 	ldw	r2,-8(fp)
   11e88:	10800417 	ldw	r2,16(r2)
   11e8c:	10c00044 	addi	r3,r2,1
   11e90:	e0bffe17 	ldw	r2,-8(fp)
   11e94:	10c00415 	stw	r3,16(r2)
   11e98:	e0bffa17 	ldw	r2,-24(fp)
   11e9c:	e0bffc15 	stw	r2,-16(fp)
   11ea0:	e0bffc17 	ldw	r2,-16(fp)
   11ea4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   11ea8:	0005883a 	mov	r2,zero
}
   11eac:	e037883a 	mov	sp,fp
   11eb0:	df000017 	ldw	fp,0(sp)
   11eb4:	dec00104 	addi	sp,sp,4
   11eb8:	f800283a 	ret

00011ebc <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   11ebc:	defffa04 	addi	sp,sp,-24
   11ec0:	df000515 	stw	fp,20(sp)
   11ec4:	df000504 	addi	fp,sp,20
   11ec8:	e13ffe15 	stw	r4,-8(fp)
   11ecc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11ed0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11ed4:	e0bffe17 	ldw	r2,-8(fp)
   11ed8:	1000021e 	bne	r2,zero,11ee4 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11edc:	00801804 	movi	r2,96
   11ee0:	00002c06 	br	11f94 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   11ee4:	e0bfff17 	ldw	r2,-4(fp)
   11ee8:	1000021e 	bne	r2,zero,11ef4 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   11eec:	00801844 	movi	r2,97
   11ef0:	00002806 	br	11f94 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ef4:	0005303a 	rdctl	r2,status
   11ef8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11efc:	e0fffc17 	ldw	r3,-16(fp)
   11f00:	00bfff84 	movi	r2,-2
   11f04:	1884703a 	and	r2,r3,r2
   11f08:	1001703a 	wrctl	status,r2
  
  return context;
   11f0c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11f10:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   11f14:	e0bffe17 	ldw	r2,-8(fp)
   11f18:	10c00017 	ldw	r3,0(r2)
   11f1c:	e0bfff17 	ldw	r2,-4(fp)
   11f20:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   11f24:	e0bffe17 	ldw	r2,-8(fp)
   11f28:	10c00117 	ldw	r3,4(r2)
   11f2c:	e0bfff17 	ldw	r2,-4(fp)
   11f30:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   11f34:	e0bffe17 	ldw	r2,-8(fp)
   11f38:	10c00217 	ldw	r3,8(r2)
   11f3c:	e0bfff17 	ldw	r2,-4(fp)
   11f40:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   11f44:	e0bffe17 	ldw	r2,-8(fp)
   11f48:	10c00317 	ldw	r3,12(r2)
   11f4c:	e0bfff17 	ldw	r2,-4(fp)
   11f50:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   11f54:	e0bffe17 	ldw	r2,-8(fp)
   11f58:	10c00417 	ldw	r3,16(r2)
   11f5c:	e0bfff17 	ldw	r2,-4(fp)
   11f60:	10c00415 	stw	r3,16(r2)
   11f64:	e0bffb17 	ldw	r2,-20(fp)
   11f68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f6c:	e0bffd17 	ldw	r2,-12(fp)
   11f70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   11f74:	e0bfff17 	ldw	r2,-4(fp)
   11f78:	10c00317 	ldw	r3,12(r2)
   11f7c:	e0bfff17 	ldw	r2,-4(fp)
   11f80:	10800417 	ldw	r2,16(r2)
   11f84:	1887c83a 	sub	r3,r3,r2
   11f88:	e0bfff17 	ldw	r2,-4(fp)
   11f8c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   11f90:	0005883a 	mov	r2,zero
}
   11f94:	e037883a 	mov	sp,fp
   11f98:	df000017 	ldw	fp,0(sp)
   11f9c:	dec00104 	addi	sp,sp,4
   11fa0:	f800283a 	ret

00011fa4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   11fa4:	defffc04 	addi	sp,sp,-16
   11fa8:	dfc00315 	stw	ra,12(sp)
   11fac:	df000215 	stw	fp,8(sp)
   11fb0:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   11fb4:	01430c04 	movi	r5,3120
   11fb8:	010000b4 	movhi	r4,2
   11fbc:	21375b04 	addi	r4,r4,-8852
   11fc0:	000f6380 	call	f638 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   11fc4:	008000b4 	movhi	r2,2
   11fc8:	10b75b04 	addi	r2,r2,-8852
   11fcc:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   11fd0:	e03fff0d 	sth	zero,-4(fp)
   11fd4:	00001306 	br	12024 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   11fd8:	e0bfff0b 	ldhu	r2,-4(fp)
   11fdc:	10800044 	addi	r2,r2,1
   11fe0:	10c00d24 	muli	r3,r2,52
   11fe4:	008000b4 	movhi	r2,2
   11fe8:	10b75b04 	addi	r2,r2,-8852
   11fec:	1887883a 	add	r3,r3,r2
   11ff0:	e0bffe17 	ldw	r2,-8(fp)
   11ff4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   11ff8:	e0bffe17 	ldw	r2,-8(fp)
   11ffc:	00c00fc4 	movi	r3,63
   12000:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   12004:	e0bffe17 	ldw	r2,-8(fp)
   12008:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   1200c:	e0bffe17 	ldw	r2,-8(fp)
   12010:	10800d04 	addi	r2,r2,52
   12014:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   12018:	e0bfff0b 	ldhu	r2,-4(fp)
   1201c:	10800044 	addi	r2,r2,1
   12020:	e0bfff0d 	sth	r2,-4(fp)
   12024:	e0bfff0b 	ldhu	r2,-4(fp)
   12028:	10800ef0 	cmpltui	r2,r2,59
   1202c:	103fea1e 	bne	r2,zero,11fd8 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   12030:	e0bffe17 	ldw	r2,-8(fp)
   12034:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   12038:	e0bffe17 	ldw	r2,-8(fp)
   1203c:	00c00fc4 	movi	r3,63
   12040:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   12044:	e0bffe17 	ldw	r2,-8(fp)
   12048:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   1204c:	008000b4 	movhi	r2,2
   12050:	10b66304 	addi	r2,r2,-9844
   12054:	00c000b4 	movhi	r3,2
   12058:	18f75b04 	addi	r3,r3,-8852
   1205c:	10c00015 	stw	r3,0(r2)
#endif
}
   12060:	0001883a 	nop
   12064:	e037883a 	mov	sp,fp
   12068:	dfc00117 	ldw	ra,4(sp)
   1206c:	df000017 	ldw	fp,0(sp)
   12070:	dec00204 	addi	sp,sp,8
   12074:	f800283a 	ret

00012078 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   12078:	defff804 	addi	sp,sp,-32
   1207c:	df000715 	stw	fp,28(sp)
   12080:	df000704 	addi	fp,sp,28
   12084:	e13ffe15 	stw	r4,-8(fp)
   12088:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1208c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12090:	e0bfff17 	ldw	r2,-4(fp)
   12094:	1000021e 	bne	r2,zero,120a0 <OSQAccept+0x28>
        return ((void *)0);
   12098:	0005883a 	mov	r2,zero
   1209c:	00004206 	br	121a8 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   120a0:	e0bffe17 	ldw	r2,-8(fp)
   120a4:	1000051e 	bne	r2,zero,120bc <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   120a8:	e0bfff17 	ldw	r2,-4(fp)
   120ac:	00c00104 	movi	r3,4
   120b0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   120b4:	0005883a 	mov	r2,zero
   120b8:	00003b06 	br	121a8 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   120bc:	e0bffe17 	ldw	r2,-8(fp)
   120c0:	10800003 	ldbu	r2,0(r2)
   120c4:	10803fcc 	andi	r2,r2,255
   120c8:	108000a0 	cmpeqi	r2,r2,2
   120cc:	1000051e 	bne	r2,zero,120e4 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   120d0:	e0bfff17 	ldw	r2,-4(fp)
   120d4:	00c00044 	movi	r3,1
   120d8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   120dc:	0005883a 	mov	r2,zero
   120e0:	00003106 	br	121a8 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   120e4:	0005303a 	rdctl	r2,status
   120e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   120ec:	e0fffd17 	ldw	r3,-12(fp)
   120f0:	00bfff84 	movi	r2,-2
   120f4:	1884703a 	and	r2,r3,r2
   120f8:	1001703a 	wrctl	status,r2
  
  return context;
   120fc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12100:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12104:	e0bffe17 	ldw	r2,-8(fp)
   12108:	10800117 	ldw	r2,4(r2)
   1210c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   12110:	e0bffc17 	ldw	r2,-16(fp)
   12114:	1080058b 	ldhu	r2,22(r2)
   12118:	10bfffcc 	andi	r2,r2,65535
   1211c:	10001926 	beq	r2,zero,12184 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   12120:	e0bffc17 	ldw	r2,-16(fp)
   12124:	10800417 	ldw	r2,16(r2)
   12128:	11000104 	addi	r4,r2,4
   1212c:	e0fffc17 	ldw	r3,-16(fp)
   12130:	19000415 	stw	r4,16(r3)
   12134:	10800017 	ldw	r2,0(r2)
   12138:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1213c:	e0bffc17 	ldw	r2,-16(fp)
   12140:	1080058b 	ldhu	r2,22(r2)
   12144:	10bfffc4 	addi	r2,r2,-1
   12148:	1007883a 	mov	r3,r2
   1214c:	e0bffc17 	ldw	r2,-16(fp)
   12150:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   12154:	e0bffc17 	ldw	r2,-16(fp)
   12158:	10c00417 	ldw	r3,16(r2)
   1215c:	e0bffc17 	ldw	r2,-16(fp)
   12160:	10800217 	ldw	r2,8(r2)
   12164:	1880041e 	bne	r3,r2,12178 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   12168:	e0bffc17 	ldw	r2,-16(fp)
   1216c:	10c00117 	ldw	r3,4(r2)
   12170:	e0bffc17 	ldw	r2,-16(fp)
   12174:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   12178:	e0bfff17 	ldw	r2,-4(fp)
   1217c:	10000005 	stb	zero,0(r2)
   12180:	00000406 	br	12194 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   12184:	e0bfff17 	ldw	r2,-4(fp)
   12188:	00c007c4 	movi	r3,31
   1218c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   12190:	e03ff915 	stw	zero,-28(fp)
   12194:	e0bffa17 	ldw	r2,-24(fp)
   12198:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1219c:	e0bffb17 	ldw	r2,-20(fp)
   121a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   121a4:	e0bff917 	ldw	r2,-28(fp)
}
   121a8:	e037883a 	mov	sp,fp
   121ac:	df000017 	ldw	fp,0(sp)
   121b0:	dec00104 	addi	sp,sp,4
   121b4:	f800283a 	ret

000121b8 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   121b8:	defff404 	addi	sp,sp,-48
   121bc:	dfc00b15 	stw	ra,44(sp)
   121c0:	df000a15 	stw	fp,40(sp)
   121c4:	df000a04 	addi	fp,sp,40
   121c8:	e13ffe15 	stw	r4,-8(fp)
   121cc:	2805883a 	mov	r2,r5
   121d0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   121d4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   121d8:	008000b4 	movhi	r2,2
   121dc:	10b66804 	addi	r2,r2,-9824
   121e0:	10800003 	ldbu	r2,0(r2)
   121e4:	10803fcc 	andi	r2,r2,255
   121e8:	10000226 	beq	r2,zero,121f4 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   121ec:	0005883a 	mov	r2,zero
   121f0:	00006b06 	br	123a0 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   121f4:	0005303a 	rdctl	r2,status
   121f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   121fc:	e0fffd17 	ldw	r3,-12(fp)
   12200:	00bfff84 	movi	r2,-2
   12204:	1884703a 	and	r2,r3,r2
   12208:	1001703a 	wrctl	status,r2
  
  return context;
   1220c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12210:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   12214:	008000b4 	movhi	r2,2
   12218:	10b66704 	addi	r2,r2,-9828
   1221c:	10800017 	ldw	r2,0(r2)
   12220:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   12224:	008000b4 	movhi	r2,2
   12228:	10b66704 	addi	r2,r2,-9828
   1222c:	10800017 	ldw	r2,0(r2)
   12230:	10000726 	beq	r2,zero,12250 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   12234:	008000b4 	movhi	r2,2
   12238:	10b66704 	addi	r2,r2,-9828
   1223c:	10800017 	ldw	r2,0(r2)
   12240:	10c00117 	ldw	r3,4(r2)
   12244:	008000b4 	movhi	r2,2
   12248:	10b66704 	addi	r2,r2,-9828
   1224c:	10c00015 	stw	r3,0(r2)
   12250:	e0bff717 	ldw	r2,-36(fp)
   12254:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12258:	e0bff817 	ldw	r2,-32(fp)
   1225c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   12260:	e0bff617 	ldw	r2,-40(fp)
   12264:	10004d26 	beq	r2,zero,1239c <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12268:	0005303a 	rdctl	r2,status
   1226c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12270:	e0fff917 	ldw	r3,-28(fp)
   12274:	00bfff84 	movi	r2,-2
   12278:	1884703a 	and	r2,r3,r2
   1227c:	1001703a 	wrctl	status,r2
  
  return context;
   12280:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   12284:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   12288:	008000b4 	movhi	r2,2
   1228c:	10b66504 	addi	r2,r2,-9836
   12290:	10800017 	ldw	r2,0(r2)
   12294:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   12298:	e0bffb17 	ldw	r2,-20(fp)
   1229c:	10003126 	beq	r2,zero,12364 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   122a0:	008000b4 	movhi	r2,2
   122a4:	10b66504 	addi	r2,r2,-9836
   122a8:	10800017 	ldw	r2,0(r2)
   122ac:	10c00017 	ldw	r3,0(r2)
   122b0:	008000b4 	movhi	r2,2
   122b4:	10b66504 	addi	r2,r2,-9836
   122b8:	10c00015 	stw	r3,0(r2)
   122bc:	e0bff717 	ldw	r2,-36(fp)
   122c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   122c4:	e0bffa17 	ldw	r2,-24(fp)
   122c8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   122cc:	e0bffb17 	ldw	r2,-20(fp)
   122d0:	e0fffe17 	ldw	r3,-8(fp)
   122d4:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   122d8:	e0bfff0b 	ldhu	r2,-4(fp)
   122dc:	1085883a 	add	r2,r2,r2
   122e0:	1085883a 	add	r2,r2,r2
   122e4:	1007883a 	mov	r3,r2
   122e8:	e0bffe17 	ldw	r2,-8(fp)
   122ec:	10c7883a 	add	r3,r2,r3
   122f0:	e0bffb17 	ldw	r2,-20(fp)
   122f4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   122f8:	e0bffb17 	ldw	r2,-20(fp)
   122fc:	e0fffe17 	ldw	r3,-8(fp)
   12300:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   12304:	e0bffb17 	ldw	r2,-20(fp)
   12308:	e0fffe17 	ldw	r3,-8(fp)
   1230c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   12310:	e0bffb17 	ldw	r2,-20(fp)
   12314:	e0ffff0b 	ldhu	r3,-4(fp)
   12318:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   1231c:	e0bffb17 	ldw	r2,-20(fp)
   12320:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   12324:	e0bff617 	ldw	r2,-40(fp)
   12328:	00c00084 	movi	r3,2
   1232c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   12330:	e0bff617 	ldw	r2,-40(fp)
   12334:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   12338:	e0bff617 	ldw	r2,-40(fp)
   1233c:	e0fffb17 	ldw	r3,-20(fp)
   12340:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   12344:	e0bff617 	ldw	r2,-40(fp)
   12348:	00c00fc4 	movi	r3,63
   1234c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   12350:	e0bff617 	ldw	r2,-40(fp)
   12354:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   12358:	e13ff617 	ldw	r4,-40(fp)
   1235c:	000f1c40 	call	f1c4 <OS_EventWaitListInit>
   12360:	00000e06 	br	1239c <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   12364:	008000b4 	movhi	r2,2
   12368:	10b66704 	addi	r2,r2,-9828
   1236c:	10c00017 	ldw	r3,0(r2)
   12370:	e0bff617 	ldw	r2,-40(fp)
   12374:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   12378:	008000b4 	movhi	r2,2
   1237c:	10b66704 	addi	r2,r2,-9828
   12380:	e0fff617 	ldw	r3,-40(fp)
   12384:	10c00015 	stw	r3,0(r2)
   12388:	e0bff717 	ldw	r2,-36(fp)
   1238c:	e0bffc15 	stw	r2,-16(fp)
   12390:	e0bffc17 	ldw	r2,-16(fp)
   12394:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   12398:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   1239c:	e0bff617 	ldw	r2,-40(fp)
}
   123a0:	e037883a 	mov	sp,fp
   123a4:	dfc00117 	ldw	ra,4(sp)
   123a8:	df000017 	ldw	fp,0(sp)
   123ac:	dec00204 	addi	sp,sp,8
   123b0:	f800283a 	ret

000123b4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   123b4:	defff204 	addi	sp,sp,-56
   123b8:	dfc00d15 	stw	ra,52(sp)
   123bc:	df000c15 	stw	fp,48(sp)
   123c0:	df000c04 	addi	fp,sp,48
   123c4:	e13ffd15 	stw	r4,-12(fp)
   123c8:	2805883a 	mov	r2,r5
   123cc:	e1bfff15 	stw	r6,-4(fp)
   123d0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   123d4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   123d8:	e0bfff17 	ldw	r2,-4(fp)
   123dc:	1000021e 	bne	r2,zero,123e8 <OSQDel+0x34>
        return (pevent);
   123e0:	e0bffd17 	ldw	r2,-12(fp)
   123e4:	0000a006 	br	12668 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   123e8:	e0bffd17 	ldw	r2,-12(fp)
   123ec:	1000051e 	bne	r2,zero,12404 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   123f0:	e0bfff17 	ldw	r2,-4(fp)
   123f4:	00c00104 	movi	r3,4
   123f8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   123fc:	e0bffd17 	ldw	r2,-12(fp)
   12400:	00009906 	br	12668 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12404:	e0bffd17 	ldw	r2,-12(fp)
   12408:	10800003 	ldbu	r2,0(r2)
   1240c:	10803fcc 	andi	r2,r2,255
   12410:	108000a0 	cmpeqi	r2,r2,2
   12414:	1000051e 	bne	r2,zero,1242c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12418:	e0bfff17 	ldw	r2,-4(fp)
   1241c:	00c00044 	movi	r3,1
   12420:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12424:	e0bffd17 	ldw	r2,-12(fp)
   12428:	00008f06 	br	12668 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1242c:	008000b4 	movhi	r2,2
   12430:	10b66804 	addi	r2,r2,-9824
   12434:	10800003 	ldbu	r2,0(r2)
   12438:	10803fcc 	andi	r2,r2,255
   1243c:	10000526 	beq	r2,zero,12454 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   12440:	e0bfff17 	ldw	r2,-4(fp)
   12444:	00c003c4 	movi	r3,15
   12448:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1244c:	e0bffd17 	ldw	r2,-12(fp)
   12450:	00008506 	br	12668 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12454:	0005303a 	rdctl	r2,status
   12458:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1245c:	e0fffc17 	ldw	r3,-16(fp)
   12460:	00bfff84 	movi	r2,-2
   12464:	1884703a 	and	r2,r3,r2
   12468:	1001703a 	wrctl	status,r2
  
  return context;
   1246c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12470:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   12474:	e0bffd17 	ldw	r2,-12(fp)
   12478:	10800283 	ldbu	r2,10(r2)
   1247c:	10803fcc 	andi	r2,r2,255
   12480:	10000326 	beq	r2,zero,12490 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   12484:	00800044 	movi	r2,1
   12488:	e0bff405 	stb	r2,-48(fp)
   1248c:	00000106 	br	12494 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12490:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   12494:	e0bffe03 	ldbu	r2,-8(fp)
   12498:	10000326 	beq	r2,zero,124a8 <OSQDel+0xf4>
   1249c:	10800060 	cmpeqi	r2,r2,1
   124a0:	1000381e 	bne	r2,zero,12584 <OSQDel+0x1d0>
   124a4:	00006506 	br	1263c <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   124a8:	e0bff403 	ldbu	r2,-48(fp)
   124ac:	1000261e 	bne	r2,zero,12548 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   124b0:	e0bffd17 	ldw	r2,-12(fp)
   124b4:	00c00fc4 	movi	r3,63
   124b8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   124bc:	e0bffd17 	ldw	r2,-12(fp)
   124c0:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   124c4:	e0bffd17 	ldw	r2,-12(fp)
   124c8:	10800117 	ldw	r2,4(r2)
   124cc:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   124d0:	008000b4 	movhi	r2,2
   124d4:	10b66504 	addi	r2,r2,-9836
   124d8:	10c00017 	ldw	r3,0(r2)
   124dc:	e0bff817 	ldw	r2,-32(fp)
   124e0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   124e4:	008000b4 	movhi	r2,2
   124e8:	10b66504 	addi	r2,r2,-9836
   124ec:	e0fff817 	ldw	r3,-32(fp)
   124f0:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   124f4:	e0bffd17 	ldw	r2,-12(fp)
   124f8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   124fc:	008000b4 	movhi	r2,2
   12500:	10b66704 	addi	r2,r2,-9828
   12504:	10c00017 	ldw	r3,0(r2)
   12508:	e0bffd17 	ldw	r2,-12(fp)
   1250c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   12510:	e0bffd17 	ldw	r2,-12(fp)
   12514:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   12518:	008000b4 	movhi	r2,2
   1251c:	10b66704 	addi	r2,r2,-9828
   12520:	e0fffd17 	ldw	r3,-12(fp)
   12524:	10c00015 	stw	r3,0(r2)
   12528:	e0bff617 	ldw	r2,-40(fp)
   1252c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12530:	e0bff717 	ldw	r2,-36(fp)
   12534:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   12538:	e0bfff17 	ldw	r2,-4(fp)
   1253c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   12540:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   12544:	00004706 	br	12664 <OSQDel+0x2b0>
   12548:	e0bff617 	ldw	r2,-40(fp)
   1254c:	e0bff915 	stw	r2,-28(fp)
   12550:	e0bff917 	ldw	r2,-28(fp)
   12554:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   12558:	e0bfff17 	ldw	r2,-4(fp)
   1255c:	00c01244 	movi	r3,73
   12560:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   12564:	e0bffd17 	ldw	r2,-12(fp)
   12568:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   1256c:	00003d06 	br	12664 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   12570:	000f883a 	mov	r7,zero
   12574:	01800104 	movi	r6,4
   12578:	000b883a 	mov	r5,zero
   1257c:	e13ffd17 	ldw	r4,-12(fp)
   12580:	000eb300 	call	eb30 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   12584:	e0bffd17 	ldw	r2,-12(fp)
   12588:	10800283 	ldbu	r2,10(r2)
   1258c:	10803fcc 	andi	r2,r2,255
   12590:	103ff71e 	bne	r2,zero,12570 <OSQDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   12594:	e0bffd17 	ldw	r2,-12(fp)
   12598:	00c00fc4 	movi	r3,63
   1259c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   125a0:	e0bffd17 	ldw	r2,-12(fp)
   125a4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   125a8:	e0bffd17 	ldw	r2,-12(fp)
   125ac:	10800117 	ldw	r2,4(r2)
   125b0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   125b4:	008000b4 	movhi	r2,2
   125b8:	10b66504 	addi	r2,r2,-9836
   125bc:	10c00017 	ldw	r3,0(r2)
   125c0:	e0bff817 	ldw	r2,-32(fp)
   125c4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   125c8:	008000b4 	movhi	r2,2
   125cc:	10b66504 	addi	r2,r2,-9836
   125d0:	e0fff817 	ldw	r3,-32(fp)
   125d4:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   125d8:	e0bffd17 	ldw	r2,-12(fp)
   125dc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   125e0:	008000b4 	movhi	r2,2
   125e4:	10b66704 	addi	r2,r2,-9828
   125e8:	10c00017 	ldw	r3,0(r2)
   125ec:	e0bffd17 	ldw	r2,-12(fp)
   125f0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   125f4:	e0bffd17 	ldw	r2,-12(fp)
   125f8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   125fc:	008000b4 	movhi	r2,2
   12600:	10b66704 	addi	r2,r2,-9828
   12604:	e0fffd17 	ldw	r3,-12(fp)
   12608:	10c00015 	stw	r3,0(r2)
   1260c:	e0bff617 	ldw	r2,-40(fp)
   12610:	e0bffa15 	stw	r2,-24(fp)
   12614:	e0bffa17 	ldw	r2,-24(fp)
   12618:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1261c:	e0bff403 	ldbu	r2,-48(fp)
   12620:	10800058 	cmpnei	r2,r2,1
   12624:	1000011e 	bne	r2,zero,1262c <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12628:	000f6f40 	call	f6f4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1262c:	e0bfff17 	ldw	r2,-4(fp)
   12630:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   12634:	e03ff515 	stw	zero,-44(fp)
             break;
   12638:	00000a06 	br	12664 <OSQDel+0x2b0>
   1263c:	e0bff617 	ldw	r2,-40(fp)
   12640:	e0bffb15 	stw	r2,-20(fp)
   12644:	e0bffb17 	ldw	r2,-20(fp)
   12648:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   1264c:	e0bfff17 	ldw	r2,-4(fp)
   12650:	00c001c4 	movi	r3,7
   12654:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   12658:	e0bffd17 	ldw	r2,-12(fp)
   1265c:	e0bff515 	stw	r2,-44(fp)
             break;
   12660:	0001883a 	nop
    }
    return (pevent_return);
   12664:	e0bff517 	ldw	r2,-44(fp)
}
   12668:	e037883a 	mov	sp,fp
   1266c:	dfc00117 	ldw	ra,4(sp)
   12670:	df000017 	ldw	fp,0(sp)
   12674:	dec00204 	addi	sp,sp,8
   12678:	f800283a 	ret

0001267c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   1267c:	defffa04 	addi	sp,sp,-24
   12680:	df000515 	stw	fp,20(sp)
   12684:	df000504 	addi	fp,sp,20
   12688:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1268c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12690:	e0bfff17 	ldw	r2,-4(fp)
   12694:	1000021e 	bne	r2,zero,126a0 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   12698:	00800104 	movi	r2,4
   1269c:	00002106 	br	12724 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   126a0:	e0bfff17 	ldw	r2,-4(fp)
   126a4:	10800003 	ldbu	r2,0(r2)
   126a8:	10803fcc 	andi	r2,r2,255
   126ac:	108000a0 	cmpeqi	r2,r2,2
   126b0:	1000021e 	bne	r2,zero,126bc <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   126b4:	00800044 	movi	r2,1
   126b8:	00001a06 	br	12724 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   126bc:	0005303a 	rdctl	r2,status
   126c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   126c4:	e0fffd17 	ldw	r3,-12(fp)
   126c8:	00bfff84 	movi	r2,-2
   126cc:	1884703a 	and	r2,r3,r2
   126d0:	1001703a 	wrctl	status,r2
  
  return context;
   126d4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   126d8:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   126dc:	e0bfff17 	ldw	r2,-4(fp)
   126e0:	10800117 	ldw	r2,4(r2)
   126e4:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   126e8:	e0bffc17 	ldw	r2,-16(fp)
   126ec:	10c00117 	ldw	r3,4(r2)
   126f0:	e0bffc17 	ldw	r2,-16(fp)
   126f4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   126f8:	e0bffc17 	ldw	r2,-16(fp)
   126fc:	10c00117 	ldw	r3,4(r2)
   12700:	e0bffc17 	ldw	r2,-16(fp)
   12704:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   12708:	e0bffc17 	ldw	r2,-16(fp)
   1270c:	1000058d 	sth	zero,22(r2)
   12710:	e0bffb17 	ldw	r2,-20(fp)
   12714:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12718:	e0bffe17 	ldw	r2,-8(fp)
   1271c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12720:	0005883a 	mov	r2,zero
}
   12724:	e037883a 	mov	sp,fp
   12728:	df000017 	ldw	fp,0(sp)
   1272c:	dec00104 	addi	sp,sp,4
   12730:	f800283a 	ret

00012734 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   12734:	defff304 	addi	sp,sp,-52
   12738:	dfc00c15 	stw	ra,48(sp)
   1273c:	df000b15 	stw	fp,44(sp)
   12740:	df000b04 	addi	fp,sp,44
   12744:	e13ffd15 	stw	r4,-12(fp)
   12748:	2805883a 	mov	r2,r5
   1274c:	e1bfff15 	stw	r6,-4(fp)
   12750:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12754:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12758:	e0bfff17 	ldw	r2,-4(fp)
   1275c:	1000021e 	bne	r2,zero,12768 <OSQPend+0x34>
        return ((void *)0);
   12760:	0005883a 	mov	r2,zero
   12764:	0000ad06 	br	12a1c <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   12768:	e0bffd17 	ldw	r2,-12(fp)
   1276c:	1000051e 	bne	r2,zero,12784 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12770:	e0bfff17 	ldw	r2,-4(fp)
   12774:	00c00104 	movi	r3,4
   12778:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1277c:	0005883a 	mov	r2,zero
   12780:	0000a606 	br	12a1c <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   12784:	e0bffd17 	ldw	r2,-12(fp)
   12788:	10800003 	ldbu	r2,0(r2)
   1278c:	10803fcc 	andi	r2,r2,255
   12790:	108000a0 	cmpeqi	r2,r2,2
   12794:	1000051e 	bne	r2,zero,127ac <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12798:	e0bfff17 	ldw	r2,-4(fp)
   1279c:	00c00044 	movi	r3,1
   127a0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   127a4:	0005883a 	mov	r2,zero
   127a8:	00009c06 	br	12a1c <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   127ac:	008000b4 	movhi	r2,2
   127b0:	10b66804 	addi	r2,r2,-9824
   127b4:	10800003 	ldbu	r2,0(r2)
   127b8:	10803fcc 	andi	r2,r2,255
   127bc:	10000526 	beq	r2,zero,127d4 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   127c0:	e0bfff17 	ldw	r2,-4(fp)
   127c4:	00c00084 	movi	r3,2
   127c8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   127cc:	0005883a 	mov	r2,zero
   127d0:	00009206 	br	12a1c <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   127d4:	008000b4 	movhi	r2,2
   127d8:	10b65a04 	addi	r2,r2,-9880
   127dc:	10800003 	ldbu	r2,0(r2)
   127e0:	10803fcc 	andi	r2,r2,255
   127e4:	10000526 	beq	r2,zero,127fc <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   127e8:	e0bfff17 	ldw	r2,-4(fp)
   127ec:	00c00344 	movi	r3,13
   127f0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   127f4:	0005883a 	mov	r2,zero
   127f8:	00008806 	br	12a1c <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   127fc:	0005303a 	rdctl	r2,status
   12800:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12804:	e0fffc17 	ldw	r3,-16(fp)
   12808:	00bfff84 	movi	r2,-2
   1280c:	1884703a 	and	r2,r3,r2
   12810:	1001703a 	wrctl	status,r2
  
  return context;
   12814:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12818:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1281c:	e0bffd17 	ldw	r2,-12(fp)
   12820:	10800117 	ldw	r2,4(r2)
   12824:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   12828:	e0bff817 	ldw	r2,-32(fp)
   1282c:	1080058b 	ldhu	r2,22(r2)
   12830:	10bfffcc 	andi	r2,r2,65535
   12834:	10001e26 	beq	r2,zero,128b0 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   12838:	e0bff817 	ldw	r2,-32(fp)
   1283c:	10800417 	ldw	r2,16(r2)
   12840:	11000104 	addi	r4,r2,4
   12844:	e0fff817 	ldw	r3,-32(fp)
   12848:	19000415 	stw	r4,16(r3)
   1284c:	10800017 	ldw	r2,0(r2)
   12850:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   12854:	e0bff817 	ldw	r2,-32(fp)
   12858:	1080058b 	ldhu	r2,22(r2)
   1285c:	10bfffc4 	addi	r2,r2,-1
   12860:	1007883a 	mov	r3,r2
   12864:	e0bff817 	ldw	r2,-32(fp)
   12868:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   1286c:	e0bff817 	ldw	r2,-32(fp)
   12870:	10c00417 	ldw	r3,16(r2)
   12874:	e0bff817 	ldw	r2,-32(fp)
   12878:	10800217 	ldw	r2,8(r2)
   1287c:	1880041e 	bne	r3,r2,12890 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   12880:	e0bff817 	ldw	r2,-32(fp)
   12884:	10c00117 	ldw	r3,4(r2)
   12888:	e0bff817 	ldw	r2,-32(fp)
   1288c:	10c00415 	stw	r3,16(r2)
   12890:	e0bff617 	ldw	r2,-40(fp)
   12894:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12898:	e0bff717 	ldw	r2,-36(fp)
   1289c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   128a0:	e0bfff17 	ldw	r2,-4(fp)
   128a4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   128a8:	e0bff517 	ldw	r2,-44(fp)
   128ac:	00005b06 	br	12a1c <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   128b0:	008000b4 	movhi	r2,2
   128b4:	10b66904 	addi	r2,r2,-9820
   128b8:	10c00017 	ldw	r3,0(r2)
   128bc:	008000b4 	movhi	r2,2
   128c0:	10b66904 	addi	r2,r2,-9820
   128c4:	10800017 	ldw	r2,0(r2)
   128c8:	10800c03 	ldbu	r2,48(r2)
   128cc:	10800114 	ori	r2,r2,4
   128d0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   128d4:	008000b4 	movhi	r2,2
   128d8:	10b66904 	addi	r2,r2,-9820
   128dc:	10800017 	ldw	r2,0(r2)
   128e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   128e4:	008000b4 	movhi	r2,2
   128e8:	10b66904 	addi	r2,r2,-9820
   128ec:	10800017 	ldw	r2,0(r2)
   128f0:	e0fffe0b 	ldhu	r3,-8(fp)
   128f4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   128f8:	e13ffd17 	ldw	r4,-12(fp)
   128fc:	000ece40 	call	ece4 <OS_EventTaskWait>
   12900:	e0bff617 	ldw	r2,-40(fp)
   12904:	e0bffb15 	stw	r2,-20(fp)
   12908:	e0bffb17 	ldw	r2,-20(fp)
   1290c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   12910:	000f6f40 	call	f6f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12914:	0005303a 	rdctl	r2,status
   12918:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1291c:	e0fff917 	ldw	r3,-28(fp)
   12920:	00bfff84 	movi	r2,-2
   12924:	1884703a 	and	r2,r3,r2
   12928:	1001703a 	wrctl	status,r2
  
  return context;
   1292c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   12930:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   12934:	008000b4 	movhi	r2,2
   12938:	10b66904 	addi	r2,r2,-9820
   1293c:	10800017 	ldw	r2,0(r2)
   12940:	10800c43 	ldbu	r2,49(r2)
   12944:	10803fcc 	andi	r2,r2,255
   12948:	10000326 	beq	r2,zero,12958 <OSQPend+0x224>
   1294c:	108000a0 	cmpeqi	r2,r2,2
   12950:	1000091e 	bne	r2,zero,12978 <OSQPend+0x244>
   12954:	00000d06 	br	1298c <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   12958:	008000b4 	movhi	r2,2
   1295c:	10b66904 	addi	r2,r2,-9820
   12960:	10800017 	ldw	r2,0(r2)
   12964:	10800917 	ldw	r2,36(r2)
   12968:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   1296c:	e0bfff17 	ldw	r2,-4(fp)
   12970:	10000005 	stb	zero,0(r2)
             break;
   12974:	00001006 	br	129b8 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   12978:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1297c:	e0bfff17 	ldw	r2,-4(fp)
   12980:	00c00384 	movi	r3,14
   12984:	10c00005 	stb	r3,0(r2)
             break;
   12988:	00000b06 	br	129b8 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   1298c:	008000b4 	movhi	r2,2
   12990:	10b66904 	addi	r2,r2,-9820
   12994:	10800017 	ldw	r2,0(r2)
   12998:	e17ffd17 	ldw	r5,-12(fp)
   1299c:	1009883a 	mov	r4,r2
   129a0:	000f00c0 	call	f00c <OS_EventTaskRemove>
             pmsg = (void *)0;
   129a4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   129a8:	e0bfff17 	ldw	r2,-4(fp)
   129ac:	00c00284 	movi	r3,10
   129b0:	10c00005 	stb	r3,0(r2)
             break;
   129b4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   129b8:	008000b4 	movhi	r2,2
   129bc:	10b66904 	addi	r2,r2,-9820
   129c0:	10800017 	ldw	r2,0(r2)
   129c4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   129c8:	008000b4 	movhi	r2,2
   129cc:	10b66904 	addi	r2,r2,-9820
   129d0:	10800017 	ldw	r2,0(r2)
   129d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   129d8:	008000b4 	movhi	r2,2
   129dc:	10b66904 	addi	r2,r2,-9820
   129e0:	10800017 	ldw	r2,0(r2)
   129e4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   129e8:	008000b4 	movhi	r2,2
   129ec:	10b66904 	addi	r2,r2,-9820
   129f0:	10800017 	ldw	r2,0(r2)
   129f4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   129f8:	008000b4 	movhi	r2,2
   129fc:	10b66904 	addi	r2,r2,-9820
   12a00:	10800017 	ldw	r2,0(r2)
   12a04:	10000915 	stw	zero,36(r2)
   12a08:	e0bff617 	ldw	r2,-40(fp)
   12a0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12a10:	e0bffa17 	ldw	r2,-24(fp)
   12a14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   12a18:	e0bff517 	ldw	r2,-44(fp)
}
   12a1c:	e037883a 	mov	sp,fp
   12a20:	dfc00117 	ldw	ra,4(sp)
   12a24:	df000017 	ldw	fp,0(sp)
   12a28:	dec00204 	addi	sp,sp,8
   12a2c:	f800283a 	ret

00012a30 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12a30:	defff604 	addi	sp,sp,-40
   12a34:	dfc00915 	stw	ra,36(sp)
   12a38:	df000815 	stw	fp,32(sp)
   12a3c:	df000804 	addi	fp,sp,32
   12a40:	e13ffd15 	stw	r4,-12(fp)
   12a44:	2805883a 	mov	r2,r5
   12a48:	e1bfff15 	stw	r6,-4(fp)
   12a4c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12a50:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12a54:	e0bfff17 	ldw	r2,-4(fp)
   12a58:	1000021e 	bne	r2,zero,12a64 <OSQPendAbort+0x34>
        return (0);
   12a5c:	0005883a 	mov	r2,zero
   12a60:	00004906 	br	12b88 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12a64:	e0bffd17 	ldw	r2,-12(fp)
   12a68:	1000051e 	bne	r2,zero,12a80 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12a6c:	e0bfff17 	ldw	r2,-4(fp)
   12a70:	00c00104 	movi	r3,4
   12a74:	10c00005 	stb	r3,0(r2)
        return (0);
   12a78:	0005883a 	mov	r2,zero
   12a7c:	00004206 	br	12b88 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12a80:	e0bffd17 	ldw	r2,-12(fp)
   12a84:	10800003 	ldbu	r2,0(r2)
   12a88:	10803fcc 	andi	r2,r2,255
   12a8c:	108000a0 	cmpeqi	r2,r2,2
   12a90:	1000051e 	bne	r2,zero,12aa8 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12a94:	e0bfff17 	ldw	r2,-4(fp)
   12a98:	00c00044 	movi	r3,1
   12a9c:	10c00005 	stb	r3,0(r2)
        return (0);
   12aa0:	0005883a 	mov	r2,zero
   12aa4:	00003806 	br	12b88 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12aa8:	0005303a 	rdctl	r2,status
   12aac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ab0:	e0fffc17 	ldw	r3,-16(fp)
   12ab4:	00bfff84 	movi	r2,-2
   12ab8:	1884703a 	and	r2,r3,r2
   12abc:	1001703a 	wrctl	status,r2
  
  return context;
   12ac0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12ac4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   12ac8:	e0bffd17 	ldw	r2,-12(fp)
   12acc:	10800283 	ldbu	r2,10(r2)
   12ad0:	10803fcc 	andi	r2,r2,255
   12ad4:	10002526 	beq	r2,zero,12b6c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   12ad8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   12adc:	e0bffe03 	ldbu	r2,-8(fp)
   12ae0:	10800060 	cmpeqi	r2,r2,1
   12ae4:	10000e26 	beq	r2,zero,12b20 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12ae8:	00000806 	br	12b0c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12aec:	01c00084 	movi	r7,2
   12af0:	01800104 	movi	r6,4
   12af4:	000b883a 	mov	r5,zero
   12af8:	e13ffd17 	ldw	r4,-12(fp)
   12afc:	000eb300 	call	eb30 <OS_EventTaskRdy>
                     nbr_tasks++;
   12b00:	e0bff803 	ldbu	r2,-32(fp)
   12b04:	10800044 	addi	r2,r2,1
   12b08:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12b0c:	e0bffd17 	ldw	r2,-12(fp)
   12b10:	10800283 	ldbu	r2,10(r2)
   12b14:	10803fcc 	andi	r2,r2,255
   12b18:	103ff41e 	bne	r2,zero,12aec <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   12b1c:	00000906 	br	12b44 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12b20:	01c00084 	movi	r7,2
   12b24:	01800104 	movi	r6,4
   12b28:	000b883a 	mov	r5,zero
   12b2c:	e13ffd17 	ldw	r4,-12(fp)
   12b30:	000eb300 	call	eb30 <OS_EventTaskRdy>
                 nbr_tasks++;
   12b34:	e0bff803 	ldbu	r2,-32(fp)
   12b38:	10800044 	addi	r2,r2,1
   12b3c:	e0bff805 	stb	r2,-32(fp)
                 break;
   12b40:	0001883a 	nop
   12b44:	e0bff917 	ldw	r2,-28(fp)
   12b48:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b4c:	e0bffa17 	ldw	r2,-24(fp)
   12b50:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   12b54:	000f6f40 	call	f6f4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   12b58:	e0bfff17 	ldw	r2,-4(fp)
   12b5c:	00c00384 	movi	r3,14
   12b60:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   12b64:	e0bff803 	ldbu	r2,-32(fp)
   12b68:	00000706 	br	12b88 <OSQPendAbort+0x158>
   12b6c:	e0bff917 	ldw	r2,-28(fp)
   12b70:	e0bffb15 	stw	r2,-20(fp)
   12b74:	e0bffb17 	ldw	r2,-20(fp)
   12b78:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12b7c:	e0bfff17 	ldw	r2,-4(fp)
   12b80:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   12b84:	0005883a 	mov	r2,zero
}
   12b88:	e037883a 	mov	sp,fp
   12b8c:	dfc00117 	ldw	ra,4(sp)
   12b90:	df000017 	ldw	fp,0(sp)
   12b94:	dec00204 	addi	sp,sp,8
   12b98:	f800283a 	ret

00012b9c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   12b9c:	defff604 	addi	sp,sp,-40
   12ba0:	dfc00915 	stw	ra,36(sp)
   12ba4:	df000815 	stw	fp,32(sp)
   12ba8:	df000804 	addi	fp,sp,32
   12bac:	e13ffe15 	stw	r4,-8(fp)
   12bb0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12bb4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   12bb8:	e0bffe17 	ldw	r2,-8(fp)
   12bbc:	1000021e 	bne	r2,zero,12bc8 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12bc0:	00800104 	movi	r2,4
   12bc4:	00004a06 	br	12cf0 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   12bc8:	e0bffe17 	ldw	r2,-8(fp)
   12bcc:	10800003 	ldbu	r2,0(r2)
   12bd0:	10803fcc 	andi	r2,r2,255
   12bd4:	108000a0 	cmpeqi	r2,r2,2
   12bd8:	1000021e 	bne	r2,zero,12be4 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   12bdc:	00800044 	movi	r2,1
   12be0:	00004306 	br	12cf0 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12be4:	0005303a 	rdctl	r2,status
   12be8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12bec:	e0fffd17 	ldw	r3,-12(fp)
   12bf0:	00bfff84 	movi	r2,-2
   12bf4:	1884703a 	and	r2,r3,r2
   12bf8:	1001703a 	wrctl	status,r2
  
  return context;
   12bfc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12c00:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   12c04:	e0bffe17 	ldw	r2,-8(fp)
   12c08:	10800283 	ldbu	r2,10(r2)
   12c0c:	10803fcc 	andi	r2,r2,255
   12c10:	10000c26 	beq	r2,zero,12c44 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12c14:	000f883a 	mov	r7,zero
   12c18:	01800104 	movi	r6,4
   12c1c:	e17fff17 	ldw	r5,-4(fp)
   12c20:	e13ffe17 	ldw	r4,-8(fp)
   12c24:	000eb300 	call	eb30 <OS_EventTaskRdy>
   12c28:	e0bff817 	ldw	r2,-32(fp)
   12c2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c30:	e0bff917 	ldw	r2,-28(fp)
   12c34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   12c38:	000f6f40 	call	f6f4 <OS_Sched>
        return (OS_ERR_NONE);
   12c3c:	0005883a 	mov	r2,zero
   12c40:	00002b06 	br	12cf0 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   12c44:	e0bffe17 	ldw	r2,-8(fp)
   12c48:	10800117 	ldw	r2,4(r2)
   12c4c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   12c50:	e0bffb17 	ldw	r2,-20(fp)
   12c54:	10c0058b 	ldhu	r3,22(r2)
   12c58:	e0bffb17 	ldw	r2,-20(fp)
   12c5c:	1080050b 	ldhu	r2,20(r2)
   12c60:	18ffffcc 	andi	r3,r3,65535
   12c64:	10bfffcc 	andi	r2,r2,65535
   12c68:	18800636 	bltu	r3,r2,12c84 <OSQPost+0xe8>
   12c6c:	e0bff817 	ldw	r2,-32(fp)
   12c70:	e0bffa15 	stw	r2,-24(fp)
   12c74:	e0bffa17 	ldw	r2,-24(fp)
   12c78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12c7c:	00800784 	movi	r2,30
   12c80:	00001b06 	br	12cf0 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   12c84:	e0bffb17 	ldw	r2,-20(fp)
   12c88:	10800317 	ldw	r2,12(r2)
   12c8c:	11000104 	addi	r4,r2,4
   12c90:	e0fffb17 	ldw	r3,-20(fp)
   12c94:	19000315 	stw	r4,12(r3)
   12c98:	e0ffff17 	ldw	r3,-4(fp)
   12c9c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   12ca0:	e0bffb17 	ldw	r2,-20(fp)
   12ca4:	1080058b 	ldhu	r2,22(r2)
   12ca8:	10800044 	addi	r2,r2,1
   12cac:	1007883a 	mov	r3,r2
   12cb0:	e0bffb17 	ldw	r2,-20(fp)
   12cb4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   12cb8:	e0bffb17 	ldw	r2,-20(fp)
   12cbc:	10c00317 	ldw	r3,12(r2)
   12cc0:	e0bffb17 	ldw	r2,-20(fp)
   12cc4:	10800217 	ldw	r2,8(r2)
   12cc8:	1880041e 	bne	r3,r2,12cdc <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   12ccc:	e0bffb17 	ldw	r2,-20(fp)
   12cd0:	10c00117 	ldw	r3,4(r2)
   12cd4:	e0bffb17 	ldw	r2,-20(fp)
   12cd8:	10c00315 	stw	r3,12(r2)
   12cdc:	e0bff817 	ldw	r2,-32(fp)
   12ce0:	e0bffc15 	stw	r2,-16(fp)
   12ce4:	e0bffc17 	ldw	r2,-16(fp)
   12ce8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12cec:	0005883a 	mov	r2,zero
}
   12cf0:	e037883a 	mov	sp,fp
   12cf4:	dfc00117 	ldw	ra,4(sp)
   12cf8:	df000017 	ldw	fp,0(sp)
   12cfc:	dec00204 	addi	sp,sp,8
   12d00:	f800283a 	ret

00012d04 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   12d04:	defff604 	addi	sp,sp,-40
   12d08:	dfc00915 	stw	ra,36(sp)
   12d0c:	df000815 	stw	fp,32(sp)
   12d10:	df000804 	addi	fp,sp,32
   12d14:	e13ffe15 	stw	r4,-8(fp)
   12d18:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12d1c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12d20:	e0bffe17 	ldw	r2,-8(fp)
   12d24:	1000021e 	bne	r2,zero,12d30 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12d28:	00800104 	movi	r2,4
   12d2c:	00004c06 	br	12e60 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12d30:	e0bffe17 	ldw	r2,-8(fp)
   12d34:	10800003 	ldbu	r2,0(r2)
   12d38:	10803fcc 	andi	r2,r2,255
   12d3c:	108000a0 	cmpeqi	r2,r2,2
   12d40:	1000021e 	bne	r2,zero,12d4c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   12d44:	00800044 	movi	r2,1
   12d48:	00004506 	br	12e60 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12d4c:	0005303a 	rdctl	r2,status
   12d50:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12d54:	e0fffd17 	ldw	r3,-12(fp)
   12d58:	00bfff84 	movi	r2,-2
   12d5c:	1884703a 	and	r2,r3,r2
   12d60:	1001703a 	wrctl	status,r2
  
  return context;
   12d64:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12d68:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   12d6c:	e0bffe17 	ldw	r2,-8(fp)
   12d70:	10800283 	ldbu	r2,10(r2)
   12d74:	10803fcc 	andi	r2,r2,255
   12d78:	10000c26 	beq	r2,zero,12dac <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12d7c:	000f883a 	mov	r7,zero
   12d80:	01800104 	movi	r6,4
   12d84:	e17fff17 	ldw	r5,-4(fp)
   12d88:	e13ffe17 	ldw	r4,-8(fp)
   12d8c:	000eb300 	call	eb30 <OS_EventTaskRdy>
   12d90:	e0bff817 	ldw	r2,-32(fp)
   12d94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d98:	e0bff917 	ldw	r2,-28(fp)
   12d9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   12da0:	000f6f40 	call	f6f4 <OS_Sched>
        return (OS_ERR_NONE);
   12da4:	0005883a 	mov	r2,zero
   12da8:	00002d06 	br	12e60 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12dac:	e0bffe17 	ldw	r2,-8(fp)
   12db0:	10800117 	ldw	r2,4(r2)
   12db4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12db8:	e0bffb17 	ldw	r2,-20(fp)
   12dbc:	10c0058b 	ldhu	r3,22(r2)
   12dc0:	e0bffb17 	ldw	r2,-20(fp)
   12dc4:	1080050b 	ldhu	r2,20(r2)
   12dc8:	18ffffcc 	andi	r3,r3,65535
   12dcc:	10bfffcc 	andi	r2,r2,65535
   12dd0:	18800636 	bltu	r3,r2,12dec <OSQPostFront+0xe8>
   12dd4:	e0bff817 	ldw	r2,-32(fp)
   12dd8:	e0bffa15 	stw	r2,-24(fp)
   12ddc:	e0bffa17 	ldw	r2,-24(fp)
   12de0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12de4:	00800784 	movi	r2,30
   12de8:	00001d06 	br	12e60 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   12dec:	e0bffb17 	ldw	r2,-20(fp)
   12df0:	10c00417 	ldw	r3,16(r2)
   12df4:	e0bffb17 	ldw	r2,-20(fp)
   12df8:	10800117 	ldw	r2,4(r2)
   12dfc:	1880041e 	bne	r3,r2,12e10 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   12e00:	e0bffb17 	ldw	r2,-20(fp)
   12e04:	10c00217 	ldw	r3,8(r2)
   12e08:	e0bffb17 	ldw	r2,-20(fp)
   12e0c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   12e10:	e0bffb17 	ldw	r2,-20(fp)
   12e14:	10800417 	ldw	r2,16(r2)
   12e18:	10ffff04 	addi	r3,r2,-4
   12e1c:	e0bffb17 	ldw	r2,-20(fp)
   12e20:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   12e24:	e0bffb17 	ldw	r2,-20(fp)
   12e28:	10800417 	ldw	r2,16(r2)
   12e2c:	e0ffff17 	ldw	r3,-4(fp)
   12e30:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12e34:	e0bffb17 	ldw	r2,-20(fp)
   12e38:	1080058b 	ldhu	r2,22(r2)
   12e3c:	10800044 	addi	r2,r2,1
   12e40:	1007883a 	mov	r3,r2
   12e44:	e0bffb17 	ldw	r2,-20(fp)
   12e48:	10c0058d 	sth	r3,22(r2)
   12e4c:	e0bff817 	ldw	r2,-32(fp)
   12e50:	e0bffc15 	stw	r2,-16(fp)
   12e54:	e0bffc17 	ldw	r2,-16(fp)
   12e58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12e5c:	0005883a 	mov	r2,zero
}
   12e60:	e037883a 	mov	sp,fp
   12e64:	dfc00117 	ldw	ra,4(sp)
   12e68:	df000017 	ldw	fp,0(sp)
   12e6c:	dec00204 	addi	sp,sp,8
   12e70:	f800283a 	ret

00012e74 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   12e74:	defff504 	addi	sp,sp,-44
   12e78:	dfc00a15 	stw	ra,40(sp)
   12e7c:	df000915 	stw	fp,36(sp)
   12e80:	df000904 	addi	fp,sp,36
   12e84:	e13ffd15 	stw	r4,-12(fp)
   12e88:	e17ffe15 	stw	r5,-8(fp)
   12e8c:	3005883a 	mov	r2,r6
   12e90:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12e94:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12e98:	e0bffd17 	ldw	r2,-12(fp)
   12e9c:	1000021e 	bne	r2,zero,12ea8 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   12ea0:	00800104 	movi	r2,4
   12ea4:	00007106 	br	1306c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12ea8:	e0bffd17 	ldw	r2,-12(fp)
   12eac:	10800003 	ldbu	r2,0(r2)
   12eb0:	10803fcc 	andi	r2,r2,255
   12eb4:	108000a0 	cmpeqi	r2,r2,2
   12eb8:	1000021e 	bne	r2,zero,12ec4 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   12ebc:	00800044 	movi	r2,1
   12ec0:	00006a06 	br	1306c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ec4:	0005303a 	rdctl	r2,status
   12ec8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ecc:	e0fffc17 	ldw	r3,-16(fp)
   12ed0:	00bfff84 	movi	r2,-2
   12ed4:	1884703a 	and	r2,r3,r2
   12ed8:	1001703a 	wrctl	status,r2
  
  return context;
   12edc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12ee0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   12ee4:	e0bffd17 	ldw	r2,-12(fp)
   12ee8:	10800283 	ldbu	r2,10(r2)
   12eec:	10803fcc 	andi	r2,r2,255
   12ef0:	10001d26 	beq	r2,zero,12f68 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   12ef4:	e0bfff03 	ldbu	r2,-4(fp)
   12ef8:	1080004c 	andi	r2,r2,1
   12efc:	10000b26 	beq	r2,zero,12f2c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12f00:	00000506 	br	12f18 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12f04:	000f883a 	mov	r7,zero
   12f08:	01800104 	movi	r6,4
   12f0c:	e17ffe17 	ldw	r5,-8(fp)
   12f10:	e13ffd17 	ldw	r4,-12(fp)
   12f14:	000eb300 	call	eb30 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12f18:	e0bffd17 	ldw	r2,-12(fp)
   12f1c:	10800283 	ldbu	r2,10(r2)
   12f20:	10803fcc 	andi	r2,r2,255
   12f24:	103ff71e 	bne	r2,zero,12f04 <OSQPostOpt+0x90>
   12f28:	00000506 	br	12f40 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12f2c:	000f883a 	mov	r7,zero
   12f30:	01800104 	movi	r6,4
   12f34:	e17ffe17 	ldw	r5,-8(fp)
   12f38:	e13ffd17 	ldw	r4,-12(fp)
   12f3c:	000eb300 	call	eb30 <OS_EventTaskRdy>
   12f40:	e0bff717 	ldw	r2,-36(fp)
   12f44:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f48:	e0bff817 	ldw	r2,-32(fp)
   12f4c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   12f50:	e0bfff03 	ldbu	r2,-4(fp)
   12f54:	1080010c 	andi	r2,r2,4
   12f58:	1000011e 	bne	r2,zero,12f60 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   12f5c:	000f6f40 	call	f6f4 <OS_Sched>
        }
        return (OS_ERR_NONE);
   12f60:	0005883a 	mov	r2,zero
   12f64:	00004106 	br	1306c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12f68:	e0bffd17 	ldw	r2,-12(fp)
   12f6c:	10800117 	ldw	r2,4(r2)
   12f70:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12f74:	e0bffa17 	ldw	r2,-24(fp)
   12f78:	10c0058b 	ldhu	r3,22(r2)
   12f7c:	e0bffa17 	ldw	r2,-24(fp)
   12f80:	1080050b 	ldhu	r2,20(r2)
   12f84:	18ffffcc 	andi	r3,r3,65535
   12f88:	10bfffcc 	andi	r2,r2,65535
   12f8c:	18800636 	bltu	r3,r2,12fa8 <OSQPostOpt+0x134>
   12f90:	e0bff717 	ldw	r2,-36(fp)
   12f94:	e0bff915 	stw	r2,-28(fp)
   12f98:	e0bff917 	ldw	r2,-28(fp)
   12f9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12fa0:	00800784 	movi	r2,30
   12fa4:	00003106 	br	1306c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   12fa8:	e0bfff03 	ldbu	r2,-4(fp)
   12fac:	1080008c 	andi	r2,r2,2
   12fb0:	10001326 	beq	r2,zero,13000 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   12fb4:	e0bffa17 	ldw	r2,-24(fp)
   12fb8:	10c00417 	ldw	r3,16(r2)
   12fbc:	e0bffa17 	ldw	r2,-24(fp)
   12fc0:	10800117 	ldw	r2,4(r2)
   12fc4:	1880041e 	bne	r3,r2,12fd8 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   12fc8:	e0bffa17 	ldw	r2,-24(fp)
   12fcc:	10c00217 	ldw	r3,8(r2)
   12fd0:	e0bffa17 	ldw	r2,-24(fp)
   12fd4:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   12fd8:	e0bffa17 	ldw	r2,-24(fp)
   12fdc:	10800417 	ldw	r2,16(r2)
   12fe0:	10ffff04 	addi	r3,r2,-4
   12fe4:	e0bffa17 	ldw	r2,-24(fp)
   12fe8:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   12fec:	e0bffa17 	ldw	r2,-24(fp)
   12ff0:	10800417 	ldw	r2,16(r2)
   12ff4:	e0fffe17 	ldw	r3,-8(fp)
   12ff8:	10c00015 	stw	r3,0(r2)
   12ffc:	00001006 	br	13040 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   13000:	e0bffa17 	ldw	r2,-24(fp)
   13004:	10800317 	ldw	r2,12(r2)
   13008:	11000104 	addi	r4,r2,4
   1300c:	e0fffa17 	ldw	r3,-24(fp)
   13010:	19000315 	stw	r4,12(r3)
   13014:	e0fffe17 	ldw	r3,-8(fp)
   13018:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   1301c:	e0bffa17 	ldw	r2,-24(fp)
   13020:	10c00317 	ldw	r3,12(r2)
   13024:	e0bffa17 	ldw	r2,-24(fp)
   13028:	10800217 	ldw	r2,8(r2)
   1302c:	1880041e 	bne	r3,r2,13040 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   13030:	e0bffa17 	ldw	r2,-24(fp)
   13034:	10c00117 	ldw	r3,4(r2)
   13038:	e0bffa17 	ldw	r2,-24(fp)
   1303c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   13040:	e0bffa17 	ldw	r2,-24(fp)
   13044:	1080058b 	ldhu	r2,22(r2)
   13048:	10800044 	addi	r2,r2,1
   1304c:	1007883a 	mov	r3,r2
   13050:	e0bffa17 	ldw	r2,-24(fp)
   13054:	10c0058d 	sth	r3,22(r2)
   13058:	e0bff717 	ldw	r2,-36(fp)
   1305c:	e0bffb15 	stw	r2,-20(fp)
   13060:	e0bffb17 	ldw	r2,-20(fp)
   13064:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13068:	0005883a 	mov	r2,zero
}
   1306c:	e037883a 	mov	sp,fp
   13070:	dfc00117 	ldw	ra,4(sp)
   13074:	df000017 	ldw	fp,0(sp)
   13078:	dec00204 	addi	sp,sp,8
   1307c:	f800283a 	ret

00013080 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   13080:	defff604 	addi	sp,sp,-40
   13084:	df000915 	stw	fp,36(sp)
   13088:	df000904 	addi	fp,sp,36
   1308c:	e13ffe15 	stw	r4,-8(fp)
   13090:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   13094:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   13098:	e0bffe17 	ldw	r2,-8(fp)
   1309c:	1000021e 	bne	r2,zero,130a8 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   130a0:	00800104 	movi	r2,4
   130a4:	00004906 	br	131cc <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   130a8:	e0bfff17 	ldw	r2,-4(fp)
   130ac:	1000021e 	bne	r2,zero,130b8 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   130b0:	00800244 	movi	r2,9
   130b4:	00004506 	br	131cc <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   130b8:	e0bffe17 	ldw	r2,-8(fp)
   130bc:	10800003 	ldbu	r2,0(r2)
   130c0:	10803fcc 	andi	r2,r2,255
   130c4:	108000a0 	cmpeqi	r2,r2,2
   130c8:	1000021e 	bne	r2,zero,130d4 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   130cc:	00800044 	movi	r2,1
   130d0:	00003e06 	br	131cc <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   130d4:	0005303a 	rdctl	r2,status
   130d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   130dc:	e0fffd17 	ldw	r3,-12(fp)
   130e0:	00bfff84 	movi	r2,-2
   130e4:	1884703a 	and	r2,r3,r2
   130e8:	1001703a 	wrctl	status,r2
  
  return context;
   130ec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   130f0:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   130f4:	e0bffe17 	ldw	r2,-8(fp)
   130f8:	10c00283 	ldbu	r3,10(r2)
   130fc:	e0bfff17 	ldw	r2,-4(fp)
   13100:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   13104:	e0bffe17 	ldw	r2,-8(fp)
   13108:	108002c4 	addi	r2,r2,11
   1310c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   13110:	e0bfff17 	ldw	r2,-4(fp)
   13114:	10800204 	addi	r2,r2,8
   13118:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1311c:	e03ff705 	stb	zero,-36(fp)
   13120:	00000b06 	br	13150 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   13124:	e0bff917 	ldw	r2,-28(fp)
   13128:	10c00044 	addi	r3,r2,1
   1312c:	e0fff915 	stw	r3,-28(fp)
   13130:	e0fff817 	ldw	r3,-32(fp)
   13134:	19000044 	addi	r4,r3,1
   13138:	e13ff815 	stw	r4,-32(fp)
   1313c:	18c00003 	ldbu	r3,0(r3)
   13140:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13144:	e0bff703 	ldbu	r2,-36(fp)
   13148:	10800044 	addi	r2,r2,1
   1314c:	e0bff705 	stb	r2,-36(fp)
   13150:	e0bff703 	ldbu	r2,-36(fp)
   13154:	108000f0 	cmpltui	r2,r2,3
   13158:	103ff21e 	bne	r2,zero,13124 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   1315c:	e0bffe17 	ldw	r2,-8(fp)
   13160:	10800117 	ldw	r2,4(r2)
   13164:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   13168:	e0bffc17 	ldw	r2,-16(fp)
   1316c:	1080058b 	ldhu	r2,22(r2)
   13170:	10bfffcc 	andi	r2,r2,65535
   13174:	10000626 	beq	r2,zero,13190 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   13178:	e0bffc17 	ldw	r2,-16(fp)
   1317c:	10800417 	ldw	r2,16(r2)
   13180:	10c00017 	ldw	r3,0(r2)
   13184:	e0bfff17 	ldw	r2,-4(fp)
   13188:	10c00015 	stw	r3,0(r2)
   1318c:	00000206 	br	13198 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   13190:	e0bfff17 	ldw	r2,-4(fp)
   13194:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   13198:	e0bffc17 	ldw	r2,-16(fp)
   1319c:	10c0058b 	ldhu	r3,22(r2)
   131a0:	e0bfff17 	ldw	r2,-4(fp)
   131a4:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   131a8:	e0bffc17 	ldw	r2,-16(fp)
   131ac:	10c0050b 	ldhu	r3,20(r2)
   131b0:	e0bfff17 	ldw	r2,-4(fp)
   131b4:	10c0018d 	sth	r3,6(r2)
   131b8:	e0bffa17 	ldw	r2,-24(fp)
   131bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131c0:	e0bffb17 	ldw	r2,-20(fp)
   131c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   131c8:	0005883a 	mov	r2,zero
}
   131cc:	e037883a 	mov	sp,fp
   131d0:	df000017 	ldw	fp,0(sp)
   131d4:	dec00104 	addi	sp,sp,4
   131d8:	f800283a 	ret

000131dc <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   131dc:	defffb04 	addi	sp,sp,-20
   131e0:	dfc00415 	stw	ra,16(sp)
   131e4:	df000315 	stw	fp,12(sp)
   131e8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   131ec:	01407804 	movi	r5,480
   131f0:	010000b4 	movhi	r4,2
   131f4:	213c6704 	addi	r4,r4,-3684
   131f8:	000f6380 	call	f638 <OS_MemClr>
    pq1 = &OSQTbl[0];
   131fc:	008000b4 	movhi	r2,2
   13200:	10bc6704 	addi	r2,r2,-3684
   13204:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   13208:	008000b4 	movhi	r2,2
   1320c:	10bc6d04 	addi	r2,r2,-3660
   13210:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   13214:	e03ffd0d 	sth	zero,-12(fp)
   13218:	00000c06 	br	1324c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   1321c:	e0bffe17 	ldw	r2,-8(fp)
   13220:	e0ffff17 	ldw	r3,-4(fp)
   13224:	10c00015 	stw	r3,0(r2)
        pq1++;
   13228:	e0bffe17 	ldw	r2,-8(fp)
   1322c:	10800604 	addi	r2,r2,24
   13230:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   13234:	e0bfff17 	ldw	r2,-4(fp)
   13238:	10800604 	addi	r2,r2,24
   1323c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   13240:	e0bffd0b 	ldhu	r2,-12(fp)
   13244:	10800044 	addi	r2,r2,1
   13248:	e0bffd0d 	sth	r2,-12(fp)
   1324c:	e0bffd0b 	ldhu	r2,-12(fp)
   13250:	108004f0 	cmpltui	r2,r2,19
   13254:	103ff11e 	bne	r2,zero,1321c <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   13258:	e0bffe17 	ldw	r2,-8(fp)
   1325c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   13260:	008000b4 	movhi	r2,2
   13264:	10b66504 	addi	r2,r2,-9836
   13268:	00c000b4 	movhi	r3,2
   1326c:	18fc6704 	addi	r3,r3,-3684
   13270:	10c00015 	stw	r3,0(r2)
#endif
}
   13274:	0001883a 	nop
   13278:	e037883a 	mov	sp,fp
   1327c:	dfc00117 	ldw	ra,4(sp)
   13280:	df000017 	ldw	fp,0(sp)
   13284:	dec00204 	addi	sp,sp,8
   13288:	f800283a 	ret

0001328c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   1328c:	defffa04 	addi	sp,sp,-24
   13290:	df000515 	stw	fp,20(sp)
   13294:	df000504 	addi	fp,sp,20
   13298:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1329c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   132a0:	e0bfff17 	ldw	r2,-4(fp)
   132a4:	1000021e 	bne	r2,zero,132b0 <OSSemAccept+0x24>
        return (0);
   132a8:	0005883a 	mov	r2,zero
   132ac:	00001f06 	br	1332c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   132b0:	e0bfff17 	ldw	r2,-4(fp)
   132b4:	10800003 	ldbu	r2,0(r2)
   132b8:	10803fcc 	andi	r2,r2,255
   132bc:	108000e0 	cmpeqi	r2,r2,3
   132c0:	1000021e 	bne	r2,zero,132cc <OSSemAccept+0x40>
        return (0);
   132c4:	0005883a 	mov	r2,zero
   132c8:	00001806 	br	1332c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   132cc:	0005303a 	rdctl	r2,status
   132d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   132d4:	e0fffe17 	ldw	r3,-8(fp)
   132d8:	00bfff84 	movi	r2,-2
   132dc:	1884703a 	and	r2,r3,r2
   132e0:	1001703a 	wrctl	status,r2
  
  return context;
   132e4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   132e8:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   132ec:	e0bfff17 	ldw	r2,-4(fp)
   132f0:	1080020b 	ldhu	r2,8(r2)
   132f4:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   132f8:	e0bffd0b 	ldhu	r2,-12(fp)
   132fc:	10000626 	beq	r2,zero,13318 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   13300:	e0bfff17 	ldw	r2,-4(fp)
   13304:	1080020b 	ldhu	r2,8(r2)
   13308:	10bfffc4 	addi	r2,r2,-1
   1330c:	1007883a 	mov	r3,r2
   13310:	e0bfff17 	ldw	r2,-4(fp)
   13314:	10c0020d 	sth	r3,8(r2)
   13318:	e0bffb17 	ldw	r2,-20(fp)
   1331c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13320:	e0bffc17 	ldw	r2,-16(fp)
   13324:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   13328:	e0bffd0b 	ldhu	r2,-12(fp)
}
   1332c:	e037883a 	mov	sp,fp
   13330:	df000017 	ldw	fp,0(sp)
   13334:	dec00104 	addi	sp,sp,4
   13338:	f800283a 	ret

0001333c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   1333c:	defff904 	addi	sp,sp,-28
   13340:	dfc00615 	stw	ra,24(sp)
   13344:	df000515 	stw	fp,20(sp)
   13348:	df000504 	addi	fp,sp,20
   1334c:	2005883a 	mov	r2,r4
   13350:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13354:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13358:	008000b4 	movhi	r2,2
   1335c:	10b66804 	addi	r2,r2,-9824
   13360:	10800003 	ldbu	r2,0(r2)
   13364:	10803fcc 	andi	r2,r2,255
   13368:	10000226 	beq	r2,zero,13374 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   1336c:	0005883a 	mov	r2,zero
   13370:	00002d06 	br	13428 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13374:	0005303a 	rdctl	r2,status
   13378:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1337c:	e0fffe17 	ldw	r3,-8(fp)
   13380:	00bfff84 	movi	r2,-2
   13384:	1884703a 	and	r2,r3,r2
   13388:	1001703a 	wrctl	status,r2
  
  return context;
   1338c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13390:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   13394:	008000b4 	movhi	r2,2
   13398:	10b66704 	addi	r2,r2,-9828
   1339c:	10800017 	ldw	r2,0(r2)
   133a0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   133a4:	008000b4 	movhi	r2,2
   133a8:	10b66704 	addi	r2,r2,-9828
   133ac:	10800017 	ldw	r2,0(r2)
   133b0:	10000726 	beq	r2,zero,133d0 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   133b4:	008000b4 	movhi	r2,2
   133b8:	10b66704 	addi	r2,r2,-9828
   133bc:	10800017 	ldw	r2,0(r2)
   133c0:	10c00117 	ldw	r3,4(r2)
   133c4:	008000b4 	movhi	r2,2
   133c8:	10b66704 	addi	r2,r2,-9828
   133cc:	10c00015 	stw	r3,0(r2)
   133d0:	e0bffb17 	ldw	r2,-20(fp)
   133d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   133d8:	e0bffc17 	ldw	r2,-16(fp)
   133dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   133e0:	e0bffd17 	ldw	r2,-12(fp)
   133e4:	10000f26 	beq	r2,zero,13424 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   133e8:	e0bffd17 	ldw	r2,-12(fp)
   133ec:	00c000c4 	movi	r3,3
   133f0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   133f4:	e0bffd17 	ldw	r2,-12(fp)
   133f8:	e0ffff0b 	ldhu	r3,-4(fp)
   133fc:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   13400:	e0bffd17 	ldw	r2,-12(fp)
   13404:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   13408:	e0bffd17 	ldw	r2,-12(fp)
   1340c:	00c00fc4 	movi	r3,63
   13410:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   13414:	e0bffd17 	ldw	r2,-12(fp)
   13418:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   1341c:	e13ffd17 	ldw	r4,-12(fp)
   13420:	000f1c40 	call	f1c4 <OS_EventWaitListInit>
    }
    return (pevent);
   13424:	e0bffd17 	ldw	r2,-12(fp)
}
   13428:	e037883a 	mov	sp,fp
   1342c:	dfc00117 	ldw	ra,4(sp)
   13430:	df000017 	ldw	fp,0(sp)
   13434:	dec00204 	addi	sp,sp,8
   13438:	f800283a 	ret

0001343c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1343c:	defff304 	addi	sp,sp,-52
   13440:	dfc00c15 	stw	ra,48(sp)
   13444:	df000b15 	stw	fp,44(sp)
   13448:	df000b04 	addi	fp,sp,44
   1344c:	e13ffd15 	stw	r4,-12(fp)
   13450:	2805883a 	mov	r2,r5
   13454:	e1bfff15 	stw	r6,-4(fp)
   13458:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1345c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13460:	e0bfff17 	ldw	r2,-4(fp)
   13464:	1000021e 	bne	r2,zero,13470 <OSSemDel+0x34>
        return (pevent);
   13468:	e0bffd17 	ldw	r2,-12(fp)
   1346c:	00008806 	br	13690 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13470:	e0bffd17 	ldw	r2,-12(fp)
   13474:	1000051e 	bne	r2,zero,1348c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13478:	e0bfff17 	ldw	r2,-4(fp)
   1347c:	00c00104 	movi	r3,4
   13480:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13484:	e0bffd17 	ldw	r2,-12(fp)
   13488:	00008106 	br	13690 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1348c:	e0bffd17 	ldw	r2,-12(fp)
   13490:	10800003 	ldbu	r2,0(r2)
   13494:	10803fcc 	andi	r2,r2,255
   13498:	108000e0 	cmpeqi	r2,r2,3
   1349c:	1000051e 	bne	r2,zero,134b4 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   134a0:	e0bfff17 	ldw	r2,-4(fp)
   134a4:	00c00044 	movi	r3,1
   134a8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   134ac:	e0bffd17 	ldw	r2,-12(fp)
   134b0:	00007706 	br	13690 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   134b4:	008000b4 	movhi	r2,2
   134b8:	10b66804 	addi	r2,r2,-9824
   134bc:	10800003 	ldbu	r2,0(r2)
   134c0:	10803fcc 	andi	r2,r2,255
   134c4:	10000526 	beq	r2,zero,134dc <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   134c8:	e0bfff17 	ldw	r2,-4(fp)
   134cc:	00c003c4 	movi	r3,15
   134d0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   134d4:	e0bffd17 	ldw	r2,-12(fp)
   134d8:	00006d06 	br	13690 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134dc:	0005303a 	rdctl	r2,status
   134e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134e4:	e0fffc17 	ldw	r3,-16(fp)
   134e8:	00bfff84 	movi	r2,-2
   134ec:	1884703a 	and	r2,r3,r2
   134f0:	1001703a 	wrctl	status,r2
  
  return context;
   134f4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   134f8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   134fc:	e0bffd17 	ldw	r2,-12(fp)
   13500:	10800283 	ldbu	r2,10(r2)
   13504:	10803fcc 	andi	r2,r2,255
   13508:	10000326 	beq	r2,zero,13518 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1350c:	00800044 	movi	r2,1
   13510:	e0bff505 	stb	r2,-44(fp)
   13514:	00000106 	br	1351c <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   13518:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1351c:	e0bffe03 	ldbu	r2,-8(fp)
   13520:	10000326 	beq	r2,zero,13530 <OSSemDel+0xf4>
   13524:	10800060 	cmpeqi	r2,r2,1
   13528:	10002c1e 	bne	r2,zero,135dc <OSSemDel+0x1a0>
   1352c:	00004d06 	br	13664 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   13530:	e0bff503 	ldbu	r2,-44(fp)
   13534:	10001a1e 	bne	r2,zero,135a0 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   13538:	e0bffd17 	ldw	r2,-12(fp)
   1353c:	00c00fc4 	movi	r3,63
   13540:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   13544:	e0bffd17 	ldw	r2,-12(fp)
   13548:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1354c:	e0bffd17 	ldw	r2,-12(fp)
   13550:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   13554:	008000b4 	movhi	r2,2
   13558:	10b66704 	addi	r2,r2,-9828
   1355c:	10c00017 	ldw	r3,0(r2)
   13560:	e0bffd17 	ldw	r2,-12(fp)
   13564:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   13568:	e0bffd17 	ldw	r2,-12(fp)
   1356c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   13570:	008000b4 	movhi	r2,2
   13574:	10b66704 	addi	r2,r2,-9828
   13578:	e0fffd17 	ldw	r3,-12(fp)
   1357c:	10c00015 	stw	r3,0(r2)
   13580:	e0bff717 	ldw	r2,-36(fp)
   13584:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13588:	e0bff817 	ldw	r2,-32(fp)
   1358c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   13590:	e0bfff17 	ldw	r2,-4(fp)
   13594:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   13598:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1359c:	00003b06 	br	1368c <OSSemDel+0x250>
   135a0:	e0bff717 	ldw	r2,-36(fp)
   135a4:	e0bff915 	stw	r2,-28(fp)
   135a8:	e0bff917 	ldw	r2,-28(fp)
   135ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   135b0:	e0bfff17 	ldw	r2,-4(fp)
   135b4:	00c01244 	movi	r3,73
   135b8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   135bc:	e0bffd17 	ldw	r2,-12(fp)
   135c0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   135c4:	00003106 	br	1368c <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   135c8:	000f883a 	mov	r7,zero
   135cc:	01800044 	movi	r6,1
   135d0:	000b883a 	mov	r5,zero
   135d4:	e13ffd17 	ldw	r4,-12(fp)
   135d8:	000eb300 	call	eb30 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   135dc:	e0bffd17 	ldw	r2,-12(fp)
   135e0:	10800283 	ldbu	r2,10(r2)
   135e4:	10803fcc 	andi	r2,r2,255
   135e8:	103ff71e 	bne	r2,zero,135c8 <OSSemDel+0x18c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   135ec:	e0bffd17 	ldw	r2,-12(fp)
   135f0:	00c00fc4 	movi	r3,63
   135f4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   135f8:	e0bffd17 	ldw	r2,-12(fp)
   135fc:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13600:	e0bffd17 	ldw	r2,-12(fp)
   13604:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   13608:	008000b4 	movhi	r2,2
   1360c:	10b66704 	addi	r2,r2,-9828
   13610:	10c00017 	ldw	r3,0(r2)
   13614:	e0bffd17 	ldw	r2,-12(fp)
   13618:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1361c:	e0bffd17 	ldw	r2,-12(fp)
   13620:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   13624:	008000b4 	movhi	r2,2
   13628:	10b66704 	addi	r2,r2,-9828
   1362c:	e0fffd17 	ldw	r3,-12(fp)
   13630:	10c00015 	stw	r3,0(r2)
   13634:	e0bff717 	ldw	r2,-36(fp)
   13638:	e0bffa15 	stw	r2,-24(fp)
   1363c:	e0bffa17 	ldw	r2,-24(fp)
   13640:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   13644:	e0bff503 	ldbu	r2,-44(fp)
   13648:	10800058 	cmpnei	r2,r2,1
   1364c:	1000011e 	bne	r2,zero,13654 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   13650:	000f6f40 	call	f6f4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   13654:	e0bfff17 	ldw	r2,-4(fp)
   13658:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   1365c:	e03ff615 	stw	zero,-40(fp)
             break;
   13660:	00000a06 	br	1368c <OSSemDel+0x250>
   13664:	e0bff717 	ldw	r2,-36(fp)
   13668:	e0bffb15 	stw	r2,-20(fp)
   1366c:	e0bffb17 	ldw	r2,-20(fp)
   13670:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   13674:	e0bfff17 	ldw	r2,-4(fp)
   13678:	00c001c4 	movi	r3,7
   1367c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   13680:	e0bffd17 	ldw	r2,-12(fp)
   13684:	e0bff615 	stw	r2,-40(fp)
             break;
   13688:	0001883a 	nop
    }
    return (pevent_return);
   1368c:	e0bff617 	ldw	r2,-40(fp)
}
   13690:	e037883a 	mov	sp,fp
   13694:	dfc00117 	ldw	ra,4(sp)
   13698:	df000017 	ldw	fp,0(sp)
   1369c:	dec00204 	addi	sp,sp,8
   136a0:	f800283a 	ret

000136a4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   136a4:	defff504 	addi	sp,sp,-44
   136a8:	dfc00a15 	stw	ra,40(sp)
   136ac:	df000915 	stw	fp,36(sp)
   136b0:	df000904 	addi	fp,sp,36
   136b4:	e13ffd15 	stw	r4,-12(fp)
   136b8:	2805883a 	mov	r2,r5
   136bc:	e1bfff15 	stw	r6,-4(fp)
   136c0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   136c4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   136c8:	e0bfff17 	ldw	r2,-4(fp)
   136cc:	10008a26 	beq	r2,zero,138f8 <OSSemPend+0x254>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   136d0:	e0bffd17 	ldw	r2,-12(fp)
   136d4:	1000041e 	bne	r2,zero,136e8 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   136d8:	e0bfff17 	ldw	r2,-4(fp)
   136dc:	00c00104 	movi	r3,4
   136e0:	10c00005 	stb	r3,0(r2)
        return;
   136e4:	00008506 	br	138fc <OSSemPend+0x258>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   136e8:	e0bffd17 	ldw	r2,-12(fp)
   136ec:	10800003 	ldbu	r2,0(r2)
   136f0:	10803fcc 	andi	r2,r2,255
   136f4:	108000e0 	cmpeqi	r2,r2,3
   136f8:	1000041e 	bne	r2,zero,1370c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   136fc:	e0bfff17 	ldw	r2,-4(fp)
   13700:	00c00044 	movi	r3,1
   13704:	10c00005 	stb	r3,0(r2)
        return;
   13708:	00007c06 	br	138fc <OSSemPend+0x258>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1370c:	008000b4 	movhi	r2,2
   13710:	10b66804 	addi	r2,r2,-9824
   13714:	10800003 	ldbu	r2,0(r2)
   13718:	10803fcc 	andi	r2,r2,255
   1371c:	10000426 	beq	r2,zero,13730 <OSSemPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   13720:	e0bfff17 	ldw	r2,-4(fp)
   13724:	00c00084 	movi	r3,2
   13728:	10c00005 	stb	r3,0(r2)
        return;
   1372c:	00007306 	br	138fc <OSSemPend+0x258>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   13730:	008000b4 	movhi	r2,2
   13734:	10b65a04 	addi	r2,r2,-9880
   13738:	10800003 	ldbu	r2,0(r2)
   1373c:	10803fcc 	andi	r2,r2,255
   13740:	10000426 	beq	r2,zero,13754 <OSSemPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   13744:	e0bfff17 	ldw	r2,-4(fp)
   13748:	00c00344 	movi	r3,13
   1374c:	10c00005 	stb	r3,0(r2)
        return;
   13750:	00006a06 	br	138fc <OSSemPend+0x258>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13754:	0005303a 	rdctl	r2,status
   13758:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1375c:	e0fffc17 	ldw	r3,-16(fp)
   13760:	00bfff84 	movi	r2,-2
   13764:	1884703a 	and	r2,r3,r2
   13768:	1001703a 	wrctl	status,r2
  
  return context;
   1376c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13770:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   13774:	e0bffd17 	ldw	r2,-12(fp)
   13778:	1080020b 	ldhu	r2,8(r2)
   1377c:	10bfffcc 	andi	r2,r2,65535
   13780:	10000d26 	beq	r2,zero,137b8 <OSSemPend+0x114>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   13784:	e0bffd17 	ldw	r2,-12(fp)
   13788:	1080020b 	ldhu	r2,8(r2)
   1378c:	10bfffc4 	addi	r2,r2,-1
   13790:	1007883a 	mov	r3,r2
   13794:	e0bffd17 	ldw	r2,-12(fp)
   13798:	10c0020d 	sth	r3,8(r2)
   1379c:	e0bff717 	ldw	r2,-36(fp)
   137a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   137a4:	e0bff817 	ldw	r2,-32(fp)
   137a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   137ac:	e0bfff17 	ldw	r2,-4(fp)
   137b0:	10000005 	stb	zero,0(r2)
        return;
   137b4:	00005106 	br	138fc <OSSemPend+0x258>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   137b8:	008000b4 	movhi	r2,2
   137bc:	10b66904 	addi	r2,r2,-9820
   137c0:	10c00017 	ldw	r3,0(r2)
   137c4:	008000b4 	movhi	r2,2
   137c8:	10b66904 	addi	r2,r2,-9820
   137cc:	10800017 	ldw	r2,0(r2)
   137d0:	10800c03 	ldbu	r2,48(r2)
   137d4:	10800054 	ori	r2,r2,1
   137d8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   137dc:	008000b4 	movhi	r2,2
   137e0:	10b66904 	addi	r2,r2,-9820
   137e4:	10800017 	ldw	r2,0(r2)
   137e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   137ec:	008000b4 	movhi	r2,2
   137f0:	10b66904 	addi	r2,r2,-9820
   137f4:	10800017 	ldw	r2,0(r2)
   137f8:	e0fffe0b 	ldhu	r3,-8(fp)
   137fc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   13800:	e13ffd17 	ldw	r4,-12(fp)
   13804:	000ece40 	call	ece4 <OS_EventTaskWait>
   13808:	e0bff717 	ldw	r2,-36(fp)
   1380c:	e0bffb15 	stw	r2,-20(fp)
   13810:	e0bffb17 	ldw	r2,-20(fp)
   13814:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   13818:	000f6f40 	call	f6f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1381c:	0005303a 	rdctl	r2,status
   13820:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13824:	e0fff917 	ldw	r3,-28(fp)
   13828:	00bfff84 	movi	r2,-2
   1382c:	1884703a 	and	r2,r3,r2
   13830:	1001703a 	wrctl	status,r2
  
  return context;
   13834:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   13838:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1383c:	008000b4 	movhi	r2,2
   13840:	10b66904 	addi	r2,r2,-9820
   13844:	10800017 	ldw	r2,0(r2)
   13848:	10800c43 	ldbu	r2,49(r2)
   1384c:	10803fcc 	andi	r2,r2,255
   13850:	10000326 	beq	r2,zero,13860 <OSSemPend+0x1bc>
   13854:	108000a0 	cmpeqi	r2,r2,2
   13858:	1000041e 	bne	r2,zero,1386c <OSSemPend+0x1c8>
   1385c:	00000706 	br	1387c <OSSemPend+0x1d8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   13860:	e0bfff17 	ldw	r2,-4(fp)
   13864:	10000005 	stb	zero,0(r2)
             break;
   13868:	00000e06 	br	138a4 <OSSemPend+0x200>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1386c:	e0bfff17 	ldw	r2,-4(fp)
   13870:	00c00384 	movi	r3,14
   13874:	10c00005 	stb	r3,0(r2)
             break;
   13878:	00000a06 	br	138a4 <OSSemPend+0x200>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   1387c:	008000b4 	movhi	r2,2
   13880:	10b66904 	addi	r2,r2,-9820
   13884:	10800017 	ldw	r2,0(r2)
   13888:	e17ffd17 	ldw	r5,-12(fp)
   1388c:	1009883a 	mov	r4,r2
   13890:	000f00c0 	call	f00c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   13894:	e0bfff17 	ldw	r2,-4(fp)
   13898:	00c00284 	movi	r3,10
   1389c:	10c00005 	stb	r3,0(r2)
             break;
   138a0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   138a4:	008000b4 	movhi	r2,2
   138a8:	10b66904 	addi	r2,r2,-9820
   138ac:	10800017 	ldw	r2,0(r2)
   138b0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   138b4:	008000b4 	movhi	r2,2
   138b8:	10b66904 	addi	r2,r2,-9820
   138bc:	10800017 	ldw	r2,0(r2)
   138c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   138c4:	008000b4 	movhi	r2,2
   138c8:	10b66904 	addi	r2,r2,-9820
   138cc:	10800017 	ldw	r2,0(r2)
   138d0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   138d4:	008000b4 	movhi	r2,2
   138d8:	10b66904 	addi	r2,r2,-9820
   138dc:	10800017 	ldw	r2,0(r2)
   138e0:	10000815 	stw	zero,32(r2)
   138e4:	e0bff717 	ldw	r2,-36(fp)
   138e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   138ec:	e0bffa17 	ldw	r2,-24(fp)
   138f0:	1001703a 	wrctl	status,r2
   138f4:	00000106 	br	138fc <OSSemPend+0x258>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   138f8:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   138fc:	e037883a 	mov	sp,fp
   13900:	dfc00117 	ldw	ra,4(sp)
   13904:	df000017 	ldw	fp,0(sp)
   13908:	dec00204 	addi	sp,sp,8
   1390c:	f800283a 	ret

00013910 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13910:	defff604 	addi	sp,sp,-40
   13914:	dfc00915 	stw	ra,36(sp)
   13918:	df000815 	stw	fp,32(sp)
   1391c:	df000804 	addi	fp,sp,32
   13920:	e13ffd15 	stw	r4,-12(fp)
   13924:	2805883a 	mov	r2,r5
   13928:	e1bfff15 	stw	r6,-4(fp)
   1392c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13930:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13934:	e0bfff17 	ldw	r2,-4(fp)
   13938:	1000021e 	bne	r2,zero,13944 <OSSemPendAbort+0x34>
        return (0);
   1393c:	0005883a 	mov	r2,zero
   13940:	00004906 	br	13a68 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13944:	e0bffd17 	ldw	r2,-12(fp)
   13948:	1000051e 	bne	r2,zero,13960 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1394c:	e0bfff17 	ldw	r2,-4(fp)
   13950:	00c00104 	movi	r3,4
   13954:	10c00005 	stb	r3,0(r2)
        return (0);
   13958:	0005883a 	mov	r2,zero
   1395c:	00004206 	br	13a68 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13960:	e0bffd17 	ldw	r2,-12(fp)
   13964:	10800003 	ldbu	r2,0(r2)
   13968:	10803fcc 	andi	r2,r2,255
   1396c:	108000e0 	cmpeqi	r2,r2,3
   13970:	1000051e 	bne	r2,zero,13988 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13974:	e0bfff17 	ldw	r2,-4(fp)
   13978:	00c00044 	movi	r3,1
   1397c:	10c00005 	stb	r3,0(r2)
        return (0);
   13980:	0005883a 	mov	r2,zero
   13984:	00003806 	br	13a68 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13988:	0005303a 	rdctl	r2,status
   1398c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13990:	e0fffc17 	ldw	r3,-16(fp)
   13994:	00bfff84 	movi	r2,-2
   13998:	1884703a 	and	r2,r3,r2
   1399c:	1001703a 	wrctl	status,r2
  
  return context;
   139a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   139a4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   139a8:	e0bffd17 	ldw	r2,-12(fp)
   139ac:	10800283 	ldbu	r2,10(r2)
   139b0:	10803fcc 	andi	r2,r2,255
   139b4:	10002526 	beq	r2,zero,13a4c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   139b8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   139bc:	e0bffe03 	ldbu	r2,-8(fp)
   139c0:	10800060 	cmpeqi	r2,r2,1
   139c4:	10000e26 	beq	r2,zero,13a00 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   139c8:	00000806 	br	139ec <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   139cc:	01c00084 	movi	r7,2
   139d0:	01800044 	movi	r6,1
   139d4:	000b883a 	mov	r5,zero
   139d8:	e13ffd17 	ldw	r4,-12(fp)
   139dc:	000eb300 	call	eb30 <OS_EventTaskRdy>
                     nbr_tasks++;
   139e0:	e0bff803 	ldbu	r2,-32(fp)
   139e4:	10800044 	addi	r2,r2,1
   139e8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   139ec:	e0bffd17 	ldw	r2,-12(fp)
   139f0:	10800283 	ldbu	r2,10(r2)
   139f4:	10803fcc 	andi	r2,r2,255
   139f8:	103ff41e 	bne	r2,zero,139cc <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   139fc:	00000906 	br	13a24 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13a00:	01c00084 	movi	r7,2
   13a04:	01800044 	movi	r6,1
   13a08:	000b883a 	mov	r5,zero
   13a0c:	e13ffd17 	ldw	r4,-12(fp)
   13a10:	000eb300 	call	eb30 <OS_EventTaskRdy>
                 nbr_tasks++;
   13a14:	e0bff803 	ldbu	r2,-32(fp)
   13a18:	10800044 	addi	r2,r2,1
   13a1c:	e0bff805 	stb	r2,-32(fp)
                 break;
   13a20:	0001883a 	nop
   13a24:	e0bff917 	ldw	r2,-28(fp)
   13a28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a2c:	e0bffa17 	ldw	r2,-24(fp)
   13a30:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13a34:	000f6f40 	call	f6f4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   13a38:	e0bfff17 	ldw	r2,-4(fp)
   13a3c:	00c00384 	movi	r3,14
   13a40:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   13a44:	e0bff803 	ldbu	r2,-32(fp)
   13a48:	00000706 	br	13a68 <OSSemPendAbort+0x158>
   13a4c:	e0bff917 	ldw	r2,-28(fp)
   13a50:	e0bffb15 	stw	r2,-20(fp)
   13a54:	e0bffb17 	ldw	r2,-20(fp)
   13a58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13a5c:	e0bfff17 	ldw	r2,-4(fp)
   13a60:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   13a64:	0005883a 	mov	r2,zero
}
   13a68:	e037883a 	mov	sp,fp
   13a6c:	dfc00117 	ldw	ra,4(sp)
   13a70:	df000017 	ldw	fp,0(sp)
   13a74:	dec00204 	addi	sp,sp,8
   13a78:	f800283a 	ret

00013a7c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   13a7c:	defff804 	addi	sp,sp,-32
   13a80:	dfc00715 	stw	ra,28(sp)
   13a84:	df000615 	stw	fp,24(sp)
   13a88:	df000604 	addi	fp,sp,24
   13a8c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13a90:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13a94:	e0bfff17 	ldw	r2,-4(fp)
   13a98:	1000021e 	bne	r2,zero,13aa4 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   13a9c:	00800104 	movi	r2,4
   13aa0:	00003506 	br	13b78 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13aa4:	e0bfff17 	ldw	r2,-4(fp)
   13aa8:	10800003 	ldbu	r2,0(r2)
   13aac:	10803fcc 	andi	r2,r2,255
   13ab0:	108000e0 	cmpeqi	r2,r2,3
   13ab4:	1000021e 	bne	r2,zero,13ac0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   13ab8:	00800044 	movi	r2,1
   13abc:	00002e06 	br	13b78 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ac0:	0005303a 	rdctl	r2,status
   13ac4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ac8:	e0fffe17 	ldw	r3,-8(fp)
   13acc:	00bfff84 	movi	r2,-2
   13ad0:	1884703a 	and	r2,r3,r2
   13ad4:	1001703a 	wrctl	status,r2
  
  return context;
   13ad8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13adc:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   13ae0:	e0bfff17 	ldw	r2,-4(fp)
   13ae4:	10800283 	ldbu	r2,10(r2)
   13ae8:	10803fcc 	andi	r2,r2,255
   13aec:	10000c26 	beq	r2,zero,13b20 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13af0:	000f883a 	mov	r7,zero
   13af4:	01800044 	movi	r6,1
   13af8:	000b883a 	mov	r5,zero
   13afc:	e13fff17 	ldw	r4,-4(fp)
   13b00:	000eb300 	call	eb30 <OS_EventTaskRdy>
   13b04:	e0bffa17 	ldw	r2,-24(fp)
   13b08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b0c:	e0bffb17 	ldw	r2,-20(fp)
   13b10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13b14:	000f6f40 	call	f6f4 <OS_Sched>
        return (OS_ERR_NONE);
   13b18:	0005883a 	mov	r2,zero
   13b1c:	00001606 	br	13b78 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   13b20:	e0bfff17 	ldw	r2,-4(fp)
   13b24:	1080020b 	ldhu	r2,8(r2)
   13b28:	10ffffcc 	andi	r3,r2,65535
   13b2c:	00bfffd4 	movui	r2,65535
   13b30:	18800c26 	beq	r3,r2,13b64 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   13b34:	e0bfff17 	ldw	r2,-4(fp)
   13b38:	1080020b 	ldhu	r2,8(r2)
   13b3c:	10800044 	addi	r2,r2,1
   13b40:	1007883a 	mov	r3,r2
   13b44:	e0bfff17 	ldw	r2,-4(fp)
   13b48:	10c0020d 	sth	r3,8(r2)
   13b4c:	e0bffa17 	ldw	r2,-24(fp)
   13b50:	e0bffc15 	stw	r2,-16(fp)
   13b54:	e0bffc17 	ldw	r2,-16(fp)
   13b58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   13b5c:	0005883a 	mov	r2,zero
   13b60:	00000506 	br	13b78 <OSSemPost+0xfc>
   13b64:	e0bffa17 	ldw	r2,-24(fp)
   13b68:	e0bffd15 	stw	r2,-12(fp)
   13b6c:	e0bffd17 	ldw	r2,-12(fp)
   13b70:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   13b74:	00800c84 	movi	r2,50
}
   13b78:	e037883a 	mov	sp,fp
   13b7c:	dfc00117 	ldw	ra,4(sp)
   13b80:	df000017 	ldw	fp,0(sp)
   13b84:	dec00204 	addi	sp,sp,8
   13b88:	f800283a 	ret

00013b8c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   13b8c:	defff704 	addi	sp,sp,-36
   13b90:	df000815 	stw	fp,32(sp)
   13b94:	df000804 	addi	fp,sp,32
   13b98:	e13ffe15 	stw	r4,-8(fp)
   13b9c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13ba0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13ba4:	e0bffe17 	ldw	r2,-8(fp)
   13ba8:	1000021e 	bne	r2,zero,13bb4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   13bac:	00800104 	movi	r2,4
   13bb0:	00003606 	br	13c8c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   13bb4:	e0bfff17 	ldw	r2,-4(fp)
   13bb8:	1000021e 	bne	r2,zero,13bc4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   13bbc:	00800244 	movi	r2,9
   13bc0:	00003206 	br	13c8c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13bc4:	e0bffe17 	ldw	r2,-8(fp)
   13bc8:	10800003 	ldbu	r2,0(r2)
   13bcc:	10803fcc 	andi	r2,r2,255
   13bd0:	108000e0 	cmpeqi	r2,r2,3
   13bd4:	1000021e 	bne	r2,zero,13be0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   13bd8:	00800044 	movi	r2,1
   13bdc:	00002b06 	br	13c8c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13be0:	0005303a 	rdctl	r2,status
   13be4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13be8:	e0fffd17 	ldw	r3,-12(fp)
   13bec:	00bfff84 	movi	r2,-2
   13bf0:	1884703a 	and	r2,r3,r2
   13bf4:	1001703a 	wrctl	status,r2
  
  return context;
   13bf8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13bfc:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   13c00:	e0bffe17 	ldw	r2,-8(fp)
   13c04:	10c00283 	ldbu	r3,10(r2)
   13c08:	e0bfff17 	ldw	r2,-4(fp)
   13c0c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   13c10:	e0bffe17 	ldw	r2,-8(fp)
   13c14:	108002c4 	addi	r2,r2,11
   13c18:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   13c1c:	e0bfff17 	ldw	r2,-4(fp)
   13c20:	10800084 	addi	r2,r2,2
   13c24:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13c28:	e03ffa05 	stb	zero,-24(fp)
   13c2c:	00000b06 	br	13c5c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   13c30:	e0bff917 	ldw	r2,-28(fp)
   13c34:	10c00044 	addi	r3,r2,1
   13c38:	e0fff915 	stw	r3,-28(fp)
   13c3c:	e0fff817 	ldw	r3,-32(fp)
   13c40:	19000044 	addi	r4,r3,1
   13c44:	e13ff815 	stw	r4,-32(fp)
   13c48:	18c00003 	ldbu	r3,0(r3)
   13c4c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13c50:	e0bffa03 	ldbu	r2,-24(fp)
   13c54:	10800044 	addi	r2,r2,1
   13c58:	e0bffa05 	stb	r2,-24(fp)
   13c5c:	e0bffa03 	ldbu	r2,-24(fp)
   13c60:	108000f0 	cmpltui	r2,r2,3
   13c64:	103ff21e 	bne	r2,zero,13c30 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   13c68:	e0bffe17 	ldw	r2,-8(fp)
   13c6c:	10c0020b 	ldhu	r3,8(r2)
   13c70:	e0bfff17 	ldw	r2,-4(fp)
   13c74:	10c0000d 	sth	r3,0(r2)
   13c78:	e0bffb17 	ldw	r2,-20(fp)
   13c7c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c80:	e0bffc17 	ldw	r2,-16(fp)
   13c84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13c88:	0005883a 	mov	r2,zero
}
   13c8c:	e037883a 	mov	sp,fp
   13c90:	df000017 	ldw	fp,0(sp)
   13c94:	dec00104 	addi	sp,sp,4
   13c98:	f800283a 	ret

00013c9c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   13c9c:	defff904 	addi	sp,sp,-28
   13ca0:	df000615 	stw	fp,24(sp)
   13ca4:	df000604 	addi	fp,sp,24
   13ca8:	e13ffd15 	stw	r4,-12(fp)
   13cac:	2805883a 	mov	r2,r5
   13cb0:	e1bfff15 	stw	r6,-4(fp)
   13cb4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13cb8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13cbc:	e0bfff17 	ldw	r2,-4(fp)
   13cc0:	10003126 	beq	r2,zero,13d88 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13cc4:	e0bffd17 	ldw	r2,-12(fp)
   13cc8:	1000041e 	bne	r2,zero,13cdc <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   13ccc:	e0bfff17 	ldw	r2,-4(fp)
   13cd0:	00c00104 	movi	r3,4
   13cd4:	10c00005 	stb	r3,0(r2)
        return;
   13cd8:	00002c06 	br	13d8c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13cdc:	e0bffd17 	ldw	r2,-12(fp)
   13ce0:	10800003 	ldbu	r2,0(r2)
   13ce4:	10803fcc 	andi	r2,r2,255
   13ce8:	108000e0 	cmpeqi	r2,r2,3
   13cec:	1000041e 	bne	r2,zero,13d00 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   13cf0:	e0bfff17 	ldw	r2,-4(fp)
   13cf4:	00c00044 	movi	r3,1
   13cf8:	10c00005 	stb	r3,0(r2)
        return;
   13cfc:	00002306 	br	13d8c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d00:	0005303a 	rdctl	r2,status
   13d04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d08:	e0fffc17 	ldw	r3,-16(fp)
   13d0c:	00bfff84 	movi	r2,-2
   13d10:	1884703a 	and	r2,r3,r2
   13d14:	1001703a 	wrctl	status,r2
  
  return context;
   13d18:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13d1c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   13d20:	e0bfff17 	ldw	r2,-4(fp)
   13d24:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   13d28:	e0bffd17 	ldw	r2,-12(fp)
   13d2c:	1080020b 	ldhu	r2,8(r2)
   13d30:	10bfffcc 	andi	r2,r2,65535
   13d34:	10000426 	beq	r2,zero,13d48 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   13d38:	e0bffd17 	ldw	r2,-12(fp)
   13d3c:	e0fffe0b 	ldhu	r3,-8(fp)
   13d40:	10c0020d 	sth	r3,8(r2)
   13d44:	00000b06 	br	13d74 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   13d48:	e0bffd17 	ldw	r2,-12(fp)
   13d4c:	10800283 	ldbu	r2,10(r2)
   13d50:	10803fcc 	andi	r2,r2,255
   13d54:	1000041e 	bne	r2,zero,13d68 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   13d58:	e0bffd17 	ldw	r2,-12(fp)
   13d5c:	e0fffe0b 	ldhu	r3,-8(fp)
   13d60:	10c0020d 	sth	r3,8(r2)
   13d64:	00000306 	br	13d74 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   13d68:	e0bfff17 	ldw	r2,-4(fp)
   13d6c:	00c01244 	movi	r3,73
   13d70:	10c00005 	stb	r3,0(r2)
   13d74:	e0bffa17 	ldw	r2,-24(fp)
   13d78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d7c:	e0bffb17 	ldw	r2,-20(fp)
   13d80:	1001703a 	wrctl	status,r2
   13d84:	00000106 	br	13d8c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   13d88:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   13d8c:	e037883a 	mov	sp,fp
   13d90:	df000017 	ldw	fp,0(sp)
   13d94:	dec00104 	addi	sp,sp,4
   13d98:	f800283a 	ret

00013d9c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   13d9c:	defff104 	addi	sp,sp,-60
   13da0:	dfc00e15 	stw	ra,56(sp)
   13da4:	df000d15 	stw	fp,52(sp)
   13da8:	df000d04 	addi	fp,sp,52
   13dac:	2007883a 	mov	r3,r4
   13db0:	2805883a 	mov	r2,r5
   13db4:	e0fffe05 	stb	r3,-8(fp)
   13db8:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   13dbc:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   13dc0:	e0bffe03 	ldbu	r2,-8(fp)
   13dc4:	10800530 	cmpltui	r2,r2,20
   13dc8:	1000051e 	bne	r2,zero,13de0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   13dcc:	e0bffe03 	ldbu	r2,-8(fp)
   13dd0:	10803fe0 	cmpeqi	r2,r2,255
   13dd4:	1000021e 	bne	r2,zero,13de0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   13dd8:	00800a84 	movi	r2,42
   13ddc:	00013a06 	br	142c8 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   13de0:	e0bfff03 	ldbu	r2,-4(fp)
   13de4:	10800530 	cmpltui	r2,r2,20
   13de8:	1000021e 	bne	r2,zero,13df4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   13dec:	00800a84 	movi	r2,42
   13df0:	00013506 	br	142c8 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13df4:	0005303a 	rdctl	r2,status
   13df8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13dfc:	e0fffd17 	ldw	r3,-12(fp)
   13e00:	00bfff84 	movi	r2,-2
   13e04:	1884703a 	and	r2,r3,r2
   13e08:	1001703a 	wrctl	status,r2
  
  return context;
   13e0c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13e10:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   13e14:	e0ffff03 	ldbu	r3,-4(fp)
   13e18:	008000b4 	movhi	r2,2
   13e1c:	1082f304 	addi	r2,r2,3020
   13e20:	18c7883a 	add	r3,r3,r3
   13e24:	18c7883a 	add	r3,r3,r3
   13e28:	10c5883a 	add	r2,r2,r3
   13e2c:	10800017 	ldw	r2,0(r2)
   13e30:	10000626 	beq	r2,zero,13e4c <OSTaskChangePrio+0xb0>
   13e34:	e0bff517 	ldw	r2,-44(fp)
   13e38:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e3c:	e0bff617 	ldw	r2,-40(fp)
   13e40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   13e44:	00800a04 	movi	r2,40
   13e48:	00011f06 	br	142c8 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   13e4c:	e0bffe03 	ldbu	r2,-8(fp)
   13e50:	10803fd8 	cmpnei	r2,r2,255
   13e54:	1000051e 	bne	r2,zero,13e6c <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   13e58:	008000b4 	movhi	r2,2
   13e5c:	10b66904 	addi	r2,r2,-9820
   13e60:	10800017 	ldw	r2,0(r2)
   13e64:	10800c83 	ldbu	r2,50(r2)
   13e68:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   13e6c:	e0fffe03 	ldbu	r3,-8(fp)
   13e70:	008000b4 	movhi	r2,2
   13e74:	1082f304 	addi	r2,r2,3020
   13e78:	18c7883a 	add	r3,r3,r3
   13e7c:	18c7883a 	add	r3,r3,r3
   13e80:	10c5883a 	add	r2,r2,r3
   13e84:	10800017 	ldw	r2,0(r2)
   13e88:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   13e8c:	e0bff817 	ldw	r2,-32(fp)
   13e90:	1000061e 	bne	r2,zero,13eac <OSTaskChangePrio+0x110>
   13e94:	e0bff517 	ldw	r2,-44(fp)
   13e98:	e0bff715 	stw	r2,-36(fp)
   13e9c:	e0bff717 	ldw	r2,-36(fp)
   13ea0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   13ea4:	00800a44 	movi	r2,41
   13ea8:	00010706 	br	142c8 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   13eac:	e0bff817 	ldw	r2,-32(fp)
   13eb0:	10800058 	cmpnei	r2,r2,1
   13eb4:	1000061e 	bne	r2,zero,13ed0 <OSTaskChangePrio+0x134>
   13eb8:	e0bff517 	ldw	r2,-44(fp)
   13ebc:	e0bff915 	stw	r2,-28(fp)
   13ec0:	e0bff917 	ldw	r2,-28(fp)
   13ec4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   13ec8:	008010c4 	movi	r2,67
   13ecc:	0000fe06 	br	142c8 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   13ed0:	e0bfff03 	ldbu	r2,-4(fp)
   13ed4:	1004d0fa 	srli	r2,r2,3
   13ed8:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   13edc:	e0bfff03 	ldbu	r2,-4(fp)
   13ee0:	108001cc 	andi	r2,r2,7
   13ee4:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   13ee8:	e0bffb03 	ldbu	r2,-20(fp)
   13eec:	00c00044 	movi	r3,1
   13ef0:	1884983a 	sll	r2,r3,r2
   13ef4:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   13ef8:	e0bffb43 	ldbu	r2,-19(fp)
   13efc:	00c00044 	movi	r3,1
   13f00:	1884983a 	sll	r2,r3,r2
   13f04:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   13f08:	e0fffe03 	ldbu	r3,-8(fp)
   13f0c:	008000b4 	movhi	r2,2
   13f10:	1082f304 	addi	r2,r2,3020
   13f14:	18c7883a 	add	r3,r3,r3
   13f18:	18c7883a 	add	r3,r3,r3
   13f1c:	10c5883a 	add	r2,r2,r3
   13f20:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   13f24:	e0ffff03 	ldbu	r3,-4(fp)
   13f28:	008000b4 	movhi	r2,2
   13f2c:	1082f304 	addi	r2,r2,3020
   13f30:	18c7883a 	add	r3,r3,r3
   13f34:	18c7883a 	add	r3,r3,r3
   13f38:	10c5883a 	add	r2,r2,r3
   13f3c:	e0fff817 	ldw	r3,-32(fp)
   13f40:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   13f44:	e0bff817 	ldw	r2,-32(fp)
   13f48:	10800d03 	ldbu	r2,52(r2)
   13f4c:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   13f50:	e0bff817 	ldw	r2,-32(fp)
   13f54:	10800d83 	ldbu	r2,54(r2)
   13f58:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   13f5c:	e0bff817 	ldw	r2,-32(fp)
   13f60:	10800d43 	ldbu	r2,53(r2)
   13f64:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   13f68:	e0fffc03 	ldbu	r3,-16(fp)
   13f6c:	008000b4 	movhi	r2,2
   13f70:	10b66644 	addi	r2,r2,-9831
   13f74:	10c5883a 	add	r2,r2,r3
   13f78:	10c00003 	ldbu	r3,0(r2)
   13f7c:	e0bffc83 	ldbu	r2,-14(fp)
   13f80:	1884703a 	and	r2,r3,r2
   13f84:	10803fcc 	andi	r2,r2,255
   13f88:	10003726 	beq	r2,zero,14068 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   13f8c:	e0fffc03 	ldbu	r3,-16(fp)
   13f90:	e13ffc03 	ldbu	r4,-16(fp)
   13f94:	008000b4 	movhi	r2,2
   13f98:	10b66644 	addi	r2,r2,-9831
   13f9c:	1105883a 	add	r2,r2,r4
   13fa0:	10800003 	ldbu	r2,0(r2)
   13fa4:	1009883a 	mov	r4,r2
   13fa8:	e0bffc83 	ldbu	r2,-14(fp)
   13fac:	0084303a 	nor	r2,zero,r2
   13fb0:	2084703a 	and	r2,r4,r2
   13fb4:	1009883a 	mov	r4,r2
   13fb8:	008000b4 	movhi	r2,2
   13fbc:	10b66644 	addi	r2,r2,-9831
   13fc0:	10c5883a 	add	r2,r2,r3
   13fc4:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   13fc8:	e0fffc03 	ldbu	r3,-16(fp)
   13fcc:	008000b4 	movhi	r2,2
   13fd0:	10b66644 	addi	r2,r2,-9831
   13fd4:	10c5883a 	add	r2,r2,r3
   13fd8:	10800003 	ldbu	r2,0(r2)
   13fdc:	10803fcc 	andi	r2,r2,255
   13fe0:	10000b1e 	bne	r2,zero,14010 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   13fe4:	e0bffc43 	ldbu	r2,-15(fp)
   13fe8:	0084303a 	nor	r2,zero,r2
   13fec:	1007883a 	mov	r3,r2
   13ff0:	008000b4 	movhi	r2,2
   13ff4:	10b66604 	addi	r2,r2,-9832
   13ff8:	10800003 	ldbu	r2,0(r2)
   13ffc:	1884703a 	and	r2,r3,r2
   14000:	1007883a 	mov	r3,r2
   14004:	008000b4 	movhi	r2,2
   14008:	10b66604 	addi	r2,r2,-9832
   1400c:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   14010:	008000b4 	movhi	r2,2
   14014:	10b66604 	addi	r2,r2,-9832
   14018:	10c00003 	ldbu	r3,0(r2)
   1401c:	e0bffb83 	ldbu	r2,-18(fp)
   14020:	1884b03a 	or	r2,r3,r2
   14024:	1007883a 	mov	r3,r2
   14028:	008000b4 	movhi	r2,2
   1402c:	10b66604 	addi	r2,r2,-9832
   14030:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   14034:	e0fffb03 	ldbu	r3,-20(fp)
   14038:	e13ffb03 	ldbu	r4,-20(fp)
   1403c:	008000b4 	movhi	r2,2
   14040:	10b66644 	addi	r2,r2,-9831
   14044:	1105883a 	add	r2,r2,r4
   14048:	11000003 	ldbu	r4,0(r2)
   1404c:	e0bffbc3 	ldbu	r2,-17(fp)
   14050:	2084b03a 	or	r2,r4,r2
   14054:	1009883a 	mov	r4,r2
   14058:	008000b4 	movhi	r2,2
   1405c:	10b66644 	addi	r2,r2,-9831
   14060:	10c5883a 	add	r2,r2,r3
   14064:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   14068:	e0bff817 	ldw	r2,-32(fp)
   1406c:	10800717 	ldw	r2,28(r2)
   14070:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   14074:	e0bff317 	ldw	r2,-52(fp)
   14078:	10003326 	beq	r2,zero,14148 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   1407c:	e0bffc03 	ldbu	r2,-16(fp)
   14080:	e0fffc03 	ldbu	r3,-16(fp)
   14084:	e13ff317 	ldw	r4,-52(fp)
   14088:	20c7883a 	add	r3,r4,r3
   1408c:	18c002c4 	addi	r3,r3,11
   14090:	18c00003 	ldbu	r3,0(r3)
   14094:	1809883a 	mov	r4,r3
   14098:	e0fffc83 	ldbu	r3,-14(fp)
   1409c:	00c6303a 	nor	r3,zero,r3
   140a0:	20c6703a 	and	r3,r4,r3
   140a4:	1809883a 	mov	r4,r3
   140a8:	e0fff317 	ldw	r3,-52(fp)
   140ac:	1885883a 	add	r2,r3,r2
   140b0:	108002c4 	addi	r2,r2,11
   140b4:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   140b8:	e0bffc03 	ldbu	r2,-16(fp)
   140bc:	e0fff317 	ldw	r3,-52(fp)
   140c0:	1885883a 	add	r2,r3,r2
   140c4:	108002c4 	addi	r2,r2,11
   140c8:	10800003 	ldbu	r2,0(r2)
   140cc:	10803fcc 	andi	r2,r2,255
   140d0:	1000091e 	bne	r2,zero,140f8 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   140d4:	e0bff317 	ldw	r2,-52(fp)
   140d8:	10800283 	ldbu	r2,10(r2)
   140dc:	1007883a 	mov	r3,r2
   140e0:	e0bffc43 	ldbu	r2,-15(fp)
   140e4:	0084303a 	nor	r2,zero,r2
   140e8:	1884703a 	and	r2,r3,r2
   140ec:	1007883a 	mov	r3,r2
   140f0:	e0bff317 	ldw	r2,-52(fp)
   140f4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   140f8:	e0bff317 	ldw	r2,-52(fp)
   140fc:	10c00283 	ldbu	r3,10(r2)
   14100:	e0bffb83 	ldbu	r2,-18(fp)
   14104:	1884b03a 	or	r2,r3,r2
   14108:	1007883a 	mov	r3,r2
   1410c:	e0bff317 	ldw	r2,-52(fp)
   14110:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   14114:	e0bffb03 	ldbu	r2,-20(fp)
   14118:	e0fffb03 	ldbu	r3,-20(fp)
   1411c:	e13ff317 	ldw	r4,-52(fp)
   14120:	20c7883a 	add	r3,r4,r3
   14124:	18c002c4 	addi	r3,r3,11
   14128:	19000003 	ldbu	r4,0(r3)
   1412c:	e0fffbc3 	ldbu	r3,-17(fp)
   14130:	20c6b03a 	or	r3,r4,r3
   14134:	1809883a 	mov	r4,r3
   14138:	e0fff317 	ldw	r3,-52(fp)
   1413c:	1885883a 	add	r2,r3,r2
   14140:	108002c4 	addi	r2,r2,11
   14144:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   14148:	e0bff817 	ldw	r2,-32(fp)
   1414c:	10800817 	ldw	r2,32(r2)
   14150:	10004226 	beq	r2,zero,1425c <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   14154:	e0bff817 	ldw	r2,-32(fp)
   14158:	10800817 	ldw	r2,32(r2)
   1415c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   14160:	e0bff417 	ldw	r2,-48(fp)
   14164:	10800017 	ldw	r2,0(r2)
   14168:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   1416c:	00003906 	br	14254 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   14170:	e0bffc03 	ldbu	r2,-16(fp)
   14174:	e0fffc03 	ldbu	r3,-16(fp)
   14178:	e13ff317 	ldw	r4,-52(fp)
   1417c:	20c7883a 	add	r3,r4,r3
   14180:	18c002c4 	addi	r3,r3,11
   14184:	18c00003 	ldbu	r3,0(r3)
   14188:	1809883a 	mov	r4,r3
   1418c:	e0fffc83 	ldbu	r3,-14(fp)
   14190:	00c6303a 	nor	r3,zero,r3
   14194:	20c6703a 	and	r3,r4,r3
   14198:	1809883a 	mov	r4,r3
   1419c:	e0fff317 	ldw	r3,-52(fp)
   141a0:	1885883a 	add	r2,r3,r2
   141a4:	108002c4 	addi	r2,r2,11
   141a8:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   141ac:	e0bffc03 	ldbu	r2,-16(fp)
   141b0:	e0fff317 	ldw	r3,-52(fp)
   141b4:	1885883a 	add	r2,r3,r2
   141b8:	108002c4 	addi	r2,r2,11
   141bc:	10800003 	ldbu	r2,0(r2)
   141c0:	10803fcc 	andi	r2,r2,255
   141c4:	1000091e 	bne	r2,zero,141ec <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   141c8:	e0bff317 	ldw	r2,-52(fp)
   141cc:	10800283 	ldbu	r2,10(r2)
   141d0:	1007883a 	mov	r3,r2
   141d4:	e0bffc43 	ldbu	r2,-15(fp)
   141d8:	0084303a 	nor	r2,zero,r2
   141dc:	1884703a 	and	r2,r3,r2
   141e0:	1007883a 	mov	r3,r2
   141e4:	e0bff317 	ldw	r2,-52(fp)
   141e8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   141ec:	e0bff317 	ldw	r2,-52(fp)
   141f0:	10c00283 	ldbu	r3,10(r2)
   141f4:	e0bffb83 	ldbu	r2,-18(fp)
   141f8:	1884b03a 	or	r2,r3,r2
   141fc:	1007883a 	mov	r3,r2
   14200:	e0bff317 	ldw	r2,-52(fp)
   14204:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   14208:	e0bffb03 	ldbu	r2,-20(fp)
   1420c:	e0fffb03 	ldbu	r3,-20(fp)
   14210:	e13ff317 	ldw	r4,-52(fp)
   14214:	20c7883a 	add	r3,r4,r3
   14218:	18c002c4 	addi	r3,r3,11
   1421c:	19000003 	ldbu	r4,0(r3)
   14220:	e0fffbc3 	ldbu	r3,-17(fp)
   14224:	20c6b03a 	or	r3,r4,r3
   14228:	1809883a 	mov	r4,r3
   1422c:	e0fff317 	ldw	r3,-52(fp)
   14230:	1885883a 	add	r2,r3,r2
   14234:	108002c4 	addi	r2,r2,11
   14238:	11000005 	stb	r4,0(r2)
            pevents++;
   1423c:	e0bff417 	ldw	r2,-48(fp)
   14240:	10800104 	addi	r2,r2,4
   14244:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   14248:	e0bff417 	ldw	r2,-48(fp)
   1424c:	10800017 	ldw	r2,0(r2)
   14250:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   14254:	e0bff317 	ldw	r2,-52(fp)
   14258:	103fc51e 	bne	r2,zero,14170 <OSTaskChangePrio+0x3d4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   1425c:	e0bff817 	ldw	r2,-32(fp)
   14260:	e0ffff03 	ldbu	r3,-4(fp)
   14264:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   14268:	e0bff817 	ldw	r2,-32(fp)
   1426c:	e0fffb03 	ldbu	r3,-20(fp)
   14270:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   14274:	e0bff817 	ldw	r2,-32(fp)
   14278:	e0fffb43 	ldbu	r3,-19(fp)
   1427c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   14280:	e0bff817 	ldw	r2,-32(fp)
   14284:	e0fffb83 	ldbu	r3,-18(fp)
   14288:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   1428c:	e0bff817 	ldw	r2,-32(fp)
   14290:	e0fffbc3 	ldbu	r3,-17(fp)
   14294:	10c00d45 	stb	r3,53(r2)
   14298:	e0bff517 	ldw	r2,-44(fp)
   1429c:	e0bffa15 	stw	r2,-24(fp)
   142a0:	e0bffa17 	ldw	r2,-24(fp)
   142a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   142a8:	008000b4 	movhi	r2,2
   142ac:	10b65a44 	addi	r2,r2,-9879
   142b0:	10800003 	ldbu	r2,0(r2)
   142b4:	10803fcc 	andi	r2,r2,255
   142b8:	10800058 	cmpnei	r2,r2,1
   142bc:	1000011e 	bne	r2,zero,142c4 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   142c0:	000f6f40 	call	f6f4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   142c4:	0005883a 	mov	r2,zero
}
   142c8:	e037883a 	mov	sp,fp
   142cc:	dfc00117 	ldw	ra,4(sp)
   142d0:	df000017 	ldw	fp,0(sp)
   142d4:	dec00204 	addi	sp,sp,8
   142d8:	f800283a 	ret

000142dc <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   142dc:	deffee04 	addi	sp,sp,-72
   142e0:	dfc01115 	stw	ra,68(sp)
   142e4:	df001015 	stw	fp,64(sp)
   142e8:	df001004 	addi	fp,sp,64
   142ec:	e13ffc15 	stw	r4,-16(fp)
   142f0:	e17ffd15 	stw	r5,-12(fp)
   142f4:	e1bffe15 	stw	r6,-8(fp)
   142f8:	3805883a 	mov	r2,r7
   142fc:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   14300:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   14304:	e0bfff03 	ldbu	r2,-4(fp)
   14308:	10800570 	cmpltui	r2,r2,21
   1430c:	1000021e 	bne	r2,zero,14318 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   14310:	00800a84 	movi	r2,42
   14314:	00005b06 	br	14484 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14318:	0005303a 	rdctl	r2,status
   1431c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14320:	e0fffb17 	ldw	r3,-20(fp)
   14324:	00bfff84 	movi	r2,-2
   14328:	1884703a 	and	r2,r3,r2
   1432c:	1001703a 	wrctl	status,r2
  
  return context;
   14330:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14334:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   14338:	008000b4 	movhi	r2,2
   1433c:	10b66804 	addi	r2,r2,-9824
   14340:	10800003 	ldbu	r2,0(r2)
   14344:	10803fcc 	andi	r2,r2,255
   14348:	10000626 	beq	r2,zero,14364 <OSTaskCreate+0x88>
   1434c:	e0bff317 	ldw	r2,-52(fp)
   14350:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14354:	e0bff417 	ldw	r2,-48(fp)
   14358:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1435c:	00800f04 	movi	r2,60
   14360:	00004806 	br	14484 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   14364:	e0ffff03 	ldbu	r3,-4(fp)
   14368:	008000b4 	movhi	r2,2
   1436c:	1082f304 	addi	r2,r2,3020
   14370:	18c7883a 	add	r3,r3,r3
   14374:	18c7883a 	add	r3,r3,r3
   14378:	10c5883a 	add	r2,r2,r3
   1437c:	10800017 	ldw	r2,0(r2)
   14380:	10003b1e 	bne	r2,zero,14470 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   14384:	e0ffff03 	ldbu	r3,-4(fp)
   14388:	008000b4 	movhi	r2,2
   1438c:	1082f304 	addi	r2,r2,3020
   14390:	18c7883a 	add	r3,r3,r3
   14394:	18c7883a 	add	r3,r3,r3
   14398:	10c5883a 	add	r2,r2,r3
   1439c:	00c00044 	movi	r3,1
   143a0:	10c00015 	stw	r3,0(r2)
   143a4:	e0bff317 	ldw	r2,-52(fp)
   143a8:	e0bff515 	stw	r2,-44(fp)
   143ac:	e0bff517 	ldw	r2,-44(fp)
   143b0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   143b4:	000f883a 	mov	r7,zero
   143b8:	e1bffe17 	ldw	r6,-8(fp)
   143bc:	e17ffd17 	ldw	r5,-12(fp)
   143c0:	e13ffc17 	ldw	r4,-16(fp)
   143c4:	0018cb40 	call	18cb4 <OSTaskStkInit>
   143c8:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   143cc:	e0bfff03 	ldbu	r2,-4(fp)
   143d0:	d8000215 	stw	zero,8(sp)
   143d4:	d8000115 	stw	zero,4(sp)
   143d8:	d8000015 	stw	zero,0(sp)
   143dc:	000f883a 	mov	r7,zero
   143e0:	000d883a 	mov	r6,zero
   143e4:	e17ff717 	ldw	r5,-36(fp)
   143e8:	1009883a 	mov	r4,r2
   143ec:	000fbd00 	call	fbd0 <OS_TCBInit>
   143f0:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   143f4:	e0bff803 	ldbu	r2,-32(fp)
   143f8:	1000081e 	bne	r2,zero,1441c <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   143fc:	008000b4 	movhi	r2,2
   14400:	10b65a44 	addi	r2,r2,-9879
   14404:	10800003 	ldbu	r2,0(r2)
   14408:	10803fcc 	andi	r2,r2,255
   1440c:	10800058 	cmpnei	r2,r2,1
   14410:	1000151e 	bne	r2,zero,14468 <OSTaskCreate+0x18c>
                OS_Sched();
   14414:	000f6f40 	call	f6f4 <OS_Sched>
   14418:	00001306 	br	14468 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1441c:	0005303a 	rdctl	r2,status
   14420:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14424:	e0fffa17 	ldw	r3,-24(fp)
   14428:	00bfff84 	movi	r2,-2
   1442c:	1884703a 	and	r2,r3,r2
   14430:	1001703a 	wrctl	status,r2
  
  return context;
   14434:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   14438:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1443c:	e0ffff03 	ldbu	r3,-4(fp)
   14440:	008000b4 	movhi	r2,2
   14444:	1082f304 	addi	r2,r2,3020
   14448:	18c7883a 	add	r3,r3,r3
   1444c:	18c7883a 	add	r3,r3,r3
   14450:	10c5883a 	add	r2,r2,r3
   14454:	10000015 	stw	zero,0(r2)
   14458:	e0bff317 	ldw	r2,-52(fp)
   1445c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14460:	e0bff617 	ldw	r2,-40(fp)
   14464:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   14468:	e0bff803 	ldbu	r2,-32(fp)
   1446c:	00000506 	br	14484 <OSTaskCreate+0x1a8>
   14470:	e0bff317 	ldw	r2,-52(fp)
   14474:	e0bff915 	stw	r2,-28(fp)
   14478:	e0bff917 	ldw	r2,-28(fp)
   1447c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   14480:	00800a04 	movi	r2,40
}
   14484:	e037883a 	mov	sp,fp
   14488:	dfc00117 	ldw	ra,4(sp)
   1448c:	df000017 	ldw	fp,0(sp)
   14490:	dec00204 	addi	sp,sp,8
   14494:	f800283a 	ret

00014498 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   14498:	deffec04 	addi	sp,sp,-80
   1449c:	dfc01315 	stw	ra,76(sp)
   144a0:	df001215 	stw	fp,72(sp)
   144a4:	df001204 	addi	fp,sp,72
   144a8:	e13ffa15 	stw	r4,-24(fp)
   144ac:	e17ffb15 	stw	r5,-20(fp)
   144b0:	e1bffc15 	stw	r6,-16(fp)
   144b4:	3809883a 	mov	r4,r7
   144b8:	e0c00217 	ldw	r3,8(fp)
   144bc:	e0800617 	ldw	r2,24(fp)
   144c0:	e13ffd05 	stb	r4,-12(fp)
   144c4:	e0fffe0d 	sth	r3,-8(fp)
   144c8:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   144cc:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   144d0:	e0bffd03 	ldbu	r2,-12(fp)
   144d4:	10800570 	cmpltui	r2,r2,21
   144d8:	1000021e 	bne	r2,zero,144e4 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   144dc:	00800a84 	movi	r2,42
   144e0:	00006506 	br	14678 <OSTaskCreateExt+0x1e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   144e4:	0005303a 	rdctl	r2,status
   144e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   144ec:	e0fff917 	ldw	r3,-28(fp)
   144f0:	00bfff84 	movi	r2,-2
   144f4:	1884703a 	and	r2,r3,r2
   144f8:	1001703a 	wrctl	status,r2
  
  return context;
   144fc:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14500:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   14504:	008000b4 	movhi	r2,2
   14508:	10b66804 	addi	r2,r2,-9824
   1450c:	10800003 	ldbu	r2,0(r2)
   14510:	10803fcc 	andi	r2,r2,255
   14514:	10000626 	beq	r2,zero,14530 <OSTaskCreateExt+0x98>
   14518:	e0bff117 	ldw	r2,-60(fp)
   1451c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14520:	e0bff217 	ldw	r2,-56(fp)
   14524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14528:	00800f04 	movi	r2,60
   1452c:	00005206 	br	14678 <OSTaskCreateExt+0x1e0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   14530:	e0fffd03 	ldbu	r3,-12(fp)
   14534:	008000b4 	movhi	r2,2
   14538:	1082f304 	addi	r2,r2,3020
   1453c:	18c7883a 	add	r3,r3,r3
   14540:	18c7883a 	add	r3,r3,r3
   14544:	10c5883a 	add	r2,r2,r3
   14548:	10800017 	ldw	r2,0(r2)
   1454c:	1000451e 	bne	r2,zero,14664 <OSTaskCreateExt+0x1cc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   14550:	e0fffd03 	ldbu	r3,-12(fp)
   14554:	008000b4 	movhi	r2,2
   14558:	1082f304 	addi	r2,r2,3020
   1455c:	18c7883a 	add	r3,r3,r3
   14560:	18c7883a 	add	r3,r3,r3
   14564:	10c5883a 	add	r2,r2,r3
   14568:	00c00044 	movi	r3,1
   1456c:	10c00015 	stw	r3,0(r2)
   14570:	e0bff117 	ldw	r2,-60(fp)
   14574:	e0bff315 	stw	r2,-52(fp)
   14578:	e0bff317 	ldw	r2,-52(fp)
   1457c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   14580:	e0bfff0b 	ldhu	r2,-4(fp)
   14584:	100d883a 	mov	r6,r2
   14588:	e1400417 	ldw	r5,16(fp)
   1458c:	e1000317 	ldw	r4,12(fp)
   14590:	00156300 	call	15630 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   14594:	e0bfff0b 	ldhu	r2,-4(fp)
   14598:	100f883a 	mov	r7,r2
   1459c:	e1bffc17 	ldw	r6,-16(fp)
   145a0:	e17ffb17 	ldw	r5,-20(fp)
   145a4:	e13ffa17 	ldw	r4,-24(fp)
   145a8:	0018cb40 	call	18cb4 <OSTaskStkInit>
   145ac:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   145b0:	e0fffd03 	ldbu	r3,-12(fp)
   145b4:	e13ffe0b 	ldhu	r4,-8(fp)
   145b8:	e0bfff0b 	ldhu	r2,-4(fp)
   145bc:	d8800215 	stw	r2,8(sp)
   145c0:	e0800517 	ldw	r2,20(fp)
   145c4:	d8800115 	stw	r2,4(sp)
   145c8:	e0800417 	ldw	r2,16(fp)
   145cc:	d8800015 	stw	r2,0(sp)
   145d0:	200f883a 	mov	r7,r4
   145d4:	e1800317 	ldw	r6,12(fp)
   145d8:	e17ff517 	ldw	r5,-44(fp)
   145dc:	1809883a 	mov	r4,r3
   145e0:	000fbd00 	call	fbd0 <OS_TCBInit>
   145e4:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   145e8:	e0bff603 	ldbu	r2,-40(fp)
   145ec:	1000081e 	bne	r2,zero,14610 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   145f0:	008000b4 	movhi	r2,2
   145f4:	10b65a44 	addi	r2,r2,-9879
   145f8:	10800003 	ldbu	r2,0(r2)
   145fc:	10803fcc 	andi	r2,r2,255
   14600:	10800058 	cmpnei	r2,r2,1
   14604:	1000151e 	bne	r2,zero,1465c <OSTaskCreateExt+0x1c4>
                OS_Sched();
   14608:	000f6f40 	call	f6f4 <OS_Sched>
   1460c:	00001306 	br	1465c <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14610:	0005303a 	rdctl	r2,status
   14614:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14618:	e0fff817 	ldw	r3,-32(fp)
   1461c:	00bfff84 	movi	r2,-2
   14620:	1884703a 	and	r2,r3,r2
   14624:	1001703a 	wrctl	status,r2
  
  return context;
   14628:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1462c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   14630:	e0fffd03 	ldbu	r3,-12(fp)
   14634:	008000b4 	movhi	r2,2
   14638:	1082f304 	addi	r2,r2,3020
   1463c:	18c7883a 	add	r3,r3,r3
   14640:	18c7883a 	add	r3,r3,r3
   14644:	10c5883a 	add	r2,r2,r3
   14648:	10000015 	stw	zero,0(r2)
   1464c:	e0bff117 	ldw	r2,-60(fp)
   14650:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14654:	e0bff417 	ldw	r2,-48(fp)
   14658:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1465c:	e0bff603 	ldbu	r2,-40(fp)
   14660:	00000506 	br	14678 <OSTaskCreateExt+0x1e0>
   14664:	e0bff117 	ldw	r2,-60(fp)
   14668:	e0bff715 	stw	r2,-36(fp)
   1466c:	e0bff717 	ldw	r2,-36(fp)
   14670:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   14674:	00800a04 	movi	r2,40
}
   14678:	e037883a 	mov	sp,fp
   1467c:	dfc00117 	ldw	ra,4(sp)
   14680:	df000017 	ldw	fp,0(sp)
   14684:	dec00204 	addi	sp,sp,8
   14688:	f800283a 	ret

0001468c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1468c:	defff404 	addi	sp,sp,-48
   14690:	dfc00b15 	stw	ra,44(sp)
   14694:	df000a15 	stw	fp,40(sp)
   14698:	df000a04 	addi	fp,sp,40
   1469c:	2005883a 	mov	r2,r4
   146a0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   146a4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   146a8:	008000b4 	movhi	r2,2
   146ac:	10b66804 	addi	r2,r2,-9824
   146b0:	10800003 	ldbu	r2,0(r2)
   146b4:	10803fcc 	andi	r2,r2,255
   146b8:	10000226 	beq	r2,zero,146c4 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   146bc:	00801004 	movi	r2,64
   146c0:	0000e506 	br	14a58 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   146c4:	e0bfff03 	ldbu	r2,-4(fp)
   146c8:	10800518 	cmpnei	r2,r2,20
   146cc:	1000021e 	bne	r2,zero,146d8 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   146d0:	00800f84 	movi	r2,62
   146d4:	0000e006 	br	14a58 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   146d8:	e0bfff03 	ldbu	r2,-4(fp)
   146dc:	10800530 	cmpltui	r2,r2,20
   146e0:	1000051e 	bne	r2,zero,146f8 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   146e4:	e0bfff03 	ldbu	r2,-4(fp)
   146e8:	10803fe0 	cmpeqi	r2,r2,255
   146ec:	1000021e 	bne	r2,zero,146f8 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   146f0:	00800a84 	movi	r2,42
   146f4:	0000d806 	br	14a58 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146f8:	0005303a 	rdctl	r2,status
   146fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14700:	e0fffe17 	ldw	r3,-8(fp)
   14704:	00bfff84 	movi	r2,-2
   14708:	1884703a 	and	r2,r3,r2
   1470c:	1001703a 	wrctl	status,r2
  
  return context;
   14710:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   14714:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   14718:	e0bfff03 	ldbu	r2,-4(fp)
   1471c:	10803fd8 	cmpnei	r2,r2,255
   14720:	1000051e 	bne	r2,zero,14738 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   14724:	008000b4 	movhi	r2,2
   14728:	10b66904 	addi	r2,r2,-9820
   1472c:	10800017 	ldw	r2,0(r2)
   14730:	10800c83 	ldbu	r2,50(r2)
   14734:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14738:	e0ffff03 	ldbu	r3,-4(fp)
   1473c:	008000b4 	movhi	r2,2
   14740:	1082f304 	addi	r2,r2,3020
   14744:	18c7883a 	add	r3,r3,r3
   14748:	18c7883a 	add	r3,r3,r3
   1474c:	10c5883a 	add	r2,r2,r3
   14750:	10800017 	ldw	r2,0(r2)
   14754:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   14758:	e0bff817 	ldw	r2,-32(fp)
   1475c:	1000061e 	bne	r2,zero,14778 <OSTaskDel+0xec>
   14760:	e0bff617 	ldw	r2,-40(fp)
   14764:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14768:	e0bff717 	ldw	r2,-36(fp)
   1476c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14770:	008010c4 	movi	r2,67
   14774:	0000b806 	br	14a58 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   14778:	e0bff817 	ldw	r2,-32(fp)
   1477c:	10800058 	cmpnei	r2,r2,1
   14780:	1000061e 	bne	r2,zero,1479c <OSTaskDel+0x110>
   14784:	e0bff617 	ldw	r2,-40(fp)
   14788:	e0bff915 	stw	r2,-28(fp)
   1478c:	e0bff917 	ldw	r2,-28(fp)
   14790:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14794:	00800f44 	movi	r2,61
   14798:	0000af06 	br	14a58 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1479c:	e0bff817 	ldw	r2,-32(fp)
   147a0:	10800d03 	ldbu	r2,52(r2)
   147a4:	10c03fcc 	andi	r3,r2,255
   147a8:	e0bff817 	ldw	r2,-32(fp)
   147ac:	10800d03 	ldbu	r2,52(r2)
   147b0:	11003fcc 	andi	r4,r2,255
   147b4:	008000b4 	movhi	r2,2
   147b8:	10b66644 	addi	r2,r2,-9831
   147bc:	1105883a 	add	r2,r2,r4
   147c0:	10800003 	ldbu	r2,0(r2)
   147c4:	1009883a 	mov	r4,r2
   147c8:	e0bff817 	ldw	r2,-32(fp)
   147cc:	10800d43 	ldbu	r2,53(r2)
   147d0:	0084303a 	nor	r2,zero,r2
   147d4:	2084703a 	and	r2,r4,r2
   147d8:	1009883a 	mov	r4,r2
   147dc:	008000b4 	movhi	r2,2
   147e0:	10b66644 	addi	r2,r2,-9831
   147e4:	10c5883a 	add	r2,r2,r3
   147e8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   147ec:	e0bff817 	ldw	r2,-32(fp)
   147f0:	10800d03 	ldbu	r2,52(r2)
   147f4:	10c03fcc 	andi	r3,r2,255
   147f8:	008000b4 	movhi	r2,2
   147fc:	10b66644 	addi	r2,r2,-9831
   14800:	10c5883a 	add	r2,r2,r3
   14804:	10800003 	ldbu	r2,0(r2)
   14808:	10803fcc 	andi	r2,r2,255
   1480c:	10000c1e 	bne	r2,zero,14840 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   14810:	e0bff817 	ldw	r2,-32(fp)
   14814:	10800d83 	ldbu	r2,54(r2)
   14818:	0084303a 	nor	r2,zero,r2
   1481c:	1007883a 	mov	r3,r2
   14820:	008000b4 	movhi	r2,2
   14824:	10b66604 	addi	r2,r2,-9832
   14828:	10800003 	ldbu	r2,0(r2)
   1482c:	1884703a 	and	r2,r3,r2
   14830:	1007883a 	mov	r3,r2
   14834:	008000b4 	movhi	r2,2
   14838:	10b66604 	addi	r2,r2,-9832
   1483c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   14840:	e0bff817 	ldw	r2,-32(fp)
   14844:	10800717 	ldw	r2,28(r2)
   14848:	10000526 	beq	r2,zero,14860 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1484c:	e0bff817 	ldw	r2,-32(fp)
   14850:	10800717 	ldw	r2,28(r2)
   14854:	100b883a 	mov	r5,r2
   14858:	e13ff817 	ldw	r4,-32(fp)
   1485c:	000f00c0 	call	f00c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   14860:	e0bff817 	ldw	r2,-32(fp)
   14864:	10800817 	ldw	r2,32(r2)
   14868:	10000526 	beq	r2,zero,14880 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1486c:	e0bff817 	ldw	r2,-32(fp)
   14870:	10800817 	ldw	r2,32(r2)
   14874:	100b883a 	mov	r5,r2
   14878:	e13ff817 	ldw	r4,-32(fp)
   1487c:	000f0c40 	call	f0c4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   14880:	e0bff817 	ldw	r2,-32(fp)
   14884:	10800a17 	ldw	r2,40(r2)
   14888:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1488c:	e0bffb17 	ldw	r2,-20(fp)
   14890:	10000226 	beq	r2,zero,1489c <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   14894:	e13ffb17 	ldw	r4,-20(fp)
   14898:	00118480 	call	11848 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1489c:	e0bff817 	ldw	r2,-32(fp)
   148a0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   148a4:	e0bff817 	ldw	r2,-32(fp)
   148a8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   148ac:	e0bff817 	ldw	r2,-32(fp)
   148b0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   148b4:	008000b4 	movhi	r2,2
   148b8:	10b65a04 	addi	r2,r2,-9880
   148bc:	10800003 	ldbu	r2,0(r2)
   148c0:	10803fcc 	andi	r2,r2,255
   148c4:	10803fe0 	cmpeqi	r2,r2,255
   148c8:	1000081e 	bne	r2,zero,148ec <OSTaskDel+0x260>
        OSLockNesting++;
   148cc:	008000b4 	movhi	r2,2
   148d0:	10b65a04 	addi	r2,r2,-9880
   148d4:	10800003 	ldbu	r2,0(r2)
   148d8:	10800044 	addi	r2,r2,1
   148dc:	1007883a 	mov	r3,r2
   148e0:	008000b4 	movhi	r2,2
   148e4:	10b65a04 	addi	r2,r2,-9880
   148e8:	10c00005 	stb	r3,0(r2)
   148ec:	e0bff617 	ldw	r2,-40(fp)
   148f0:	e0bffd15 	stw	r2,-12(fp)
   148f4:	e0bffd17 	ldw	r2,-12(fp)
   148f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   148fc:	000eb100 	call	eb10 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14900:	0005303a 	rdctl	r2,status
   14904:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14908:	e0fffa17 	ldw	r3,-24(fp)
   1490c:	00bfff84 	movi	r2,-2
   14910:	1884703a 	and	r2,r3,r2
   14914:	1001703a 	wrctl	status,r2
  
  return context;
   14918:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1491c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   14920:	008000b4 	movhi	r2,2
   14924:	10b65a04 	addi	r2,r2,-9880
   14928:	10800003 	ldbu	r2,0(r2)
   1492c:	10803fcc 	andi	r2,r2,255
   14930:	10000826 	beq	r2,zero,14954 <OSTaskDel+0x2c8>
        OSLockNesting--;
   14934:	008000b4 	movhi	r2,2
   14938:	10b65a04 	addi	r2,r2,-9880
   1493c:	10800003 	ldbu	r2,0(r2)
   14940:	10bfffc4 	addi	r2,r2,-1
   14944:	1007883a 	mov	r3,r2
   14948:	008000b4 	movhi	r2,2
   1494c:	10b65a04 	addi	r2,r2,-9880
   14950:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   14954:	e13ff817 	ldw	r4,-32(fp)
   14958:	0018e340 	call	18e34 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1495c:	008000b4 	movhi	r2,2
   14960:	10b66244 	addi	r2,r2,-9847
   14964:	10800003 	ldbu	r2,0(r2)
   14968:	10bfffc4 	addi	r2,r2,-1
   1496c:	1007883a 	mov	r3,r2
   14970:	008000b4 	movhi	r2,2
   14974:	10b66244 	addi	r2,r2,-9847
   14978:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1497c:	e0ffff03 	ldbu	r3,-4(fp)
   14980:	008000b4 	movhi	r2,2
   14984:	1082f304 	addi	r2,r2,3020
   14988:	18c7883a 	add	r3,r3,r3
   1498c:	18c7883a 	add	r3,r3,r3
   14990:	10c5883a 	add	r2,r2,r3
   14994:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   14998:	e0bff817 	ldw	r2,-32(fp)
   1499c:	10800617 	ldw	r2,24(r2)
   149a0:	1000091e 	bne	r2,zero,149c8 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   149a4:	e0bff817 	ldw	r2,-32(fp)
   149a8:	10800517 	ldw	r2,20(r2)
   149ac:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   149b0:	e0bff817 	ldw	r2,-32(fp)
   149b4:	10c00517 	ldw	r3,20(r2)
   149b8:	008000b4 	movhi	r2,2
   149bc:	10b65d04 	addi	r2,r2,-9868
   149c0:	10c00015 	stw	r3,0(r2)
   149c4:	00000a06 	br	149f0 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   149c8:	e0bff817 	ldw	r2,-32(fp)
   149cc:	10800617 	ldw	r2,24(r2)
   149d0:	e0fff817 	ldw	r3,-32(fp)
   149d4:	18c00517 	ldw	r3,20(r3)
   149d8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   149dc:	e0bff817 	ldw	r2,-32(fp)
   149e0:	10800517 	ldw	r2,20(r2)
   149e4:	e0fff817 	ldw	r3,-32(fp)
   149e8:	18c00617 	ldw	r3,24(r3)
   149ec:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   149f0:	008000b4 	movhi	r2,2
   149f4:	10b66104 	addi	r2,r2,-9852
   149f8:	10c00017 	ldw	r3,0(r2)
   149fc:	e0bff817 	ldw	r2,-32(fp)
   14a00:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   14a04:	008000b4 	movhi	r2,2
   14a08:	10b66104 	addi	r2,r2,-9852
   14a0c:	e0fff817 	ldw	r3,-32(fp)
   14a10:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   14a14:	e0bff817 	ldw	r2,-32(fp)
   14a18:	00c00fc4 	movi	r3,63
   14a1c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   14a20:	e0bff817 	ldw	r2,-32(fp)
   14a24:	10001345 	stb	zero,77(r2)
   14a28:	e0bff617 	ldw	r2,-40(fp)
   14a2c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a30:	e0bffc17 	ldw	r2,-16(fp)
   14a34:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   14a38:	008000b4 	movhi	r2,2
   14a3c:	10b65a44 	addi	r2,r2,-9879
   14a40:	10800003 	ldbu	r2,0(r2)
   14a44:	10803fcc 	andi	r2,r2,255
   14a48:	10800058 	cmpnei	r2,r2,1
   14a4c:	1000011e 	bne	r2,zero,14a54 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   14a50:	000f6f40 	call	f6f4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   14a54:	0005883a 	mov	r2,zero
}
   14a58:	e037883a 	mov	sp,fp
   14a5c:	dfc00117 	ldw	ra,4(sp)
   14a60:	df000017 	ldw	fp,0(sp)
   14a64:	dec00204 	addi	sp,sp,8
   14a68:	f800283a 	ret

00014a6c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   14a6c:	defff504 	addi	sp,sp,-44
   14a70:	df000a15 	stw	fp,40(sp)
   14a74:	df000a04 	addi	fp,sp,40
   14a78:	2005883a 	mov	r2,r4
   14a7c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14a80:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   14a84:	e0bfff03 	ldbu	r2,-4(fp)
   14a88:	10800518 	cmpnei	r2,r2,20
   14a8c:	1000021e 	bne	r2,zero,14a98 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   14a90:	00800f84 	movi	r2,62
   14a94:	00004706 	br	14bb4 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   14a98:	e0bfff03 	ldbu	r2,-4(fp)
   14a9c:	10800530 	cmpltui	r2,r2,20
   14aa0:	1000051e 	bne	r2,zero,14ab8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   14aa4:	e0bfff03 	ldbu	r2,-4(fp)
   14aa8:	10803fe0 	cmpeqi	r2,r2,255
   14aac:	1000021e 	bne	r2,zero,14ab8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   14ab0:	00800a84 	movi	r2,42
   14ab4:	00003f06 	br	14bb4 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   14ab8:	e0bfff03 	ldbu	r2,-4(fp)
   14abc:	10803fd8 	cmpnei	r2,r2,255
   14ac0:	1000131e 	bne	r2,zero,14b10 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ac4:	0005303a 	rdctl	r2,status
   14ac8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14acc:	e0fff917 	ldw	r3,-28(fp)
   14ad0:	00bfff84 	movi	r2,-2
   14ad4:	1884703a 	and	r2,r3,r2
   14ad8:	1001703a 	wrctl	status,r2
  
  return context;
   14adc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   14ae0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   14ae4:	008000b4 	movhi	r2,2
   14ae8:	10b66904 	addi	r2,r2,-9820
   14aec:	10800017 	ldw	r2,0(r2)
   14af0:	10800dc3 	ldbu	r2,55(r2)
   14af4:	e0bff805 	stb	r2,-32(fp)
   14af8:	e0bff617 	ldw	r2,-40(fp)
   14afc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b00:	e0bffe17 	ldw	r2,-8(fp)
   14b04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   14b08:	e0bff803 	ldbu	r2,-32(fp)
   14b0c:	00002906 	br	14bb4 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b10:	0005303a 	rdctl	r2,status
   14b14:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b18:	e0fff717 	ldw	r3,-36(fp)
   14b1c:	00bfff84 	movi	r2,-2
   14b20:	1884703a 	and	r2,r3,r2
   14b24:	1001703a 	wrctl	status,r2
  
  return context;
   14b28:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   14b2c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14b30:	e0ffff03 	ldbu	r3,-4(fp)
   14b34:	008000b4 	movhi	r2,2
   14b38:	1082f304 	addi	r2,r2,3020
   14b3c:	18c7883a 	add	r3,r3,r3
   14b40:	18c7883a 	add	r3,r3,r3
   14b44:	10c5883a 	add	r2,r2,r3
   14b48:	10800017 	ldw	r2,0(r2)
   14b4c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   14b50:	e0bffb17 	ldw	r2,-20(fp)
   14b54:	1000061e 	bne	r2,zero,14b70 <OSTaskDelReq+0x104>
   14b58:	e0bff617 	ldw	r2,-40(fp)
   14b5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b60:	e0bffa17 	ldw	r2,-24(fp)
   14b64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   14b68:	008010c4 	movi	r2,67
   14b6c:	00001106 	br	14bb4 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   14b70:	e0bffb17 	ldw	r2,-20(fp)
   14b74:	10800058 	cmpnei	r2,r2,1
   14b78:	1000061e 	bne	r2,zero,14b94 <OSTaskDelReq+0x128>
   14b7c:	e0bff617 	ldw	r2,-40(fp)
   14b80:	e0bffc15 	stw	r2,-16(fp)
   14b84:	e0bffc17 	ldw	r2,-16(fp)
   14b88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14b8c:	00800f44 	movi	r2,61
   14b90:	00000806 	br	14bb4 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   14b94:	e0bffb17 	ldw	r2,-20(fp)
   14b98:	00c00fc4 	movi	r3,63
   14b9c:	10c00dc5 	stb	r3,55(r2)
   14ba0:	e0bff617 	ldw	r2,-40(fp)
   14ba4:	e0bffd15 	stw	r2,-12(fp)
   14ba8:	e0bffd17 	ldw	r2,-12(fp)
   14bac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14bb0:	0005883a 	mov	r2,zero
}
   14bb4:	e037883a 	mov	sp,fp
   14bb8:	df000017 	ldw	fp,0(sp)
   14bbc:	dec00104 	addi	sp,sp,4
   14bc0:	f800283a 	ret

00014bc4 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14bc4:	defff404 	addi	sp,sp,-48
   14bc8:	dfc00b15 	stw	ra,44(sp)
   14bcc:	df000a15 	stw	fp,40(sp)
   14bd0:	df000a04 	addi	fp,sp,40
   14bd4:	2005883a 	mov	r2,r4
   14bd8:	e17ffe15 	stw	r5,-8(fp)
   14bdc:	e1bfff15 	stw	r6,-4(fp)
   14be0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   14be4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   14be8:	e0bfff17 	ldw	r2,-4(fp)
   14bec:	1000021e 	bne	r2,zero,14bf8 <OSTaskNameGet+0x34>
        return (0);
   14bf0:	0005883a 	mov	r2,zero
   14bf4:	00005806 	br	14d58 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   14bf8:	e0bffd03 	ldbu	r2,-12(fp)
   14bfc:	10800570 	cmpltui	r2,r2,21
   14c00:	1000081e 	bne	r2,zero,14c24 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   14c04:	e0bffd03 	ldbu	r2,-12(fp)
   14c08:	10803fe0 	cmpeqi	r2,r2,255
   14c0c:	1000051e 	bne	r2,zero,14c24 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   14c10:	e0bfff17 	ldw	r2,-4(fp)
   14c14:	00c00a84 	movi	r3,42
   14c18:	10c00005 	stb	r3,0(r2)
            return (0);
   14c1c:	0005883a 	mov	r2,zero
   14c20:	00004d06 	br	14d58 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   14c24:	e0bffe17 	ldw	r2,-8(fp)
   14c28:	1000051e 	bne	r2,zero,14c40 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   14c2c:	e0bfff17 	ldw	r2,-4(fp)
   14c30:	00c00304 	movi	r3,12
   14c34:	10c00005 	stb	r3,0(r2)
        return (0);
   14c38:	0005883a 	mov	r2,zero
   14c3c:	00004606 	br	14d58 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   14c40:	008000b4 	movhi	r2,2
   14c44:	10b66804 	addi	r2,r2,-9824
   14c48:	10800003 	ldbu	r2,0(r2)
   14c4c:	10803fcc 	andi	r2,r2,255
   14c50:	10000526 	beq	r2,zero,14c68 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   14c54:	e0bfff17 	ldw	r2,-4(fp)
   14c58:	00c00444 	movi	r3,17
   14c5c:	10c00005 	stb	r3,0(r2)
        return (0);
   14c60:	0005883a 	mov	r2,zero
   14c64:	00003c06 	br	14d58 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c68:	0005303a 	rdctl	r2,status
   14c6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c70:	e0fffc17 	ldw	r3,-16(fp)
   14c74:	00bfff84 	movi	r2,-2
   14c78:	1884703a 	and	r2,r3,r2
   14c7c:	1001703a 	wrctl	status,r2
  
  return context;
   14c80:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14c84:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   14c88:	e0bffd03 	ldbu	r2,-12(fp)
   14c8c:	10803fd8 	cmpnei	r2,r2,255
   14c90:	1000051e 	bne	r2,zero,14ca8 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   14c94:	008000b4 	movhi	r2,2
   14c98:	10b66904 	addi	r2,r2,-9820
   14c9c:	10800017 	ldw	r2,0(r2)
   14ca0:	10800c83 	ldbu	r2,50(r2)
   14ca4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14ca8:	e0fffd03 	ldbu	r3,-12(fp)
   14cac:	008000b4 	movhi	r2,2
   14cb0:	1082f304 	addi	r2,r2,3020
   14cb4:	18c7883a 	add	r3,r3,r3
   14cb8:	18c7883a 	add	r3,r3,r3
   14cbc:	10c5883a 	add	r2,r2,r3
   14cc0:	10800017 	ldw	r2,0(r2)
   14cc4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   14cc8:	e0bff817 	ldw	r2,-32(fp)
   14ccc:	1000091e 	bne	r2,zero,14cf4 <OSTaskNameGet+0x130>
   14cd0:	e0bff617 	ldw	r2,-40(fp)
   14cd4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14cd8:	e0bff717 	ldw	r2,-36(fp)
   14cdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14ce0:	e0bfff17 	ldw	r2,-4(fp)
   14ce4:	00c010c4 	movi	r3,67
   14ce8:	10c00005 	stb	r3,0(r2)
        return (0);
   14cec:	0005883a 	mov	r2,zero
   14cf0:	00001906 	br	14d58 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   14cf4:	e0bff817 	ldw	r2,-32(fp)
   14cf8:	10800058 	cmpnei	r2,r2,1
   14cfc:	1000091e 	bne	r2,zero,14d24 <OSTaskNameGet+0x160>
   14d00:	e0bff617 	ldw	r2,-40(fp)
   14d04:	e0bff915 	stw	r2,-28(fp)
   14d08:	e0bff917 	ldw	r2,-28(fp)
   14d0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14d10:	e0bfff17 	ldw	r2,-4(fp)
   14d14:	00c010c4 	movi	r3,67
   14d18:	10c00005 	stb	r3,0(r2)
        return (0);
   14d1c:	0005883a 	mov	r2,zero
   14d20:	00000d06 	br	14d58 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   14d24:	e0bff817 	ldw	r2,-32(fp)
   14d28:	10801304 	addi	r2,r2,76
   14d2c:	100b883a 	mov	r5,r2
   14d30:	e13ffe17 	ldw	r4,-8(fp)
   14d34:	000f8980 	call	f898 <OS_StrCopy>
   14d38:	e0bffb05 	stb	r2,-20(fp)
   14d3c:	e0bff617 	ldw	r2,-40(fp)
   14d40:	e0bffa15 	stw	r2,-24(fp)
   14d44:	e0bffa17 	ldw	r2,-24(fp)
   14d48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14d4c:	e0bfff17 	ldw	r2,-4(fp)
   14d50:	10000005 	stb	zero,0(r2)
    return (len);
   14d54:	e0bffb03 	ldbu	r2,-20(fp)
}
   14d58:	e037883a 	mov	sp,fp
   14d5c:	dfc00117 	ldw	ra,4(sp)
   14d60:	df000017 	ldw	fp,0(sp)
   14d64:	dec00204 	addi	sp,sp,8
   14d68:	f800283a 	ret

00014d6c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14d6c:	defff304 	addi	sp,sp,-52
   14d70:	dfc00c15 	stw	ra,48(sp)
   14d74:	df000b15 	stw	fp,44(sp)
   14d78:	df000b04 	addi	fp,sp,44
   14d7c:	2005883a 	mov	r2,r4
   14d80:	e17ffe15 	stw	r5,-8(fp)
   14d84:	e1bfff15 	stw	r6,-4(fp)
   14d88:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14d8c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   14d90:	e0bfff17 	ldw	r2,-4(fp)
   14d94:	10006026 	beq	r2,zero,14f18 <OSTaskNameSet+0x1ac>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   14d98:	e0bffd03 	ldbu	r2,-12(fp)
   14d9c:	10800570 	cmpltui	r2,r2,21
   14da0:	1000071e 	bne	r2,zero,14dc0 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   14da4:	e0bffd03 	ldbu	r2,-12(fp)
   14da8:	10803fe0 	cmpeqi	r2,r2,255
   14dac:	1000041e 	bne	r2,zero,14dc0 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   14db0:	e0bfff17 	ldw	r2,-4(fp)
   14db4:	00c00a84 	movi	r3,42
   14db8:	10c00005 	stb	r3,0(r2)
            return;
   14dbc:	00005706 	br	14f1c <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   14dc0:	e0bffe17 	ldw	r2,-8(fp)
   14dc4:	1000041e 	bne	r2,zero,14dd8 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   14dc8:	e0bfff17 	ldw	r2,-4(fp)
   14dcc:	00c00304 	movi	r3,12
   14dd0:	10c00005 	stb	r3,0(r2)
        return;
   14dd4:	00005106 	br	14f1c <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   14dd8:	008000b4 	movhi	r2,2
   14ddc:	10b66804 	addi	r2,r2,-9824
   14de0:	10800003 	ldbu	r2,0(r2)
   14de4:	10803fcc 	andi	r2,r2,255
   14de8:	10000426 	beq	r2,zero,14dfc <OSTaskNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
   14dec:	e0bfff17 	ldw	r2,-4(fp)
   14df0:	00c00484 	movi	r3,18
   14df4:	10c00005 	stb	r3,0(r2)
        return;
   14df8:	00004806 	br	14f1c <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14dfc:	0005303a 	rdctl	r2,status
   14e00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e04:	e0fffc17 	ldw	r3,-16(fp)
   14e08:	00bfff84 	movi	r2,-2
   14e0c:	1884703a 	and	r2,r3,r2
   14e10:	1001703a 	wrctl	status,r2
  
  return context;
   14e14:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14e18:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   14e1c:	e0bffd03 	ldbu	r2,-12(fp)
   14e20:	10803fd8 	cmpnei	r2,r2,255
   14e24:	1000051e 	bne	r2,zero,14e3c <OSTaskNameSet+0xd0>
        prio = OSTCBCur->OSTCBPrio;
   14e28:	008000b4 	movhi	r2,2
   14e2c:	10b66904 	addi	r2,r2,-9820
   14e30:	10800017 	ldw	r2,0(r2)
   14e34:	10800c83 	ldbu	r2,50(r2)
   14e38:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14e3c:	e0fffd03 	ldbu	r3,-12(fp)
   14e40:	008000b4 	movhi	r2,2
   14e44:	1082f304 	addi	r2,r2,3020
   14e48:	18c7883a 	add	r3,r3,r3
   14e4c:	18c7883a 	add	r3,r3,r3
   14e50:	10c5883a 	add	r2,r2,r3
   14e54:	10800017 	ldw	r2,0(r2)
   14e58:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   14e5c:	e0bff717 	ldw	r2,-36(fp)
   14e60:	1000081e 	bne	r2,zero,14e84 <OSTaskNameSet+0x118>
   14e64:	e0bff517 	ldw	r2,-44(fp)
   14e68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e6c:	e0bff617 	ldw	r2,-40(fp)
   14e70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14e74:	e0bfff17 	ldw	r2,-4(fp)
   14e78:	00c010c4 	movi	r3,67
   14e7c:	10c00005 	stb	r3,0(r2)
        return;
   14e80:	00002606 	br	14f1c <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   14e84:	e0bff717 	ldw	r2,-36(fp)
   14e88:	10800058 	cmpnei	r2,r2,1
   14e8c:	1000081e 	bne	r2,zero,14eb0 <OSTaskNameSet+0x144>
   14e90:	e0bff517 	ldw	r2,-44(fp)
   14e94:	e0bff815 	stw	r2,-32(fp)
   14e98:	e0bff817 	ldw	r2,-32(fp)
   14e9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14ea0:	e0bfff17 	ldw	r2,-4(fp)
   14ea4:	00c010c4 	movi	r3,67
   14ea8:	10c00005 	stb	r3,0(r2)
        return;
   14eac:	00001b06 	br	14f1c <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   14eb0:	e13ffe17 	ldw	r4,-8(fp)
   14eb4:	000f90c0 	call	f90c <OS_StrLen>
   14eb8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   14ebc:	e0bffa03 	ldbu	r2,-24(fp)
   14ec0:	10800830 	cmpltui	r2,r2,32
   14ec4:	1000081e 	bne	r2,zero,14ee8 <OSTaskNameSet+0x17c>
   14ec8:	e0bff517 	ldw	r2,-44(fp)
   14ecc:	e0bff915 	stw	r2,-28(fp)
   14ed0:	e0bff917 	ldw	r2,-28(fp)
   14ed4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   14ed8:	e0bfff17 	ldw	r2,-4(fp)
   14edc:	00c01044 	movi	r3,65
   14ee0:	10c00005 	stb	r3,0(r2)
        return;
   14ee4:	00000d06 	br	14f1c <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   14ee8:	e0bff717 	ldw	r2,-36(fp)
   14eec:	10801304 	addi	r2,r2,76
   14ef0:	e17ffe17 	ldw	r5,-8(fp)
   14ef4:	1009883a 	mov	r4,r2
   14ef8:	000f8980 	call	f898 <OS_StrCopy>
   14efc:	e0bff517 	ldw	r2,-44(fp)
   14f00:	e0bffb15 	stw	r2,-20(fp)
   14f04:	e0bffb17 	ldw	r2,-20(fp)
   14f08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14f0c:	e0bfff17 	ldw	r2,-4(fp)
   14f10:	10000005 	stb	zero,0(r2)
   14f14:	00000106 	br	14f1c <OSTaskNameSet+0x1b0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   14f18:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   14f1c:	e037883a 	mov	sp,fp
   14f20:	dfc00117 	ldw	ra,4(sp)
   14f24:	df000017 	ldw	fp,0(sp)
   14f28:	dec00204 	addi	sp,sp,8
   14f2c:	f800283a 	ret

00014f30 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   14f30:	defff404 	addi	sp,sp,-48
   14f34:	dfc00b15 	stw	ra,44(sp)
   14f38:	df000a15 	stw	fp,40(sp)
   14f3c:	df000a04 	addi	fp,sp,40
   14f40:	2005883a 	mov	r2,r4
   14f44:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14f48:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   14f4c:	e0bfff03 	ldbu	r2,-4(fp)
   14f50:	10800530 	cmpltui	r2,r2,20
   14f54:	1000021e 	bne	r2,zero,14f60 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   14f58:	00800a84 	movi	r2,42
   14f5c:	00006d06 	br	15114 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f60:	0005303a 	rdctl	r2,status
   14f64:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f68:	e0fffe17 	ldw	r3,-8(fp)
   14f6c:	00bfff84 	movi	r2,-2
   14f70:	1884703a 	and	r2,r3,r2
   14f74:	1001703a 	wrctl	status,r2
  
  return context;
   14f78:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14f7c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14f80:	e0ffff03 	ldbu	r3,-4(fp)
   14f84:	008000b4 	movhi	r2,2
   14f88:	1082f304 	addi	r2,r2,3020
   14f8c:	18c7883a 	add	r3,r3,r3
   14f90:	18c7883a 	add	r3,r3,r3
   14f94:	10c5883a 	add	r2,r2,r3
   14f98:	10800017 	ldw	r2,0(r2)
   14f9c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   14fa0:	e0bff817 	ldw	r2,-32(fp)
   14fa4:	1000061e 	bne	r2,zero,14fc0 <OSTaskResume+0x90>
   14fa8:	e0bff617 	ldw	r2,-40(fp)
   14fac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14fb0:	e0bff717 	ldw	r2,-36(fp)
   14fb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   14fb8:	00801184 	movi	r2,70
   14fbc:	00005506 	br	15114 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   14fc0:	e0bff817 	ldw	r2,-32(fp)
   14fc4:	10800058 	cmpnei	r2,r2,1
   14fc8:	1000061e 	bne	r2,zero,14fe4 <OSTaskResume+0xb4>
   14fcc:	e0bff617 	ldw	r2,-40(fp)
   14fd0:	e0bff915 	stw	r2,-28(fp)
   14fd4:	e0bff917 	ldw	r2,-28(fp)
   14fd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14fdc:	008010c4 	movi	r2,67
   14fe0:	00004c06 	br	15114 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   14fe4:	e0bff817 	ldw	r2,-32(fp)
   14fe8:	10800c03 	ldbu	r2,48(r2)
   14fec:	10803fcc 	andi	r2,r2,255
   14ff0:	1080020c 	andi	r2,r2,8
   14ff4:	10004226 	beq	r2,zero,15100 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   14ff8:	e0bff817 	ldw	r2,-32(fp)
   14ffc:	10c00c03 	ldbu	r3,48(r2)
   15000:	00bffdc4 	movi	r2,-9
   15004:	1884703a 	and	r2,r3,r2
   15008:	1007883a 	mov	r3,r2
   1500c:	e0bff817 	ldw	r2,-32(fp)
   15010:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   15014:	e0bff817 	ldw	r2,-32(fp)
   15018:	10800c03 	ldbu	r2,48(r2)
   1501c:	10803fcc 	andi	r2,r2,255
   15020:	1000311e 	bne	r2,zero,150e8 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   15024:	e0bff817 	ldw	r2,-32(fp)
   15028:	10800b8b 	ldhu	r2,46(r2)
   1502c:	10bfffcc 	andi	r2,r2,65535
   15030:	1000281e 	bne	r2,zero,150d4 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   15034:	e0bff817 	ldw	r2,-32(fp)
   15038:	10c00d83 	ldbu	r3,54(r2)
   1503c:	008000b4 	movhi	r2,2
   15040:	10b66604 	addi	r2,r2,-9832
   15044:	10800003 	ldbu	r2,0(r2)
   15048:	1884b03a 	or	r2,r3,r2
   1504c:	1007883a 	mov	r3,r2
   15050:	008000b4 	movhi	r2,2
   15054:	10b66604 	addi	r2,r2,-9832
   15058:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1505c:	e0bff817 	ldw	r2,-32(fp)
   15060:	10800d03 	ldbu	r2,52(r2)
   15064:	10c03fcc 	andi	r3,r2,255
   15068:	e0bff817 	ldw	r2,-32(fp)
   1506c:	10800d03 	ldbu	r2,52(r2)
   15070:	11003fcc 	andi	r4,r2,255
   15074:	008000b4 	movhi	r2,2
   15078:	10b66644 	addi	r2,r2,-9831
   1507c:	1105883a 	add	r2,r2,r4
   15080:	11000003 	ldbu	r4,0(r2)
   15084:	e0bff817 	ldw	r2,-32(fp)
   15088:	10800d43 	ldbu	r2,53(r2)
   1508c:	2084b03a 	or	r2,r4,r2
   15090:	1009883a 	mov	r4,r2
   15094:	008000b4 	movhi	r2,2
   15098:	10b66644 	addi	r2,r2,-9831
   1509c:	10c5883a 	add	r2,r2,r3
   150a0:	11000005 	stb	r4,0(r2)
   150a4:	e0bff617 	ldw	r2,-40(fp)
   150a8:	e0bffa15 	stw	r2,-24(fp)
   150ac:	e0bffa17 	ldw	r2,-24(fp)
   150b0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   150b4:	008000b4 	movhi	r2,2
   150b8:	10b65a44 	addi	r2,r2,-9879
   150bc:	10800003 	ldbu	r2,0(r2)
   150c0:	10803fcc 	andi	r2,r2,255
   150c4:	10800058 	cmpnei	r2,r2,1
   150c8:	10000b1e 	bne	r2,zero,150f8 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   150cc:	000f6f40 	call	f6f4 <OS_Sched>
   150d0:	00000906 	br	150f8 <OSTaskResume+0x1c8>
   150d4:	e0bff617 	ldw	r2,-40(fp)
   150d8:	e0bffb15 	stw	r2,-20(fp)
   150dc:	e0bffb17 	ldw	r2,-20(fp)
   150e0:	1001703a 	wrctl	status,r2
   150e4:	00000406 	br	150f8 <OSTaskResume+0x1c8>
   150e8:	e0bff617 	ldw	r2,-40(fp)
   150ec:	e0bffc15 	stw	r2,-16(fp)
   150f0:	e0bffc17 	ldw	r2,-16(fp)
   150f4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   150f8:	0005883a 	mov	r2,zero
   150fc:	00000506 	br	15114 <OSTaskResume+0x1e4>
   15100:	e0bff617 	ldw	r2,-40(fp)
   15104:	e0bffd15 	stw	r2,-12(fp)
   15108:	e0bffd17 	ldw	r2,-12(fp)
   1510c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   15110:	00801104 	movi	r2,68
}
   15114:	e037883a 	mov	sp,fp
   15118:	dfc00117 	ldw	ra,4(sp)
   1511c:	df000017 	ldw	fp,0(sp)
   15120:	dec00204 	addi	sp,sp,8
   15124:	f800283a 	ret

00015128 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   15128:	defff304 	addi	sp,sp,-52
   1512c:	df000c15 	stw	fp,48(sp)
   15130:	df000c04 	addi	fp,sp,48
   15134:	2005883a 	mov	r2,r4
   15138:	e17fff15 	stw	r5,-4(fp)
   1513c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15140:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   15144:	e0bffe03 	ldbu	r2,-8(fp)
   15148:	10800570 	cmpltui	r2,r2,21
   1514c:	1000051e 	bne	r2,zero,15164 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   15150:	e0bffe03 	ldbu	r2,-8(fp)
   15154:	10803fe0 	cmpeqi	r2,r2,255
   15158:	1000021e 	bne	r2,zero,15164 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1515c:	00800a84 	movi	r2,42
   15160:	00005f06 	br	152e0 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   15164:	e0bfff17 	ldw	r2,-4(fp)
   15168:	1000021e 	bne	r2,zero,15174 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1516c:	00800244 	movi	r2,9
   15170:	00005b06 	br	152e0 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   15174:	e0bfff17 	ldw	r2,-4(fp)
   15178:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1517c:	e0bfff17 	ldw	r2,-4(fp)
   15180:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15184:	0005303a 	rdctl	r2,status
   15188:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1518c:	e0fffd17 	ldw	r3,-12(fp)
   15190:	00bfff84 	movi	r2,-2
   15194:	1884703a 	and	r2,r3,r2
   15198:	1001703a 	wrctl	status,r2
  
  return context;
   1519c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   151a0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   151a4:	e0bffe03 	ldbu	r2,-8(fp)
   151a8:	10803fd8 	cmpnei	r2,r2,255
   151ac:	1000051e 	bne	r2,zero,151c4 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   151b0:	008000b4 	movhi	r2,2
   151b4:	10b66904 	addi	r2,r2,-9820
   151b8:	10800017 	ldw	r2,0(r2)
   151bc:	10800c83 	ldbu	r2,50(r2)
   151c0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   151c4:	e0fffe03 	ldbu	r3,-8(fp)
   151c8:	008000b4 	movhi	r2,2
   151cc:	1082f304 	addi	r2,r2,3020
   151d0:	18c7883a 	add	r3,r3,r3
   151d4:	18c7883a 	add	r3,r3,r3
   151d8:	10c5883a 	add	r2,r2,r3
   151dc:	10800017 	ldw	r2,0(r2)
   151e0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   151e4:	e0bff817 	ldw	r2,-32(fp)
   151e8:	1000061e 	bne	r2,zero,15204 <OSTaskStkChk+0xdc>
   151ec:	e0bff617 	ldw	r2,-40(fp)
   151f0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   151f4:	e0bff717 	ldw	r2,-36(fp)
   151f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   151fc:	008010c4 	movi	r2,67
   15200:	00003706 	br	152e0 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   15204:	e0bff817 	ldw	r2,-32(fp)
   15208:	10800058 	cmpnei	r2,r2,1
   1520c:	1000061e 	bne	r2,zero,15228 <OSTaskStkChk+0x100>
   15210:	e0bff617 	ldw	r2,-40(fp)
   15214:	e0bff915 	stw	r2,-28(fp)
   15218:	e0bff917 	ldw	r2,-28(fp)
   1521c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15220:	008010c4 	movi	r2,67
   15224:	00002e06 	br	152e0 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   15228:	e0bff817 	ldw	r2,-32(fp)
   1522c:	1080040b 	ldhu	r2,16(r2)
   15230:	10bfffcc 	andi	r2,r2,65535
   15234:	1080004c 	andi	r2,r2,1
   15238:	1000061e 	bne	r2,zero,15254 <OSTaskStkChk+0x12c>
   1523c:	e0bff617 	ldw	r2,-40(fp)
   15240:	e0bffa15 	stw	r2,-24(fp)
   15244:	e0bffa17 	ldw	r2,-24(fp)
   15248:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1524c:	00801144 	movi	r2,69
   15250:	00002306 	br	152e0 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   15254:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   15258:	e0bff817 	ldw	r2,-32(fp)
   1525c:	10800317 	ldw	r2,12(r2)
   15260:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   15264:	e0bff817 	ldw	r2,-32(fp)
   15268:	10800217 	ldw	r2,8(r2)
   1526c:	e0bff415 	stw	r2,-48(fp)
   15270:	e0bff617 	ldw	r2,-40(fp)
   15274:	e0bffb15 	stw	r2,-20(fp)
   15278:	e0bffb17 	ldw	r2,-20(fp)
   1527c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   15280:	00000306 	br	15290 <OSTaskStkChk+0x168>
        nfree++;
   15284:	e0bff517 	ldw	r2,-44(fp)
   15288:	10800044 	addi	r2,r2,1
   1528c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   15290:	e0bff417 	ldw	r2,-48(fp)
   15294:	10c00104 	addi	r3,r2,4
   15298:	e0fff415 	stw	r3,-48(fp)
   1529c:	10800017 	ldw	r2,0(r2)
   152a0:	103ff826 	beq	r2,zero,15284 <OSTaskStkChk+0x15c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   152a4:	e0bff517 	ldw	r2,-44(fp)
   152a8:	1085883a 	add	r2,r2,r2
   152ac:	1085883a 	add	r2,r2,r2
   152b0:	1007883a 	mov	r3,r2
   152b4:	e0bfff17 	ldw	r2,-4(fp)
   152b8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   152bc:	e0fffc17 	ldw	r3,-16(fp)
   152c0:	e0bff517 	ldw	r2,-44(fp)
   152c4:	1885c83a 	sub	r2,r3,r2
   152c8:	1085883a 	add	r2,r2,r2
   152cc:	1085883a 	add	r2,r2,r2
   152d0:	1007883a 	mov	r3,r2
   152d4:	e0bfff17 	ldw	r2,-4(fp)
   152d8:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   152dc:	0005883a 	mov	r2,zero
}
   152e0:	e037883a 	mov	sp,fp
   152e4:	df000017 	ldw	fp,0(sp)
   152e8:	dec00104 	addi	sp,sp,4
   152ec:	f800283a 	ret

000152f0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   152f0:	defff504 	addi	sp,sp,-44
   152f4:	dfc00a15 	stw	ra,40(sp)
   152f8:	df000915 	stw	fp,36(sp)
   152fc:	df000904 	addi	fp,sp,36
   15300:	2005883a 	mov	r2,r4
   15304:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15308:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1530c:	e0bfff03 	ldbu	r2,-4(fp)
   15310:	10800518 	cmpnei	r2,r2,20
   15314:	1000021e 	bne	r2,zero,15320 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   15318:	008011c4 	movi	r2,71
   1531c:	00007406 	br	154f0 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   15320:	e0bfff03 	ldbu	r2,-4(fp)
   15324:	10800530 	cmpltui	r2,r2,20
   15328:	1000051e 	bne	r2,zero,15340 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1532c:	e0bfff03 	ldbu	r2,-4(fp)
   15330:	10803fe0 	cmpeqi	r2,r2,255
   15334:	1000021e 	bne	r2,zero,15340 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   15338:	00800a84 	movi	r2,42
   1533c:	00006c06 	br	154f0 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15340:	0005303a 	rdctl	r2,status
   15344:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15348:	e0fffe17 	ldw	r3,-8(fp)
   1534c:	00bfff84 	movi	r2,-2
   15350:	1884703a 	and	r2,r3,r2
   15354:	1001703a 	wrctl	status,r2
  
  return context;
   15358:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1535c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   15360:	e0bfff03 	ldbu	r2,-4(fp)
   15364:	10803fd8 	cmpnei	r2,r2,255
   15368:	1000081e 	bne	r2,zero,1538c <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1536c:	008000b4 	movhi	r2,2
   15370:	10b66904 	addi	r2,r2,-9820
   15374:	10800017 	ldw	r2,0(r2)
   15378:	10800c83 	ldbu	r2,50(r2)
   1537c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   15380:	00800044 	movi	r2,1
   15384:	e0bff705 	stb	r2,-36(fp)
   15388:	00000b06 	br	153b8 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1538c:	008000b4 	movhi	r2,2
   15390:	10b66904 	addi	r2,r2,-9820
   15394:	10800017 	ldw	r2,0(r2)
   15398:	10800c83 	ldbu	r2,50(r2)
   1539c:	10c03fcc 	andi	r3,r2,255
   153a0:	e0bfff03 	ldbu	r2,-4(fp)
   153a4:	1880031e 	bne	r3,r2,153b4 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   153a8:	00800044 	movi	r2,1
   153ac:	e0bff705 	stb	r2,-36(fp)
   153b0:	00000106 	br	153b8 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   153b4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   153b8:	e0ffff03 	ldbu	r3,-4(fp)
   153bc:	008000b4 	movhi	r2,2
   153c0:	1082f304 	addi	r2,r2,3020
   153c4:	18c7883a 	add	r3,r3,r3
   153c8:	18c7883a 	add	r3,r3,r3
   153cc:	10c5883a 	add	r2,r2,r3
   153d0:	10800017 	ldw	r2,0(r2)
   153d4:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   153d8:	e0bffa17 	ldw	r2,-24(fp)
   153dc:	1000061e 	bne	r2,zero,153f8 <OSTaskSuspend+0x108>
   153e0:	e0bff817 	ldw	r2,-32(fp)
   153e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   153e8:	e0bff917 	ldw	r2,-28(fp)
   153ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   153f0:	00801204 	movi	r2,72
   153f4:	00003e06 	br	154f0 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   153f8:	e0bffa17 	ldw	r2,-24(fp)
   153fc:	10800058 	cmpnei	r2,r2,1
   15400:	1000061e 	bne	r2,zero,1541c <OSTaskSuspend+0x12c>
   15404:	e0bff817 	ldw	r2,-32(fp)
   15408:	e0bffb15 	stw	r2,-20(fp)
   1540c:	e0bffb17 	ldw	r2,-20(fp)
   15410:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15414:	008010c4 	movi	r2,67
   15418:	00003506 	br	154f0 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   1541c:	e0bffa17 	ldw	r2,-24(fp)
   15420:	10800d03 	ldbu	r2,52(r2)
   15424:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   15428:	e0fffd03 	ldbu	r3,-12(fp)
   1542c:	e13ffd03 	ldbu	r4,-12(fp)
   15430:	008000b4 	movhi	r2,2
   15434:	10b66644 	addi	r2,r2,-9831
   15438:	1105883a 	add	r2,r2,r4
   1543c:	10800003 	ldbu	r2,0(r2)
   15440:	1009883a 	mov	r4,r2
   15444:	e0bffa17 	ldw	r2,-24(fp)
   15448:	10800d43 	ldbu	r2,53(r2)
   1544c:	0084303a 	nor	r2,zero,r2
   15450:	2084703a 	and	r2,r4,r2
   15454:	1009883a 	mov	r4,r2
   15458:	008000b4 	movhi	r2,2
   1545c:	10b66644 	addi	r2,r2,-9831
   15460:	10c5883a 	add	r2,r2,r3
   15464:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   15468:	e0fffd03 	ldbu	r3,-12(fp)
   1546c:	008000b4 	movhi	r2,2
   15470:	10b66644 	addi	r2,r2,-9831
   15474:	10c5883a 	add	r2,r2,r3
   15478:	10800003 	ldbu	r2,0(r2)
   1547c:	10803fcc 	andi	r2,r2,255
   15480:	10000c1e 	bne	r2,zero,154b4 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   15484:	e0bffa17 	ldw	r2,-24(fp)
   15488:	10800d83 	ldbu	r2,54(r2)
   1548c:	0084303a 	nor	r2,zero,r2
   15490:	1007883a 	mov	r3,r2
   15494:	008000b4 	movhi	r2,2
   15498:	10b66604 	addi	r2,r2,-9832
   1549c:	10800003 	ldbu	r2,0(r2)
   154a0:	1884703a 	and	r2,r3,r2
   154a4:	1007883a 	mov	r3,r2
   154a8:	008000b4 	movhi	r2,2
   154ac:	10b66604 	addi	r2,r2,-9832
   154b0:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   154b4:	e0bffa17 	ldw	r2,-24(fp)
   154b8:	10800c03 	ldbu	r2,48(r2)
   154bc:	10800214 	ori	r2,r2,8
   154c0:	1007883a 	mov	r3,r2
   154c4:	e0bffa17 	ldw	r2,-24(fp)
   154c8:	10c00c05 	stb	r3,48(r2)
   154cc:	e0bff817 	ldw	r2,-32(fp)
   154d0:	e0bffc15 	stw	r2,-16(fp)
   154d4:	e0bffc17 	ldw	r2,-16(fp)
   154d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   154dc:	e0bff703 	ldbu	r2,-36(fp)
   154e0:	10800058 	cmpnei	r2,r2,1
   154e4:	1000011e 	bne	r2,zero,154ec <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   154e8:	000f6f40 	call	f6f4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   154ec:	0005883a 	mov	r2,zero
}
   154f0:	e037883a 	mov	sp,fp
   154f4:	dfc00117 	ldw	ra,4(sp)
   154f8:	df000017 	ldw	fp,0(sp)
   154fc:	dec00204 	addi	sp,sp,8
   15500:	f800283a 	ret

00015504 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   15504:	defff604 	addi	sp,sp,-40
   15508:	dfc00915 	stw	ra,36(sp)
   1550c:	df000815 	stw	fp,32(sp)
   15510:	df000804 	addi	fp,sp,32
   15514:	2005883a 	mov	r2,r4
   15518:	e17fff15 	stw	r5,-4(fp)
   1551c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15520:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   15524:	e0bffe03 	ldbu	r2,-8(fp)
   15528:	10800570 	cmpltui	r2,r2,21
   1552c:	1000051e 	bne	r2,zero,15544 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   15530:	e0bffe03 	ldbu	r2,-8(fp)
   15534:	10803fe0 	cmpeqi	r2,r2,255
   15538:	1000021e 	bne	r2,zero,15544 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1553c:	00800a84 	movi	r2,42
   15540:	00003606 	br	1561c <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   15544:	e0bfff17 	ldw	r2,-4(fp)
   15548:	1000021e 	bne	r2,zero,15554 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1554c:	00800244 	movi	r2,9
   15550:	00003206 	br	1561c <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15554:	0005303a 	rdctl	r2,status
   15558:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1555c:	e0fffd17 	ldw	r3,-12(fp)
   15560:	00bfff84 	movi	r2,-2
   15564:	1884703a 	and	r2,r3,r2
   15568:	1001703a 	wrctl	status,r2
  
  return context;
   1556c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15570:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   15574:	e0bffe03 	ldbu	r2,-8(fp)
   15578:	10803fd8 	cmpnei	r2,r2,255
   1557c:	1000051e 	bne	r2,zero,15594 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   15580:	008000b4 	movhi	r2,2
   15584:	10b66904 	addi	r2,r2,-9820
   15588:	10800017 	ldw	r2,0(r2)
   1558c:	10800c83 	ldbu	r2,50(r2)
   15590:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15594:	e0fffe03 	ldbu	r3,-8(fp)
   15598:	008000b4 	movhi	r2,2
   1559c:	1082f304 	addi	r2,r2,3020
   155a0:	18c7883a 	add	r3,r3,r3
   155a4:	18c7883a 	add	r3,r3,r3
   155a8:	10c5883a 	add	r2,r2,r3
   155ac:	10800017 	ldw	r2,0(r2)
   155b0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   155b4:	e0bffa17 	ldw	r2,-24(fp)
   155b8:	1000061e 	bne	r2,zero,155d4 <OSTaskQuery+0xd0>
   155bc:	e0bff817 	ldw	r2,-32(fp)
   155c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   155c4:	e0bff917 	ldw	r2,-28(fp)
   155c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   155cc:	00800a44 	movi	r2,41
   155d0:	00001206 	br	1561c <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   155d4:	e0bffa17 	ldw	r2,-24(fp)
   155d8:	10800058 	cmpnei	r2,r2,1
   155dc:	1000061e 	bne	r2,zero,155f8 <OSTaskQuery+0xf4>
   155e0:	e0bff817 	ldw	r2,-32(fp)
   155e4:	e0bffb15 	stw	r2,-20(fp)
   155e8:	e0bffb17 	ldw	r2,-20(fp)
   155ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   155f0:	008010c4 	movi	r2,67
   155f4:	00000906 	br	1561c <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   155f8:	01801b04 	movi	r6,108
   155fc:	e17ffa17 	ldw	r5,-24(fp)
   15600:	e13fff17 	ldw	r4,-4(fp)
   15604:	000f68c0 	call	f68c <OS_MemCopy>
   15608:	e0bff817 	ldw	r2,-32(fp)
   1560c:	e0bffc15 	stw	r2,-16(fp)
   15610:	e0bffc17 	ldw	r2,-16(fp)
   15614:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15618:	0005883a 	mov	r2,zero
}
   1561c:	e037883a 	mov	sp,fp
   15620:	dfc00117 	ldw	ra,4(sp)
   15624:	df000017 	ldw	fp,0(sp)
   15628:	dec00204 	addi	sp,sp,8
   1562c:	f800283a 	ret

00015630 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   15630:	defffc04 	addi	sp,sp,-16
   15634:	df000315 	stw	fp,12(sp)
   15638:	df000304 	addi	fp,sp,12
   1563c:	e13ffd15 	stw	r4,-12(fp)
   15640:	e17ffe15 	stw	r5,-8(fp)
   15644:	3005883a 	mov	r2,r6
   15648:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1564c:	e0bfff0b 	ldhu	r2,-4(fp)
   15650:	1080004c 	andi	r2,r2,1
   15654:	10000d26 	beq	r2,zero,1568c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   15658:	e0bfff0b 	ldhu	r2,-4(fp)
   1565c:	1080008c 	andi	r2,r2,2
   15660:	10000a26 	beq	r2,zero,1568c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   15664:	00000706 	br	15684 <OS_TaskStkClr+0x54>
                size--;
   15668:	e0bffe17 	ldw	r2,-8(fp)
   1566c:	10bfffc4 	addi	r2,r2,-1
   15670:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   15674:	e0bffd17 	ldw	r2,-12(fp)
   15678:	10c00104 	addi	r3,r2,4
   1567c:	e0fffd15 	stw	r3,-12(fp)
   15680:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   15684:	e0bffe17 	ldw	r2,-8(fp)
   15688:	103ff71e 	bne	r2,zero,15668 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1568c:	0001883a 	nop
   15690:	e037883a 	mov	sp,fp
   15694:	df000017 	ldw	fp,0(sp)
   15698:	dec00104 	addi	sp,sp,4
   1569c:	f800283a 	ret

000156a0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   156a0:	defff904 	addi	sp,sp,-28
   156a4:	dfc00615 	stw	ra,24(sp)
   156a8:	df000515 	stw	fp,20(sp)
   156ac:	df000504 	addi	fp,sp,20
   156b0:	2005883a 	mov	r2,r4
   156b4:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   156b8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   156bc:	008000b4 	movhi	r2,2
   156c0:	10b66804 	addi	r2,r2,-9824
   156c4:	10800003 	ldbu	r2,0(r2)
   156c8:	10803fcc 	andi	r2,r2,255
   156cc:	1000411e 	bne	r2,zero,157d4 <OSTimeDly+0x134>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   156d0:	e0bfff0b 	ldhu	r2,-4(fp)
   156d4:	10004026 	beq	r2,zero,157d8 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   156d8:	0005303a 	rdctl	r2,status
   156dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   156e0:	e0fffe17 	ldw	r3,-8(fp)
   156e4:	00bfff84 	movi	r2,-2
   156e8:	1884703a 	and	r2,r3,r2
   156ec:	1001703a 	wrctl	status,r2
  
  return context;
   156f0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   156f4:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   156f8:	008000b4 	movhi	r2,2
   156fc:	10b66904 	addi	r2,r2,-9820
   15700:	10800017 	ldw	r2,0(r2)
   15704:	10800d03 	ldbu	r2,52(r2)
   15708:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1570c:	e0fffd03 	ldbu	r3,-12(fp)
   15710:	e13ffd03 	ldbu	r4,-12(fp)
   15714:	008000b4 	movhi	r2,2
   15718:	10b66644 	addi	r2,r2,-9831
   1571c:	1105883a 	add	r2,r2,r4
   15720:	10800003 	ldbu	r2,0(r2)
   15724:	1009883a 	mov	r4,r2
   15728:	008000b4 	movhi	r2,2
   1572c:	10b66904 	addi	r2,r2,-9820
   15730:	10800017 	ldw	r2,0(r2)
   15734:	10800d43 	ldbu	r2,53(r2)
   15738:	0084303a 	nor	r2,zero,r2
   1573c:	2084703a 	and	r2,r4,r2
   15740:	1009883a 	mov	r4,r2
   15744:	008000b4 	movhi	r2,2
   15748:	10b66644 	addi	r2,r2,-9831
   1574c:	10c5883a 	add	r2,r2,r3
   15750:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   15754:	e0fffd03 	ldbu	r3,-12(fp)
   15758:	008000b4 	movhi	r2,2
   1575c:	10b66644 	addi	r2,r2,-9831
   15760:	10c5883a 	add	r2,r2,r3
   15764:	10800003 	ldbu	r2,0(r2)
   15768:	10803fcc 	andi	r2,r2,255
   1576c:	10000e1e 	bne	r2,zero,157a8 <OSTimeDly+0x108>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   15770:	008000b4 	movhi	r2,2
   15774:	10b66904 	addi	r2,r2,-9820
   15778:	10800017 	ldw	r2,0(r2)
   1577c:	10800d83 	ldbu	r2,54(r2)
   15780:	0084303a 	nor	r2,zero,r2
   15784:	1007883a 	mov	r3,r2
   15788:	008000b4 	movhi	r2,2
   1578c:	10b66604 	addi	r2,r2,-9832
   15790:	10800003 	ldbu	r2,0(r2)
   15794:	1884703a 	and	r2,r3,r2
   15798:	1007883a 	mov	r3,r2
   1579c:	008000b4 	movhi	r2,2
   157a0:	10b66604 	addi	r2,r2,-9832
   157a4:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   157a8:	008000b4 	movhi	r2,2
   157ac:	10b66904 	addi	r2,r2,-9820
   157b0:	10800017 	ldw	r2,0(r2)
   157b4:	e0ffff0b 	ldhu	r3,-4(fp)
   157b8:	10c00b8d 	sth	r3,46(r2)
   157bc:	e0bffb17 	ldw	r2,-20(fp)
   157c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157c4:	e0bffc17 	ldw	r2,-16(fp)
   157c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   157cc:	000f6f40 	call	f6f4 <OS_Sched>
   157d0:	00000106 	br	157d8 <OSTimeDly+0x138>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   157d4:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   157d8:	e037883a 	mov	sp,fp
   157dc:	dfc00117 	ldw	ra,4(sp)
   157e0:	df000017 	ldw	fp,0(sp)
   157e4:	dec00204 	addi	sp,sp,8
   157e8:	f800283a 	ret

000157ec <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   157ec:	defff804 	addi	sp,sp,-32
   157f0:	dfc00715 	stw	ra,28(sp)
   157f4:	df000615 	stw	fp,24(sp)
   157f8:	df000604 	addi	fp,sp,24
   157fc:	2015883a 	mov	r10,r4
   15800:	2809883a 	mov	r4,r5
   15804:	3007883a 	mov	r3,r6
   15808:	3805883a 	mov	r2,r7
   1580c:	e2bffc05 	stb	r10,-16(fp)
   15810:	e13ffd05 	stb	r4,-12(fp)
   15814:	e0fffe05 	stb	r3,-8(fp)
   15818:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1581c:	008000b4 	movhi	r2,2
   15820:	10b66804 	addi	r2,r2,-9824
   15824:	10800003 	ldbu	r2,0(r2)
   15828:	10803fcc 	andi	r2,r2,255
   1582c:	10000226 	beq	r2,zero,15838 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   15830:	00801544 	movi	r2,85
   15834:	00004206 	br	15940 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   15838:	e0bffc03 	ldbu	r2,-16(fp)
   1583c:	1000081e 	bne	r2,zero,15860 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   15840:	e0bffd03 	ldbu	r2,-12(fp)
   15844:	1000061e 	bne	r2,zero,15860 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   15848:	e0bffe03 	ldbu	r2,-8(fp)
   1584c:	1000041e 	bne	r2,zero,15860 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   15850:	e0bfff0b 	ldhu	r2,-4(fp)
   15854:	1000021e 	bne	r2,zero,15860 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   15858:	00801504 	movi	r2,84
   1585c:	00003806 	br	15940 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   15860:	e0bffd03 	ldbu	r2,-12(fp)
   15864:	10800f30 	cmpltui	r2,r2,60
   15868:	1000021e 	bne	r2,zero,15874 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1586c:	00801444 	movi	r2,81
   15870:	00003306 	br	15940 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   15874:	e0bffe03 	ldbu	r2,-8(fp)
   15878:	10800f30 	cmpltui	r2,r2,60
   1587c:	1000021e 	bne	r2,zero,15888 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   15880:	00801484 	movi	r2,82
   15884:	00002e06 	br	15940 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   15888:	e0bfff0b 	ldhu	r2,-4(fp)
   1588c:	1080fa30 	cmpltui	r2,r2,1000
   15890:	1000021e 	bne	r2,zero,1589c <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   15894:	008014c4 	movi	r2,83
   15898:	00002906 	br	15940 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1589c:	e0bffc03 	ldbu	r2,-16(fp)
   158a0:	10c38424 	muli	r3,r2,3600
   158a4:	e0bffd03 	ldbu	r2,-12(fp)
   158a8:	10800f24 	muli	r2,r2,60
   158ac:	1887883a 	add	r3,r3,r2
   158b0:	e0bffe03 	ldbu	r2,-8(fp)
   158b4:	1885883a 	add	r2,r3,r2
   158b8:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   158bc:	e0bfff0b 	ldhu	r2,-4(fp)
   158c0:	10800f84 	addi	r2,r2,62
   158c4:	100690fa 	slli	r3,r2,3
   158c8:	008418b4 	movhi	r2,4194
   158cc:	109374c4 	addi	r2,r2,19923
   158d0:	188a383a 	mulxuu	r5,r3,r2
   158d4:	1885383a 	mul	r2,r3,r2
   158d8:	1011883a 	mov	r8,r2
   158dc:	2813883a 	mov	r9,r5
   158e0:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   158e4:	2085883a 	add	r2,r4,r2
   158e8:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   158ec:	e0bffb17 	ldw	r2,-20(fp)
   158f0:	1004d43a 	srli	r2,r2,16
   158f4:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   158f8:	e0bffb17 	ldw	r2,-20(fp)
   158fc:	10bfffcc 	andi	r2,r2,65535
   15900:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   15904:	e0bffb17 	ldw	r2,-20(fp)
   15908:	10bfffcc 	andi	r2,r2,65535
   1590c:	1009883a 	mov	r4,r2
   15910:	00156a00 	call	156a0 <OSTimeDly>
    while (loops > 0) {
   15914:	00000706 	br	15934 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   15918:	01200014 	movui	r4,32768
   1591c:	00156a00 	call	156a0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   15920:	01200014 	movui	r4,32768
   15924:	00156a00 	call	156a0 <OSTimeDly>
        loops--;
   15928:	e0bffa0b 	ldhu	r2,-24(fp)
   1592c:	10bfffc4 	addi	r2,r2,-1
   15930:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   15934:	e0bffa0b 	ldhu	r2,-24(fp)
   15938:	103ff71e 	bne	r2,zero,15918 <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1593c:	0005883a 	mov	r2,zero
}
   15940:	e037883a 	mov	sp,fp
   15944:	dfc00117 	ldw	ra,4(sp)
   15948:	df000017 	ldw	fp,0(sp)
   1594c:	dec00204 	addi	sp,sp,8
   15950:	f800283a 	ret

00015954 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   15954:	defff504 	addi	sp,sp,-44
   15958:	dfc00a15 	stw	ra,40(sp)
   1595c:	df000915 	stw	fp,36(sp)
   15960:	df000904 	addi	fp,sp,36
   15964:	2005883a 	mov	r2,r4
   15968:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1596c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   15970:	e0bfff03 	ldbu	r2,-4(fp)
   15974:	10800530 	cmpltui	r2,r2,20
   15978:	1000021e 	bne	r2,zero,15984 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1597c:	00800a84 	movi	r2,42
   15980:	00006b06 	br	15b30 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15984:	0005303a 	rdctl	r2,status
   15988:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1598c:	e0fffe17 	ldw	r3,-8(fp)
   15990:	00bfff84 	movi	r2,-2
   15994:	1884703a 	and	r2,r3,r2
   15998:	1001703a 	wrctl	status,r2
  
  return context;
   1599c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   159a0:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   159a4:	e0ffff03 	ldbu	r3,-4(fp)
   159a8:	008000b4 	movhi	r2,2
   159ac:	1082f304 	addi	r2,r2,3020
   159b0:	18c7883a 	add	r3,r3,r3
   159b4:	18c7883a 	add	r3,r3,r3
   159b8:	10c5883a 	add	r2,r2,r3
   159bc:	10800017 	ldw	r2,0(r2)
   159c0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   159c4:	e0bff917 	ldw	r2,-28(fp)
   159c8:	1000061e 	bne	r2,zero,159e4 <OSTimeDlyResume+0x90>
   159cc:	e0bff717 	ldw	r2,-36(fp)
   159d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   159d4:	e0bff817 	ldw	r2,-32(fp)
   159d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   159dc:	008010c4 	movi	r2,67
   159e0:	00005306 	br	15b30 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   159e4:	e0bff917 	ldw	r2,-28(fp)
   159e8:	10800058 	cmpnei	r2,r2,1
   159ec:	1000061e 	bne	r2,zero,15a08 <OSTimeDlyResume+0xb4>
   159f0:	e0bff717 	ldw	r2,-36(fp)
   159f4:	e0bffa15 	stw	r2,-24(fp)
   159f8:	e0bffa17 	ldw	r2,-24(fp)
   159fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15a00:	008010c4 	movi	r2,67
   15a04:	00004a06 	br	15b30 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   15a08:	e0bff917 	ldw	r2,-28(fp)
   15a0c:	10800b8b 	ldhu	r2,46(r2)
   15a10:	10bfffcc 	andi	r2,r2,65535
   15a14:	1000061e 	bne	r2,zero,15a30 <OSTimeDlyResume+0xdc>
   15a18:	e0bff717 	ldw	r2,-36(fp)
   15a1c:	e0bffb15 	stw	r2,-20(fp)
   15a20:	e0bffb17 	ldw	r2,-20(fp)
   15a24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   15a28:	00801404 	movi	r2,80
   15a2c:	00004006 	br	15b30 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   15a30:	e0bff917 	ldw	r2,-28(fp)
   15a34:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   15a38:	e0bff917 	ldw	r2,-28(fp)
   15a3c:	10800c03 	ldbu	r2,48(r2)
   15a40:	10803fcc 	andi	r2,r2,255
   15a44:	10800dcc 	andi	r2,r2,55
   15a48:	10000b26 	beq	r2,zero,15a78 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   15a4c:	e0bff917 	ldw	r2,-28(fp)
   15a50:	10c00c03 	ldbu	r3,48(r2)
   15a54:	00bff204 	movi	r2,-56
   15a58:	1884703a 	and	r2,r3,r2
   15a5c:	1007883a 	mov	r3,r2
   15a60:	e0bff917 	ldw	r2,-28(fp)
   15a64:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   15a68:	e0bff917 	ldw	r2,-28(fp)
   15a6c:	00c00044 	movi	r3,1
   15a70:	10c00c45 	stb	r3,49(r2)
   15a74:	00000206 	br	15a80 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   15a78:	e0bff917 	ldw	r2,-28(fp)
   15a7c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   15a80:	e0bff917 	ldw	r2,-28(fp)
   15a84:	10800c03 	ldbu	r2,48(r2)
   15a88:	10803fcc 	andi	r2,r2,255
   15a8c:	1080020c 	andi	r2,r2,8
   15a90:	1000221e 	bne	r2,zero,15b1c <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   15a94:	e0bff917 	ldw	r2,-28(fp)
   15a98:	10c00d83 	ldbu	r3,54(r2)
   15a9c:	008000b4 	movhi	r2,2
   15aa0:	10b66604 	addi	r2,r2,-9832
   15aa4:	10800003 	ldbu	r2,0(r2)
   15aa8:	1884b03a 	or	r2,r3,r2
   15aac:	1007883a 	mov	r3,r2
   15ab0:	008000b4 	movhi	r2,2
   15ab4:	10b66604 	addi	r2,r2,-9832
   15ab8:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15abc:	e0bff917 	ldw	r2,-28(fp)
   15ac0:	10800d03 	ldbu	r2,52(r2)
   15ac4:	10c03fcc 	andi	r3,r2,255
   15ac8:	e0bff917 	ldw	r2,-28(fp)
   15acc:	10800d03 	ldbu	r2,52(r2)
   15ad0:	11003fcc 	andi	r4,r2,255
   15ad4:	008000b4 	movhi	r2,2
   15ad8:	10b66644 	addi	r2,r2,-9831
   15adc:	1105883a 	add	r2,r2,r4
   15ae0:	11000003 	ldbu	r4,0(r2)
   15ae4:	e0bff917 	ldw	r2,-28(fp)
   15ae8:	10800d43 	ldbu	r2,53(r2)
   15aec:	2084b03a 	or	r2,r4,r2
   15af0:	1009883a 	mov	r4,r2
   15af4:	008000b4 	movhi	r2,2
   15af8:	10b66644 	addi	r2,r2,-9831
   15afc:	10c5883a 	add	r2,r2,r3
   15b00:	11000005 	stb	r4,0(r2)
   15b04:	e0bff717 	ldw	r2,-36(fp)
   15b08:	e0bffc15 	stw	r2,-16(fp)
   15b0c:	e0bffc17 	ldw	r2,-16(fp)
   15b10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   15b14:	000f6f40 	call	f6f4 <OS_Sched>
   15b18:	00000406 	br	15b2c <OSTimeDlyResume+0x1d8>
   15b1c:	e0bff717 	ldw	r2,-36(fp)
   15b20:	e0bffd15 	stw	r2,-12(fp)
   15b24:	e0bffd17 	ldw	r2,-12(fp)
   15b28:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   15b2c:	0005883a 	mov	r2,zero
}
   15b30:	e037883a 	mov	sp,fp
   15b34:	dfc00117 	ldw	ra,4(sp)
   15b38:	df000017 	ldw	fp,0(sp)
   15b3c:	dec00204 	addi	sp,sp,8
   15b40:	f800283a 	ret

00015b44 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   15b44:	defffb04 	addi	sp,sp,-20
   15b48:	df000415 	stw	fp,16(sp)
   15b4c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15b50:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15b54:	0005303a 	rdctl	r2,status
   15b58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b5c:	e0fffe17 	ldw	r3,-8(fp)
   15b60:	00bfff84 	movi	r2,-2
   15b64:	1884703a 	and	r2,r3,r2
   15b68:	1001703a 	wrctl	status,r2
  
  return context;
   15b6c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   15b70:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   15b74:	008000b4 	movhi	r2,2
   15b78:	10b66a04 	addi	r2,r2,-9816
   15b7c:	10800017 	ldw	r2,0(r2)
   15b80:	e0bffd15 	stw	r2,-12(fp)
   15b84:	e0bffc17 	ldw	r2,-16(fp)
   15b88:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b8c:	e0bfff17 	ldw	r2,-4(fp)
   15b90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   15b94:	e0bffd17 	ldw	r2,-12(fp)
}
   15b98:	e037883a 	mov	sp,fp
   15b9c:	df000017 	ldw	fp,0(sp)
   15ba0:	dec00104 	addi	sp,sp,4
   15ba4:	f800283a 	ret

00015ba8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   15ba8:	defffb04 	addi	sp,sp,-20
   15bac:	df000415 	stw	fp,16(sp)
   15bb0:	df000404 	addi	fp,sp,16
   15bb4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15bb8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15bbc:	0005303a 	rdctl	r2,status
   15bc0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15bc4:	e0fffd17 	ldw	r3,-12(fp)
   15bc8:	00bfff84 	movi	r2,-2
   15bcc:	1884703a 	and	r2,r3,r2
   15bd0:	1001703a 	wrctl	status,r2
  
  return context;
   15bd4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   15bd8:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   15bdc:	008000b4 	movhi	r2,2
   15be0:	10b66a04 	addi	r2,r2,-9816
   15be4:	e0ffff17 	ldw	r3,-4(fp)
   15be8:	10c00015 	stw	r3,0(r2)
   15bec:	e0bffc17 	ldw	r2,-16(fp)
   15bf0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15bf4:	e0bffe17 	ldw	r2,-8(fp)
   15bf8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   15bfc:	0001883a 	nop
   15c00:	e037883a 	mov	sp,fp
   15c04:	df000017 	ldw	fp,0(sp)
   15c08:	dec00104 	addi	sp,sp,4
   15c0c:	f800283a 	ret

00015c10 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   15c10:	defffd04 	addi	sp,sp,-12
   15c14:	dfc00215 	stw	ra,8(sp)
   15c18:	df000115 	stw	fp,4(sp)
   15c1c:	df000104 	addi	fp,sp,4
   15c20:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   15c24:	014000b4 	movhi	r5,2
   15c28:	296e6d04 	addi	r5,r5,-17996
   15c2c:	e13fff17 	ldw	r4,-4(fp)
   15c30:	00182900 	call	18290 <alt_dev_llist_insert>
}
   15c34:	e037883a 	mov	sp,fp
   15c38:	dfc00117 	ldw	ra,4(sp)
   15c3c:	df000017 	ldw	fp,0(sp)
   15c40:	dec00204 	addi	sp,sp,8
   15c44:	f800283a 	ret

00015c48 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   15c48:	defffd04 	addi	sp,sp,-12
   15c4c:	dfc00215 	stw	ra,8(sp)
   15c50:	df000115 	stw	fp,4(sp)
   15c54:	df000104 	addi	fp,sp,4
   15c58:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   15c5c:	0018bc00 	call	18bc0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15c60:	00800044 	movi	r2,1
   15c64:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   15c68:	0001883a 	nop
   15c6c:	e037883a 	mov	sp,fp
   15c70:	dfc00117 	ldw	ra,4(sp)
   15c74:	df000017 	ldw	fp,0(sp)
   15c78:	dec00204 	addi	sp,sp,8
   15c7c:	f800283a 	ret

00015c80 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   15c80:	defffd04 	addi	sp,sp,-12
   15c84:	dfc00215 	stw	ra,8(sp)
   15c88:	df000115 	stw	fp,4(sp)
   15c8c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   15c90:	01c00204 	movi	r7,8
   15c94:	000d883a 	mov	r6,zero
   15c98:	000b883a 	mov	r5,zero
   15c9c:	01040034 	movhi	r4,4096
   15ca0:	21080004 	addi	r4,r4,8192
   15ca4:	0016d8c0 	call	16d8c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   15ca8:	01800204 	movi	r6,8
   15cac:	000b883a 	mov	r5,zero
   15cb0:	010000b4 	movhi	r4,2
   15cb4:	21298504 	addi	r4,r4,-23020
   15cb8:	00161080 	call	16108 <altera_avalon_jtag_uart_init>
   15cbc:	010000b4 	movhi	r4,2
   15cc0:	21297b04 	addi	r4,r4,-23060
   15cc4:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   15cc8:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   15ccc:	010000b4 	movhi	r4,2
   15cd0:	212d9604 	addi	r4,r4,-18856
   15cd4:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   15cd8:	010000b4 	movhi	r4,2
   15cdc:	212da204 	addi	r4,r4,-18808
   15ce0:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   15ce4:	010000b4 	movhi	r4,2
   15ce8:	212dae04 	addi	r4,r4,-18760
   15cec:	0016ec40 	call	16ec4 <alt_up_character_lcd_init>
   15cf0:	010000b4 	movhi	r4,2
   15cf4:	212dae04 	addi	r4,r4,-18760
   15cf8:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   15cfc:	010000b4 	movhi	r4,2
   15d00:	212db904 	addi	r4,r4,-18716
   15d04:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   15d08:	010000b4 	movhi	r4,2
   15d0c:	212dc404 	addi	r4,r4,-18672
   15d10:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   15d14:	010000b4 	movhi	r4,2
   15d18:	212dcf04 	addi	r4,r4,-18628
   15d1c:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   15d20:	010000b4 	movhi	r4,2
   15d24:	212dda04 	addi	r4,r4,-18584
   15d28:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   15d2c:	010000b4 	movhi	r4,2
   15d30:	212de504 	addi	r4,r4,-18540
   15d34:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   15d38:	010000b4 	movhi	r4,2
   15d3c:	212df004 	addi	r4,r4,-18496
   15d40:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   15d44:	010000b4 	movhi	r4,2
   15d48:	212dfb04 	addi	r4,r4,-18452
   15d4c:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   15d50:	010000b4 	movhi	r4,2
   15d54:	212e0604 	addi	r4,r4,-18408
   15d58:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   15d5c:	010000b4 	movhi	r4,2
   15d60:	212e1104 	addi	r4,r4,-18364
   15d64:	00177c00 	call	177c0 <alt_up_ps2_init>
   15d68:	010000b4 	movhi	r4,2
   15d6c:	212e1104 	addi	r4,r4,-18364
   15d70:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   15d74:	010000b4 	movhi	r4,2
   15d78:	212e1f04 	addi	r4,r4,-18308
   15d7c:	00177c00 	call	177c0 <alt_up_ps2_init>
   15d80:	010000b4 	movhi	r4,2
   15d84:	212e1f04 	addi	r4,r4,-18308
   15d88:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   15d8c:	010000b4 	movhi	r4,2
   15d90:	212e2d04 	addi	r4,r4,-18252
   15d94:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   15d98:	010000b4 	movhi	r4,2
   15d9c:	212e3804 	addi	r4,r4,-18208
   15da0:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   15da4:	008000b4 	movhi	r2,2
   15da8:	10ae4504 	addi	r2,r2,-18156
   15dac:	10800a17 	ldw	r2,40(r2)
   15db0:	10800017 	ldw	r2,0(r2)
   15db4:	1007883a 	mov	r3,r2
   15db8:	008000b4 	movhi	r2,2
   15dbc:	10ae4504 	addi	r2,r2,-18156
   15dc0:	10c00b15 	stw	r3,44(r2)
   15dc4:	008000b4 	movhi	r2,2
   15dc8:	10ae4504 	addi	r2,r2,-18156
   15dcc:	10800a17 	ldw	r2,40(r2)
   15dd0:	10800104 	addi	r2,r2,4
   15dd4:	10800017 	ldw	r2,0(r2)
   15dd8:	1007883a 	mov	r3,r2
   15ddc:	008000b4 	movhi	r2,2
   15de0:	10ae4504 	addi	r2,r2,-18156
   15de4:	10c00c15 	stw	r3,48(r2)
   15de8:	008000b4 	movhi	r2,2
   15dec:	10ae4504 	addi	r2,r2,-18156
   15df0:	10800a17 	ldw	r2,40(r2)
   15df4:	10800204 	addi	r2,r2,8
   15df8:	10800017 	ldw	r2,0(r2)
   15dfc:	10ffffcc 	andi	r3,r2,65535
   15e00:	008000b4 	movhi	r2,2
   15e04:	10ae4504 	addi	r2,r2,-18156
   15e08:	10c00f15 	stw	r3,60(r2)
   15e0c:	008000b4 	movhi	r2,2
   15e10:	10ae4504 	addi	r2,r2,-18156
   15e14:	10800a17 	ldw	r2,40(r2)
   15e18:	10800204 	addi	r2,r2,8
   15e1c:	10800017 	ldw	r2,0(r2)
   15e20:	1006d43a 	srli	r3,r2,16
   15e24:	008000b4 	movhi	r2,2
   15e28:	10ae4504 	addi	r2,r2,-18156
   15e2c:	10c01015 	stw	r3,64(r2)
   15e30:	008000b4 	movhi	r2,2
   15e34:	10ae4504 	addi	r2,r2,-18156
   15e38:	10800a17 	ldw	r2,40(r2)
   15e3c:	10800304 	addi	r2,r2,12
   15e40:	10800017 	ldw	r2,0(r2)
   15e44:	1005d07a 	srai	r2,r2,1
   15e48:	10c0004c 	andi	r3,r2,1
   15e4c:	008000b4 	movhi	r2,2
   15e50:	10ae4504 	addi	r2,r2,-18156
   15e54:	10c00d15 	stw	r3,52(r2)
   15e58:	008000b4 	movhi	r2,2
   15e5c:	10ae4504 	addi	r2,r2,-18156
   15e60:	10800a17 	ldw	r2,40(r2)
   15e64:	10800304 	addi	r2,r2,12
   15e68:	10800017 	ldw	r2,0(r2)
   15e6c:	1005d13a 	srai	r2,r2,4
   15e70:	10c003cc 	andi	r3,r2,15
   15e74:	008000b4 	movhi	r2,2
   15e78:	10ae4504 	addi	r2,r2,-18156
   15e7c:	10c00e15 	stw	r3,56(r2)
   15e80:	008000b4 	movhi	r2,2
   15e84:	10ae4504 	addi	r2,r2,-18156
   15e88:	10800a17 	ldw	r2,40(r2)
   15e8c:	10800304 	addi	r2,r2,12
   15e90:	10800017 	ldw	r2,0(r2)
   15e94:	1005d43a 	srai	r2,r2,16
   15e98:	e0bfff05 	stb	r2,-4(fp)
   15e9c:	008000b4 	movhi	r2,2
   15ea0:	10ae4504 	addi	r2,r2,-18156
   15ea4:	10800a17 	ldw	r2,40(r2)
   15ea8:	10800304 	addi	r2,r2,12
   15eac:	10800017 	ldw	r2,0(r2)
   15eb0:	1004d63a 	srli	r2,r2,24
   15eb4:	e0bfff45 	stb	r2,-3(fp)
   15eb8:	008000b4 	movhi	r2,2
   15ebc:	10ae4504 	addi	r2,r2,-18156
   15ec0:	10800e17 	ldw	r2,56(r2)
   15ec4:	10800058 	cmpnei	r2,r2,1
   15ec8:	1000041e 	bne	r2,zero,15edc <alt_sys_init+0x25c>
   15ecc:	008000b4 	movhi	r2,2
   15ed0:	10ae4504 	addi	r2,r2,-18156
   15ed4:	10001115 	stw	zero,68(r2)
   15ed8:	00000e06 	br	15f14 <alt_sys_init+0x294>
   15edc:	008000b4 	movhi	r2,2
   15ee0:	10ae4504 	addi	r2,r2,-18156
   15ee4:	10800e17 	ldw	r2,56(r2)
   15ee8:	10800098 	cmpnei	r2,r2,2
   15eec:	1000051e 	bne	r2,zero,15f04 <alt_sys_init+0x284>
   15ef0:	008000b4 	movhi	r2,2
   15ef4:	10ae4504 	addi	r2,r2,-18156
   15ef8:	00c00044 	movi	r3,1
   15efc:	10c01115 	stw	r3,68(r2)
   15f00:	00000406 	br	15f14 <alt_sys_init+0x294>
   15f04:	008000b4 	movhi	r2,2
   15f08:	10ae4504 	addi	r2,r2,-18156
   15f0c:	00c00084 	movi	r3,2
   15f10:	10c01115 	stw	r3,68(r2)
   15f14:	e0bfff03 	ldbu	r2,-4(fp)
   15f18:	00c00804 	movi	r3,32
   15f1c:	1885c83a 	sub	r2,r3,r2
   15f20:	00ffffc4 	movi	r3,-1
   15f24:	1886d83a 	srl	r3,r3,r2
   15f28:	008000b4 	movhi	r2,2
   15f2c:	10ae4504 	addi	r2,r2,-18156
   15f30:	10c01215 	stw	r3,72(r2)
   15f34:	e0ffff03 	ldbu	r3,-4(fp)
   15f38:	008000b4 	movhi	r2,2
   15f3c:	10ae4504 	addi	r2,r2,-18156
   15f40:	10801117 	ldw	r2,68(r2)
   15f44:	1887883a 	add	r3,r3,r2
   15f48:	008000b4 	movhi	r2,2
   15f4c:	10ae4504 	addi	r2,r2,-18156
   15f50:	10c01315 	stw	r3,76(r2)
   15f54:	e0bfff43 	ldbu	r2,-3(fp)
   15f58:	00c00804 	movi	r3,32
   15f5c:	1885c83a 	sub	r2,r3,r2
   15f60:	00ffffc4 	movi	r3,-1
   15f64:	1886d83a 	srl	r3,r3,r2
   15f68:	008000b4 	movhi	r2,2
   15f6c:	10ae4504 	addi	r2,r2,-18156
   15f70:	10c01415 	stw	r3,80(r2)
   15f74:	010000b4 	movhi	r4,2
   15f78:	212e4504 	addi	r4,r4,-18156
   15f7c:	0015c100 	call	15c10 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   15f80:	010000b4 	movhi	r4,2
   15f84:	212e5a04 	addi	r4,r4,-18072
   15f88:	0015c100 	call	15c10 <alt_dev_reg>
}
   15f8c:	0001883a 	nop
   15f90:	e037883a 	mov	sp,fp
   15f94:	dfc00117 	ldw	ra,4(sp)
   15f98:	df000017 	ldw	fp,0(sp)
   15f9c:	dec00204 	addi	sp,sp,8
   15fa0:	f800283a 	ret

00015fa4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15fa4:	defffa04 	addi	sp,sp,-24
   15fa8:	dfc00515 	stw	ra,20(sp)
   15fac:	df000415 	stw	fp,16(sp)
   15fb0:	df000404 	addi	fp,sp,16
   15fb4:	e13ffd15 	stw	r4,-12(fp)
   15fb8:	e17ffe15 	stw	r5,-8(fp)
   15fbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15fc0:	e0bffd17 	ldw	r2,-12(fp)
   15fc4:	10800017 	ldw	r2,0(r2)
   15fc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   15fcc:	e0bffc17 	ldw	r2,-16(fp)
   15fd0:	10c00a04 	addi	r3,r2,40
   15fd4:	e0bffd17 	ldw	r2,-12(fp)
   15fd8:	10800217 	ldw	r2,8(r2)
   15fdc:	100f883a 	mov	r7,r2
   15fe0:	e1bfff17 	ldw	r6,-4(fp)
   15fe4:	e17ffe17 	ldw	r5,-8(fp)
   15fe8:	1809883a 	mov	r4,r3
   15fec:	00167700 	call	16770 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   15ff0:	e037883a 	mov	sp,fp
   15ff4:	dfc00117 	ldw	ra,4(sp)
   15ff8:	df000017 	ldw	fp,0(sp)
   15ffc:	dec00204 	addi	sp,sp,8
   16000:	f800283a 	ret

00016004 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   16004:	defffa04 	addi	sp,sp,-24
   16008:	dfc00515 	stw	ra,20(sp)
   1600c:	df000415 	stw	fp,16(sp)
   16010:	df000404 	addi	fp,sp,16
   16014:	e13ffd15 	stw	r4,-12(fp)
   16018:	e17ffe15 	stw	r5,-8(fp)
   1601c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16020:	e0bffd17 	ldw	r2,-12(fp)
   16024:	10800017 	ldw	r2,0(r2)
   16028:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1602c:	e0bffc17 	ldw	r2,-16(fp)
   16030:	10c00a04 	addi	r3,r2,40
   16034:	e0bffd17 	ldw	r2,-12(fp)
   16038:	10800217 	ldw	r2,8(r2)
   1603c:	100f883a 	mov	r7,r2
   16040:	e1bfff17 	ldw	r6,-4(fp)
   16044:	e17ffe17 	ldw	r5,-8(fp)
   16048:	1809883a 	mov	r4,r3
   1604c:	0016a3c0 	call	16a3c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   16050:	e037883a 	mov	sp,fp
   16054:	dfc00117 	ldw	ra,4(sp)
   16058:	df000017 	ldw	fp,0(sp)
   1605c:	dec00204 	addi	sp,sp,8
   16060:	f800283a 	ret

00016064 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   16064:	defffc04 	addi	sp,sp,-16
   16068:	dfc00315 	stw	ra,12(sp)
   1606c:	df000215 	stw	fp,8(sp)
   16070:	df000204 	addi	fp,sp,8
   16074:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16078:	e0bfff17 	ldw	r2,-4(fp)
   1607c:	10800017 	ldw	r2,0(r2)
   16080:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   16084:	e0bffe17 	ldw	r2,-8(fp)
   16088:	10c00a04 	addi	r3,r2,40
   1608c:	e0bfff17 	ldw	r2,-4(fp)
   16090:	10800217 	ldw	r2,8(r2)
   16094:	100b883a 	mov	r5,r2
   16098:	1809883a 	mov	r4,r3
   1609c:	00166180 	call	16618 <altera_avalon_jtag_uart_close>
}
   160a0:	e037883a 	mov	sp,fp
   160a4:	dfc00117 	ldw	ra,4(sp)
   160a8:	df000017 	ldw	fp,0(sp)
   160ac:	dec00204 	addi	sp,sp,8
   160b0:	f800283a 	ret

000160b4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   160b4:	defffa04 	addi	sp,sp,-24
   160b8:	dfc00515 	stw	ra,20(sp)
   160bc:	df000415 	stw	fp,16(sp)
   160c0:	df000404 	addi	fp,sp,16
   160c4:	e13ffd15 	stw	r4,-12(fp)
   160c8:	e17ffe15 	stw	r5,-8(fp)
   160cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   160d0:	e0bffd17 	ldw	r2,-12(fp)
   160d4:	10800017 	ldw	r2,0(r2)
   160d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   160dc:	e0bffc17 	ldw	r2,-16(fp)
   160e0:	10800a04 	addi	r2,r2,40
   160e4:	e1bfff17 	ldw	r6,-4(fp)
   160e8:	e17ffe17 	ldw	r5,-8(fp)
   160ec:	1009883a 	mov	r4,r2
   160f0:	00166800 	call	16680 <altera_avalon_jtag_uart_ioctl>
}
   160f4:	e037883a 	mov	sp,fp
   160f8:	dfc00117 	ldw	ra,4(sp)
   160fc:	df000017 	ldw	fp,0(sp)
   16100:	dec00204 	addi	sp,sp,8
   16104:	f800283a 	ret

00016108 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   16108:	defff204 	addi	sp,sp,-56
   1610c:	dfc00d15 	stw	ra,52(sp)
   16110:	df000c15 	stw	fp,48(sp)
   16114:	df000c04 	addi	fp,sp,48
   16118:	e13ff915 	stw	r4,-28(fp)
   1611c:	e17ffa15 	stw	r5,-24(fp)
   16120:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   16124:	e0bff917 	ldw	r2,-28(fp)
   16128:	10800c04 	addi	r2,r2,48
   1612c:	e0bff415 	stw	r2,-48(fp)
   16130:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   16134:	e0bff80b 	ldhu	r2,-32(fp)
   16138:	e0fff884 	addi	r3,fp,-30
   1613c:	180b883a 	mov	r5,r3
   16140:	1009883a 	mov	r4,r2
   16144:	001039c0 	call	1039c <OSFlagCreate>
   16148:	1007883a 	mov	r3,r2
   1614c:	e0bff417 	ldw	r2,-48(fp)
   16150:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   16154:	e0bff917 	ldw	r2,-28(fp)
   16158:	10800a04 	addi	r2,r2,40
   1615c:	e0bff515 	stw	r2,-44(fp)
   16160:	00800044 	movi	r2,1
   16164:	e0bff78d 	sth	r2,-34(fp)
   16168:	e0bff78b 	ldhu	r2,-34(fp)
   1616c:	1009883a 	mov	r4,r2
   16170:	001333c0 	call	1333c <OSSemCreate>
   16174:	1007883a 	mov	r3,r2
   16178:	e0bff517 	ldw	r2,-44(fp)
   1617c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   16180:	e0bff917 	ldw	r2,-28(fp)
   16184:	10800b04 	addi	r2,r2,44
   16188:	e0bff615 	stw	r2,-40(fp)
   1618c:	00800044 	movi	r2,1
   16190:	e0bff70d 	sth	r2,-36(fp)
   16194:	e0bff70b 	ldhu	r2,-36(fp)
   16198:	1009883a 	mov	r4,r2
   1619c:	001333c0 	call	1333c <OSSemCreate>
   161a0:	1007883a 	mov	r3,r2
   161a4:	e0bff617 	ldw	r2,-40(fp)
   161a8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   161ac:	e0bff917 	ldw	r2,-28(fp)
   161b0:	00c00044 	movi	r3,1
   161b4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   161b8:	e0bff917 	ldw	r2,-28(fp)
   161bc:	10800017 	ldw	r2,0(r2)
   161c0:	10800104 	addi	r2,r2,4
   161c4:	1007883a 	mov	r3,r2
   161c8:	e0bff917 	ldw	r2,-28(fp)
   161cc:	10800817 	ldw	r2,32(r2)
   161d0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   161d4:	e0bffb17 	ldw	r2,-20(fp)
   161d8:	01800074 	movhi	r6,1
   161dc:	31989304 	addi	r6,r6,25164
   161e0:	e17ff917 	ldw	r5,-28(fp)
   161e4:	1009883a 	mov	r4,r2
   161e8:	00185f80 	call	185f8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   161ec:	e0bff917 	ldw	r2,-28(fp)
   161f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   161f4:	e0bff917 	ldw	r2,-28(fp)
   161f8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   161fc:	008000b4 	movhi	r2,2
   16200:	10b66f04 	addi	r2,r2,-9796
   16204:	10800017 	ldw	r2,0(r2)
   16208:	e1fff917 	ldw	r7,-28(fp)
   1620c:	01800074 	movhi	r6,1
   16210:	31994104 	addi	r6,r6,25860
   16214:	100b883a 	mov	r5,r2
   16218:	1809883a 	mov	r4,r3
   1621c:	00180e00 	call	180e0 <alt_alarm_start>
   16220:	1000040e 	bge	r2,zero,16234 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   16224:	e0fff917 	ldw	r3,-28(fp)
   16228:	00a00034 	movhi	r2,32768
   1622c:	10bfffc4 	addi	r2,r2,-1
   16230:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   16234:	0001883a 	nop
   16238:	e037883a 	mov	sp,fp
   1623c:	dfc00117 	ldw	ra,4(sp)
   16240:	df000017 	ldw	fp,0(sp)
   16244:	dec00204 	addi	sp,sp,8
   16248:	f800283a 	ret

0001624c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1624c:	defff104 	addi	sp,sp,-60
   16250:	dfc00e15 	stw	ra,56(sp)
   16254:	df000d15 	stw	fp,52(sp)
   16258:	df000d04 	addi	fp,sp,52
   1625c:	e13ffe15 	stw	r4,-8(fp)
   16260:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   16264:	e0bffe17 	ldw	r2,-8(fp)
   16268:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1626c:	e0bff517 	ldw	r2,-44(fp)
   16270:	10800017 	ldw	r2,0(r2)
   16274:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16278:	e0bff617 	ldw	r2,-40(fp)
   1627c:	10800104 	addi	r2,r2,4
   16280:	10800037 	ldwio	r2,0(r2)
   16284:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   16288:	e0bff717 	ldw	r2,-36(fp)
   1628c:	1080c00c 	andi	r2,r2,768
   16290:	10009526 	beq	r2,zero,164e8 <altera_avalon_jtag_uart_irq+0x29c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   16294:	e0bff717 	ldw	r2,-36(fp)
   16298:	1080400c 	andi	r2,r2,256
   1629c:	10004926 	beq	r2,zero,163c4 <altera_avalon_jtag_uart_irq+0x178>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   162a0:	00800074 	movhi	r2,1
   162a4:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   162a8:	e0bff517 	ldw	r2,-44(fp)
   162ac:	10800d17 	ldw	r2,52(r2)
   162b0:	10800044 	addi	r2,r2,1
   162b4:	1081ffcc 	andi	r2,r2,2047
   162b8:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   162bc:	e0bff517 	ldw	r2,-44(fp)
   162c0:	10c00e17 	ldw	r3,56(r2)
   162c4:	e0bff817 	ldw	r2,-32(fp)
   162c8:	18802926 	beq	r3,r2,16370 <altera_avalon_jtag_uart_irq+0x124>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   162cc:	e0bff617 	ldw	r2,-40(fp)
   162d0:	10800037 	ldwio	r2,0(r2)
   162d4:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   162d8:	e0bff317 	ldw	r2,-52(fp)
   162dc:	10a0000c 	andi	r2,r2,32768
   162e0:	10002526 	beq	r2,zero,16378 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   162e4:	e0bff517 	ldw	r2,-44(fp)
   162e8:	10800d17 	ldw	r2,52(r2)
   162ec:	e0fff317 	ldw	r3,-52(fp)
   162f0:	1809883a 	mov	r4,r3
   162f4:	e0fff517 	ldw	r3,-44(fp)
   162f8:	1885883a 	add	r2,r3,r2
   162fc:	10801104 	addi	r2,r2,68
   16300:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16304:	e0bff517 	ldw	r2,-44(fp)
   16308:	10800d17 	ldw	r2,52(r2)
   1630c:	10800044 	addi	r2,r2,1
   16310:	10c1ffcc 	andi	r3,r2,2047
   16314:	e0bff517 	ldw	r2,-44(fp)
   16318:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1631c:	e0bff517 	ldw	r2,-44(fp)
   16320:	10800c17 	ldw	r2,48(r2)
   16324:	e0bffa15 	stw	r2,-24(fp)
   16328:	00800044 	movi	r2,1
   1632c:	e0bffb0d 	sth	r2,-20(fp)
   16330:	00800044 	movi	r2,1
   16334:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16338:	008000b4 	movhi	r2,2
   1633c:	10b65a44 	addi	r2,r2,-9879
   16340:	10800003 	ldbu	r2,0(r2)
   16344:	10803fcc 	andi	r2,r2,255
   16348:	103fd726 	beq	r2,zero,162a8 <altera_avalon_jtag_uart_irq+0x5c>
  {
    OSFlagPost (group, flags, opt, &err);
   1634c:	e0bffb0b 	ldhu	r2,-20(fp)
   16350:	e0fffb83 	ldbu	r3,-18(fp)
   16354:	e13ffcc4 	addi	r4,fp,-13
   16358:	200f883a 	mov	r7,r4
   1635c:	180d883a 	mov	r6,r3
   16360:	100b883a 	mov	r5,r2
   16364:	e13ffa17 	ldw	r4,-24(fp)
   16368:	00110300 	call	11030 <OSFlagPost>
      }
   1636c:	003fce06 	br	162a8 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   16370:	0001883a 	nop
   16374:	00000106 	br	1637c <altera_avalon_jtag_uart_irq+0x130>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   16378:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1637c:	e0bff317 	ldw	r2,-52(fp)
   16380:	10bfffec 	andhi	r2,r2,65535
   16384:	10000f26 	beq	r2,zero,163c4 <altera_avalon_jtag_uart_irq+0x178>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16388:	e0bff517 	ldw	r2,-44(fp)
   1638c:	10c00817 	ldw	r3,32(r2)
   16390:	00bfff84 	movi	r2,-2
   16394:	1886703a 	and	r3,r3,r2
   16398:	e0bff517 	ldw	r2,-44(fp)
   1639c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   163a0:	e0bff617 	ldw	r2,-40(fp)
   163a4:	10800104 	addi	r2,r2,4
   163a8:	1007883a 	mov	r3,r2
   163ac:	e0bff517 	ldw	r2,-44(fp)
   163b0:	10800817 	ldw	r2,32(r2)
   163b4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   163b8:	e0bff617 	ldw	r2,-40(fp)
   163bc:	10800104 	addi	r2,r2,4
   163c0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   163c4:	e0bff717 	ldw	r2,-36(fp)
   163c8:	1080800c 	andi	r2,r2,512
   163cc:	103faa26 	beq	r2,zero,16278 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   163d0:	e0bff717 	ldw	r2,-36(fp)
   163d4:	1004d43a 	srli	r2,r2,16
   163d8:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   163dc:	00002806 	br	16480 <altera_avalon_jtag_uart_irq+0x234>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   163e0:	e0bff617 	ldw	r2,-40(fp)
   163e4:	e0fff517 	ldw	r3,-44(fp)
   163e8:	18c01017 	ldw	r3,64(r3)
   163ec:	e13ff517 	ldw	r4,-44(fp)
   163f0:	20c7883a 	add	r3,r4,r3
   163f4:	18c21104 	addi	r3,r3,2116
   163f8:	18c00003 	ldbu	r3,0(r3)
   163fc:	18c03fcc 	andi	r3,r3,255
   16400:	18c0201c 	xori	r3,r3,128
   16404:	18ffe004 	addi	r3,r3,-128
   16408:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1640c:	e0bff517 	ldw	r2,-44(fp)
   16410:	10801017 	ldw	r2,64(r2)
   16414:	10800044 	addi	r2,r2,1
   16418:	10c1ffcc 	andi	r3,r2,2047
   1641c:	e0bff517 	ldw	r2,-44(fp)
   16420:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   16424:	e0bff517 	ldw	r2,-44(fp)
   16428:	10800c17 	ldw	r2,48(r2)
   1642c:	e0bff915 	stw	r2,-28(fp)
   16430:	00800084 	movi	r2,2
   16434:	e0bffc0d 	sth	r2,-16(fp)
   16438:	00800044 	movi	r2,1
   1643c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16440:	008000b4 	movhi	r2,2
   16444:	10b65a44 	addi	r2,r2,-9879
   16448:	10800003 	ldbu	r2,0(r2)
   1644c:	10803fcc 	andi	r2,r2,255
   16450:	10000826 	beq	r2,zero,16474 <altera_avalon_jtag_uart_irq+0x228>
  {
    OSFlagPost (group, flags, opt, &err);
   16454:	e0bffc0b 	ldhu	r2,-16(fp)
   16458:	e0fffc83 	ldbu	r3,-14(fp)
   1645c:	e13ffd04 	addi	r4,fp,-12
   16460:	200f883a 	mov	r7,r4
   16464:	180d883a 	mov	r6,r3
   16468:	100b883a 	mov	r5,r2
   1646c:	e13ff917 	ldw	r4,-28(fp)
   16470:	00110300 	call	11030 <OSFlagPost>

        space--;
   16474:	e0bff417 	ldw	r2,-48(fp)
   16478:	10bfffc4 	addi	r2,r2,-1
   1647c:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   16480:	e0bff417 	ldw	r2,-48(fp)
   16484:	10000526 	beq	r2,zero,1649c <altera_avalon_jtag_uart_irq+0x250>
   16488:	e0bff517 	ldw	r2,-44(fp)
   1648c:	10c01017 	ldw	r3,64(r2)
   16490:	e0bff517 	ldw	r2,-44(fp)
   16494:	10800f17 	ldw	r2,60(r2)
   16498:	18bfd11e 	bne	r3,r2,163e0 <altera_avalon_jtag_uart_irq+0x194>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1649c:	e0bff417 	ldw	r2,-48(fp)
   164a0:	103f7526 	beq	r2,zero,16278 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   164a4:	e0bff517 	ldw	r2,-44(fp)
   164a8:	10c00817 	ldw	r3,32(r2)
   164ac:	00bfff44 	movi	r2,-3
   164b0:	1886703a 	and	r3,r3,r2
   164b4:	e0bff517 	ldw	r2,-44(fp)
   164b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   164bc:	e0bff517 	ldw	r2,-44(fp)
   164c0:	10800017 	ldw	r2,0(r2)
   164c4:	10800104 	addi	r2,r2,4
   164c8:	1007883a 	mov	r3,r2
   164cc:	e0bff517 	ldw	r2,-44(fp)
   164d0:	10800817 	ldw	r2,32(r2)
   164d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   164d8:	e0bff617 	ldw	r2,-40(fp)
   164dc:	10800104 	addi	r2,r2,4
   164e0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   164e4:	003f6406 	br	16278 <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   164e8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   164ec:	0001883a 	nop
   164f0:	e037883a 	mov	sp,fp
   164f4:	dfc00117 	ldw	ra,4(sp)
   164f8:	df000017 	ldw	fp,0(sp)
   164fc:	dec00204 	addi	sp,sp,8
   16500:	f800283a 	ret

00016504 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   16504:	defff904 	addi	sp,sp,-28
   16508:	dfc00615 	stw	ra,24(sp)
   1650c:	df000515 	stw	fp,20(sp)
   16510:	df000504 	addi	fp,sp,20
   16514:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   16518:	e0bfff17 	ldw	r2,-4(fp)
   1651c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   16520:	e0bffb17 	ldw	r2,-20(fp)
   16524:	10800017 	ldw	r2,0(r2)
   16528:	10800104 	addi	r2,r2,4
   1652c:	10800037 	ldwio	r2,0(r2)
   16530:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   16534:	e0bffc17 	ldw	r2,-16(fp)
   16538:	1081000c 	andi	r2,r2,1024
   1653c:	10000b26 	beq	r2,zero,1656c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   16540:	e0bffb17 	ldw	r2,-20(fp)
   16544:	10800017 	ldw	r2,0(r2)
   16548:	10800104 	addi	r2,r2,4
   1654c:	1007883a 	mov	r3,r2
   16550:	e0bffb17 	ldw	r2,-20(fp)
   16554:	10800817 	ldw	r2,32(r2)
   16558:	10810014 	ori	r2,r2,1024
   1655c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   16560:	e0bffb17 	ldw	r2,-20(fp)
   16564:	10000915 	stw	zero,36(r2)
   16568:	00002306 	br	165f8 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1656c:	e0bffb17 	ldw	r2,-20(fp)
   16570:	10c00917 	ldw	r3,36(r2)
   16574:	00a00034 	movhi	r2,32768
   16578:	10bfff04 	addi	r2,r2,-4
   1657c:	10c01e36 	bltu	r2,r3,165f8 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
   16580:	e0bffb17 	ldw	r2,-20(fp)
   16584:	10800917 	ldw	r2,36(r2)
   16588:	10c00044 	addi	r3,r2,1
   1658c:	e0bffb17 	ldw	r2,-20(fp)
   16590:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   16594:	e0bffb17 	ldw	r2,-20(fp)
   16598:	10c00917 	ldw	r3,36(r2)
   1659c:	e0bffb17 	ldw	r2,-20(fp)
   165a0:	10800117 	ldw	r2,4(r2)
   165a4:	18801436 	bltu	r3,r2,165f8 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   165a8:	e0bffb17 	ldw	r2,-20(fp)
   165ac:	10800c17 	ldw	r2,48(r2)
   165b0:	e0bffd15 	stw	r2,-12(fp)
   165b4:	00800104 	movi	r2,4
   165b8:	e0bffe0d 	sth	r2,-8(fp)
   165bc:	00800044 	movi	r2,1
   165c0:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   165c4:	008000b4 	movhi	r2,2
   165c8:	10b65a44 	addi	r2,r2,-9879
   165cc:	10800003 	ldbu	r2,0(r2)
   165d0:	10803fcc 	andi	r2,r2,255
   165d4:	10000826 	beq	r2,zero,165f8 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
   165d8:	e0bffe0b 	ldhu	r2,-8(fp)
   165dc:	e0fffe83 	ldbu	r3,-6(fp)
   165e0:	e13ffec4 	addi	r4,fp,-5
   165e4:	200f883a 	mov	r7,r4
   165e8:	180d883a 	mov	r6,r3
   165ec:	100b883a 	mov	r5,r2
   165f0:	e13ffd17 	ldw	r4,-12(fp)
   165f4:	00110300 	call	11030 <OSFlagPost>
   165f8:	008000b4 	movhi	r2,2
   165fc:	10b66f04 	addi	r2,r2,-9796
   16600:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   16604:	e037883a 	mov	sp,fp
   16608:	dfc00117 	ldw	ra,4(sp)
   1660c:	df000017 	ldw	fp,0(sp)
   16610:	dec00204 	addi	sp,sp,8
   16614:	f800283a 	ret

00016618 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   16618:	defffd04 	addi	sp,sp,-12
   1661c:	df000215 	stw	fp,8(sp)
   16620:	df000204 	addi	fp,sp,8
   16624:	e13ffe15 	stw	r4,-8(fp)
   16628:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1662c:	00000506 	br	16644 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   16630:	e0bfff17 	ldw	r2,-4(fp)
   16634:	1090000c 	andi	r2,r2,16384
   16638:	10000226 	beq	r2,zero,16644 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1663c:	00bffd44 	movi	r2,-11
   16640:	00000b06 	br	16670 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   16644:	e0bffe17 	ldw	r2,-8(fp)
   16648:	10c01017 	ldw	r3,64(r2)
   1664c:	e0bffe17 	ldw	r2,-8(fp)
   16650:	10800f17 	ldw	r2,60(r2)
   16654:	18800526 	beq	r3,r2,1666c <altera_avalon_jtag_uart_close+0x54>
   16658:	e0bffe17 	ldw	r2,-8(fp)
   1665c:	10c00917 	ldw	r3,36(r2)
   16660:	e0bffe17 	ldw	r2,-8(fp)
   16664:	10800117 	ldw	r2,4(r2)
   16668:	18bff136 	bltu	r3,r2,16630 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1666c:	0005883a 	mov	r2,zero
}
   16670:	e037883a 	mov	sp,fp
   16674:	df000017 	ldw	fp,0(sp)
   16678:	dec00104 	addi	sp,sp,4
   1667c:	f800283a 	ret

00016680 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   16680:	defffa04 	addi	sp,sp,-24
   16684:	df000515 	stw	fp,20(sp)
   16688:	df000504 	addi	fp,sp,20
   1668c:	e13ffd15 	stw	r4,-12(fp)
   16690:	e17ffe15 	stw	r5,-8(fp)
   16694:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   16698:	00bff9c4 	movi	r2,-25
   1669c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   166a0:	e0bffe17 	ldw	r2,-8(fp)
   166a4:	10da8060 	cmpeqi	r3,r2,27137
   166a8:	1800031e 	bne	r3,zero,166b8 <altera_avalon_jtag_uart_ioctl+0x38>
   166ac:	109a80a0 	cmpeqi	r2,r2,27138
   166b0:	1000181e 	bne	r2,zero,16714 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   166b4:	00002906 	br	1675c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   166b8:	e0bffd17 	ldw	r2,-12(fp)
   166bc:	10c00117 	ldw	r3,4(r2)
   166c0:	00a00034 	movhi	r2,32768
   166c4:	10bfffc4 	addi	r2,r2,-1
   166c8:	18802126 	beq	r3,r2,16750 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   166cc:	e0bfff17 	ldw	r2,-4(fp)
   166d0:	10800017 	ldw	r2,0(r2)
   166d4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   166d8:	e0bffc17 	ldw	r2,-16(fp)
   166dc:	10800090 	cmplti	r2,r2,2
   166e0:	1000061e 	bne	r2,zero,166fc <altera_avalon_jtag_uart_ioctl+0x7c>
   166e4:	e0fffc17 	ldw	r3,-16(fp)
   166e8:	00a00034 	movhi	r2,32768
   166ec:	10bfffc4 	addi	r2,r2,-1
   166f0:	18800226 	beq	r3,r2,166fc <altera_avalon_jtag_uart_ioctl+0x7c>
   166f4:	e0bffc17 	ldw	r2,-16(fp)
   166f8:	00000206 	br	16704 <altera_avalon_jtag_uart_ioctl+0x84>
   166fc:	00a00034 	movhi	r2,32768
   16700:	10bfff84 	addi	r2,r2,-2
   16704:	e0fffd17 	ldw	r3,-12(fp)
   16708:	18800115 	stw	r2,4(r3)
      rc = 0;
   1670c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16710:	00000f06 	br	16750 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   16714:	e0bffd17 	ldw	r2,-12(fp)
   16718:	10c00117 	ldw	r3,4(r2)
   1671c:	00a00034 	movhi	r2,32768
   16720:	10bfffc4 	addi	r2,r2,-1
   16724:	18800c26 	beq	r3,r2,16758 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   16728:	e0bffd17 	ldw	r2,-12(fp)
   1672c:	10c00917 	ldw	r3,36(r2)
   16730:	e0bffd17 	ldw	r2,-12(fp)
   16734:	10800117 	ldw	r2,4(r2)
   16738:	1885803a 	cmpltu	r2,r3,r2
   1673c:	10c03fcc 	andi	r3,r2,255
   16740:	e0bfff17 	ldw	r2,-4(fp)
   16744:	10c00015 	stw	r3,0(r2)
      rc = 0;
   16748:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1674c:	00000206 	br	16758 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   16750:	0001883a 	nop
   16754:	00000106 	br	1675c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   16758:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1675c:	e0bffb17 	ldw	r2,-20(fp)
}
   16760:	e037883a 	mov	sp,fp
   16764:	df000017 	ldw	fp,0(sp)
   16768:	dec00104 	addi	sp,sp,4
   1676c:	f800283a 	ret

00016770 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   16770:	deffed04 	addi	sp,sp,-76
   16774:	dfc01215 	stw	ra,72(sp)
   16778:	df001115 	stw	fp,68(sp)
   1677c:	df001104 	addi	fp,sp,68
   16780:	e13ffc15 	stw	r4,-16(fp)
   16784:	e17ffd15 	stw	r5,-12(fp)
   16788:	e1bffe15 	stw	r6,-8(fp)
   1678c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   16790:	e0bffd17 	ldw	r2,-12(fp)
   16794:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   16798:	e0bffc17 	ldw	r2,-16(fp)
   1679c:	10800a17 	ldw	r2,40(r2)
   167a0:	e0bff815 	stw	r2,-32(fp)
   167a4:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   167a8:	e0bff90b 	ldhu	r2,-28(fp)
   167ac:	e0fffb04 	addi	r3,fp,-20
   167b0:	180d883a 	mov	r6,r3
   167b4:	100b883a 	mov	r5,r2
   167b8:	e13ff817 	ldw	r4,-32(fp)
   167bc:	00136a40 	call	136a4 <OSSemPend>

  while (space > 0)
   167c0:	00006506 	br	16958 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   167c4:	e0bffc17 	ldw	r2,-16(fp)
   167c8:	10800d17 	ldw	r2,52(r2)
   167cc:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   167d0:	e0bffc17 	ldw	r2,-16(fp)
   167d4:	10800e17 	ldw	r2,56(r2)
   167d8:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   167dc:	e0fff317 	ldw	r3,-52(fp)
   167e0:	e0bff417 	ldw	r2,-48(fp)
   167e4:	18800536 	bltu	r3,r2,167fc <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   167e8:	e0fff317 	ldw	r3,-52(fp)
   167ec:	e0bff417 	ldw	r2,-48(fp)
   167f0:	1885c83a 	sub	r2,r3,r2
   167f4:	e0bff115 	stw	r2,-60(fp)
   167f8:	00000406 	br	1680c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   167fc:	00c20004 	movi	r3,2048
   16800:	e0bff417 	ldw	r2,-48(fp)
   16804:	1885c83a 	sub	r2,r3,r2
   16808:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1680c:	e0bff117 	ldw	r2,-60(fp)
   16810:	10001e26 	beq	r2,zero,1688c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   16814:	e0fffe17 	ldw	r3,-8(fp)
   16818:	e0bff117 	ldw	r2,-60(fp)
   1681c:	1880022e 	bgeu	r3,r2,16828 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   16820:	e0bffe17 	ldw	r2,-8(fp)
   16824:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   16828:	e0bffc17 	ldw	r2,-16(fp)
   1682c:	10c01104 	addi	r3,r2,68
   16830:	e0bff417 	ldw	r2,-48(fp)
   16834:	1885883a 	add	r2,r3,r2
   16838:	e1bff117 	ldw	r6,-60(fp)
   1683c:	100b883a 	mov	r5,r2
   16840:	e13ff017 	ldw	r4,-64(fp)
   16844:	00059040 	call	5904 <memcpy>
      ptr   += n;
   16848:	e0fff017 	ldw	r3,-64(fp)
   1684c:	e0bff117 	ldw	r2,-60(fp)
   16850:	1885883a 	add	r2,r3,r2
   16854:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   16858:	e0fffe17 	ldw	r3,-8(fp)
   1685c:	e0bff117 	ldw	r2,-60(fp)
   16860:	1885c83a 	sub	r2,r3,r2
   16864:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16868:	e0fff417 	ldw	r3,-48(fp)
   1686c:	e0bff117 	ldw	r2,-60(fp)
   16870:	1885883a 	add	r2,r3,r2
   16874:	10c1ffcc 	andi	r3,r2,2047
   16878:	e0bffc17 	ldw	r2,-16(fp)
   1687c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   16880:	e0bffe17 	ldw	r2,-8(fp)
   16884:	00bfcf16 	blt	zero,r2,167c4 <altera_avalon_jtag_uart_read+0x54>
   16888:	00000106 	br	16890 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1688c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   16890:	e0fff017 	ldw	r3,-64(fp)
   16894:	e0bffd17 	ldw	r2,-12(fp)
   16898:	1880321e 	bne	r3,r2,16964 <altera_avalon_jtag_uart_read+0x1f4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1689c:	e0bfff17 	ldw	r2,-4(fp)
   168a0:	1090000c 	andi	r2,r2,16384
   168a4:	1000311e 	bne	r2,zero,1696c <altera_avalon_jtag_uart_read+0x1fc>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   168a8:	008000b4 	movhi	r2,2
   168ac:	10b65a44 	addi	r2,r2,-9879
   168b0:	10800003 	ldbu	r2,0(r2)
   168b4:	10803fcc 	andi	r2,r2,255
   168b8:	10800058 	cmpnei	r2,r2,1
   168bc:	1000181e 	bne	r2,zero,16920 <altera_avalon_jtag_uart_read+0x1b0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   168c0:	e0bffc17 	ldw	r2,-16(fp)
   168c4:	10800c17 	ldw	r2,48(r2)
   168c8:	e0bff215 	stw	r2,-56(fp)
   168cc:	00800144 	movi	r2,5
   168d0:	e0bff98d 	sth	r2,-26(fp)
   168d4:	00bfe0c4 	movi	r2,-125
   168d8:	e0bffa05 	stb	r2,-24(fp)
   168dc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   168e0:	008000b4 	movhi	r2,2
   168e4:	10b65a44 	addi	r2,r2,-9879
   168e8:	10800003 	ldbu	r2,0(r2)
   168ec:	10803fcc 	andi	r2,r2,255
   168f0:	10001526 	beq	r2,zero,16948 <altera_avalon_jtag_uart_read+0x1d8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   168f4:	e0fff98b 	ldhu	r3,-26(fp)
   168f8:	e13ffa03 	ldbu	r4,-24(fp)
   168fc:	e17ffa8b 	ldhu	r5,-22(fp)
   16900:	e0bffb44 	addi	r2,fp,-19
   16904:	d8800015 	stw	r2,0(sp)
   16908:	280f883a 	mov	r7,r5
   1690c:	200d883a 	mov	r6,r4
   16910:	180b883a 	mov	r5,r3
   16914:	e13ff217 	ldw	r4,-56(fp)
   16918:	00109b80 	call	109b8 <OSFlagPend>
   1691c:	00000a06 	br	16948 <altera_avalon_jtag_uart_read+0x1d8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   16920:	0001883a 	nop
   16924:	e0bffc17 	ldw	r2,-16(fp)
   16928:	10c00d17 	ldw	r3,52(r2)
   1692c:	e0bff317 	ldw	r2,-52(fp)
   16930:	1880051e 	bne	r3,r2,16948 <altera_avalon_jtag_uart_read+0x1d8>
   16934:	e0bffc17 	ldw	r2,-16(fp)
   16938:	10c00917 	ldw	r3,36(r2)
   1693c:	e0bffc17 	ldw	r2,-16(fp)
   16940:	10800117 	ldw	r2,4(r2)
   16944:	18bff736 	bltu	r3,r2,16924 <altera_avalon_jtag_uart_read+0x1b4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   16948:	e0bffc17 	ldw	r2,-16(fp)
   1694c:	10c00d17 	ldw	r3,52(r2)
   16950:	e0bff317 	ldw	r2,-52(fp)
   16954:	18800726 	beq	r3,r2,16974 <altera_avalon_jtag_uart_read+0x204>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   16958:	e0bffe17 	ldw	r2,-8(fp)
   1695c:	00bf9916 	blt	zero,r2,167c4 <altera_avalon_jtag_uart_read+0x54>
   16960:	00000506 	br	16978 <altera_avalon_jtag_uart_read+0x208>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   16964:	0001883a 	nop
   16968:	00000306 	br	16978 <altera_avalon_jtag_uart_read+0x208>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1696c:	0001883a 	nop
   16970:	00000106 	br	16978 <altera_avalon_jtag_uart_read+0x208>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   16974:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   16978:	e0bffc17 	ldw	r2,-16(fp)
   1697c:	10800a17 	ldw	r2,40(r2)
   16980:	1009883a 	mov	r4,r2
   16984:	0013a7c0 	call	13a7c <OSSemPost>

  if (ptr != buffer)
   16988:	e0fff017 	ldw	r3,-64(fp)
   1698c:	e0bffd17 	ldw	r2,-12(fp)
   16990:	18801826 	beq	r3,r2,169f4 <altera_avalon_jtag_uart_read+0x284>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16994:	0005303a 	rdctl	r2,status
   16998:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1699c:	e0fff717 	ldw	r3,-36(fp)
   169a0:	00bfff84 	movi	r2,-2
   169a4:	1884703a 	and	r2,r3,r2
   169a8:	1001703a 	wrctl	status,r2
  
  return context;
   169ac:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   169b0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   169b4:	e0bffc17 	ldw	r2,-16(fp)
   169b8:	10800817 	ldw	r2,32(r2)
   169bc:	10c00054 	ori	r3,r2,1
   169c0:	e0bffc17 	ldw	r2,-16(fp)
   169c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   169c8:	e0bffc17 	ldw	r2,-16(fp)
   169cc:	10800017 	ldw	r2,0(r2)
   169d0:	10800104 	addi	r2,r2,4
   169d4:	1007883a 	mov	r3,r2
   169d8:	e0bffc17 	ldw	r2,-16(fp)
   169dc:	10800817 	ldw	r2,32(r2)
   169e0:	18800035 	stwio	r2,0(r3)
   169e4:	e0bff617 	ldw	r2,-40(fp)
   169e8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   169ec:	e0bff517 	ldw	r2,-44(fp)
   169f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   169f4:	e0fff017 	ldw	r3,-64(fp)
   169f8:	e0bffd17 	ldw	r2,-12(fp)
   169fc:	18800426 	beq	r3,r2,16a10 <altera_avalon_jtag_uart_read+0x2a0>
    return ptr - buffer;
   16a00:	e0fff017 	ldw	r3,-64(fp)
   16a04:	e0bffd17 	ldw	r2,-12(fp)
   16a08:	1885c83a 	sub	r2,r3,r2
   16a0c:	00000606 	br	16a28 <altera_avalon_jtag_uart_read+0x2b8>
  else if (flags & O_NONBLOCK)
   16a10:	e0bfff17 	ldw	r2,-4(fp)
   16a14:	1090000c 	andi	r2,r2,16384
   16a18:	10000226 	beq	r2,zero,16a24 <altera_avalon_jtag_uart_read+0x2b4>
    return -EWOULDBLOCK;
   16a1c:	00bffd44 	movi	r2,-11
   16a20:	00000106 	br	16a28 <altera_avalon_jtag_uart_read+0x2b8>
  else
    return -EIO;
   16a24:	00bffec4 	movi	r2,-5
}
   16a28:	e037883a 	mov	sp,fp
   16a2c:	dfc00117 	ldw	ra,4(sp)
   16a30:	df000017 	ldw	fp,0(sp)
   16a34:	dec00204 	addi	sp,sp,8
   16a38:	f800283a 	ret

00016a3c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   16a3c:	deffed04 	addi	sp,sp,-76
   16a40:	dfc01215 	stw	ra,72(sp)
   16a44:	df001115 	stw	fp,68(sp)
   16a48:	df001104 	addi	fp,sp,68
   16a4c:	e13ffc15 	stw	r4,-16(fp)
   16a50:	e17ffd15 	stw	r5,-12(fp)
   16a54:	e1bffe15 	stw	r6,-8(fp)
   16a58:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   16a5c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   16a60:	e0bffd17 	ldw	r2,-12(fp)
   16a64:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   16a68:	e0bffc17 	ldw	r2,-16(fp)
   16a6c:	10800b17 	ldw	r2,44(r2)
   16a70:	e0bff815 	stw	r2,-32(fp)
   16a74:	e03ff90d 	sth	zero,-28(fp)
   16a78:	e0bff90b 	ldhu	r2,-28(fp)
   16a7c:	e0fffb44 	addi	r3,fp,-19
   16a80:	180d883a 	mov	r6,r3
   16a84:	100b883a 	mov	r5,r2
   16a88:	e13ff817 	ldw	r4,-32(fp)
   16a8c:	00136a40 	call	136a4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16a90:	00003706 	br	16b70 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   16a94:	e0bffc17 	ldw	r2,-16(fp)
   16a98:	10800f17 	ldw	r2,60(r2)
   16a9c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   16aa0:	e0bffc17 	ldw	r2,-16(fp)
   16aa4:	10801017 	ldw	r2,64(r2)
   16aa8:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   16aac:	e0fff417 	ldw	r3,-48(fp)
   16ab0:	e0bff017 	ldw	r2,-64(fp)
   16ab4:	1880062e 	bgeu	r3,r2,16ad0 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   16ab8:	e0fff017 	ldw	r3,-64(fp)
   16abc:	e0bff417 	ldw	r2,-48(fp)
   16ac0:	1885c83a 	sub	r2,r3,r2
   16ac4:	10bfffc4 	addi	r2,r2,-1
   16ac8:	e0bff115 	stw	r2,-60(fp)
   16acc:	00000b06 	br	16afc <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   16ad0:	e0bff017 	ldw	r2,-64(fp)
   16ad4:	10000526 	beq	r2,zero,16aec <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   16ad8:	00c20004 	movi	r3,2048
   16adc:	e0bff417 	ldw	r2,-48(fp)
   16ae0:	1885c83a 	sub	r2,r3,r2
   16ae4:	e0bff115 	stw	r2,-60(fp)
   16ae8:	00000406 	br	16afc <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   16aec:	00c1ffc4 	movi	r3,2047
   16af0:	e0bff417 	ldw	r2,-48(fp)
   16af4:	1885c83a 	sub	r2,r3,r2
   16af8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   16afc:	e0bff117 	ldw	r2,-60(fp)
   16b00:	10001e26 	beq	r2,zero,16b7c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   16b04:	e0fffe17 	ldw	r3,-8(fp)
   16b08:	e0bff117 	ldw	r2,-60(fp)
   16b0c:	1880022e 	bgeu	r3,r2,16b18 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   16b10:	e0bffe17 	ldw	r2,-8(fp)
   16b14:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   16b18:	e0bffc17 	ldw	r2,-16(fp)
   16b1c:	10c21104 	addi	r3,r2,2116
   16b20:	e0bff417 	ldw	r2,-48(fp)
   16b24:	1885883a 	add	r2,r3,r2
   16b28:	e1bff117 	ldw	r6,-60(fp)
   16b2c:	e17ffd17 	ldw	r5,-12(fp)
   16b30:	1009883a 	mov	r4,r2
   16b34:	00059040 	call	5904 <memcpy>
      ptr   += n;
   16b38:	e0fffd17 	ldw	r3,-12(fp)
   16b3c:	e0bff117 	ldw	r2,-60(fp)
   16b40:	1885883a 	add	r2,r3,r2
   16b44:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   16b48:	e0fffe17 	ldw	r3,-8(fp)
   16b4c:	e0bff117 	ldw	r2,-60(fp)
   16b50:	1885c83a 	sub	r2,r3,r2
   16b54:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16b58:	e0fff417 	ldw	r3,-48(fp)
   16b5c:	e0bff117 	ldw	r2,-60(fp)
   16b60:	1885883a 	add	r2,r3,r2
   16b64:	10c1ffcc 	andi	r3,r2,2047
   16b68:	e0bffc17 	ldw	r2,-16(fp)
   16b6c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16b70:	e0bffe17 	ldw	r2,-8(fp)
   16b74:	00bfc716 	blt	zero,r2,16a94 <altera_avalon_jtag_uart_write+0x58>
   16b78:	00000106 	br	16b80 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   16b7c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16b80:	0005303a 	rdctl	r2,status
   16b84:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b88:	e0fff717 	ldw	r3,-36(fp)
   16b8c:	00bfff84 	movi	r2,-2
   16b90:	1884703a 	and	r2,r3,r2
   16b94:	1001703a 	wrctl	status,r2
  
  return context;
   16b98:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   16b9c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16ba0:	e0bffc17 	ldw	r2,-16(fp)
   16ba4:	10800817 	ldw	r2,32(r2)
   16ba8:	10c00094 	ori	r3,r2,2
   16bac:	e0bffc17 	ldw	r2,-16(fp)
   16bb0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16bb4:	e0bffc17 	ldw	r2,-16(fp)
   16bb8:	10800017 	ldw	r2,0(r2)
   16bbc:	10800104 	addi	r2,r2,4
   16bc0:	1007883a 	mov	r3,r2
   16bc4:	e0bffc17 	ldw	r2,-16(fp)
   16bc8:	10800817 	ldw	r2,32(r2)
   16bcc:	18800035 	stwio	r2,0(r3)
   16bd0:	e0bff617 	ldw	r2,-40(fp)
   16bd4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16bd8:	e0bff317 	ldw	r2,-52(fp)
   16bdc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   16be0:	e0bffe17 	ldw	r2,-8(fp)
   16be4:	00802e0e 	bge	zero,r2,16ca0 <altera_avalon_jtag_uart_write+0x264>
    {
      if (flags & O_NONBLOCK)
   16be8:	e0bfff17 	ldw	r2,-4(fp)
   16bec:	1090000c 	andi	r2,r2,16384
   16bf0:	10002e1e 	bne	r2,zero,16cac <altera_avalon_jtag_uart_write+0x270>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   16bf4:	008000b4 	movhi	r2,2
   16bf8:	10b65a44 	addi	r2,r2,-9879
   16bfc:	10800003 	ldbu	r2,0(r2)
   16c00:	10803fcc 	andi	r2,r2,255
   16c04:	10800058 	cmpnei	r2,r2,1
   16c08:	1000181e 	bne	r2,zero,16c6c <altera_avalon_jtag_uart_write+0x230>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   16c0c:	e0bffc17 	ldw	r2,-16(fp)
   16c10:	10800c17 	ldw	r2,48(r2)
   16c14:	e0bff515 	stw	r2,-44(fp)
   16c18:	00800184 	movi	r2,6
   16c1c:	e0bff98d 	sth	r2,-26(fp)
   16c20:	00bfe0c4 	movi	r2,-125
   16c24:	e0bffa05 	stb	r2,-24(fp)
   16c28:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   16c2c:	008000b4 	movhi	r2,2
   16c30:	10b65a44 	addi	r2,r2,-9879
   16c34:	10800003 	ldbu	r2,0(r2)
   16c38:	10803fcc 	andi	r2,r2,255
   16c3c:	10001526 	beq	r2,zero,16c94 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   16c40:	e0fff98b 	ldhu	r3,-26(fp)
   16c44:	e13ffa03 	ldbu	r4,-24(fp)
   16c48:	e17ffa8b 	ldhu	r5,-22(fp)
   16c4c:	e0bffb04 	addi	r2,fp,-20
   16c50:	d8800015 	stw	r2,0(sp)
   16c54:	280f883a 	mov	r7,r5
   16c58:	200d883a 	mov	r6,r4
   16c5c:	180b883a 	mov	r5,r3
   16c60:	e13ff517 	ldw	r4,-44(fp)
   16c64:	00109b80 	call	109b8 <OSFlagPend>
   16c68:	00000a06 	br	16c94 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   16c6c:	0001883a 	nop
   16c70:	e0bffc17 	ldw	r2,-16(fp)
   16c74:	10c01017 	ldw	r3,64(r2)
   16c78:	e0bff017 	ldw	r2,-64(fp)
   16c7c:	1880051e 	bne	r3,r2,16c94 <altera_avalon_jtag_uart_write+0x258>
   16c80:	e0bffc17 	ldw	r2,-16(fp)
   16c84:	10c00917 	ldw	r3,36(r2)
   16c88:	e0bffc17 	ldw	r2,-16(fp)
   16c8c:	10800117 	ldw	r2,4(r2)
   16c90:	18bff736 	bltu	r3,r2,16c70 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   16c94:	e0bffc17 	ldw	r2,-16(fp)
   16c98:	10800917 	ldw	r2,36(r2)
   16c9c:	1000051e 	bne	r2,zero,16cb4 <altera_avalon_jtag_uart_write+0x278>
         break;
    }
  }
  while (count > 0);
   16ca0:	e0bffe17 	ldw	r2,-8(fp)
   16ca4:	00bfb216 	blt	zero,r2,16b70 <altera_avalon_jtag_uart_write+0x134>
   16ca8:	00000306 	br	16cb8 <altera_avalon_jtag_uart_write+0x27c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   16cac:	0001883a 	nop
   16cb0:	00000106 	br	16cb8 <altera_avalon_jtag_uart_write+0x27c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   16cb4:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   16cb8:	e0bffc17 	ldw	r2,-16(fp)
   16cbc:	10800b17 	ldw	r2,44(r2)
   16cc0:	1009883a 	mov	r4,r2
   16cc4:	0013a7c0 	call	13a7c <OSSemPost>

  if (ptr != start)
   16cc8:	e0fffd17 	ldw	r3,-12(fp)
   16ccc:	e0bff217 	ldw	r2,-56(fp)
   16cd0:	18800426 	beq	r3,r2,16ce4 <altera_avalon_jtag_uart_write+0x2a8>
    return ptr - start;
   16cd4:	e0fffd17 	ldw	r3,-12(fp)
   16cd8:	e0bff217 	ldw	r2,-56(fp)
   16cdc:	1885c83a 	sub	r2,r3,r2
   16ce0:	00000606 	br	16cfc <altera_avalon_jtag_uart_write+0x2c0>
  else if (flags & O_NONBLOCK)
   16ce4:	e0bfff17 	ldw	r2,-4(fp)
   16ce8:	1090000c 	andi	r2,r2,16384
   16cec:	10000226 	beq	r2,zero,16cf8 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
   16cf0:	00bffd44 	movi	r2,-11
   16cf4:	00000106 	br	16cfc <altera_avalon_jtag_uart_write+0x2c0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   16cf8:	00bffec4 	movi	r2,-5
}
   16cfc:	e037883a 	mov	sp,fp
   16d00:	dfc00117 	ldw	ra,4(sp)
   16d04:	df000017 	ldw	fp,0(sp)
   16d08:	dec00204 	addi	sp,sp,8
   16d0c:	f800283a 	ret

00016d10 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   16d10:	defff904 	addi	sp,sp,-28
   16d14:	dfc00615 	stw	ra,24(sp)
   16d18:	df000515 	stw	fp,20(sp)
   16d1c:	df000504 	addi	fp,sp,20
   16d20:	e13ffe15 	stw	r4,-8(fp)
   16d24:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   16d28:	0007883a 	mov	r3,zero
   16d2c:	e0bffe17 	ldw	r2,-8(fp)
   16d30:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   16d34:	e0bffe17 	ldw	r2,-8(fp)
   16d38:	10800104 	addi	r2,r2,4
   16d3c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16d40:	0005303a 	rdctl	r2,status
   16d44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16d48:	e0fffc17 	ldw	r3,-16(fp)
   16d4c:	00bfff84 	movi	r2,-2
   16d50:	1884703a 	and	r2,r3,r2
   16d54:	1001703a 	wrctl	status,r2
  
  return context;
   16d58:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   16d5c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   16d60:	0018ab80 	call	18ab8 <alt_tick>
   16d64:	e0bffb17 	ldw	r2,-20(fp)
   16d68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16d6c:	e0bffd17 	ldw	r2,-12(fp)
   16d70:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   16d74:	0001883a 	nop
   16d78:	e037883a 	mov	sp,fp
   16d7c:	dfc00117 	ldw	ra,4(sp)
   16d80:	df000017 	ldw	fp,0(sp)
   16d84:	dec00204 	addi	sp,sp,8
   16d88:	f800283a 	ret

00016d8c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   16d8c:	defff904 	addi	sp,sp,-28
   16d90:	dfc00615 	stw	ra,24(sp)
   16d94:	df000515 	stw	fp,20(sp)
   16d98:	df000504 	addi	fp,sp,20
   16d9c:	e13ffc15 	stw	r4,-16(fp)
   16da0:	e17ffd15 	stw	r5,-12(fp)
   16da4:	e1bffe15 	stw	r6,-8(fp)
   16da8:	e1ffff15 	stw	r7,-4(fp)
   16dac:	e0bfff17 	ldw	r2,-4(fp)
   16db0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   16db4:	008000b4 	movhi	r2,2
   16db8:	10b66f04 	addi	r2,r2,-9796
   16dbc:	10800017 	ldw	r2,0(r2)
   16dc0:	1000041e 	bne	r2,zero,16dd4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   16dc4:	008000b4 	movhi	r2,2
   16dc8:	10b66f04 	addi	r2,r2,-9796
   16dcc:	e0fffb17 	ldw	r3,-20(fp)
   16dd0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   16dd4:	e0bffc17 	ldw	r2,-16(fp)
   16dd8:	10800104 	addi	r2,r2,4
   16ddc:	00c001c4 	movi	r3,7
   16de0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   16de4:	01800074 	movhi	r6,1
   16de8:	319b4404 	addi	r6,r6,27920
   16dec:	e17ffc17 	ldw	r5,-16(fp)
   16df0:	e13ffe17 	ldw	r4,-8(fp)
   16df4:	00185f80 	call	185f8 <alt_irq_register>
#endif  
}
   16df8:	0001883a 	nop
   16dfc:	e037883a 	mov	sp,fp
   16e00:	dfc00117 	ldw	ra,4(sp)
   16e04:	df000017 	ldw	fp,0(sp)
   16e08:	dec00204 	addi	sp,sp,8
   16e0c:	f800283a 	ret

00016e10 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   16e10:	defffc04 	addi	sp,sp,-16
   16e14:	df000315 	stw	fp,12(sp)
   16e18:	df000304 	addi	fp,sp,12
   16e1c:	e13ffe15 	stw	r4,-8(fp)
   16e20:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   16e24:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   16e28:	e0bfff17 	ldw	r2,-4(fp)
   16e2c:	1000061e 	bne	r2,zero,16e48 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   16e30:	e0bffe17 	ldw	r2,-8(fp)
   16e34:	1007883a 	mov	r3,r2
   16e38:	e0bffd03 	ldbu	r2,-12(fp)
   16e3c:	1884b03a 	or	r2,r3,r2
   16e40:	e0bffd05 	stb	r2,-12(fp)
   16e44:	00000806 	br	16e68 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   16e48:	e0bffe17 	ldw	r2,-8(fp)
   16e4c:	1007883a 	mov	r3,r2
   16e50:	e0bffd03 	ldbu	r2,-12(fp)
   16e54:	1884b03a 	or	r2,r3,r2
   16e58:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   16e5c:	e0bffd03 	ldbu	r2,-12(fp)
   16e60:	10801014 	ori	r2,r2,64
   16e64:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   16e68:	e0fffd03 	ldbu	r3,-12(fp)
   16e6c:	00bfe004 	movi	r2,-128
   16e70:	1884b03a 	or	r2,r3,r2
}
   16e74:	e037883a 	mov	sp,fp
   16e78:	df000017 	ldw	fp,0(sp)
   16e7c:	dec00104 	addi	sp,sp,4
   16e80:	f800283a 	ret

00016e84 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   16e84:	defffd04 	addi	sp,sp,-12
   16e88:	df000215 	stw	fp,8(sp)
   16e8c:	df000204 	addi	fp,sp,8
   16e90:	e13ffe15 	stw	r4,-8(fp)
   16e94:	2805883a 	mov	r2,r5
   16e98:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   16e9c:	e0bffe17 	ldw	r2,-8(fp)
   16ea0:	10800a17 	ldw	r2,40(r2)
   16ea4:	1007883a 	mov	r3,r2
   16ea8:	e0bfff03 	ldbu	r2,-4(fp)
   16eac:	18800025 	stbio	r2,0(r3)
}
   16eb0:	0001883a 	nop
   16eb4:	e037883a 	mov	sp,fp
   16eb8:	df000017 	ldw	fp,0(sp)
   16ebc:	dec00104 	addi	sp,sp,4
   16ec0:	f800283a 	ret

00016ec4 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   16ec4:	defffe04 	addi	sp,sp,-8
   16ec8:	df000115 	stw	fp,4(sp)
   16ecc:	df000104 	addi	fp,sp,4
   16ed0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   16ed4:	e0bfff17 	ldw	r2,-4(fp)
   16ed8:	10800a17 	ldw	r2,40(r2)
   16edc:	1007883a 	mov	r3,r2
   16ee0:	00800044 	movi	r2,1
   16ee4:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   16ee8:	0001883a 	nop
   16eec:	e037883a 	mov	sp,fp
   16ef0:	df000017 	ldw	fp,0(sp)
   16ef4:	dec00104 	addi	sp,sp,4
   16ef8:	f800283a 	ret

00016efc <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   16efc:	defffc04 	addi	sp,sp,-16
   16f00:	dfc00315 	stw	ra,12(sp)
   16f04:	df000215 	stw	fp,8(sp)
   16f08:	df000204 	addi	fp,sp,8
   16f0c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   16f10:	014000b4 	movhi	r5,2
   16f14:	296e6d04 	addi	r5,r5,-17996
   16f18:	e13fff17 	ldw	r4,-4(fp)
   16f1c:	00183f40 	call	183f4 <alt_find_dev>
   16f20:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   16f24:	e0bffe17 	ldw	r2,-8(fp)
}
   16f28:	e037883a 	mov	sp,fp
   16f2c:	dfc00117 	ldw	ra,4(sp)
   16f30:	df000017 	ldw	fp,0(sp)
   16f34:	dec00204 	addi	sp,sp,8
   16f38:	f800283a 	ret

00016f3c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   16f3c:	defffb04 	addi	sp,sp,-20
   16f40:	df000415 	stw	fp,16(sp)
   16f44:	df000404 	addi	fp,sp,16
   16f48:	e13ffd15 	stw	r4,-12(fp)
   16f4c:	e17ffe15 	stw	r5,-8(fp)
   16f50:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   16f54:	e03ffc15 	stw	zero,-16(fp)
   16f58:	00000f06 	br	16f98 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   16f5c:	e0bffd17 	ldw	r2,-12(fp)
   16f60:	10800a17 	ldw	r2,40(r2)
   16f64:	10800044 	addi	r2,r2,1
   16f68:	1009883a 	mov	r4,r2
   16f6c:	e0fffe17 	ldw	r3,-8(fp)
   16f70:	e0bffc17 	ldw	r2,-16(fp)
   16f74:	1885883a 	add	r2,r3,r2
   16f78:	10800003 	ldbu	r2,0(r2)
   16f7c:	10803fcc 	andi	r2,r2,255
   16f80:	1080201c 	xori	r2,r2,128
   16f84:	10bfe004 	addi	r2,r2,-128
   16f88:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   16f8c:	e0bffc17 	ldw	r2,-16(fp)
   16f90:	10800044 	addi	r2,r2,1
   16f94:	e0bffc15 	stw	r2,-16(fp)
   16f98:	e0fffc17 	ldw	r3,-16(fp)
   16f9c:	e0bfff17 	ldw	r2,-4(fp)
   16fa0:	18bfee36 	bltu	r3,r2,16f5c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   16fa4:	0001883a 	nop
   16fa8:	e037883a 	mov	sp,fp
   16fac:	df000017 	ldw	fp,0(sp)
   16fb0:	dec00104 	addi	sp,sp,4
   16fb4:	f800283a 	ret

00016fb8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   16fb8:	defffd04 	addi	sp,sp,-12
   16fbc:	df000215 	stw	fp,8(sp)
   16fc0:	df000204 	addi	fp,sp,8
   16fc4:	e13ffe15 	stw	r4,-8(fp)
   16fc8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   16fcc:	00000d06 	br	17004 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   16fd0:	e0bffe17 	ldw	r2,-8(fp)
   16fd4:	10800a17 	ldw	r2,40(r2)
   16fd8:	10800044 	addi	r2,r2,1
   16fdc:	1007883a 	mov	r3,r2
   16fe0:	e0bfff17 	ldw	r2,-4(fp)
   16fe4:	10800003 	ldbu	r2,0(r2)
   16fe8:	10803fcc 	andi	r2,r2,255
   16fec:	1080201c 	xori	r2,r2,128
   16ff0:	10bfe004 	addi	r2,r2,-128
   16ff4:	18800025 	stbio	r2,0(r3)
		++ptr;
   16ff8:	e0bfff17 	ldw	r2,-4(fp)
   16ffc:	10800044 	addi	r2,r2,1
   17000:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   17004:	e0bfff17 	ldw	r2,-4(fp)
   17008:	10800003 	ldbu	r2,0(r2)
   1700c:	10803fcc 	andi	r2,r2,255
   17010:	1080201c 	xori	r2,r2,128
   17014:	10bfe004 	addi	r2,r2,-128
   17018:	103fed1e 	bne	r2,zero,16fd0 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1701c:	0001883a 	nop
   17020:	e037883a 	mov	sp,fp
   17024:	df000017 	ldw	fp,0(sp)
   17028:	dec00104 	addi	sp,sp,4
   1702c:	f800283a 	ret

00017030 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   17030:	defffb04 	addi	sp,sp,-20
   17034:	dfc00415 	stw	ra,16(sp)
   17038:	df000315 	stw	fp,12(sp)
   1703c:	df000304 	addi	fp,sp,12
   17040:	e13ffd15 	stw	r4,-12(fp)
   17044:	e17ffe15 	stw	r5,-8(fp)
   17048:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1704c:	e0bffd17 	ldw	r2,-12(fp)
   17050:	10800017 	ldw	r2,0(r2)
   17054:	e0ffff17 	ldw	r3,-4(fp)
   17058:	180d883a 	mov	r6,r3
   1705c:	e17ffe17 	ldw	r5,-8(fp)
   17060:	1009883a 	mov	r4,r2
   17064:	0016f3c0 	call	16f3c <alt_up_character_lcd_write>
	return 0;
   17068:	0005883a 	mov	r2,zero
}
   1706c:	e037883a 	mov	sp,fp
   17070:	dfc00117 	ldw	ra,4(sp)
   17074:	df000017 	ldw	fp,0(sp)
   17078:	dec00204 	addi	sp,sp,8
   1707c:	f800283a 	ret

00017080 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   17080:	defffa04 	addi	sp,sp,-24
   17084:	dfc00515 	stw	ra,20(sp)
   17088:	df000415 	stw	fp,16(sp)
   1708c:	df000404 	addi	fp,sp,16
   17090:	e13ffd15 	stw	r4,-12(fp)
   17094:	e17ffe15 	stw	r5,-8(fp)
   17098:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1709c:	e0bffe17 	ldw	r2,-8(fp)
   170a0:	10800a28 	cmpgeui	r2,r2,40
   170a4:	1000031e 	bne	r2,zero,170b4 <alt_up_character_lcd_set_cursor_pos+0x34>
   170a8:	e0bfff17 	ldw	r2,-4(fp)
   170ac:	108000b0 	cmpltui	r2,r2,2
   170b0:	1000021e 	bne	r2,zero,170bc <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   170b4:	00bfffc4 	movi	r2,-1
   170b8:	00000906 	br	170e0 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   170bc:	e17fff17 	ldw	r5,-4(fp)
   170c0:	e13ffe17 	ldw	r4,-8(fp)
   170c4:	0016e100 	call	16e10 <get_DDRAM_addr>
   170c8:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   170cc:	e0bffc03 	ldbu	r2,-16(fp)
   170d0:	100b883a 	mov	r5,r2
   170d4:	e13ffd17 	ldw	r4,-12(fp)
   170d8:	0016e840 	call	16e84 <alt_up_character_lcd_send_cmd>
	return 0;
   170dc:	0005883a 	mov	r2,zero
}
   170e0:	e037883a 	mov	sp,fp
   170e4:	dfc00117 	ldw	ra,4(sp)
   170e8:	df000017 	ldw	fp,0(sp)
   170ec:	dec00204 	addi	sp,sp,8
   170f0:	f800283a 	ret

000170f4 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   170f4:	defffb04 	addi	sp,sp,-20
   170f8:	dfc00415 	stw	ra,16(sp)
   170fc:	df000315 	stw	fp,12(sp)
   17100:	df000304 	addi	fp,sp,12
   17104:	e13ffe15 	stw	r4,-8(fp)
   17108:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1710c:	e0bfff17 	ldw	r2,-4(fp)
   17110:	10001526 	beq	r2,zero,17168 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   17114:	e0bfff17 	ldw	r2,-4(fp)
   17118:	0080020e 	bge	zero,r2,17124 <alt_up_character_lcd_shift_cursor+0x30>
   1711c:	00800504 	movi	r2,20
   17120:	00000106 	br	17128 <alt_up_character_lcd_shift_cursor+0x34>
   17124:	00800404 	movi	r2,16
   17128:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1712c:	e0bfff17 	ldw	r2,-4(fp)
   17130:	1000010e 	bge	r2,zero,17138 <alt_up_character_lcd_shift_cursor+0x44>
   17134:	0085c83a 	sub	r2,zero,r2
   17138:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1713c:	00000406 	br	17150 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   17140:	e0bffd43 	ldbu	r2,-11(fp)
   17144:	100b883a 	mov	r5,r2
   17148:	e13ffe17 	ldw	r4,-8(fp)
   1714c:	0016e840 	call	16e84 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   17150:	e0bffd03 	ldbu	r2,-12(fp)
   17154:	10ffffc4 	addi	r3,r2,-1
   17158:	e0fffd05 	stb	r3,-12(fp)
   1715c:	10803fcc 	andi	r2,r2,255
   17160:	103ff71e 	bne	r2,zero,17140 <alt_up_character_lcd_shift_cursor+0x4c>
   17164:	00000106 	br	1716c <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   17168:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1716c:	e037883a 	mov	sp,fp
   17170:	dfc00117 	ldw	ra,4(sp)
   17174:	df000017 	ldw	fp,0(sp)
   17178:	dec00204 	addi	sp,sp,8
   1717c:	f800283a 	ret

00017180 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   17180:	defffb04 	addi	sp,sp,-20
   17184:	dfc00415 	stw	ra,16(sp)
   17188:	df000315 	stw	fp,12(sp)
   1718c:	df000304 	addi	fp,sp,12
   17190:	e13ffe15 	stw	r4,-8(fp)
   17194:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   17198:	e0bfff17 	ldw	r2,-4(fp)
   1719c:	10001526 	beq	r2,zero,171f4 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   171a0:	e0bfff17 	ldw	r2,-4(fp)
   171a4:	0080020e 	bge	zero,r2,171b0 <alt_up_character_lcd_shift_display+0x30>
   171a8:	00800704 	movi	r2,28
   171ac:	00000106 	br	171b4 <alt_up_character_lcd_shift_display+0x34>
   171b0:	00800604 	movi	r2,24
   171b4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   171b8:	e0bfff17 	ldw	r2,-4(fp)
   171bc:	1000010e 	bge	r2,zero,171c4 <alt_up_character_lcd_shift_display+0x44>
   171c0:	0085c83a 	sub	r2,zero,r2
   171c4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   171c8:	00000406 	br	171dc <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   171cc:	e0bffd43 	ldbu	r2,-11(fp)
   171d0:	100b883a 	mov	r5,r2
   171d4:	e13ffe17 	ldw	r4,-8(fp)
   171d8:	0016e840 	call	16e84 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   171dc:	e0bffd03 	ldbu	r2,-12(fp)
   171e0:	10ffffc4 	addi	r3,r2,-1
   171e4:	e0fffd05 	stb	r3,-12(fp)
   171e8:	10803fcc 	andi	r2,r2,255
   171ec:	103ff71e 	bne	r2,zero,171cc <alt_up_character_lcd_shift_display+0x4c>
   171f0:	00000106 	br	171f8 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   171f4:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   171f8:	e037883a 	mov	sp,fp
   171fc:	dfc00117 	ldw	ra,4(sp)
   17200:	df000017 	ldw	fp,0(sp)
   17204:	dec00204 	addi	sp,sp,8
   17208:	f800283a 	ret

0001720c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1720c:	defffa04 	addi	sp,sp,-24
   17210:	dfc00515 	stw	ra,20(sp)
   17214:	df000415 	stw	fp,16(sp)
   17218:	df000404 	addi	fp,sp,16
   1721c:	e13ffd15 	stw	r4,-12(fp)
   17220:	e17ffe15 	stw	r5,-8(fp)
   17224:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   17228:	e0bffe17 	ldw	r2,-8(fp)
   1722c:	10800a28 	cmpgeui	r2,r2,40
   17230:	1000031e 	bne	r2,zero,17240 <alt_up_character_lcd_erase_pos+0x34>
   17234:	e0bfff17 	ldw	r2,-4(fp)
   17238:	108000b0 	cmpltui	r2,r2,2
   1723c:	1000021e 	bne	r2,zero,17248 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   17240:	00bfffc4 	movi	r2,-1
   17244:	00000f06 	br	17284 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   17248:	e17fff17 	ldw	r5,-4(fp)
   1724c:	e13ffe17 	ldw	r4,-8(fp)
   17250:	0016e100 	call	16e10 <get_DDRAM_addr>
   17254:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   17258:	e0bffc03 	ldbu	r2,-16(fp)
   1725c:	100b883a 	mov	r5,r2
   17260:	e13ffd17 	ldw	r4,-12(fp)
   17264:	0016e840 	call	16e84 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   17268:	e0bffd17 	ldw	r2,-12(fp)
   1726c:	10800a17 	ldw	r2,40(r2)
   17270:	10800044 	addi	r2,r2,1
   17274:	1007883a 	mov	r3,r2
   17278:	00800084 	movi	r2,2
   1727c:	18800025 	stbio	r2,0(r3)
	return 0;
   17280:	0005883a 	mov	r2,zero
}
   17284:	e037883a 	mov	sp,fp
   17288:	dfc00117 	ldw	ra,4(sp)
   1728c:	df000017 	ldw	fp,0(sp)
   17290:	dec00204 	addi	sp,sp,8
   17294:	f800283a 	ret

00017298 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   17298:	defffd04 	addi	sp,sp,-12
   1729c:	dfc00215 	stw	ra,8(sp)
   172a0:	df000115 	stw	fp,4(sp)
   172a4:	df000104 	addi	fp,sp,4
   172a8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   172ac:	01400304 	movi	r5,12
   172b0:	e13fff17 	ldw	r4,-4(fp)
   172b4:	0016e840 	call	16e84 <alt_up_character_lcd_send_cmd>
}
   172b8:	0001883a 	nop
   172bc:	e037883a 	mov	sp,fp
   172c0:	dfc00117 	ldw	ra,4(sp)
   172c4:	df000017 	ldw	fp,0(sp)
   172c8:	dec00204 	addi	sp,sp,8
   172cc:	f800283a 	ret

000172d0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   172d0:	defffd04 	addi	sp,sp,-12
   172d4:	dfc00215 	stw	ra,8(sp)
   172d8:	df000115 	stw	fp,4(sp)
   172dc:	df000104 	addi	fp,sp,4
   172e0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   172e4:	014003c4 	movi	r5,15
   172e8:	e13fff17 	ldw	r4,-4(fp)
   172ec:	0016e840 	call	16e84 <alt_up_character_lcd_send_cmd>
}
   172f0:	0001883a 	nop
   172f4:	e037883a 	mov	sp,fp
   172f8:	dfc00117 	ldw	ra,4(sp)
   172fc:	df000017 	ldw	fp,0(sp)
   17300:	dec00204 	addi	sp,sp,8
   17304:	f800283a 	ret

00017308 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   17308:	defffd04 	addi	sp,sp,-12
   1730c:	df000215 	stw	fp,8(sp)
   17310:	df000204 	addi	fp,sp,8
   17314:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   17318:	e0bfff17 	ldw	r2,-4(fp)
   1731c:	10800a17 	ldw	r2,40(r2)
   17320:	10800104 	addi	r2,r2,4
   17324:	10800037 	ldwio	r2,0(r2)
   17328:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1732c:	e0bffe17 	ldw	r2,-8(fp)
   17330:	10800054 	ori	r2,r2,1
   17334:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   17338:	e0bfff17 	ldw	r2,-4(fp)
   1733c:	10800a17 	ldw	r2,40(r2)
   17340:	10800104 	addi	r2,r2,4
   17344:	1007883a 	mov	r3,r2
   17348:	e0bffe17 	ldw	r2,-8(fp)
   1734c:	18800035 	stwio	r2,0(r3)
}
   17350:	0001883a 	nop
   17354:	e037883a 	mov	sp,fp
   17358:	df000017 	ldw	fp,0(sp)
   1735c:	dec00104 	addi	sp,sp,4
   17360:	f800283a 	ret

00017364 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   17364:	defffd04 	addi	sp,sp,-12
   17368:	df000215 	stw	fp,8(sp)
   1736c:	df000204 	addi	fp,sp,8
   17370:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   17374:	e0bfff17 	ldw	r2,-4(fp)
   17378:	10800a17 	ldw	r2,40(r2)
   1737c:	10800104 	addi	r2,r2,4
   17380:	10800037 	ldwio	r2,0(r2)
   17384:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   17388:	e0fffe17 	ldw	r3,-8(fp)
   1738c:	00bfff84 	movi	r2,-2
   17390:	1884703a 	and	r2,r3,r2
   17394:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   17398:	e0bfff17 	ldw	r2,-4(fp)
   1739c:	10800a17 	ldw	r2,40(r2)
   173a0:	10800104 	addi	r2,r2,4
   173a4:	1007883a 	mov	r3,r2
   173a8:	e0bffe17 	ldw	r2,-8(fp)
   173ac:	18800035 	stwio	r2,0(r3)
}
   173b0:	0001883a 	nop
   173b4:	e037883a 	mov	sp,fp
   173b8:	df000017 	ldw	fp,0(sp)
   173bc:	dec00104 	addi	sp,sp,4
   173c0:	f800283a 	ret

000173c4 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   173c4:	defffd04 	addi	sp,sp,-12
   173c8:	df000215 	stw	fp,8(sp)
   173cc:	df000204 	addi	fp,sp,8
   173d0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   173d4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   173d8:	e0bfff17 	ldw	r2,-4(fp)
   173dc:	10800a17 	ldw	r2,40(r2)
   173e0:	10800084 	addi	r2,r2,2
   173e4:	1080002b 	ldhuio	r2,0(r2)
   173e8:	10bfffcc 	andi	r2,r2,65535
   173ec:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   173f0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   173f4:	e037883a 	mov	sp,fp
   173f8:	df000017 	ldw	fp,0(sp)
   173fc:	dec00104 	addi	sp,sp,4
   17400:	f800283a 	ret

00017404 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   17404:	defffd04 	addi	sp,sp,-12
   17408:	df000215 	stw	fp,8(sp)
   1740c:	df000204 	addi	fp,sp,8
   17410:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   17414:	e0bfff17 	ldw	r2,-4(fp)
   17418:	10800a17 	ldw	r2,40(r2)
   1741c:	10800104 	addi	r2,r2,4
   17420:	10800037 	ldwio	r2,0(r2)
   17424:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   17428:	e0bffe17 	ldw	r2,-8(fp)
   1742c:	1004d43a 	srli	r2,r2,16
}
   17430:	e037883a 	mov	sp,fp
   17434:	df000017 	ldw	fp,0(sp)
   17438:	dec00104 	addi	sp,sp,4
   1743c:	f800283a 	ret

00017440 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   17440:	defffd04 	addi	sp,sp,-12
   17444:	df000215 	stw	fp,8(sp)
   17448:	df000204 	addi	fp,sp,8
   1744c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   17450:	e0bfff17 	ldw	r2,-4(fp)
   17454:	1080800c 	andi	r2,r2,512
   17458:	1004d27a 	srli	r2,r2,9
   1745c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   17460:	e0bffe17 	ldw	r2,-8(fp)
   17464:	10000226 	beq	r2,zero,17470 <alt_up_irda_check_parity+0x30>
   17468:	00bfffc4 	movi	r2,-1
   1746c:	00000106 	br	17474 <alt_up_irda_check_parity+0x34>
   17470:	0005883a 	mov	r2,zero
}
   17474:	e037883a 	mov	sp,fp
   17478:	df000017 	ldw	fp,0(sp)
   1747c:	dec00104 	addi	sp,sp,4
   17480:	f800283a 	ret

00017484 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   17484:	defffd04 	addi	sp,sp,-12
   17488:	df000215 	stw	fp,8(sp)
   1748c:	df000204 	addi	fp,sp,8
   17490:	e13ffe15 	stw	r4,-8(fp)
   17494:	2805883a 	mov	r2,r5
   17498:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1749c:	e0bffe17 	ldw	r2,-8(fp)
   174a0:	10800a17 	ldw	r2,40(r2)
   174a4:	1007883a 	mov	r3,r2
   174a8:	e0bfff03 	ldbu	r2,-4(fp)
   174ac:	18800035 	stwio	r2,0(r3)
	return 0;
   174b0:	0005883a 	mov	r2,zero
}
   174b4:	e037883a 	mov	sp,fp
   174b8:	df000017 	ldw	fp,0(sp)
   174bc:	dec00104 	addi	sp,sp,4
   174c0:	f800283a 	ret

000174c4 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   174c4:	defffa04 	addi	sp,sp,-24
   174c8:	dfc00515 	stw	ra,20(sp)
   174cc:	df000415 	stw	fp,16(sp)
   174d0:	df000404 	addi	fp,sp,16
   174d4:	e13ffd15 	stw	r4,-12(fp)
   174d8:	e17ffe15 	stw	r5,-8(fp)
   174dc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   174e0:	e0bffd17 	ldw	r2,-12(fp)
   174e4:	10800a17 	ldw	r2,40(r2)
   174e8:	10800037 	ldwio	r2,0(r2)
   174ec:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   174f0:	e0bffc17 	ldw	r2,-16(fp)
   174f4:	1007883a 	mov	r3,r2
   174f8:	e0bffe17 	ldw	r2,-8(fp)
   174fc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   17500:	e13ffc17 	ldw	r4,-16(fp)
   17504:	00174400 	call	17440 <alt_up_irda_check_parity>
   17508:	1007883a 	mov	r3,r2
   1750c:	e0bfff17 	ldw	r2,-4(fp)
   17510:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   17514:	e0bffc17 	ldw	r2,-16(fp)
   17518:	10a0000c 	andi	r2,r2,32768
   1751c:	1004d3fa 	srli	r2,r2,15
   17520:	10bfffc4 	addi	r2,r2,-1
}
   17524:	e037883a 	mov	sp,fp
   17528:	dfc00117 	ldw	ra,4(sp)
   1752c:	df000017 	ldw	fp,0(sp)
   17530:	dec00204 	addi	sp,sp,8
   17534:	f800283a 	ret

00017538 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   17538:	defff804 	addi	sp,sp,-32
   1753c:	dfc00715 	stw	ra,28(sp)
   17540:	df000615 	stw	fp,24(sp)
   17544:	df000604 	addi	fp,sp,24
   17548:	e13ffd15 	stw	r4,-12(fp)
   1754c:	e17ffe15 	stw	r5,-8(fp)
   17550:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   17554:	e0bffd17 	ldw	r2,-12(fp)
   17558:	10800017 	ldw	r2,0(r2)
   1755c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   17560:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   17564:	00000c06 	br	17598 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   17568:	e0bffe17 	ldw	r2,-8(fp)
   1756c:	10c00044 	addi	r3,r2,1
   17570:	e0fffe15 	stw	r3,-8(fp)
   17574:	e0fffc04 	addi	r3,fp,-16
   17578:	180d883a 	mov	r6,r3
   1757c:	100b883a 	mov	r5,r2
   17580:	e13ffb17 	ldw	r4,-20(fp)
   17584:	00174c40 	call	174c4 <alt_up_irda_read_data>
   17588:	1000081e 	bne	r2,zero,175ac <alt_up_irda_read_fd+0x74>
			count++;
   1758c:	e0bffa17 	ldw	r2,-24(fp)
   17590:	10800044 	addi	r2,r2,1
   17594:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   17598:	e0bfff17 	ldw	r2,-4(fp)
   1759c:	10ffffc4 	addi	r3,r2,-1
   175a0:	e0ffff15 	stw	r3,-4(fp)
   175a4:	103ff01e 	bne	r2,zero,17568 <alt_up_irda_read_fd+0x30>
   175a8:	00000106 	br	175b0 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   175ac:	0001883a 	nop
	}
	return count;
   175b0:	e0bffa17 	ldw	r2,-24(fp)
}
   175b4:	e037883a 	mov	sp,fp
   175b8:	dfc00117 	ldw	ra,4(sp)
   175bc:	df000017 	ldw	fp,0(sp)
   175c0:	dec00204 	addi	sp,sp,8
   175c4:	f800283a 	ret

000175c8 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   175c8:	defff904 	addi	sp,sp,-28
   175cc:	dfc00615 	stw	ra,24(sp)
   175d0:	df000515 	stw	fp,20(sp)
   175d4:	df000504 	addi	fp,sp,20
   175d8:	e13ffd15 	stw	r4,-12(fp)
   175dc:	e17ffe15 	stw	r5,-8(fp)
   175e0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   175e4:	e0bffd17 	ldw	r2,-12(fp)
   175e8:	10800017 	ldw	r2,0(r2)
   175ec:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   175f0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   175f4:	00000c06 	br	17628 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   175f8:	e0bffe17 	ldw	r2,-8(fp)
   175fc:	10c00044 	addi	r3,r2,1
   17600:	e0fffe15 	stw	r3,-8(fp)
   17604:	10800003 	ldbu	r2,0(r2)
   17608:	10803fcc 	andi	r2,r2,255
   1760c:	100b883a 	mov	r5,r2
   17610:	e13ffc17 	ldw	r4,-16(fp)
   17614:	00174840 	call	17484 <alt_up_irda_write_data>
   17618:	1000081e 	bne	r2,zero,1763c <alt_up_irda_write_fd+0x74>
			count++;
   1761c:	e0bffb17 	ldw	r2,-20(fp)
   17620:	10800044 	addi	r2,r2,1
   17624:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   17628:	e0bfff17 	ldw	r2,-4(fp)
   1762c:	10ffffc4 	addi	r3,r2,-1
   17630:	e0ffff15 	stw	r3,-4(fp)
   17634:	103ff01e 	bne	r2,zero,175f8 <alt_up_irda_write_fd+0x30>
   17638:	00000106 	br	17640 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   1763c:	0001883a 	nop
	}
	return count;
   17640:	e0bffb17 	ldw	r2,-20(fp)
}
   17644:	e037883a 	mov	sp,fp
   17648:	dfc00117 	ldw	ra,4(sp)
   1764c:	df000017 	ldw	fp,0(sp)
   17650:	dec00204 	addi	sp,sp,8
   17654:	f800283a 	ret

00017658 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   17658:	defffc04 	addi	sp,sp,-16
   1765c:	dfc00315 	stw	ra,12(sp)
   17660:	df000215 	stw	fp,8(sp)
   17664:	df000204 	addi	fp,sp,8
   17668:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1766c:	014000b4 	movhi	r5,2
   17670:	296e6d04 	addi	r5,r5,-17996
   17674:	e13fff17 	ldw	r4,-4(fp)
   17678:	00183f40 	call	183f4 <alt_find_dev>
   1767c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17680:	e0bffe17 	ldw	r2,-8(fp)
}
   17684:	e037883a 	mov	sp,fp
   17688:	dfc00117 	ldw	ra,4(sp)
   1768c:	df000017 	ldw	fp,0(sp)
   17690:	dec00204 	addi	sp,sp,8
   17694:	f800283a 	ret

00017698 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   17698:	defffd04 	addi	sp,sp,-12
   1769c:	df000215 	stw	fp,8(sp)
   176a0:	df000204 	addi	fp,sp,8
   176a4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   176a8:	e0bfff17 	ldw	r2,-4(fp)
   176ac:	1080400c 	andi	r2,r2,256
   176b0:	1004d23a 	srli	r2,r2,8
   176b4:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   176b8:	e0bffe03 	ldbu	r2,-8(fp)
}
   176bc:	e037883a 	mov	sp,fp
   176c0:	df000017 	ldw	fp,0(sp)
   176c4:	dec00104 	addi	sp,sp,4
   176c8:	f800283a 	ret

000176cc <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   176cc:	defffd04 	addi	sp,sp,-12
   176d0:	df000215 	stw	fp,8(sp)
   176d4:	df000204 	addi	fp,sp,8
   176d8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   176dc:	e0bfff17 	ldw	r2,-4(fp)
   176e0:	1080004c 	andi	r2,r2,1
   176e4:	e0bffe05 	stb	r2,-8(fp)
	return re;
   176e8:	e0bffe03 	ldbu	r2,-8(fp)
}
   176ec:	e037883a 	mov	sp,fp
   176f0:	df000017 	ldw	fp,0(sp)
   176f4:	dec00104 	addi	sp,sp,4
   176f8:	f800283a 	ret

000176fc <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   176fc:	defffd04 	addi	sp,sp,-12
   17700:	df000215 	stw	fp,8(sp)
   17704:	df000204 	addi	fp,sp,8
   17708:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1770c:	e0bfff17 	ldw	r2,-4(fp)
   17710:	1081000c 	andi	r2,r2,1024
   17714:	1004d2ba 	srli	r2,r2,10
   17718:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1771c:	e0bffe03 	ldbu	r2,-8(fp)
}
   17720:	e037883a 	mov	sp,fp
   17724:	df000017 	ldw	fp,0(sp)
   17728:	dec00104 	addi	sp,sp,4
   1772c:	f800283a 	ret

00017730 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   17730:	defffd04 	addi	sp,sp,-12
   17734:	df000215 	stw	fp,8(sp)
   17738:	df000204 	addi	fp,sp,8
   1773c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   17740:	e0bfff17 	ldw	r2,-4(fp)
   17744:	1004d43a 	srli	r2,r2,16
   17748:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1774c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   17750:	e037883a 	mov	sp,fp
   17754:	df000017 	ldw	fp,0(sp)
   17758:	dec00104 	addi	sp,sp,4
   1775c:	f800283a 	ret

00017760 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   17760:	defffd04 	addi	sp,sp,-12
   17764:	df000215 	stw	fp,8(sp)
   17768:	df000204 	addi	fp,sp,8
   1776c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   17770:	e0bfff17 	ldw	r2,-4(fp)
   17774:	10a0000c 	andi	r2,r2,32768
   17778:	1004d3fa 	srli	r2,r2,15
   1777c:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   17780:	e0bffe03 	ldbu	r2,-8(fp)
}
   17784:	e037883a 	mov	sp,fp
   17788:	df000017 	ldw	fp,0(sp)
   1778c:	dec00104 	addi	sp,sp,4
   17790:	f800283a 	ret

00017794 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   17794:	defffd04 	addi	sp,sp,-12
   17798:	df000215 	stw	fp,8(sp)
   1779c:	df000204 	addi	fp,sp,8
   177a0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   177a4:	e0bfff17 	ldw	r2,-4(fp)
   177a8:	e0bffe05 	stb	r2,-8(fp)
	return data;
   177ac:	e0bffe03 	ldbu	r2,-8(fp)
}
   177b0:	e037883a 	mov	sp,fp
   177b4:	df000017 	ldw	fp,0(sp)
   177b8:	dec00104 	addi	sp,sp,4
   177bc:	f800283a 	ret

000177c0 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   177c0:	defffb04 	addi	sp,sp,-20
   177c4:	dfc00415 	stw	ra,16(sp)
   177c8:	df000315 	stw	fp,12(sp)
   177cc:	df000304 	addi	fp,sp,12
   177d0:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   177d4:	01403fc4 	movi	r5,255
   177d8:	e13fff17 	ldw	r4,-4(fp)
   177dc:	0017a200 	call	17a20 <alt_up_ps2_write_data_byte_with_ack>
   177e0:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   177e4:	e0bffd17 	ldw	r2,-12(fp)
   177e8:	1000211e 	bne	r2,zero,17870 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   177ec:	e0bffe04 	addi	r2,fp,-8
   177f0:	100b883a 	mov	r5,r2
   177f4:	e13fff17 	ldw	r4,-4(fp)
   177f8:	0017a840 	call	17a84 <alt_up_ps2_read_data_byte_timeout>
   177fc:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   17800:	e0bffd17 	ldw	r2,-12(fp)
   17804:	10001a1e 	bne	r2,zero,17870 <alt_up_ps2_init+0xb0>
   17808:	e0bffe03 	ldbu	r2,-8(fp)
   1780c:	10803fcc 	andi	r2,r2,255
   17810:	10802a98 	cmpnei	r2,r2,170
   17814:	1000161e 	bne	r2,zero,17870 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   17818:	e0bffe04 	addi	r2,fp,-8
   1781c:	100b883a 	mov	r5,r2
   17820:	e13fff17 	ldw	r4,-4(fp)
   17824:	0017a840 	call	17a84 <alt_up_ps2_read_data_byte_timeout>
   17828:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1782c:	e0bffd17 	ldw	r2,-12(fp)
   17830:	10bfe318 	cmpnei	r2,r2,-116
   17834:	1000041e 	bne	r2,zero,17848 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   17838:	e0bfff17 	ldw	r2,-4(fp)
   1783c:	00c00044 	movi	r3,1
   17840:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   17844:	00000a06 	br	17870 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   17848:	e0bffd17 	ldw	r2,-12(fp)
   1784c:	1000081e 	bne	r2,zero,17870 <alt_up_ps2_init+0xb0>
   17850:	e0bffe03 	ldbu	r2,-8(fp)
   17854:	10803fcc 	andi	r2,r2,255
   17858:	1000051e 	bne	r2,zero,17870 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1785c:	e0bfff17 	ldw	r2,-4(fp)
   17860:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   17864:	01403d04 	movi	r5,244
   17868:	e13fff17 	ldw	r4,-4(fp)
   1786c:	00179440 	call	17944 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   17870:	0001883a 	nop
   17874:	e037883a 	mov	sp,fp
   17878:	dfc00117 	ldw	ra,4(sp)
   1787c:	df000017 	ldw	fp,0(sp)
   17880:	dec00204 	addi	sp,sp,8
   17884:	f800283a 	ret

00017888 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   17888:	defffd04 	addi	sp,sp,-12
   1788c:	df000215 	stw	fp,8(sp)
   17890:	df000204 	addi	fp,sp,8
   17894:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   17898:	e0bfff17 	ldw	r2,-4(fp)
   1789c:	10800a17 	ldw	r2,40(r2)
   178a0:	10800104 	addi	r2,r2,4
   178a4:	10800037 	ldwio	r2,0(r2)
   178a8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   178ac:	e0bffe17 	ldw	r2,-8(fp)
   178b0:	10800054 	ori	r2,r2,1
   178b4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   178b8:	e0bfff17 	ldw	r2,-4(fp)
   178bc:	10800a17 	ldw	r2,40(r2)
   178c0:	10800104 	addi	r2,r2,4
   178c4:	1007883a 	mov	r3,r2
   178c8:	e0bffe17 	ldw	r2,-8(fp)
   178cc:	18800035 	stwio	r2,0(r3)
}
   178d0:	0001883a 	nop
   178d4:	e037883a 	mov	sp,fp
   178d8:	df000017 	ldw	fp,0(sp)
   178dc:	dec00104 	addi	sp,sp,4
   178e0:	f800283a 	ret

000178e4 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   178e4:	defffd04 	addi	sp,sp,-12
   178e8:	df000215 	stw	fp,8(sp)
   178ec:	df000204 	addi	fp,sp,8
   178f0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   178f4:	e0bfff17 	ldw	r2,-4(fp)
   178f8:	10800a17 	ldw	r2,40(r2)
   178fc:	10800104 	addi	r2,r2,4
   17900:	10800037 	ldwio	r2,0(r2)
   17904:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   17908:	e0fffe17 	ldw	r3,-8(fp)
   1790c:	00bfff84 	movi	r2,-2
   17910:	1884703a 	and	r2,r3,r2
   17914:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   17918:	e0bfff17 	ldw	r2,-4(fp)
   1791c:	10800a17 	ldw	r2,40(r2)
   17920:	10800104 	addi	r2,r2,4
   17924:	1007883a 	mov	r3,r2
   17928:	e0bffe17 	ldw	r2,-8(fp)
   1792c:	18800035 	stwio	r2,0(r3)
}
   17930:	0001883a 	nop
   17934:	e037883a 	mov	sp,fp
   17938:	df000017 	ldw	fp,0(sp)
   1793c:	dec00104 	addi	sp,sp,4
   17940:	f800283a 	ret

00017944 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   17944:	defffb04 	addi	sp,sp,-20
   17948:	dfc00415 	stw	ra,16(sp)
   1794c:	df000315 	stw	fp,12(sp)
   17950:	df000304 	addi	fp,sp,12
   17954:	e13ffe15 	stw	r4,-8(fp)
   17958:	2805883a 	mov	r2,r5
   1795c:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   17960:	e0bffe17 	ldw	r2,-8(fp)
   17964:	10800a17 	ldw	r2,40(r2)
   17968:	1007883a 	mov	r3,r2
   1796c:	e0bfff03 	ldbu	r2,-4(fp)
   17970:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   17974:	e0bffe17 	ldw	r2,-8(fp)
   17978:	10800a17 	ldw	r2,40(r2)
   1797c:	10800104 	addi	r2,r2,4
   17980:	10800037 	ldwio	r2,0(r2)
   17984:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   17988:	e13ffd17 	ldw	r4,-12(fp)
   1798c:	00176fc0 	call	176fc <read_CE_bit>
   17990:	10803fcc 	andi	r2,r2,255
   17994:	10000226 	beq	r2,zero,179a0 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   17998:	00bffec4 	movi	r2,-5
   1799c:	00000106 	br	179a4 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   179a0:	0005883a 	mov	r2,zero
}
   179a4:	e037883a 	mov	sp,fp
   179a8:	dfc00117 	ldw	ra,4(sp)
   179ac:	df000017 	ldw	fp,0(sp)
   179b0:	dec00204 	addi	sp,sp,8
   179b4:	f800283a 	ret

000179b8 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   179b8:	defffc04 	addi	sp,sp,-16
   179bc:	dfc00315 	stw	ra,12(sp)
   179c0:	df000215 	stw	fp,8(sp)
   179c4:	df000204 	addi	fp,sp,8
   179c8:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   179cc:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   179d0:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   179d4:	e0bffe44 	addi	r2,fp,-7
   179d8:	100b883a 	mov	r5,r2
   179dc:	e13fff17 	ldw	r4,-4(fp)
   179e0:	0017a840 	call	17a84 <alt_up_ps2_read_data_byte_timeout>
   179e4:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   179e8:	e0bffe03 	ldbu	r2,-8(fp)
   179ec:	1000061e 	bne	r2,zero,17a08 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   179f0:	e0bffe43 	ldbu	r2,-7(fp)
   179f4:	10803fcc 	andi	r2,r2,255
   179f8:	10803e98 	cmpnei	r2,r2,250
   179fc:	103ff51e 	bne	r2,zero,179d4 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
   17a00:	0005883a 	mov	r2,zero
   17a04:	00000106 	br	17a0c <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   17a08:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   17a0c:	e037883a 	mov	sp,fp
   17a10:	dfc00117 	ldw	ra,4(sp)
   17a14:	df000017 	ldw	fp,0(sp)
   17a18:	dec00204 	addi	sp,sp,8
   17a1c:	f800283a 	ret

00017a20 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   17a20:	defffa04 	addi	sp,sp,-24
   17a24:	dfc00515 	stw	ra,20(sp)
   17a28:	df000415 	stw	fp,16(sp)
   17a2c:	df000404 	addi	fp,sp,16
   17a30:	e13ffe15 	stw	r4,-8(fp)
   17a34:	2805883a 	mov	r2,r5
   17a38:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   17a3c:	e0bfff03 	ldbu	r2,-4(fp)
   17a40:	100b883a 	mov	r5,r2
   17a44:	e13ffe17 	ldw	r4,-8(fp)
   17a48:	00179440 	call	17944 <alt_up_ps2_write_data_byte>
   17a4c:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   17a50:	e0bffc17 	ldw	r2,-16(fp)
   17a54:	10000226 	beq	r2,zero,17a60 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   17a58:	e0bffc17 	ldw	r2,-16(fp)
   17a5c:	00000406 	br	17a70 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   17a60:	e13ffe17 	ldw	r4,-8(fp)
   17a64:	00179b80 	call	179b8 <alt_up_ps2_wait_for_ack>
   17a68:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   17a6c:	e0bffd17 	ldw	r2,-12(fp)
}
   17a70:	e037883a 	mov	sp,fp
   17a74:	dfc00117 	ldw	ra,4(sp)
   17a78:	df000017 	ldw	fp,0(sp)
   17a7c:	dec00204 	addi	sp,sp,8
   17a80:	f800283a 	ret

00017a84 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   17a84:	defffa04 	addi	sp,sp,-24
   17a88:	dfc00515 	stw	ra,20(sp)
   17a8c:	df000415 	stw	fp,16(sp)
   17a90:	df000404 	addi	fp,sp,16
   17a94:	e13ffe15 	stw	r4,-8(fp)
   17a98:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   17a9c:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   17aa0:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   17aa4:	e0bffc17 	ldw	r2,-16(fp)
   17aa8:	10800044 	addi	r2,r2,1
   17aac:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   17ab0:	e0bffe17 	ldw	r2,-8(fp)
   17ab4:	10800a17 	ldw	r2,40(r2)
   17ab8:	10800037 	ldwio	r2,0(r2)
   17abc:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   17ac0:	e13ffd17 	ldw	r4,-12(fp)
   17ac4:	00177600 	call	17760 <read_data_valid>
   17ac8:	10803fcc 	andi	r2,r2,255
   17acc:	10000726 	beq	r2,zero,17aec <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   17ad0:	e13ffd17 	ldw	r4,-12(fp)
   17ad4:	00177940 	call	17794 <read_data_byte>
   17ad8:	1007883a 	mov	r3,r2
   17adc:	e0bfff17 	ldw	r2,-4(fp)
   17ae0:	10c00005 	stb	r3,0(r2)
			return 0;
   17ae4:	0005883a 	mov	r2,zero
   17ae8:	00000806 	br	17b0c <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   17aec:	e0bffe17 	ldw	r2,-8(fp)
   17af0:	10800c17 	ldw	r2,48(r2)
   17af4:	103feb26 	beq	r2,zero,17aa4 <alt_up_ps2_read_data_byte_timeout+0x20>
   17af8:	e0bffe17 	ldw	r2,-8(fp)
   17afc:	10c00c17 	ldw	r3,48(r2)
   17b00:	e0bffc17 	ldw	r2,-16(fp)
   17b04:	18bfe72e 	bgeu	r3,r2,17aa4 <alt_up_ps2_read_data_byte_timeout+0x20>
		{
			return -ETIMEDOUT;
   17b08:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   17b0c:	e037883a 	mov	sp,fp
   17b10:	dfc00117 	ldw	ra,4(sp)
   17b14:	df000017 	ldw	fp,0(sp)
   17b18:	dec00204 	addi	sp,sp,8
   17b1c:	f800283a 	ret

00017b20 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   17b20:	defffb04 	addi	sp,sp,-20
   17b24:	dfc00415 	stw	ra,16(sp)
   17b28:	df000315 	stw	fp,12(sp)
   17b2c:	df000304 	addi	fp,sp,12
   17b30:	e13ffe15 	stw	r4,-8(fp)
   17b34:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   17b38:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   17b3c:	e0bffe17 	ldw	r2,-8(fp)
   17b40:	10800a17 	ldw	r2,40(r2)
   17b44:	10800037 	ldwio	r2,0(r2)
   17b48:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   17b4c:	e13ffd17 	ldw	r4,-12(fp)
   17b50:	00177600 	call	17760 <read_data_valid>
   17b54:	10803fcc 	andi	r2,r2,255
   17b58:	10000726 	beq	r2,zero,17b78 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   17b5c:	e13ffd17 	ldw	r4,-12(fp)
   17b60:	00177940 	call	17794 <read_data_byte>
   17b64:	1007883a 	mov	r3,r2
   17b68:	e0bfff17 	ldw	r2,-4(fp)
   17b6c:	10c00005 	stb	r3,0(r2)
		return 0;
   17b70:	0005883a 	mov	r2,zero
   17b74:	00000106 	br	17b7c <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   17b78:	00bfffc4 	movi	r2,-1
}
   17b7c:	e037883a 	mov	sp,fp
   17b80:	dfc00117 	ldw	ra,4(sp)
   17b84:	df000017 	ldw	fp,0(sp)
   17b88:	dec00204 	addi	sp,sp,8
   17b8c:	f800283a 	ret

00017b90 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   17b90:	defffb04 	addi	sp,sp,-20
   17b94:	dfc00415 	stw	ra,16(sp)
   17b98:	df000315 	stw	fp,12(sp)
   17b9c:	df000304 	addi	fp,sp,12
   17ba0:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   17ba4:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   17ba8:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   17bac:	e0bfff17 	ldw	r2,-4(fp)
   17bb0:	10800a17 	ldw	r2,40(r2)
   17bb4:	10800037 	ldwio	r2,0(r2)
   17bb8:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   17bbc:	e13ffe17 	ldw	r4,-8(fp)
   17bc0:	00177300 	call	17730 <read_num_bytes_available>
   17bc4:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   17bc8:	e0bffd0b 	ldhu	r2,-12(fp)
   17bcc:	103ff71e 	bne	r2,zero,17bac <alt_up_ps2_clear_fifo+0x1c>
}
   17bd0:	0001883a 	nop
   17bd4:	e037883a 	mov	sp,fp
   17bd8:	dfc00117 	ldw	ra,4(sp)
   17bdc:	df000017 	ldw	fp,0(sp)
   17be0:	dec00204 	addi	sp,sp,8
   17be4:	f800283a 	ret

00017be8 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   17be8:	defff804 	addi	sp,sp,-32
   17bec:	dfc00715 	stw	ra,28(sp)
   17bf0:	df000615 	stw	fp,24(sp)
   17bf4:	df000604 	addi	fp,sp,24
   17bf8:	e13ffd15 	stw	r4,-12(fp)
   17bfc:	e17ffe15 	stw	r5,-8(fp)
   17c00:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   17c04:	e0bffd17 	ldw	r2,-12(fp)
   17c08:	10800017 	ldw	r2,0(r2)
   17c0c:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   17c10:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   17c14:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   17c18:	e0fffc17 	ldw	r3,-16(fp)
   17c1c:	e0bfff17 	ldw	r2,-4(fp)
   17c20:	18bffd16 	blt	r3,r2,17c18 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   17c24:	e0bffe17 	ldw	r2,-8(fp)
   17c28:	10c00044 	addi	r3,r2,1
   17c2c:	e0fffe15 	stw	r3,-8(fp)
   17c30:	100b883a 	mov	r5,r2
   17c34:	e13ffa17 	ldw	r4,-24(fp)
   17c38:	0017a840 	call	17a84 <alt_up_ps2_read_data_byte_timeout>
   17c3c:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   17c40:	e0bffb17 	ldw	r2,-20(fp)
   17c44:	10000226 	beq	r2,zero,17c50 <alt_up_ps2_read_fd+0x68>
			return count;
   17c48:	e0bffc17 	ldw	r2,-16(fp)
   17c4c:	00000406 	br	17c60 <alt_up_ps2_read_fd+0x78>
		count++;
   17c50:	e0bffc17 	ldw	r2,-16(fp)
   17c54:	10800044 	addi	r2,r2,1
   17c58:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   17c5c:	e0bffc17 	ldw	r2,-16(fp)
}
   17c60:	e037883a 	mov	sp,fp
   17c64:	dfc00117 	ldw	ra,4(sp)
   17c68:	df000017 	ldw	fp,0(sp)
   17c6c:	dec00204 	addi	sp,sp,8
   17c70:	f800283a 	ret

00017c74 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   17c74:	defff804 	addi	sp,sp,-32
   17c78:	dfc00715 	stw	ra,28(sp)
   17c7c:	df000615 	stw	fp,24(sp)
   17c80:	df000604 	addi	fp,sp,24
   17c84:	e13ffd15 	stw	r4,-12(fp)
   17c88:	e17ffe15 	stw	r5,-8(fp)
   17c8c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   17c90:	e0bffd17 	ldw	r2,-12(fp)
   17c94:	10800017 	ldw	r2,0(r2)
   17c98:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   17c9c:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   17ca0:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   17ca4:	00001006 	br	17ce8 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   17ca8:	e0bffe17 	ldw	r2,-8(fp)
   17cac:	10c00044 	addi	r3,r2,1
   17cb0:	e0fffe15 	stw	r3,-8(fp)
   17cb4:	10800003 	ldbu	r2,0(r2)
   17cb8:	10803fcc 	andi	r2,r2,255
   17cbc:	100b883a 	mov	r5,r2
   17cc0:	e13ffb17 	ldw	r4,-20(fp)
   17cc4:	00179440 	call	17944 <alt_up_ps2_write_data_byte>
   17cc8:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   17ccc:	e0bffc17 	ldw	r2,-16(fp)
   17cd0:	10000226 	beq	r2,zero,17cdc <alt_up_ps2_write_fd+0x68>
			return count;
   17cd4:	e0bffa17 	ldw	r2,-24(fp)
   17cd8:	00000706 	br	17cf8 <alt_up_ps2_write_fd+0x84>
		count++;
   17cdc:	e0bffa17 	ldw	r2,-24(fp)
   17ce0:	10800044 	addi	r2,r2,1
   17ce4:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   17ce8:	e0fffa17 	ldw	r3,-24(fp)
   17cec:	e0bfff17 	ldw	r2,-4(fp)
   17cf0:	18bfed16 	blt	r3,r2,17ca8 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   17cf4:	e0bffa17 	ldw	r2,-24(fp)
}
   17cf8:	e037883a 	mov	sp,fp
   17cfc:	dfc00117 	ldw	ra,4(sp)
   17d00:	df000017 	ldw	fp,0(sp)
   17d04:	dec00204 	addi	sp,sp,8
   17d08:	f800283a 	ret

00017d0c <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   17d0c:	defffc04 	addi	sp,sp,-16
   17d10:	dfc00315 	stw	ra,12(sp)
   17d14:	df000215 	stw	fp,8(sp)
   17d18:	df000204 	addi	fp,sp,8
   17d1c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   17d20:	014000b4 	movhi	r5,2
   17d24:	296e6d04 	addi	r5,r5,-17996
   17d28:	e13fff17 	ldw	r4,-4(fp)
   17d2c:	00183f40 	call	183f4 <alt_find_dev>
   17d30:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17d34:	e0bffe17 	ldw	r2,-8(fp)
}
   17d38:	e037883a 	mov	sp,fp
   17d3c:	dfc00117 	ldw	ra,4(sp)
   17d40:	df000017 	ldw	fp,0(sp)
   17d44:	dec00204 	addi	sp,sp,8
   17d48:	f800283a 	ret

00017d4c <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   17d4c:	defffd04 	addi	sp,sp,-12
   17d50:	df000215 	stw	fp,8(sp)
   17d54:	df000204 	addi	fp,sp,8
   17d58:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   17d5c:	e0bfff17 	ldw	r2,-4(fp)
   17d60:	10800a17 	ldw	r2,40(r2)
   17d64:	10800104 	addi	r2,r2,4
   17d68:	10800037 	ldwio	r2,0(r2)
   17d6c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   17d70:	e0bffe17 	ldw	r2,-8(fp)
   17d74:	10800054 	ori	r2,r2,1
   17d78:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   17d7c:	e0bfff17 	ldw	r2,-4(fp)
   17d80:	10800a17 	ldw	r2,40(r2)
   17d84:	10800104 	addi	r2,r2,4
   17d88:	1007883a 	mov	r3,r2
   17d8c:	e0bffe17 	ldw	r2,-8(fp)
   17d90:	18800035 	stwio	r2,0(r3)
}
   17d94:	0001883a 	nop
   17d98:	e037883a 	mov	sp,fp
   17d9c:	df000017 	ldw	fp,0(sp)
   17da0:	dec00104 	addi	sp,sp,4
   17da4:	f800283a 	ret

00017da8 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   17da8:	defffd04 	addi	sp,sp,-12
   17dac:	df000215 	stw	fp,8(sp)
   17db0:	df000204 	addi	fp,sp,8
   17db4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   17db8:	e0bfff17 	ldw	r2,-4(fp)
   17dbc:	10800a17 	ldw	r2,40(r2)
   17dc0:	10800104 	addi	r2,r2,4
   17dc4:	10800037 	ldwio	r2,0(r2)
   17dc8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   17dcc:	e0fffe17 	ldw	r3,-8(fp)
   17dd0:	00bfff84 	movi	r2,-2
   17dd4:	1884703a 	and	r2,r3,r2
   17dd8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   17ddc:	e0bfff17 	ldw	r2,-4(fp)
   17de0:	10800a17 	ldw	r2,40(r2)
   17de4:	10800104 	addi	r2,r2,4
   17de8:	1007883a 	mov	r3,r2
   17dec:	e0bffe17 	ldw	r2,-8(fp)
   17df0:	18800035 	stwio	r2,0(r3)
}
   17df4:	0001883a 	nop
   17df8:	e037883a 	mov	sp,fp
   17dfc:	df000017 	ldw	fp,0(sp)
   17e00:	dec00104 	addi	sp,sp,4
   17e04:	f800283a 	ret

00017e08 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   17e08:	defffd04 	addi	sp,sp,-12
   17e0c:	df000215 	stw	fp,8(sp)
   17e10:	df000204 	addi	fp,sp,8
   17e14:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   17e18:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   17e1c:	e0bfff17 	ldw	r2,-4(fp)
   17e20:	10800a17 	ldw	r2,40(r2)
   17e24:	10800084 	addi	r2,r2,2
   17e28:	1080002b 	ldhuio	r2,0(r2)
   17e2c:	10bfffcc 	andi	r2,r2,65535
   17e30:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   17e34:	e0bffe0b 	ldhu	r2,-8(fp)
}
   17e38:	e037883a 	mov	sp,fp
   17e3c:	df000017 	ldw	fp,0(sp)
   17e40:	dec00104 	addi	sp,sp,4
   17e44:	f800283a 	ret

00017e48 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   17e48:	defffd04 	addi	sp,sp,-12
   17e4c:	df000215 	stw	fp,8(sp)
   17e50:	df000204 	addi	fp,sp,8
   17e54:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   17e58:	e0bfff17 	ldw	r2,-4(fp)
   17e5c:	10800a17 	ldw	r2,40(r2)
   17e60:	10800104 	addi	r2,r2,4
   17e64:	10800037 	ldwio	r2,0(r2)
   17e68:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   17e6c:	e0bffe17 	ldw	r2,-8(fp)
   17e70:	1004d43a 	srli	r2,r2,16
}
   17e74:	e037883a 	mov	sp,fp
   17e78:	df000017 	ldw	fp,0(sp)
   17e7c:	dec00104 	addi	sp,sp,4
   17e80:	f800283a 	ret

00017e84 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   17e84:	defffd04 	addi	sp,sp,-12
   17e88:	df000215 	stw	fp,8(sp)
   17e8c:	df000204 	addi	fp,sp,8
   17e90:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   17e94:	e0bfff17 	ldw	r2,-4(fp)
   17e98:	1080800c 	andi	r2,r2,512
   17e9c:	1004d27a 	srli	r2,r2,9
   17ea0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   17ea4:	e0bffe17 	ldw	r2,-8(fp)
   17ea8:	10000226 	beq	r2,zero,17eb4 <alt_up_rs232_check_parity+0x30>
   17eac:	00bfffc4 	movi	r2,-1
   17eb0:	00000106 	br	17eb8 <alt_up_rs232_check_parity+0x34>
   17eb4:	0005883a 	mov	r2,zero
}
   17eb8:	e037883a 	mov	sp,fp
   17ebc:	df000017 	ldw	fp,0(sp)
   17ec0:	dec00104 	addi	sp,sp,4
   17ec4:	f800283a 	ret

00017ec8 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   17ec8:	defffd04 	addi	sp,sp,-12
   17ecc:	df000215 	stw	fp,8(sp)
   17ed0:	df000204 	addi	fp,sp,8
   17ed4:	e13ffe15 	stw	r4,-8(fp)
   17ed8:	2805883a 	mov	r2,r5
   17edc:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   17ee0:	e0bffe17 	ldw	r2,-8(fp)
   17ee4:	10800a17 	ldw	r2,40(r2)
   17ee8:	1007883a 	mov	r3,r2
   17eec:	e0bfff03 	ldbu	r2,-4(fp)
   17ef0:	18800035 	stwio	r2,0(r3)
	return 0;
   17ef4:	0005883a 	mov	r2,zero
}
   17ef8:	e037883a 	mov	sp,fp
   17efc:	df000017 	ldw	fp,0(sp)
   17f00:	dec00104 	addi	sp,sp,4
   17f04:	f800283a 	ret

00017f08 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   17f08:	defffa04 	addi	sp,sp,-24
   17f0c:	dfc00515 	stw	ra,20(sp)
   17f10:	df000415 	stw	fp,16(sp)
   17f14:	df000404 	addi	fp,sp,16
   17f18:	e13ffd15 	stw	r4,-12(fp)
   17f1c:	e17ffe15 	stw	r5,-8(fp)
   17f20:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   17f24:	e0bffd17 	ldw	r2,-12(fp)
   17f28:	10800a17 	ldw	r2,40(r2)
   17f2c:	10800037 	ldwio	r2,0(r2)
   17f30:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   17f34:	e0bffc17 	ldw	r2,-16(fp)
   17f38:	1007883a 	mov	r3,r2
   17f3c:	e0bffe17 	ldw	r2,-8(fp)
   17f40:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   17f44:	e13ffc17 	ldw	r4,-16(fp)
   17f48:	0017e840 	call	17e84 <alt_up_rs232_check_parity>
   17f4c:	1007883a 	mov	r3,r2
   17f50:	e0bfff17 	ldw	r2,-4(fp)
   17f54:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   17f58:	e0bffc17 	ldw	r2,-16(fp)
   17f5c:	10a0000c 	andi	r2,r2,32768
   17f60:	1004d3fa 	srli	r2,r2,15
   17f64:	10bfffc4 	addi	r2,r2,-1
}
   17f68:	e037883a 	mov	sp,fp
   17f6c:	dfc00117 	ldw	ra,4(sp)
   17f70:	df000017 	ldw	fp,0(sp)
   17f74:	dec00204 	addi	sp,sp,8
   17f78:	f800283a 	ret

00017f7c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   17f7c:	defff804 	addi	sp,sp,-32
   17f80:	dfc00715 	stw	ra,28(sp)
   17f84:	df000615 	stw	fp,24(sp)
   17f88:	df000604 	addi	fp,sp,24
   17f8c:	e13ffd15 	stw	r4,-12(fp)
   17f90:	e17ffe15 	stw	r5,-8(fp)
   17f94:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   17f98:	e0bffd17 	ldw	r2,-12(fp)
   17f9c:	10800017 	ldw	r2,0(r2)
   17fa0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   17fa4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   17fa8:	00000c06 	br	17fdc <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   17fac:	e0bffe17 	ldw	r2,-8(fp)
   17fb0:	10c00044 	addi	r3,r2,1
   17fb4:	e0fffe15 	stw	r3,-8(fp)
   17fb8:	e0fffc04 	addi	r3,fp,-16
   17fbc:	180d883a 	mov	r6,r3
   17fc0:	100b883a 	mov	r5,r2
   17fc4:	e13ffb17 	ldw	r4,-20(fp)
   17fc8:	0017f080 	call	17f08 <alt_up_rs232_read_data>
   17fcc:	1000081e 	bne	r2,zero,17ff0 <alt_up_rs232_read_fd+0x74>
			count++;
   17fd0:	e0bffa17 	ldw	r2,-24(fp)
   17fd4:	10800044 	addi	r2,r2,1
   17fd8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   17fdc:	e0bfff17 	ldw	r2,-4(fp)
   17fe0:	10ffffc4 	addi	r3,r2,-1
   17fe4:	e0ffff15 	stw	r3,-4(fp)
   17fe8:	103ff01e 	bne	r2,zero,17fac <alt_up_rs232_read_fd+0x30>
   17fec:	00000106 	br	17ff4 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   17ff0:	0001883a 	nop
	}
	return count;
   17ff4:	e0bffa17 	ldw	r2,-24(fp)
}
   17ff8:	e037883a 	mov	sp,fp
   17ffc:	dfc00117 	ldw	ra,4(sp)
   18000:	df000017 	ldw	fp,0(sp)
   18004:	dec00204 	addi	sp,sp,8
   18008:	f800283a 	ret

0001800c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1800c:	defff904 	addi	sp,sp,-28
   18010:	dfc00615 	stw	ra,24(sp)
   18014:	df000515 	stw	fp,20(sp)
   18018:	df000504 	addi	fp,sp,20
   1801c:	e13ffd15 	stw	r4,-12(fp)
   18020:	e17ffe15 	stw	r5,-8(fp)
   18024:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   18028:	e0bffd17 	ldw	r2,-12(fp)
   1802c:	10800017 	ldw	r2,0(r2)
   18030:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   18034:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   18038:	00000d06 	br	18070 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1803c:	e0bffe17 	ldw	r2,-8(fp)
   18040:	10800003 	ldbu	r2,0(r2)
   18044:	10803fcc 	andi	r2,r2,255
   18048:	100b883a 	mov	r5,r2
   1804c:	e13ffc17 	ldw	r4,-16(fp)
   18050:	0017ec80 	call	17ec8 <alt_up_rs232_write_data>
   18054:	10000b1e 	bne	r2,zero,18084 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   18058:	e0bffb17 	ldw	r2,-20(fp)
   1805c:	10800044 	addi	r2,r2,1
   18060:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   18064:	e0bffe17 	ldw	r2,-8(fp)
   18068:	10800044 	addi	r2,r2,1
   1806c:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   18070:	e0bfff17 	ldw	r2,-4(fp)
   18074:	10ffffc4 	addi	r3,r2,-1
   18078:	e0ffff15 	stw	r3,-4(fp)
   1807c:	103fef1e 	bne	r2,zero,1803c <alt_up_rs232_write_fd+0x30>
   18080:	00000106 	br	18088 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   18084:	0001883a 	nop
	}
	return count;
   18088:	e0bffb17 	ldw	r2,-20(fp)
}
   1808c:	e037883a 	mov	sp,fp
   18090:	dfc00117 	ldw	ra,4(sp)
   18094:	df000017 	ldw	fp,0(sp)
   18098:	dec00204 	addi	sp,sp,8
   1809c:	f800283a 	ret

000180a0 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   180a0:	defffc04 	addi	sp,sp,-16
   180a4:	dfc00315 	stw	ra,12(sp)
   180a8:	df000215 	stw	fp,8(sp)
   180ac:	df000204 	addi	fp,sp,8
   180b0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   180b4:	014000b4 	movhi	r5,2
   180b8:	296e6d04 	addi	r5,r5,-17996
   180bc:	e13fff17 	ldw	r4,-4(fp)
   180c0:	00183f40 	call	183f4 <alt_find_dev>
   180c4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   180c8:	e0bffe17 	ldw	r2,-8(fp)
}
   180cc:	e037883a 	mov	sp,fp
   180d0:	dfc00117 	ldw	ra,4(sp)
   180d4:	df000017 	ldw	fp,0(sp)
   180d8:	dec00204 	addi	sp,sp,8
   180dc:	f800283a 	ret

000180e0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   180e0:	defff504 	addi	sp,sp,-44
   180e4:	df000a15 	stw	fp,40(sp)
   180e8:	df000a04 	addi	fp,sp,40
   180ec:	e13ffc15 	stw	r4,-16(fp)
   180f0:	e17ffd15 	stw	r5,-12(fp)
   180f4:	e1bffe15 	stw	r6,-8(fp)
   180f8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   180fc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   18100:	008000b4 	movhi	r2,2
   18104:	10b66f04 	addi	r2,r2,-9796
   18108:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1810c:	10003f26 	beq	r2,zero,1820c <alt_alarm_start+0x12c>
  {
    if (alarm)
   18110:	e0bffc17 	ldw	r2,-16(fp)
   18114:	10003b26 	beq	r2,zero,18204 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   18118:	e0bffc17 	ldw	r2,-16(fp)
   1811c:	e0fffe17 	ldw	r3,-8(fp)
   18120:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   18124:	e0bffc17 	ldw	r2,-16(fp)
   18128:	e0ffff17 	ldw	r3,-4(fp)
   1812c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18130:	0005303a 	rdctl	r2,status
   18134:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18138:	e0fff917 	ldw	r3,-28(fp)
   1813c:	00bfff84 	movi	r2,-2
   18140:	1884703a 	and	r2,r3,r2
   18144:	1001703a 	wrctl	status,r2
  
  return context;
   18148:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1814c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   18150:	008000b4 	movhi	r2,2
   18154:	10b67004 	addi	r2,r2,-9792
   18158:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1815c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   18160:	e0fffd17 	ldw	r3,-12(fp)
   18164:	e0bff617 	ldw	r2,-40(fp)
   18168:	1885883a 	add	r2,r3,r2
   1816c:	10c00044 	addi	r3,r2,1
   18170:	e0bffc17 	ldw	r2,-16(fp)
   18174:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   18178:	e0bffc17 	ldw	r2,-16(fp)
   1817c:	10c00217 	ldw	r3,8(r2)
   18180:	e0bff617 	ldw	r2,-40(fp)
   18184:	1880042e 	bgeu	r3,r2,18198 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   18188:	e0bffc17 	ldw	r2,-16(fp)
   1818c:	00c00044 	movi	r3,1
   18190:	10c00405 	stb	r3,16(r2)
   18194:	00000206 	br	181a0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   18198:	e0bffc17 	ldw	r2,-16(fp)
   1819c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   181a0:	e0fffc17 	ldw	r3,-16(fp)
   181a4:	008000b4 	movhi	r2,2
   181a8:	10ae9204 	addi	r2,r2,-17848
   181ac:	e0bffa15 	stw	r2,-24(fp)
   181b0:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   181b4:	e0bffb17 	ldw	r2,-20(fp)
   181b8:	e0fffa17 	ldw	r3,-24(fp)
   181bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   181c0:	e0bffa17 	ldw	r2,-24(fp)
   181c4:	10c00017 	ldw	r3,0(r2)
   181c8:	e0bffb17 	ldw	r2,-20(fp)
   181cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   181d0:	e0bffa17 	ldw	r2,-24(fp)
   181d4:	10800017 	ldw	r2,0(r2)
   181d8:	e0fffb17 	ldw	r3,-20(fp)
   181dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   181e0:	e0bffa17 	ldw	r2,-24(fp)
   181e4:	e0fffb17 	ldw	r3,-20(fp)
   181e8:	10c00015 	stw	r3,0(r2)
   181ec:	e0bff817 	ldw	r2,-32(fp)
   181f0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   181f4:	e0bff717 	ldw	r2,-36(fp)
   181f8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   181fc:	0005883a 	mov	r2,zero
   18200:	00000306 	br	18210 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   18204:	00bffa84 	movi	r2,-22
   18208:	00000106 	br	18210 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1820c:	00bfde84 	movi	r2,-134
  }
}
   18210:	e037883a 	mov	sp,fp
   18214:	df000017 	ldw	fp,0(sp)
   18218:	dec00104 	addi	sp,sp,4
   1821c:	f800283a 	ret

00018220 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   18220:	deffff04 	addi	sp,sp,-4
   18224:	df000015 	stw	fp,0(sp)
   18228:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1822c:	0001883a 	nop
   18230:	e037883a 	mov	sp,fp
   18234:	df000017 	ldw	fp,0(sp)
   18238:	dec00104 	addi	sp,sp,4
   1823c:	f800283a 	ret

00018240 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18240:	defffe04 	addi	sp,sp,-8
   18244:	dfc00115 	stw	ra,4(sp)
   18248:	df000015 	stw	fp,0(sp)
   1824c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18250:	008000b4 	movhi	r2,2
   18254:	10ae7004 	addi	r2,r2,-17984
   18258:	10800017 	ldw	r2,0(r2)
   1825c:	10000526 	beq	r2,zero,18274 <alt_get_errno+0x34>
   18260:	008000b4 	movhi	r2,2
   18264:	10ae7004 	addi	r2,r2,-17984
   18268:	10800017 	ldw	r2,0(r2)
   1826c:	103ee83a 	callr	r2
   18270:	00000206 	br	1827c <alt_get_errno+0x3c>
   18274:	008000b4 	movhi	r2,2
   18278:	10b65104 	addi	r2,r2,-9916
}
   1827c:	e037883a 	mov	sp,fp
   18280:	dfc00117 	ldw	ra,4(sp)
   18284:	df000017 	ldw	fp,0(sp)
   18288:	dec00204 	addi	sp,sp,8
   1828c:	f800283a 	ret

00018290 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   18290:	defffa04 	addi	sp,sp,-24
   18294:	dfc00515 	stw	ra,20(sp)
   18298:	df000415 	stw	fp,16(sp)
   1829c:	df000404 	addi	fp,sp,16
   182a0:	e13ffe15 	stw	r4,-8(fp)
   182a4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   182a8:	e0bffe17 	ldw	r2,-8(fp)
   182ac:	10000326 	beq	r2,zero,182bc <alt_dev_llist_insert+0x2c>
   182b0:	e0bffe17 	ldw	r2,-8(fp)
   182b4:	10800217 	ldw	r2,8(r2)
   182b8:	1000061e 	bne	r2,zero,182d4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   182bc:	00182400 	call	18240 <alt_get_errno>
   182c0:	1007883a 	mov	r3,r2
   182c4:	00800584 	movi	r2,22
   182c8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   182cc:	00bffa84 	movi	r2,-22
   182d0:	00001306 	br	18320 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   182d4:	e0bffe17 	ldw	r2,-8(fp)
   182d8:	e0ffff17 	ldw	r3,-4(fp)
   182dc:	e0fffc15 	stw	r3,-16(fp)
   182e0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   182e4:	e0bffd17 	ldw	r2,-12(fp)
   182e8:	e0fffc17 	ldw	r3,-16(fp)
   182ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   182f0:	e0bffc17 	ldw	r2,-16(fp)
   182f4:	10c00017 	ldw	r3,0(r2)
   182f8:	e0bffd17 	ldw	r2,-12(fp)
   182fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   18300:	e0bffc17 	ldw	r2,-16(fp)
   18304:	10800017 	ldw	r2,0(r2)
   18308:	e0fffd17 	ldw	r3,-12(fp)
   1830c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   18310:	e0bffc17 	ldw	r2,-16(fp)
   18314:	e0fffd17 	ldw	r3,-12(fp)
   18318:	10c00015 	stw	r3,0(r2)

  return 0;  
   1831c:	0005883a 	mov	r2,zero
}
   18320:	e037883a 	mov	sp,fp
   18324:	dfc00117 	ldw	ra,4(sp)
   18328:	df000017 	ldw	fp,0(sp)
   1832c:	dec00204 	addi	sp,sp,8
   18330:	f800283a 	ret

00018334 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   18334:	defffd04 	addi	sp,sp,-12
   18338:	dfc00215 	stw	ra,8(sp)
   1833c:	df000115 	stw	fp,4(sp)
   18340:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   18344:	008000b4 	movhi	r2,2
   18348:	10a58404 	addi	r2,r2,-27120
   1834c:	e0bfff15 	stw	r2,-4(fp)
   18350:	00000606 	br	1836c <_do_ctors+0x38>
        (*ctor) (); 
   18354:	e0bfff17 	ldw	r2,-4(fp)
   18358:	10800017 	ldw	r2,0(r2)
   1835c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   18360:	e0bfff17 	ldw	r2,-4(fp)
   18364:	10bfff04 	addi	r2,r2,-4
   18368:	e0bfff15 	stw	r2,-4(fp)
   1836c:	e0ffff17 	ldw	r3,-4(fp)
   18370:	008000b4 	movhi	r2,2
   18374:	10a58504 	addi	r2,r2,-27116
   18378:	18bff62e 	bgeu	r3,r2,18354 <_do_ctors+0x20>
        (*ctor) (); 
}
   1837c:	0001883a 	nop
   18380:	e037883a 	mov	sp,fp
   18384:	dfc00117 	ldw	ra,4(sp)
   18388:	df000017 	ldw	fp,0(sp)
   1838c:	dec00204 	addi	sp,sp,8
   18390:	f800283a 	ret

00018394 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   18394:	defffd04 	addi	sp,sp,-12
   18398:	dfc00215 	stw	ra,8(sp)
   1839c:	df000115 	stw	fp,4(sp)
   183a0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   183a4:	008000b4 	movhi	r2,2
   183a8:	10a58404 	addi	r2,r2,-27120
   183ac:	e0bfff15 	stw	r2,-4(fp)
   183b0:	00000606 	br	183cc <_do_dtors+0x38>
        (*dtor) (); 
   183b4:	e0bfff17 	ldw	r2,-4(fp)
   183b8:	10800017 	ldw	r2,0(r2)
   183bc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   183c0:	e0bfff17 	ldw	r2,-4(fp)
   183c4:	10bfff04 	addi	r2,r2,-4
   183c8:	e0bfff15 	stw	r2,-4(fp)
   183cc:	e0ffff17 	ldw	r3,-4(fp)
   183d0:	008000b4 	movhi	r2,2
   183d4:	10a58504 	addi	r2,r2,-27116
   183d8:	18bff62e 	bgeu	r3,r2,183b4 <_do_dtors+0x20>
        (*dtor) (); 
}
   183dc:	0001883a 	nop
   183e0:	e037883a 	mov	sp,fp
   183e4:	dfc00117 	ldw	ra,4(sp)
   183e8:	df000017 	ldw	fp,0(sp)
   183ec:	dec00204 	addi	sp,sp,8
   183f0:	f800283a 	ret

000183f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   183f4:	defffa04 	addi	sp,sp,-24
   183f8:	dfc00515 	stw	ra,20(sp)
   183fc:	df000415 	stw	fp,16(sp)
   18400:	df000404 	addi	fp,sp,16
   18404:	e13ffe15 	stw	r4,-8(fp)
   18408:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1840c:	e0bfff17 	ldw	r2,-4(fp)
   18410:	10800017 	ldw	r2,0(r2)
   18414:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   18418:	e13ffe17 	ldw	r4,-8(fp)
   1841c:	0006e500 	call	6e50 <strlen>
   18420:	10800044 	addi	r2,r2,1
   18424:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18428:	00000d06 	br	18460 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1842c:	e0bffc17 	ldw	r2,-16(fp)
   18430:	10800217 	ldw	r2,8(r2)
   18434:	e0fffd17 	ldw	r3,-12(fp)
   18438:	180d883a 	mov	r6,r3
   1843c:	e17ffe17 	ldw	r5,-8(fp)
   18440:	1009883a 	mov	r4,r2
   18444:	00192c40 	call	192c4 <memcmp>
   18448:	1000021e 	bne	r2,zero,18454 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1844c:	e0bffc17 	ldw	r2,-16(fp)
   18450:	00000706 	br	18470 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   18454:	e0bffc17 	ldw	r2,-16(fp)
   18458:	10800017 	ldw	r2,0(r2)
   1845c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18460:	e0fffc17 	ldw	r3,-16(fp)
   18464:	e0bfff17 	ldw	r2,-4(fp)
   18468:	18bff01e 	bne	r3,r2,1842c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1846c:	0005883a 	mov	r2,zero
}
   18470:	e037883a 	mov	sp,fp
   18474:	dfc00117 	ldw	ra,4(sp)
   18478:	df000017 	ldw	fp,0(sp)
   1847c:	dec00204 	addi	sp,sp,8
   18480:	f800283a 	ret

00018484 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   18484:	defffe04 	addi	sp,sp,-8
   18488:	dfc00115 	stw	ra,4(sp)
   1848c:	df000015 	stw	fp,0(sp)
   18490:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   18494:	01440004 	movi	r5,4096
   18498:	0009883a 	mov	r4,zero
   1849c:	001914c0 	call	1914c <alt_icache_flush>
#endif
}
   184a0:	0001883a 	nop
   184a4:	e037883a 	mov	sp,fp
   184a8:	dfc00117 	ldw	ra,4(sp)
   184ac:	df000017 	ldw	fp,0(sp)
   184b0:	dec00204 	addi	sp,sp,8
   184b4:	f800283a 	ret

000184b8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   184b8:	defff904 	addi	sp,sp,-28
   184bc:	dfc00615 	stw	ra,24(sp)
   184c0:	df000515 	stw	fp,20(sp)
   184c4:	df000504 	addi	fp,sp,20
   184c8:	e13ffc15 	stw	r4,-16(fp)
   184cc:	e17ffd15 	stw	r5,-12(fp)
   184d0:	e1bffe15 	stw	r6,-8(fp)
   184d4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   184d8:	e1bfff17 	ldw	r6,-4(fp)
   184dc:	e17ffe17 	ldw	r5,-8(fp)
   184e0:	e13ffd17 	ldw	r4,-12(fp)
   184e4:	00188c40 	call	188c4 <open>
   184e8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   184ec:	e0bffb17 	ldw	r2,-20(fp)
   184f0:	10001c16 	blt	r2,zero,18564 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   184f4:	008000b4 	movhi	r2,2
   184f8:	10a91b04 	addi	r2,r2,-23444
   184fc:	e0fffb17 	ldw	r3,-20(fp)
   18500:	18c00324 	muli	r3,r3,12
   18504:	10c5883a 	add	r2,r2,r3
   18508:	10c00017 	ldw	r3,0(r2)
   1850c:	e0bffc17 	ldw	r2,-16(fp)
   18510:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   18514:	008000b4 	movhi	r2,2
   18518:	10a91b04 	addi	r2,r2,-23444
   1851c:	e0fffb17 	ldw	r3,-20(fp)
   18520:	18c00324 	muli	r3,r3,12
   18524:	10c5883a 	add	r2,r2,r3
   18528:	10800104 	addi	r2,r2,4
   1852c:	10c00017 	ldw	r3,0(r2)
   18530:	e0bffc17 	ldw	r2,-16(fp)
   18534:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   18538:	008000b4 	movhi	r2,2
   1853c:	10a91b04 	addi	r2,r2,-23444
   18540:	e0fffb17 	ldw	r3,-20(fp)
   18544:	18c00324 	muli	r3,r3,12
   18548:	10c5883a 	add	r2,r2,r3
   1854c:	10800204 	addi	r2,r2,8
   18550:	10c00017 	ldw	r3,0(r2)
   18554:	e0bffc17 	ldw	r2,-16(fp)
   18558:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1855c:	e13ffb17 	ldw	r4,-20(fp)
   18560:	000d4200 	call	d420 <alt_release_fd>
  }
} 
   18564:	0001883a 	nop
   18568:	e037883a 	mov	sp,fp
   1856c:	dfc00117 	ldw	ra,4(sp)
   18570:	df000017 	ldw	fp,0(sp)
   18574:	dec00204 	addi	sp,sp,8
   18578:	f800283a 	ret

0001857c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1857c:	defffb04 	addi	sp,sp,-20
   18580:	dfc00415 	stw	ra,16(sp)
   18584:	df000315 	stw	fp,12(sp)
   18588:	df000304 	addi	fp,sp,12
   1858c:	e13ffd15 	stw	r4,-12(fp)
   18590:	e17ffe15 	stw	r5,-8(fp)
   18594:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   18598:	01c07fc4 	movi	r7,511
   1859c:	01800044 	movi	r6,1
   185a0:	e17ffd17 	ldw	r5,-12(fp)
   185a4:	010000b4 	movhi	r4,2
   185a8:	21291e04 	addi	r4,r4,-23432
   185ac:	00184b80 	call	184b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   185b0:	01c07fc4 	movi	r7,511
   185b4:	000d883a 	mov	r6,zero
   185b8:	e17ffe17 	ldw	r5,-8(fp)
   185bc:	010000b4 	movhi	r4,2
   185c0:	21291b04 	addi	r4,r4,-23444
   185c4:	00184b80 	call	184b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   185c8:	01c07fc4 	movi	r7,511
   185cc:	01800044 	movi	r6,1
   185d0:	e17fff17 	ldw	r5,-4(fp)
   185d4:	010000b4 	movhi	r4,2
   185d8:	21292104 	addi	r4,r4,-23420
   185dc:	00184b80 	call	184b8 <alt_open_fd>
}  
   185e0:	0001883a 	nop
   185e4:	e037883a 	mov	sp,fp
   185e8:	dfc00117 	ldw	ra,4(sp)
   185ec:	df000017 	ldw	fp,0(sp)
   185f0:	dec00204 	addi	sp,sp,8
   185f4:	f800283a 	ret

000185f8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   185f8:	defff004 	addi	sp,sp,-64
   185fc:	df000f15 	stw	fp,60(sp)
   18600:	df000f04 	addi	fp,sp,60
   18604:	e13ffd15 	stw	r4,-12(fp)
   18608:	e17ffe15 	stw	r5,-8(fp)
   1860c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   18610:	00bffa84 	movi	r2,-22
   18614:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   18618:	e0bffd17 	ldw	r2,-12(fp)
   1861c:	10800828 	cmpgeui	r2,r2,32
   18620:	10005c1e 	bne	r2,zero,18794 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18624:	0005303a 	rdctl	r2,status
   18628:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1862c:	e0fff617 	ldw	r3,-40(fp)
   18630:	00bfff84 	movi	r2,-2
   18634:	1884703a 	and	r2,r3,r2
   18638:	1001703a 	wrctl	status,r2
  
  return context;
   1863c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   18640:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   18644:	008000b4 	movhi	r2,2
   18648:	10830804 	addi	r2,r2,3104
   1864c:	e0fffd17 	ldw	r3,-12(fp)
   18650:	180690fa 	slli	r3,r3,3
   18654:	10c5883a 	add	r2,r2,r3
   18658:	e0ffff17 	ldw	r3,-4(fp)
   1865c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   18660:	008000b4 	movhi	r2,2
   18664:	10830804 	addi	r2,r2,3104
   18668:	e0fffd17 	ldw	r3,-12(fp)
   1866c:	180690fa 	slli	r3,r3,3
   18670:	10c5883a 	add	r2,r2,r3
   18674:	10800104 	addi	r2,r2,4
   18678:	e0fffe17 	ldw	r3,-8(fp)
   1867c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   18680:	e0bfff17 	ldw	r2,-4(fp)
   18684:	10001f26 	beq	r2,zero,18704 <alt_irq_register+0x10c>
   18688:	e0bffd17 	ldw	r2,-12(fp)
   1868c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18690:	0005303a 	rdctl	r2,status
   18694:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18698:	e0fff717 	ldw	r3,-36(fp)
   1869c:	00bfff84 	movi	r2,-2
   186a0:	1884703a 	and	r2,r3,r2
   186a4:	1001703a 	wrctl	status,r2
  
  return context;
   186a8:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   186ac:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   186b0:	00c00044 	movi	r3,1
   186b4:	e0bff217 	ldw	r2,-56(fp)
   186b8:	1884983a 	sll	r2,r3,r2
   186bc:	1007883a 	mov	r3,r2
   186c0:	008000b4 	movhi	r2,2
   186c4:	10b66e04 	addi	r2,r2,-9800
   186c8:	10800017 	ldw	r2,0(r2)
   186cc:	1886b03a 	or	r3,r3,r2
   186d0:	008000b4 	movhi	r2,2
   186d4:	10b66e04 	addi	r2,r2,-9800
   186d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   186dc:	008000b4 	movhi	r2,2
   186e0:	10b66e04 	addi	r2,r2,-9800
   186e4:	10800017 	ldw	r2,0(r2)
   186e8:	100170fa 	wrctl	ienable,r2
   186ec:	e0bff817 	ldw	r2,-32(fp)
   186f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   186f4:	e0bff917 	ldw	r2,-28(fp)
   186f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   186fc:	0005883a 	mov	r2,zero
   18700:	00001f06 	br	18780 <alt_irq_register+0x188>
   18704:	e0bffd17 	ldw	r2,-12(fp)
   18708:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1870c:	0005303a 	rdctl	r2,status
   18710:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18714:	e0fffa17 	ldw	r3,-24(fp)
   18718:	00bfff84 	movi	r2,-2
   1871c:	1884703a 	and	r2,r3,r2
   18720:	1001703a 	wrctl	status,r2
  
  return context;
   18724:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   18728:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   1872c:	00c00044 	movi	r3,1
   18730:	e0bff417 	ldw	r2,-48(fp)
   18734:	1884983a 	sll	r2,r3,r2
   18738:	0084303a 	nor	r2,zero,r2
   1873c:	1007883a 	mov	r3,r2
   18740:	008000b4 	movhi	r2,2
   18744:	10b66e04 	addi	r2,r2,-9800
   18748:	10800017 	ldw	r2,0(r2)
   1874c:	1886703a 	and	r3,r3,r2
   18750:	008000b4 	movhi	r2,2
   18754:	10b66e04 	addi	r2,r2,-9800
   18758:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1875c:	008000b4 	movhi	r2,2
   18760:	10b66e04 	addi	r2,r2,-9800
   18764:	10800017 	ldw	r2,0(r2)
   18768:	100170fa 	wrctl	ienable,r2
   1876c:	e0bffb17 	ldw	r2,-20(fp)
   18770:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18774:	e0bffc17 	ldw	r2,-16(fp)
   18778:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1877c:	0005883a 	mov	r2,zero
   18780:	e0bff115 	stw	r2,-60(fp)
   18784:	e0bff317 	ldw	r2,-52(fp)
   18788:	e0bff515 	stw	r2,-44(fp)
   1878c:	e0bff517 	ldw	r2,-44(fp)
   18790:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   18794:	e0bff117 	ldw	r2,-60(fp)
}
   18798:	e037883a 	mov	sp,fp
   1879c:	df000017 	ldw	fp,0(sp)
   187a0:	dec00104 	addi	sp,sp,4
   187a4:	f800283a 	ret

000187a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   187a8:	defffe04 	addi	sp,sp,-8
   187ac:	dfc00115 	stw	ra,4(sp)
   187b0:	df000015 	stw	fp,0(sp)
   187b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   187b8:	008000b4 	movhi	r2,2
   187bc:	10ae7004 	addi	r2,r2,-17984
   187c0:	10800017 	ldw	r2,0(r2)
   187c4:	10000526 	beq	r2,zero,187dc <alt_get_errno+0x34>
   187c8:	008000b4 	movhi	r2,2
   187cc:	10ae7004 	addi	r2,r2,-17984
   187d0:	10800017 	ldw	r2,0(r2)
   187d4:	103ee83a 	callr	r2
   187d8:	00000206 	br	187e4 <alt_get_errno+0x3c>
   187dc:	008000b4 	movhi	r2,2
   187e0:	10b65104 	addi	r2,r2,-9916
}
   187e4:	e037883a 	mov	sp,fp
   187e8:	dfc00117 	ldw	ra,4(sp)
   187ec:	df000017 	ldw	fp,0(sp)
   187f0:	dec00204 	addi	sp,sp,8
   187f4:	f800283a 	ret

000187f8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   187f8:	defffd04 	addi	sp,sp,-12
   187fc:	df000215 	stw	fp,8(sp)
   18800:	df000204 	addi	fp,sp,8
   18804:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   18808:	e0bfff17 	ldw	r2,-4(fp)
   1880c:	10800217 	ldw	r2,8(r2)
   18810:	10d00034 	orhi	r3,r2,16384
   18814:	e0bfff17 	ldw	r2,-4(fp)
   18818:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1881c:	e03ffe15 	stw	zero,-8(fp)
   18820:	00001d06 	br	18898 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18824:	008000b4 	movhi	r2,2
   18828:	10a91b04 	addi	r2,r2,-23444
   1882c:	e0fffe17 	ldw	r3,-8(fp)
   18830:	18c00324 	muli	r3,r3,12
   18834:	10c5883a 	add	r2,r2,r3
   18838:	10c00017 	ldw	r3,0(r2)
   1883c:	e0bfff17 	ldw	r2,-4(fp)
   18840:	10800017 	ldw	r2,0(r2)
   18844:	1880111e 	bne	r3,r2,1888c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   18848:	008000b4 	movhi	r2,2
   1884c:	10a91b04 	addi	r2,r2,-23444
   18850:	e0fffe17 	ldw	r3,-8(fp)
   18854:	18c00324 	muli	r3,r3,12
   18858:	10c5883a 	add	r2,r2,r3
   1885c:	10800204 	addi	r2,r2,8
   18860:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18864:	1000090e 	bge	r2,zero,1888c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   18868:	e0bffe17 	ldw	r2,-8(fp)
   1886c:	10c00324 	muli	r3,r2,12
   18870:	008000b4 	movhi	r2,2
   18874:	10a91b04 	addi	r2,r2,-23444
   18878:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1887c:	e0bfff17 	ldw	r2,-4(fp)
   18880:	18800226 	beq	r3,r2,1888c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   18884:	00bffcc4 	movi	r2,-13
   18888:	00000a06 	br	188b4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1888c:	e0bffe17 	ldw	r2,-8(fp)
   18890:	10800044 	addi	r2,r2,1
   18894:	e0bffe15 	stw	r2,-8(fp)
   18898:	008000b4 	movhi	r2,2
   1889c:	10ae6f04 	addi	r2,r2,-17988
   188a0:	10800017 	ldw	r2,0(r2)
   188a4:	1007883a 	mov	r3,r2
   188a8:	e0bffe17 	ldw	r2,-8(fp)
   188ac:	18bfdd2e 	bgeu	r3,r2,18824 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   188b0:	0005883a 	mov	r2,zero
}
   188b4:	e037883a 	mov	sp,fp
   188b8:	df000017 	ldw	fp,0(sp)
   188bc:	dec00104 	addi	sp,sp,4
   188c0:	f800283a 	ret

000188c4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   188c4:	defff604 	addi	sp,sp,-40
   188c8:	dfc00915 	stw	ra,36(sp)
   188cc:	df000815 	stw	fp,32(sp)
   188d0:	df000804 	addi	fp,sp,32
   188d4:	e13ffd15 	stw	r4,-12(fp)
   188d8:	e17ffe15 	stw	r5,-8(fp)
   188dc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   188e0:	00bfffc4 	movi	r2,-1
   188e4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   188e8:	00bffb44 	movi	r2,-19
   188ec:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   188f0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   188f4:	014000b4 	movhi	r5,2
   188f8:	296e6d04 	addi	r5,r5,-17996
   188fc:	e13ffd17 	ldw	r4,-12(fp)
   18900:	00183f40 	call	183f4 <alt_find_dev>
   18904:	e0bff815 	stw	r2,-32(fp)
   18908:	e0bff817 	ldw	r2,-32(fp)
   1890c:	1000051e 	bne	r2,zero,18924 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   18910:	e13ffd17 	ldw	r4,-12(fp)
   18914:	0018f3c0 	call	18f3c <alt_find_file>
   18918:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1891c:	00800044 	movi	r2,1
   18920:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   18924:	e0bff817 	ldw	r2,-32(fp)
   18928:	10002926 	beq	r2,zero,189d0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1892c:	e13ff817 	ldw	r4,-32(fp)
   18930:	00190500 	call	19050 <alt_get_fd>
   18934:	e0bff915 	stw	r2,-28(fp)
   18938:	e0bff917 	ldw	r2,-28(fp)
   1893c:	1000030e 	bge	r2,zero,1894c <open+0x88>
    {
      status = index;
   18940:	e0bff917 	ldw	r2,-28(fp)
   18944:	e0bffa15 	stw	r2,-24(fp)
   18948:	00002306 	br	189d8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1894c:	e0bff917 	ldw	r2,-28(fp)
   18950:	10c00324 	muli	r3,r2,12
   18954:	008000b4 	movhi	r2,2
   18958:	10a91b04 	addi	r2,r2,-23444
   1895c:	1885883a 	add	r2,r3,r2
   18960:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   18964:	e0fffe17 	ldw	r3,-8(fp)
   18968:	00900034 	movhi	r2,16384
   1896c:	10bfffc4 	addi	r2,r2,-1
   18970:	1886703a 	and	r3,r3,r2
   18974:	e0bffc17 	ldw	r2,-16(fp)
   18978:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1897c:	e0bffb17 	ldw	r2,-20(fp)
   18980:	1000051e 	bne	r2,zero,18998 <open+0xd4>
   18984:	e13ffc17 	ldw	r4,-16(fp)
   18988:	00187f80 	call	187f8 <alt_file_locked>
   1898c:	e0bffa15 	stw	r2,-24(fp)
   18990:	e0bffa17 	ldw	r2,-24(fp)
   18994:	10001016 	blt	r2,zero,189d8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   18998:	e0bff817 	ldw	r2,-32(fp)
   1899c:	10800317 	ldw	r2,12(r2)
   189a0:	10000826 	beq	r2,zero,189c4 <open+0x100>
   189a4:	e0bff817 	ldw	r2,-32(fp)
   189a8:	10800317 	ldw	r2,12(r2)
   189ac:	e1ffff17 	ldw	r7,-4(fp)
   189b0:	e1bffe17 	ldw	r6,-8(fp)
   189b4:	e17ffd17 	ldw	r5,-12(fp)
   189b8:	e13ffc17 	ldw	r4,-16(fp)
   189bc:	103ee83a 	callr	r2
   189c0:	00000106 	br	189c8 <open+0x104>
   189c4:	0005883a 	mov	r2,zero
   189c8:	e0bffa15 	stw	r2,-24(fp)
   189cc:	00000206 	br	189d8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   189d0:	00bffb44 	movi	r2,-19
   189d4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   189d8:	e0bffa17 	ldw	r2,-24(fp)
   189dc:	1000090e 	bge	r2,zero,18a04 <open+0x140>
  {
    alt_release_fd (index);  
   189e0:	e13ff917 	ldw	r4,-28(fp)
   189e4:	000d4200 	call	d420 <alt_release_fd>
    ALT_ERRNO = -status;
   189e8:	00187a80 	call	187a8 <alt_get_errno>
   189ec:	1007883a 	mov	r3,r2
   189f0:	e0bffa17 	ldw	r2,-24(fp)
   189f4:	0085c83a 	sub	r2,zero,r2
   189f8:	18800015 	stw	r2,0(r3)
    return -1;
   189fc:	00bfffc4 	movi	r2,-1
   18a00:	00000106 	br	18a08 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   18a04:	e0bff917 	ldw	r2,-28(fp)
}
   18a08:	e037883a 	mov	sp,fp
   18a0c:	dfc00117 	ldw	ra,4(sp)
   18a10:	df000017 	ldw	fp,0(sp)
   18a14:	dec00204 	addi	sp,sp,8
   18a18:	f800283a 	ret

00018a1c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   18a1c:	defffa04 	addi	sp,sp,-24
   18a20:	df000515 	stw	fp,20(sp)
   18a24:	df000504 	addi	fp,sp,20
   18a28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a2c:	0005303a 	rdctl	r2,status
   18a30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18a34:	e0fffc17 	ldw	r3,-16(fp)
   18a38:	00bfff84 	movi	r2,-2
   18a3c:	1884703a 	and	r2,r3,r2
   18a40:	1001703a 	wrctl	status,r2
  
  return context;
   18a44:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   18a48:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   18a4c:	e0bfff17 	ldw	r2,-4(fp)
   18a50:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   18a54:	e0bffd17 	ldw	r2,-12(fp)
   18a58:	10800017 	ldw	r2,0(r2)
   18a5c:	e0fffd17 	ldw	r3,-12(fp)
   18a60:	18c00117 	ldw	r3,4(r3)
   18a64:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   18a68:	e0bffd17 	ldw	r2,-12(fp)
   18a6c:	10800117 	ldw	r2,4(r2)
   18a70:	e0fffd17 	ldw	r3,-12(fp)
   18a74:	18c00017 	ldw	r3,0(r3)
   18a78:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   18a7c:	e0bffd17 	ldw	r2,-12(fp)
   18a80:	e0fffd17 	ldw	r3,-12(fp)
   18a84:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   18a88:	e0bffd17 	ldw	r2,-12(fp)
   18a8c:	e0fffd17 	ldw	r3,-12(fp)
   18a90:	10c00015 	stw	r3,0(r2)
   18a94:	e0bffb17 	ldw	r2,-20(fp)
   18a98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18a9c:	e0bffe17 	ldw	r2,-8(fp)
   18aa0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   18aa4:	0001883a 	nop
   18aa8:	e037883a 	mov	sp,fp
   18aac:	df000017 	ldw	fp,0(sp)
   18ab0:	dec00104 	addi	sp,sp,4
   18ab4:	f800283a 	ret

00018ab8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   18ab8:	defffb04 	addi	sp,sp,-20
   18abc:	dfc00415 	stw	ra,16(sp)
   18ac0:	df000315 	stw	fp,12(sp)
   18ac4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   18ac8:	d0a02d17 	ldw	r2,-32588(gp)
   18acc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   18ad0:	d0a80b17 	ldw	r2,-24532(gp)
   18ad4:	10800044 	addi	r2,r2,1
   18ad8:	d0a80b15 	stw	r2,-24532(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18adc:	00002e06 	br	18b98 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   18ae0:	e0bffd17 	ldw	r2,-12(fp)
   18ae4:	10800017 	ldw	r2,0(r2)
   18ae8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   18aec:	e0bffd17 	ldw	r2,-12(fp)
   18af0:	10800403 	ldbu	r2,16(r2)
   18af4:	10803fcc 	andi	r2,r2,255
   18af8:	10000426 	beq	r2,zero,18b0c <alt_tick+0x54>
   18afc:	d0a80b17 	ldw	r2,-24532(gp)
   18b00:	1000021e 	bne	r2,zero,18b0c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   18b04:	e0bffd17 	ldw	r2,-12(fp)
   18b08:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   18b0c:	e0bffd17 	ldw	r2,-12(fp)
   18b10:	10800217 	ldw	r2,8(r2)
   18b14:	d0e80b17 	ldw	r3,-24532(gp)
   18b18:	18801d36 	bltu	r3,r2,18b90 <alt_tick+0xd8>
   18b1c:	e0bffd17 	ldw	r2,-12(fp)
   18b20:	10800403 	ldbu	r2,16(r2)
   18b24:	10803fcc 	andi	r2,r2,255
   18b28:	1000191e 	bne	r2,zero,18b90 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   18b2c:	e0bffd17 	ldw	r2,-12(fp)
   18b30:	10800317 	ldw	r2,12(r2)
   18b34:	e0fffd17 	ldw	r3,-12(fp)
   18b38:	18c00517 	ldw	r3,20(r3)
   18b3c:	1809883a 	mov	r4,r3
   18b40:	103ee83a 	callr	r2
   18b44:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   18b48:	e0bfff17 	ldw	r2,-4(fp)
   18b4c:	1000031e 	bne	r2,zero,18b5c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   18b50:	e13ffd17 	ldw	r4,-12(fp)
   18b54:	0018a1c0 	call	18a1c <alt_alarm_stop>
   18b58:	00000d06 	br	18b90 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   18b5c:	e0bffd17 	ldw	r2,-12(fp)
   18b60:	10c00217 	ldw	r3,8(r2)
   18b64:	e0bfff17 	ldw	r2,-4(fp)
   18b68:	1887883a 	add	r3,r3,r2
   18b6c:	e0bffd17 	ldw	r2,-12(fp)
   18b70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   18b74:	e0bffd17 	ldw	r2,-12(fp)
   18b78:	10c00217 	ldw	r3,8(r2)
   18b7c:	d0a80b17 	ldw	r2,-24532(gp)
   18b80:	1880032e 	bgeu	r3,r2,18b90 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   18b84:	e0bffd17 	ldw	r2,-12(fp)
   18b88:	00c00044 	movi	r3,1
   18b8c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   18b90:	e0bffe17 	ldw	r2,-8(fp)
   18b94:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18b98:	e0fffd17 	ldw	r3,-12(fp)
   18b9c:	d0a02d04 	addi	r2,gp,-32588
   18ba0:	18bfcf1e 	bne	r3,r2,18ae0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   18ba4:	000e87c0 	call	e87c <OSTimeTick>
}
   18ba8:	0001883a 	nop
   18bac:	e037883a 	mov	sp,fp
   18bb0:	dfc00117 	ldw	ra,4(sp)
   18bb4:	df000017 	ldw	fp,0(sp)
   18bb8:	dec00204 	addi	sp,sp,8
   18bbc:	f800283a 	ret

00018bc0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   18bc0:	deffff04 	addi	sp,sp,-4
   18bc4:	df000015 	stw	fp,0(sp)
   18bc8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   18bcc:	000170fa 	wrctl	ienable,zero
}
   18bd0:	0001883a 	nop
   18bd4:	e037883a 	mov	sp,fp
   18bd8:	df000017 	ldw	fp,0(sp)
   18bdc:	dec00104 	addi	sp,sp,4
   18be0:	f800283a 	ret

00018be4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   18be4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   18be8:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   18bec:	d1280417 	ldw	r4,-24560(gp)

      stw ra,  0(sp)
   18bf0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   18bf4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   18bf8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   18bfc:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   18c00:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   18c04:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   18c08:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   18c0c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   18c10:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   18c14:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   18c18:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   18c1c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   18c20:	0018e580 	call	18e58 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   18c24:	d127ff17 	ldw	r4,-24580(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   18c28:	d167f707 	ldb	r5,-24612(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   18c2c:	d1280415 	stw	r4,-24560(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   18c30:	d167f745 	stb	r5,-24611(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   18c34:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   18c38:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   18c3c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   18c40:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   18c44:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   18c48:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   18c4c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   18c50:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   18c54:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   18c58:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   18c5c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   18c60:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   18c64:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   18c68:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   18c6c:	f800283a 	ret

00018c70 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   18c70:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   18c74:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   18c78:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   18c7c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   18c80:	0018e580 	call	18e58 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   18c84:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   18c88:	d4a7f545 	stb	r18,-24619(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   18c8c:	003fe506 	br	18c24 <OSCtxSw+0x40>

00018c90 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   18c90:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   18c94:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   18c98:	10800054 	ori	r2,r2,1
      wrctl status, r2
   18c9c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   18ca0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   18ca4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   18ca8:	dec00204 	addi	sp,sp,8

      callr r2
   18cac:	103ee83a 	callr	r2

      nop
   18cb0:	0001883a 	nop

00018cb4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   18cb4:	defff704 	addi	sp,sp,-36
   18cb8:	dfc00815 	stw	ra,32(sp)
   18cbc:	df000715 	stw	fp,28(sp)
   18cc0:	df000704 	addi	fp,sp,28
   18cc4:	e13ffc15 	stw	r4,-16(fp)
   18cc8:	e17ffd15 	stw	r5,-12(fp)
   18ccc:	e1bffe15 	stw	r6,-8(fp)
   18cd0:	3805883a 	mov	r2,r7
   18cd4:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   18cd8:	e0fffe17 	ldw	r3,-8(fp)
   18cdc:	00bfff04 	movi	r2,-4
   18ce0:	1884703a 	and	r2,r3,r2
   18ce4:	10bef704 	addi	r2,r2,-1060
   18ce8:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   18cec:	01810904 	movi	r6,1060
   18cf0:	000b883a 	mov	r5,zero
   18cf4:	e13ff917 	ldw	r4,-28(fp)
   18cf8:	0005a4c0 	call	5a4c <memset>
   18cfc:	e0bff917 	ldw	r2,-28(fp)
   18d00:	10c0bb04 	addi	r3,r2,748
   18d04:	e0bff917 	ldw	r2,-28(fp)
   18d08:	10c00115 	stw	r3,4(r2)
   18d0c:	e0bff917 	ldw	r2,-28(fp)
   18d10:	10c0d504 	addi	r3,r2,852
   18d14:	e0bff917 	ldw	r2,-28(fp)
   18d18:	10c00215 	stw	r3,8(r2)
   18d1c:	e0bff917 	ldw	r2,-28(fp)
   18d20:	10c0ef04 	addi	r3,r2,956
   18d24:	e0bff917 	ldw	r2,-28(fp)
   18d28:	10c00315 	stw	r3,12(r2)
   18d2c:	e0fff917 	ldw	r3,-28(fp)
   18d30:	008000b4 	movhi	r2,2
   18d34:	10a6e304 	addi	r2,r2,-25716
   18d38:	18800d15 	stw	r2,52(r3)
   18d3c:	e0bff917 	ldw	r2,-28(fp)
   18d40:	00c00044 	movi	r3,1
   18d44:	10c02915 	stw	r3,164(r2)
   18d48:	10002a15 	stw	zero,168(r2)
   18d4c:	e0bff917 	ldw	r2,-28(fp)
   18d50:	00ccc384 	movi	r3,13070
   18d54:	10c02b0d 	sth	r3,172(r2)
   18d58:	e0bff917 	ldw	r2,-28(fp)
   18d5c:	00eaf344 	movi	r3,-21555
   18d60:	10c02b8d 	sth	r3,174(r2)
   18d64:	e0bff917 	ldw	r2,-28(fp)
   18d68:	00c48d04 	movi	r3,4660
   18d6c:	10c02c0d 	sth	r3,176(r2)
   18d70:	e0bff917 	ldw	r2,-28(fp)
   18d74:	00f99b44 	movi	r3,-6547
   18d78:	10c02c8d 	sth	r3,178(r2)
   18d7c:	e0bff917 	ldw	r2,-28(fp)
   18d80:	00f7bb04 	movi	r3,-8468
   18d84:	10c02d0d 	sth	r3,180(r2)
   18d88:	e0bff917 	ldw	r2,-28(fp)
   18d8c:	00c00144 	movi	r3,5
   18d90:	10c02d8d 	sth	r3,182(r2)
   18d94:	e0bff917 	ldw	r2,-28(fp)
   18d98:	00c002c4 	movi	r3,11
   18d9c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   18da0:	e0bff917 	ldw	r2,-28(fp)
   18da4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   18da8:	e0bffa17 	ldw	r2,-24(fp)
   18dac:	10bff304 	addi	r2,r2,-52
   18db0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   18db4:	e0bffb17 	ldw	r2,-20(fp)
   18db8:	10800c04 	addi	r2,r2,48
   18dbc:	e0fffc17 	ldw	r3,-16(fp)
   18dc0:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   18dc4:	e0bffb17 	ldw	r2,-20(fp)
   18dc8:	10800b04 	addi	r2,r2,44
   18dcc:	e0fffd17 	ldw	r3,-12(fp)
   18dd0:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   18dd4:	e0bffb17 	ldw	r2,-20(fp)
   18dd8:	10800a04 	addi	r2,r2,40
   18ddc:	e0fff917 	ldw	r3,-28(fp)
   18de0:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   18de4:	008000b4 	movhi	r2,2
   18de8:	10a32404 	addi	r2,r2,-29552
   18dec:	10c00104 	addi	r3,r2,4
   18df0:	e0bffb17 	ldw	r2,-20(fp)
   18df4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   18df8:	e0bffb17 	ldw	r2,-20(fp)
}
   18dfc:	e037883a 	mov	sp,fp
   18e00:	dfc00117 	ldw	ra,4(sp)
   18e04:	df000017 	ldw	fp,0(sp)
   18e08:	dec00204 	addi	sp,sp,8
   18e0c:	f800283a 	ret

00018e10 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   18e10:	defffe04 	addi	sp,sp,-8
   18e14:	df000115 	stw	fp,4(sp)
   18e18:	df000104 	addi	fp,sp,4
   18e1c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   18e20:	0001883a 	nop
   18e24:	e037883a 	mov	sp,fp
   18e28:	df000017 	ldw	fp,0(sp)
   18e2c:	dec00104 	addi	sp,sp,4
   18e30:	f800283a 	ret

00018e34 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   18e34:	defffe04 	addi	sp,sp,-8
   18e38:	df000115 	stw	fp,4(sp)
   18e3c:	df000104 	addi	fp,sp,4
   18e40:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   18e44:	0001883a 	nop
   18e48:	e037883a 	mov	sp,fp
   18e4c:	df000017 	ldw	fp,0(sp)
   18e50:	dec00104 	addi	sp,sp,4
   18e54:	f800283a 	ret

00018e58 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   18e58:	deffff04 	addi	sp,sp,-4
   18e5c:	df000015 	stw	fp,0(sp)
   18e60:	d839883a 	mov	fp,sp
}
   18e64:	0001883a 	nop
   18e68:	e037883a 	mov	sp,fp
   18e6c:	df000017 	ldw	fp,0(sp)
   18e70:	dec00104 	addi	sp,sp,4
   18e74:	f800283a 	ret

00018e78 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   18e78:	deffff04 	addi	sp,sp,-4
   18e7c:	df000015 	stw	fp,0(sp)
   18e80:	d839883a 	mov	fp,sp
}
   18e84:	0001883a 	nop
   18e88:	e037883a 	mov	sp,fp
   18e8c:	df000017 	ldw	fp,0(sp)
   18e90:	dec00104 	addi	sp,sp,4
   18e94:	f800283a 	ret

00018e98 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   18e98:	deffff04 	addi	sp,sp,-4
   18e9c:	df000015 	stw	fp,0(sp)
   18ea0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   18ea4:	0001883a 	nop
   18ea8:	e037883a 	mov	sp,fp
   18eac:	df000017 	ldw	fp,0(sp)
   18eb0:	dec00104 	addi	sp,sp,4
   18eb4:	f800283a 	ret

00018eb8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   18eb8:	deffff04 	addi	sp,sp,-4
   18ebc:	df000015 	stw	fp,0(sp)
   18ec0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   18ec4:	0001883a 	nop
   18ec8:	e037883a 	mov	sp,fp
   18ecc:	df000017 	ldw	fp,0(sp)
   18ed0:	dec00104 	addi	sp,sp,4
   18ed4:	f800283a 	ret

00018ed8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   18ed8:	deffff04 	addi	sp,sp,-4
   18edc:	df000015 	stw	fp,0(sp)
   18ee0:	d839883a 	mov	fp,sp
}
   18ee4:	0001883a 	nop
   18ee8:	e037883a 	mov	sp,fp
   18eec:	df000017 	ldw	fp,0(sp)
   18ef0:	dec00104 	addi	sp,sp,4
   18ef4:	f800283a 	ret

00018ef8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   18ef8:	deffff04 	addi	sp,sp,-4
   18efc:	df000015 	stw	fp,0(sp)
   18f00:	d839883a 	mov	fp,sp
}
   18f04:	0001883a 	nop
   18f08:	e037883a 	mov	sp,fp
   18f0c:	df000017 	ldw	fp,0(sp)
   18f10:	dec00104 	addi	sp,sp,4
   18f14:	f800283a 	ret

00018f18 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   18f18:	defffe04 	addi	sp,sp,-8
   18f1c:	df000115 	stw	fp,4(sp)
   18f20:	df000104 	addi	fp,sp,4
   18f24:	e13fff15 	stw	r4,-4(fp)
}
   18f28:	0001883a 	nop
   18f2c:	e037883a 	mov	sp,fp
   18f30:	df000017 	ldw	fp,0(sp)
   18f34:	dec00104 	addi	sp,sp,4
   18f38:	f800283a 	ret

00018f3c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   18f3c:	defffb04 	addi	sp,sp,-20
   18f40:	dfc00415 	stw	ra,16(sp)
   18f44:	df000315 	stw	fp,12(sp)
   18f48:	df000304 	addi	fp,sp,12
   18f4c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   18f50:	008000b4 	movhi	r2,2
   18f54:	10ae6b04 	addi	r2,r2,-18004
   18f58:	10800017 	ldw	r2,0(r2)
   18f5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   18f60:	00003106 	br	19028 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   18f64:	e0bffd17 	ldw	r2,-12(fp)
   18f68:	10800217 	ldw	r2,8(r2)
   18f6c:	1009883a 	mov	r4,r2
   18f70:	0006e500 	call	6e50 <strlen>
   18f74:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   18f78:	e0bffd17 	ldw	r2,-12(fp)
   18f7c:	10c00217 	ldw	r3,8(r2)
   18f80:	e0bffe17 	ldw	r2,-8(fp)
   18f84:	10bfffc4 	addi	r2,r2,-1
   18f88:	1885883a 	add	r2,r3,r2
   18f8c:	10800003 	ldbu	r2,0(r2)
   18f90:	10803fcc 	andi	r2,r2,255
   18f94:	1080201c 	xori	r2,r2,128
   18f98:	10bfe004 	addi	r2,r2,-128
   18f9c:	10800bd8 	cmpnei	r2,r2,47
   18fa0:	1000031e 	bne	r2,zero,18fb0 <alt_find_file+0x74>
    {
      len -= 1;
   18fa4:	e0bffe17 	ldw	r2,-8(fp)
   18fa8:	10bfffc4 	addi	r2,r2,-1
   18fac:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   18fb0:	e0bffe17 	ldw	r2,-8(fp)
   18fb4:	e0ffff17 	ldw	r3,-4(fp)
   18fb8:	1885883a 	add	r2,r3,r2
   18fbc:	10800003 	ldbu	r2,0(r2)
   18fc0:	10803fcc 	andi	r2,r2,255
   18fc4:	1080201c 	xori	r2,r2,128
   18fc8:	10bfe004 	addi	r2,r2,-128
   18fcc:	10800be0 	cmpeqi	r2,r2,47
   18fd0:	1000081e 	bne	r2,zero,18ff4 <alt_find_file+0xb8>
   18fd4:	e0bffe17 	ldw	r2,-8(fp)
   18fd8:	e0ffff17 	ldw	r3,-4(fp)
   18fdc:	1885883a 	add	r2,r3,r2
   18fe0:	10800003 	ldbu	r2,0(r2)
   18fe4:	10803fcc 	andi	r2,r2,255
   18fe8:	1080201c 	xori	r2,r2,128
   18fec:	10bfe004 	addi	r2,r2,-128
   18ff0:	10000a1e 	bne	r2,zero,1901c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   18ff4:	e0bffd17 	ldw	r2,-12(fp)
   18ff8:	10800217 	ldw	r2,8(r2)
   18ffc:	e0fffe17 	ldw	r3,-8(fp)
   19000:	180d883a 	mov	r6,r3
   19004:	e17fff17 	ldw	r5,-4(fp)
   19008:	1009883a 	mov	r4,r2
   1900c:	00192c40 	call	192c4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   19010:	1000021e 	bne	r2,zero,1901c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   19014:	e0bffd17 	ldw	r2,-12(fp)
   19018:	00000806 	br	1903c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1901c:	e0bffd17 	ldw	r2,-12(fp)
   19020:	10800017 	ldw	r2,0(r2)
   19024:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   19028:	e0fffd17 	ldw	r3,-12(fp)
   1902c:	008000b4 	movhi	r2,2
   19030:	10ae6b04 	addi	r2,r2,-18004
   19034:	18bfcb1e 	bne	r3,r2,18f64 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   19038:	0005883a 	mov	r2,zero
}
   1903c:	e037883a 	mov	sp,fp
   19040:	dfc00117 	ldw	ra,4(sp)
   19044:	df000017 	ldw	fp,0(sp)
   19048:	dec00204 	addi	sp,sp,8
   1904c:	f800283a 	ret

00019050 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   19050:	defff904 	addi	sp,sp,-28
   19054:	dfc00615 	stw	ra,24(sp)
   19058:	df000515 	stw	fp,20(sp)
   1905c:	df000504 	addi	fp,sp,20
   19060:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   19064:	00bffa04 	movi	r2,-24
   19068:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1906c:	008000b4 	movhi	r2,2
   19070:	10b65204 	addi	r2,r2,-9912
   19074:	10800017 	ldw	r2,0(r2)
   19078:	e0bffd15 	stw	r2,-12(fp)
   1907c:	e03ffe0d 	sth	zero,-8(fp)
   19080:	e0bffe0b 	ldhu	r2,-8(fp)
   19084:	e0fffe84 	addi	r3,fp,-6
   19088:	180d883a 	mov	r6,r3
   1908c:	100b883a 	mov	r5,r2
   19090:	e13ffd17 	ldw	r4,-12(fp)
   19094:	00136a40 	call	136a4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   19098:	e03ffb15 	stw	zero,-20(fp)
   1909c:	00001d06 	br	19114 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   190a0:	008000b4 	movhi	r2,2
   190a4:	10a91b04 	addi	r2,r2,-23444
   190a8:	e0fffb17 	ldw	r3,-20(fp)
   190ac:	18c00324 	muli	r3,r3,12
   190b0:	10c5883a 	add	r2,r2,r3
   190b4:	10800017 	ldw	r2,0(r2)
   190b8:	1000131e 	bne	r2,zero,19108 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   190bc:	008000b4 	movhi	r2,2
   190c0:	10a91b04 	addi	r2,r2,-23444
   190c4:	e0fffb17 	ldw	r3,-20(fp)
   190c8:	18c00324 	muli	r3,r3,12
   190cc:	10c5883a 	add	r2,r2,r3
   190d0:	e0ffff17 	ldw	r3,-4(fp)
   190d4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   190d8:	008000b4 	movhi	r2,2
   190dc:	10ae6f04 	addi	r2,r2,-17988
   190e0:	10c00017 	ldw	r3,0(r2)
   190e4:	e0bffb17 	ldw	r2,-20(fp)
   190e8:	1880040e 	bge	r3,r2,190fc <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   190ec:	008000b4 	movhi	r2,2
   190f0:	10ae6f04 	addi	r2,r2,-17988
   190f4:	e0fffb17 	ldw	r3,-20(fp)
   190f8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   190fc:	e0bffb17 	ldw	r2,-20(fp)
   19100:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   19104:	00000606 	br	19120 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   19108:	e0bffb17 	ldw	r2,-20(fp)
   1910c:	10800044 	addi	r2,r2,1
   19110:	e0bffb15 	stw	r2,-20(fp)
   19114:	e0bffb17 	ldw	r2,-20(fp)
   19118:	10800810 	cmplti	r2,r2,32
   1911c:	103fe01e 	bne	r2,zero,190a0 <alt_get_fd+0x50>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   19120:	008000b4 	movhi	r2,2
   19124:	10b65204 	addi	r2,r2,-9912
   19128:	10800017 	ldw	r2,0(r2)
   1912c:	1009883a 	mov	r4,r2
   19130:	0013a7c0 	call	13a7c <OSSemPost>

  return rc;
   19134:	e0bffc17 	ldw	r2,-16(fp)
}
   19138:	e037883a 	mov	sp,fp
   1913c:	dfc00117 	ldw	ra,4(sp)
   19140:	df000017 	ldw	fp,0(sp)
   19144:	dec00204 	addi	sp,sp,8
   19148:	f800283a 	ret

0001914c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1914c:	defffb04 	addi	sp,sp,-20
   19150:	df000415 	stw	fp,16(sp)
   19154:	df000404 	addi	fp,sp,16
   19158:	e13ffe15 	stw	r4,-8(fp)
   1915c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   19160:	e0bfff17 	ldw	r2,-4(fp)
   19164:	10840070 	cmpltui	r2,r2,4097
   19168:	1000021e 	bne	r2,zero,19174 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1916c:	00840004 	movi	r2,4096
   19170:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   19174:	e0fffe17 	ldw	r3,-8(fp)
   19178:	e0bfff17 	ldw	r2,-4(fp)
   1917c:	1885883a 	add	r2,r3,r2
   19180:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   19184:	e0bffe17 	ldw	r2,-8(fp)
   19188:	e0bffc15 	stw	r2,-16(fp)
   1918c:	00000506 	br	191a4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   19190:	e0bffc17 	ldw	r2,-16(fp)
   19194:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   19198:	e0bffc17 	ldw	r2,-16(fp)
   1919c:	10800804 	addi	r2,r2,32
   191a0:	e0bffc15 	stw	r2,-16(fp)
   191a4:	e0fffc17 	ldw	r3,-16(fp)
   191a8:	e0bffd17 	ldw	r2,-12(fp)
   191ac:	18bff836 	bltu	r3,r2,19190 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   191b0:	e0bffe17 	ldw	r2,-8(fp)
   191b4:	108007cc 	andi	r2,r2,31
   191b8:	10000226 	beq	r2,zero,191c4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   191bc:	e0bffc17 	ldw	r2,-16(fp)
   191c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   191c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   191c8:	0001883a 	nop
   191cc:	e037883a 	mov	sp,fp
   191d0:	df000017 	ldw	fp,0(sp)
   191d4:	dec00104 	addi	sp,sp,4
   191d8:	f800283a 	ret

000191dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   191dc:	defffe04 	addi	sp,sp,-8
   191e0:	df000115 	stw	fp,4(sp)
   191e4:	df000104 	addi	fp,sp,4
   191e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   191ec:	e0bfff17 	ldw	r2,-4(fp)
   191f0:	10bffe84 	addi	r2,r2,-6
   191f4:	10c00428 	cmpgeui	r3,r2,16
   191f8:	18001a1e 	bne	r3,zero,19264 <alt_exception_cause_generated_bad_addr+0x88>
   191fc:	100690ba 	slli	r3,r2,2
   19200:	008000b4 	movhi	r2,2
   19204:	10a48504 	addi	r2,r2,-28140
   19208:	1885883a 	add	r2,r3,r2
   1920c:	10800017 	ldw	r2,0(r2)
   19210:	1000683a 	jmp	r2
   19214:	00019254 	movui	zero,1609
   19218:	00019254 	movui	zero,1609
   1921c:	00019264 	muli	zero,zero,1609
   19220:	00019264 	muli	zero,zero,1609
   19224:	00019264 	muli	zero,zero,1609
   19228:	00019254 	movui	zero,1609
   1922c:	0001925c 	xori	zero,zero,1609
   19230:	00019264 	muli	zero,zero,1609
   19234:	00019254 	movui	zero,1609
   19238:	00019254 	movui	zero,1609
   1923c:	00019264 	muli	zero,zero,1609
   19240:	00019254 	movui	zero,1609
   19244:	0001925c 	xori	zero,zero,1609
   19248:	00019264 	muli	zero,zero,1609
   1924c:	00019264 	muli	zero,zero,1609
   19250:	00019254 	movui	zero,1609
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   19254:	00800044 	movi	r2,1
   19258:	00000306 	br	19268 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1925c:	0005883a 	mov	r2,zero
   19260:	00000106 	br	19268 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   19264:	0005883a 	mov	r2,zero
  }
}
   19268:	e037883a 	mov	sp,fp
   1926c:	df000017 	ldw	fp,0(sp)
   19270:	dec00104 	addi	sp,sp,4
   19274:	f800283a 	ret

00019278 <atexit>:
   19278:	200b883a 	mov	r5,r4
   1927c:	000f883a 	mov	r7,zero
   19280:	000d883a 	mov	r6,zero
   19284:	0009883a 	mov	r4,zero
   19288:	00193401 	jmpi	19340 <__register_exitproc>

0001928c <exit>:
   1928c:	defffe04 	addi	sp,sp,-8
   19290:	000b883a 	mov	r5,zero
   19294:	dc000015 	stw	r16,0(sp)
   19298:	dfc00115 	stw	ra,4(sp)
   1929c:	2021883a 	mov	r16,r4
   192a0:	00194580 	call	19458 <__call_exitprocs>
   192a4:	008000b4 	movhi	r2,2
   192a8:	10ae6504 	addi	r2,r2,-18028
   192ac:	11000017 	ldw	r4,0(r2)
   192b0:	20800f17 	ldw	r2,60(r4)
   192b4:	10000126 	beq	r2,zero,192bc <exit+0x30>
   192b8:	103ee83a 	callr	r2
   192bc:	8009883a 	mov	r4,r16
   192c0:	00195d80 	call	195d8 <_exit>

000192c4 <memcmp>:
   192c4:	01c000c4 	movi	r7,3
   192c8:	3980192e 	bgeu	r7,r6,19330 <memcmp+0x6c>
   192cc:	2144b03a 	or	r2,r4,r5
   192d0:	11c4703a 	and	r2,r2,r7
   192d4:	10000f26 	beq	r2,zero,19314 <memcmp+0x50>
   192d8:	20800003 	ldbu	r2,0(r4)
   192dc:	28c00003 	ldbu	r3,0(r5)
   192e0:	10c0151e 	bne	r2,r3,19338 <memcmp+0x74>
   192e4:	31bfff84 	addi	r6,r6,-2
   192e8:	01ffffc4 	movi	r7,-1
   192ec:	00000406 	br	19300 <memcmp+0x3c>
   192f0:	20800003 	ldbu	r2,0(r4)
   192f4:	28c00003 	ldbu	r3,0(r5)
   192f8:	31bfffc4 	addi	r6,r6,-1
   192fc:	10c00e1e 	bne	r2,r3,19338 <memcmp+0x74>
   19300:	21000044 	addi	r4,r4,1
   19304:	29400044 	addi	r5,r5,1
   19308:	31fff91e 	bne	r6,r7,192f0 <memcmp+0x2c>
   1930c:	0005883a 	mov	r2,zero
   19310:	f800283a 	ret
   19314:	20c00017 	ldw	r3,0(r4)
   19318:	28800017 	ldw	r2,0(r5)
   1931c:	18bfee1e 	bne	r3,r2,192d8 <memcmp+0x14>
   19320:	31bfff04 	addi	r6,r6,-4
   19324:	21000104 	addi	r4,r4,4
   19328:	29400104 	addi	r5,r5,4
   1932c:	39bff936 	bltu	r7,r6,19314 <memcmp+0x50>
   19330:	303fe91e 	bne	r6,zero,192d8 <memcmp+0x14>
   19334:	003ff506 	br	1930c <memcmp+0x48>
   19338:	10c5c83a 	sub	r2,r2,r3
   1933c:	f800283a 	ret

00019340 <__register_exitproc>:
   19340:	defffa04 	addi	sp,sp,-24
   19344:	dc000315 	stw	r16,12(sp)
   19348:	040000b4 	movhi	r16,2
   1934c:	842e6504 	addi	r16,r16,-18028
   19350:	80c00017 	ldw	r3,0(r16)
   19354:	dc400415 	stw	r17,16(sp)
   19358:	dfc00515 	stw	ra,20(sp)
   1935c:	18805217 	ldw	r2,328(r3)
   19360:	2023883a 	mov	r17,r4
   19364:	10003726 	beq	r2,zero,19444 <__register_exitproc+0x104>
   19368:	10c00117 	ldw	r3,4(r2)
   1936c:	010007c4 	movi	r4,31
   19370:	20c00e16 	blt	r4,r3,193ac <__register_exitproc+0x6c>
   19374:	1a000044 	addi	r8,r3,1
   19378:	8800221e 	bne	r17,zero,19404 <__register_exitproc+0xc4>
   1937c:	18c00084 	addi	r3,r3,2
   19380:	18c7883a 	add	r3,r3,r3
   19384:	18c7883a 	add	r3,r3,r3
   19388:	12000115 	stw	r8,4(r2)
   1938c:	10c7883a 	add	r3,r2,r3
   19390:	19400015 	stw	r5,0(r3)
   19394:	0005883a 	mov	r2,zero
   19398:	dfc00517 	ldw	ra,20(sp)
   1939c:	dc400417 	ldw	r17,16(sp)
   193a0:	dc000317 	ldw	r16,12(sp)
   193a4:	dec00604 	addi	sp,sp,24
   193a8:	f800283a 	ret
   193ac:	00800034 	movhi	r2,0
   193b0:	10800004 	addi	r2,r2,0
   193b4:	10002626 	beq	r2,zero,19450 <__register_exitproc+0x110>
   193b8:	01006404 	movi	r4,400
   193bc:	d9400015 	stw	r5,0(sp)
   193c0:	d9800115 	stw	r6,4(sp)
   193c4:	d9c00215 	stw	r7,8(sp)
   193c8:	00000000 	call	0 <__alt_mem_SDRAM>
   193cc:	d9400017 	ldw	r5,0(sp)
   193d0:	d9800117 	ldw	r6,4(sp)
   193d4:	d9c00217 	ldw	r7,8(sp)
   193d8:	10001d26 	beq	r2,zero,19450 <__register_exitproc+0x110>
   193dc:	81000017 	ldw	r4,0(r16)
   193e0:	10000115 	stw	zero,4(r2)
   193e4:	02000044 	movi	r8,1
   193e8:	22405217 	ldw	r9,328(r4)
   193ec:	0007883a 	mov	r3,zero
   193f0:	12400015 	stw	r9,0(r2)
   193f4:	20805215 	stw	r2,328(r4)
   193f8:	10006215 	stw	zero,392(r2)
   193fc:	10006315 	stw	zero,396(r2)
   19400:	883fde26 	beq	r17,zero,1937c <__register_exitproc+0x3c>
   19404:	18c9883a 	add	r4,r3,r3
   19408:	2109883a 	add	r4,r4,r4
   1940c:	1109883a 	add	r4,r2,r4
   19410:	21802215 	stw	r6,136(r4)
   19414:	01800044 	movi	r6,1
   19418:	12406217 	ldw	r9,392(r2)
   1941c:	30cc983a 	sll	r6,r6,r3
   19420:	4992b03a 	or	r9,r9,r6
   19424:	12406215 	stw	r9,392(r2)
   19428:	21c04215 	stw	r7,264(r4)
   1942c:	01000084 	movi	r4,2
   19430:	893fd21e 	bne	r17,r4,1937c <__register_exitproc+0x3c>
   19434:	11006317 	ldw	r4,396(r2)
   19438:	218cb03a 	or	r6,r4,r6
   1943c:	11806315 	stw	r6,396(r2)
   19440:	003fce06 	br	1937c <__register_exitproc+0x3c>
   19444:	18805304 	addi	r2,r3,332
   19448:	18805215 	stw	r2,328(r3)
   1944c:	003fc606 	br	19368 <__register_exitproc+0x28>
   19450:	00bfffc4 	movi	r2,-1
   19454:	003fd006 	br	19398 <__register_exitproc+0x58>

00019458 <__call_exitprocs>:
   19458:	defff504 	addi	sp,sp,-44
   1945c:	df000915 	stw	fp,36(sp)
   19460:	dd400615 	stw	r21,24(sp)
   19464:	dc800315 	stw	r18,12(sp)
   19468:	dfc00a15 	stw	ra,40(sp)
   1946c:	ddc00815 	stw	r23,32(sp)
   19470:	dd800715 	stw	r22,28(sp)
   19474:	dd000515 	stw	r20,20(sp)
   19478:	dcc00415 	stw	r19,16(sp)
   1947c:	dc400215 	stw	r17,8(sp)
   19480:	dc000115 	stw	r16,4(sp)
   19484:	d9000015 	stw	r4,0(sp)
   19488:	2839883a 	mov	fp,r5
   1948c:	04800044 	movi	r18,1
   19490:	057fffc4 	movi	r21,-1
   19494:	008000b4 	movhi	r2,2
   19498:	10ae6504 	addi	r2,r2,-18028
   1949c:	12000017 	ldw	r8,0(r2)
   194a0:	45005217 	ldw	r20,328(r8)
   194a4:	44c05204 	addi	r19,r8,328
   194a8:	a0001c26 	beq	r20,zero,1951c <__call_exitprocs+0xc4>
   194ac:	a0800117 	ldw	r2,4(r20)
   194b0:	15ffffc4 	addi	r23,r2,-1
   194b4:	b8000d16 	blt	r23,zero,194ec <__call_exitprocs+0x94>
   194b8:	14000044 	addi	r16,r2,1
   194bc:	8421883a 	add	r16,r16,r16
   194c0:	8421883a 	add	r16,r16,r16
   194c4:	84402004 	addi	r17,r16,128
   194c8:	a463883a 	add	r17,r20,r17
   194cc:	a421883a 	add	r16,r20,r16
   194d0:	e0001e26 	beq	fp,zero,1954c <__call_exitprocs+0xf4>
   194d4:	80804017 	ldw	r2,256(r16)
   194d8:	e0801c26 	beq	fp,r2,1954c <__call_exitprocs+0xf4>
   194dc:	bdffffc4 	addi	r23,r23,-1
   194e0:	843fff04 	addi	r16,r16,-4
   194e4:	8c7fff04 	addi	r17,r17,-4
   194e8:	bd7ff91e 	bne	r23,r21,194d0 <__call_exitprocs+0x78>
   194ec:	00800034 	movhi	r2,0
   194f0:	10800004 	addi	r2,r2,0
   194f4:	10000926 	beq	r2,zero,1951c <__call_exitprocs+0xc4>
   194f8:	a0800117 	ldw	r2,4(r20)
   194fc:	1000301e 	bne	r2,zero,195c0 <__call_exitprocs+0x168>
   19500:	a0800017 	ldw	r2,0(r20)
   19504:	10003226 	beq	r2,zero,195d0 <__call_exitprocs+0x178>
   19508:	a009883a 	mov	r4,r20
   1950c:	98800015 	stw	r2,0(r19)
   19510:	00000000 	call	0 <__alt_mem_SDRAM>
   19514:	9d000017 	ldw	r20,0(r19)
   19518:	a03fe41e 	bne	r20,zero,194ac <__call_exitprocs+0x54>
   1951c:	dfc00a17 	ldw	ra,40(sp)
   19520:	df000917 	ldw	fp,36(sp)
   19524:	ddc00817 	ldw	r23,32(sp)
   19528:	dd800717 	ldw	r22,28(sp)
   1952c:	dd400617 	ldw	r21,24(sp)
   19530:	dd000517 	ldw	r20,20(sp)
   19534:	dcc00417 	ldw	r19,16(sp)
   19538:	dc800317 	ldw	r18,12(sp)
   1953c:	dc400217 	ldw	r17,8(sp)
   19540:	dc000117 	ldw	r16,4(sp)
   19544:	dec00b04 	addi	sp,sp,44
   19548:	f800283a 	ret
   1954c:	a0800117 	ldw	r2,4(r20)
   19550:	80c00017 	ldw	r3,0(r16)
   19554:	10bfffc4 	addi	r2,r2,-1
   19558:	15c01426 	beq	r2,r23,195ac <__call_exitprocs+0x154>
   1955c:	80000015 	stw	zero,0(r16)
   19560:	183fde26 	beq	r3,zero,194dc <__call_exitprocs+0x84>
   19564:	95c8983a 	sll	r4,r18,r23
   19568:	a0806217 	ldw	r2,392(r20)
   1956c:	a5800117 	ldw	r22,4(r20)
   19570:	2084703a 	and	r2,r4,r2
   19574:	10000b26 	beq	r2,zero,195a4 <__call_exitprocs+0x14c>
   19578:	a0806317 	ldw	r2,396(r20)
   1957c:	2088703a 	and	r4,r4,r2
   19580:	20000c1e 	bne	r4,zero,195b4 <__call_exitprocs+0x15c>
   19584:	89400017 	ldw	r5,0(r17)
   19588:	d9000017 	ldw	r4,0(sp)
   1958c:	183ee83a 	callr	r3
   19590:	a0800117 	ldw	r2,4(r20)
   19594:	15bfbf1e 	bne	r2,r22,19494 <__call_exitprocs+0x3c>
   19598:	98800017 	ldw	r2,0(r19)
   1959c:	153fcf26 	beq	r2,r20,194dc <__call_exitprocs+0x84>
   195a0:	003fbc06 	br	19494 <__call_exitprocs+0x3c>
   195a4:	183ee83a 	callr	r3
   195a8:	003ff906 	br	19590 <__call_exitprocs+0x138>
   195ac:	a5c00115 	stw	r23,4(r20)
   195b0:	003feb06 	br	19560 <__call_exitprocs+0x108>
   195b4:	89000017 	ldw	r4,0(r17)
   195b8:	183ee83a 	callr	r3
   195bc:	003ff406 	br	19590 <__call_exitprocs+0x138>
   195c0:	a0800017 	ldw	r2,0(r20)
   195c4:	a027883a 	mov	r19,r20
   195c8:	1029883a 	mov	r20,r2
   195cc:	003fb606 	br	194a8 <__call_exitprocs+0x50>
   195d0:	0005883a 	mov	r2,zero
   195d4:	003ffb06 	br	195c4 <__call_exitprocs+0x16c>

000195d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   195d8:	defffd04 	addi	sp,sp,-12
   195dc:	df000215 	stw	fp,8(sp)
   195e0:	df000204 	addi	fp,sp,8
   195e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   195e8:	008000b4 	movhi	r2,2
   195ec:	10b65a44 	addi	r2,r2,-9879
   195f0:	10000005 	stb	zero,0(r2)
   195f4:	e0bfff17 	ldw	r2,-4(fp)
   195f8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   195fc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   19600:	10000226 	beq	r2,zero,1960c <_exit+0x34>
    ALT_SIM_FAIL();
   19604:	002af070 	cmpltui	zero,zero,43969
   19608:	00000106 	br	19610 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1960c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   19610:	003fff06 	br	19610 <_exit+0x38>
